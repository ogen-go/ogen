// Code generated by ogen, DO NOT EDIT.

package api

import (
	"reflect"

	"github.com/ogen-go/ogen/ogenreflect"
)

// API is generated API metadata.
var API = api{
	Paths: paths{
		CreatePets: ogenreflect.RuntimeOperation{
			Name: "CreatePets",
			ID:   "createPets",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(CreatePetsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*CreatePetsCreated)).Elem(),
						reflect.TypeOf(new(*ErrorStatusCode)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"201": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
						"default": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ErrorStatusCode)).Elem(),
							},
						},
					},
				},
			},
		},
		ListPets: ogenreflect.RuntimeOperation{
			Name: "ListPets",
			ID:   "listPets",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListPetsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt32)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListPetsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PetsHeaders)).Elem(),
						reflect.TypeOf(new(*ErrorStatusCode)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{
								"x-next": ogenreflect.ParameterType{
									Type:     reflect.TypeOf(new(OptString)).Elem(),
									Name:     "x-next",
									In:       "header",
									Style:    "simple",
									Explode:  false,
									Required: false,
								},
							},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PetsHeaders)).Elem(),
							},
						},
						"default": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ErrorStatusCode)).Elem(),
							},
						},
					},
				},
			},
		},
		ShowPetById: ogenreflect.RuntimeOperation{
			Name: "ShowPetById",
			ID:   "showPetById",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ShowPetByIdParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "petId",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "petId",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ShowPetByIdRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Pet)).Elem(),
						reflect.TypeOf(new(*ErrorStatusCode)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Pet)).Elem(),
							},
						},
						"default": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(ErrorStatusCode)).Elem(),
							},
						},
					},
				},
			},
		},
	},
}

type api struct {
	Paths paths
}

type paths struct {
	CreatePets  ogenreflect.RuntimeOperation
	ListPets    ogenreflect.RuntimeOperation
	ShowPetById ogenreflect.RuntimeOperation
}

func getPaths() paths {
	return API.Paths
}

// FindByName finds operation by ogen name.
func (p paths) FindByName(name string) (op ogenreflect.RuntimeOperation, _ bool) {
	switch name {
	case "CreatePets":
		return p.CreatePets, true
	case "ListPets":
		return p.ListPets, true
	case "ShowPetById":
		return p.ShowPetById, true
	default:
		return op, false
	}
}

// FindByOperationID finds operation by operationId.
func (p paths) FindByOperationID(operationID string) (op ogenreflect.RuntimeOperation, _ bool) {
	switch operationID {
	case "createPets":
		return p.CreatePets, true
	case "listPets":
		return p.ListPets, true
	case "showPetById":
		return p.ShowPetById, true
	default:
		return op, false
	}
}

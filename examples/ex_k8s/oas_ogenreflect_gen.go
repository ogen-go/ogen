// Code generated by ogen, DO NOT EDIT.

package api

import (
	"reflect"

	"github.com/ogen-go/ogen/ogenreflect"
)

// API is generated API metadata.
var API = api{
	Paths: paths{
		ConnectCoreV1DeleteNamespacedPodProxy: ogenreflect.RuntimeOperation{
			Name: "ConnectCoreV1DeleteNamespacedPodProxy",
			ID:   "connectCoreV1DeleteNamespacedPodProxy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ConnectCoreV1DeleteNamespacedPodProxyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "path",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ConnectCoreV1DeleteNamespacedPodProxyRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ConnectCoreV1DeleteNamespacedPodProxyOK)).Elem(),
						reflect.TypeOf(new(*ConnectCoreV1DeleteNamespacedPodProxyUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"*/*": reflect.TypeOf(new(ConnectCoreV1DeleteNamespacedPodProxyOK)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ConnectCoreV1DeleteNamespacedPodProxyWithPath: ogenreflect.RuntimeOperation{
			Name: "ConnectCoreV1DeleteNamespacedPodProxyWithPath",
			ID:   "connectCoreV1DeleteNamespacedPodProxyWithPath",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ConnectCoreV1DeleteNamespacedPodProxyWithPathParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "path",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "path",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ConnectCoreV1DeleteNamespacedPodProxyWithPathRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ConnectCoreV1DeleteNamespacedPodProxyWithPathOK)).Elem(),
						reflect.TypeOf(new(*ConnectCoreV1DeleteNamespacedPodProxyWithPathUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"*/*": reflect.TypeOf(new(ConnectCoreV1DeleteNamespacedPodProxyWithPathOK)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ConnectCoreV1DeleteNamespacedServiceProxy: ogenreflect.RuntimeOperation{
			Name: "ConnectCoreV1DeleteNamespacedServiceProxy",
			ID:   "connectCoreV1DeleteNamespacedServiceProxy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ConnectCoreV1DeleteNamespacedServiceProxyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "path",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ConnectCoreV1DeleteNamespacedServiceProxyRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ConnectCoreV1DeleteNamespacedServiceProxyOK)).Elem(),
						reflect.TypeOf(new(*ConnectCoreV1DeleteNamespacedServiceProxyUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"*/*": reflect.TypeOf(new(ConnectCoreV1DeleteNamespacedServiceProxyOK)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ConnectCoreV1DeleteNamespacedServiceProxyWithPath: ogenreflect.RuntimeOperation{
			Name: "ConnectCoreV1DeleteNamespacedServiceProxyWithPath",
			ID:   "connectCoreV1DeleteNamespacedServiceProxyWithPath",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ConnectCoreV1DeleteNamespacedServiceProxyWithPathParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "path",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "path",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ConnectCoreV1DeleteNamespacedServiceProxyWithPathRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ConnectCoreV1DeleteNamespacedServiceProxyWithPathOK)).Elem(),
						reflect.TypeOf(new(*ConnectCoreV1DeleteNamespacedServiceProxyWithPathUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"*/*": reflect.TypeOf(new(ConnectCoreV1DeleteNamespacedServiceProxyWithPathOK)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ConnectCoreV1DeleteNodeProxy: ogenreflect.RuntimeOperation{
			Name: "ConnectCoreV1DeleteNodeProxy",
			ID:   "connectCoreV1DeleteNodeProxy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ConnectCoreV1DeleteNodeProxyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "path",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ConnectCoreV1DeleteNodeProxyRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ConnectCoreV1DeleteNodeProxyOK)).Elem(),
						reflect.TypeOf(new(*ConnectCoreV1DeleteNodeProxyUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"*/*": reflect.TypeOf(new(ConnectCoreV1DeleteNodeProxyOK)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ConnectCoreV1DeleteNodeProxyWithPath: ogenreflect.RuntimeOperation{
			Name: "ConnectCoreV1DeleteNodeProxyWithPath",
			ID:   "connectCoreV1DeleteNodeProxyWithPath",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ConnectCoreV1DeleteNodeProxyWithPathParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "path",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "path",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ConnectCoreV1DeleteNodeProxyWithPathRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ConnectCoreV1DeleteNodeProxyWithPathOK)).Elem(),
						reflect.TypeOf(new(*ConnectCoreV1DeleteNodeProxyWithPathUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"*/*": reflect.TypeOf(new(ConnectCoreV1DeleteNodeProxyWithPathOK)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ConnectCoreV1GetNamespacedPodAttach: ogenreflect.RuntimeOperation{
			Name: "ConnectCoreV1GetNamespacedPodAttach",
			ID:   "connectCoreV1GetNamespacedPodAttach",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ConnectCoreV1GetNamespacedPodAttachParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "container",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "container",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "stderr",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "stderr",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "stdin",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "stdin",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "stdout",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "stdout",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "tty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "tty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ConnectCoreV1GetNamespacedPodAttachRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ConnectCoreV1GetNamespacedPodAttachOK)).Elem(),
						reflect.TypeOf(new(*ConnectCoreV1GetNamespacedPodAttachUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"*/*": reflect.TypeOf(new(ConnectCoreV1GetNamespacedPodAttachOK)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ConnectCoreV1GetNamespacedPodExec: ogenreflect.RuntimeOperation{
			Name: "ConnectCoreV1GetNamespacedPodExec",
			ID:   "connectCoreV1GetNamespacedPodExec",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ConnectCoreV1GetNamespacedPodExecParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "command",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "command",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "container",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "container",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "stderr",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "stderr",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "stdin",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "stdin",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "stdout",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "stdout",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "tty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "tty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ConnectCoreV1GetNamespacedPodExecRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ConnectCoreV1GetNamespacedPodExecOK)).Elem(),
						reflect.TypeOf(new(*ConnectCoreV1GetNamespacedPodExecUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"*/*": reflect.TypeOf(new(ConnectCoreV1GetNamespacedPodExecOK)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ConnectCoreV1GetNamespacedPodPortforward: ogenreflect.RuntimeOperation{
			Name: "ConnectCoreV1GetNamespacedPodPortforward",
			ID:   "connectCoreV1GetNamespacedPodPortforward",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ConnectCoreV1GetNamespacedPodPortforwardParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "ports",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "ports",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ConnectCoreV1GetNamespacedPodPortforwardRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ConnectCoreV1GetNamespacedPodPortforwardOK)).Elem(),
						reflect.TypeOf(new(*ConnectCoreV1GetNamespacedPodPortforwardUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"*/*": reflect.TypeOf(new(ConnectCoreV1GetNamespacedPodPortforwardOK)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ConnectCoreV1GetNamespacedPodProxy: ogenreflect.RuntimeOperation{
			Name: "ConnectCoreV1GetNamespacedPodProxy",
			ID:   "connectCoreV1GetNamespacedPodProxy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ConnectCoreV1GetNamespacedPodProxyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "path",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ConnectCoreV1GetNamespacedPodProxyRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ConnectCoreV1GetNamespacedPodProxyOK)).Elem(),
						reflect.TypeOf(new(*ConnectCoreV1GetNamespacedPodProxyUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"*/*": reflect.TypeOf(new(ConnectCoreV1GetNamespacedPodProxyOK)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ConnectCoreV1GetNamespacedPodProxyWithPath: ogenreflect.RuntimeOperation{
			Name: "ConnectCoreV1GetNamespacedPodProxyWithPath",
			ID:   "connectCoreV1GetNamespacedPodProxyWithPath",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ConnectCoreV1GetNamespacedPodProxyWithPathParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "path",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "path",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ConnectCoreV1GetNamespacedPodProxyWithPathRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ConnectCoreV1GetNamespacedPodProxyWithPathOK)).Elem(),
						reflect.TypeOf(new(*ConnectCoreV1GetNamespacedPodProxyWithPathUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"*/*": reflect.TypeOf(new(ConnectCoreV1GetNamespacedPodProxyWithPathOK)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ConnectCoreV1GetNamespacedServiceProxy: ogenreflect.RuntimeOperation{
			Name: "ConnectCoreV1GetNamespacedServiceProxy",
			ID:   "connectCoreV1GetNamespacedServiceProxy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ConnectCoreV1GetNamespacedServiceProxyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "path",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ConnectCoreV1GetNamespacedServiceProxyRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ConnectCoreV1GetNamespacedServiceProxyOK)).Elem(),
						reflect.TypeOf(new(*ConnectCoreV1GetNamespacedServiceProxyUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"*/*": reflect.TypeOf(new(ConnectCoreV1GetNamespacedServiceProxyOK)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ConnectCoreV1GetNamespacedServiceProxyWithPath: ogenreflect.RuntimeOperation{
			Name: "ConnectCoreV1GetNamespacedServiceProxyWithPath",
			ID:   "connectCoreV1GetNamespacedServiceProxyWithPath",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ConnectCoreV1GetNamespacedServiceProxyWithPathParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "path",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "path",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ConnectCoreV1GetNamespacedServiceProxyWithPathRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ConnectCoreV1GetNamespacedServiceProxyWithPathOK)).Elem(),
						reflect.TypeOf(new(*ConnectCoreV1GetNamespacedServiceProxyWithPathUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"*/*": reflect.TypeOf(new(ConnectCoreV1GetNamespacedServiceProxyWithPathOK)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ConnectCoreV1GetNodeProxy: ogenreflect.RuntimeOperation{
			Name: "ConnectCoreV1GetNodeProxy",
			ID:   "connectCoreV1GetNodeProxy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ConnectCoreV1GetNodeProxyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "path",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ConnectCoreV1GetNodeProxyRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ConnectCoreV1GetNodeProxyOK)).Elem(),
						reflect.TypeOf(new(*ConnectCoreV1GetNodeProxyUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"*/*": reflect.TypeOf(new(ConnectCoreV1GetNodeProxyOK)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ConnectCoreV1GetNodeProxyWithPath: ogenreflect.RuntimeOperation{
			Name: "ConnectCoreV1GetNodeProxyWithPath",
			ID:   "connectCoreV1GetNodeProxyWithPath",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ConnectCoreV1GetNodeProxyWithPathParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "path",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "path",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ConnectCoreV1GetNodeProxyWithPathRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ConnectCoreV1GetNodeProxyWithPathOK)).Elem(),
						reflect.TypeOf(new(*ConnectCoreV1GetNodeProxyWithPathUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"*/*": reflect.TypeOf(new(ConnectCoreV1GetNodeProxyWithPathOK)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ConnectCoreV1HeadNamespacedPodProxy: ogenreflect.RuntimeOperation{
			Name: "ConnectCoreV1HeadNamespacedPodProxy",
			ID:   "connectCoreV1HeadNamespacedPodProxy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ConnectCoreV1HeadNamespacedPodProxyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "path",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ConnectCoreV1HeadNamespacedPodProxyRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ConnectCoreV1HeadNamespacedPodProxyOK)).Elem(),
						reflect.TypeOf(new(*ConnectCoreV1HeadNamespacedPodProxyUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"*/*": reflect.TypeOf(new(ConnectCoreV1HeadNamespacedPodProxyOK)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ConnectCoreV1HeadNamespacedPodProxyWithPath: ogenreflect.RuntimeOperation{
			Name: "ConnectCoreV1HeadNamespacedPodProxyWithPath",
			ID:   "connectCoreV1HeadNamespacedPodProxyWithPath",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ConnectCoreV1HeadNamespacedPodProxyWithPathParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "path",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "path",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ConnectCoreV1HeadNamespacedPodProxyWithPathRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ConnectCoreV1HeadNamespacedPodProxyWithPathOK)).Elem(),
						reflect.TypeOf(new(*ConnectCoreV1HeadNamespacedPodProxyWithPathUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"*/*": reflect.TypeOf(new(ConnectCoreV1HeadNamespacedPodProxyWithPathOK)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ConnectCoreV1HeadNamespacedServiceProxy: ogenreflect.RuntimeOperation{
			Name: "ConnectCoreV1HeadNamespacedServiceProxy",
			ID:   "connectCoreV1HeadNamespacedServiceProxy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ConnectCoreV1HeadNamespacedServiceProxyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "path",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ConnectCoreV1HeadNamespacedServiceProxyRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ConnectCoreV1HeadNamespacedServiceProxyOK)).Elem(),
						reflect.TypeOf(new(*ConnectCoreV1HeadNamespacedServiceProxyUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"*/*": reflect.TypeOf(new(ConnectCoreV1HeadNamespacedServiceProxyOK)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ConnectCoreV1HeadNamespacedServiceProxyWithPath: ogenreflect.RuntimeOperation{
			Name: "ConnectCoreV1HeadNamespacedServiceProxyWithPath",
			ID:   "connectCoreV1HeadNamespacedServiceProxyWithPath",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ConnectCoreV1HeadNamespacedServiceProxyWithPathParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "path",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "path",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ConnectCoreV1HeadNamespacedServiceProxyWithPathRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ConnectCoreV1HeadNamespacedServiceProxyWithPathOK)).Elem(),
						reflect.TypeOf(new(*ConnectCoreV1HeadNamespacedServiceProxyWithPathUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"*/*": reflect.TypeOf(new(ConnectCoreV1HeadNamespacedServiceProxyWithPathOK)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ConnectCoreV1HeadNodeProxy: ogenreflect.RuntimeOperation{
			Name: "ConnectCoreV1HeadNodeProxy",
			ID:   "connectCoreV1HeadNodeProxy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ConnectCoreV1HeadNodeProxyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "path",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ConnectCoreV1HeadNodeProxyRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ConnectCoreV1HeadNodeProxyOK)).Elem(),
						reflect.TypeOf(new(*ConnectCoreV1HeadNodeProxyUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"*/*": reflect.TypeOf(new(ConnectCoreV1HeadNodeProxyOK)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ConnectCoreV1HeadNodeProxyWithPath: ogenreflect.RuntimeOperation{
			Name: "ConnectCoreV1HeadNodeProxyWithPath",
			ID:   "connectCoreV1HeadNodeProxyWithPath",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ConnectCoreV1HeadNodeProxyWithPathParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "path",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "path",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ConnectCoreV1HeadNodeProxyWithPathRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ConnectCoreV1HeadNodeProxyWithPathOK)).Elem(),
						reflect.TypeOf(new(*ConnectCoreV1HeadNodeProxyWithPathUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"*/*": reflect.TypeOf(new(ConnectCoreV1HeadNodeProxyWithPathOK)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ConnectCoreV1OptionsNamespacedPodProxy: ogenreflect.RuntimeOperation{
			Name: "ConnectCoreV1OptionsNamespacedPodProxy",
			ID:   "connectCoreV1OptionsNamespacedPodProxy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ConnectCoreV1OptionsNamespacedPodProxyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "path",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ConnectCoreV1OptionsNamespacedPodProxyRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ConnectCoreV1OptionsNamespacedPodProxyOK)).Elem(),
						reflect.TypeOf(new(*ConnectCoreV1OptionsNamespacedPodProxyUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"*/*": reflect.TypeOf(new(ConnectCoreV1OptionsNamespacedPodProxyOK)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ConnectCoreV1OptionsNamespacedPodProxyWithPath: ogenreflect.RuntimeOperation{
			Name: "ConnectCoreV1OptionsNamespacedPodProxyWithPath",
			ID:   "connectCoreV1OptionsNamespacedPodProxyWithPath",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ConnectCoreV1OptionsNamespacedPodProxyWithPathParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "path",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "path",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ConnectCoreV1OptionsNamespacedPodProxyWithPathRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ConnectCoreV1OptionsNamespacedPodProxyWithPathOK)).Elem(),
						reflect.TypeOf(new(*ConnectCoreV1OptionsNamespacedPodProxyWithPathUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"*/*": reflect.TypeOf(new(ConnectCoreV1OptionsNamespacedPodProxyWithPathOK)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ConnectCoreV1OptionsNamespacedServiceProxy: ogenreflect.RuntimeOperation{
			Name: "ConnectCoreV1OptionsNamespacedServiceProxy",
			ID:   "connectCoreV1OptionsNamespacedServiceProxy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ConnectCoreV1OptionsNamespacedServiceProxyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "path",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ConnectCoreV1OptionsNamespacedServiceProxyRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ConnectCoreV1OptionsNamespacedServiceProxyOK)).Elem(),
						reflect.TypeOf(new(*ConnectCoreV1OptionsNamespacedServiceProxyUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"*/*": reflect.TypeOf(new(ConnectCoreV1OptionsNamespacedServiceProxyOK)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ConnectCoreV1OptionsNamespacedServiceProxyWithPath: ogenreflect.RuntimeOperation{
			Name: "ConnectCoreV1OptionsNamespacedServiceProxyWithPath",
			ID:   "connectCoreV1OptionsNamespacedServiceProxyWithPath",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ConnectCoreV1OptionsNamespacedServiceProxyWithPathParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "path",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "path",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ConnectCoreV1OptionsNamespacedServiceProxyWithPathRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ConnectCoreV1OptionsNamespacedServiceProxyWithPathOK)).Elem(),
						reflect.TypeOf(new(*ConnectCoreV1OptionsNamespacedServiceProxyWithPathUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"*/*": reflect.TypeOf(new(ConnectCoreV1OptionsNamespacedServiceProxyWithPathOK)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ConnectCoreV1OptionsNodeProxy: ogenreflect.RuntimeOperation{
			Name: "ConnectCoreV1OptionsNodeProxy",
			ID:   "connectCoreV1OptionsNodeProxy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ConnectCoreV1OptionsNodeProxyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "path",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ConnectCoreV1OptionsNodeProxyRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ConnectCoreV1OptionsNodeProxyOK)).Elem(),
						reflect.TypeOf(new(*ConnectCoreV1OptionsNodeProxyUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"*/*": reflect.TypeOf(new(ConnectCoreV1OptionsNodeProxyOK)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ConnectCoreV1OptionsNodeProxyWithPath: ogenreflect.RuntimeOperation{
			Name: "ConnectCoreV1OptionsNodeProxyWithPath",
			ID:   "connectCoreV1OptionsNodeProxyWithPath",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ConnectCoreV1OptionsNodeProxyWithPathParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "path",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "path",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ConnectCoreV1OptionsNodeProxyWithPathRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ConnectCoreV1OptionsNodeProxyWithPathOK)).Elem(),
						reflect.TypeOf(new(*ConnectCoreV1OptionsNodeProxyWithPathUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"*/*": reflect.TypeOf(new(ConnectCoreV1OptionsNodeProxyWithPathOK)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ConnectCoreV1PatchNamespacedPodProxy: ogenreflect.RuntimeOperation{
			Name: "ConnectCoreV1PatchNamespacedPodProxy",
			ID:   "connectCoreV1PatchNamespacedPodProxy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ConnectCoreV1PatchNamespacedPodProxyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "path",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ConnectCoreV1PatchNamespacedPodProxyRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ConnectCoreV1PatchNamespacedPodProxyOK)).Elem(),
						reflect.TypeOf(new(*ConnectCoreV1PatchNamespacedPodProxyUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"*/*": reflect.TypeOf(new(ConnectCoreV1PatchNamespacedPodProxyOK)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ConnectCoreV1PatchNamespacedPodProxyWithPath: ogenreflect.RuntimeOperation{
			Name: "ConnectCoreV1PatchNamespacedPodProxyWithPath",
			ID:   "connectCoreV1PatchNamespacedPodProxyWithPath",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ConnectCoreV1PatchNamespacedPodProxyWithPathParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "path",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "path",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ConnectCoreV1PatchNamespacedPodProxyWithPathRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ConnectCoreV1PatchNamespacedPodProxyWithPathOK)).Elem(),
						reflect.TypeOf(new(*ConnectCoreV1PatchNamespacedPodProxyWithPathUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"*/*": reflect.TypeOf(new(ConnectCoreV1PatchNamespacedPodProxyWithPathOK)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ConnectCoreV1PatchNamespacedServiceProxy: ogenreflect.RuntimeOperation{
			Name: "ConnectCoreV1PatchNamespacedServiceProxy",
			ID:   "connectCoreV1PatchNamespacedServiceProxy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ConnectCoreV1PatchNamespacedServiceProxyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "path",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ConnectCoreV1PatchNamespacedServiceProxyRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ConnectCoreV1PatchNamespacedServiceProxyOK)).Elem(),
						reflect.TypeOf(new(*ConnectCoreV1PatchNamespacedServiceProxyUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"*/*": reflect.TypeOf(new(ConnectCoreV1PatchNamespacedServiceProxyOK)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ConnectCoreV1PatchNamespacedServiceProxyWithPath: ogenreflect.RuntimeOperation{
			Name: "ConnectCoreV1PatchNamespacedServiceProxyWithPath",
			ID:   "connectCoreV1PatchNamespacedServiceProxyWithPath",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ConnectCoreV1PatchNamespacedServiceProxyWithPathParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "path",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "path",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ConnectCoreV1PatchNamespacedServiceProxyWithPathRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ConnectCoreV1PatchNamespacedServiceProxyWithPathOK)).Elem(),
						reflect.TypeOf(new(*ConnectCoreV1PatchNamespacedServiceProxyWithPathUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"*/*": reflect.TypeOf(new(ConnectCoreV1PatchNamespacedServiceProxyWithPathOK)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ConnectCoreV1PatchNodeProxy: ogenreflect.RuntimeOperation{
			Name: "ConnectCoreV1PatchNodeProxy",
			ID:   "connectCoreV1PatchNodeProxy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ConnectCoreV1PatchNodeProxyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "path",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ConnectCoreV1PatchNodeProxyRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ConnectCoreV1PatchNodeProxyOK)).Elem(),
						reflect.TypeOf(new(*ConnectCoreV1PatchNodeProxyUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"*/*": reflect.TypeOf(new(ConnectCoreV1PatchNodeProxyOK)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ConnectCoreV1PatchNodeProxyWithPath: ogenreflect.RuntimeOperation{
			Name: "ConnectCoreV1PatchNodeProxyWithPath",
			ID:   "connectCoreV1PatchNodeProxyWithPath",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ConnectCoreV1PatchNodeProxyWithPathParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "path",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "path",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ConnectCoreV1PatchNodeProxyWithPathRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ConnectCoreV1PatchNodeProxyWithPathOK)).Elem(),
						reflect.TypeOf(new(*ConnectCoreV1PatchNodeProxyWithPathUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"*/*": reflect.TypeOf(new(ConnectCoreV1PatchNodeProxyWithPathOK)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ConnectCoreV1PostNamespacedPodAttach: ogenreflect.RuntimeOperation{
			Name: "ConnectCoreV1PostNamespacedPodAttach",
			ID:   "connectCoreV1PostNamespacedPodAttach",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ConnectCoreV1PostNamespacedPodAttachParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "container",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "container",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "stderr",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "stderr",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "stdin",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "stdin",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "stdout",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "stdout",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "tty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "tty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ConnectCoreV1PostNamespacedPodAttachRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ConnectCoreV1PostNamespacedPodAttachOK)).Elem(),
						reflect.TypeOf(new(*ConnectCoreV1PostNamespacedPodAttachUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"*/*": reflect.TypeOf(new(ConnectCoreV1PostNamespacedPodAttachOK)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ConnectCoreV1PostNamespacedPodExec: ogenreflect.RuntimeOperation{
			Name: "ConnectCoreV1PostNamespacedPodExec",
			ID:   "connectCoreV1PostNamespacedPodExec",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ConnectCoreV1PostNamespacedPodExecParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "command",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "command",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "container",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "container",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "stderr",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "stderr",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "stdin",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "stdin",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "stdout",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "stdout",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "tty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "tty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ConnectCoreV1PostNamespacedPodExecRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ConnectCoreV1PostNamespacedPodExecOK)).Elem(),
						reflect.TypeOf(new(*ConnectCoreV1PostNamespacedPodExecUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"*/*": reflect.TypeOf(new(ConnectCoreV1PostNamespacedPodExecOK)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ConnectCoreV1PostNamespacedPodPortforward: ogenreflect.RuntimeOperation{
			Name: "ConnectCoreV1PostNamespacedPodPortforward",
			ID:   "connectCoreV1PostNamespacedPodPortforward",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ConnectCoreV1PostNamespacedPodPortforwardParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "ports",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "ports",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ConnectCoreV1PostNamespacedPodPortforwardRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ConnectCoreV1PostNamespacedPodPortforwardOK)).Elem(),
						reflect.TypeOf(new(*ConnectCoreV1PostNamespacedPodPortforwardUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"*/*": reflect.TypeOf(new(ConnectCoreV1PostNamespacedPodPortforwardOK)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ConnectCoreV1PostNamespacedPodProxy: ogenreflect.RuntimeOperation{
			Name: "ConnectCoreV1PostNamespacedPodProxy",
			ID:   "connectCoreV1PostNamespacedPodProxy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ConnectCoreV1PostNamespacedPodProxyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "path",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ConnectCoreV1PostNamespacedPodProxyRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ConnectCoreV1PostNamespacedPodProxyOK)).Elem(),
						reflect.TypeOf(new(*ConnectCoreV1PostNamespacedPodProxyUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"*/*": reflect.TypeOf(new(ConnectCoreV1PostNamespacedPodProxyOK)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ConnectCoreV1PostNamespacedPodProxyWithPath: ogenreflect.RuntimeOperation{
			Name: "ConnectCoreV1PostNamespacedPodProxyWithPath",
			ID:   "connectCoreV1PostNamespacedPodProxyWithPath",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ConnectCoreV1PostNamespacedPodProxyWithPathParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "path",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "path",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ConnectCoreV1PostNamespacedPodProxyWithPathRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ConnectCoreV1PostNamespacedPodProxyWithPathOK)).Elem(),
						reflect.TypeOf(new(*ConnectCoreV1PostNamespacedPodProxyWithPathUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"*/*": reflect.TypeOf(new(ConnectCoreV1PostNamespacedPodProxyWithPathOK)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ConnectCoreV1PostNamespacedServiceProxy: ogenreflect.RuntimeOperation{
			Name: "ConnectCoreV1PostNamespacedServiceProxy",
			ID:   "connectCoreV1PostNamespacedServiceProxy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ConnectCoreV1PostNamespacedServiceProxyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "path",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ConnectCoreV1PostNamespacedServiceProxyRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ConnectCoreV1PostNamespacedServiceProxyOK)).Elem(),
						reflect.TypeOf(new(*ConnectCoreV1PostNamespacedServiceProxyUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"*/*": reflect.TypeOf(new(ConnectCoreV1PostNamespacedServiceProxyOK)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ConnectCoreV1PostNamespacedServiceProxyWithPath: ogenreflect.RuntimeOperation{
			Name: "ConnectCoreV1PostNamespacedServiceProxyWithPath",
			ID:   "connectCoreV1PostNamespacedServiceProxyWithPath",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ConnectCoreV1PostNamespacedServiceProxyWithPathParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "path",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "path",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ConnectCoreV1PostNamespacedServiceProxyWithPathRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ConnectCoreV1PostNamespacedServiceProxyWithPathOK)).Elem(),
						reflect.TypeOf(new(*ConnectCoreV1PostNamespacedServiceProxyWithPathUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"*/*": reflect.TypeOf(new(ConnectCoreV1PostNamespacedServiceProxyWithPathOK)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ConnectCoreV1PostNodeProxy: ogenreflect.RuntimeOperation{
			Name: "ConnectCoreV1PostNodeProxy",
			ID:   "connectCoreV1PostNodeProxy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ConnectCoreV1PostNodeProxyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "path",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ConnectCoreV1PostNodeProxyRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ConnectCoreV1PostNodeProxyOK)).Elem(),
						reflect.TypeOf(new(*ConnectCoreV1PostNodeProxyUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"*/*": reflect.TypeOf(new(ConnectCoreV1PostNodeProxyOK)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ConnectCoreV1PostNodeProxyWithPath: ogenreflect.RuntimeOperation{
			Name: "ConnectCoreV1PostNodeProxyWithPath",
			ID:   "connectCoreV1PostNodeProxyWithPath",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ConnectCoreV1PostNodeProxyWithPathParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "path",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "path",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ConnectCoreV1PostNodeProxyWithPathRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ConnectCoreV1PostNodeProxyWithPathOK)).Elem(),
						reflect.TypeOf(new(*ConnectCoreV1PostNodeProxyWithPathUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"*/*": reflect.TypeOf(new(ConnectCoreV1PostNodeProxyWithPathOK)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ConnectCoreV1PutNamespacedPodProxy: ogenreflect.RuntimeOperation{
			Name: "ConnectCoreV1PutNamespacedPodProxy",
			ID:   "connectCoreV1PutNamespacedPodProxy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ConnectCoreV1PutNamespacedPodProxyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "path",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ConnectCoreV1PutNamespacedPodProxyRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ConnectCoreV1PutNamespacedPodProxyOK)).Elem(),
						reflect.TypeOf(new(*ConnectCoreV1PutNamespacedPodProxyUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"*/*": reflect.TypeOf(new(ConnectCoreV1PutNamespacedPodProxyOK)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ConnectCoreV1PutNamespacedPodProxyWithPath: ogenreflect.RuntimeOperation{
			Name: "ConnectCoreV1PutNamespacedPodProxyWithPath",
			ID:   "connectCoreV1PutNamespacedPodProxyWithPath",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ConnectCoreV1PutNamespacedPodProxyWithPathParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "path",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "path",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ConnectCoreV1PutNamespacedPodProxyWithPathRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ConnectCoreV1PutNamespacedPodProxyWithPathOK)).Elem(),
						reflect.TypeOf(new(*ConnectCoreV1PutNamespacedPodProxyWithPathUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"*/*": reflect.TypeOf(new(ConnectCoreV1PutNamespacedPodProxyWithPathOK)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ConnectCoreV1PutNamespacedServiceProxy: ogenreflect.RuntimeOperation{
			Name: "ConnectCoreV1PutNamespacedServiceProxy",
			ID:   "connectCoreV1PutNamespacedServiceProxy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ConnectCoreV1PutNamespacedServiceProxyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "path",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ConnectCoreV1PutNamespacedServiceProxyRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ConnectCoreV1PutNamespacedServiceProxyOK)).Elem(),
						reflect.TypeOf(new(*ConnectCoreV1PutNamespacedServiceProxyUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"*/*": reflect.TypeOf(new(ConnectCoreV1PutNamespacedServiceProxyOK)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ConnectCoreV1PutNamespacedServiceProxyWithPath: ogenreflect.RuntimeOperation{
			Name: "ConnectCoreV1PutNamespacedServiceProxyWithPath",
			ID:   "connectCoreV1PutNamespacedServiceProxyWithPath",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ConnectCoreV1PutNamespacedServiceProxyWithPathParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "path",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "path",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ConnectCoreV1PutNamespacedServiceProxyWithPathRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ConnectCoreV1PutNamespacedServiceProxyWithPathOK)).Elem(),
						reflect.TypeOf(new(*ConnectCoreV1PutNamespacedServiceProxyWithPathUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"*/*": reflect.TypeOf(new(ConnectCoreV1PutNamespacedServiceProxyWithPathOK)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ConnectCoreV1PutNodeProxy: ogenreflect.RuntimeOperation{
			Name: "ConnectCoreV1PutNodeProxy",
			ID:   "connectCoreV1PutNodeProxy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ConnectCoreV1PutNodeProxyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "path",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ConnectCoreV1PutNodeProxyRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ConnectCoreV1PutNodeProxyOK)).Elem(),
						reflect.TypeOf(new(*ConnectCoreV1PutNodeProxyUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"*/*": reflect.TypeOf(new(ConnectCoreV1PutNodeProxyOK)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ConnectCoreV1PutNodeProxyWithPath: ogenreflect.RuntimeOperation{
			Name: "ConnectCoreV1PutNodeProxyWithPath",
			ID:   "connectCoreV1PutNodeProxyWithPath",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ConnectCoreV1PutNodeProxyWithPathParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "path",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "path",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "path",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ConnectCoreV1PutNodeProxyWithPathRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ConnectCoreV1PutNodeProxyWithPathOK)).Elem(),
						reflect.TypeOf(new(*ConnectCoreV1PutNodeProxyWithPathUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"*/*": reflect.TypeOf(new(ConnectCoreV1PutNodeProxyWithPathOK)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetAPIVersions: ogenreflect.RuntimeOperation{
			Name: "GetAPIVersions",
			ID:   "getAPIVersions",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetAPIVersionsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIGroupList)).Elem(),
						reflect.TypeOf(new(*GetAPIVersionsUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIGroupList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetAdmissionregistrationAPIGroup: ogenreflect.RuntimeOperation{
			Name: "GetAdmissionregistrationAPIGroup",
			ID:   "getAdmissionregistrationAPIGroup",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetAdmissionregistrationAPIGroupRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIGroup)).Elem(),
						reflect.TypeOf(new(*GetAdmissionregistrationAPIGroupUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIGroup)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetAdmissionregistrationV1APIResources: ogenreflect.RuntimeOperation{
			Name: "GetAdmissionregistrationV1APIResources",
			ID:   "getAdmissionregistrationV1APIResources",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetAdmissionregistrationV1APIResourcesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
						reflect.TypeOf(new(*GetAdmissionregistrationV1APIResourcesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetApiextensionsAPIGroup: ogenreflect.RuntimeOperation{
			Name: "GetApiextensionsAPIGroup",
			ID:   "getApiextensionsAPIGroup",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetApiextensionsAPIGroupRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIGroup)).Elem(),
						reflect.TypeOf(new(*GetApiextensionsAPIGroupUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIGroup)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetApiextensionsV1APIResources: ogenreflect.RuntimeOperation{
			Name: "GetApiextensionsV1APIResources",
			ID:   "getApiextensionsV1APIResources",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetApiextensionsV1APIResourcesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
						reflect.TypeOf(new(*GetApiextensionsV1APIResourcesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetApiregistrationAPIGroup: ogenreflect.RuntimeOperation{
			Name: "GetApiregistrationAPIGroup",
			ID:   "getApiregistrationAPIGroup",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetApiregistrationAPIGroupRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIGroup)).Elem(),
						reflect.TypeOf(new(*GetApiregistrationAPIGroupUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIGroup)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetApiregistrationV1APIResources: ogenreflect.RuntimeOperation{
			Name: "GetApiregistrationV1APIResources",
			ID:   "getApiregistrationV1APIResources",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetApiregistrationV1APIResourcesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
						reflect.TypeOf(new(*GetApiregistrationV1APIResourcesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetAppsAPIGroup: ogenreflect.RuntimeOperation{
			Name: "GetAppsAPIGroup",
			ID:   "getAppsAPIGroup",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetAppsAPIGroupRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIGroup)).Elem(),
						reflect.TypeOf(new(*GetAppsAPIGroupUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIGroup)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetAppsV1APIResources: ogenreflect.RuntimeOperation{
			Name: "GetAppsV1APIResources",
			ID:   "getAppsV1APIResources",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetAppsV1APIResourcesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
						reflect.TypeOf(new(*GetAppsV1APIResourcesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetAuthenticationAPIGroup: ogenreflect.RuntimeOperation{
			Name: "GetAuthenticationAPIGroup",
			ID:   "getAuthenticationAPIGroup",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetAuthenticationAPIGroupRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIGroup)).Elem(),
						reflect.TypeOf(new(*GetAuthenticationAPIGroupUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIGroup)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetAuthenticationV1APIResources: ogenreflect.RuntimeOperation{
			Name: "GetAuthenticationV1APIResources",
			ID:   "getAuthenticationV1APIResources",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetAuthenticationV1APIResourcesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
						reflect.TypeOf(new(*GetAuthenticationV1APIResourcesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetAuthorizationAPIGroup: ogenreflect.RuntimeOperation{
			Name: "GetAuthorizationAPIGroup",
			ID:   "getAuthorizationAPIGroup",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetAuthorizationAPIGroupRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIGroup)).Elem(),
						reflect.TypeOf(new(*GetAuthorizationAPIGroupUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIGroup)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetAuthorizationV1APIResources: ogenreflect.RuntimeOperation{
			Name: "GetAuthorizationV1APIResources",
			ID:   "getAuthorizationV1APIResources",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetAuthorizationV1APIResourcesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
						reflect.TypeOf(new(*GetAuthorizationV1APIResourcesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetAutoscalingAPIGroup: ogenreflect.RuntimeOperation{
			Name: "GetAutoscalingAPIGroup",
			ID:   "getAutoscalingAPIGroup",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetAutoscalingAPIGroupRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIGroup)).Elem(),
						reflect.TypeOf(new(*GetAutoscalingAPIGroupUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIGroup)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetAutoscalingV1APIResources: ogenreflect.RuntimeOperation{
			Name: "GetAutoscalingV1APIResources",
			ID:   "getAutoscalingV1APIResources",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetAutoscalingV1APIResourcesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
						reflect.TypeOf(new(*GetAutoscalingV1APIResourcesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetAutoscalingV2beta1APIResources: ogenreflect.RuntimeOperation{
			Name: "GetAutoscalingV2beta1APIResources",
			ID:   "getAutoscalingV2beta1APIResources",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetAutoscalingV2beta1APIResourcesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
						reflect.TypeOf(new(*GetAutoscalingV2beta1APIResourcesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetAutoscalingV2beta2APIResources: ogenreflect.RuntimeOperation{
			Name: "GetAutoscalingV2beta2APIResources",
			ID:   "getAutoscalingV2beta2APIResources",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetAutoscalingV2beta2APIResourcesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
						reflect.TypeOf(new(*GetAutoscalingV2beta2APIResourcesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetBatchAPIGroup: ogenreflect.RuntimeOperation{
			Name: "GetBatchAPIGroup",
			ID:   "getBatchAPIGroup",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetBatchAPIGroupRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIGroup)).Elem(),
						reflect.TypeOf(new(*GetBatchAPIGroupUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIGroup)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetBatchV1APIResources: ogenreflect.RuntimeOperation{
			Name: "GetBatchV1APIResources",
			ID:   "getBatchV1APIResources",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetBatchV1APIResourcesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
						reflect.TypeOf(new(*GetBatchV1APIResourcesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetBatchV1beta1APIResources: ogenreflect.RuntimeOperation{
			Name: "GetBatchV1beta1APIResources",
			ID:   "getBatchV1beta1APIResources",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetBatchV1beta1APIResourcesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
						reflect.TypeOf(new(*GetBatchV1beta1APIResourcesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetCertificatesAPIGroup: ogenreflect.RuntimeOperation{
			Name: "GetCertificatesAPIGroup",
			ID:   "getCertificatesAPIGroup",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetCertificatesAPIGroupRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIGroup)).Elem(),
						reflect.TypeOf(new(*GetCertificatesAPIGroupUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIGroup)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetCertificatesV1APIResources: ogenreflect.RuntimeOperation{
			Name: "GetCertificatesV1APIResources",
			ID:   "getCertificatesV1APIResources",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetCertificatesV1APIResourcesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
						reflect.TypeOf(new(*GetCertificatesV1APIResourcesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetCodeVersion: ogenreflect.RuntimeOperation{
			Name: "GetCodeVersion",
			ID:   "getCodeVersion",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetCodeVersionRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgVersionInfo)).Elem(),
						reflect.TypeOf(new(*GetCodeVersionUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgVersionInfo)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetCoordinationAPIGroup: ogenreflect.RuntimeOperation{
			Name: "GetCoordinationAPIGroup",
			ID:   "getCoordinationAPIGroup",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetCoordinationAPIGroupRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIGroup)).Elem(),
						reflect.TypeOf(new(*GetCoordinationAPIGroupUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIGroup)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetCoordinationV1APIResources: ogenreflect.RuntimeOperation{
			Name: "GetCoordinationV1APIResources",
			ID:   "getCoordinationV1APIResources",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetCoordinationV1APIResourcesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
						reflect.TypeOf(new(*GetCoordinationV1APIResourcesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetCoreAPIVersions: ogenreflect.RuntimeOperation{
			Name: "GetCoreAPIVersions",
			ID:   "getCoreAPIVersions",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetCoreAPIVersionsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIVersions)).Elem(),
						reflect.TypeOf(new(*GetCoreAPIVersionsUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIVersions)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetCoreV1APIResources: ogenreflect.RuntimeOperation{
			Name: "GetCoreV1APIResources",
			ID:   "getCoreV1APIResources",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetCoreV1APIResourcesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
						reflect.TypeOf(new(*GetCoreV1APIResourcesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetDiscoveryAPIGroup: ogenreflect.RuntimeOperation{
			Name: "GetDiscoveryAPIGroup",
			ID:   "getDiscoveryAPIGroup",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetDiscoveryAPIGroupRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIGroup)).Elem(),
						reflect.TypeOf(new(*GetDiscoveryAPIGroupUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIGroup)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetDiscoveryV1APIResources: ogenreflect.RuntimeOperation{
			Name: "GetDiscoveryV1APIResources",
			ID:   "getDiscoveryV1APIResources",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetDiscoveryV1APIResourcesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
						reflect.TypeOf(new(*GetDiscoveryV1APIResourcesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetDiscoveryV1beta1APIResources: ogenreflect.RuntimeOperation{
			Name: "GetDiscoveryV1beta1APIResources",
			ID:   "getDiscoveryV1beta1APIResources",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetDiscoveryV1beta1APIResourcesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
						reflect.TypeOf(new(*GetDiscoveryV1beta1APIResourcesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetEventsAPIGroup: ogenreflect.RuntimeOperation{
			Name: "GetEventsAPIGroup",
			ID:   "getEventsAPIGroup",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetEventsAPIGroupRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIGroup)).Elem(),
						reflect.TypeOf(new(*GetEventsAPIGroupUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIGroup)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetEventsV1APIResources: ogenreflect.RuntimeOperation{
			Name: "GetEventsV1APIResources",
			ID:   "getEventsV1APIResources",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetEventsV1APIResourcesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
						reflect.TypeOf(new(*GetEventsV1APIResourcesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetEventsV1beta1APIResources: ogenreflect.RuntimeOperation{
			Name: "GetEventsV1beta1APIResources",
			ID:   "getEventsV1beta1APIResources",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetEventsV1beta1APIResourcesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
						reflect.TypeOf(new(*GetEventsV1beta1APIResourcesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetFlowcontrolApiserverAPIGroup: ogenreflect.RuntimeOperation{
			Name: "GetFlowcontrolApiserverAPIGroup",
			ID:   "getFlowcontrolApiserverAPIGroup",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetFlowcontrolApiserverAPIGroupRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIGroup)).Elem(),
						reflect.TypeOf(new(*GetFlowcontrolApiserverAPIGroupUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIGroup)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetFlowcontrolApiserverV1beta1APIResources: ogenreflect.RuntimeOperation{
			Name: "GetFlowcontrolApiserverV1beta1APIResources",
			ID:   "getFlowcontrolApiserverV1beta1APIResources",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetFlowcontrolApiserverV1beta1APIResourcesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
						reflect.TypeOf(new(*GetFlowcontrolApiserverV1beta1APIResourcesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetFlowcontrolApiserverV1beta2APIResources: ogenreflect.RuntimeOperation{
			Name: "GetFlowcontrolApiserverV1beta2APIResources",
			ID:   "getFlowcontrolApiserverV1beta2APIResources",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetFlowcontrolApiserverV1beta2APIResourcesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
						reflect.TypeOf(new(*GetFlowcontrolApiserverV1beta2APIResourcesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetInternalApiserverAPIGroup: ogenreflect.RuntimeOperation{
			Name: "GetInternalApiserverAPIGroup",
			ID:   "getInternalApiserverAPIGroup",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetInternalApiserverAPIGroupRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIGroup)).Elem(),
						reflect.TypeOf(new(*GetInternalApiserverAPIGroupUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIGroup)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetInternalApiserverV1alpha1APIResources: ogenreflect.RuntimeOperation{
			Name: "GetInternalApiserverV1alpha1APIResources",
			ID:   "getInternalApiserverV1alpha1APIResources",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetInternalApiserverV1alpha1APIResourcesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
						reflect.TypeOf(new(*GetInternalApiserverV1alpha1APIResourcesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetNetworkingAPIGroup: ogenreflect.RuntimeOperation{
			Name: "GetNetworkingAPIGroup",
			ID:   "getNetworkingAPIGroup",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetNetworkingAPIGroupRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIGroup)).Elem(),
						reflect.TypeOf(new(*GetNetworkingAPIGroupUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIGroup)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetNetworkingV1APIResources: ogenreflect.RuntimeOperation{
			Name: "GetNetworkingV1APIResources",
			ID:   "getNetworkingV1APIResources",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetNetworkingV1APIResourcesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
						reflect.TypeOf(new(*GetNetworkingV1APIResourcesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetNodeAPIGroup: ogenreflect.RuntimeOperation{
			Name: "GetNodeAPIGroup",
			ID:   "getNodeAPIGroup",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetNodeAPIGroupRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIGroup)).Elem(),
						reflect.TypeOf(new(*GetNodeAPIGroupUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIGroup)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetNodeV1APIResources: ogenreflect.RuntimeOperation{
			Name: "GetNodeV1APIResources",
			ID:   "getNodeV1APIResources",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetNodeV1APIResourcesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
						reflect.TypeOf(new(*GetNodeV1APIResourcesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetNodeV1alpha1APIResources: ogenreflect.RuntimeOperation{
			Name: "GetNodeV1alpha1APIResources",
			ID:   "getNodeV1alpha1APIResources",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetNodeV1alpha1APIResourcesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
						reflect.TypeOf(new(*GetNodeV1alpha1APIResourcesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetNodeV1beta1APIResources: ogenreflect.RuntimeOperation{
			Name: "GetNodeV1beta1APIResources",
			ID:   "getNodeV1beta1APIResources",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetNodeV1beta1APIResourcesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
						reflect.TypeOf(new(*GetNodeV1beta1APIResourcesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetPolicyAPIGroup: ogenreflect.RuntimeOperation{
			Name: "GetPolicyAPIGroup",
			ID:   "getPolicyAPIGroup",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetPolicyAPIGroupRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIGroup)).Elem(),
						reflect.TypeOf(new(*GetPolicyAPIGroupUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIGroup)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetPolicyV1APIResources: ogenreflect.RuntimeOperation{
			Name: "GetPolicyV1APIResources",
			ID:   "getPolicyV1APIResources",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetPolicyV1APIResourcesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
						reflect.TypeOf(new(*GetPolicyV1APIResourcesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetPolicyV1beta1APIResources: ogenreflect.RuntimeOperation{
			Name: "GetPolicyV1beta1APIResources",
			ID:   "getPolicyV1beta1APIResources",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetPolicyV1beta1APIResourcesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
						reflect.TypeOf(new(*GetPolicyV1beta1APIResourcesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetRbacAuthorizationAPIGroup: ogenreflect.RuntimeOperation{
			Name: "GetRbacAuthorizationAPIGroup",
			ID:   "getRbacAuthorizationAPIGroup",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetRbacAuthorizationAPIGroupRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIGroup)).Elem(),
						reflect.TypeOf(new(*GetRbacAuthorizationAPIGroupUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIGroup)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetRbacAuthorizationV1APIResources: ogenreflect.RuntimeOperation{
			Name: "GetRbacAuthorizationV1APIResources",
			ID:   "getRbacAuthorizationV1APIResources",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetRbacAuthorizationV1APIResourcesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
						reflect.TypeOf(new(*GetRbacAuthorizationV1APIResourcesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetSchedulingAPIGroup: ogenreflect.RuntimeOperation{
			Name: "GetSchedulingAPIGroup",
			ID:   "getSchedulingAPIGroup",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetSchedulingAPIGroupRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIGroup)).Elem(),
						reflect.TypeOf(new(*GetSchedulingAPIGroupUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIGroup)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetSchedulingV1APIResources: ogenreflect.RuntimeOperation{
			Name: "GetSchedulingV1APIResources",
			ID:   "getSchedulingV1APIResources",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetSchedulingV1APIResourcesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
						reflect.TypeOf(new(*GetSchedulingV1APIResourcesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetServiceAccountIssuerOpenIDConfiguration: ogenreflect.RuntimeOperation{
			Name: "GetServiceAccountIssuerOpenIDConfiguration",
			ID:   "getServiceAccountIssuerOpenIDConfiguration",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetServiceAccountIssuerOpenIDConfigurationRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*GetServiceAccountIssuerOpenIDConfigurationOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*GetServiceAccountIssuerOpenIDConfigurationUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(GetServiceAccountIssuerOpenIDConfigurationOKApplicationJSON)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetServiceAccountIssuerOpenIDKeyset: ogenreflect.RuntimeOperation{
			Name: "GetServiceAccountIssuerOpenIDKeyset",
			ID:   "getServiceAccountIssuerOpenIDKeyset",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetServiceAccountIssuerOpenIDKeysetRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*GetServiceAccountIssuerOpenIDKeysetOK)).Elem(),
						reflect.TypeOf(new(*GetServiceAccountIssuerOpenIDKeysetUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/jwk-set+json": reflect.TypeOf(new(GetServiceAccountIssuerOpenIDKeysetOK)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetStorageAPIGroup: ogenreflect.RuntimeOperation{
			Name: "GetStorageAPIGroup",
			ID:   "getStorageAPIGroup",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetStorageAPIGroupRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIGroup)).Elem(),
						reflect.TypeOf(new(*GetStorageAPIGroupUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIGroup)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetStorageV1APIResources: ogenreflect.RuntimeOperation{
			Name: "GetStorageV1APIResources",
			ID:   "getStorageV1APIResources",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetStorageV1APIResourcesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
						reflect.TypeOf(new(*GetStorageV1APIResourcesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetStorageV1alpha1APIResources: ogenreflect.RuntimeOperation{
			Name: "GetStorageV1alpha1APIResources",
			ID:   "getStorageV1alpha1APIResources",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetStorageV1alpha1APIResourcesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
						reflect.TypeOf(new(*GetStorageV1alpha1APIResourcesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetStorageV1beta1APIResources: ogenreflect.RuntimeOperation{
			Name: "GetStorageV1beta1APIResources",
			ID:   "getStorageV1beta1APIResources",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetStorageV1beta1APIResourcesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
						reflect.TypeOf(new(*GetStorageV1beta1APIResourcesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1APIResourceList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListAdmissionregistrationV1MutatingWebhookConfiguration: ogenreflect.RuntimeOperation{
			Name: "ListAdmissionregistrationV1MutatingWebhookConfiguration",
			ID:   "listAdmissionregistrationV1MutatingWebhookConfiguration",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListAdmissionregistrationV1MutatingWebhookConfigurationParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListAdmissionregistrationV1MutatingWebhookConfigurationRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIAdmissionregistrationV1MutatingWebhookConfigurationList)).Elem(),
						reflect.TypeOf(new(*ListAdmissionregistrationV1MutatingWebhookConfigurationUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIAdmissionregistrationV1MutatingWebhookConfigurationList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListAdmissionregistrationV1ValidatingWebhookConfiguration: ogenreflect.RuntimeOperation{
			Name: "ListAdmissionregistrationV1ValidatingWebhookConfiguration",
			ID:   "listAdmissionregistrationV1ValidatingWebhookConfiguration",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListAdmissionregistrationV1ValidatingWebhookConfigurationParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListAdmissionregistrationV1ValidatingWebhookConfigurationRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfigurationList)).Elem(),
						reflect.TypeOf(new(*ListAdmissionregistrationV1ValidatingWebhookConfigurationUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfigurationList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListApiextensionsV1CustomResourceDefinition: ogenreflect.RuntimeOperation{
			Name: "ListApiextensionsV1CustomResourceDefinition",
			ID:   "listApiextensionsV1CustomResourceDefinition",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListApiextensionsV1CustomResourceDefinitionParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListApiextensionsV1CustomResourceDefinitionRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList)).Elem(),
						reflect.TypeOf(new(*ListApiextensionsV1CustomResourceDefinitionUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListApiregistrationV1APIService: ogenreflect.RuntimeOperation{
			Name: "ListApiregistrationV1APIService",
			ID:   "listApiregistrationV1APIService",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListApiregistrationV1APIServiceParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListApiregistrationV1APIServiceRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceList)).Elem(),
						reflect.TypeOf(new(*ListApiregistrationV1APIServiceUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListAppsV1ControllerRevisionForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "ListAppsV1ControllerRevisionForAllNamespaces",
			ID:   "listAppsV1ControllerRevisionForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListAppsV1ControllerRevisionForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListAppsV1ControllerRevisionForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIAppsV1ControllerRevisionList)).Elem(),
						reflect.TypeOf(new(*ListAppsV1ControllerRevisionForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIAppsV1ControllerRevisionList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListAppsV1DaemonSetForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "ListAppsV1DaemonSetForAllNamespaces",
			ID:   "listAppsV1DaemonSetForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListAppsV1DaemonSetForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListAppsV1DaemonSetForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIAppsV1DaemonSetList)).Elem(),
						reflect.TypeOf(new(*ListAppsV1DaemonSetForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIAppsV1DaemonSetList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListAppsV1DeploymentForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "ListAppsV1DeploymentForAllNamespaces",
			ID:   "listAppsV1DeploymentForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListAppsV1DeploymentForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListAppsV1DeploymentForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIAppsV1DeploymentList)).Elem(),
						reflect.TypeOf(new(*ListAppsV1DeploymentForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIAppsV1DeploymentList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListAppsV1NamespacedControllerRevision: ogenreflect.RuntimeOperation{
			Name: "ListAppsV1NamespacedControllerRevision",
			ID:   "listAppsV1NamespacedControllerRevision",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListAppsV1NamespacedControllerRevisionParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListAppsV1NamespacedControllerRevisionRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIAppsV1ControllerRevisionList)).Elem(),
						reflect.TypeOf(new(*ListAppsV1NamespacedControllerRevisionUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIAppsV1ControllerRevisionList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListAppsV1NamespacedDaemonSet: ogenreflect.RuntimeOperation{
			Name: "ListAppsV1NamespacedDaemonSet",
			ID:   "listAppsV1NamespacedDaemonSet",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListAppsV1NamespacedDaemonSetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListAppsV1NamespacedDaemonSetRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIAppsV1DaemonSetList)).Elem(),
						reflect.TypeOf(new(*ListAppsV1NamespacedDaemonSetUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIAppsV1DaemonSetList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListAppsV1NamespacedDeployment: ogenreflect.RuntimeOperation{
			Name: "ListAppsV1NamespacedDeployment",
			ID:   "listAppsV1NamespacedDeployment",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListAppsV1NamespacedDeploymentParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListAppsV1NamespacedDeploymentRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIAppsV1DeploymentList)).Elem(),
						reflect.TypeOf(new(*ListAppsV1NamespacedDeploymentUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIAppsV1DeploymentList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListAppsV1NamespacedReplicaSet: ogenreflect.RuntimeOperation{
			Name: "ListAppsV1NamespacedReplicaSet",
			ID:   "listAppsV1NamespacedReplicaSet",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListAppsV1NamespacedReplicaSetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListAppsV1NamespacedReplicaSetRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIAppsV1ReplicaSetList)).Elem(),
						reflect.TypeOf(new(*ListAppsV1NamespacedReplicaSetUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIAppsV1ReplicaSetList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListAppsV1NamespacedStatefulSet: ogenreflect.RuntimeOperation{
			Name: "ListAppsV1NamespacedStatefulSet",
			ID:   "listAppsV1NamespacedStatefulSet",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListAppsV1NamespacedStatefulSetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListAppsV1NamespacedStatefulSetRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIAppsV1StatefulSetList)).Elem(),
						reflect.TypeOf(new(*ListAppsV1NamespacedStatefulSetUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIAppsV1StatefulSetList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListAppsV1ReplicaSetForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "ListAppsV1ReplicaSetForAllNamespaces",
			ID:   "listAppsV1ReplicaSetForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListAppsV1ReplicaSetForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListAppsV1ReplicaSetForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIAppsV1ReplicaSetList)).Elem(),
						reflect.TypeOf(new(*ListAppsV1ReplicaSetForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIAppsV1ReplicaSetList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListAppsV1StatefulSetForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "ListAppsV1StatefulSetForAllNamespaces",
			ID:   "listAppsV1StatefulSetForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListAppsV1StatefulSetForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListAppsV1StatefulSetForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIAppsV1StatefulSetList)).Elem(),
						reflect.TypeOf(new(*ListAppsV1StatefulSetForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIAppsV1StatefulSetList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListAutoscalingV1HorizontalPodAutoscalerForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "ListAutoscalingV1HorizontalPodAutoscalerForAllNamespaces",
			ID:   "listAutoscalingV1HorizontalPodAutoscalerForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList)).Elem(),
						reflect.TypeOf(new(*ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListAutoscalingV1NamespacedHorizontalPodAutoscaler: ogenreflect.RuntimeOperation{
			Name: "ListAutoscalingV1NamespacedHorizontalPodAutoscaler",
			ID:   "listAutoscalingV1NamespacedHorizontalPodAutoscaler",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListAutoscalingV1NamespacedHorizontalPodAutoscalerParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListAutoscalingV1NamespacedHorizontalPodAutoscalerRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList)).Elem(),
						reflect.TypeOf(new(*ListAutoscalingV1NamespacedHorizontalPodAutoscalerUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespaces",
			ID:   "listAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerList)).Elem(),
						reflect.TypeOf(new(*ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListAutoscalingV2beta1NamespacedHorizontalPodAutoscaler: ogenreflect.RuntimeOperation{
			Name: "ListAutoscalingV2beta1NamespacedHorizontalPodAutoscaler",
			ID:   "listAutoscalingV2beta1NamespacedHorizontalPodAutoscaler",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerList)).Elem(),
						reflect.TypeOf(new(*ListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespaces",
			ID:   "listAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerList)).Elem(),
						reflect.TypeOf(new(*ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListAutoscalingV2beta2NamespacedHorizontalPodAutoscaler: ogenreflect.RuntimeOperation{
			Name: "ListAutoscalingV2beta2NamespacedHorizontalPodAutoscaler",
			ID:   "listAutoscalingV2beta2NamespacedHorizontalPodAutoscaler",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListAutoscalingV2beta2NamespacedHorizontalPodAutoscalerParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerList)).Elem(),
						reflect.TypeOf(new(*ListAutoscalingV2beta2NamespacedHorizontalPodAutoscalerUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListBatchV1CronJobForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "ListBatchV1CronJobForAllNamespaces",
			ID:   "listBatchV1CronJobForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListBatchV1CronJobForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListBatchV1CronJobForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIBatchV1CronJobList)).Elem(),
						reflect.TypeOf(new(*ListBatchV1CronJobForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIBatchV1CronJobList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListBatchV1JobForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "ListBatchV1JobForAllNamespaces",
			ID:   "listBatchV1JobForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListBatchV1JobForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListBatchV1JobForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIBatchV1JobList)).Elem(),
						reflect.TypeOf(new(*ListBatchV1JobForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIBatchV1JobList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListBatchV1NamespacedCronJob: ogenreflect.RuntimeOperation{
			Name: "ListBatchV1NamespacedCronJob",
			ID:   "listBatchV1NamespacedCronJob",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListBatchV1NamespacedCronJobParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListBatchV1NamespacedCronJobRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIBatchV1CronJobList)).Elem(),
						reflect.TypeOf(new(*ListBatchV1NamespacedCronJobUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIBatchV1CronJobList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListBatchV1NamespacedJob: ogenreflect.RuntimeOperation{
			Name: "ListBatchV1NamespacedJob",
			ID:   "listBatchV1NamespacedJob",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListBatchV1NamespacedJobParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListBatchV1NamespacedJobRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIBatchV1JobList)).Elem(),
						reflect.TypeOf(new(*ListBatchV1NamespacedJobUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIBatchV1JobList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListBatchV1beta1CronJobForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "ListBatchV1beta1CronJobForAllNamespaces",
			ID:   "listBatchV1beta1CronJobForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListBatchV1beta1CronJobForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListBatchV1beta1CronJobForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIBatchV1beta1CronJobList)).Elem(),
						reflect.TypeOf(new(*ListBatchV1beta1CronJobForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIBatchV1beta1CronJobList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListBatchV1beta1NamespacedCronJob: ogenreflect.RuntimeOperation{
			Name: "ListBatchV1beta1NamespacedCronJob",
			ID:   "listBatchV1beta1NamespacedCronJob",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListBatchV1beta1NamespacedCronJobParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListBatchV1beta1NamespacedCronJobRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIBatchV1beta1CronJobList)).Elem(),
						reflect.TypeOf(new(*ListBatchV1beta1NamespacedCronJobUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIBatchV1beta1CronJobList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListCertificatesV1CertificateSigningRequest: ogenreflect.RuntimeOperation{
			Name: "ListCertificatesV1CertificateSigningRequest",
			ID:   "listCertificatesV1CertificateSigningRequest",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListCertificatesV1CertificateSigningRequestParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListCertificatesV1CertificateSigningRequestRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICertificatesV1CertificateSigningRequestList)).Elem(),
						reflect.TypeOf(new(*ListCertificatesV1CertificateSigningRequestUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICertificatesV1CertificateSigningRequestList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListCoordinationV1LeaseForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "ListCoordinationV1LeaseForAllNamespaces",
			ID:   "listCoordinationV1LeaseForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListCoordinationV1LeaseForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListCoordinationV1LeaseForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoordinationV1LeaseList)).Elem(),
						reflect.TypeOf(new(*ListCoordinationV1LeaseForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoordinationV1LeaseList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListCoordinationV1NamespacedLease: ogenreflect.RuntimeOperation{
			Name: "ListCoordinationV1NamespacedLease",
			ID:   "listCoordinationV1NamespacedLease",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListCoordinationV1NamespacedLeaseParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListCoordinationV1NamespacedLeaseRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoordinationV1LeaseList)).Elem(),
						reflect.TypeOf(new(*ListCoordinationV1NamespacedLeaseUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoordinationV1LeaseList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListCoreV1ComponentStatus: ogenreflect.RuntimeOperation{
			Name: "ListCoreV1ComponentStatus",
			ID:   "listCoreV1ComponentStatus",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListCoreV1ComponentStatusParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListCoreV1ComponentStatusRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1ComponentStatusList)).Elem(),
						reflect.TypeOf(new(*ListCoreV1ComponentStatusUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1ComponentStatusList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListCoreV1ConfigMapForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "ListCoreV1ConfigMapForAllNamespaces",
			ID:   "listCoreV1ConfigMapForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListCoreV1ConfigMapForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListCoreV1ConfigMapForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1ConfigMapList)).Elem(),
						reflect.TypeOf(new(*ListCoreV1ConfigMapForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1ConfigMapList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListCoreV1EndpointsForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "ListCoreV1EndpointsForAllNamespaces",
			ID:   "listCoreV1EndpointsForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListCoreV1EndpointsForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListCoreV1EndpointsForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1EndpointsList)).Elem(),
						reflect.TypeOf(new(*ListCoreV1EndpointsForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1EndpointsList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListCoreV1EventForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "ListCoreV1EventForAllNamespaces",
			ID:   "listCoreV1EventForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListCoreV1EventForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListCoreV1EventForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1EventList)).Elem(),
						reflect.TypeOf(new(*ListCoreV1EventForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1EventList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListCoreV1LimitRangeForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "ListCoreV1LimitRangeForAllNamespaces",
			ID:   "listCoreV1LimitRangeForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListCoreV1LimitRangeForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListCoreV1LimitRangeForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1LimitRangeList)).Elem(),
						reflect.TypeOf(new(*ListCoreV1LimitRangeForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1LimitRangeList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListCoreV1Namespace: ogenreflect.RuntimeOperation{
			Name: "ListCoreV1Namespace",
			ID:   "listCoreV1Namespace",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListCoreV1NamespaceParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListCoreV1NamespaceRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1NamespaceList)).Elem(),
						reflect.TypeOf(new(*ListCoreV1NamespaceUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1NamespaceList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListCoreV1NamespacedConfigMap: ogenreflect.RuntimeOperation{
			Name: "ListCoreV1NamespacedConfigMap",
			ID:   "listCoreV1NamespacedConfigMap",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListCoreV1NamespacedConfigMapParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListCoreV1NamespacedConfigMapRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1ConfigMapList)).Elem(),
						reflect.TypeOf(new(*ListCoreV1NamespacedConfigMapUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1ConfigMapList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListCoreV1NamespacedEndpoints: ogenreflect.RuntimeOperation{
			Name: "ListCoreV1NamespacedEndpoints",
			ID:   "listCoreV1NamespacedEndpoints",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListCoreV1NamespacedEndpointsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListCoreV1NamespacedEndpointsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1EndpointsList)).Elem(),
						reflect.TypeOf(new(*ListCoreV1NamespacedEndpointsUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1EndpointsList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListCoreV1NamespacedEvent: ogenreflect.RuntimeOperation{
			Name: "ListCoreV1NamespacedEvent",
			ID:   "listCoreV1NamespacedEvent",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListCoreV1NamespacedEventParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListCoreV1NamespacedEventRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1EventList)).Elem(),
						reflect.TypeOf(new(*ListCoreV1NamespacedEventUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1EventList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListCoreV1NamespacedLimitRange: ogenreflect.RuntimeOperation{
			Name: "ListCoreV1NamespacedLimitRange",
			ID:   "listCoreV1NamespacedLimitRange",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListCoreV1NamespacedLimitRangeParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListCoreV1NamespacedLimitRangeRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1LimitRangeList)).Elem(),
						reflect.TypeOf(new(*ListCoreV1NamespacedLimitRangeUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1LimitRangeList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListCoreV1NamespacedPersistentVolumeClaim: ogenreflect.RuntimeOperation{
			Name: "ListCoreV1NamespacedPersistentVolumeClaim",
			ID:   "listCoreV1NamespacedPersistentVolumeClaim",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListCoreV1NamespacedPersistentVolumeClaimParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListCoreV1NamespacedPersistentVolumeClaimRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1PersistentVolumeClaimList)).Elem(),
						reflect.TypeOf(new(*ListCoreV1NamespacedPersistentVolumeClaimUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1PersistentVolumeClaimList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListCoreV1NamespacedPod: ogenreflect.RuntimeOperation{
			Name: "ListCoreV1NamespacedPod",
			ID:   "listCoreV1NamespacedPod",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListCoreV1NamespacedPodParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListCoreV1NamespacedPodRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1PodList)).Elem(),
						reflect.TypeOf(new(*ListCoreV1NamespacedPodUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1PodList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListCoreV1NamespacedPodTemplate: ogenreflect.RuntimeOperation{
			Name: "ListCoreV1NamespacedPodTemplate",
			ID:   "listCoreV1NamespacedPodTemplate",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListCoreV1NamespacedPodTemplateParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListCoreV1NamespacedPodTemplateRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1PodTemplateList)).Elem(),
						reflect.TypeOf(new(*ListCoreV1NamespacedPodTemplateUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1PodTemplateList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListCoreV1NamespacedReplicationController: ogenreflect.RuntimeOperation{
			Name: "ListCoreV1NamespacedReplicationController",
			ID:   "listCoreV1NamespacedReplicationController",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListCoreV1NamespacedReplicationControllerParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListCoreV1NamespacedReplicationControllerRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1ReplicationControllerList)).Elem(),
						reflect.TypeOf(new(*ListCoreV1NamespacedReplicationControllerUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1ReplicationControllerList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListCoreV1NamespacedResourceQuota: ogenreflect.RuntimeOperation{
			Name: "ListCoreV1NamespacedResourceQuota",
			ID:   "listCoreV1NamespacedResourceQuota",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListCoreV1NamespacedResourceQuotaParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListCoreV1NamespacedResourceQuotaRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1ResourceQuotaList)).Elem(),
						reflect.TypeOf(new(*ListCoreV1NamespacedResourceQuotaUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1ResourceQuotaList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListCoreV1NamespacedSecret: ogenreflect.RuntimeOperation{
			Name: "ListCoreV1NamespacedSecret",
			ID:   "listCoreV1NamespacedSecret",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListCoreV1NamespacedSecretParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListCoreV1NamespacedSecretRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1SecretList)).Elem(),
						reflect.TypeOf(new(*ListCoreV1NamespacedSecretUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1SecretList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListCoreV1NamespacedService: ogenreflect.RuntimeOperation{
			Name: "ListCoreV1NamespacedService",
			ID:   "listCoreV1NamespacedService",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListCoreV1NamespacedServiceParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListCoreV1NamespacedServiceRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1ServiceList)).Elem(),
						reflect.TypeOf(new(*ListCoreV1NamespacedServiceUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1ServiceList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListCoreV1NamespacedServiceAccount: ogenreflect.RuntimeOperation{
			Name: "ListCoreV1NamespacedServiceAccount",
			ID:   "listCoreV1NamespacedServiceAccount",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListCoreV1NamespacedServiceAccountParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListCoreV1NamespacedServiceAccountRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1ServiceAccountList)).Elem(),
						reflect.TypeOf(new(*ListCoreV1NamespacedServiceAccountUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1ServiceAccountList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListCoreV1Node: ogenreflect.RuntimeOperation{
			Name: "ListCoreV1Node",
			ID:   "listCoreV1Node",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListCoreV1NodeParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListCoreV1NodeRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1NodeList)).Elem(),
						reflect.TypeOf(new(*ListCoreV1NodeUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1NodeList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListCoreV1PersistentVolume: ogenreflect.RuntimeOperation{
			Name: "ListCoreV1PersistentVolume",
			ID:   "listCoreV1PersistentVolume",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListCoreV1PersistentVolumeParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListCoreV1PersistentVolumeRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1PersistentVolumeList)).Elem(),
						reflect.TypeOf(new(*ListCoreV1PersistentVolumeUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1PersistentVolumeList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListCoreV1PersistentVolumeClaimForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "ListCoreV1PersistentVolumeClaimForAllNamespaces",
			ID:   "listCoreV1PersistentVolumeClaimForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListCoreV1PersistentVolumeClaimForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListCoreV1PersistentVolumeClaimForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1PersistentVolumeClaimList)).Elem(),
						reflect.TypeOf(new(*ListCoreV1PersistentVolumeClaimForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1PersistentVolumeClaimList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListCoreV1PodForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "ListCoreV1PodForAllNamespaces",
			ID:   "listCoreV1PodForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListCoreV1PodForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListCoreV1PodForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1PodList)).Elem(),
						reflect.TypeOf(new(*ListCoreV1PodForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1PodList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListCoreV1PodTemplateForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "ListCoreV1PodTemplateForAllNamespaces",
			ID:   "listCoreV1PodTemplateForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListCoreV1PodTemplateForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListCoreV1PodTemplateForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1PodTemplateList)).Elem(),
						reflect.TypeOf(new(*ListCoreV1PodTemplateForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1PodTemplateList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListCoreV1ReplicationControllerForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "ListCoreV1ReplicationControllerForAllNamespaces",
			ID:   "listCoreV1ReplicationControllerForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListCoreV1ReplicationControllerForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListCoreV1ReplicationControllerForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1ReplicationControllerList)).Elem(),
						reflect.TypeOf(new(*ListCoreV1ReplicationControllerForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1ReplicationControllerList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListCoreV1ResourceQuotaForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "ListCoreV1ResourceQuotaForAllNamespaces",
			ID:   "listCoreV1ResourceQuotaForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListCoreV1ResourceQuotaForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListCoreV1ResourceQuotaForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1ResourceQuotaList)).Elem(),
						reflect.TypeOf(new(*ListCoreV1ResourceQuotaForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1ResourceQuotaList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListCoreV1SecretForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "ListCoreV1SecretForAllNamespaces",
			ID:   "listCoreV1SecretForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListCoreV1SecretForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListCoreV1SecretForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1SecretList)).Elem(),
						reflect.TypeOf(new(*ListCoreV1SecretForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1SecretList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListCoreV1ServiceAccountForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "ListCoreV1ServiceAccountForAllNamespaces",
			ID:   "listCoreV1ServiceAccountForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListCoreV1ServiceAccountForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListCoreV1ServiceAccountForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1ServiceAccountList)).Elem(),
						reflect.TypeOf(new(*ListCoreV1ServiceAccountForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1ServiceAccountList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListCoreV1ServiceForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "ListCoreV1ServiceForAllNamespaces",
			ID:   "listCoreV1ServiceForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListCoreV1ServiceForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListCoreV1ServiceForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1ServiceList)).Elem(),
						reflect.TypeOf(new(*ListCoreV1ServiceForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1ServiceList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListDiscoveryV1EndpointSliceForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "ListDiscoveryV1EndpointSliceForAllNamespaces",
			ID:   "listDiscoveryV1EndpointSliceForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListDiscoveryV1EndpointSliceForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListDiscoveryV1EndpointSliceForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIDiscoveryV1EndpointSliceList)).Elem(),
						reflect.TypeOf(new(*ListDiscoveryV1EndpointSliceForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIDiscoveryV1EndpointSliceList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListDiscoveryV1NamespacedEndpointSlice: ogenreflect.RuntimeOperation{
			Name: "ListDiscoveryV1NamespacedEndpointSlice",
			ID:   "listDiscoveryV1NamespacedEndpointSlice",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListDiscoveryV1NamespacedEndpointSliceParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListDiscoveryV1NamespacedEndpointSliceRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIDiscoveryV1EndpointSliceList)).Elem(),
						reflect.TypeOf(new(*ListDiscoveryV1NamespacedEndpointSliceUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIDiscoveryV1EndpointSliceList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListDiscoveryV1beta1EndpointSliceForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "ListDiscoveryV1beta1EndpointSliceForAllNamespaces",
			ID:   "listDiscoveryV1beta1EndpointSliceForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListDiscoveryV1beta1EndpointSliceForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListDiscoveryV1beta1EndpointSliceForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIDiscoveryV1beta1EndpointSliceList)).Elem(),
						reflect.TypeOf(new(*ListDiscoveryV1beta1EndpointSliceForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIDiscoveryV1beta1EndpointSliceList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListDiscoveryV1beta1NamespacedEndpointSlice: ogenreflect.RuntimeOperation{
			Name: "ListDiscoveryV1beta1NamespacedEndpointSlice",
			ID:   "listDiscoveryV1beta1NamespacedEndpointSlice",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListDiscoveryV1beta1NamespacedEndpointSliceParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListDiscoveryV1beta1NamespacedEndpointSliceRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIDiscoveryV1beta1EndpointSliceList)).Elem(),
						reflect.TypeOf(new(*ListDiscoveryV1beta1NamespacedEndpointSliceUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIDiscoveryV1beta1EndpointSliceList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListEventsV1EventForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "ListEventsV1EventForAllNamespaces",
			ID:   "listEventsV1EventForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListEventsV1EventForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListEventsV1EventForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIEventsV1EventList)).Elem(),
						reflect.TypeOf(new(*ListEventsV1EventForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIEventsV1EventList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListEventsV1NamespacedEvent: ogenreflect.RuntimeOperation{
			Name: "ListEventsV1NamespacedEvent",
			ID:   "listEventsV1NamespacedEvent",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListEventsV1NamespacedEventParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListEventsV1NamespacedEventRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIEventsV1EventList)).Elem(),
						reflect.TypeOf(new(*ListEventsV1NamespacedEventUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIEventsV1EventList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListEventsV1beta1EventForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "ListEventsV1beta1EventForAllNamespaces",
			ID:   "listEventsV1beta1EventForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListEventsV1beta1EventForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListEventsV1beta1EventForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIEventsV1beta1EventList)).Elem(),
						reflect.TypeOf(new(*ListEventsV1beta1EventForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIEventsV1beta1EventList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListEventsV1beta1NamespacedEvent: ogenreflect.RuntimeOperation{
			Name: "ListEventsV1beta1NamespacedEvent",
			ID:   "listEventsV1beta1NamespacedEvent",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListEventsV1beta1NamespacedEventParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListEventsV1beta1NamespacedEventRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIEventsV1beta1EventList)).Elem(),
						reflect.TypeOf(new(*ListEventsV1beta1NamespacedEventUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIEventsV1beta1EventList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListFlowcontrolApiserverV1beta1FlowSchema: ogenreflect.RuntimeOperation{
			Name: "ListFlowcontrolApiserverV1beta1FlowSchema",
			ID:   "listFlowcontrolApiserverV1beta1FlowSchema",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListFlowcontrolApiserverV1beta1FlowSchemaParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListFlowcontrolApiserverV1beta1FlowSchemaRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIFlowcontrolV1beta1FlowSchemaList)).Elem(),
						reflect.TypeOf(new(*ListFlowcontrolApiserverV1beta1FlowSchemaUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIFlowcontrolV1beta1FlowSchemaList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListFlowcontrolApiserverV1beta1PriorityLevelConfiguration: ogenreflect.RuntimeOperation{
			Name: "ListFlowcontrolApiserverV1beta1PriorityLevelConfiguration",
			ID:   "listFlowcontrolApiserverV1beta1PriorityLevelConfiguration",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationList)).Elem(),
						reflect.TypeOf(new(*ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListFlowcontrolApiserverV1beta2FlowSchema: ogenreflect.RuntimeOperation{
			Name: "ListFlowcontrolApiserverV1beta2FlowSchema",
			ID:   "listFlowcontrolApiserverV1beta2FlowSchema",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListFlowcontrolApiserverV1beta2FlowSchemaParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListFlowcontrolApiserverV1beta2FlowSchemaRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIFlowcontrolV1beta2FlowSchemaList)).Elem(),
						reflect.TypeOf(new(*ListFlowcontrolApiserverV1beta2FlowSchemaUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIFlowcontrolV1beta2FlowSchemaList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListFlowcontrolApiserverV1beta2PriorityLevelConfiguration: ogenreflect.RuntimeOperation{
			Name: "ListFlowcontrolApiserverV1beta2PriorityLevelConfiguration",
			ID:   "listFlowcontrolApiserverV1beta2PriorityLevelConfiguration",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationList)).Elem(),
						reflect.TypeOf(new(*ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListInternalApiserverV1alpha1StorageVersion: ogenreflect.RuntimeOperation{
			Name: "ListInternalApiserverV1alpha1StorageVersion",
			ID:   "listInternalApiserverV1alpha1StorageVersion",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListInternalApiserverV1alpha1StorageVersionParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListInternalApiserverV1alpha1StorageVersionRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIApiserverinternalV1alpha1StorageVersionList)).Elem(),
						reflect.TypeOf(new(*ListInternalApiserverV1alpha1StorageVersionUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIApiserverinternalV1alpha1StorageVersionList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListNetworkingV1IngressClass: ogenreflect.RuntimeOperation{
			Name: "ListNetworkingV1IngressClass",
			ID:   "listNetworkingV1IngressClass",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListNetworkingV1IngressClassParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListNetworkingV1IngressClassRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPINetworkingV1IngressClassList)).Elem(),
						reflect.TypeOf(new(*ListNetworkingV1IngressClassUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPINetworkingV1IngressClassList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListNetworkingV1IngressForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "ListNetworkingV1IngressForAllNamespaces",
			ID:   "listNetworkingV1IngressForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListNetworkingV1IngressForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListNetworkingV1IngressForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPINetworkingV1IngressList)).Elem(),
						reflect.TypeOf(new(*ListNetworkingV1IngressForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPINetworkingV1IngressList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListNetworkingV1NamespacedIngress: ogenreflect.RuntimeOperation{
			Name: "ListNetworkingV1NamespacedIngress",
			ID:   "listNetworkingV1NamespacedIngress",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListNetworkingV1NamespacedIngressParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListNetworkingV1NamespacedIngressRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPINetworkingV1IngressList)).Elem(),
						reflect.TypeOf(new(*ListNetworkingV1NamespacedIngressUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPINetworkingV1IngressList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListNetworkingV1NamespacedNetworkPolicy: ogenreflect.RuntimeOperation{
			Name: "ListNetworkingV1NamespacedNetworkPolicy",
			ID:   "listNetworkingV1NamespacedNetworkPolicy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListNetworkingV1NamespacedNetworkPolicyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListNetworkingV1NamespacedNetworkPolicyRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPINetworkingV1NetworkPolicyList)).Elem(),
						reflect.TypeOf(new(*ListNetworkingV1NamespacedNetworkPolicyUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPINetworkingV1NetworkPolicyList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListNetworkingV1NetworkPolicyForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "ListNetworkingV1NetworkPolicyForAllNamespaces",
			ID:   "listNetworkingV1NetworkPolicyForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListNetworkingV1NetworkPolicyForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListNetworkingV1NetworkPolicyForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPINetworkingV1NetworkPolicyList)).Elem(),
						reflect.TypeOf(new(*ListNetworkingV1NetworkPolicyForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPINetworkingV1NetworkPolicyList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListNodeV1RuntimeClass: ogenreflect.RuntimeOperation{
			Name: "ListNodeV1RuntimeClass",
			ID:   "listNodeV1RuntimeClass",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListNodeV1RuntimeClassParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListNodeV1RuntimeClassRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPINodeV1RuntimeClassList)).Elem(),
						reflect.TypeOf(new(*ListNodeV1RuntimeClassUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPINodeV1RuntimeClassList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListNodeV1alpha1RuntimeClass: ogenreflect.RuntimeOperation{
			Name: "ListNodeV1alpha1RuntimeClass",
			ID:   "listNodeV1alpha1RuntimeClass",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListNodeV1alpha1RuntimeClassParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListNodeV1alpha1RuntimeClassRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPINodeV1alpha1RuntimeClassList)).Elem(),
						reflect.TypeOf(new(*ListNodeV1alpha1RuntimeClassUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPINodeV1alpha1RuntimeClassList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListNodeV1beta1RuntimeClass: ogenreflect.RuntimeOperation{
			Name: "ListNodeV1beta1RuntimeClass",
			ID:   "listNodeV1beta1RuntimeClass",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListNodeV1beta1RuntimeClassParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListNodeV1beta1RuntimeClassRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPINodeV1beta1RuntimeClassList)).Elem(),
						reflect.TypeOf(new(*ListNodeV1beta1RuntimeClassUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPINodeV1beta1RuntimeClassList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListPolicyV1NamespacedPodDisruptionBudget: ogenreflect.RuntimeOperation{
			Name: "ListPolicyV1NamespacedPodDisruptionBudget",
			ID:   "listPolicyV1NamespacedPodDisruptionBudget",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListPolicyV1NamespacedPodDisruptionBudgetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListPolicyV1NamespacedPodDisruptionBudgetRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIPolicyV1PodDisruptionBudgetList)).Elem(),
						reflect.TypeOf(new(*ListPolicyV1NamespacedPodDisruptionBudgetUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIPolicyV1PodDisruptionBudgetList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListPolicyV1PodDisruptionBudgetForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "ListPolicyV1PodDisruptionBudgetForAllNamespaces",
			ID:   "listPolicyV1PodDisruptionBudgetForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListPolicyV1PodDisruptionBudgetForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListPolicyV1PodDisruptionBudgetForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIPolicyV1PodDisruptionBudgetList)).Elem(),
						reflect.TypeOf(new(*ListPolicyV1PodDisruptionBudgetForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIPolicyV1PodDisruptionBudgetList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListPolicyV1beta1NamespacedPodDisruptionBudget: ogenreflect.RuntimeOperation{
			Name: "ListPolicyV1beta1NamespacedPodDisruptionBudget",
			ID:   "listPolicyV1beta1NamespacedPodDisruptionBudget",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListPolicyV1beta1NamespacedPodDisruptionBudgetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListPolicyV1beta1NamespacedPodDisruptionBudgetRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIPolicyV1beta1PodDisruptionBudgetList)).Elem(),
						reflect.TypeOf(new(*ListPolicyV1beta1NamespacedPodDisruptionBudgetUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIPolicyV1beta1PodDisruptionBudgetList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListPolicyV1beta1PodDisruptionBudgetForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "ListPolicyV1beta1PodDisruptionBudgetForAllNamespaces",
			ID:   "listPolicyV1beta1PodDisruptionBudgetForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIPolicyV1beta1PodDisruptionBudgetList)).Elem(),
						reflect.TypeOf(new(*ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIPolicyV1beta1PodDisruptionBudgetList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListPolicyV1beta1PodSecurityPolicy: ogenreflect.RuntimeOperation{
			Name: "ListPolicyV1beta1PodSecurityPolicy",
			ID:   "listPolicyV1beta1PodSecurityPolicy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListPolicyV1beta1PodSecurityPolicyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListPolicyV1beta1PodSecurityPolicyRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIPolicyV1beta1PodSecurityPolicyList)).Elem(),
						reflect.TypeOf(new(*ListPolicyV1beta1PodSecurityPolicyUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIPolicyV1beta1PodSecurityPolicyList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListRbacAuthorizationV1ClusterRole: ogenreflect.RuntimeOperation{
			Name: "ListRbacAuthorizationV1ClusterRole",
			ID:   "listRbacAuthorizationV1ClusterRole",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListRbacAuthorizationV1ClusterRoleParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListRbacAuthorizationV1ClusterRoleRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIRbacV1ClusterRoleList)).Elem(),
						reflect.TypeOf(new(*ListRbacAuthorizationV1ClusterRoleUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIRbacV1ClusterRoleList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListRbacAuthorizationV1ClusterRoleBinding: ogenreflect.RuntimeOperation{
			Name: "ListRbacAuthorizationV1ClusterRoleBinding",
			ID:   "listRbacAuthorizationV1ClusterRoleBinding",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListRbacAuthorizationV1ClusterRoleBindingParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListRbacAuthorizationV1ClusterRoleBindingRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIRbacV1ClusterRoleBindingList)).Elem(),
						reflect.TypeOf(new(*ListRbacAuthorizationV1ClusterRoleBindingUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIRbacV1ClusterRoleBindingList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListRbacAuthorizationV1NamespacedRole: ogenreflect.RuntimeOperation{
			Name: "ListRbacAuthorizationV1NamespacedRole",
			ID:   "listRbacAuthorizationV1NamespacedRole",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListRbacAuthorizationV1NamespacedRoleParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListRbacAuthorizationV1NamespacedRoleRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIRbacV1RoleList)).Elem(),
						reflect.TypeOf(new(*ListRbacAuthorizationV1NamespacedRoleUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIRbacV1RoleList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListRbacAuthorizationV1NamespacedRoleBinding: ogenreflect.RuntimeOperation{
			Name: "ListRbacAuthorizationV1NamespacedRoleBinding",
			ID:   "listRbacAuthorizationV1NamespacedRoleBinding",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListRbacAuthorizationV1NamespacedRoleBindingParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListRbacAuthorizationV1NamespacedRoleBindingRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIRbacV1RoleBindingList)).Elem(),
						reflect.TypeOf(new(*ListRbacAuthorizationV1NamespacedRoleBindingUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIRbacV1RoleBindingList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListRbacAuthorizationV1RoleBindingForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "ListRbacAuthorizationV1RoleBindingForAllNamespaces",
			ID:   "listRbacAuthorizationV1RoleBindingForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListRbacAuthorizationV1RoleBindingForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListRbacAuthorizationV1RoleBindingForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIRbacV1RoleBindingList)).Elem(),
						reflect.TypeOf(new(*ListRbacAuthorizationV1RoleBindingForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIRbacV1RoleBindingList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListRbacAuthorizationV1RoleForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "ListRbacAuthorizationV1RoleForAllNamespaces",
			ID:   "listRbacAuthorizationV1RoleForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListRbacAuthorizationV1RoleForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListRbacAuthorizationV1RoleForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIRbacV1RoleList)).Elem(),
						reflect.TypeOf(new(*ListRbacAuthorizationV1RoleForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIRbacV1RoleList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListSchedulingV1PriorityClass: ogenreflect.RuntimeOperation{
			Name: "ListSchedulingV1PriorityClass",
			ID:   "listSchedulingV1PriorityClass",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListSchedulingV1PriorityClassParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListSchedulingV1PriorityClassRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPISchedulingV1PriorityClassList)).Elem(),
						reflect.TypeOf(new(*ListSchedulingV1PriorityClassUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPISchedulingV1PriorityClassList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListStorageV1CSIDriver: ogenreflect.RuntimeOperation{
			Name: "ListStorageV1CSIDriver",
			ID:   "listStorageV1CSIDriver",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListStorageV1CSIDriverParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListStorageV1CSIDriverRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIStorageV1CSIDriverList)).Elem(),
						reflect.TypeOf(new(*ListStorageV1CSIDriverUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIStorageV1CSIDriverList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListStorageV1CSINode: ogenreflect.RuntimeOperation{
			Name: "ListStorageV1CSINode",
			ID:   "listStorageV1CSINode",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListStorageV1CSINodeParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListStorageV1CSINodeRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIStorageV1CSINodeList)).Elem(),
						reflect.TypeOf(new(*ListStorageV1CSINodeUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIStorageV1CSINodeList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListStorageV1StorageClass: ogenreflect.RuntimeOperation{
			Name: "ListStorageV1StorageClass",
			ID:   "listStorageV1StorageClass",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListStorageV1StorageClassParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListStorageV1StorageClassRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIStorageV1StorageClassList)).Elem(),
						reflect.TypeOf(new(*ListStorageV1StorageClassUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIStorageV1StorageClassList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListStorageV1VolumeAttachment: ogenreflect.RuntimeOperation{
			Name: "ListStorageV1VolumeAttachment",
			ID:   "listStorageV1VolumeAttachment",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListStorageV1VolumeAttachmentParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListStorageV1VolumeAttachmentRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIStorageV1VolumeAttachmentList)).Elem(),
						reflect.TypeOf(new(*ListStorageV1VolumeAttachmentUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIStorageV1VolumeAttachmentList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListStorageV1alpha1CSIStorageCapacityForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "ListStorageV1alpha1CSIStorageCapacityForAllNamespaces",
			ID:   "listStorageV1alpha1CSIStorageCapacityForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListStorageV1alpha1CSIStorageCapacityForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListStorageV1alpha1CSIStorageCapacityForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIStorageV1alpha1CSIStorageCapacityList)).Elem(),
						reflect.TypeOf(new(*ListStorageV1alpha1CSIStorageCapacityForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIStorageV1alpha1CSIStorageCapacityList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListStorageV1alpha1NamespacedCSIStorageCapacity: ogenreflect.RuntimeOperation{
			Name: "ListStorageV1alpha1NamespacedCSIStorageCapacity",
			ID:   "listStorageV1alpha1NamespacedCSIStorageCapacity",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListStorageV1alpha1NamespacedCSIStorageCapacityParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListStorageV1alpha1NamespacedCSIStorageCapacityRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIStorageV1alpha1CSIStorageCapacityList)).Elem(),
						reflect.TypeOf(new(*ListStorageV1alpha1NamespacedCSIStorageCapacityUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIStorageV1alpha1CSIStorageCapacityList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListStorageV1beta1CSIStorageCapacityForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "ListStorageV1beta1CSIStorageCapacityForAllNamespaces",
			ID:   "listStorageV1beta1CSIStorageCapacityForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListStorageV1beta1CSIStorageCapacityForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListStorageV1beta1CSIStorageCapacityForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIStorageV1beta1CSIStorageCapacityList)).Elem(),
						reflect.TypeOf(new(*ListStorageV1beta1CSIStorageCapacityForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIStorageV1beta1CSIStorageCapacityList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ListStorageV1beta1NamespacedCSIStorageCapacity: ogenreflect.RuntimeOperation{
			Name: "ListStorageV1beta1NamespacedCSIStorageCapacity",
			ID:   "listStorageV1beta1NamespacedCSIStorageCapacity",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ListStorageV1beta1NamespacedCSIStorageCapacityParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ListStorageV1beta1NamespacedCSIStorageCapacityRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIStorageV1beta1CSIStorageCapacityList)).Elem(),
						reflect.TypeOf(new(*ListStorageV1beta1NamespacedCSIStorageCapacityUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIStorageV1beta1CSIStorageCapacityList)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		LogFileHandler: ogenreflect.RuntimeOperation{
			Name: "LogFileHandler",
			ID:   "logFileHandler",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(LogFileHandlerParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "logpath",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "logpath",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(LogFileHandlerUnauthorized)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		LogFileListHandler: ogenreflect.RuntimeOperation{
			Name: "LogFileListHandler",
			ID:   "logFileListHandler",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type:            reflect.TypeOf(new(LogFileListHandlerUnauthorized)).Elem(),
					Implementations: nil,
					PatternMap: map[string]ogenreflect.ResponseType{
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadAdmissionregistrationV1MutatingWebhookConfiguration: ogenreflect.RuntimeOperation{
			Name: "ReadAdmissionregistrationV1MutatingWebhookConfiguration",
			ID:   "readAdmissionregistrationV1MutatingWebhookConfiguration",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadAdmissionregistrationV1MutatingWebhookConfigurationParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadAdmissionregistrationV1MutatingWebhookConfigurationRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration)).Elem(),
						reflect.TypeOf(new(*ReadAdmissionregistrationV1MutatingWebhookConfigurationUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadAdmissionregistrationV1ValidatingWebhookConfiguration: ogenreflect.RuntimeOperation{
			Name: "ReadAdmissionregistrationV1ValidatingWebhookConfiguration",
			ID:   "readAdmissionregistrationV1ValidatingWebhookConfiguration",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadAdmissionregistrationV1ValidatingWebhookConfigurationParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadAdmissionregistrationV1ValidatingWebhookConfigurationRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration)).Elem(),
						reflect.TypeOf(new(*ReadAdmissionregistrationV1ValidatingWebhookConfigurationUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadApiextensionsV1CustomResourceDefinition: ogenreflect.RuntimeOperation{
			Name: "ReadApiextensionsV1CustomResourceDefinition",
			ID:   "readApiextensionsV1CustomResourceDefinition",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadApiextensionsV1CustomResourceDefinitionParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadApiextensionsV1CustomResourceDefinitionRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition)).Elem(),
						reflect.TypeOf(new(*ReadApiextensionsV1CustomResourceDefinitionUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadApiextensionsV1CustomResourceDefinitionStatus: ogenreflect.RuntimeOperation{
			Name: "ReadApiextensionsV1CustomResourceDefinitionStatus",
			ID:   "readApiextensionsV1CustomResourceDefinitionStatus",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadApiextensionsV1CustomResourceDefinitionStatusParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadApiextensionsV1CustomResourceDefinitionStatusRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition)).Elem(),
						reflect.TypeOf(new(*ReadApiextensionsV1CustomResourceDefinitionStatusUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadApiregistrationV1APIService: ogenreflect.RuntimeOperation{
			Name: "ReadApiregistrationV1APIService",
			ID:   "readApiregistrationV1APIService",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadApiregistrationV1APIServiceParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadApiregistrationV1APIServiceRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sKubeAggregatorPkgApisApiregistrationV1APIService)).Elem(),
						reflect.TypeOf(new(*ReadApiregistrationV1APIServiceUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sKubeAggregatorPkgApisApiregistrationV1APIService)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadApiregistrationV1APIServiceStatus: ogenreflect.RuntimeOperation{
			Name: "ReadApiregistrationV1APIServiceStatus",
			ID:   "readApiregistrationV1APIServiceStatus",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadApiregistrationV1APIServiceStatusParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadApiregistrationV1APIServiceStatusRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sKubeAggregatorPkgApisApiregistrationV1APIService)).Elem(),
						reflect.TypeOf(new(*ReadApiregistrationV1APIServiceStatusUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sKubeAggregatorPkgApisApiregistrationV1APIService)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadAppsV1NamespacedControllerRevision: ogenreflect.RuntimeOperation{
			Name: "ReadAppsV1NamespacedControllerRevision",
			ID:   "readAppsV1NamespacedControllerRevision",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadAppsV1NamespacedControllerRevisionParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadAppsV1NamespacedControllerRevisionRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIAppsV1ControllerRevision)).Elem(),
						reflect.TypeOf(new(*ReadAppsV1NamespacedControllerRevisionUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIAppsV1ControllerRevision)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadAppsV1NamespacedDaemonSet: ogenreflect.RuntimeOperation{
			Name: "ReadAppsV1NamespacedDaemonSet",
			ID:   "readAppsV1NamespacedDaemonSet",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadAppsV1NamespacedDaemonSetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadAppsV1NamespacedDaemonSetRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIAppsV1DaemonSet)).Elem(),
						reflect.TypeOf(new(*ReadAppsV1NamespacedDaemonSetUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIAppsV1DaemonSet)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadAppsV1NamespacedDaemonSetStatus: ogenreflect.RuntimeOperation{
			Name: "ReadAppsV1NamespacedDaemonSetStatus",
			ID:   "readAppsV1NamespacedDaemonSetStatus",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadAppsV1NamespacedDaemonSetStatusParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadAppsV1NamespacedDaemonSetStatusRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIAppsV1DaemonSet)).Elem(),
						reflect.TypeOf(new(*ReadAppsV1NamespacedDaemonSetStatusUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIAppsV1DaemonSet)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadAppsV1NamespacedDeployment: ogenreflect.RuntimeOperation{
			Name: "ReadAppsV1NamespacedDeployment",
			ID:   "readAppsV1NamespacedDeployment",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadAppsV1NamespacedDeploymentParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadAppsV1NamespacedDeploymentRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIAppsV1Deployment)).Elem(),
						reflect.TypeOf(new(*ReadAppsV1NamespacedDeploymentUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIAppsV1Deployment)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadAppsV1NamespacedDeploymentScale: ogenreflect.RuntimeOperation{
			Name: "ReadAppsV1NamespacedDeploymentScale",
			ID:   "readAppsV1NamespacedDeploymentScale",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadAppsV1NamespacedDeploymentScaleParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadAppsV1NamespacedDeploymentScaleRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIAutoscalingV1Scale)).Elem(),
						reflect.TypeOf(new(*ReadAppsV1NamespacedDeploymentScaleUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIAutoscalingV1Scale)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadAppsV1NamespacedDeploymentStatus: ogenreflect.RuntimeOperation{
			Name: "ReadAppsV1NamespacedDeploymentStatus",
			ID:   "readAppsV1NamespacedDeploymentStatus",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadAppsV1NamespacedDeploymentStatusParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadAppsV1NamespacedDeploymentStatusRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIAppsV1Deployment)).Elem(),
						reflect.TypeOf(new(*ReadAppsV1NamespacedDeploymentStatusUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIAppsV1Deployment)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadAppsV1NamespacedReplicaSet: ogenreflect.RuntimeOperation{
			Name: "ReadAppsV1NamespacedReplicaSet",
			ID:   "readAppsV1NamespacedReplicaSet",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadAppsV1NamespacedReplicaSetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadAppsV1NamespacedReplicaSetRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIAppsV1ReplicaSet)).Elem(),
						reflect.TypeOf(new(*ReadAppsV1NamespacedReplicaSetUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIAppsV1ReplicaSet)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadAppsV1NamespacedReplicaSetScale: ogenreflect.RuntimeOperation{
			Name: "ReadAppsV1NamespacedReplicaSetScale",
			ID:   "readAppsV1NamespacedReplicaSetScale",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadAppsV1NamespacedReplicaSetScaleParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadAppsV1NamespacedReplicaSetScaleRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIAutoscalingV1Scale)).Elem(),
						reflect.TypeOf(new(*ReadAppsV1NamespacedReplicaSetScaleUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIAutoscalingV1Scale)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadAppsV1NamespacedReplicaSetStatus: ogenreflect.RuntimeOperation{
			Name: "ReadAppsV1NamespacedReplicaSetStatus",
			ID:   "readAppsV1NamespacedReplicaSetStatus",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadAppsV1NamespacedReplicaSetStatusParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadAppsV1NamespacedReplicaSetStatusRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIAppsV1ReplicaSet)).Elem(),
						reflect.TypeOf(new(*ReadAppsV1NamespacedReplicaSetStatusUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIAppsV1ReplicaSet)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadAppsV1NamespacedStatefulSet: ogenreflect.RuntimeOperation{
			Name: "ReadAppsV1NamespacedStatefulSet",
			ID:   "readAppsV1NamespacedStatefulSet",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadAppsV1NamespacedStatefulSetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadAppsV1NamespacedStatefulSetRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIAppsV1StatefulSet)).Elem(),
						reflect.TypeOf(new(*ReadAppsV1NamespacedStatefulSetUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIAppsV1StatefulSet)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadAppsV1NamespacedStatefulSetScale: ogenreflect.RuntimeOperation{
			Name: "ReadAppsV1NamespacedStatefulSetScale",
			ID:   "readAppsV1NamespacedStatefulSetScale",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadAppsV1NamespacedStatefulSetScaleParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadAppsV1NamespacedStatefulSetScaleRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIAutoscalingV1Scale)).Elem(),
						reflect.TypeOf(new(*ReadAppsV1NamespacedStatefulSetScaleUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIAutoscalingV1Scale)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadAppsV1NamespacedStatefulSetStatus: ogenreflect.RuntimeOperation{
			Name: "ReadAppsV1NamespacedStatefulSetStatus",
			ID:   "readAppsV1NamespacedStatefulSetStatus",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadAppsV1NamespacedStatefulSetStatusParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadAppsV1NamespacedStatefulSetStatusRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIAppsV1StatefulSet)).Elem(),
						reflect.TypeOf(new(*ReadAppsV1NamespacedStatefulSetStatusUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIAppsV1StatefulSet)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadAutoscalingV1NamespacedHorizontalPodAutoscaler: ogenreflect.RuntimeOperation{
			Name: "ReadAutoscalingV1NamespacedHorizontalPodAutoscaler",
			ID:   "readAutoscalingV1NamespacedHorizontalPodAutoscaler",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadAutoscalingV1NamespacedHorizontalPodAutoscalerParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadAutoscalingV1NamespacedHorizontalPodAutoscalerRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIAutoscalingV1HorizontalPodAutoscaler)).Elem(),
						reflect.TypeOf(new(*ReadAutoscalingV1NamespacedHorizontalPodAutoscalerUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIAutoscalingV1HorizontalPodAutoscaler)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatus: ogenreflect.RuntimeOperation{
			Name: "ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatus",
			ID:   "readAutoscalingV1NamespacedHorizontalPodAutoscalerStatus",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIAutoscalingV1HorizontalPodAutoscaler)).Elem(),
						reflect.TypeOf(new(*ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIAutoscalingV1HorizontalPodAutoscaler)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscaler: ogenreflect.RuntimeOperation{
			Name: "ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscaler",
			ID:   "readAutoscalingV2beta1NamespacedHorizontalPodAutoscaler",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscaler)).Elem(),
						reflect.TypeOf(new(*ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscaler)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus: ogenreflect.RuntimeOperation{
			Name: "ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus",
			ID:   "readAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscaler)).Elem(),
						reflect.TypeOf(new(*ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscaler)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscaler: ogenreflect.RuntimeOperation{
			Name: "ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscaler",
			ID:   "readAutoscalingV2beta2NamespacedHorizontalPodAutoscaler",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscaler)).Elem(),
						reflect.TypeOf(new(*ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscaler)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus: ogenreflect.RuntimeOperation{
			Name: "ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus",
			ID:   "readAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscaler)).Elem(),
						reflect.TypeOf(new(*ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscaler)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadBatchV1NamespacedCronJob: ogenreflect.RuntimeOperation{
			Name: "ReadBatchV1NamespacedCronJob",
			ID:   "readBatchV1NamespacedCronJob",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadBatchV1NamespacedCronJobParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadBatchV1NamespacedCronJobRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIBatchV1CronJob)).Elem(),
						reflect.TypeOf(new(*ReadBatchV1NamespacedCronJobUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIBatchV1CronJob)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadBatchV1NamespacedCronJobStatus: ogenreflect.RuntimeOperation{
			Name: "ReadBatchV1NamespacedCronJobStatus",
			ID:   "readBatchV1NamespacedCronJobStatus",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadBatchV1NamespacedCronJobStatusParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadBatchV1NamespacedCronJobStatusRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIBatchV1CronJob)).Elem(),
						reflect.TypeOf(new(*ReadBatchV1NamespacedCronJobStatusUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIBatchV1CronJob)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadBatchV1NamespacedJob: ogenreflect.RuntimeOperation{
			Name: "ReadBatchV1NamespacedJob",
			ID:   "readBatchV1NamespacedJob",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadBatchV1NamespacedJobParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadBatchV1NamespacedJobRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIBatchV1Job)).Elem(),
						reflect.TypeOf(new(*ReadBatchV1NamespacedJobUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIBatchV1Job)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadBatchV1NamespacedJobStatus: ogenreflect.RuntimeOperation{
			Name: "ReadBatchV1NamespacedJobStatus",
			ID:   "readBatchV1NamespacedJobStatus",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadBatchV1NamespacedJobStatusParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadBatchV1NamespacedJobStatusRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIBatchV1Job)).Elem(),
						reflect.TypeOf(new(*ReadBatchV1NamespacedJobStatusUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIBatchV1Job)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadBatchV1beta1NamespacedCronJob: ogenreflect.RuntimeOperation{
			Name: "ReadBatchV1beta1NamespacedCronJob",
			ID:   "readBatchV1beta1NamespacedCronJob",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadBatchV1beta1NamespacedCronJobParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadBatchV1beta1NamespacedCronJobRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIBatchV1beta1CronJob)).Elem(),
						reflect.TypeOf(new(*ReadBatchV1beta1NamespacedCronJobUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIBatchV1beta1CronJob)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadBatchV1beta1NamespacedCronJobStatus: ogenreflect.RuntimeOperation{
			Name: "ReadBatchV1beta1NamespacedCronJobStatus",
			ID:   "readBatchV1beta1NamespacedCronJobStatus",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadBatchV1beta1NamespacedCronJobStatusParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadBatchV1beta1NamespacedCronJobStatusRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIBatchV1beta1CronJob)).Elem(),
						reflect.TypeOf(new(*ReadBatchV1beta1NamespacedCronJobStatusUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIBatchV1beta1CronJob)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadCertificatesV1CertificateSigningRequest: ogenreflect.RuntimeOperation{
			Name: "ReadCertificatesV1CertificateSigningRequest",
			ID:   "readCertificatesV1CertificateSigningRequest",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadCertificatesV1CertificateSigningRequestParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadCertificatesV1CertificateSigningRequestRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICertificatesV1CertificateSigningRequest)).Elem(),
						reflect.TypeOf(new(*ReadCertificatesV1CertificateSigningRequestUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICertificatesV1CertificateSigningRequest)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadCertificatesV1CertificateSigningRequestApproval: ogenreflect.RuntimeOperation{
			Name: "ReadCertificatesV1CertificateSigningRequestApproval",
			ID:   "readCertificatesV1CertificateSigningRequestApproval",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadCertificatesV1CertificateSigningRequestApprovalParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadCertificatesV1CertificateSigningRequestApprovalRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICertificatesV1CertificateSigningRequest)).Elem(),
						reflect.TypeOf(new(*ReadCertificatesV1CertificateSigningRequestApprovalUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICertificatesV1CertificateSigningRequest)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadCertificatesV1CertificateSigningRequestStatus: ogenreflect.RuntimeOperation{
			Name: "ReadCertificatesV1CertificateSigningRequestStatus",
			ID:   "readCertificatesV1CertificateSigningRequestStatus",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadCertificatesV1CertificateSigningRequestStatusParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadCertificatesV1CertificateSigningRequestStatusRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICertificatesV1CertificateSigningRequest)).Elem(),
						reflect.TypeOf(new(*ReadCertificatesV1CertificateSigningRequestStatusUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICertificatesV1CertificateSigningRequest)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadCoordinationV1NamespacedLease: ogenreflect.RuntimeOperation{
			Name: "ReadCoordinationV1NamespacedLease",
			ID:   "readCoordinationV1NamespacedLease",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadCoordinationV1NamespacedLeaseParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadCoordinationV1NamespacedLeaseRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoordinationV1Lease)).Elem(),
						reflect.TypeOf(new(*ReadCoordinationV1NamespacedLeaseUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoordinationV1Lease)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadCoreV1ComponentStatus: ogenreflect.RuntimeOperation{
			Name: "ReadCoreV1ComponentStatus",
			ID:   "readCoreV1ComponentStatus",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadCoreV1ComponentStatusParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadCoreV1ComponentStatusRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1ComponentStatus)).Elem(),
						reflect.TypeOf(new(*ReadCoreV1ComponentStatusUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1ComponentStatus)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadCoreV1Namespace: ogenreflect.RuntimeOperation{
			Name: "ReadCoreV1Namespace",
			ID:   "readCoreV1Namespace",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadCoreV1NamespaceParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadCoreV1NamespaceRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1Namespace)).Elem(),
						reflect.TypeOf(new(*ReadCoreV1NamespaceUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1Namespace)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadCoreV1NamespaceStatus: ogenreflect.RuntimeOperation{
			Name: "ReadCoreV1NamespaceStatus",
			ID:   "readCoreV1NamespaceStatus",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadCoreV1NamespaceStatusParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadCoreV1NamespaceStatusRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1Namespace)).Elem(),
						reflect.TypeOf(new(*ReadCoreV1NamespaceStatusUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1Namespace)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadCoreV1NamespacedConfigMap: ogenreflect.RuntimeOperation{
			Name: "ReadCoreV1NamespacedConfigMap",
			ID:   "readCoreV1NamespacedConfigMap",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadCoreV1NamespacedConfigMapParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadCoreV1NamespacedConfigMapRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1ConfigMap)).Elem(),
						reflect.TypeOf(new(*ReadCoreV1NamespacedConfigMapUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1ConfigMap)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadCoreV1NamespacedEndpoints: ogenreflect.RuntimeOperation{
			Name: "ReadCoreV1NamespacedEndpoints",
			ID:   "readCoreV1NamespacedEndpoints",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadCoreV1NamespacedEndpointsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadCoreV1NamespacedEndpointsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1Endpoints)).Elem(),
						reflect.TypeOf(new(*ReadCoreV1NamespacedEndpointsUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1Endpoints)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadCoreV1NamespacedEvent: ogenreflect.RuntimeOperation{
			Name: "ReadCoreV1NamespacedEvent",
			ID:   "readCoreV1NamespacedEvent",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadCoreV1NamespacedEventParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadCoreV1NamespacedEventRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1Event)).Elem(),
						reflect.TypeOf(new(*ReadCoreV1NamespacedEventUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1Event)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadCoreV1NamespacedLimitRange: ogenreflect.RuntimeOperation{
			Name: "ReadCoreV1NamespacedLimitRange",
			ID:   "readCoreV1NamespacedLimitRange",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadCoreV1NamespacedLimitRangeParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadCoreV1NamespacedLimitRangeRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1LimitRange)).Elem(),
						reflect.TypeOf(new(*ReadCoreV1NamespacedLimitRangeUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1LimitRange)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadCoreV1NamespacedPersistentVolumeClaim: ogenreflect.RuntimeOperation{
			Name: "ReadCoreV1NamespacedPersistentVolumeClaim",
			ID:   "readCoreV1NamespacedPersistentVolumeClaim",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadCoreV1NamespacedPersistentVolumeClaimParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadCoreV1NamespacedPersistentVolumeClaimRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1PersistentVolumeClaim)).Elem(),
						reflect.TypeOf(new(*ReadCoreV1NamespacedPersistentVolumeClaimUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1PersistentVolumeClaim)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadCoreV1NamespacedPersistentVolumeClaimStatus: ogenreflect.RuntimeOperation{
			Name: "ReadCoreV1NamespacedPersistentVolumeClaimStatus",
			ID:   "readCoreV1NamespacedPersistentVolumeClaimStatus",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadCoreV1NamespacedPersistentVolumeClaimStatusParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadCoreV1NamespacedPersistentVolumeClaimStatusRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1PersistentVolumeClaim)).Elem(),
						reflect.TypeOf(new(*ReadCoreV1NamespacedPersistentVolumeClaimStatusUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1PersistentVolumeClaim)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadCoreV1NamespacedPod: ogenreflect.RuntimeOperation{
			Name: "ReadCoreV1NamespacedPod",
			ID:   "readCoreV1NamespacedPod",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadCoreV1NamespacedPodParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadCoreV1NamespacedPodRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1Pod)).Elem(),
						reflect.TypeOf(new(*ReadCoreV1NamespacedPodUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1Pod)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadCoreV1NamespacedPodEphemeralcontainers: ogenreflect.RuntimeOperation{
			Name: "ReadCoreV1NamespacedPodEphemeralcontainers",
			ID:   "readCoreV1NamespacedPodEphemeralcontainers",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadCoreV1NamespacedPodEphemeralcontainersParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadCoreV1NamespacedPodEphemeralcontainersRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1Pod)).Elem(),
						reflect.TypeOf(new(*ReadCoreV1NamespacedPodEphemeralcontainersUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1Pod)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadCoreV1NamespacedPodLog: ogenreflect.RuntimeOperation{
			Name: "ReadCoreV1NamespacedPodLog",
			ID:   "readCoreV1NamespacedPodLog",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadCoreV1NamespacedPodLogParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "container",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "container",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "follow",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "follow",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "insecureSkipTLSVerifyBackend",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "insecureSkipTLSVerifyBackend",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limitBytes",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limitBytes",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "previous",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "previous",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "sinceSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "sinceSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "tailLines",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "tailLines",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timestamps",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "timestamps",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadCoreV1NamespacedPodLogRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*ReadCoreV1NamespacedPodLogOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*ReadCoreV1NamespacedPodLogOKApplicationVndKubernetesProtobuf)).Elem(),
						reflect.TypeOf(new(*ReadCoreV1NamespacedPodLogOKApplicationYaml)).Elem(),
						reflect.TypeOf(new(*ReadCoreV1NamespacedPodLogOKTextPlain)).Elem(),
						reflect.TypeOf(new(*ReadCoreV1NamespacedPodLogUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json":                    reflect.TypeOf(new(ReadCoreV1NamespacedPodLogOKApplicationJSON)).Elem(),
								"application/vnd.kubernetes.protobuf": reflect.TypeOf(new(ReadCoreV1NamespacedPodLogOKApplicationVndKubernetesProtobuf)).Elem(),
								"application/yaml":                    reflect.TypeOf(new(ReadCoreV1NamespacedPodLogOKApplicationYaml)).Elem(),
								"text/plain":                          reflect.TypeOf(new(ReadCoreV1NamespacedPodLogOKTextPlain)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadCoreV1NamespacedPodStatus: ogenreflect.RuntimeOperation{
			Name: "ReadCoreV1NamespacedPodStatus",
			ID:   "readCoreV1NamespacedPodStatus",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadCoreV1NamespacedPodStatusParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadCoreV1NamespacedPodStatusRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1Pod)).Elem(),
						reflect.TypeOf(new(*ReadCoreV1NamespacedPodStatusUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1Pod)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadCoreV1NamespacedPodTemplate: ogenreflect.RuntimeOperation{
			Name: "ReadCoreV1NamespacedPodTemplate",
			ID:   "readCoreV1NamespacedPodTemplate",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadCoreV1NamespacedPodTemplateParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadCoreV1NamespacedPodTemplateRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1PodTemplate)).Elem(),
						reflect.TypeOf(new(*ReadCoreV1NamespacedPodTemplateUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1PodTemplate)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadCoreV1NamespacedReplicationController: ogenreflect.RuntimeOperation{
			Name: "ReadCoreV1NamespacedReplicationController",
			ID:   "readCoreV1NamespacedReplicationController",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadCoreV1NamespacedReplicationControllerParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadCoreV1NamespacedReplicationControllerRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1ReplicationController)).Elem(),
						reflect.TypeOf(new(*ReadCoreV1NamespacedReplicationControllerUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1ReplicationController)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadCoreV1NamespacedReplicationControllerScale: ogenreflect.RuntimeOperation{
			Name: "ReadCoreV1NamespacedReplicationControllerScale",
			ID:   "readCoreV1NamespacedReplicationControllerScale",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadCoreV1NamespacedReplicationControllerScaleParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadCoreV1NamespacedReplicationControllerScaleRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIAutoscalingV1Scale)).Elem(),
						reflect.TypeOf(new(*ReadCoreV1NamespacedReplicationControllerScaleUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIAutoscalingV1Scale)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadCoreV1NamespacedReplicationControllerStatus: ogenreflect.RuntimeOperation{
			Name: "ReadCoreV1NamespacedReplicationControllerStatus",
			ID:   "readCoreV1NamespacedReplicationControllerStatus",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadCoreV1NamespacedReplicationControllerStatusParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadCoreV1NamespacedReplicationControllerStatusRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1ReplicationController)).Elem(),
						reflect.TypeOf(new(*ReadCoreV1NamespacedReplicationControllerStatusUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1ReplicationController)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadCoreV1NamespacedResourceQuota: ogenreflect.RuntimeOperation{
			Name: "ReadCoreV1NamespacedResourceQuota",
			ID:   "readCoreV1NamespacedResourceQuota",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadCoreV1NamespacedResourceQuotaParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadCoreV1NamespacedResourceQuotaRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1ResourceQuota)).Elem(),
						reflect.TypeOf(new(*ReadCoreV1NamespacedResourceQuotaUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1ResourceQuota)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadCoreV1NamespacedResourceQuotaStatus: ogenreflect.RuntimeOperation{
			Name: "ReadCoreV1NamespacedResourceQuotaStatus",
			ID:   "readCoreV1NamespacedResourceQuotaStatus",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadCoreV1NamespacedResourceQuotaStatusParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadCoreV1NamespacedResourceQuotaStatusRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1ResourceQuota)).Elem(),
						reflect.TypeOf(new(*ReadCoreV1NamespacedResourceQuotaStatusUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1ResourceQuota)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadCoreV1NamespacedSecret: ogenreflect.RuntimeOperation{
			Name: "ReadCoreV1NamespacedSecret",
			ID:   "readCoreV1NamespacedSecret",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadCoreV1NamespacedSecretParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadCoreV1NamespacedSecretRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1Secret)).Elem(),
						reflect.TypeOf(new(*ReadCoreV1NamespacedSecretUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1Secret)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadCoreV1NamespacedService: ogenreflect.RuntimeOperation{
			Name: "ReadCoreV1NamespacedService",
			ID:   "readCoreV1NamespacedService",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadCoreV1NamespacedServiceParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadCoreV1NamespacedServiceRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1Service)).Elem(),
						reflect.TypeOf(new(*ReadCoreV1NamespacedServiceUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1Service)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadCoreV1NamespacedServiceAccount: ogenreflect.RuntimeOperation{
			Name: "ReadCoreV1NamespacedServiceAccount",
			ID:   "readCoreV1NamespacedServiceAccount",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadCoreV1NamespacedServiceAccountParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadCoreV1NamespacedServiceAccountRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1ServiceAccount)).Elem(),
						reflect.TypeOf(new(*ReadCoreV1NamespacedServiceAccountUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1ServiceAccount)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadCoreV1NamespacedServiceStatus: ogenreflect.RuntimeOperation{
			Name: "ReadCoreV1NamespacedServiceStatus",
			ID:   "readCoreV1NamespacedServiceStatus",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadCoreV1NamespacedServiceStatusParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadCoreV1NamespacedServiceStatusRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1Service)).Elem(),
						reflect.TypeOf(new(*ReadCoreV1NamespacedServiceStatusUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1Service)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadCoreV1Node: ogenreflect.RuntimeOperation{
			Name: "ReadCoreV1Node",
			ID:   "readCoreV1Node",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadCoreV1NodeParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadCoreV1NodeRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1Node)).Elem(),
						reflect.TypeOf(new(*ReadCoreV1NodeUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1Node)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadCoreV1NodeStatus: ogenreflect.RuntimeOperation{
			Name: "ReadCoreV1NodeStatus",
			ID:   "readCoreV1NodeStatus",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadCoreV1NodeStatusParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadCoreV1NodeStatusRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1Node)).Elem(),
						reflect.TypeOf(new(*ReadCoreV1NodeStatusUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1Node)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadCoreV1PersistentVolume: ogenreflect.RuntimeOperation{
			Name: "ReadCoreV1PersistentVolume",
			ID:   "readCoreV1PersistentVolume",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadCoreV1PersistentVolumeParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadCoreV1PersistentVolumeRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1PersistentVolume)).Elem(),
						reflect.TypeOf(new(*ReadCoreV1PersistentVolumeUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1PersistentVolume)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadCoreV1PersistentVolumeStatus: ogenreflect.RuntimeOperation{
			Name: "ReadCoreV1PersistentVolumeStatus",
			ID:   "readCoreV1PersistentVolumeStatus",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadCoreV1PersistentVolumeStatusParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadCoreV1PersistentVolumeStatusRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPICoreV1PersistentVolume)).Elem(),
						reflect.TypeOf(new(*ReadCoreV1PersistentVolumeStatusUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPICoreV1PersistentVolume)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadDiscoveryV1NamespacedEndpointSlice: ogenreflect.RuntimeOperation{
			Name: "ReadDiscoveryV1NamespacedEndpointSlice",
			ID:   "readDiscoveryV1NamespacedEndpointSlice",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadDiscoveryV1NamespacedEndpointSliceParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadDiscoveryV1NamespacedEndpointSliceRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIDiscoveryV1EndpointSlice)).Elem(),
						reflect.TypeOf(new(*ReadDiscoveryV1NamespacedEndpointSliceUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIDiscoveryV1EndpointSlice)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadDiscoveryV1beta1NamespacedEndpointSlice: ogenreflect.RuntimeOperation{
			Name: "ReadDiscoveryV1beta1NamespacedEndpointSlice",
			ID:   "readDiscoveryV1beta1NamespacedEndpointSlice",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadDiscoveryV1beta1NamespacedEndpointSliceParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadDiscoveryV1beta1NamespacedEndpointSliceRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIDiscoveryV1beta1EndpointSlice)).Elem(),
						reflect.TypeOf(new(*ReadDiscoveryV1beta1NamespacedEndpointSliceUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIDiscoveryV1beta1EndpointSlice)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadEventsV1NamespacedEvent: ogenreflect.RuntimeOperation{
			Name: "ReadEventsV1NamespacedEvent",
			ID:   "readEventsV1NamespacedEvent",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadEventsV1NamespacedEventParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadEventsV1NamespacedEventRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIEventsV1Event)).Elem(),
						reflect.TypeOf(new(*ReadEventsV1NamespacedEventUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIEventsV1Event)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadEventsV1beta1NamespacedEvent: ogenreflect.RuntimeOperation{
			Name: "ReadEventsV1beta1NamespacedEvent",
			ID:   "readEventsV1beta1NamespacedEvent",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadEventsV1beta1NamespacedEventParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadEventsV1beta1NamespacedEventRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIEventsV1beta1Event)).Elem(),
						reflect.TypeOf(new(*ReadEventsV1beta1NamespacedEventUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIEventsV1beta1Event)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadFlowcontrolApiserverV1beta1FlowSchema: ogenreflect.RuntimeOperation{
			Name: "ReadFlowcontrolApiserverV1beta1FlowSchema",
			ID:   "readFlowcontrolApiserverV1beta1FlowSchema",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadFlowcontrolApiserverV1beta1FlowSchemaParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadFlowcontrolApiserverV1beta1FlowSchemaRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIFlowcontrolV1beta1FlowSchema)).Elem(),
						reflect.TypeOf(new(*ReadFlowcontrolApiserverV1beta1FlowSchemaUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIFlowcontrolV1beta1FlowSchema)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadFlowcontrolApiserverV1beta1FlowSchemaStatus: ogenreflect.RuntimeOperation{
			Name: "ReadFlowcontrolApiserverV1beta1FlowSchemaStatus",
			ID:   "readFlowcontrolApiserverV1beta1FlowSchemaStatus",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadFlowcontrolApiserverV1beta1FlowSchemaStatusParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadFlowcontrolApiserverV1beta1FlowSchemaStatusRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIFlowcontrolV1beta1FlowSchema)).Elem(),
						reflect.TypeOf(new(*ReadFlowcontrolApiserverV1beta1FlowSchemaStatusUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIFlowcontrolV1beta1FlowSchema)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadFlowcontrolApiserverV1beta1PriorityLevelConfiguration: ogenreflect.RuntimeOperation{
			Name: "ReadFlowcontrolApiserverV1beta1PriorityLevelConfiguration",
			ID:   "readFlowcontrolApiserverV1beta1PriorityLevelConfiguration",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration)).Elem(),
						reflect.TypeOf(new(*ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatus: ogenreflect.RuntimeOperation{
			Name: "ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatus",
			ID:   "readFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatus",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration)).Elem(),
						reflect.TypeOf(new(*ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadFlowcontrolApiserverV1beta2FlowSchema: ogenreflect.RuntimeOperation{
			Name: "ReadFlowcontrolApiserverV1beta2FlowSchema",
			ID:   "readFlowcontrolApiserverV1beta2FlowSchema",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadFlowcontrolApiserverV1beta2FlowSchemaParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadFlowcontrolApiserverV1beta2FlowSchemaRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIFlowcontrolV1beta2FlowSchema)).Elem(),
						reflect.TypeOf(new(*ReadFlowcontrolApiserverV1beta2FlowSchemaUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIFlowcontrolV1beta2FlowSchema)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadFlowcontrolApiserverV1beta2FlowSchemaStatus: ogenreflect.RuntimeOperation{
			Name: "ReadFlowcontrolApiserverV1beta2FlowSchemaStatus",
			ID:   "readFlowcontrolApiserverV1beta2FlowSchemaStatus",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadFlowcontrolApiserverV1beta2FlowSchemaStatusParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadFlowcontrolApiserverV1beta2FlowSchemaStatusRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIFlowcontrolV1beta2FlowSchema)).Elem(),
						reflect.TypeOf(new(*ReadFlowcontrolApiserverV1beta2FlowSchemaStatusUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIFlowcontrolV1beta2FlowSchema)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadFlowcontrolApiserverV1beta2PriorityLevelConfiguration: ogenreflect.RuntimeOperation{
			Name: "ReadFlowcontrolApiserverV1beta2PriorityLevelConfiguration",
			ID:   "readFlowcontrolApiserverV1beta2PriorityLevelConfiguration",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration)).Elem(),
						reflect.TypeOf(new(*ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatus: ogenreflect.RuntimeOperation{
			Name: "ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatus",
			ID:   "readFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatus",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration)).Elem(),
						reflect.TypeOf(new(*ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadInternalApiserverV1alpha1StorageVersion: ogenreflect.RuntimeOperation{
			Name: "ReadInternalApiserverV1alpha1StorageVersion",
			ID:   "readInternalApiserverV1alpha1StorageVersion",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadInternalApiserverV1alpha1StorageVersionParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadInternalApiserverV1alpha1StorageVersionRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIApiserverinternalV1alpha1StorageVersion)).Elem(),
						reflect.TypeOf(new(*ReadInternalApiserverV1alpha1StorageVersionUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIApiserverinternalV1alpha1StorageVersion)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadInternalApiserverV1alpha1StorageVersionStatus: ogenreflect.RuntimeOperation{
			Name: "ReadInternalApiserverV1alpha1StorageVersionStatus",
			ID:   "readInternalApiserverV1alpha1StorageVersionStatus",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadInternalApiserverV1alpha1StorageVersionStatusParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadInternalApiserverV1alpha1StorageVersionStatusRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIApiserverinternalV1alpha1StorageVersion)).Elem(),
						reflect.TypeOf(new(*ReadInternalApiserverV1alpha1StorageVersionStatusUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIApiserverinternalV1alpha1StorageVersion)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadNetworkingV1IngressClass: ogenreflect.RuntimeOperation{
			Name: "ReadNetworkingV1IngressClass",
			ID:   "readNetworkingV1IngressClass",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadNetworkingV1IngressClassParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadNetworkingV1IngressClassRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPINetworkingV1IngressClass)).Elem(),
						reflect.TypeOf(new(*ReadNetworkingV1IngressClassUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPINetworkingV1IngressClass)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadNetworkingV1NamespacedIngress: ogenreflect.RuntimeOperation{
			Name: "ReadNetworkingV1NamespacedIngress",
			ID:   "readNetworkingV1NamespacedIngress",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadNetworkingV1NamespacedIngressParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadNetworkingV1NamespacedIngressRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPINetworkingV1Ingress)).Elem(),
						reflect.TypeOf(new(*ReadNetworkingV1NamespacedIngressUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPINetworkingV1Ingress)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadNetworkingV1NamespacedIngressStatus: ogenreflect.RuntimeOperation{
			Name: "ReadNetworkingV1NamespacedIngressStatus",
			ID:   "readNetworkingV1NamespacedIngressStatus",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadNetworkingV1NamespacedIngressStatusParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadNetworkingV1NamespacedIngressStatusRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPINetworkingV1Ingress)).Elem(),
						reflect.TypeOf(new(*ReadNetworkingV1NamespacedIngressStatusUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPINetworkingV1Ingress)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadNetworkingV1NamespacedNetworkPolicy: ogenreflect.RuntimeOperation{
			Name: "ReadNetworkingV1NamespacedNetworkPolicy",
			ID:   "readNetworkingV1NamespacedNetworkPolicy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadNetworkingV1NamespacedNetworkPolicyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadNetworkingV1NamespacedNetworkPolicyRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPINetworkingV1NetworkPolicy)).Elem(),
						reflect.TypeOf(new(*ReadNetworkingV1NamespacedNetworkPolicyUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPINetworkingV1NetworkPolicy)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadNodeV1RuntimeClass: ogenreflect.RuntimeOperation{
			Name: "ReadNodeV1RuntimeClass",
			ID:   "readNodeV1RuntimeClass",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadNodeV1RuntimeClassParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadNodeV1RuntimeClassRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPINodeV1RuntimeClass)).Elem(),
						reflect.TypeOf(new(*ReadNodeV1RuntimeClassUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPINodeV1RuntimeClass)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadNodeV1alpha1RuntimeClass: ogenreflect.RuntimeOperation{
			Name: "ReadNodeV1alpha1RuntimeClass",
			ID:   "readNodeV1alpha1RuntimeClass",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadNodeV1alpha1RuntimeClassParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadNodeV1alpha1RuntimeClassRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPINodeV1alpha1RuntimeClass)).Elem(),
						reflect.TypeOf(new(*ReadNodeV1alpha1RuntimeClassUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPINodeV1alpha1RuntimeClass)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadNodeV1beta1RuntimeClass: ogenreflect.RuntimeOperation{
			Name: "ReadNodeV1beta1RuntimeClass",
			ID:   "readNodeV1beta1RuntimeClass",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadNodeV1beta1RuntimeClassParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadNodeV1beta1RuntimeClassRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPINodeV1beta1RuntimeClass)).Elem(),
						reflect.TypeOf(new(*ReadNodeV1beta1RuntimeClassUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPINodeV1beta1RuntimeClass)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadPolicyV1NamespacedPodDisruptionBudget: ogenreflect.RuntimeOperation{
			Name: "ReadPolicyV1NamespacedPodDisruptionBudget",
			ID:   "readPolicyV1NamespacedPodDisruptionBudget",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadPolicyV1NamespacedPodDisruptionBudgetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadPolicyV1NamespacedPodDisruptionBudgetRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIPolicyV1PodDisruptionBudget)).Elem(),
						reflect.TypeOf(new(*ReadPolicyV1NamespacedPodDisruptionBudgetUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIPolicyV1PodDisruptionBudget)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadPolicyV1NamespacedPodDisruptionBudgetStatus: ogenreflect.RuntimeOperation{
			Name: "ReadPolicyV1NamespacedPodDisruptionBudgetStatus",
			ID:   "readPolicyV1NamespacedPodDisruptionBudgetStatus",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadPolicyV1NamespacedPodDisruptionBudgetStatusParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadPolicyV1NamespacedPodDisruptionBudgetStatusRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIPolicyV1PodDisruptionBudget)).Elem(),
						reflect.TypeOf(new(*ReadPolicyV1NamespacedPodDisruptionBudgetStatusUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIPolicyV1PodDisruptionBudget)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadPolicyV1beta1NamespacedPodDisruptionBudget: ogenreflect.RuntimeOperation{
			Name: "ReadPolicyV1beta1NamespacedPodDisruptionBudget",
			ID:   "readPolicyV1beta1NamespacedPodDisruptionBudget",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadPolicyV1beta1NamespacedPodDisruptionBudgetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadPolicyV1beta1NamespacedPodDisruptionBudgetRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIPolicyV1beta1PodDisruptionBudget)).Elem(),
						reflect.TypeOf(new(*ReadPolicyV1beta1NamespacedPodDisruptionBudgetUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIPolicyV1beta1PodDisruptionBudget)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatus: ogenreflect.RuntimeOperation{
			Name: "ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatus",
			ID:   "readPolicyV1beta1NamespacedPodDisruptionBudgetStatus",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIPolicyV1beta1PodDisruptionBudget)).Elem(),
						reflect.TypeOf(new(*ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIPolicyV1beta1PodDisruptionBudget)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadPolicyV1beta1PodSecurityPolicy: ogenreflect.RuntimeOperation{
			Name: "ReadPolicyV1beta1PodSecurityPolicy",
			ID:   "readPolicyV1beta1PodSecurityPolicy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadPolicyV1beta1PodSecurityPolicyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadPolicyV1beta1PodSecurityPolicyRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIPolicyV1beta1PodSecurityPolicy)).Elem(),
						reflect.TypeOf(new(*ReadPolicyV1beta1PodSecurityPolicyUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIPolicyV1beta1PodSecurityPolicy)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadRbacAuthorizationV1ClusterRole: ogenreflect.RuntimeOperation{
			Name: "ReadRbacAuthorizationV1ClusterRole",
			ID:   "readRbacAuthorizationV1ClusterRole",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadRbacAuthorizationV1ClusterRoleParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadRbacAuthorizationV1ClusterRoleRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIRbacV1ClusterRole)).Elem(),
						reflect.TypeOf(new(*ReadRbacAuthorizationV1ClusterRoleUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIRbacV1ClusterRole)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadRbacAuthorizationV1ClusterRoleBinding: ogenreflect.RuntimeOperation{
			Name: "ReadRbacAuthorizationV1ClusterRoleBinding",
			ID:   "readRbacAuthorizationV1ClusterRoleBinding",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadRbacAuthorizationV1ClusterRoleBindingParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadRbacAuthorizationV1ClusterRoleBindingRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIRbacV1ClusterRoleBinding)).Elem(),
						reflect.TypeOf(new(*ReadRbacAuthorizationV1ClusterRoleBindingUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIRbacV1ClusterRoleBinding)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadRbacAuthorizationV1NamespacedRole: ogenreflect.RuntimeOperation{
			Name: "ReadRbacAuthorizationV1NamespacedRole",
			ID:   "readRbacAuthorizationV1NamespacedRole",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadRbacAuthorizationV1NamespacedRoleParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadRbacAuthorizationV1NamespacedRoleRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIRbacV1Role)).Elem(),
						reflect.TypeOf(new(*ReadRbacAuthorizationV1NamespacedRoleUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIRbacV1Role)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadRbacAuthorizationV1NamespacedRoleBinding: ogenreflect.RuntimeOperation{
			Name: "ReadRbacAuthorizationV1NamespacedRoleBinding",
			ID:   "readRbacAuthorizationV1NamespacedRoleBinding",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadRbacAuthorizationV1NamespacedRoleBindingParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadRbacAuthorizationV1NamespacedRoleBindingRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIRbacV1RoleBinding)).Elem(),
						reflect.TypeOf(new(*ReadRbacAuthorizationV1NamespacedRoleBindingUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIRbacV1RoleBinding)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadSchedulingV1PriorityClass: ogenreflect.RuntimeOperation{
			Name: "ReadSchedulingV1PriorityClass",
			ID:   "readSchedulingV1PriorityClass",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadSchedulingV1PriorityClassParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadSchedulingV1PriorityClassRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPISchedulingV1PriorityClass)).Elem(),
						reflect.TypeOf(new(*ReadSchedulingV1PriorityClassUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPISchedulingV1PriorityClass)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadStorageV1CSIDriver: ogenreflect.RuntimeOperation{
			Name: "ReadStorageV1CSIDriver",
			ID:   "readStorageV1CSIDriver",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadStorageV1CSIDriverParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadStorageV1CSIDriverRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIStorageV1CSIDriver)).Elem(),
						reflect.TypeOf(new(*ReadStorageV1CSIDriverUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIStorageV1CSIDriver)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadStorageV1CSINode: ogenreflect.RuntimeOperation{
			Name: "ReadStorageV1CSINode",
			ID:   "readStorageV1CSINode",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadStorageV1CSINodeParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadStorageV1CSINodeRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIStorageV1CSINode)).Elem(),
						reflect.TypeOf(new(*ReadStorageV1CSINodeUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIStorageV1CSINode)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadStorageV1StorageClass: ogenreflect.RuntimeOperation{
			Name: "ReadStorageV1StorageClass",
			ID:   "readStorageV1StorageClass",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadStorageV1StorageClassParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadStorageV1StorageClassRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIStorageV1StorageClass)).Elem(),
						reflect.TypeOf(new(*ReadStorageV1StorageClassUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIStorageV1StorageClass)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadStorageV1VolumeAttachment: ogenreflect.RuntimeOperation{
			Name: "ReadStorageV1VolumeAttachment",
			ID:   "readStorageV1VolumeAttachment",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadStorageV1VolumeAttachmentParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadStorageV1VolumeAttachmentRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIStorageV1VolumeAttachment)).Elem(),
						reflect.TypeOf(new(*ReadStorageV1VolumeAttachmentUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIStorageV1VolumeAttachment)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadStorageV1VolumeAttachmentStatus: ogenreflect.RuntimeOperation{
			Name: "ReadStorageV1VolumeAttachmentStatus",
			ID:   "readStorageV1VolumeAttachmentStatus",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadStorageV1VolumeAttachmentStatusParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadStorageV1VolumeAttachmentStatusRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIStorageV1VolumeAttachment)).Elem(),
						reflect.TypeOf(new(*ReadStorageV1VolumeAttachmentStatusUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIStorageV1VolumeAttachment)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadStorageV1alpha1NamespacedCSIStorageCapacity: ogenreflect.RuntimeOperation{
			Name: "ReadStorageV1alpha1NamespacedCSIStorageCapacity",
			ID:   "readStorageV1alpha1NamespacedCSIStorageCapacity",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadStorageV1alpha1NamespacedCSIStorageCapacityParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadStorageV1alpha1NamespacedCSIStorageCapacityRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIStorageV1alpha1CSIStorageCapacity)).Elem(),
						reflect.TypeOf(new(*ReadStorageV1alpha1NamespacedCSIStorageCapacityUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIStorageV1alpha1CSIStorageCapacity)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		ReadStorageV1beta1NamespacedCSIStorageCapacity: ogenreflect.RuntimeOperation{
			Name: "ReadStorageV1beta1NamespacedCSIStorageCapacity",
			ID:   "readStorageV1beta1NamespacedCSIStorageCapacity",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(ReadStorageV1beta1NamespacedCSIStorageCapacityParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(ReadStorageV1beta1NamespacedCSIStorageCapacityRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sAPIStorageV1beta1CSIStorageCapacity)).Elem(),
						reflect.TypeOf(new(*ReadStorageV1beta1NamespacedCSIStorageCapacityUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sAPIStorageV1beta1CSIStorageCapacity)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchAdmissionregistrationV1MutatingWebhookConfiguration: ogenreflect.RuntimeOperation{
			Name: "WatchAdmissionregistrationV1MutatingWebhookConfiguration",
			ID:   "watchAdmissionregistrationV1MutatingWebhookConfiguration",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchAdmissionregistrationV1MutatingWebhookConfigurationParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchAdmissionregistrationV1MutatingWebhookConfigurationRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchAdmissionregistrationV1MutatingWebhookConfigurationUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchAdmissionregistrationV1MutatingWebhookConfigurationList: ogenreflect.RuntimeOperation{
			Name: "WatchAdmissionregistrationV1MutatingWebhookConfigurationList",
			ID:   "watchAdmissionregistrationV1MutatingWebhookConfigurationList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchAdmissionregistrationV1MutatingWebhookConfigurationListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchAdmissionregistrationV1MutatingWebhookConfigurationListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchAdmissionregistrationV1MutatingWebhookConfigurationListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchAdmissionregistrationV1ValidatingWebhookConfiguration: ogenreflect.RuntimeOperation{
			Name: "WatchAdmissionregistrationV1ValidatingWebhookConfiguration",
			ID:   "watchAdmissionregistrationV1ValidatingWebhookConfiguration",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchAdmissionregistrationV1ValidatingWebhookConfigurationParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchAdmissionregistrationV1ValidatingWebhookConfigurationRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchAdmissionregistrationV1ValidatingWebhookConfigurationUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchAdmissionregistrationV1ValidatingWebhookConfigurationList: ogenreflect.RuntimeOperation{
			Name: "WatchAdmissionregistrationV1ValidatingWebhookConfigurationList",
			ID:   "watchAdmissionregistrationV1ValidatingWebhookConfigurationList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchAdmissionregistrationV1ValidatingWebhookConfigurationListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchAdmissionregistrationV1ValidatingWebhookConfigurationListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchAdmissionregistrationV1ValidatingWebhookConfigurationListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchApiextensionsV1CustomResourceDefinition: ogenreflect.RuntimeOperation{
			Name: "WatchApiextensionsV1CustomResourceDefinition",
			ID:   "watchApiextensionsV1CustomResourceDefinition",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchApiextensionsV1CustomResourceDefinitionParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchApiextensionsV1CustomResourceDefinitionRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchApiextensionsV1CustomResourceDefinitionUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchApiextensionsV1CustomResourceDefinitionList: ogenreflect.RuntimeOperation{
			Name: "WatchApiextensionsV1CustomResourceDefinitionList",
			ID:   "watchApiextensionsV1CustomResourceDefinitionList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchApiextensionsV1CustomResourceDefinitionListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchApiextensionsV1CustomResourceDefinitionListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchApiextensionsV1CustomResourceDefinitionListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchApiregistrationV1APIService: ogenreflect.RuntimeOperation{
			Name: "WatchApiregistrationV1APIService",
			ID:   "watchApiregistrationV1APIService",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchApiregistrationV1APIServiceParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchApiregistrationV1APIServiceRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchApiregistrationV1APIServiceUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchApiregistrationV1APIServiceList: ogenreflect.RuntimeOperation{
			Name: "WatchApiregistrationV1APIServiceList",
			ID:   "watchApiregistrationV1APIServiceList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchApiregistrationV1APIServiceListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchApiregistrationV1APIServiceListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchApiregistrationV1APIServiceListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchAppsV1ControllerRevisionListForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "WatchAppsV1ControllerRevisionListForAllNamespaces",
			ID:   "watchAppsV1ControllerRevisionListForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchAppsV1ControllerRevisionListForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchAppsV1ControllerRevisionListForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchAppsV1ControllerRevisionListForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchAppsV1DaemonSetListForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "WatchAppsV1DaemonSetListForAllNamespaces",
			ID:   "watchAppsV1DaemonSetListForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchAppsV1DaemonSetListForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchAppsV1DaemonSetListForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchAppsV1DaemonSetListForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchAppsV1DeploymentListForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "WatchAppsV1DeploymentListForAllNamespaces",
			ID:   "watchAppsV1DeploymentListForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchAppsV1DeploymentListForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchAppsV1DeploymentListForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchAppsV1DeploymentListForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchAppsV1NamespacedControllerRevision: ogenreflect.RuntimeOperation{
			Name: "WatchAppsV1NamespacedControllerRevision",
			ID:   "watchAppsV1NamespacedControllerRevision",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchAppsV1NamespacedControllerRevisionParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchAppsV1NamespacedControllerRevisionRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchAppsV1NamespacedControllerRevisionUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchAppsV1NamespacedControllerRevisionList: ogenreflect.RuntimeOperation{
			Name: "WatchAppsV1NamespacedControllerRevisionList",
			ID:   "watchAppsV1NamespacedControllerRevisionList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchAppsV1NamespacedControllerRevisionListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchAppsV1NamespacedControllerRevisionListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchAppsV1NamespacedControllerRevisionListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchAppsV1NamespacedDaemonSet: ogenreflect.RuntimeOperation{
			Name: "WatchAppsV1NamespacedDaemonSet",
			ID:   "watchAppsV1NamespacedDaemonSet",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchAppsV1NamespacedDaemonSetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchAppsV1NamespacedDaemonSetRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchAppsV1NamespacedDaemonSetUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchAppsV1NamespacedDaemonSetList: ogenreflect.RuntimeOperation{
			Name: "WatchAppsV1NamespacedDaemonSetList",
			ID:   "watchAppsV1NamespacedDaemonSetList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchAppsV1NamespacedDaemonSetListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchAppsV1NamespacedDaemonSetListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchAppsV1NamespacedDaemonSetListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchAppsV1NamespacedDeployment: ogenreflect.RuntimeOperation{
			Name: "WatchAppsV1NamespacedDeployment",
			ID:   "watchAppsV1NamespacedDeployment",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchAppsV1NamespacedDeploymentParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchAppsV1NamespacedDeploymentRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchAppsV1NamespacedDeploymentUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchAppsV1NamespacedDeploymentList: ogenreflect.RuntimeOperation{
			Name: "WatchAppsV1NamespacedDeploymentList",
			ID:   "watchAppsV1NamespacedDeploymentList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchAppsV1NamespacedDeploymentListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchAppsV1NamespacedDeploymentListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchAppsV1NamespacedDeploymentListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchAppsV1NamespacedReplicaSet: ogenreflect.RuntimeOperation{
			Name: "WatchAppsV1NamespacedReplicaSet",
			ID:   "watchAppsV1NamespacedReplicaSet",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchAppsV1NamespacedReplicaSetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchAppsV1NamespacedReplicaSetRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchAppsV1NamespacedReplicaSetUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchAppsV1NamespacedReplicaSetList: ogenreflect.RuntimeOperation{
			Name: "WatchAppsV1NamespacedReplicaSetList",
			ID:   "watchAppsV1NamespacedReplicaSetList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchAppsV1NamespacedReplicaSetListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchAppsV1NamespacedReplicaSetListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchAppsV1NamespacedReplicaSetListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchAppsV1NamespacedStatefulSet: ogenreflect.RuntimeOperation{
			Name: "WatchAppsV1NamespacedStatefulSet",
			ID:   "watchAppsV1NamespacedStatefulSet",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchAppsV1NamespacedStatefulSetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchAppsV1NamespacedStatefulSetRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchAppsV1NamespacedStatefulSetUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchAppsV1NamespacedStatefulSetList: ogenreflect.RuntimeOperation{
			Name: "WatchAppsV1NamespacedStatefulSetList",
			ID:   "watchAppsV1NamespacedStatefulSetList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchAppsV1NamespacedStatefulSetListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchAppsV1NamespacedStatefulSetListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchAppsV1NamespacedStatefulSetListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchAppsV1ReplicaSetListForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "WatchAppsV1ReplicaSetListForAllNamespaces",
			ID:   "watchAppsV1ReplicaSetListForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchAppsV1ReplicaSetListForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchAppsV1ReplicaSetListForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchAppsV1ReplicaSetListForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchAppsV1StatefulSetListForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "WatchAppsV1StatefulSetListForAllNamespaces",
			ID:   "watchAppsV1StatefulSetListForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchAppsV1StatefulSetListForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchAppsV1StatefulSetListForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchAppsV1StatefulSetListForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespaces",
			ID:   "watchAutoscalingV1HorizontalPodAutoscalerListForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchAutoscalingV1NamespacedHorizontalPodAutoscaler: ogenreflect.RuntimeOperation{
			Name: "WatchAutoscalingV1NamespacedHorizontalPodAutoscaler",
			ID:   "watchAutoscalingV1NamespacedHorizontalPodAutoscaler",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchAutoscalingV1NamespacedHorizontalPodAutoscalerParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchAutoscalingV1NamespacedHorizontalPodAutoscalerRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchAutoscalingV1NamespacedHorizontalPodAutoscalerUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchAutoscalingV1NamespacedHorizontalPodAutoscalerList: ogenreflect.RuntimeOperation{
			Name: "WatchAutoscalingV1NamespacedHorizontalPodAutoscalerList",
			ID:   "watchAutoscalingV1NamespacedHorizontalPodAutoscalerList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchAutoscalingV1NamespacedHorizontalPodAutoscalerListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchAutoscalingV1NamespacedHorizontalPodAutoscalerListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchAutoscalingV1NamespacedHorizontalPodAutoscalerListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespaces",
			ID:   "watchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscaler: ogenreflect.RuntimeOperation{
			Name: "WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscaler",
			ID:   "watchAutoscalingV2beta1NamespacedHorizontalPodAutoscaler",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerList: ogenreflect.RuntimeOperation{
			Name: "WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerList",
			ID:   "watchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespaces",
			ID:   "watchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscaler: ogenreflect.RuntimeOperation{
			Name: "WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscaler",
			ID:   "watchAutoscalingV2beta2NamespacedHorizontalPodAutoscaler",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerList: ogenreflect.RuntimeOperation{
			Name: "WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerList",
			ID:   "watchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchBatchV1CronJobListForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "WatchBatchV1CronJobListForAllNamespaces",
			ID:   "watchBatchV1CronJobListForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchBatchV1CronJobListForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchBatchV1CronJobListForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchBatchV1CronJobListForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchBatchV1JobListForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "WatchBatchV1JobListForAllNamespaces",
			ID:   "watchBatchV1JobListForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchBatchV1JobListForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchBatchV1JobListForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchBatchV1JobListForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchBatchV1NamespacedCronJob: ogenreflect.RuntimeOperation{
			Name: "WatchBatchV1NamespacedCronJob",
			ID:   "watchBatchV1NamespacedCronJob",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchBatchV1NamespacedCronJobParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchBatchV1NamespacedCronJobRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchBatchV1NamespacedCronJobUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchBatchV1NamespacedCronJobList: ogenreflect.RuntimeOperation{
			Name: "WatchBatchV1NamespacedCronJobList",
			ID:   "watchBatchV1NamespacedCronJobList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchBatchV1NamespacedCronJobListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchBatchV1NamespacedCronJobListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchBatchV1NamespacedCronJobListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchBatchV1NamespacedJob: ogenreflect.RuntimeOperation{
			Name: "WatchBatchV1NamespacedJob",
			ID:   "watchBatchV1NamespacedJob",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchBatchV1NamespacedJobParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchBatchV1NamespacedJobRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchBatchV1NamespacedJobUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchBatchV1NamespacedJobList: ogenreflect.RuntimeOperation{
			Name: "WatchBatchV1NamespacedJobList",
			ID:   "watchBatchV1NamespacedJobList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchBatchV1NamespacedJobListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchBatchV1NamespacedJobListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchBatchV1NamespacedJobListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchBatchV1beta1CronJobListForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "WatchBatchV1beta1CronJobListForAllNamespaces",
			ID:   "watchBatchV1beta1CronJobListForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchBatchV1beta1CronJobListForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchBatchV1beta1CronJobListForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchBatchV1beta1CronJobListForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchBatchV1beta1NamespacedCronJob: ogenreflect.RuntimeOperation{
			Name: "WatchBatchV1beta1NamespacedCronJob",
			ID:   "watchBatchV1beta1NamespacedCronJob",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchBatchV1beta1NamespacedCronJobParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchBatchV1beta1NamespacedCronJobRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchBatchV1beta1NamespacedCronJobUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchBatchV1beta1NamespacedCronJobList: ogenreflect.RuntimeOperation{
			Name: "WatchBatchV1beta1NamespacedCronJobList",
			ID:   "watchBatchV1beta1NamespacedCronJobList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchBatchV1beta1NamespacedCronJobListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchBatchV1beta1NamespacedCronJobListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchBatchV1beta1NamespacedCronJobListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchCertificatesV1CertificateSigningRequest: ogenreflect.RuntimeOperation{
			Name: "WatchCertificatesV1CertificateSigningRequest",
			ID:   "watchCertificatesV1CertificateSigningRequest",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchCertificatesV1CertificateSigningRequestParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchCertificatesV1CertificateSigningRequestRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchCertificatesV1CertificateSigningRequestUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchCertificatesV1CertificateSigningRequestList: ogenreflect.RuntimeOperation{
			Name: "WatchCertificatesV1CertificateSigningRequestList",
			ID:   "watchCertificatesV1CertificateSigningRequestList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchCertificatesV1CertificateSigningRequestListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchCertificatesV1CertificateSigningRequestListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchCertificatesV1CertificateSigningRequestListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchCoordinationV1LeaseListForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "WatchCoordinationV1LeaseListForAllNamespaces",
			ID:   "watchCoordinationV1LeaseListForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchCoordinationV1LeaseListForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchCoordinationV1LeaseListForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchCoordinationV1LeaseListForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchCoordinationV1NamespacedLease: ogenreflect.RuntimeOperation{
			Name: "WatchCoordinationV1NamespacedLease",
			ID:   "watchCoordinationV1NamespacedLease",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchCoordinationV1NamespacedLeaseParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchCoordinationV1NamespacedLeaseRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchCoordinationV1NamespacedLeaseUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchCoordinationV1NamespacedLeaseList: ogenreflect.RuntimeOperation{
			Name: "WatchCoordinationV1NamespacedLeaseList",
			ID:   "watchCoordinationV1NamespacedLeaseList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchCoordinationV1NamespacedLeaseListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchCoordinationV1NamespacedLeaseListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchCoordinationV1NamespacedLeaseListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchCoreV1ConfigMapListForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "WatchCoreV1ConfigMapListForAllNamespaces",
			ID:   "watchCoreV1ConfigMapListForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchCoreV1ConfigMapListForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchCoreV1ConfigMapListForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchCoreV1ConfigMapListForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchCoreV1EndpointsListForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "WatchCoreV1EndpointsListForAllNamespaces",
			ID:   "watchCoreV1EndpointsListForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchCoreV1EndpointsListForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchCoreV1EndpointsListForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchCoreV1EndpointsListForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchCoreV1EventListForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "WatchCoreV1EventListForAllNamespaces",
			ID:   "watchCoreV1EventListForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchCoreV1EventListForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchCoreV1EventListForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchCoreV1EventListForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchCoreV1LimitRangeListForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "WatchCoreV1LimitRangeListForAllNamespaces",
			ID:   "watchCoreV1LimitRangeListForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchCoreV1LimitRangeListForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchCoreV1LimitRangeListForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchCoreV1LimitRangeListForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchCoreV1Namespace: ogenreflect.RuntimeOperation{
			Name: "WatchCoreV1Namespace",
			ID:   "watchCoreV1Namespace",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchCoreV1NamespaceParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchCoreV1NamespaceRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchCoreV1NamespaceUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchCoreV1NamespaceList: ogenreflect.RuntimeOperation{
			Name: "WatchCoreV1NamespaceList",
			ID:   "watchCoreV1NamespaceList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchCoreV1NamespaceListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchCoreV1NamespaceListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchCoreV1NamespaceListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchCoreV1NamespacedConfigMap: ogenreflect.RuntimeOperation{
			Name: "WatchCoreV1NamespacedConfigMap",
			ID:   "watchCoreV1NamespacedConfigMap",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchCoreV1NamespacedConfigMapParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchCoreV1NamespacedConfigMapRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchCoreV1NamespacedConfigMapUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchCoreV1NamespacedConfigMapList: ogenreflect.RuntimeOperation{
			Name: "WatchCoreV1NamespacedConfigMapList",
			ID:   "watchCoreV1NamespacedConfigMapList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchCoreV1NamespacedConfigMapListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchCoreV1NamespacedConfigMapListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchCoreV1NamespacedConfigMapListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchCoreV1NamespacedEndpoints: ogenreflect.RuntimeOperation{
			Name: "WatchCoreV1NamespacedEndpoints",
			ID:   "watchCoreV1NamespacedEndpoints",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchCoreV1NamespacedEndpointsParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchCoreV1NamespacedEndpointsRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchCoreV1NamespacedEndpointsUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchCoreV1NamespacedEndpointsList: ogenreflect.RuntimeOperation{
			Name: "WatchCoreV1NamespacedEndpointsList",
			ID:   "watchCoreV1NamespacedEndpointsList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchCoreV1NamespacedEndpointsListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchCoreV1NamespacedEndpointsListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchCoreV1NamespacedEndpointsListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchCoreV1NamespacedEvent: ogenreflect.RuntimeOperation{
			Name: "WatchCoreV1NamespacedEvent",
			ID:   "watchCoreV1NamespacedEvent",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchCoreV1NamespacedEventParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchCoreV1NamespacedEventRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchCoreV1NamespacedEventUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchCoreV1NamespacedEventList: ogenreflect.RuntimeOperation{
			Name: "WatchCoreV1NamespacedEventList",
			ID:   "watchCoreV1NamespacedEventList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchCoreV1NamespacedEventListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchCoreV1NamespacedEventListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchCoreV1NamespacedEventListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchCoreV1NamespacedLimitRange: ogenreflect.RuntimeOperation{
			Name: "WatchCoreV1NamespacedLimitRange",
			ID:   "watchCoreV1NamespacedLimitRange",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchCoreV1NamespacedLimitRangeParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchCoreV1NamespacedLimitRangeRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchCoreV1NamespacedLimitRangeUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchCoreV1NamespacedLimitRangeList: ogenreflect.RuntimeOperation{
			Name: "WatchCoreV1NamespacedLimitRangeList",
			ID:   "watchCoreV1NamespacedLimitRangeList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchCoreV1NamespacedLimitRangeListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchCoreV1NamespacedLimitRangeListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchCoreV1NamespacedLimitRangeListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchCoreV1NamespacedPersistentVolumeClaim: ogenreflect.RuntimeOperation{
			Name: "WatchCoreV1NamespacedPersistentVolumeClaim",
			ID:   "watchCoreV1NamespacedPersistentVolumeClaim",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchCoreV1NamespacedPersistentVolumeClaimParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchCoreV1NamespacedPersistentVolumeClaimRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchCoreV1NamespacedPersistentVolumeClaimUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchCoreV1NamespacedPersistentVolumeClaimList: ogenreflect.RuntimeOperation{
			Name: "WatchCoreV1NamespacedPersistentVolumeClaimList",
			ID:   "watchCoreV1NamespacedPersistentVolumeClaimList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchCoreV1NamespacedPersistentVolumeClaimListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchCoreV1NamespacedPersistentVolumeClaimListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchCoreV1NamespacedPersistentVolumeClaimListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchCoreV1NamespacedPod: ogenreflect.RuntimeOperation{
			Name: "WatchCoreV1NamespacedPod",
			ID:   "watchCoreV1NamespacedPod",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchCoreV1NamespacedPodParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchCoreV1NamespacedPodRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchCoreV1NamespacedPodUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchCoreV1NamespacedPodList: ogenreflect.RuntimeOperation{
			Name: "WatchCoreV1NamespacedPodList",
			ID:   "watchCoreV1NamespacedPodList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchCoreV1NamespacedPodListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchCoreV1NamespacedPodListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchCoreV1NamespacedPodListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchCoreV1NamespacedPodTemplate: ogenreflect.RuntimeOperation{
			Name: "WatchCoreV1NamespacedPodTemplate",
			ID:   "watchCoreV1NamespacedPodTemplate",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchCoreV1NamespacedPodTemplateParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchCoreV1NamespacedPodTemplateRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchCoreV1NamespacedPodTemplateUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchCoreV1NamespacedPodTemplateList: ogenreflect.RuntimeOperation{
			Name: "WatchCoreV1NamespacedPodTemplateList",
			ID:   "watchCoreV1NamespacedPodTemplateList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchCoreV1NamespacedPodTemplateListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchCoreV1NamespacedPodTemplateListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchCoreV1NamespacedPodTemplateListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchCoreV1NamespacedReplicationController: ogenreflect.RuntimeOperation{
			Name: "WatchCoreV1NamespacedReplicationController",
			ID:   "watchCoreV1NamespacedReplicationController",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchCoreV1NamespacedReplicationControllerParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchCoreV1NamespacedReplicationControllerRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchCoreV1NamespacedReplicationControllerUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchCoreV1NamespacedReplicationControllerList: ogenreflect.RuntimeOperation{
			Name: "WatchCoreV1NamespacedReplicationControllerList",
			ID:   "watchCoreV1NamespacedReplicationControllerList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchCoreV1NamespacedReplicationControllerListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchCoreV1NamespacedReplicationControllerListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchCoreV1NamespacedReplicationControllerListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchCoreV1NamespacedResourceQuota: ogenreflect.RuntimeOperation{
			Name: "WatchCoreV1NamespacedResourceQuota",
			ID:   "watchCoreV1NamespacedResourceQuota",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchCoreV1NamespacedResourceQuotaParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchCoreV1NamespacedResourceQuotaRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchCoreV1NamespacedResourceQuotaUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchCoreV1NamespacedResourceQuotaList: ogenreflect.RuntimeOperation{
			Name: "WatchCoreV1NamespacedResourceQuotaList",
			ID:   "watchCoreV1NamespacedResourceQuotaList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchCoreV1NamespacedResourceQuotaListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchCoreV1NamespacedResourceQuotaListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchCoreV1NamespacedResourceQuotaListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchCoreV1NamespacedSecret: ogenreflect.RuntimeOperation{
			Name: "WatchCoreV1NamespacedSecret",
			ID:   "watchCoreV1NamespacedSecret",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchCoreV1NamespacedSecretParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchCoreV1NamespacedSecretRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchCoreV1NamespacedSecretUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchCoreV1NamespacedSecretList: ogenreflect.RuntimeOperation{
			Name: "WatchCoreV1NamespacedSecretList",
			ID:   "watchCoreV1NamespacedSecretList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchCoreV1NamespacedSecretListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchCoreV1NamespacedSecretListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchCoreV1NamespacedSecretListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchCoreV1NamespacedService: ogenreflect.RuntimeOperation{
			Name: "WatchCoreV1NamespacedService",
			ID:   "watchCoreV1NamespacedService",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchCoreV1NamespacedServiceParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchCoreV1NamespacedServiceRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchCoreV1NamespacedServiceUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchCoreV1NamespacedServiceAccount: ogenreflect.RuntimeOperation{
			Name: "WatchCoreV1NamespacedServiceAccount",
			ID:   "watchCoreV1NamespacedServiceAccount",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchCoreV1NamespacedServiceAccountParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchCoreV1NamespacedServiceAccountRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchCoreV1NamespacedServiceAccountUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchCoreV1NamespacedServiceAccountList: ogenreflect.RuntimeOperation{
			Name: "WatchCoreV1NamespacedServiceAccountList",
			ID:   "watchCoreV1NamespacedServiceAccountList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchCoreV1NamespacedServiceAccountListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchCoreV1NamespacedServiceAccountListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchCoreV1NamespacedServiceAccountListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchCoreV1NamespacedServiceList: ogenreflect.RuntimeOperation{
			Name: "WatchCoreV1NamespacedServiceList",
			ID:   "watchCoreV1NamespacedServiceList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchCoreV1NamespacedServiceListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchCoreV1NamespacedServiceListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchCoreV1NamespacedServiceListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchCoreV1Node: ogenreflect.RuntimeOperation{
			Name: "WatchCoreV1Node",
			ID:   "watchCoreV1Node",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchCoreV1NodeParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchCoreV1NodeRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchCoreV1NodeUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchCoreV1NodeList: ogenreflect.RuntimeOperation{
			Name: "WatchCoreV1NodeList",
			ID:   "watchCoreV1NodeList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchCoreV1NodeListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchCoreV1NodeListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchCoreV1NodeListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchCoreV1PersistentVolume: ogenreflect.RuntimeOperation{
			Name: "WatchCoreV1PersistentVolume",
			ID:   "watchCoreV1PersistentVolume",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchCoreV1PersistentVolumeParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchCoreV1PersistentVolumeRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchCoreV1PersistentVolumeUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchCoreV1PersistentVolumeClaimListForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "WatchCoreV1PersistentVolumeClaimListForAllNamespaces",
			ID:   "watchCoreV1PersistentVolumeClaimListForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchCoreV1PersistentVolumeClaimListForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchCoreV1PersistentVolumeClaimListForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchCoreV1PersistentVolumeClaimListForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchCoreV1PersistentVolumeList: ogenreflect.RuntimeOperation{
			Name: "WatchCoreV1PersistentVolumeList",
			ID:   "watchCoreV1PersistentVolumeList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchCoreV1PersistentVolumeListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchCoreV1PersistentVolumeListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchCoreV1PersistentVolumeListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchCoreV1PodListForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "WatchCoreV1PodListForAllNamespaces",
			ID:   "watchCoreV1PodListForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchCoreV1PodListForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchCoreV1PodListForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchCoreV1PodListForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchCoreV1PodTemplateListForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "WatchCoreV1PodTemplateListForAllNamespaces",
			ID:   "watchCoreV1PodTemplateListForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchCoreV1PodTemplateListForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchCoreV1PodTemplateListForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchCoreV1PodTemplateListForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchCoreV1ReplicationControllerListForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "WatchCoreV1ReplicationControllerListForAllNamespaces",
			ID:   "watchCoreV1ReplicationControllerListForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchCoreV1ReplicationControllerListForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchCoreV1ReplicationControllerListForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchCoreV1ReplicationControllerListForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchCoreV1ResourceQuotaListForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "WatchCoreV1ResourceQuotaListForAllNamespaces",
			ID:   "watchCoreV1ResourceQuotaListForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchCoreV1ResourceQuotaListForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchCoreV1ResourceQuotaListForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchCoreV1ResourceQuotaListForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchCoreV1SecretListForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "WatchCoreV1SecretListForAllNamespaces",
			ID:   "watchCoreV1SecretListForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchCoreV1SecretListForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchCoreV1SecretListForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchCoreV1SecretListForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchCoreV1ServiceAccountListForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "WatchCoreV1ServiceAccountListForAllNamespaces",
			ID:   "watchCoreV1ServiceAccountListForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchCoreV1ServiceAccountListForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchCoreV1ServiceAccountListForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchCoreV1ServiceAccountListForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchCoreV1ServiceListForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "WatchCoreV1ServiceListForAllNamespaces",
			ID:   "watchCoreV1ServiceListForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchCoreV1ServiceListForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchCoreV1ServiceListForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchCoreV1ServiceListForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchDiscoveryV1EndpointSliceListForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "WatchDiscoveryV1EndpointSliceListForAllNamespaces",
			ID:   "watchDiscoveryV1EndpointSliceListForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchDiscoveryV1EndpointSliceListForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchDiscoveryV1EndpointSliceListForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchDiscoveryV1EndpointSliceListForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchDiscoveryV1NamespacedEndpointSlice: ogenreflect.RuntimeOperation{
			Name: "WatchDiscoveryV1NamespacedEndpointSlice",
			ID:   "watchDiscoveryV1NamespacedEndpointSlice",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchDiscoveryV1NamespacedEndpointSliceParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchDiscoveryV1NamespacedEndpointSliceRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchDiscoveryV1NamespacedEndpointSliceUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchDiscoveryV1NamespacedEndpointSliceList: ogenreflect.RuntimeOperation{
			Name: "WatchDiscoveryV1NamespacedEndpointSliceList",
			ID:   "watchDiscoveryV1NamespacedEndpointSliceList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchDiscoveryV1NamespacedEndpointSliceListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchDiscoveryV1NamespacedEndpointSliceListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchDiscoveryV1NamespacedEndpointSliceListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchDiscoveryV1beta1EndpointSliceListForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "WatchDiscoveryV1beta1EndpointSliceListForAllNamespaces",
			ID:   "watchDiscoveryV1beta1EndpointSliceListForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchDiscoveryV1beta1NamespacedEndpointSlice: ogenreflect.RuntimeOperation{
			Name: "WatchDiscoveryV1beta1NamespacedEndpointSlice",
			ID:   "watchDiscoveryV1beta1NamespacedEndpointSlice",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchDiscoveryV1beta1NamespacedEndpointSliceParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchDiscoveryV1beta1NamespacedEndpointSliceRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchDiscoveryV1beta1NamespacedEndpointSliceUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchDiscoveryV1beta1NamespacedEndpointSliceList: ogenreflect.RuntimeOperation{
			Name: "WatchDiscoveryV1beta1NamespacedEndpointSliceList",
			ID:   "watchDiscoveryV1beta1NamespacedEndpointSliceList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchDiscoveryV1beta1NamespacedEndpointSliceListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchDiscoveryV1beta1NamespacedEndpointSliceListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchDiscoveryV1beta1NamespacedEndpointSliceListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchEventsV1EventListForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "WatchEventsV1EventListForAllNamespaces",
			ID:   "watchEventsV1EventListForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchEventsV1EventListForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchEventsV1EventListForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchEventsV1EventListForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchEventsV1NamespacedEvent: ogenreflect.RuntimeOperation{
			Name: "WatchEventsV1NamespacedEvent",
			ID:   "watchEventsV1NamespacedEvent",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchEventsV1NamespacedEventParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchEventsV1NamespacedEventRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchEventsV1NamespacedEventUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchEventsV1NamespacedEventList: ogenreflect.RuntimeOperation{
			Name: "WatchEventsV1NamespacedEventList",
			ID:   "watchEventsV1NamespacedEventList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchEventsV1NamespacedEventListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchEventsV1NamespacedEventListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchEventsV1NamespacedEventListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchEventsV1beta1EventListForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "WatchEventsV1beta1EventListForAllNamespaces",
			ID:   "watchEventsV1beta1EventListForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchEventsV1beta1EventListForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchEventsV1beta1EventListForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchEventsV1beta1EventListForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchEventsV1beta1NamespacedEvent: ogenreflect.RuntimeOperation{
			Name: "WatchEventsV1beta1NamespacedEvent",
			ID:   "watchEventsV1beta1NamespacedEvent",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchEventsV1beta1NamespacedEventParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchEventsV1beta1NamespacedEventRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchEventsV1beta1NamespacedEventUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchEventsV1beta1NamespacedEventList: ogenreflect.RuntimeOperation{
			Name: "WatchEventsV1beta1NamespacedEventList",
			ID:   "watchEventsV1beta1NamespacedEventList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchEventsV1beta1NamespacedEventListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchEventsV1beta1NamespacedEventListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchEventsV1beta1NamespacedEventListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchFlowcontrolApiserverV1beta1FlowSchema: ogenreflect.RuntimeOperation{
			Name: "WatchFlowcontrolApiserverV1beta1FlowSchema",
			ID:   "watchFlowcontrolApiserverV1beta1FlowSchema",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchFlowcontrolApiserverV1beta1FlowSchemaParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchFlowcontrolApiserverV1beta1FlowSchemaRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchFlowcontrolApiserverV1beta1FlowSchemaUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchFlowcontrolApiserverV1beta1FlowSchemaList: ogenreflect.RuntimeOperation{
			Name: "WatchFlowcontrolApiserverV1beta1FlowSchemaList",
			ID:   "watchFlowcontrolApiserverV1beta1FlowSchemaList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchFlowcontrolApiserverV1beta1FlowSchemaListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchFlowcontrolApiserverV1beta1FlowSchemaListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchFlowcontrolApiserverV1beta1FlowSchemaListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchFlowcontrolApiserverV1beta1PriorityLevelConfiguration: ogenreflect.RuntimeOperation{
			Name: "WatchFlowcontrolApiserverV1beta1PriorityLevelConfiguration",
			ID:   "watchFlowcontrolApiserverV1beta1PriorityLevelConfiguration",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationList: ogenreflect.RuntimeOperation{
			Name: "WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationList",
			ID:   "watchFlowcontrolApiserverV1beta1PriorityLevelConfigurationList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchFlowcontrolApiserverV1beta2FlowSchema: ogenreflect.RuntimeOperation{
			Name: "WatchFlowcontrolApiserverV1beta2FlowSchema",
			ID:   "watchFlowcontrolApiserverV1beta2FlowSchema",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchFlowcontrolApiserverV1beta2FlowSchemaParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchFlowcontrolApiserverV1beta2FlowSchemaRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchFlowcontrolApiserverV1beta2FlowSchemaUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchFlowcontrolApiserverV1beta2FlowSchemaList: ogenreflect.RuntimeOperation{
			Name: "WatchFlowcontrolApiserverV1beta2FlowSchemaList",
			ID:   "watchFlowcontrolApiserverV1beta2FlowSchemaList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchFlowcontrolApiserverV1beta2FlowSchemaListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchFlowcontrolApiserverV1beta2FlowSchemaListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchFlowcontrolApiserverV1beta2FlowSchemaListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchFlowcontrolApiserverV1beta2PriorityLevelConfiguration: ogenreflect.RuntimeOperation{
			Name: "WatchFlowcontrolApiserverV1beta2PriorityLevelConfiguration",
			ID:   "watchFlowcontrolApiserverV1beta2PriorityLevelConfiguration",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationList: ogenreflect.RuntimeOperation{
			Name: "WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationList",
			ID:   "watchFlowcontrolApiserverV1beta2PriorityLevelConfigurationList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchInternalApiserverV1alpha1StorageVersion: ogenreflect.RuntimeOperation{
			Name: "WatchInternalApiserverV1alpha1StorageVersion",
			ID:   "watchInternalApiserverV1alpha1StorageVersion",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchInternalApiserverV1alpha1StorageVersionParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchInternalApiserverV1alpha1StorageVersionRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchInternalApiserverV1alpha1StorageVersionUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchInternalApiserverV1alpha1StorageVersionList: ogenreflect.RuntimeOperation{
			Name: "WatchInternalApiserverV1alpha1StorageVersionList",
			ID:   "watchInternalApiserverV1alpha1StorageVersionList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchInternalApiserverV1alpha1StorageVersionListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchInternalApiserverV1alpha1StorageVersionListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchInternalApiserverV1alpha1StorageVersionListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchNetworkingV1IngressClass: ogenreflect.RuntimeOperation{
			Name: "WatchNetworkingV1IngressClass",
			ID:   "watchNetworkingV1IngressClass",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchNetworkingV1IngressClassParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchNetworkingV1IngressClassRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchNetworkingV1IngressClassUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchNetworkingV1IngressClassList: ogenreflect.RuntimeOperation{
			Name: "WatchNetworkingV1IngressClassList",
			ID:   "watchNetworkingV1IngressClassList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchNetworkingV1IngressClassListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchNetworkingV1IngressClassListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchNetworkingV1IngressClassListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchNetworkingV1IngressListForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "WatchNetworkingV1IngressListForAllNamespaces",
			ID:   "watchNetworkingV1IngressListForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchNetworkingV1IngressListForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchNetworkingV1IngressListForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchNetworkingV1IngressListForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchNetworkingV1NamespacedIngress: ogenreflect.RuntimeOperation{
			Name: "WatchNetworkingV1NamespacedIngress",
			ID:   "watchNetworkingV1NamespacedIngress",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchNetworkingV1NamespacedIngressParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchNetworkingV1NamespacedIngressRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchNetworkingV1NamespacedIngressUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchNetworkingV1NamespacedIngressList: ogenreflect.RuntimeOperation{
			Name: "WatchNetworkingV1NamespacedIngressList",
			ID:   "watchNetworkingV1NamespacedIngressList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchNetworkingV1NamespacedIngressListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchNetworkingV1NamespacedIngressListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchNetworkingV1NamespacedIngressListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchNetworkingV1NamespacedNetworkPolicy: ogenreflect.RuntimeOperation{
			Name: "WatchNetworkingV1NamespacedNetworkPolicy",
			ID:   "watchNetworkingV1NamespacedNetworkPolicy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchNetworkingV1NamespacedNetworkPolicyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchNetworkingV1NamespacedNetworkPolicyRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchNetworkingV1NamespacedNetworkPolicyUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchNetworkingV1NamespacedNetworkPolicyList: ogenreflect.RuntimeOperation{
			Name: "WatchNetworkingV1NamespacedNetworkPolicyList",
			ID:   "watchNetworkingV1NamespacedNetworkPolicyList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchNetworkingV1NamespacedNetworkPolicyListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchNetworkingV1NamespacedNetworkPolicyListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchNetworkingV1NamespacedNetworkPolicyListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchNetworkingV1NetworkPolicyListForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "WatchNetworkingV1NetworkPolicyListForAllNamespaces",
			ID:   "watchNetworkingV1NetworkPolicyListForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchNetworkingV1NetworkPolicyListForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchNetworkingV1NetworkPolicyListForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchNetworkingV1NetworkPolicyListForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchNodeV1RuntimeClass: ogenreflect.RuntimeOperation{
			Name: "WatchNodeV1RuntimeClass",
			ID:   "watchNodeV1RuntimeClass",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchNodeV1RuntimeClassParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchNodeV1RuntimeClassRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchNodeV1RuntimeClassUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchNodeV1RuntimeClassList: ogenreflect.RuntimeOperation{
			Name: "WatchNodeV1RuntimeClassList",
			ID:   "watchNodeV1RuntimeClassList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchNodeV1RuntimeClassListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchNodeV1RuntimeClassListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchNodeV1RuntimeClassListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchNodeV1alpha1RuntimeClass: ogenreflect.RuntimeOperation{
			Name: "WatchNodeV1alpha1RuntimeClass",
			ID:   "watchNodeV1alpha1RuntimeClass",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchNodeV1alpha1RuntimeClassParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchNodeV1alpha1RuntimeClassRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchNodeV1alpha1RuntimeClassUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchNodeV1alpha1RuntimeClassList: ogenreflect.RuntimeOperation{
			Name: "WatchNodeV1alpha1RuntimeClassList",
			ID:   "watchNodeV1alpha1RuntimeClassList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchNodeV1alpha1RuntimeClassListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchNodeV1alpha1RuntimeClassListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchNodeV1alpha1RuntimeClassListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchNodeV1beta1RuntimeClass: ogenreflect.RuntimeOperation{
			Name: "WatchNodeV1beta1RuntimeClass",
			ID:   "watchNodeV1beta1RuntimeClass",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchNodeV1beta1RuntimeClassParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchNodeV1beta1RuntimeClassRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchNodeV1beta1RuntimeClassUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchNodeV1beta1RuntimeClassList: ogenreflect.RuntimeOperation{
			Name: "WatchNodeV1beta1RuntimeClassList",
			ID:   "watchNodeV1beta1RuntimeClassList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchNodeV1beta1RuntimeClassListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchNodeV1beta1RuntimeClassListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchNodeV1beta1RuntimeClassListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchPolicyV1NamespacedPodDisruptionBudget: ogenreflect.RuntimeOperation{
			Name: "WatchPolicyV1NamespacedPodDisruptionBudget",
			ID:   "watchPolicyV1NamespacedPodDisruptionBudget",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchPolicyV1NamespacedPodDisruptionBudgetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchPolicyV1NamespacedPodDisruptionBudgetRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchPolicyV1NamespacedPodDisruptionBudgetUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchPolicyV1NamespacedPodDisruptionBudgetList: ogenreflect.RuntimeOperation{
			Name: "WatchPolicyV1NamespacedPodDisruptionBudgetList",
			ID:   "watchPolicyV1NamespacedPodDisruptionBudgetList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchPolicyV1NamespacedPodDisruptionBudgetListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchPolicyV1NamespacedPodDisruptionBudgetListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchPolicyV1NamespacedPodDisruptionBudgetListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchPolicyV1PodDisruptionBudgetListForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "WatchPolicyV1PodDisruptionBudgetListForAllNamespaces",
			ID:   "watchPolicyV1PodDisruptionBudgetListForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchPolicyV1PodDisruptionBudgetListForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchPolicyV1PodDisruptionBudgetListForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchPolicyV1PodDisruptionBudgetListForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchPolicyV1beta1NamespacedPodDisruptionBudget: ogenreflect.RuntimeOperation{
			Name: "WatchPolicyV1beta1NamespacedPodDisruptionBudget",
			ID:   "watchPolicyV1beta1NamespacedPodDisruptionBudget",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchPolicyV1beta1NamespacedPodDisruptionBudgetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchPolicyV1beta1NamespacedPodDisruptionBudgetRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchPolicyV1beta1NamespacedPodDisruptionBudgetUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchPolicyV1beta1NamespacedPodDisruptionBudgetList: ogenreflect.RuntimeOperation{
			Name: "WatchPolicyV1beta1NamespacedPodDisruptionBudgetList",
			ID:   "watchPolicyV1beta1NamespacedPodDisruptionBudgetList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchPolicyV1beta1NamespacedPodDisruptionBudgetListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchPolicyV1beta1NamespacedPodDisruptionBudgetListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchPolicyV1beta1NamespacedPodDisruptionBudgetListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespaces",
			ID:   "watchPolicyV1beta1PodDisruptionBudgetListForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchPolicyV1beta1PodSecurityPolicy: ogenreflect.RuntimeOperation{
			Name: "WatchPolicyV1beta1PodSecurityPolicy",
			ID:   "watchPolicyV1beta1PodSecurityPolicy",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchPolicyV1beta1PodSecurityPolicyParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchPolicyV1beta1PodSecurityPolicyRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchPolicyV1beta1PodSecurityPolicyUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchPolicyV1beta1PodSecurityPolicyList: ogenreflect.RuntimeOperation{
			Name: "WatchPolicyV1beta1PodSecurityPolicyList",
			ID:   "watchPolicyV1beta1PodSecurityPolicyList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchPolicyV1beta1PodSecurityPolicyListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchPolicyV1beta1PodSecurityPolicyListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchPolicyV1beta1PodSecurityPolicyListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchRbacAuthorizationV1ClusterRole: ogenreflect.RuntimeOperation{
			Name: "WatchRbacAuthorizationV1ClusterRole",
			ID:   "watchRbacAuthorizationV1ClusterRole",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchRbacAuthorizationV1ClusterRoleParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchRbacAuthorizationV1ClusterRoleRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchRbacAuthorizationV1ClusterRoleUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchRbacAuthorizationV1ClusterRoleBinding: ogenreflect.RuntimeOperation{
			Name: "WatchRbacAuthorizationV1ClusterRoleBinding",
			ID:   "watchRbacAuthorizationV1ClusterRoleBinding",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchRbacAuthorizationV1ClusterRoleBindingParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchRbacAuthorizationV1ClusterRoleBindingRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchRbacAuthorizationV1ClusterRoleBindingUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchRbacAuthorizationV1ClusterRoleBindingList: ogenreflect.RuntimeOperation{
			Name: "WatchRbacAuthorizationV1ClusterRoleBindingList",
			ID:   "watchRbacAuthorizationV1ClusterRoleBindingList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchRbacAuthorizationV1ClusterRoleBindingListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchRbacAuthorizationV1ClusterRoleBindingListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchRbacAuthorizationV1ClusterRoleBindingListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchRbacAuthorizationV1ClusterRoleList: ogenreflect.RuntimeOperation{
			Name: "WatchRbacAuthorizationV1ClusterRoleList",
			ID:   "watchRbacAuthorizationV1ClusterRoleList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchRbacAuthorizationV1ClusterRoleListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchRbacAuthorizationV1ClusterRoleListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchRbacAuthorizationV1ClusterRoleListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchRbacAuthorizationV1NamespacedRole: ogenreflect.RuntimeOperation{
			Name: "WatchRbacAuthorizationV1NamespacedRole",
			ID:   "watchRbacAuthorizationV1NamespacedRole",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchRbacAuthorizationV1NamespacedRoleParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchRbacAuthorizationV1NamespacedRoleRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchRbacAuthorizationV1NamespacedRoleUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchRbacAuthorizationV1NamespacedRoleBinding: ogenreflect.RuntimeOperation{
			Name: "WatchRbacAuthorizationV1NamespacedRoleBinding",
			ID:   "watchRbacAuthorizationV1NamespacedRoleBinding",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchRbacAuthorizationV1NamespacedRoleBindingParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchRbacAuthorizationV1NamespacedRoleBindingRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchRbacAuthorizationV1NamespacedRoleBindingUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchRbacAuthorizationV1NamespacedRoleBindingList: ogenreflect.RuntimeOperation{
			Name: "WatchRbacAuthorizationV1NamespacedRoleBindingList",
			ID:   "watchRbacAuthorizationV1NamespacedRoleBindingList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchRbacAuthorizationV1NamespacedRoleBindingListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchRbacAuthorizationV1NamespacedRoleBindingListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchRbacAuthorizationV1NamespacedRoleBindingListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchRbacAuthorizationV1NamespacedRoleList: ogenreflect.RuntimeOperation{
			Name: "WatchRbacAuthorizationV1NamespacedRoleList",
			ID:   "watchRbacAuthorizationV1NamespacedRoleList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchRbacAuthorizationV1NamespacedRoleListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchRbacAuthorizationV1NamespacedRoleListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchRbacAuthorizationV1NamespacedRoleListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchRbacAuthorizationV1RoleBindingListForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "WatchRbacAuthorizationV1RoleBindingListForAllNamespaces",
			ID:   "watchRbacAuthorizationV1RoleBindingListForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchRbacAuthorizationV1RoleBindingListForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchRbacAuthorizationV1RoleBindingListForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchRbacAuthorizationV1RoleBindingListForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchRbacAuthorizationV1RoleListForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "WatchRbacAuthorizationV1RoleListForAllNamespaces",
			ID:   "watchRbacAuthorizationV1RoleListForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchRbacAuthorizationV1RoleListForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchRbacAuthorizationV1RoleListForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchRbacAuthorizationV1RoleListForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchSchedulingV1PriorityClass: ogenreflect.RuntimeOperation{
			Name: "WatchSchedulingV1PriorityClass",
			ID:   "watchSchedulingV1PriorityClass",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchSchedulingV1PriorityClassParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchSchedulingV1PriorityClassRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchSchedulingV1PriorityClassUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchSchedulingV1PriorityClassList: ogenreflect.RuntimeOperation{
			Name: "WatchSchedulingV1PriorityClassList",
			ID:   "watchSchedulingV1PriorityClassList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchSchedulingV1PriorityClassListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchSchedulingV1PriorityClassListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchSchedulingV1PriorityClassListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchStorageV1CSIDriver: ogenreflect.RuntimeOperation{
			Name: "WatchStorageV1CSIDriver",
			ID:   "watchStorageV1CSIDriver",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchStorageV1CSIDriverParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchStorageV1CSIDriverRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchStorageV1CSIDriverUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchStorageV1CSIDriverList: ogenreflect.RuntimeOperation{
			Name: "WatchStorageV1CSIDriverList",
			ID:   "watchStorageV1CSIDriverList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchStorageV1CSIDriverListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchStorageV1CSIDriverListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchStorageV1CSIDriverListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchStorageV1CSINode: ogenreflect.RuntimeOperation{
			Name: "WatchStorageV1CSINode",
			ID:   "watchStorageV1CSINode",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchStorageV1CSINodeParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchStorageV1CSINodeRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchStorageV1CSINodeUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchStorageV1CSINodeList: ogenreflect.RuntimeOperation{
			Name: "WatchStorageV1CSINodeList",
			ID:   "watchStorageV1CSINodeList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchStorageV1CSINodeListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchStorageV1CSINodeListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchStorageV1CSINodeListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchStorageV1StorageClass: ogenreflect.RuntimeOperation{
			Name: "WatchStorageV1StorageClass",
			ID:   "watchStorageV1StorageClass",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchStorageV1StorageClassParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchStorageV1StorageClassRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchStorageV1StorageClassUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchStorageV1StorageClassList: ogenreflect.RuntimeOperation{
			Name: "WatchStorageV1StorageClassList",
			ID:   "watchStorageV1StorageClassList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchStorageV1StorageClassListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchStorageV1StorageClassListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchStorageV1StorageClassListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchStorageV1VolumeAttachment: ogenreflect.RuntimeOperation{
			Name: "WatchStorageV1VolumeAttachment",
			ID:   "watchStorageV1VolumeAttachment",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchStorageV1VolumeAttachmentParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchStorageV1VolumeAttachmentRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchStorageV1VolumeAttachmentUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchStorageV1VolumeAttachmentList: ogenreflect.RuntimeOperation{
			Name: "WatchStorageV1VolumeAttachmentList",
			ID:   "watchStorageV1VolumeAttachmentList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchStorageV1VolumeAttachmentListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchStorageV1VolumeAttachmentListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchStorageV1VolumeAttachmentListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchStorageV1alpha1CSIStorageCapacityListForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "WatchStorageV1alpha1CSIStorageCapacityListForAllNamespaces",
			ID:   "watchStorageV1alpha1CSIStorageCapacityListForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchStorageV1alpha1NamespacedCSIStorageCapacity: ogenreflect.RuntimeOperation{
			Name: "WatchStorageV1alpha1NamespacedCSIStorageCapacity",
			ID:   "watchStorageV1alpha1NamespacedCSIStorageCapacity",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchStorageV1alpha1NamespacedCSIStorageCapacityParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchStorageV1alpha1NamespacedCSIStorageCapacityRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchStorageV1alpha1NamespacedCSIStorageCapacityUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchStorageV1alpha1NamespacedCSIStorageCapacityList: ogenreflect.RuntimeOperation{
			Name: "WatchStorageV1alpha1NamespacedCSIStorageCapacityList",
			ID:   "watchStorageV1alpha1NamespacedCSIStorageCapacityList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchStorageV1alpha1NamespacedCSIStorageCapacityListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchStorageV1alpha1NamespacedCSIStorageCapacityListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchStorageV1alpha1NamespacedCSIStorageCapacityListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchStorageV1beta1CSIStorageCapacityListForAllNamespaces: ogenreflect.RuntimeOperation{
			Name: "WatchStorageV1beta1CSIStorageCapacityListForAllNamespaces",
			ID:   "watchStorageV1beta1CSIStorageCapacityListForAllNamespaces",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchStorageV1beta1NamespacedCSIStorageCapacity: ogenreflect.RuntimeOperation{
			Name: "WatchStorageV1beta1NamespacedCSIStorageCapacity",
			ID:   "watchStorageV1beta1NamespacedCSIStorageCapacity",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchStorageV1beta1NamespacedCSIStorageCapacityParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "name",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "name",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchStorageV1beta1NamespacedCSIStorageCapacityRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchStorageV1beta1NamespacedCSIStorageCapacityUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		WatchStorageV1beta1NamespacedCSIStorageCapacityList: ogenreflect.RuntimeOperation{
			Name: "WatchStorageV1beta1NamespacedCSIStorageCapacityList",
			ID:   "watchStorageV1beta1NamespacedCSIStorageCapacityList",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(WatchStorageV1beta1NamespacedCSIStorageCapacityListParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "allowWatchBookmarks",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "allowWatchBookmarks",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "continue",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "continue",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "fieldSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "fieldSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "labelSelector",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "labelSelector",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "limit",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "limit",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "namespace",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "namespace",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "pretty",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "pretty",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersion",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersion",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "resourceVersionMatch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "resourceVersionMatch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "timeoutSeconds",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "timeoutSeconds",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "watch",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptBool)).Elem(),
							Name:     "watch",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(WatchStorageV1beta1NamespacedCSIStorageCapacityListRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
						reflect.TypeOf(new(*WatchStorageV1beta1NamespacedCSIStorageCapacityListUnauthorized)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(IoK8sApimachineryPkgApisMetaV1WatchEvent)).Elem(),
							},
						},
						"401": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
	},
}

type api struct {
	Paths paths
}

type paths struct {
	ConnectCoreV1DeleteNamespacedPodProxy                              ogenreflect.RuntimeOperation
	ConnectCoreV1DeleteNamespacedPodProxyWithPath                      ogenreflect.RuntimeOperation
	ConnectCoreV1DeleteNamespacedServiceProxy                          ogenreflect.RuntimeOperation
	ConnectCoreV1DeleteNamespacedServiceProxyWithPath                  ogenreflect.RuntimeOperation
	ConnectCoreV1DeleteNodeProxy                                       ogenreflect.RuntimeOperation
	ConnectCoreV1DeleteNodeProxyWithPath                               ogenreflect.RuntimeOperation
	ConnectCoreV1GetNamespacedPodAttach                                ogenreflect.RuntimeOperation
	ConnectCoreV1GetNamespacedPodExec                                  ogenreflect.RuntimeOperation
	ConnectCoreV1GetNamespacedPodPortforward                           ogenreflect.RuntimeOperation
	ConnectCoreV1GetNamespacedPodProxy                                 ogenreflect.RuntimeOperation
	ConnectCoreV1GetNamespacedPodProxyWithPath                         ogenreflect.RuntimeOperation
	ConnectCoreV1GetNamespacedServiceProxy                             ogenreflect.RuntimeOperation
	ConnectCoreV1GetNamespacedServiceProxyWithPath                     ogenreflect.RuntimeOperation
	ConnectCoreV1GetNodeProxy                                          ogenreflect.RuntimeOperation
	ConnectCoreV1GetNodeProxyWithPath                                  ogenreflect.RuntimeOperation
	ConnectCoreV1HeadNamespacedPodProxy                                ogenreflect.RuntimeOperation
	ConnectCoreV1HeadNamespacedPodProxyWithPath                        ogenreflect.RuntimeOperation
	ConnectCoreV1HeadNamespacedServiceProxy                            ogenreflect.RuntimeOperation
	ConnectCoreV1HeadNamespacedServiceProxyWithPath                    ogenreflect.RuntimeOperation
	ConnectCoreV1HeadNodeProxy                                         ogenreflect.RuntimeOperation
	ConnectCoreV1HeadNodeProxyWithPath                                 ogenreflect.RuntimeOperation
	ConnectCoreV1OptionsNamespacedPodProxy                             ogenreflect.RuntimeOperation
	ConnectCoreV1OptionsNamespacedPodProxyWithPath                     ogenreflect.RuntimeOperation
	ConnectCoreV1OptionsNamespacedServiceProxy                         ogenreflect.RuntimeOperation
	ConnectCoreV1OptionsNamespacedServiceProxyWithPath                 ogenreflect.RuntimeOperation
	ConnectCoreV1OptionsNodeProxy                                      ogenreflect.RuntimeOperation
	ConnectCoreV1OptionsNodeProxyWithPath                              ogenreflect.RuntimeOperation
	ConnectCoreV1PatchNamespacedPodProxy                               ogenreflect.RuntimeOperation
	ConnectCoreV1PatchNamespacedPodProxyWithPath                       ogenreflect.RuntimeOperation
	ConnectCoreV1PatchNamespacedServiceProxy                           ogenreflect.RuntimeOperation
	ConnectCoreV1PatchNamespacedServiceProxyWithPath                   ogenreflect.RuntimeOperation
	ConnectCoreV1PatchNodeProxy                                        ogenreflect.RuntimeOperation
	ConnectCoreV1PatchNodeProxyWithPath                                ogenreflect.RuntimeOperation
	ConnectCoreV1PostNamespacedPodAttach                               ogenreflect.RuntimeOperation
	ConnectCoreV1PostNamespacedPodExec                                 ogenreflect.RuntimeOperation
	ConnectCoreV1PostNamespacedPodPortforward                          ogenreflect.RuntimeOperation
	ConnectCoreV1PostNamespacedPodProxy                                ogenreflect.RuntimeOperation
	ConnectCoreV1PostNamespacedPodProxyWithPath                        ogenreflect.RuntimeOperation
	ConnectCoreV1PostNamespacedServiceProxy                            ogenreflect.RuntimeOperation
	ConnectCoreV1PostNamespacedServiceProxyWithPath                    ogenreflect.RuntimeOperation
	ConnectCoreV1PostNodeProxy                                         ogenreflect.RuntimeOperation
	ConnectCoreV1PostNodeProxyWithPath                                 ogenreflect.RuntimeOperation
	ConnectCoreV1PutNamespacedPodProxy                                 ogenreflect.RuntimeOperation
	ConnectCoreV1PutNamespacedPodProxyWithPath                         ogenreflect.RuntimeOperation
	ConnectCoreV1PutNamespacedServiceProxy                             ogenreflect.RuntimeOperation
	ConnectCoreV1PutNamespacedServiceProxyWithPath                     ogenreflect.RuntimeOperation
	ConnectCoreV1PutNodeProxy                                          ogenreflect.RuntimeOperation
	ConnectCoreV1PutNodeProxyWithPath                                  ogenreflect.RuntimeOperation
	GetAPIVersions                                                     ogenreflect.RuntimeOperation
	GetAdmissionregistrationAPIGroup                                   ogenreflect.RuntimeOperation
	GetAdmissionregistrationV1APIResources                             ogenreflect.RuntimeOperation
	GetApiextensionsAPIGroup                                           ogenreflect.RuntimeOperation
	GetApiextensionsV1APIResources                                     ogenreflect.RuntimeOperation
	GetApiregistrationAPIGroup                                         ogenreflect.RuntimeOperation
	GetApiregistrationV1APIResources                                   ogenreflect.RuntimeOperation
	GetAppsAPIGroup                                                    ogenreflect.RuntimeOperation
	GetAppsV1APIResources                                              ogenreflect.RuntimeOperation
	GetAuthenticationAPIGroup                                          ogenreflect.RuntimeOperation
	GetAuthenticationV1APIResources                                    ogenreflect.RuntimeOperation
	GetAuthorizationAPIGroup                                           ogenreflect.RuntimeOperation
	GetAuthorizationV1APIResources                                     ogenreflect.RuntimeOperation
	GetAutoscalingAPIGroup                                             ogenreflect.RuntimeOperation
	GetAutoscalingV1APIResources                                       ogenreflect.RuntimeOperation
	GetAutoscalingV2beta1APIResources                                  ogenreflect.RuntimeOperation
	GetAutoscalingV2beta2APIResources                                  ogenreflect.RuntimeOperation
	GetBatchAPIGroup                                                   ogenreflect.RuntimeOperation
	GetBatchV1APIResources                                             ogenreflect.RuntimeOperation
	GetBatchV1beta1APIResources                                        ogenreflect.RuntimeOperation
	GetCertificatesAPIGroup                                            ogenreflect.RuntimeOperation
	GetCertificatesV1APIResources                                      ogenreflect.RuntimeOperation
	GetCodeVersion                                                     ogenreflect.RuntimeOperation
	GetCoordinationAPIGroup                                            ogenreflect.RuntimeOperation
	GetCoordinationV1APIResources                                      ogenreflect.RuntimeOperation
	GetCoreAPIVersions                                                 ogenreflect.RuntimeOperation
	GetCoreV1APIResources                                              ogenreflect.RuntimeOperation
	GetDiscoveryAPIGroup                                               ogenreflect.RuntimeOperation
	GetDiscoveryV1APIResources                                         ogenreflect.RuntimeOperation
	GetDiscoveryV1beta1APIResources                                    ogenreflect.RuntimeOperation
	GetEventsAPIGroup                                                  ogenreflect.RuntimeOperation
	GetEventsV1APIResources                                            ogenreflect.RuntimeOperation
	GetEventsV1beta1APIResources                                       ogenreflect.RuntimeOperation
	GetFlowcontrolApiserverAPIGroup                                    ogenreflect.RuntimeOperation
	GetFlowcontrolApiserverV1beta1APIResources                         ogenreflect.RuntimeOperation
	GetFlowcontrolApiserverV1beta2APIResources                         ogenreflect.RuntimeOperation
	GetInternalApiserverAPIGroup                                       ogenreflect.RuntimeOperation
	GetInternalApiserverV1alpha1APIResources                           ogenreflect.RuntimeOperation
	GetNetworkingAPIGroup                                              ogenreflect.RuntimeOperation
	GetNetworkingV1APIResources                                        ogenreflect.RuntimeOperation
	GetNodeAPIGroup                                                    ogenreflect.RuntimeOperation
	GetNodeV1APIResources                                              ogenreflect.RuntimeOperation
	GetNodeV1alpha1APIResources                                        ogenreflect.RuntimeOperation
	GetNodeV1beta1APIResources                                         ogenreflect.RuntimeOperation
	GetPolicyAPIGroup                                                  ogenreflect.RuntimeOperation
	GetPolicyV1APIResources                                            ogenreflect.RuntimeOperation
	GetPolicyV1beta1APIResources                                       ogenreflect.RuntimeOperation
	GetRbacAuthorizationAPIGroup                                       ogenreflect.RuntimeOperation
	GetRbacAuthorizationV1APIResources                                 ogenreflect.RuntimeOperation
	GetSchedulingAPIGroup                                              ogenreflect.RuntimeOperation
	GetSchedulingV1APIResources                                        ogenreflect.RuntimeOperation
	GetServiceAccountIssuerOpenIDConfiguration                         ogenreflect.RuntimeOperation
	GetServiceAccountIssuerOpenIDKeyset                                ogenreflect.RuntimeOperation
	GetStorageAPIGroup                                                 ogenreflect.RuntimeOperation
	GetStorageV1APIResources                                           ogenreflect.RuntimeOperation
	GetStorageV1alpha1APIResources                                     ogenreflect.RuntimeOperation
	GetStorageV1beta1APIResources                                      ogenreflect.RuntimeOperation
	ListAdmissionregistrationV1MutatingWebhookConfiguration            ogenreflect.RuntimeOperation
	ListAdmissionregistrationV1ValidatingWebhookConfiguration          ogenreflect.RuntimeOperation
	ListApiextensionsV1CustomResourceDefinition                        ogenreflect.RuntimeOperation
	ListApiregistrationV1APIService                                    ogenreflect.RuntimeOperation
	ListAppsV1ControllerRevisionForAllNamespaces                       ogenreflect.RuntimeOperation
	ListAppsV1DaemonSetForAllNamespaces                                ogenreflect.RuntimeOperation
	ListAppsV1DeploymentForAllNamespaces                               ogenreflect.RuntimeOperation
	ListAppsV1NamespacedControllerRevision                             ogenreflect.RuntimeOperation
	ListAppsV1NamespacedDaemonSet                                      ogenreflect.RuntimeOperation
	ListAppsV1NamespacedDeployment                                     ogenreflect.RuntimeOperation
	ListAppsV1NamespacedReplicaSet                                     ogenreflect.RuntimeOperation
	ListAppsV1NamespacedStatefulSet                                    ogenreflect.RuntimeOperation
	ListAppsV1ReplicaSetForAllNamespaces                               ogenreflect.RuntimeOperation
	ListAppsV1StatefulSetForAllNamespaces                              ogenreflect.RuntimeOperation
	ListAutoscalingV1HorizontalPodAutoscalerForAllNamespaces           ogenreflect.RuntimeOperation
	ListAutoscalingV1NamespacedHorizontalPodAutoscaler                 ogenreflect.RuntimeOperation
	ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespaces      ogenreflect.RuntimeOperation
	ListAutoscalingV2beta1NamespacedHorizontalPodAutoscaler            ogenreflect.RuntimeOperation
	ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespaces      ogenreflect.RuntimeOperation
	ListAutoscalingV2beta2NamespacedHorizontalPodAutoscaler            ogenreflect.RuntimeOperation
	ListBatchV1CronJobForAllNamespaces                                 ogenreflect.RuntimeOperation
	ListBatchV1JobForAllNamespaces                                     ogenreflect.RuntimeOperation
	ListBatchV1NamespacedCronJob                                       ogenreflect.RuntimeOperation
	ListBatchV1NamespacedJob                                           ogenreflect.RuntimeOperation
	ListBatchV1beta1CronJobForAllNamespaces                            ogenreflect.RuntimeOperation
	ListBatchV1beta1NamespacedCronJob                                  ogenreflect.RuntimeOperation
	ListCertificatesV1CertificateSigningRequest                        ogenreflect.RuntimeOperation
	ListCoordinationV1LeaseForAllNamespaces                            ogenreflect.RuntimeOperation
	ListCoordinationV1NamespacedLease                                  ogenreflect.RuntimeOperation
	ListCoreV1ComponentStatus                                          ogenreflect.RuntimeOperation
	ListCoreV1ConfigMapForAllNamespaces                                ogenreflect.RuntimeOperation
	ListCoreV1EndpointsForAllNamespaces                                ogenreflect.RuntimeOperation
	ListCoreV1EventForAllNamespaces                                    ogenreflect.RuntimeOperation
	ListCoreV1LimitRangeForAllNamespaces                               ogenreflect.RuntimeOperation
	ListCoreV1Namespace                                                ogenreflect.RuntimeOperation
	ListCoreV1NamespacedConfigMap                                      ogenreflect.RuntimeOperation
	ListCoreV1NamespacedEndpoints                                      ogenreflect.RuntimeOperation
	ListCoreV1NamespacedEvent                                          ogenreflect.RuntimeOperation
	ListCoreV1NamespacedLimitRange                                     ogenreflect.RuntimeOperation
	ListCoreV1NamespacedPersistentVolumeClaim                          ogenreflect.RuntimeOperation
	ListCoreV1NamespacedPod                                            ogenreflect.RuntimeOperation
	ListCoreV1NamespacedPodTemplate                                    ogenreflect.RuntimeOperation
	ListCoreV1NamespacedReplicationController                          ogenreflect.RuntimeOperation
	ListCoreV1NamespacedResourceQuota                                  ogenreflect.RuntimeOperation
	ListCoreV1NamespacedSecret                                         ogenreflect.RuntimeOperation
	ListCoreV1NamespacedService                                        ogenreflect.RuntimeOperation
	ListCoreV1NamespacedServiceAccount                                 ogenreflect.RuntimeOperation
	ListCoreV1Node                                                     ogenreflect.RuntimeOperation
	ListCoreV1PersistentVolume                                         ogenreflect.RuntimeOperation
	ListCoreV1PersistentVolumeClaimForAllNamespaces                    ogenreflect.RuntimeOperation
	ListCoreV1PodForAllNamespaces                                      ogenreflect.RuntimeOperation
	ListCoreV1PodTemplateForAllNamespaces                              ogenreflect.RuntimeOperation
	ListCoreV1ReplicationControllerForAllNamespaces                    ogenreflect.RuntimeOperation
	ListCoreV1ResourceQuotaForAllNamespaces                            ogenreflect.RuntimeOperation
	ListCoreV1SecretForAllNamespaces                                   ogenreflect.RuntimeOperation
	ListCoreV1ServiceAccountForAllNamespaces                           ogenreflect.RuntimeOperation
	ListCoreV1ServiceForAllNamespaces                                  ogenreflect.RuntimeOperation
	ListDiscoveryV1EndpointSliceForAllNamespaces                       ogenreflect.RuntimeOperation
	ListDiscoveryV1NamespacedEndpointSlice                             ogenreflect.RuntimeOperation
	ListDiscoveryV1beta1EndpointSliceForAllNamespaces                  ogenreflect.RuntimeOperation
	ListDiscoveryV1beta1NamespacedEndpointSlice                        ogenreflect.RuntimeOperation
	ListEventsV1EventForAllNamespaces                                  ogenreflect.RuntimeOperation
	ListEventsV1NamespacedEvent                                        ogenreflect.RuntimeOperation
	ListEventsV1beta1EventForAllNamespaces                             ogenreflect.RuntimeOperation
	ListEventsV1beta1NamespacedEvent                                   ogenreflect.RuntimeOperation
	ListFlowcontrolApiserverV1beta1FlowSchema                          ogenreflect.RuntimeOperation
	ListFlowcontrolApiserverV1beta1PriorityLevelConfiguration          ogenreflect.RuntimeOperation
	ListFlowcontrolApiserverV1beta2FlowSchema                          ogenreflect.RuntimeOperation
	ListFlowcontrolApiserverV1beta2PriorityLevelConfiguration          ogenreflect.RuntimeOperation
	ListInternalApiserverV1alpha1StorageVersion                        ogenreflect.RuntimeOperation
	ListNetworkingV1IngressClass                                       ogenreflect.RuntimeOperation
	ListNetworkingV1IngressForAllNamespaces                            ogenreflect.RuntimeOperation
	ListNetworkingV1NamespacedIngress                                  ogenreflect.RuntimeOperation
	ListNetworkingV1NamespacedNetworkPolicy                            ogenreflect.RuntimeOperation
	ListNetworkingV1NetworkPolicyForAllNamespaces                      ogenreflect.RuntimeOperation
	ListNodeV1RuntimeClass                                             ogenreflect.RuntimeOperation
	ListNodeV1alpha1RuntimeClass                                       ogenreflect.RuntimeOperation
	ListNodeV1beta1RuntimeClass                                        ogenreflect.RuntimeOperation
	ListPolicyV1NamespacedPodDisruptionBudget                          ogenreflect.RuntimeOperation
	ListPolicyV1PodDisruptionBudgetForAllNamespaces                    ogenreflect.RuntimeOperation
	ListPolicyV1beta1NamespacedPodDisruptionBudget                     ogenreflect.RuntimeOperation
	ListPolicyV1beta1PodDisruptionBudgetForAllNamespaces               ogenreflect.RuntimeOperation
	ListPolicyV1beta1PodSecurityPolicy                                 ogenreflect.RuntimeOperation
	ListRbacAuthorizationV1ClusterRole                                 ogenreflect.RuntimeOperation
	ListRbacAuthorizationV1ClusterRoleBinding                          ogenreflect.RuntimeOperation
	ListRbacAuthorizationV1NamespacedRole                              ogenreflect.RuntimeOperation
	ListRbacAuthorizationV1NamespacedRoleBinding                       ogenreflect.RuntimeOperation
	ListRbacAuthorizationV1RoleBindingForAllNamespaces                 ogenreflect.RuntimeOperation
	ListRbacAuthorizationV1RoleForAllNamespaces                        ogenreflect.RuntimeOperation
	ListSchedulingV1PriorityClass                                      ogenreflect.RuntimeOperation
	ListStorageV1CSIDriver                                             ogenreflect.RuntimeOperation
	ListStorageV1CSINode                                               ogenreflect.RuntimeOperation
	ListStorageV1StorageClass                                          ogenreflect.RuntimeOperation
	ListStorageV1VolumeAttachment                                      ogenreflect.RuntimeOperation
	ListStorageV1alpha1CSIStorageCapacityForAllNamespaces              ogenreflect.RuntimeOperation
	ListStorageV1alpha1NamespacedCSIStorageCapacity                    ogenreflect.RuntimeOperation
	ListStorageV1beta1CSIStorageCapacityForAllNamespaces               ogenreflect.RuntimeOperation
	ListStorageV1beta1NamespacedCSIStorageCapacity                     ogenreflect.RuntimeOperation
	LogFileHandler                                                     ogenreflect.RuntimeOperation
	LogFileListHandler                                                 ogenreflect.RuntimeOperation
	ReadAdmissionregistrationV1MutatingWebhookConfiguration            ogenreflect.RuntimeOperation
	ReadAdmissionregistrationV1ValidatingWebhookConfiguration          ogenreflect.RuntimeOperation
	ReadApiextensionsV1CustomResourceDefinition                        ogenreflect.RuntimeOperation
	ReadApiextensionsV1CustomResourceDefinitionStatus                  ogenreflect.RuntimeOperation
	ReadApiregistrationV1APIService                                    ogenreflect.RuntimeOperation
	ReadApiregistrationV1APIServiceStatus                              ogenreflect.RuntimeOperation
	ReadAppsV1NamespacedControllerRevision                             ogenreflect.RuntimeOperation
	ReadAppsV1NamespacedDaemonSet                                      ogenreflect.RuntimeOperation
	ReadAppsV1NamespacedDaemonSetStatus                                ogenreflect.RuntimeOperation
	ReadAppsV1NamespacedDeployment                                     ogenreflect.RuntimeOperation
	ReadAppsV1NamespacedDeploymentScale                                ogenreflect.RuntimeOperation
	ReadAppsV1NamespacedDeploymentStatus                               ogenreflect.RuntimeOperation
	ReadAppsV1NamespacedReplicaSet                                     ogenreflect.RuntimeOperation
	ReadAppsV1NamespacedReplicaSetScale                                ogenreflect.RuntimeOperation
	ReadAppsV1NamespacedReplicaSetStatus                               ogenreflect.RuntimeOperation
	ReadAppsV1NamespacedStatefulSet                                    ogenreflect.RuntimeOperation
	ReadAppsV1NamespacedStatefulSetScale                               ogenreflect.RuntimeOperation
	ReadAppsV1NamespacedStatefulSetStatus                              ogenreflect.RuntimeOperation
	ReadAutoscalingV1NamespacedHorizontalPodAutoscaler                 ogenreflect.RuntimeOperation
	ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatus           ogenreflect.RuntimeOperation
	ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscaler            ogenreflect.RuntimeOperation
	ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus      ogenreflect.RuntimeOperation
	ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscaler            ogenreflect.RuntimeOperation
	ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus      ogenreflect.RuntimeOperation
	ReadBatchV1NamespacedCronJob                                       ogenreflect.RuntimeOperation
	ReadBatchV1NamespacedCronJobStatus                                 ogenreflect.RuntimeOperation
	ReadBatchV1NamespacedJob                                           ogenreflect.RuntimeOperation
	ReadBatchV1NamespacedJobStatus                                     ogenreflect.RuntimeOperation
	ReadBatchV1beta1NamespacedCronJob                                  ogenreflect.RuntimeOperation
	ReadBatchV1beta1NamespacedCronJobStatus                            ogenreflect.RuntimeOperation
	ReadCertificatesV1CertificateSigningRequest                        ogenreflect.RuntimeOperation
	ReadCertificatesV1CertificateSigningRequestApproval                ogenreflect.RuntimeOperation
	ReadCertificatesV1CertificateSigningRequestStatus                  ogenreflect.RuntimeOperation
	ReadCoordinationV1NamespacedLease                                  ogenreflect.RuntimeOperation
	ReadCoreV1ComponentStatus                                          ogenreflect.RuntimeOperation
	ReadCoreV1Namespace                                                ogenreflect.RuntimeOperation
	ReadCoreV1NamespaceStatus                                          ogenreflect.RuntimeOperation
	ReadCoreV1NamespacedConfigMap                                      ogenreflect.RuntimeOperation
	ReadCoreV1NamespacedEndpoints                                      ogenreflect.RuntimeOperation
	ReadCoreV1NamespacedEvent                                          ogenreflect.RuntimeOperation
	ReadCoreV1NamespacedLimitRange                                     ogenreflect.RuntimeOperation
	ReadCoreV1NamespacedPersistentVolumeClaim                          ogenreflect.RuntimeOperation
	ReadCoreV1NamespacedPersistentVolumeClaimStatus                    ogenreflect.RuntimeOperation
	ReadCoreV1NamespacedPod                                            ogenreflect.RuntimeOperation
	ReadCoreV1NamespacedPodEphemeralcontainers                         ogenreflect.RuntimeOperation
	ReadCoreV1NamespacedPodLog                                         ogenreflect.RuntimeOperation
	ReadCoreV1NamespacedPodStatus                                      ogenreflect.RuntimeOperation
	ReadCoreV1NamespacedPodTemplate                                    ogenreflect.RuntimeOperation
	ReadCoreV1NamespacedReplicationController                          ogenreflect.RuntimeOperation
	ReadCoreV1NamespacedReplicationControllerScale                     ogenreflect.RuntimeOperation
	ReadCoreV1NamespacedReplicationControllerStatus                    ogenreflect.RuntimeOperation
	ReadCoreV1NamespacedResourceQuota                                  ogenreflect.RuntimeOperation
	ReadCoreV1NamespacedResourceQuotaStatus                            ogenreflect.RuntimeOperation
	ReadCoreV1NamespacedSecret                                         ogenreflect.RuntimeOperation
	ReadCoreV1NamespacedService                                        ogenreflect.RuntimeOperation
	ReadCoreV1NamespacedServiceAccount                                 ogenreflect.RuntimeOperation
	ReadCoreV1NamespacedServiceStatus                                  ogenreflect.RuntimeOperation
	ReadCoreV1Node                                                     ogenreflect.RuntimeOperation
	ReadCoreV1NodeStatus                                               ogenreflect.RuntimeOperation
	ReadCoreV1PersistentVolume                                         ogenreflect.RuntimeOperation
	ReadCoreV1PersistentVolumeStatus                                   ogenreflect.RuntimeOperation
	ReadDiscoveryV1NamespacedEndpointSlice                             ogenreflect.RuntimeOperation
	ReadDiscoveryV1beta1NamespacedEndpointSlice                        ogenreflect.RuntimeOperation
	ReadEventsV1NamespacedEvent                                        ogenreflect.RuntimeOperation
	ReadEventsV1beta1NamespacedEvent                                   ogenreflect.RuntimeOperation
	ReadFlowcontrolApiserverV1beta1FlowSchema                          ogenreflect.RuntimeOperation
	ReadFlowcontrolApiserverV1beta1FlowSchemaStatus                    ogenreflect.RuntimeOperation
	ReadFlowcontrolApiserverV1beta1PriorityLevelConfiguration          ogenreflect.RuntimeOperation
	ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatus    ogenreflect.RuntimeOperation
	ReadFlowcontrolApiserverV1beta2FlowSchema                          ogenreflect.RuntimeOperation
	ReadFlowcontrolApiserverV1beta2FlowSchemaStatus                    ogenreflect.RuntimeOperation
	ReadFlowcontrolApiserverV1beta2PriorityLevelConfiguration          ogenreflect.RuntimeOperation
	ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatus    ogenreflect.RuntimeOperation
	ReadInternalApiserverV1alpha1StorageVersion                        ogenreflect.RuntimeOperation
	ReadInternalApiserverV1alpha1StorageVersionStatus                  ogenreflect.RuntimeOperation
	ReadNetworkingV1IngressClass                                       ogenreflect.RuntimeOperation
	ReadNetworkingV1NamespacedIngress                                  ogenreflect.RuntimeOperation
	ReadNetworkingV1NamespacedIngressStatus                            ogenreflect.RuntimeOperation
	ReadNetworkingV1NamespacedNetworkPolicy                            ogenreflect.RuntimeOperation
	ReadNodeV1RuntimeClass                                             ogenreflect.RuntimeOperation
	ReadNodeV1alpha1RuntimeClass                                       ogenreflect.RuntimeOperation
	ReadNodeV1beta1RuntimeClass                                        ogenreflect.RuntimeOperation
	ReadPolicyV1NamespacedPodDisruptionBudget                          ogenreflect.RuntimeOperation
	ReadPolicyV1NamespacedPodDisruptionBudgetStatus                    ogenreflect.RuntimeOperation
	ReadPolicyV1beta1NamespacedPodDisruptionBudget                     ogenreflect.RuntimeOperation
	ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatus               ogenreflect.RuntimeOperation
	ReadPolicyV1beta1PodSecurityPolicy                                 ogenreflect.RuntimeOperation
	ReadRbacAuthorizationV1ClusterRole                                 ogenreflect.RuntimeOperation
	ReadRbacAuthorizationV1ClusterRoleBinding                          ogenreflect.RuntimeOperation
	ReadRbacAuthorizationV1NamespacedRole                              ogenreflect.RuntimeOperation
	ReadRbacAuthorizationV1NamespacedRoleBinding                       ogenreflect.RuntimeOperation
	ReadSchedulingV1PriorityClass                                      ogenreflect.RuntimeOperation
	ReadStorageV1CSIDriver                                             ogenreflect.RuntimeOperation
	ReadStorageV1CSINode                                               ogenreflect.RuntimeOperation
	ReadStorageV1StorageClass                                          ogenreflect.RuntimeOperation
	ReadStorageV1VolumeAttachment                                      ogenreflect.RuntimeOperation
	ReadStorageV1VolumeAttachmentStatus                                ogenreflect.RuntimeOperation
	ReadStorageV1alpha1NamespacedCSIStorageCapacity                    ogenreflect.RuntimeOperation
	ReadStorageV1beta1NamespacedCSIStorageCapacity                     ogenreflect.RuntimeOperation
	WatchAdmissionregistrationV1MutatingWebhookConfiguration           ogenreflect.RuntimeOperation
	WatchAdmissionregistrationV1MutatingWebhookConfigurationList       ogenreflect.RuntimeOperation
	WatchAdmissionregistrationV1ValidatingWebhookConfiguration         ogenreflect.RuntimeOperation
	WatchAdmissionregistrationV1ValidatingWebhookConfigurationList     ogenreflect.RuntimeOperation
	WatchApiextensionsV1CustomResourceDefinition                       ogenreflect.RuntimeOperation
	WatchApiextensionsV1CustomResourceDefinitionList                   ogenreflect.RuntimeOperation
	WatchApiregistrationV1APIService                                   ogenreflect.RuntimeOperation
	WatchApiregistrationV1APIServiceList                               ogenreflect.RuntimeOperation
	WatchAppsV1ControllerRevisionListForAllNamespaces                  ogenreflect.RuntimeOperation
	WatchAppsV1DaemonSetListForAllNamespaces                           ogenreflect.RuntimeOperation
	WatchAppsV1DeploymentListForAllNamespaces                          ogenreflect.RuntimeOperation
	WatchAppsV1NamespacedControllerRevision                            ogenreflect.RuntimeOperation
	WatchAppsV1NamespacedControllerRevisionList                        ogenreflect.RuntimeOperation
	WatchAppsV1NamespacedDaemonSet                                     ogenreflect.RuntimeOperation
	WatchAppsV1NamespacedDaemonSetList                                 ogenreflect.RuntimeOperation
	WatchAppsV1NamespacedDeployment                                    ogenreflect.RuntimeOperation
	WatchAppsV1NamespacedDeploymentList                                ogenreflect.RuntimeOperation
	WatchAppsV1NamespacedReplicaSet                                    ogenreflect.RuntimeOperation
	WatchAppsV1NamespacedReplicaSetList                                ogenreflect.RuntimeOperation
	WatchAppsV1NamespacedStatefulSet                                   ogenreflect.RuntimeOperation
	WatchAppsV1NamespacedStatefulSetList                               ogenreflect.RuntimeOperation
	WatchAppsV1ReplicaSetListForAllNamespaces                          ogenreflect.RuntimeOperation
	WatchAppsV1StatefulSetListForAllNamespaces                         ogenreflect.RuntimeOperation
	WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespaces      ogenreflect.RuntimeOperation
	WatchAutoscalingV1NamespacedHorizontalPodAutoscaler                ogenreflect.RuntimeOperation
	WatchAutoscalingV1NamespacedHorizontalPodAutoscalerList            ogenreflect.RuntimeOperation
	WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespaces ogenreflect.RuntimeOperation
	WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscaler           ogenreflect.RuntimeOperation
	WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerList       ogenreflect.RuntimeOperation
	WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespaces ogenreflect.RuntimeOperation
	WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscaler           ogenreflect.RuntimeOperation
	WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerList       ogenreflect.RuntimeOperation
	WatchBatchV1CronJobListForAllNamespaces                            ogenreflect.RuntimeOperation
	WatchBatchV1JobListForAllNamespaces                                ogenreflect.RuntimeOperation
	WatchBatchV1NamespacedCronJob                                      ogenreflect.RuntimeOperation
	WatchBatchV1NamespacedCronJobList                                  ogenreflect.RuntimeOperation
	WatchBatchV1NamespacedJob                                          ogenreflect.RuntimeOperation
	WatchBatchV1NamespacedJobList                                      ogenreflect.RuntimeOperation
	WatchBatchV1beta1CronJobListForAllNamespaces                       ogenreflect.RuntimeOperation
	WatchBatchV1beta1NamespacedCronJob                                 ogenreflect.RuntimeOperation
	WatchBatchV1beta1NamespacedCronJobList                             ogenreflect.RuntimeOperation
	WatchCertificatesV1CertificateSigningRequest                       ogenreflect.RuntimeOperation
	WatchCertificatesV1CertificateSigningRequestList                   ogenreflect.RuntimeOperation
	WatchCoordinationV1LeaseListForAllNamespaces                       ogenreflect.RuntimeOperation
	WatchCoordinationV1NamespacedLease                                 ogenreflect.RuntimeOperation
	WatchCoordinationV1NamespacedLeaseList                             ogenreflect.RuntimeOperation
	WatchCoreV1ConfigMapListForAllNamespaces                           ogenreflect.RuntimeOperation
	WatchCoreV1EndpointsListForAllNamespaces                           ogenreflect.RuntimeOperation
	WatchCoreV1EventListForAllNamespaces                               ogenreflect.RuntimeOperation
	WatchCoreV1LimitRangeListForAllNamespaces                          ogenreflect.RuntimeOperation
	WatchCoreV1Namespace                                               ogenreflect.RuntimeOperation
	WatchCoreV1NamespaceList                                           ogenreflect.RuntimeOperation
	WatchCoreV1NamespacedConfigMap                                     ogenreflect.RuntimeOperation
	WatchCoreV1NamespacedConfigMapList                                 ogenreflect.RuntimeOperation
	WatchCoreV1NamespacedEndpoints                                     ogenreflect.RuntimeOperation
	WatchCoreV1NamespacedEndpointsList                                 ogenreflect.RuntimeOperation
	WatchCoreV1NamespacedEvent                                         ogenreflect.RuntimeOperation
	WatchCoreV1NamespacedEventList                                     ogenreflect.RuntimeOperation
	WatchCoreV1NamespacedLimitRange                                    ogenreflect.RuntimeOperation
	WatchCoreV1NamespacedLimitRangeList                                ogenreflect.RuntimeOperation
	WatchCoreV1NamespacedPersistentVolumeClaim                         ogenreflect.RuntimeOperation
	WatchCoreV1NamespacedPersistentVolumeClaimList                     ogenreflect.RuntimeOperation
	WatchCoreV1NamespacedPod                                           ogenreflect.RuntimeOperation
	WatchCoreV1NamespacedPodList                                       ogenreflect.RuntimeOperation
	WatchCoreV1NamespacedPodTemplate                                   ogenreflect.RuntimeOperation
	WatchCoreV1NamespacedPodTemplateList                               ogenreflect.RuntimeOperation
	WatchCoreV1NamespacedReplicationController                         ogenreflect.RuntimeOperation
	WatchCoreV1NamespacedReplicationControllerList                     ogenreflect.RuntimeOperation
	WatchCoreV1NamespacedResourceQuota                                 ogenreflect.RuntimeOperation
	WatchCoreV1NamespacedResourceQuotaList                             ogenreflect.RuntimeOperation
	WatchCoreV1NamespacedSecret                                        ogenreflect.RuntimeOperation
	WatchCoreV1NamespacedSecretList                                    ogenreflect.RuntimeOperation
	WatchCoreV1NamespacedService                                       ogenreflect.RuntimeOperation
	WatchCoreV1NamespacedServiceAccount                                ogenreflect.RuntimeOperation
	WatchCoreV1NamespacedServiceAccountList                            ogenreflect.RuntimeOperation
	WatchCoreV1NamespacedServiceList                                   ogenreflect.RuntimeOperation
	WatchCoreV1Node                                                    ogenreflect.RuntimeOperation
	WatchCoreV1NodeList                                                ogenreflect.RuntimeOperation
	WatchCoreV1PersistentVolume                                        ogenreflect.RuntimeOperation
	WatchCoreV1PersistentVolumeClaimListForAllNamespaces               ogenreflect.RuntimeOperation
	WatchCoreV1PersistentVolumeList                                    ogenreflect.RuntimeOperation
	WatchCoreV1PodListForAllNamespaces                                 ogenreflect.RuntimeOperation
	WatchCoreV1PodTemplateListForAllNamespaces                         ogenreflect.RuntimeOperation
	WatchCoreV1ReplicationControllerListForAllNamespaces               ogenreflect.RuntimeOperation
	WatchCoreV1ResourceQuotaListForAllNamespaces                       ogenreflect.RuntimeOperation
	WatchCoreV1SecretListForAllNamespaces                              ogenreflect.RuntimeOperation
	WatchCoreV1ServiceAccountListForAllNamespaces                      ogenreflect.RuntimeOperation
	WatchCoreV1ServiceListForAllNamespaces                             ogenreflect.RuntimeOperation
	WatchDiscoveryV1EndpointSliceListForAllNamespaces                  ogenreflect.RuntimeOperation
	WatchDiscoveryV1NamespacedEndpointSlice                            ogenreflect.RuntimeOperation
	WatchDiscoveryV1NamespacedEndpointSliceList                        ogenreflect.RuntimeOperation
	WatchDiscoveryV1beta1EndpointSliceListForAllNamespaces             ogenreflect.RuntimeOperation
	WatchDiscoveryV1beta1NamespacedEndpointSlice                       ogenreflect.RuntimeOperation
	WatchDiscoveryV1beta1NamespacedEndpointSliceList                   ogenreflect.RuntimeOperation
	WatchEventsV1EventListForAllNamespaces                             ogenreflect.RuntimeOperation
	WatchEventsV1NamespacedEvent                                       ogenreflect.RuntimeOperation
	WatchEventsV1NamespacedEventList                                   ogenreflect.RuntimeOperation
	WatchEventsV1beta1EventListForAllNamespaces                        ogenreflect.RuntimeOperation
	WatchEventsV1beta1NamespacedEvent                                  ogenreflect.RuntimeOperation
	WatchEventsV1beta1NamespacedEventList                              ogenreflect.RuntimeOperation
	WatchFlowcontrolApiserverV1beta1FlowSchema                         ogenreflect.RuntimeOperation
	WatchFlowcontrolApiserverV1beta1FlowSchemaList                     ogenreflect.RuntimeOperation
	WatchFlowcontrolApiserverV1beta1PriorityLevelConfiguration         ogenreflect.RuntimeOperation
	WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationList     ogenreflect.RuntimeOperation
	WatchFlowcontrolApiserverV1beta2FlowSchema                         ogenreflect.RuntimeOperation
	WatchFlowcontrolApiserverV1beta2FlowSchemaList                     ogenreflect.RuntimeOperation
	WatchFlowcontrolApiserverV1beta2PriorityLevelConfiguration         ogenreflect.RuntimeOperation
	WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationList     ogenreflect.RuntimeOperation
	WatchInternalApiserverV1alpha1StorageVersion                       ogenreflect.RuntimeOperation
	WatchInternalApiserverV1alpha1StorageVersionList                   ogenreflect.RuntimeOperation
	WatchNetworkingV1IngressClass                                      ogenreflect.RuntimeOperation
	WatchNetworkingV1IngressClassList                                  ogenreflect.RuntimeOperation
	WatchNetworkingV1IngressListForAllNamespaces                       ogenreflect.RuntimeOperation
	WatchNetworkingV1NamespacedIngress                                 ogenreflect.RuntimeOperation
	WatchNetworkingV1NamespacedIngressList                             ogenreflect.RuntimeOperation
	WatchNetworkingV1NamespacedNetworkPolicy                           ogenreflect.RuntimeOperation
	WatchNetworkingV1NamespacedNetworkPolicyList                       ogenreflect.RuntimeOperation
	WatchNetworkingV1NetworkPolicyListForAllNamespaces                 ogenreflect.RuntimeOperation
	WatchNodeV1RuntimeClass                                            ogenreflect.RuntimeOperation
	WatchNodeV1RuntimeClassList                                        ogenreflect.RuntimeOperation
	WatchNodeV1alpha1RuntimeClass                                      ogenreflect.RuntimeOperation
	WatchNodeV1alpha1RuntimeClassList                                  ogenreflect.RuntimeOperation
	WatchNodeV1beta1RuntimeClass                                       ogenreflect.RuntimeOperation
	WatchNodeV1beta1RuntimeClassList                                   ogenreflect.RuntimeOperation
	WatchPolicyV1NamespacedPodDisruptionBudget                         ogenreflect.RuntimeOperation
	WatchPolicyV1NamespacedPodDisruptionBudgetList                     ogenreflect.RuntimeOperation
	WatchPolicyV1PodDisruptionBudgetListForAllNamespaces               ogenreflect.RuntimeOperation
	WatchPolicyV1beta1NamespacedPodDisruptionBudget                    ogenreflect.RuntimeOperation
	WatchPolicyV1beta1NamespacedPodDisruptionBudgetList                ogenreflect.RuntimeOperation
	WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespaces          ogenreflect.RuntimeOperation
	WatchPolicyV1beta1PodSecurityPolicy                                ogenreflect.RuntimeOperation
	WatchPolicyV1beta1PodSecurityPolicyList                            ogenreflect.RuntimeOperation
	WatchRbacAuthorizationV1ClusterRole                                ogenreflect.RuntimeOperation
	WatchRbacAuthorizationV1ClusterRoleBinding                         ogenreflect.RuntimeOperation
	WatchRbacAuthorizationV1ClusterRoleBindingList                     ogenreflect.RuntimeOperation
	WatchRbacAuthorizationV1ClusterRoleList                            ogenreflect.RuntimeOperation
	WatchRbacAuthorizationV1NamespacedRole                             ogenreflect.RuntimeOperation
	WatchRbacAuthorizationV1NamespacedRoleBinding                      ogenreflect.RuntimeOperation
	WatchRbacAuthorizationV1NamespacedRoleBindingList                  ogenreflect.RuntimeOperation
	WatchRbacAuthorizationV1NamespacedRoleList                         ogenreflect.RuntimeOperation
	WatchRbacAuthorizationV1RoleBindingListForAllNamespaces            ogenreflect.RuntimeOperation
	WatchRbacAuthorizationV1RoleListForAllNamespaces                   ogenreflect.RuntimeOperation
	WatchSchedulingV1PriorityClass                                     ogenreflect.RuntimeOperation
	WatchSchedulingV1PriorityClassList                                 ogenreflect.RuntimeOperation
	WatchStorageV1CSIDriver                                            ogenreflect.RuntimeOperation
	WatchStorageV1CSIDriverList                                        ogenreflect.RuntimeOperation
	WatchStorageV1CSINode                                              ogenreflect.RuntimeOperation
	WatchStorageV1CSINodeList                                          ogenreflect.RuntimeOperation
	WatchStorageV1StorageClass                                         ogenreflect.RuntimeOperation
	WatchStorageV1StorageClassList                                     ogenreflect.RuntimeOperation
	WatchStorageV1VolumeAttachment                                     ogenreflect.RuntimeOperation
	WatchStorageV1VolumeAttachmentList                                 ogenreflect.RuntimeOperation
	WatchStorageV1alpha1CSIStorageCapacityListForAllNamespaces         ogenreflect.RuntimeOperation
	WatchStorageV1alpha1NamespacedCSIStorageCapacity                   ogenreflect.RuntimeOperation
	WatchStorageV1alpha1NamespacedCSIStorageCapacityList               ogenreflect.RuntimeOperation
	WatchStorageV1beta1CSIStorageCapacityListForAllNamespaces          ogenreflect.RuntimeOperation
	WatchStorageV1beta1NamespacedCSIStorageCapacity                    ogenreflect.RuntimeOperation
	WatchStorageV1beta1NamespacedCSIStorageCapacityList                ogenreflect.RuntimeOperation
}

func getPaths() paths {
	return API.Paths
}

// FindByName finds operation by ogen name.
func (p paths) FindByName(name string) (op ogenreflect.RuntimeOperation, _ bool) {
	switch name {
	case "ConnectCoreV1DeleteNamespacedPodProxy":
		return p.ConnectCoreV1DeleteNamespacedPodProxy, true
	case "ConnectCoreV1DeleteNamespacedPodProxyWithPath":
		return p.ConnectCoreV1DeleteNamespacedPodProxyWithPath, true
	case "ConnectCoreV1DeleteNamespacedServiceProxy":
		return p.ConnectCoreV1DeleteNamespacedServiceProxy, true
	case "ConnectCoreV1DeleteNamespacedServiceProxyWithPath":
		return p.ConnectCoreV1DeleteNamespacedServiceProxyWithPath, true
	case "ConnectCoreV1DeleteNodeProxy":
		return p.ConnectCoreV1DeleteNodeProxy, true
	case "ConnectCoreV1DeleteNodeProxyWithPath":
		return p.ConnectCoreV1DeleteNodeProxyWithPath, true
	case "ConnectCoreV1GetNamespacedPodAttach":
		return p.ConnectCoreV1GetNamespacedPodAttach, true
	case "ConnectCoreV1GetNamespacedPodExec":
		return p.ConnectCoreV1GetNamespacedPodExec, true
	case "ConnectCoreV1GetNamespacedPodPortforward":
		return p.ConnectCoreV1GetNamespacedPodPortforward, true
	case "ConnectCoreV1GetNamespacedPodProxy":
		return p.ConnectCoreV1GetNamespacedPodProxy, true
	case "ConnectCoreV1GetNamespacedPodProxyWithPath":
		return p.ConnectCoreV1GetNamespacedPodProxyWithPath, true
	case "ConnectCoreV1GetNamespacedServiceProxy":
		return p.ConnectCoreV1GetNamespacedServiceProxy, true
	case "ConnectCoreV1GetNamespacedServiceProxyWithPath":
		return p.ConnectCoreV1GetNamespacedServiceProxyWithPath, true
	case "ConnectCoreV1GetNodeProxy":
		return p.ConnectCoreV1GetNodeProxy, true
	case "ConnectCoreV1GetNodeProxyWithPath":
		return p.ConnectCoreV1GetNodeProxyWithPath, true
	case "ConnectCoreV1HeadNamespacedPodProxy":
		return p.ConnectCoreV1HeadNamespacedPodProxy, true
	case "ConnectCoreV1HeadNamespacedPodProxyWithPath":
		return p.ConnectCoreV1HeadNamespacedPodProxyWithPath, true
	case "ConnectCoreV1HeadNamespacedServiceProxy":
		return p.ConnectCoreV1HeadNamespacedServiceProxy, true
	case "ConnectCoreV1HeadNamespacedServiceProxyWithPath":
		return p.ConnectCoreV1HeadNamespacedServiceProxyWithPath, true
	case "ConnectCoreV1HeadNodeProxy":
		return p.ConnectCoreV1HeadNodeProxy, true
	case "ConnectCoreV1HeadNodeProxyWithPath":
		return p.ConnectCoreV1HeadNodeProxyWithPath, true
	case "ConnectCoreV1OptionsNamespacedPodProxy":
		return p.ConnectCoreV1OptionsNamespacedPodProxy, true
	case "ConnectCoreV1OptionsNamespacedPodProxyWithPath":
		return p.ConnectCoreV1OptionsNamespacedPodProxyWithPath, true
	case "ConnectCoreV1OptionsNamespacedServiceProxy":
		return p.ConnectCoreV1OptionsNamespacedServiceProxy, true
	case "ConnectCoreV1OptionsNamespacedServiceProxyWithPath":
		return p.ConnectCoreV1OptionsNamespacedServiceProxyWithPath, true
	case "ConnectCoreV1OptionsNodeProxy":
		return p.ConnectCoreV1OptionsNodeProxy, true
	case "ConnectCoreV1OptionsNodeProxyWithPath":
		return p.ConnectCoreV1OptionsNodeProxyWithPath, true
	case "ConnectCoreV1PatchNamespacedPodProxy":
		return p.ConnectCoreV1PatchNamespacedPodProxy, true
	case "ConnectCoreV1PatchNamespacedPodProxyWithPath":
		return p.ConnectCoreV1PatchNamespacedPodProxyWithPath, true
	case "ConnectCoreV1PatchNamespacedServiceProxy":
		return p.ConnectCoreV1PatchNamespacedServiceProxy, true
	case "ConnectCoreV1PatchNamespacedServiceProxyWithPath":
		return p.ConnectCoreV1PatchNamespacedServiceProxyWithPath, true
	case "ConnectCoreV1PatchNodeProxy":
		return p.ConnectCoreV1PatchNodeProxy, true
	case "ConnectCoreV1PatchNodeProxyWithPath":
		return p.ConnectCoreV1PatchNodeProxyWithPath, true
	case "ConnectCoreV1PostNamespacedPodAttach":
		return p.ConnectCoreV1PostNamespacedPodAttach, true
	case "ConnectCoreV1PostNamespacedPodExec":
		return p.ConnectCoreV1PostNamespacedPodExec, true
	case "ConnectCoreV1PostNamespacedPodPortforward":
		return p.ConnectCoreV1PostNamespacedPodPortforward, true
	case "ConnectCoreV1PostNamespacedPodProxy":
		return p.ConnectCoreV1PostNamespacedPodProxy, true
	case "ConnectCoreV1PostNamespacedPodProxyWithPath":
		return p.ConnectCoreV1PostNamespacedPodProxyWithPath, true
	case "ConnectCoreV1PostNamespacedServiceProxy":
		return p.ConnectCoreV1PostNamespacedServiceProxy, true
	case "ConnectCoreV1PostNamespacedServiceProxyWithPath":
		return p.ConnectCoreV1PostNamespacedServiceProxyWithPath, true
	case "ConnectCoreV1PostNodeProxy":
		return p.ConnectCoreV1PostNodeProxy, true
	case "ConnectCoreV1PostNodeProxyWithPath":
		return p.ConnectCoreV1PostNodeProxyWithPath, true
	case "ConnectCoreV1PutNamespacedPodProxy":
		return p.ConnectCoreV1PutNamespacedPodProxy, true
	case "ConnectCoreV1PutNamespacedPodProxyWithPath":
		return p.ConnectCoreV1PutNamespacedPodProxyWithPath, true
	case "ConnectCoreV1PutNamespacedServiceProxy":
		return p.ConnectCoreV1PutNamespacedServiceProxy, true
	case "ConnectCoreV1PutNamespacedServiceProxyWithPath":
		return p.ConnectCoreV1PutNamespacedServiceProxyWithPath, true
	case "ConnectCoreV1PutNodeProxy":
		return p.ConnectCoreV1PutNodeProxy, true
	case "ConnectCoreV1PutNodeProxyWithPath":
		return p.ConnectCoreV1PutNodeProxyWithPath, true
	case "GetAPIVersions":
		return p.GetAPIVersions, true
	case "GetAdmissionregistrationAPIGroup":
		return p.GetAdmissionregistrationAPIGroup, true
	case "GetAdmissionregistrationV1APIResources":
		return p.GetAdmissionregistrationV1APIResources, true
	case "GetApiextensionsAPIGroup":
		return p.GetApiextensionsAPIGroup, true
	case "GetApiextensionsV1APIResources":
		return p.GetApiextensionsV1APIResources, true
	case "GetApiregistrationAPIGroup":
		return p.GetApiregistrationAPIGroup, true
	case "GetApiregistrationV1APIResources":
		return p.GetApiregistrationV1APIResources, true
	case "GetAppsAPIGroup":
		return p.GetAppsAPIGroup, true
	case "GetAppsV1APIResources":
		return p.GetAppsV1APIResources, true
	case "GetAuthenticationAPIGroup":
		return p.GetAuthenticationAPIGroup, true
	case "GetAuthenticationV1APIResources":
		return p.GetAuthenticationV1APIResources, true
	case "GetAuthorizationAPIGroup":
		return p.GetAuthorizationAPIGroup, true
	case "GetAuthorizationV1APIResources":
		return p.GetAuthorizationV1APIResources, true
	case "GetAutoscalingAPIGroup":
		return p.GetAutoscalingAPIGroup, true
	case "GetAutoscalingV1APIResources":
		return p.GetAutoscalingV1APIResources, true
	case "GetAutoscalingV2beta1APIResources":
		return p.GetAutoscalingV2beta1APIResources, true
	case "GetAutoscalingV2beta2APIResources":
		return p.GetAutoscalingV2beta2APIResources, true
	case "GetBatchAPIGroup":
		return p.GetBatchAPIGroup, true
	case "GetBatchV1APIResources":
		return p.GetBatchV1APIResources, true
	case "GetBatchV1beta1APIResources":
		return p.GetBatchV1beta1APIResources, true
	case "GetCertificatesAPIGroup":
		return p.GetCertificatesAPIGroup, true
	case "GetCertificatesV1APIResources":
		return p.GetCertificatesV1APIResources, true
	case "GetCodeVersion":
		return p.GetCodeVersion, true
	case "GetCoordinationAPIGroup":
		return p.GetCoordinationAPIGroup, true
	case "GetCoordinationV1APIResources":
		return p.GetCoordinationV1APIResources, true
	case "GetCoreAPIVersions":
		return p.GetCoreAPIVersions, true
	case "GetCoreV1APIResources":
		return p.GetCoreV1APIResources, true
	case "GetDiscoveryAPIGroup":
		return p.GetDiscoveryAPIGroup, true
	case "GetDiscoveryV1APIResources":
		return p.GetDiscoveryV1APIResources, true
	case "GetDiscoveryV1beta1APIResources":
		return p.GetDiscoveryV1beta1APIResources, true
	case "GetEventsAPIGroup":
		return p.GetEventsAPIGroup, true
	case "GetEventsV1APIResources":
		return p.GetEventsV1APIResources, true
	case "GetEventsV1beta1APIResources":
		return p.GetEventsV1beta1APIResources, true
	case "GetFlowcontrolApiserverAPIGroup":
		return p.GetFlowcontrolApiserverAPIGroup, true
	case "GetFlowcontrolApiserverV1beta1APIResources":
		return p.GetFlowcontrolApiserverV1beta1APIResources, true
	case "GetFlowcontrolApiserverV1beta2APIResources":
		return p.GetFlowcontrolApiserverV1beta2APIResources, true
	case "GetInternalApiserverAPIGroup":
		return p.GetInternalApiserverAPIGroup, true
	case "GetInternalApiserverV1alpha1APIResources":
		return p.GetInternalApiserverV1alpha1APIResources, true
	case "GetNetworkingAPIGroup":
		return p.GetNetworkingAPIGroup, true
	case "GetNetworkingV1APIResources":
		return p.GetNetworkingV1APIResources, true
	case "GetNodeAPIGroup":
		return p.GetNodeAPIGroup, true
	case "GetNodeV1APIResources":
		return p.GetNodeV1APIResources, true
	case "GetNodeV1alpha1APIResources":
		return p.GetNodeV1alpha1APIResources, true
	case "GetNodeV1beta1APIResources":
		return p.GetNodeV1beta1APIResources, true
	case "GetPolicyAPIGroup":
		return p.GetPolicyAPIGroup, true
	case "GetPolicyV1APIResources":
		return p.GetPolicyV1APIResources, true
	case "GetPolicyV1beta1APIResources":
		return p.GetPolicyV1beta1APIResources, true
	case "GetRbacAuthorizationAPIGroup":
		return p.GetRbacAuthorizationAPIGroup, true
	case "GetRbacAuthorizationV1APIResources":
		return p.GetRbacAuthorizationV1APIResources, true
	case "GetSchedulingAPIGroup":
		return p.GetSchedulingAPIGroup, true
	case "GetSchedulingV1APIResources":
		return p.GetSchedulingV1APIResources, true
	case "GetServiceAccountIssuerOpenIDConfiguration":
		return p.GetServiceAccountIssuerOpenIDConfiguration, true
	case "GetServiceAccountIssuerOpenIDKeyset":
		return p.GetServiceAccountIssuerOpenIDKeyset, true
	case "GetStorageAPIGroup":
		return p.GetStorageAPIGroup, true
	case "GetStorageV1APIResources":
		return p.GetStorageV1APIResources, true
	case "GetStorageV1alpha1APIResources":
		return p.GetStorageV1alpha1APIResources, true
	case "GetStorageV1beta1APIResources":
		return p.GetStorageV1beta1APIResources, true
	case "ListAdmissionregistrationV1MutatingWebhookConfiguration":
		return p.ListAdmissionregistrationV1MutatingWebhookConfiguration, true
	case "ListAdmissionregistrationV1ValidatingWebhookConfiguration":
		return p.ListAdmissionregistrationV1ValidatingWebhookConfiguration, true
	case "ListApiextensionsV1CustomResourceDefinition":
		return p.ListApiextensionsV1CustomResourceDefinition, true
	case "ListApiregistrationV1APIService":
		return p.ListApiregistrationV1APIService, true
	case "ListAppsV1ControllerRevisionForAllNamespaces":
		return p.ListAppsV1ControllerRevisionForAllNamespaces, true
	case "ListAppsV1DaemonSetForAllNamespaces":
		return p.ListAppsV1DaemonSetForAllNamespaces, true
	case "ListAppsV1DeploymentForAllNamespaces":
		return p.ListAppsV1DeploymentForAllNamespaces, true
	case "ListAppsV1NamespacedControllerRevision":
		return p.ListAppsV1NamespacedControllerRevision, true
	case "ListAppsV1NamespacedDaemonSet":
		return p.ListAppsV1NamespacedDaemonSet, true
	case "ListAppsV1NamespacedDeployment":
		return p.ListAppsV1NamespacedDeployment, true
	case "ListAppsV1NamespacedReplicaSet":
		return p.ListAppsV1NamespacedReplicaSet, true
	case "ListAppsV1NamespacedStatefulSet":
		return p.ListAppsV1NamespacedStatefulSet, true
	case "ListAppsV1ReplicaSetForAllNamespaces":
		return p.ListAppsV1ReplicaSetForAllNamespaces, true
	case "ListAppsV1StatefulSetForAllNamespaces":
		return p.ListAppsV1StatefulSetForAllNamespaces, true
	case "ListAutoscalingV1HorizontalPodAutoscalerForAllNamespaces":
		return p.ListAutoscalingV1HorizontalPodAutoscalerForAllNamespaces, true
	case "ListAutoscalingV1NamespacedHorizontalPodAutoscaler":
		return p.ListAutoscalingV1NamespacedHorizontalPodAutoscaler, true
	case "ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespaces":
		return p.ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespaces, true
	case "ListAutoscalingV2beta1NamespacedHorizontalPodAutoscaler":
		return p.ListAutoscalingV2beta1NamespacedHorizontalPodAutoscaler, true
	case "ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespaces":
		return p.ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespaces, true
	case "ListAutoscalingV2beta2NamespacedHorizontalPodAutoscaler":
		return p.ListAutoscalingV2beta2NamespacedHorizontalPodAutoscaler, true
	case "ListBatchV1CronJobForAllNamespaces":
		return p.ListBatchV1CronJobForAllNamespaces, true
	case "ListBatchV1JobForAllNamespaces":
		return p.ListBatchV1JobForAllNamespaces, true
	case "ListBatchV1NamespacedCronJob":
		return p.ListBatchV1NamespacedCronJob, true
	case "ListBatchV1NamespacedJob":
		return p.ListBatchV1NamespacedJob, true
	case "ListBatchV1beta1CronJobForAllNamespaces":
		return p.ListBatchV1beta1CronJobForAllNamespaces, true
	case "ListBatchV1beta1NamespacedCronJob":
		return p.ListBatchV1beta1NamespacedCronJob, true
	case "ListCertificatesV1CertificateSigningRequest":
		return p.ListCertificatesV1CertificateSigningRequest, true
	case "ListCoordinationV1LeaseForAllNamespaces":
		return p.ListCoordinationV1LeaseForAllNamespaces, true
	case "ListCoordinationV1NamespacedLease":
		return p.ListCoordinationV1NamespacedLease, true
	case "ListCoreV1ComponentStatus":
		return p.ListCoreV1ComponentStatus, true
	case "ListCoreV1ConfigMapForAllNamespaces":
		return p.ListCoreV1ConfigMapForAllNamespaces, true
	case "ListCoreV1EndpointsForAllNamespaces":
		return p.ListCoreV1EndpointsForAllNamespaces, true
	case "ListCoreV1EventForAllNamespaces":
		return p.ListCoreV1EventForAllNamespaces, true
	case "ListCoreV1LimitRangeForAllNamespaces":
		return p.ListCoreV1LimitRangeForAllNamespaces, true
	case "ListCoreV1Namespace":
		return p.ListCoreV1Namespace, true
	case "ListCoreV1NamespacedConfigMap":
		return p.ListCoreV1NamespacedConfigMap, true
	case "ListCoreV1NamespacedEndpoints":
		return p.ListCoreV1NamespacedEndpoints, true
	case "ListCoreV1NamespacedEvent":
		return p.ListCoreV1NamespacedEvent, true
	case "ListCoreV1NamespacedLimitRange":
		return p.ListCoreV1NamespacedLimitRange, true
	case "ListCoreV1NamespacedPersistentVolumeClaim":
		return p.ListCoreV1NamespacedPersistentVolumeClaim, true
	case "ListCoreV1NamespacedPod":
		return p.ListCoreV1NamespacedPod, true
	case "ListCoreV1NamespacedPodTemplate":
		return p.ListCoreV1NamespacedPodTemplate, true
	case "ListCoreV1NamespacedReplicationController":
		return p.ListCoreV1NamespacedReplicationController, true
	case "ListCoreV1NamespacedResourceQuota":
		return p.ListCoreV1NamespacedResourceQuota, true
	case "ListCoreV1NamespacedSecret":
		return p.ListCoreV1NamespacedSecret, true
	case "ListCoreV1NamespacedService":
		return p.ListCoreV1NamespacedService, true
	case "ListCoreV1NamespacedServiceAccount":
		return p.ListCoreV1NamespacedServiceAccount, true
	case "ListCoreV1Node":
		return p.ListCoreV1Node, true
	case "ListCoreV1PersistentVolume":
		return p.ListCoreV1PersistentVolume, true
	case "ListCoreV1PersistentVolumeClaimForAllNamespaces":
		return p.ListCoreV1PersistentVolumeClaimForAllNamespaces, true
	case "ListCoreV1PodForAllNamespaces":
		return p.ListCoreV1PodForAllNamespaces, true
	case "ListCoreV1PodTemplateForAllNamespaces":
		return p.ListCoreV1PodTemplateForAllNamespaces, true
	case "ListCoreV1ReplicationControllerForAllNamespaces":
		return p.ListCoreV1ReplicationControllerForAllNamespaces, true
	case "ListCoreV1ResourceQuotaForAllNamespaces":
		return p.ListCoreV1ResourceQuotaForAllNamespaces, true
	case "ListCoreV1SecretForAllNamespaces":
		return p.ListCoreV1SecretForAllNamespaces, true
	case "ListCoreV1ServiceAccountForAllNamespaces":
		return p.ListCoreV1ServiceAccountForAllNamespaces, true
	case "ListCoreV1ServiceForAllNamespaces":
		return p.ListCoreV1ServiceForAllNamespaces, true
	case "ListDiscoveryV1EndpointSliceForAllNamespaces":
		return p.ListDiscoveryV1EndpointSliceForAllNamespaces, true
	case "ListDiscoveryV1NamespacedEndpointSlice":
		return p.ListDiscoveryV1NamespacedEndpointSlice, true
	case "ListDiscoveryV1beta1EndpointSliceForAllNamespaces":
		return p.ListDiscoveryV1beta1EndpointSliceForAllNamespaces, true
	case "ListDiscoveryV1beta1NamespacedEndpointSlice":
		return p.ListDiscoveryV1beta1NamespacedEndpointSlice, true
	case "ListEventsV1EventForAllNamespaces":
		return p.ListEventsV1EventForAllNamespaces, true
	case "ListEventsV1NamespacedEvent":
		return p.ListEventsV1NamespacedEvent, true
	case "ListEventsV1beta1EventForAllNamespaces":
		return p.ListEventsV1beta1EventForAllNamespaces, true
	case "ListEventsV1beta1NamespacedEvent":
		return p.ListEventsV1beta1NamespacedEvent, true
	case "ListFlowcontrolApiserverV1beta1FlowSchema":
		return p.ListFlowcontrolApiserverV1beta1FlowSchema, true
	case "ListFlowcontrolApiserverV1beta1PriorityLevelConfiguration":
		return p.ListFlowcontrolApiserverV1beta1PriorityLevelConfiguration, true
	case "ListFlowcontrolApiserverV1beta2FlowSchema":
		return p.ListFlowcontrolApiserverV1beta2FlowSchema, true
	case "ListFlowcontrolApiserverV1beta2PriorityLevelConfiguration":
		return p.ListFlowcontrolApiserverV1beta2PriorityLevelConfiguration, true
	case "ListInternalApiserverV1alpha1StorageVersion":
		return p.ListInternalApiserverV1alpha1StorageVersion, true
	case "ListNetworkingV1IngressClass":
		return p.ListNetworkingV1IngressClass, true
	case "ListNetworkingV1IngressForAllNamespaces":
		return p.ListNetworkingV1IngressForAllNamespaces, true
	case "ListNetworkingV1NamespacedIngress":
		return p.ListNetworkingV1NamespacedIngress, true
	case "ListNetworkingV1NamespacedNetworkPolicy":
		return p.ListNetworkingV1NamespacedNetworkPolicy, true
	case "ListNetworkingV1NetworkPolicyForAllNamespaces":
		return p.ListNetworkingV1NetworkPolicyForAllNamespaces, true
	case "ListNodeV1RuntimeClass":
		return p.ListNodeV1RuntimeClass, true
	case "ListNodeV1alpha1RuntimeClass":
		return p.ListNodeV1alpha1RuntimeClass, true
	case "ListNodeV1beta1RuntimeClass":
		return p.ListNodeV1beta1RuntimeClass, true
	case "ListPolicyV1NamespacedPodDisruptionBudget":
		return p.ListPolicyV1NamespacedPodDisruptionBudget, true
	case "ListPolicyV1PodDisruptionBudgetForAllNamespaces":
		return p.ListPolicyV1PodDisruptionBudgetForAllNamespaces, true
	case "ListPolicyV1beta1NamespacedPodDisruptionBudget":
		return p.ListPolicyV1beta1NamespacedPodDisruptionBudget, true
	case "ListPolicyV1beta1PodDisruptionBudgetForAllNamespaces":
		return p.ListPolicyV1beta1PodDisruptionBudgetForAllNamespaces, true
	case "ListPolicyV1beta1PodSecurityPolicy":
		return p.ListPolicyV1beta1PodSecurityPolicy, true
	case "ListRbacAuthorizationV1ClusterRole":
		return p.ListRbacAuthorizationV1ClusterRole, true
	case "ListRbacAuthorizationV1ClusterRoleBinding":
		return p.ListRbacAuthorizationV1ClusterRoleBinding, true
	case "ListRbacAuthorizationV1NamespacedRole":
		return p.ListRbacAuthorizationV1NamespacedRole, true
	case "ListRbacAuthorizationV1NamespacedRoleBinding":
		return p.ListRbacAuthorizationV1NamespacedRoleBinding, true
	case "ListRbacAuthorizationV1RoleBindingForAllNamespaces":
		return p.ListRbacAuthorizationV1RoleBindingForAllNamespaces, true
	case "ListRbacAuthorizationV1RoleForAllNamespaces":
		return p.ListRbacAuthorizationV1RoleForAllNamespaces, true
	case "ListSchedulingV1PriorityClass":
		return p.ListSchedulingV1PriorityClass, true
	case "ListStorageV1CSIDriver":
		return p.ListStorageV1CSIDriver, true
	case "ListStorageV1CSINode":
		return p.ListStorageV1CSINode, true
	case "ListStorageV1StorageClass":
		return p.ListStorageV1StorageClass, true
	case "ListStorageV1VolumeAttachment":
		return p.ListStorageV1VolumeAttachment, true
	case "ListStorageV1alpha1CSIStorageCapacityForAllNamespaces":
		return p.ListStorageV1alpha1CSIStorageCapacityForAllNamespaces, true
	case "ListStorageV1alpha1NamespacedCSIStorageCapacity":
		return p.ListStorageV1alpha1NamespacedCSIStorageCapacity, true
	case "ListStorageV1beta1CSIStorageCapacityForAllNamespaces":
		return p.ListStorageV1beta1CSIStorageCapacityForAllNamespaces, true
	case "ListStorageV1beta1NamespacedCSIStorageCapacity":
		return p.ListStorageV1beta1NamespacedCSIStorageCapacity, true
	case "LogFileHandler":
		return p.LogFileHandler, true
	case "LogFileListHandler":
		return p.LogFileListHandler, true
	case "ReadAdmissionregistrationV1MutatingWebhookConfiguration":
		return p.ReadAdmissionregistrationV1MutatingWebhookConfiguration, true
	case "ReadAdmissionregistrationV1ValidatingWebhookConfiguration":
		return p.ReadAdmissionregistrationV1ValidatingWebhookConfiguration, true
	case "ReadApiextensionsV1CustomResourceDefinition":
		return p.ReadApiextensionsV1CustomResourceDefinition, true
	case "ReadApiextensionsV1CustomResourceDefinitionStatus":
		return p.ReadApiextensionsV1CustomResourceDefinitionStatus, true
	case "ReadApiregistrationV1APIService":
		return p.ReadApiregistrationV1APIService, true
	case "ReadApiregistrationV1APIServiceStatus":
		return p.ReadApiregistrationV1APIServiceStatus, true
	case "ReadAppsV1NamespacedControllerRevision":
		return p.ReadAppsV1NamespacedControllerRevision, true
	case "ReadAppsV1NamespacedDaemonSet":
		return p.ReadAppsV1NamespacedDaemonSet, true
	case "ReadAppsV1NamespacedDaemonSetStatus":
		return p.ReadAppsV1NamespacedDaemonSetStatus, true
	case "ReadAppsV1NamespacedDeployment":
		return p.ReadAppsV1NamespacedDeployment, true
	case "ReadAppsV1NamespacedDeploymentScale":
		return p.ReadAppsV1NamespacedDeploymentScale, true
	case "ReadAppsV1NamespacedDeploymentStatus":
		return p.ReadAppsV1NamespacedDeploymentStatus, true
	case "ReadAppsV1NamespacedReplicaSet":
		return p.ReadAppsV1NamespacedReplicaSet, true
	case "ReadAppsV1NamespacedReplicaSetScale":
		return p.ReadAppsV1NamespacedReplicaSetScale, true
	case "ReadAppsV1NamespacedReplicaSetStatus":
		return p.ReadAppsV1NamespacedReplicaSetStatus, true
	case "ReadAppsV1NamespacedStatefulSet":
		return p.ReadAppsV1NamespacedStatefulSet, true
	case "ReadAppsV1NamespacedStatefulSetScale":
		return p.ReadAppsV1NamespacedStatefulSetScale, true
	case "ReadAppsV1NamespacedStatefulSetStatus":
		return p.ReadAppsV1NamespacedStatefulSetStatus, true
	case "ReadAutoscalingV1NamespacedHorizontalPodAutoscaler":
		return p.ReadAutoscalingV1NamespacedHorizontalPodAutoscaler, true
	case "ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatus":
		return p.ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatus, true
	case "ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscaler":
		return p.ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscaler, true
	case "ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus":
		return p.ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus, true
	case "ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscaler":
		return p.ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscaler, true
	case "ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus":
		return p.ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus, true
	case "ReadBatchV1NamespacedCronJob":
		return p.ReadBatchV1NamespacedCronJob, true
	case "ReadBatchV1NamespacedCronJobStatus":
		return p.ReadBatchV1NamespacedCronJobStatus, true
	case "ReadBatchV1NamespacedJob":
		return p.ReadBatchV1NamespacedJob, true
	case "ReadBatchV1NamespacedJobStatus":
		return p.ReadBatchV1NamespacedJobStatus, true
	case "ReadBatchV1beta1NamespacedCronJob":
		return p.ReadBatchV1beta1NamespacedCronJob, true
	case "ReadBatchV1beta1NamespacedCronJobStatus":
		return p.ReadBatchV1beta1NamespacedCronJobStatus, true
	case "ReadCertificatesV1CertificateSigningRequest":
		return p.ReadCertificatesV1CertificateSigningRequest, true
	case "ReadCertificatesV1CertificateSigningRequestApproval":
		return p.ReadCertificatesV1CertificateSigningRequestApproval, true
	case "ReadCertificatesV1CertificateSigningRequestStatus":
		return p.ReadCertificatesV1CertificateSigningRequestStatus, true
	case "ReadCoordinationV1NamespacedLease":
		return p.ReadCoordinationV1NamespacedLease, true
	case "ReadCoreV1ComponentStatus":
		return p.ReadCoreV1ComponentStatus, true
	case "ReadCoreV1Namespace":
		return p.ReadCoreV1Namespace, true
	case "ReadCoreV1NamespaceStatus":
		return p.ReadCoreV1NamespaceStatus, true
	case "ReadCoreV1NamespacedConfigMap":
		return p.ReadCoreV1NamespacedConfigMap, true
	case "ReadCoreV1NamespacedEndpoints":
		return p.ReadCoreV1NamespacedEndpoints, true
	case "ReadCoreV1NamespacedEvent":
		return p.ReadCoreV1NamespacedEvent, true
	case "ReadCoreV1NamespacedLimitRange":
		return p.ReadCoreV1NamespacedLimitRange, true
	case "ReadCoreV1NamespacedPersistentVolumeClaim":
		return p.ReadCoreV1NamespacedPersistentVolumeClaim, true
	case "ReadCoreV1NamespacedPersistentVolumeClaimStatus":
		return p.ReadCoreV1NamespacedPersistentVolumeClaimStatus, true
	case "ReadCoreV1NamespacedPod":
		return p.ReadCoreV1NamespacedPod, true
	case "ReadCoreV1NamespacedPodEphemeralcontainers":
		return p.ReadCoreV1NamespacedPodEphemeralcontainers, true
	case "ReadCoreV1NamespacedPodLog":
		return p.ReadCoreV1NamespacedPodLog, true
	case "ReadCoreV1NamespacedPodStatus":
		return p.ReadCoreV1NamespacedPodStatus, true
	case "ReadCoreV1NamespacedPodTemplate":
		return p.ReadCoreV1NamespacedPodTemplate, true
	case "ReadCoreV1NamespacedReplicationController":
		return p.ReadCoreV1NamespacedReplicationController, true
	case "ReadCoreV1NamespacedReplicationControllerScale":
		return p.ReadCoreV1NamespacedReplicationControllerScale, true
	case "ReadCoreV1NamespacedReplicationControllerStatus":
		return p.ReadCoreV1NamespacedReplicationControllerStatus, true
	case "ReadCoreV1NamespacedResourceQuota":
		return p.ReadCoreV1NamespacedResourceQuota, true
	case "ReadCoreV1NamespacedResourceQuotaStatus":
		return p.ReadCoreV1NamespacedResourceQuotaStatus, true
	case "ReadCoreV1NamespacedSecret":
		return p.ReadCoreV1NamespacedSecret, true
	case "ReadCoreV1NamespacedService":
		return p.ReadCoreV1NamespacedService, true
	case "ReadCoreV1NamespacedServiceAccount":
		return p.ReadCoreV1NamespacedServiceAccount, true
	case "ReadCoreV1NamespacedServiceStatus":
		return p.ReadCoreV1NamespacedServiceStatus, true
	case "ReadCoreV1Node":
		return p.ReadCoreV1Node, true
	case "ReadCoreV1NodeStatus":
		return p.ReadCoreV1NodeStatus, true
	case "ReadCoreV1PersistentVolume":
		return p.ReadCoreV1PersistentVolume, true
	case "ReadCoreV1PersistentVolumeStatus":
		return p.ReadCoreV1PersistentVolumeStatus, true
	case "ReadDiscoveryV1NamespacedEndpointSlice":
		return p.ReadDiscoveryV1NamespacedEndpointSlice, true
	case "ReadDiscoveryV1beta1NamespacedEndpointSlice":
		return p.ReadDiscoveryV1beta1NamespacedEndpointSlice, true
	case "ReadEventsV1NamespacedEvent":
		return p.ReadEventsV1NamespacedEvent, true
	case "ReadEventsV1beta1NamespacedEvent":
		return p.ReadEventsV1beta1NamespacedEvent, true
	case "ReadFlowcontrolApiserverV1beta1FlowSchema":
		return p.ReadFlowcontrolApiserverV1beta1FlowSchema, true
	case "ReadFlowcontrolApiserverV1beta1FlowSchemaStatus":
		return p.ReadFlowcontrolApiserverV1beta1FlowSchemaStatus, true
	case "ReadFlowcontrolApiserverV1beta1PriorityLevelConfiguration":
		return p.ReadFlowcontrolApiserverV1beta1PriorityLevelConfiguration, true
	case "ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatus":
		return p.ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatus, true
	case "ReadFlowcontrolApiserverV1beta2FlowSchema":
		return p.ReadFlowcontrolApiserverV1beta2FlowSchema, true
	case "ReadFlowcontrolApiserverV1beta2FlowSchemaStatus":
		return p.ReadFlowcontrolApiserverV1beta2FlowSchemaStatus, true
	case "ReadFlowcontrolApiserverV1beta2PriorityLevelConfiguration":
		return p.ReadFlowcontrolApiserverV1beta2PriorityLevelConfiguration, true
	case "ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatus":
		return p.ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatus, true
	case "ReadInternalApiserverV1alpha1StorageVersion":
		return p.ReadInternalApiserverV1alpha1StorageVersion, true
	case "ReadInternalApiserverV1alpha1StorageVersionStatus":
		return p.ReadInternalApiserverV1alpha1StorageVersionStatus, true
	case "ReadNetworkingV1IngressClass":
		return p.ReadNetworkingV1IngressClass, true
	case "ReadNetworkingV1NamespacedIngress":
		return p.ReadNetworkingV1NamespacedIngress, true
	case "ReadNetworkingV1NamespacedIngressStatus":
		return p.ReadNetworkingV1NamespacedIngressStatus, true
	case "ReadNetworkingV1NamespacedNetworkPolicy":
		return p.ReadNetworkingV1NamespacedNetworkPolicy, true
	case "ReadNodeV1RuntimeClass":
		return p.ReadNodeV1RuntimeClass, true
	case "ReadNodeV1alpha1RuntimeClass":
		return p.ReadNodeV1alpha1RuntimeClass, true
	case "ReadNodeV1beta1RuntimeClass":
		return p.ReadNodeV1beta1RuntimeClass, true
	case "ReadPolicyV1NamespacedPodDisruptionBudget":
		return p.ReadPolicyV1NamespacedPodDisruptionBudget, true
	case "ReadPolicyV1NamespacedPodDisruptionBudgetStatus":
		return p.ReadPolicyV1NamespacedPodDisruptionBudgetStatus, true
	case "ReadPolicyV1beta1NamespacedPodDisruptionBudget":
		return p.ReadPolicyV1beta1NamespacedPodDisruptionBudget, true
	case "ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatus":
		return p.ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatus, true
	case "ReadPolicyV1beta1PodSecurityPolicy":
		return p.ReadPolicyV1beta1PodSecurityPolicy, true
	case "ReadRbacAuthorizationV1ClusterRole":
		return p.ReadRbacAuthorizationV1ClusterRole, true
	case "ReadRbacAuthorizationV1ClusterRoleBinding":
		return p.ReadRbacAuthorizationV1ClusterRoleBinding, true
	case "ReadRbacAuthorizationV1NamespacedRole":
		return p.ReadRbacAuthorizationV1NamespacedRole, true
	case "ReadRbacAuthorizationV1NamespacedRoleBinding":
		return p.ReadRbacAuthorizationV1NamespacedRoleBinding, true
	case "ReadSchedulingV1PriorityClass":
		return p.ReadSchedulingV1PriorityClass, true
	case "ReadStorageV1CSIDriver":
		return p.ReadStorageV1CSIDriver, true
	case "ReadStorageV1CSINode":
		return p.ReadStorageV1CSINode, true
	case "ReadStorageV1StorageClass":
		return p.ReadStorageV1StorageClass, true
	case "ReadStorageV1VolumeAttachment":
		return p.ReadStorageV1VolumeAttachment, true
	case "ReadStorageV1VolumeAttachmentStatus":
		return p.ReadStorageV1VolumeAttachmentStatus, true
	case "ReadStorageV1alpha1NamespacedCSIStorageCapacity":
		return p.ReadStorageV1alpha1NamespacedCSIStorageCapacity, true
	case "ReadStorageV1beta1NamespacedCSIStorageCapacity":
		return p.ReadStorageV1beta1NamespacedCSIStorageCapacity, true
	case "WatchAdmissionregistrationV1MutatingWebhookConfiguration":
		return p.WatchAdmissionregistrationV1MutatingWebhookConfiguration, true
	case "WatchAdmissionregistrationV1MutatingWebhookConfigurationList":
		return p.WatchAdmissionregistrationV1MutatingWebhookConfigurationList, true
	case "WatchAdmissionregistrationV1ValidatingWebhookConfiguration":
		return p.WatchAdmissionregistrationV1ValidatingWebhookConfiguration, true
	case "WatchAdmissionregistrationV1ValidatingWebhookConfigurationList":
		return p.WatchAdmissionregistrationV1ValidatingWebhookConfigurationList, true
	case "WatchApiextensionsV1CustomResourceDefinition":
		return p.WatchApiextensionsV1CustomResourceDefinition, true
	case "WatchApiextensionsV1CustomResourceDefinitionList":
		return p.WatchApiextensionsV1CustomResourceDefinitionList, true
	case "WatchApiregistrationV1APIService":
		return p.WatchApiregistrationV1APIService, true
	case "WatchApiregistrationV1APIServiceList":
		return p.WatchApiregistrationV1APIServiceList, true
	case "WatchAppsV1ControllerRevisionListForAllNamespaces":
		return p.WatchAppsV1ControllerRevisionListForAllNamespaces, true
	case "WatchAppsV1DaemonSetListForAllNamespaces":
		return p.WatchAppsV1DaemonSetListForAllNamespaces, true
	case "WatchAppsV1DeploymentListForAllNamespaces":
		return p.WatchAppsV1DeploymentListForAllNamespaces, true
	case "WatchAppsV1NamespacedControllerRevision":
		return p.WatchAppsV1NamespacedControllerRevision, true
	case "WatchAppsV1NamespacedControllerRevisionList":
		return p.WatchAppsV1NamespacedControllerRevisionList, true
	case "WatchAppsV1NamespacedDaemonSet":
		return p.WatchAppsV1NamespacedDaemonSet, true
	case "WatchAppsV1NamespacedDaemonSetList":
		return p.WatchAppsV1NamespacedDaemonSetList, true
	case "WatchAppsV1NamespacedDeployment":
		return p.WatchAppsV1NamespacedDeployment, true
	case "WatchAppsV1NamespacedDeploymentList":
		return p.WatchAppsV1NamespacedDeploymentList, true
	case "WatchAppsV1NamespacedReplicaSet":
		return p.WatchAppsV1NamespacedReplicaSet, true
	case "WatchAppsV1NamespacedReplicaSetList":
		return p.WatchAppsV1NamespacedReplicaSetList, true
	case "WatchAppsV1NamespacedStatefulSet":
		return p.WatchAppsV1NamespacedStatefulSet, true
	case "WatchAppsV1NamespacedStatefulSetList":
		return p.WatchAppsV1NamespacedStatefulSetList, true
	case "WatchAppsV1ReplicaSetListForAllNamespaces":
		return p.WatchAppsV1ReplicaSetListForAllNamespaces, true
	case "WatchAppsV1StatefulSetListForAllNamespaces":
		return p.WatchAppsV1StatefulSetListForAllNamespaces, true
	case "WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespaces":
		return p.WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespaces, true
	case "WatchAutoscalingV1NamespacedHorizontalPodAutoscaler":
		return p.WatchAutoscalingV1NamespacedHorizontalPodAutoscaler, true
	case "WatchAutoscalingV1NamespacedHorizontalPodAutoscalerList":
		return p.WatchAutoscalingV1NamespacedHorizontalPodAutoscalerList, true
	case "WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespaces":
		return p.WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespaces, true
	case "WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscaler":
		return p.WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscaler, true
	case "WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerList":
		return p.WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerList, true
	case "WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespaces":
		return p.WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespaces, true
	case "WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscaler":
		return p.WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscaler, true
	case "WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerList":
		return p.WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerList, true
	case "WatchBatchV1CronJobListForAllNamespaces":
		return p.WatchBatchV1CronJobListForAllNamespaces, true
	case "WatchBatchV1JobListForAllNamespaces":
		return p.WatchBatchV1JobListForAllNamespaces, true
	case "WatchBatchV1NamespacedCronJob":
		return p.WatchBatchV1NamespacedCronJob, true
	case "WatchBatchV1NamespacedCronJobList":
		return p.WatchBatchV1NamespacedCronJobList, true
	case "WatchBatchV1NamespacedJob":
		return p.WatchBatchV1NamespacedJob, true
	case "WatchBatchV1NamespacedJobList":
		return p.WatchBatchV1NamespacedJobList, true
	case "WatchBatchV1beta1CronJobListForAllNamespaces":
		return p.WatchBatchV1beta1CronJobListForAllNamespaces, true
	case "WatchBatchV1beta1NamespacedCronJob":
		return p.WatchBatchV1beta1NamespacedCronJob, true
	case "WatchBatchV1beta1NamespacedCronJobList":
		return p.WatchBatchV1beta1NamespacedCronJobList, true
	case "WatchCertificatesV1CertificateSigningRequest":
		return p.WatchCertificatesV1CertificateSigningRequest, true
	case "WatchCertificatesV1CertificateSigningRequestList":
		return p.WatchCertificatesV1CertificateSigningRequestList, true
	case "WatchCoordinationV1LeaseListForAllNamespaces":
		return p.WatchCoordinationV1LeaseListForAllNamespaces, true
	case "WatchCoordinationV1NamespacedLease":
		return p.WatchCoordinationV1NamespacedLease, true
	case "WatchCoordinationV1NamespacedLeaseList":
		return p.WatchCoordinationV1NamespacedLeaseList, true
	case "WatchCoreV1ConfigMapListForAllNamespaces":
		return p.WatchCoreV1ConfigMapListForAllNamespaces, true
	case "WatchCoreV1EndpointsListForAllNamespaces":
		return p.WatchCoreV1EndpointsListForAllNamespaces, true
	case "WatchCoreV1EventListForAllNamespaces":
		return p.WatchCoreV1EventListForAllNamespaces, true
	case "WatchCoreV1LimitRangeListForAllNamespaces":
		return p.WatchCoreV1LimitRangeListForAllNamespaces, true
	case "WatchCoreV1Namespace":
		return p.WatchCoreV1Namespace, true
	case "WatchCoreV1NamespaceList":
		return p.WatchCoreV1NamespaceList, true
	case "WatchCoreV1NamespacedConfigMap":
		return p.WatchCoreV1NamespacedConfigMap, true
	case "WatchCoreV1NamespacedConfigMapList":
		return p.WatchCoreV1NamespacedConfigMapList, true
	case "WatchCoreV1NamespacedEndpoints":
		return p.WatchCoreV1NamespacedEndpoints, true
	case "WatchCoreV1NamespacedEndpointsList":
		return p.WatchCoreV1NamespacedEndpointsList, true
	case "WatchCoreV1NamespacedEvent":
		return p.WatchCoreV1NamespacedEvent, true
	case "WatchCoreV1NamespacedEventList":
		return p.WatchCoreV1NamespacedEventList, true
	case "WatchCoreV1NamespacedLimitRange":
		return p.WatchCoreV1NamespacedLimitRange, true
	case "WatchCoreV1NamespacedLimitRangeList":
		return p.WatchCoreV1NamespacedLimitRangeList, true
	case "WatchCoreV1NamespacedPersistentVolumeClaim":
		return p.WatchCoreV1NamespacedPersistentVolumeClaim, true
	case "WatchCoreV1NamespacedPersistentVolumeClaimList":
		return p.WatchCoreV1NamespacedPersistentVolumeClaimList, true
	case "WatchCoreV1NamespacedPod":
		return p.WatchCoreV1NamespacedPod, true
	case "WatchCoreV1NamespacedPodList":
		return p.WatchCoreV1NamespacedPodList, true
	case "WatchCoreV1NamespacedPodTemplate":
		return p.WatchCoreV1NamespacedPodTemplate, true
	case "WatchCoreV1NamespacedPodTemplateList":
		return p.WatchCoreV1NamespacedPodTemplateList, true
	case "WatchCoreV1NamespacedReplicationController":
		return p.WatchCoreV1NamespacedReplicationController, true
	case "WatchCoreV1NamespacedReplicationControllerList":
		return p.WatchCoreV1NamespacedReplicationControllerList, true
	case "WatchCoreV1NamespacedResourceQuota":
		return p.WatchCoreV1NamespacedResourceQuota, true
	case "WatchCoreV1NamespacedResourceQuotaList":
		return p.WatchCoreV1NamespacedResourceQuotaList, true
	case "WatchCoreV1NamespacedSecret":
		return p.WatchCoreV1NamespacedSecret, true
	case "WatchCoreV1NamespacedSecretList":
		return p.WatchCoreV1NamespacedSecretList, true
	case "WatchCoreV1NamespacedService":
		return p.WatchCoreV1NamespacedService, true
	case "WatchCoreV1NamespacedServiceAccount":
		return p.WatchCoreV1NamespacedServiceAccount, true
	case "WatchCoreV1NamespacedServiceAccountList":
		return p.WatchCoreV1NamespacedServiceAccountList, true
	case "WatchCoreV1NamespacedServiceList":
		return p.WatchCoreV1NamespacedServiceList, true
	case "WatchCoreV1Node":
		return p.WatchCoreV1Node, true
	case "WatchCoreV1NodeList":
		return p.WatchCoreV1NodeList, true
	case "WatchCoreV1PersistentVolume":
		return p.WatchCoreV1PersistentVolume, true
	case "WatchCoreV1PersistentVolumeClaimListForAllNamespaces":
		return p.WatchCoreV1PersistentVolumeClaimListForAllNamespaces, true
	case "WatchCoreV1PersistentVolumeList":
		return p.WatchCoreV1PersistentVolumeList, true
	case "WatchCoreV1PodListForAllNamespaces":
		return p.WatchCoreV1PodListForAllNamespaces, true
	case "WatchCoreV1PodTemplateListForAllNamespaces":
		return p.WatchCoreV1PodTemplateListForAllNamespaces, true
	case "WatchCoreV1ReplicationControllerListForAllNamespaces":
		return p.WatchCoreV1ReplicationControllerListForAllNamespaces, true
	case "WatchCoreV1ResourceQuotaListForAllNamespaces":
		return p.WatchCoreV1ResourceQuotaListForAllNamespaces, true
	case "WatchCoreV1SecretListForAllNamespaces":
		return p.WatchCoreV1SecretListForAllNamespaces, true
	case "WatchCoreV1ServiceAccountListForAllNamespaces":
		return p.WatchCoreV1ServiceAccountListForAllNamespaces, true
	case "WatchCoreV1ServiceListForAllNamespaces":
		return p.WatchCoreV1ServiceListForAllNamespaces, true
	case "WatchDiscoveryV1EndpointSliceListForAllNamespaces":
		return p.WatchDiscoveryV1EndpointSliceListForAllNamespaces, true
	case "WatchDiscoveryV1NamespacedEndpointSlice":
		return p.WatchDiscoveryV1NamespacedEndpointSlice, true
	case "WatchDiscoveryV1NamespacedEndpointSliceList":
		return p.WatchDiscoveryV1NamespacedEndpointSliceList, true
	case "WatchDiscoveryV1beta1EndpointSliceListForAllNamespaces":
		return p.WatchDiscoveryV1beta1EndpointSliceListForAllNamespaces, true
	case "WatchDiscoveryV1beta1NamespacedEndpointSlice":
		return p.WatchDiscoveryV1beta1NamespacedEndpointSlice, true
	case "WatchDiscoveryV1beta1NamespacedEndpointSliceList":
		return p.WatchDiscoveryV1beta1NamespacedEndpointSliceList, true
	case "WatchEventsV1EventListForAllNamespaces":
		return p.WatchEventsV1EventListForAllNamespaces, true
	case "WatchEventsV1NamespacedEvent":
		return p.WatchEventsV1NamespacedEvent, true
	case "WatchEventsV1NamespacedEventList":
		return p.WatchEventsV1NamespacedEventList, true
	case "WatchEventsV1beta1EventListForAllNamespaces":
		return p.WatchEventsV1beta1EventListForAllNamespaces, true
	case "WatchEventsV1beta1NamespacedEvent":
		return p.WatchEventsV1beta1NamespacedEvent, true
	case "WatchEventsV1beta1NamespacedEventList":
		return p.WatchEventsV1beta1NamespacedEventList, true
	case "WatchFlowcontrolApiserverV1beta1FlowSchema":
		return p.WatchFlowcontrolApiserverV1beta1FlowSchema, true
	case "WatchFlowcontrolApiserverV1beta1FlowSchemaList":
		return p.WatchFlowcontrolApiserverV1beta1FlowSchemaList, true
	case "WatchFlowcontrolApiserverV1beta1PriorityLevelConfiguration":
		return p.WatchFlowcontrolApiserverV1beta1PriorityLevelConfiguration, true
	case "WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationList":
		return p.WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationList, true
	case "WatchFlowcontrolApiserverV1beta2FlowSchema":
		return p.WatchFlowcontrolApiserverV1beta2FlowSchema, true
	case "WatchFlowcontrolApiserverV1beta2FlowSchemaList":
		return p.WatchFlowcontrolApiserverV1beta2FlowSchemaList, true
	case "WatchFlowcontrolApiserverV1beta2PriorityLevelConfiguration":
		return p.WatchFlowcontrolApiserverV1beta2PriorityLevelConfiguration, true
	case "WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationList":
		return p.WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationList, true
	case "WatchInternalApiserverV1alpha1StorageVersion":
		return p.WatchInternalApiserverV1alpha1StorageVersion, true
	case "WatchInternalApiserverV1alpha1StorageVersionList":
		return p.WatchInternalApiserverV1alpha1StorageVersionList, true
	case "WatchNetworkingV1IngressClass":
		return p.WatchNetworkingV1IngressClass, true
	case "WatchNetworkingV1IngressClassList":
		return p.WatchNetworkingV1IngressClassList, true
	case "WatchNetworkingV1IngressListForAllNamespaces":
		return p.WatchNetworkingV1IngressListForAllNamespaces, true
	case "WatchNetworkingV1NamespacedIngress":
		return p.WatchNetworkingV1NamespacedIngress, true
	case "WatchNetworkingV1NamespacedIngressList":
		return p.WatchNetworkingV1NamespacedIngressList, true
	case "WatchNetworkingV1NamespacedNetworkPolicy":
		return p.WatchNetworkingV1NamespacedNetworkPolicy, true
	case "WatchNetworkingV1NamespacedNetworkPolicyList":
		return p.WatchNetworkingV1NamespacedNetworkPolicyList, true
	case "WatchNetworkingV1NetworkPolicyListForAllNamespaces":
		return p.WatchNetworkingV1NetworkPolicyListForAllNamespaces, true
	case "WatchNodeV1RuntimeClass":
		return p.WatchNodeV1RuntimeClass, true
	case "WatchNodeV1RuntimeClassList":
		return p.WatchNodeV1RuntimeClassList, true
	case "WatchNodeV1alpha1RuntimeClass":
		return p.WatchNodeV1alpha1RuntimeClass, true
	case "WatchNodeV1alpha1RuntimeClassList":
		return p.WatchNodeV1alpha1RuntimeClassList, true
	case "WatchNodeV1beta1RuntimeClass":
		return p.WatchNodeV1beta1RuntimeClass, true
	case "WatchNodeV1beta1RuntimeClassList":
		return p.WatchNodeV1beta1RuntimeClassList, true
	case "WatchPolicyV1NamespacedPodDisruptionBudget":
		return p.WatchPolicyV1NamespacedPodDisruptionBudget, true
	case "WatchPolicyV1NamespacedPodDisruptionBudgetList":
		return p.WatchPolicyV1NamespacedPodDisruptionBudgetList, true
	case "WatchPolicyV1PodDisruptionBudgetListForAllNamespaces":
		return p.WatchPolicyV1PodDisruptionBudgetListForAllNamespaces, true
	case "WatchPolicyV1beta1NamespacedPodDisruptionBudget":
		return p.WatchPolicyV1beta1NamespacedPodDisruptionBudget, true
	case "WatchPolicyV1beta1NamespacedPodDisruptionBudgetList":
		return p.WatchPolicyV1beta1NamespacedPodDisruptionBudgetList, true
	case "WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespaces":
		return p.WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespaces, true
	case "WatchPolicyV1beta1PodSecurityPolicy":
		return p.WatchPolicyV1beta1PodSecurityPolicy, true
	case "WatchPolicyV1beta1PodSecurityPolicyList":
		return p.WatchPolicyV1beta1PodSecurityPolicyList, true
	case "WatchRbacAuthorizationV1ClusterRole":
		return p.WatchRbacAuthorizationV1ClusterRole, true
	case "WatchRbacAuthorizationV1ClusterRoleBinding":
		return p.WatchRbacAuthorizationV1ClusterRoleBinding, true
	case "WatchRbacAuthorizationV1ClusterRoleBindingList":
		return p.WatchRbacAuthorizationV1ClusterRoleBindingList, true
	case "WatchRbacAuthorizationV1ClusterRoleList":
		return p.WatchRbacAuthorizationV1ClusterRoleList, true
	case "WatchRbacAuthorizationV1NamespacedRole":
		return p.WatchRbacAuthorizationV1NamespacedRole, true
	case "WatchRbacAuthorizationV1NamespacedRoleBinding":
		return p.WatchRbacAuthorizationV1NamespacedRoleBinding, true
	case "WatchRbacAuthorizationV1NamespacedRoleBindingList":
		return p.WatchRbacAuthorizationV1NamespacedRoleBindingList, true
	case "WatchRbacAuthorizationV1NamespacedRoleList":
		return p.WatchRbacAuthorizationV1NamespacedRoleList, true
	case "WatchRbacAuthorizationV1RoleBindingListForAllNamespaces":
		return p.WatchRbacAuthorizationV1RoleBindingListForAllNamespaces, true
	case "WatchRbacAuthorizationV1RoleListForAllNamespaces":
		return p.WatchRbacAuthorizationV1RoleListForAllNamespaces, true
	case "WatchSchedulingV1PriorityClass":
		return p.WatchSchedulingV1PriorityClass, true
	case "WatchSchedulingV1PriorityClassList":
		return p.WatchSchedulingV1PriorityClassList, true
	case "WatchStorageV1CSIDriver":
		return p.WatchStorageV1CSIDriver, true
	case "WatchStorageV1CSIDriverList":
		return p.WatchStorageV1CSIDriverList, true
	case "WatchStorageV1CSINode":
		return p.WatchStorageV1CSINode, true
	case "WatchStorageV1CSINodeList":
		return p.WatchStorageV1CSINodeList, true
	case "WatchStorageV1StorageClass":
		return p.WatchStorageV1StorageClass, true
	case "WatchStorageV1StorageClassList":
		return p.WatchStorageV1StorageClassList, true
	case "WatchStorageV1VolumeAttachment":
		return p.WatchStorageV1VolumeAttachment, true
	case "WatchStorageV1VolumeAttachmentList":
		return p.WatchStorageV1VolumeAttachmentList, true
	case "WatchStorageV1alpha1CSIStorageCapacityListForAllNamespaces":
		return p.WatchStorageV1alpha1CSIStorageCapacityListForAllNamespaces, true
	case "WatchStorageV1alpha1NamespacedCSIStorageCapacity":
		return p.WatchStorageV1alpha1NamespacedCSIStorageCapacity, true
	case "WatchStorageV1alpha1NamespacedCSIStorageCapacityList":
		return p.WatchStorageV1alpha1NamespacedCSIStorageCapacityList, true
	case "WatchStorageV1beta1CSIStorageCapacityListForAllNamespaces":
		return p.WatchStorageV1beta1CSIStorageCapacityListForAllNamespaces, true
	case "WatchStorageV1beta1NamespacedCSIStorageCapacity":
		return p.WatchStorageV1beta1NamespacedCSIStorageCapacity, true
	case "WatchStorageV1beta1NamespacedCSIStorageCapacityList":
		return p.WatchStorageV1beta1NamespacedCSIStorageCapacityList, true
	default:
		return op, false
	}
}

// FindByOperationID finds operation by operationId.
func (p paths) FindByOperationID(operationID string) (op ogenreflect.RuntimeOperation, _ bool) {
	switch operationID {
	case "connectCoreV1DeleteNamespacedPodProxy":
		return p.ConnectCoreV1DeleteNamespacedPodProxy, true
	case "connectCoreV1DeleteNamespacedPodProxyWithPath":
		return p.ConnectCoreV1DeleteNamespacedPodProxyWithPath, true
	case "connectCoreV1DeleteNamespacedServiceProxy":
		return p.ConnectCoreV1DeleteNamespacedServiceProxy, true
	case "connectCoreV1DeleteNamespacedServiceProxyWithPath":
		return p.ConnectCoreV1DeleteNamespacedServiceProxyWithPath, true
	case "connectCoreV1DeleteNodeProxy":
		return p.ConnectCoreV1DeleteNodeProxy, true
	case "connectCoreV1DeleteNodeProxyWithPath":
		return p.ConnectCoreV1DeleteNodeProxyWithPath, true
	case "connectCoreV1GetNamespacedPodAttach":
		return p.ConnectCoreV1GetNamespacedPodAttach, true
	case "connectCoreV1GetNamespacedPodExec":
		return p.ConnectCoreV1GetNamespacedPodExec, true
	case "connectCoreV1GetNamespacedPodPortforward":
		return p.ConnectCoreV1GetNamespacedPodPortforward, true
	case "connectCoreV1GetNamespacedPodProxy":
		return p.ConnectCoreV1GetNamespacedPodProxy, true
	case "connectCoreV1GetNamespacedPodProxyWithPath":
		return p.ConnectCoreV1GetNamespacedPodProxyWithPath, true
	case "connectCoreV1GetNamespacedServiceProxy":
		return p.ConnectCoreV1GetNamespacedServiceProxy, true
	case "connectCoreV1GetNamespacedServiceProxyWithPath":
		return p.ConnectCoreV1GetNamespacedServiceProxyWithPath, true
	case "connectCoreV1GetNodeProxy":
		return p.ConnectCoreV1GetNodeProxy, true
	case "connectCoreV1GetNodeProxyWithPath":
		return p.ConnectCoreV1GetNodeProxyWithPath, true
	case "connectCoreV1HeadNamespacedPodProxy":
		return p.ConnectCoreV1HeadNamespacedPodProxy, true
	case "connectCoreV1HeadNamespacedPodProxyWithPath":
		return p.ConnectCoreV1HeadNamespacedPodProxyWithPath, true
	case "connectCoreV1HeadNamespacedServiceProxy":
		return p.ConnectCoreV1HeadNamespacedServiceProxy, true
	case "connectCoreV1HeadNamespacedServiceProxyWithPath":
		return p.ConnectCoreV1HeadNamespacedServiceProxyWithPath, true
	case "connectCoreV1HeadNodeProxy":
		return p.ConnectCoreV1HeadNodeProxy, true
	case "connectCoreV1HeadNodeProxyWithPath":
		return p.ConnectCoreV1HeadNodeProxyWithPath, true
	case "connectCoreV1OptionsNamespacedPodProxy":
		return p.ConnectCoreV1OptionsNamespacedPodProxy, true
	case "connectCoreV1OptionsNamespacedPodProxyWithPath":
		return p.ConnectCoreV1OptionsNamespacedPodProxyWithPath, true
	case "connectCoreV1OptionsNamespacedServiceProxy":
		return p.ConnectCoreV1OptionsNamespacedServiceProxy, true
	case "connectCoreV1OptionsNamespacedServiceProxyWithPath":
		return p.ConnectCoreV1OptionsNamespacedServiceProxyWithPath, true
	case "connectCoreV1OptionsNodeProxy":
		return p.ConnectCoreV1OptionsNodeProxy, true
	case "connectCoreV1OptionsNodeProxyWithPath":
		return p.ConnectCoreV1OptionsNodeProxyWithPath, true
	case "connectCoreV1PatchNamespacedPodProxy":
		return p.ConnectCoreV1PatchNamespacedPodProxy, true
	case "connectCoreV1PatchNamespacedPodProxyWithPath":
		return p.ConnectCoreV1PatchNamespacedPodProxyWithPath, true
	case "connectCoreV1PatchNamespacedServiceProxy":
		return p.ConnectCoreV1PatchNamespacedServiceProxy, true
	case "connectCoreV1PatchNamespacedServiceProxyWithPath":
		return p.ConnectCoreV1PatchNamespacedServiceProxyWithPath, true
	case "connectCoreV1PatchNodeProxy":
		return p.ConnectCoreV1PatchNodeProxy, true
	case "connectCoreV1PatchNodeProxyWithPath":
		return p.ConnectCoreV1PatchNodeProxyWithPath, true
	case "connectCoreV1PostNamespacedPodAttach":
		return p.ConnectCoreV1PostNamespacedPodAttach, true
	case "connectCoreV1PostNamespacedPodExec":
		return p.ConnectCoreV1PostNamespacedPodExec, true
	case "connectCoreV1PostNamespacedPodPortforward":
		return p.ConnectCoreV1PostNamespacedPodPortforward, true
	case "connectCoreV1PostNamespacedPodProxy":
		return p.ConnectCoreV1PostNamespacedPodProxy, true
	case "connectCoreV1PostNamespacedPodProxyWithPath":
		return p.ConnectCoreV1PostNamespacedPodProxyWithPath, true
	case "connectCoreV1PostNamespacedServiceProxy":
		return p.ConnectCoreV1PostNamespacedServiceProxy, true
	case "connectCoreV1PostNamespacedServiceProxyWithPath":
		return p.ConnectCoreV1PostNamespacedServiceProxyWithPath, true
	case "connectCoreV1PostNodeProxy":
		return p.ConnectCoreV1PostNodeProxy, true
	case "connectCoreV1PostNodeProxyWithPath":
		return p.ConnectCoreV1PostNodeProxyWithPath, true
	case "connectCoreV1PutNamespacedPodProxy":
		return p.ConnectCoreV1PutNamespacedPodProxy, true
	case "connectCoreV1PutNamespacedPodProxyWithPath":
		return p.ConnectCoreV1PutNamespacedPodProxyWithPath, true
	case "connectCoreV1PutNamespacedServiceProxy":
		return p.ConnectCoreV1PutNamespacedServiceProxy, true
	case "connectCoreV1PutNamespacedServiceProxyWithPath":
		return p.ConnectCoreV1PutNamespacedServiceProxyWithPath, true
	case "connectCoreV1PutNodeProxy":
		return p.ConnectCoreV1PutNodeProxy, true
	case "connectCoreV1PutNodeProxyWithPath":
		return p.ConnectCoreV1PutNodeProxyWithPath, true
	case "getAPIVersions":
		return p.GetAPIVersions, true
	case "getAdmissionregistrationAPIGroup":
		return p.GetAdmissionregistrationAPIGroup, true
	case "getAdmissionregistrationV1APIResources":
		return p.GetAdmissionregistrationV1APIResources, true
	case "getApiextensionsAPIGroup":
		return p.GetApiextensionsAPIGroup, true
	case "getApiextensionsV1APIResources":
		return p.GetApiextensionsV1APIResources, true
	case "getApiregistrationAPIGroup":
		return p.GetApiregistrationAPIGroup, true
	case "getApiregistrationV1APIResources":
		return p.GetApiregistrationV1APIResources, true
	case "getAppsAPIGroup":
		return p.GetAppsAPIGroup, true
	case "getAppsV1APIResources":
		return p.GetAppsV1APIResources, true
	case "getAuthenticationAPIGroup":
		return p.GetAuthenticationAPIGroup, true
	case "getAuthenticationV1APIResources":
		return p.GetAuthenticationV1APIResources, true
	case "getAuthorizationAPIGroup":
		return p.GetAuthorizationAPIGroup, true
	case "getAuthorizationV1APIResources":
		return p.GetAuthorizationV1APIResources, true
	case "getAutoscalingAPIGroup":
		return p.GetAutoscalingAPIGroup, true
	case "getAutoscalingV1APIResources":
		return p.GetAutoscalingV1APIResources, true
	case "getAutoscalingV2beta1APIResources":
		return p.GetAutoscalingV2beta1APIResources, true
	case "getAutoscalingV2beta2APIResources":
		return p.GetAutoscalingV2beta2APIResources, true
	case "getBatchAPIGroup":
		return p.GetBatchAPIGroup, true
	case "getBatchV1APIResources":
		return p.GetBatchV1APIResources, true
	case "getBatchV1beta1APIResources":
		return p.GetBatchV1beta1APIResources, true
	case "getCertificatesAPIGroup":
		return p.GetCertificatesAPIGroup, true
	case "getCertificatesV1APIResources":
		return p.GetCertificatesV1APIResources, true
	case "getCodeVersion":
		return p.GetCodeVersion, true
	case "getCoordinationAPIGroup":
		return p.GetCoordinationAPIGroup, true
	case "getCoordinationV1APIResources":
		return p.GetCoordinationV1APIResources, true
	case "getCoreAPIVersions":
		return p.GetCoreAPIVersions, true
	case "getCoreV1APIResources":
		return p.GetCoreV1APIResources, true
	case "getDiscoveryAPIGroup":
		return p.GetDiscoveryAPIGroup, true
	case "getDiscoveryV1APIResources":
		return p.GetDiscoveryV1APIResources, true
	case "getDiscoveryV1beta1APIResources":
		return p.GetDiscoveryV1beta1APIResources, true
	case "getEventsAPIGroup":
		return p.GetEventsAPIGroup, true
	case "getEventsV1APIResources":
		return p.GetEventsV1APIResources, true
	case "getEventsV1beta1APIResources":
		return p.GetEventsV1beta1APIResources, true
	case "getFlowcontrolApiserverAPIGroup":
		return p.GetFlowcontrolApiserverAPIGroup, true
	case "getFlowcontrolApiserverV1beta1APIResources":
		return p.GetFlowcontrolApiserverV1beta1APIResources, true
	case "getFlowcontrolApiserverV1beta2APIResources":
		return p.GetFlowcontrolApiserverV1beta2APIResources, true
	case "getInternalApiserverAPIGroup":
		return p.GetInternalApiserverAPIGroup, true
	case "getInternalApiserverV1alpha1APIResources":
		return p.GetInternalApiserverV1alpha1APIResources, true
	case "getNetworkingAPIGroup":
		return p.GetNetworkingAPIGroup, true
	case "getNetworkingV1APIResources":
		return p.GetNetworkingV1APIResources, true
	case "getNodeAPIGroup":
		return p.GetNodeAPIGroup, true
	case "getNodeV1APIResources":
		return p.GetNodeV1APIResources, true
	case "getNodeV1alpha1APIResources":
		return p.GetNodeV1alpha1APIResources, true
	case "getNodeV1beta1APIResources":
		return p.GetNodeV1beta1APIResources, true
	case "getPolicyAPIGroup":
		return p.GetPolicyAPIGroup, true
	case "getPolicyV1APIResources":
		return p.GetPolicyV1APIResources, true
	case "getPolicyV1beta1APIResources":
		return p.GetPolicyV1beta1APIResources, true
	case "getRbacAuthorizationAPIGroup":
		return p.GetRbacAuthorizationAPIGroup, true
	case "getRbacAuthorizationV1APIResources":
		return p.GetRbacAuthorizationV1APIResources, true
	case "getSchedulingAPIGroup":
		return p.GetSchedulingAPIGroup, true
	case "getSchedulingV1APIResources":
		return p.GetSchedulingV1APIResources, true
	case "getServiceAccountIssuerOpenIDConfiguration":
		return p.GetServiceAccountIssuerOpenIDConfiguration, true
	case "getServiceAccountIssuerOpenIDKeyset":
		return p.GetServiceAccountIssuerOpenIDKeyset, true
	case "getStorageAPIGroup":
		return p.GetStorageAPIGroup, true
	case "getStorageV1APIResources":
		return p.GetStorageV1APIResources, true
	case "getStorageV1alpha1APIResources":
		return p.GetStorageV1alpha1APIResources, true
	case "getStorageV1beta1APIResources":
		return p.GetStorageV1beta1APIResources, true
	case "listAdmissionregistrationV1MutatingWebhookConfiguration":
		return p.ListAdmissionregistrationV1MutatingWebhookConfiguration, true
	case "listAdmissionregistrationV1ValidatingWebhookConfiguration":
		return p.ListAdmissionregistrationV1ValidatingWebhookConfiguration, true
	case "listApiextensionsV1CustomResourceDefinition":
		return p.ListApiextensionsV1CustomResourceDefinition, true
	case "listApiregistrationV1APIService":
		return p.ListApiregistrationV1APIService, true
	case "listAppsV1ControllerRevisionForAllNamespaces":
		return p.ListAppsV1ControllerRevisionForAllNamespaces, true
	case "listAppsV1DaemonSetForAllNamespaces":
		return p.ListAppsV1DaemonSetForAllNamespaces, true
	case "listAppsV1DeploymentForAllNamespaces":
		return p.ListAppsV1DeploymentForAllNamespaces, true
	case "listAppsV1NamespacedControllerRevision":
		return p.ListAppsV1NamespacedControllerRevision, true
	case "listAppsV1NamespacedDaemonSet":
		return p.ListAppsV1NamespacedDaemonSet, true
	case "listAppsV1NamespacedDeployment":
		return p.ListAppsV1NamespacedDeployment, true
	case "listAppsV1NamespacedReplicaSet":
		return p.ListAppsV1NamespacedReplicaSet, true
	case "listAppsV1NamespacedStatefulSet":
		return p.ListAppsV1NamespacedStatefulSet, true
	case "listAppsV1ReplicaSetForAllNamespaces":
		return p.ListAppsV1ReplicaSetForAllNamespaces, true
	case "listAppsV1StatefulSetForAllNamespaces":
		return p.ListAppsV1StatefulSetForAllNamespaces, true
	case "listAutoscalingV1HorizontalPodAutoscalerForAllNamespaces":
		return p.ListAutoscalingV1HorizontalPodAutoscalerForAllNamespaces, true
	case "listAutoscalingV1NamespacedHorizontalPodAutoscaler":
		return p.ListAutoscalingV1NamespacedHorizontalPodAutoscaler, true
	case "listAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespaces":
		return p.ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespaces, true
	case "listAutoscalingV2beta1NamespacedHorizontalPodAutoscaler":
		return p.ListAutoscalingV2beta1NamespacedHorizontalPodAutoscaler, true
	case "listAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespaces":
		return p.ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespaces, true
	case "listAutoscalingV2beta2NamespacedHorizontalPodAutoscaler":
		return p.ListAutoscalingV2beta2NamespacedHorizontalPodAutoscaler, true
	case "listBatchV1CronJobForAllNamespaces":
		return p.ListBatchV1CronJobForAllNamespaces, true
	case "listBatchV1JobForAllNamespaces":
		return p.ListBatchV1JobForAllNamespaces, true
	case "listBatchV1NamespacedCronJob":
		return p.ListBatchV1NamespacedCronJob, true
	case "listBatchV1NamespacedJob":
		return p.ListBatchV1NamespacedJob, true
	case "listBatchV1beta1CronJobForAllNamespaces":
		return p.ListBatchV1beta1CronJobForAllNamespaces, true
	case "listBatchV1beta1NamespacedCronJob":
		return p.ListBatchV1beta1NamespacedCronJob, true
	case "listCertificatesV1CertificateSigningRequest":
		return p.ListCertificatesV1CertificateSigningRequest, true
	case "listCoordinationV1LeaseForAllNamespaces":
		return p.ListCoordinationV1LeaseForAllNamespaces, true
	case "listCoordinationV1NamespacedLease":
		return p.ListCoordinationV1NamespacedLease, true
	case "listCoreV1ComponentStatus":
		return p.ListCoreV1ComponentStatus, true
	case "listCoreV1ConfigMapForAllNamespaces":
		return p.ListCoreV1ConfigMapForAllNamespaces, true
	case "listCoreV1EndpointsForAllNamespaces":
		return p.ListCoreV1EndpointsForAllNamespaces, true
	case "listCoreV1EventForAllNamespaces":
		return p.ListCoreV1EventForAllNamespaces, true
	case "listCoreV1LimitRangeForAllNamespaces":
		return p.ListCoreV1LimitRangeForAllNamespaces, true
	case "listCoreV1Namespace":
		return p.ListCoreV1Namespace, true
	case "listCoreV1NamespacedConfigMap":
		return p.ListCoreV1NamespacedConfigMap, true
	case "listCoreV1NamespacedEndpoints":
		return p.ListCoreV1NamespacedEndpoints, true
	case "listCoreV1NamespacedEvent":
		return p.ListCoreV1NamespacedEvent, true
	case "listCoreV1NamespacedLimitRange":
		return p.ListCoreV1NamespacedLimitRange, true
	case "listCoreV1NamespacedPersistentVolumeClaim":
		return p.ListCoreV1NamespacedPersistentVolumeClaim, true
	case "listCoreV1NamespacedPod":
		return p.ListCoreV1NamespacedPod, true
	case "listCoreV1NamespacedPodTemplate":
		return p.ListCoreV1NamespacedPodTemplate, true
	case "listCoreV1NamespacedReplicationController":
		return p.ListCoreV1NamespacedReplicationController, true
	case "listCoreV1NamespacedResourceQuota":
		return p.ListCoreV1NamespacedResourceQuota, true
	case "listCoreV1NamespacedSecret":
		return p.ListCoreV1NamespacedSecret, true
	case "listCoreV1NamespacedService":
		return p.ListCoreV1NamespacedService, true
	case "listCoreV1NamespacedServiceAccount":
		return p.ListCoreV1NamespacedServiceAccount, true
	case "listCoreV1Node":
		return p.ListCoreV1Node, true
	case "listCoreV1PersistentVolume":
		return p.ListCoreV1PersistentVolume, true
	case "listCoreV1PersistentVolumeClaimForAllNamespaces":
		return p.ListCoreV1PersistentVolumeClaimForAllNamespaces, true
	case "listCoreV1PodForAllNamespaces":
		return p.ListCoreV1PodForAllNamespaces, true
	case "listCoreV1PodTemplateForAllNamespaces":
		return p.ListCoreV1PodTemplateForAllNamespaces, true
	case "listCoreV1ReplicationControllerForAllNamespaces":
		return p.ListCoreV1ReplicationControllerForAllNamespaces, true
	case "listCoreV1ResourceQuotaForAllNamespaces":
		return p.ListCoreV1ResourceQuotaForAllNamespaces, true
	case "listCoreV1SecretForAllNamespaces":
		return p.ListCoreV1SecretForAllNamespaces, true
	case "listCoreV1ServiceAccountForAllNamespaces":
		return p.ListCoreV1ServiceAccountForAllNamespaces, true
	case "listCoreV1ServiceForAllNamespaces":
		return p.ListCoreV1ServiceForAllNamespaces, true
	case "listDiscoveryV1EndpointSliceForAllNamespaces":
		return p.ListDiscoveryV1EndpointSliceForAllNamespaces, true
	case "listDiscoveryV1NamespacedEndpointSlice":
		return p.ListDiscoveryV1NamespacedEndpointSlice, true
	case "listDiscoveryV1beta1EndpointSliceForAllNamespaces":
		return p.ListDiscoveryV1beta1EndpointSliceForAllNamespaces, true
	case "listDiscoveryV1beta1NamespacedEndpointSlice":
		return p.ListDiscoveryV1beta1NamespacedEndpointSlice, true
	case "listEventsV1EventForAllNamespaces":
		return p.ListEventsV1EventForAllNamespaces, true
	case "listEventsV1NamespacedEvent":
		return p.ListEventsV1NamespacedEvent, true
	case "listEventsV1beta1EventForAllNamespaces":
		return p.ListEventsV1beta1EventForAllNamespaces, true
	case "listEventsV1beta1NamespacedEvent":
		return p.ListEventsV1beta1NamespacedEvent, true
	case "listFlowcontrolApiserverV1beta1FlowSchema":
		return p.ListFlowcontrolApiserverV1beta1FlowSchema, true
	case "listFlowcontrolApiserverV1beta1PriorityLevelConfiguration":
		return p.ListFlowcontrolApiserverV1beta1PriorityLevelConfiguration, true
	case "listFlowcontrolApiserverV1beta2FlowSchema":
		return p.ListFlowcontrolApiserverV1beta2FlowSchema, true
	case "listFlowcontrolApiserverV1beta2PriorityLevelConfiguration":
		return p.ListFlowcontrolApiserverV1beta2PriorityLevelConfiguration, true
	case "listInternalApiserverV1alpha1StorageVersion":
		return p.ListInternalApiserverV1alpha1StorageVersion, true
	case "listNetworkingV1IngressClass":
		return p.ListNetworkingV1IngressClass, true
	case "listNetworkingV1IngressForAllNamespaces":
		return p.ListNetworkingV1IngressForAllNamespaces, true
	case "listNetworkingV1NamespacedIngress":
		return p.ListNetworkingV1NamespacedIngress, true
	case "listNetworkingV1NamespacedNetworkPolicy":
		return p.ListNetworkingV1NamespacedNetworkPolicy, true
	case "listNetworkingV1NetworkPolicyForAllNamespaces":
		return p.ListNetworkingV1NetworkPolicyForAllNamespaces, true
	case "listNodeV1RuntimeClass":
		return p.ListNodeV1RuntimeClass, true
	case "listNodeV1alpha1RuntimeClass":
		return p.ListNodeV1alpha1RuntimeClass, true
	case "listNodeV1beta1RuntimeClass":
		return p.ListNodeV1beta1RuntimeClass, true
	case "listPolicyV1NamespacedPodDisruptionBudget":
		return p.ListPolicyV1NamespacedPodDisruptionBudget, true
	case "listPolicyV1PodDisruptionBudgetForAllNamespaces":
		return p.ListPolicyV1PodDisruptionBudgetForAllNamespaces, true
	case "listPolicyV1beta1NamespacedPodDisruptionBudget":
		return p.ListPolicyV1beta1NamespacedPodDisruptionBudget, true
	case "listPolicyV1beta1PodDisruptionBudgetForAllNamespaces":
		return p.ListPolicyV1beta1PodDisruptionBudgetForAllNamespaces, true
	case "listPolicyV1beta1PodSecurityPolicy":
		return p.ListPolicyV1beta1PodSecurityPolicy, true
	case "listRbacAuthorizationV1ClusterRole":
		return p.ListRbacAuthorizationV1ClusterRole, true
	case "listRbacAuthorizationV1ClusterRoleBinding":
		return p.ListRbacAuthorizationV1ClusterRoleBinding, true
	case "listRbacAuthorizationV1NamespacedRole":
		return p.ListRbacAuthorizationV1NamespacedRole, true
	case "listRbacAuthorizationV1NamespacedRoleBinding":
		return p.ListRbacAuthorizationV1NamespacedRoleBinding, true
	case "listRbacAuthorizationV1RoleBindingForAllNamespaces":
		return p.ListRbacAuthorizationV1RoleBindingForAllNamespaces, true
	case "listRbacAuthorizationV1RoleForAllNamespaces":
		return p.ListRbacAuthorizationV1RoleForAllNamespaces, true
	case "listSchedulingV1PriorityClass":
		return p.ListSchedulingV1PriorityClass, true
	case "listStorageV1CSIDriver":
		return p.ListStorageV1CSIDriver, true
	case "listStorageV1CSINode":
		return p.ListStorageV1CSINode, true
	case "listStorageV1StorageClass":
		return p.ListStorageV1StorageClass, true
	case "listStorageV1VolumeAttachment":
		return p.ListStorageV1VolumeAttachment, true
	case "listStorageV1alpha1CSIStorageCapacityForAllNamespaces":
		return p.ListStorageV1alpha1CSIStorageCapacityForAllNamespaces, true
	case "listStorageV1alpha1NamespacedCSIStorageCapacity":
		return p.ListStorageV1alpha1NamespacedCSIStorageCapacity, true
	case "listStorageV1beta1CSIStorageCapacityForAllNamespaces":
		return p.ListStorageV1beta1CSIStorageCapacityForAllNamespaces, true
	case "listStorageV1beta1NamespacedCSIStorageCapacity":
		return p.ListStorageV1beta1NamespacedCSIStorageCapacity, true
	case "logFileHandler":
		return p.LogFileHandler, true
	case "logFileListHandler":
		return p.LogFileListHandler, true
	case "readAdmissionregistrationV1MutatingWebhookConfiguration":
		return p.ReadAdmissionregistrationV1MutatingWebhookConfiguration, true
	case "readAdmissionregistrationV1ValidatingWebhookConfiguration":
		return p.ReadAdmissionregistrationV1ValidatingWebhookConfiguration, true
	case "readApiextensionsV1CustomResourceDefinition":
		return p.ReadApiextensionsV1CustomResourceDefinition, true
	case "readApiextensionsV1CustomResourceDefinitionStatus":
		return p.ReadApiextensionsV1CustomResourceDefinitionStatus, true
	case "readApiregistrationV1APIService":
		return p.ReadApiregistrationV1APIService, true
	case "readApiregistrationV1APIServiceStatus":
		return p.ReadApiregistrationV1APIServiceStatus, true
	case "readAppsV1NamespacedControllerRevision":
		return p.ReadAppsV1NamespacedControllerRevision, true
	case "readAppsV1NamespacedDaemonSet":
		return p.ReadAppsV1NamespacedDaemonSet, true
	case "readAppsV1NamespacedDaemonSetStatus":
		return p.ReadAppsV1NamespacedDaemonSetStatus, true
	case "readAppsV1NamespacedDeployment":
		return p.ReadAppsV1NamespacedDeployment, true
	case "readAppsV1NamespacedDeploymentScale":
		return p.ReadAppsV1NamespacedDeploymentScale, true
	case "readAppsV1NamespacedDeploymentStatus":
		return p.ReadAppsV1NamespacedDeploymentStatus, true
	case "readAppsV1NamespacedReplicaSet":
		return p.ReadAppsV1NamespacedReplicaSet, true
	case "readAppsV1NamespacedReplicaSetScale":
		return p.ReadAppsV1NamespacedReplicaSetScale, true
	case "readAppsV1NamespacedReplicaSetStatus":
		return p.ReadAppsV1NamespacedReplicaSetStatus, true
	case "readAppsV1NamespacedStatefulSet":
		return p.ReadAppsV1NamespacedStatefulSet, true
	case "readAppsV1NamespacedStatefulSetScale":
		return p.ReadAppsV1NamespacedStatefulSetScale, true
	case "readAppsV1NamespacedStatefulSetStatus":
		return p.ReadAppsV1NamespacedStatefulSetStatus, true
	case "readAutoscalingV1NamespacedHorizontalPodAutoscaler":
		return p.ReadAutoscalingV1NamespacedHorizontalPodAutoscaler, true
	case "readAutoscalingV1NamespacedHorizontalPodAutoscalerStatus":
		return p.ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatus, true
	case "readAutoscalingV2beta1NamespacedHorizontalPodAutoscaler":
		return p.ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscaler, true
	case "readAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus":
		return p.ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus, true
	case "readAutoscalingV2beta2NamespacedHorizontalPodAutoscaler":
		return p.ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscaler, true
	case "readAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus":
		return p.ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus, true
	case "readBatchV1NamespacedCronJob":
		return p.ReadBatchV1NamespacedCronJob, true
	case "readBatchV1NamespacedCronJobStatus":
		return p.ReadBatchV1NamespacedCronJobStatus, true
	case "readBatchV1NamespacedJob":
		return p.ReadBatchV1NamespacedJob, true
	case "readBatchV1NamespacedJobStatus":
		return p.ReadBatchV1NamespacedJobStatus, true
	case "readBatchV1beta1NamespacedCronJob":
		return p.ReadBatchV1beta1NamespacedCronJob, true
	case "readBatchV1beta1NamespacedCronJobStatus":
		return p.ReadBatchV1beta1NamespacedCronJobStatus, true
	case "readCertificatesV1CertificateSigningRequest":
		return p.ReadCertificatesV1CertificateSigningRequest, true
	case "readCertificatesV1CertificateSigningRequestApproval":
		return p.ReadCertificatesV1CertificateSigningRequestApproval, true
	case "readCertificatesV1CertificateSigningRequestStatus":
		return p.ReadCertificatesV1CertificateSigningRequestStatus, true
	case "readCoordinationV1NamespacedLease":
		return p.ReadCoordinationV1NamespacedLease, true
	case "readCoreV1ComponentStatus":
		return p.ReadCoreV1ComponentStatus, true
	case "readCoreV1Namespace":
		return p.ReadCoreV1Namespace, true
	case "readCoreV1NamespaceStatus":
		return p.ReadCoreV1NamespaceStatus, true
	case "readCoreV1NamespacedConfigMap":
		return p.ReadCoreV1NamespacedConfigMap, true
	case "readCoreV1NamespacedEndpoints":
		return p.ReadCoreV1NamespacedEndpoints, true
	case "readCoreV1NamespacedEvent":
		return p.ReadCoreV1NamespacedEvent, true
	case "readCoreV1NamespacedLimitRange":
		return p.ReadCoreV1NamespacedLimitRange, true
	case "readCoreV1NamespacedPersistentVolumeClaim":
		return p.ReadCoreV1NamespacedPersistentVolumeClaim, true
	case "readCoreV1NamespacedPersistentVolumeClaimStatus":
		return p.ReadCoreV1NamespacedPersistentVolumeClaimStatus, true
	case "readCoreV1NamespacedPod":
		return p.ReadCoreV1NamespacedPod, true
	case "readCoreV1NamespacedPodEphemeralcontainers":
		return p.ReadCoreV1NamespacedPodEphemeralcontainers, true
	case "readCoreV1NamespacedPodLog":
		return p.ReadCoreV1NamespacedPodLog, true
	case "readCoreV1NamespacedPodStatus":
		return p.ReadCoreV1NamespacedPodStatus, true
	case "readCoreV1NamespacedPodTemplate":
		return p.ReadCoreV1NamespacedPodTemplate, true
	case "readCoreV1NamespacedReplicationController":
		return p.ReadCoreV1NamespacedReplicationController, true
	case "readCoreV1NamespacedReplicationControllerScale":
		return p.ReadCoreV1NamespacedReplicationControllerScale, true
	case "readCoreV1NamespacedReplicationControllerStatus":
		return p.ReadCoreV1NamespacedReplicationControllerStatus, true
	case "readCoreV1NamespacedResourceQuota":
		return p.ReadCoreV1NamespacedResourceQuota, true
	case "readCoreV1NamespacedResourceQuotaStatus":
		return p.ReadCoreV1NamespacedResourceQuotaStatus, true
	case "readCoreV1NamespacedSecret":
		return p.ReadCoreV1NamespacedSecret, true
	case "readCoreV1NamespacedService":
		return p.ReadCoreV1NamespacedService, true
	case "readCoreV1NamespacedServiceAccount":
		return p.ReadCoreV1NamespacedServiceAccount, true
	case "readCoreV1NamespacedServiceStatus":
		return p.ReadCoreV1NamespacedServiceStatus, true
	case "readCoreV1Node":
		return p.ReadCoreV1Node, true
	case "readCoreV1NodeStatus":
		return p.ReadCoreV1NodeStatus, true
	case "readCoreV1PersistentVolume":
		return p.ReadCoreV1PersistentVolume, true
	case "readCoreV1PersistentVolumeStatus":
		return p.ReadCoreV1PersistentVolumeStatus, true
	case "readDiscoveryV1NamespacedEndpointSlice":
		return p.ReadDiscoveryV1NamespacedEndpointSlice, true
	case "readDiscoveryV1beta1NamespacedEndpointSlice":
		return p.ReadDiscoveryV1beta1NamespacedEndpointSlice, true
	case "readEventsV1NamespacedEvent":
		return p.ReadEventsV1NamespacedEvent, true
	case "readEventsV1beta1NamespacedEvent":
		return p.ReadEventsV1beta1NamespacedEvent, true
	case "readFlowcontrolApiserverV1beta1FlowSchema":
		return p.ReadFlowcontrolApiserverV1beta1FlowSchema, true
	case "readFlowcontrolApiserverV1beta1FlowSchemaStatus":
		return p.ReadFlowcontrolApiserverV1beta1FlowSchemaStatus, true
	case "readFlowcontrolApiserverV1beta1PriorityLevelConfiguration":
		return p.ReadFlowcontrolApiserverV1beta1PriorityLevelConfiguration, true
	case "readFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatus":
		return p.ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatus, true
	case "readFlowcontrolApiserverV1beta2FlowSchema":
		return p.ReadFlowcontrolApiserverV1beta2FlowSchema, true
	case "readFlowcontrolApiserverV1beta2FlowSchemaStatus":
		return p.ReadFlowcontrolApiserverV1beta2FlowSchemaStatus, true
	case "readFlowcontrolApiserverV1beta2PriorityLevelConfiguration":
		return p.ReadFlowcontrolApiserverV1beta2PriorityLevelConfiguration, true
	case "readFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatus":
		return p.ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatus, true
	case "readInternalApiserverV1alpha1StorageVersion":
		return p.ReadInternalApiserverV1alpha1StorageVersion, true
	case "readInternalApiserverV1alpha1StorageVersionStatus":
		return p.ReadInternalApiserverV1alpha1StorageVersionStatus, true
	case "readNetworkingV1IngressClass":
		return p.ReadNetworkingV1IngressClass, true
	case "readNetworkingV1NamespacedIngress":
		return p.ReadNetworkingV1NamespacedIngress, true
	case "readNetworkingV1NamespacedIngressStatus":
		return p.ReadNetworkingV1NamespacedIngressStatus, true
	case "readNetworkingV1NamespacedNetworkPolicy":
		return p.ReadNetworkingV1NamespacedNetworkPolicy, true
	case "readNodeV1RuntimeClass":
		return p.ReadNodeV1RuntimeClass, true
	case "readNodeV1alpha1RuntimeClass":
		return p.ReadNodeV1alpha1RuntimeClass, true
	case "readNodeV1beta1RuntimeClass":
		return p.ReadNodeV1beta1RuntimeClass, true
	case "readPolicyV1NamespacedPodDisruptionBudget":
		return p.ReadPolicyV1NamespacedPodDisruptionBudget, true
	case "readPolicyV1NamespacedPodDisruptionBudgetStatus":
		return p.ReadPolicyV1NamespacedPodDisruptionBudgetStatus, true
	case "readPolicyV1beta1NamespacedPodDisruptionBudget":
		return p.ReadPolicyV1beta1NamespacedPodDisruptionBudget, true
	case "readPolicyV1beta1NamespacedPodDisruptionBudgetStatus":
		return p.ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatus, true
	case "readPolicyV1beta1PodSecurityPolicy":
		return p.ReadPolicyV1beta1PodSecurityPolicy, true
	case "readRbacAuthorizationV1ClusterRole":
		return p.ReadRbacAuthorizationV1ClusterRole, true
	case "readRbacAuthorizationV1ClusterRoleBinding":
		return p.ReadRbacAuthorizationV1ClusterRoleBinding, true
	case "readRbacAuthorizationV1NamespacedRole":
		return p.ReadRbacAuthorizationV1NamespacedRole, true
	case "readRbacAuthorizationV1NamespacedRoleBinding":
		return p.ReadRbacAuthorizationV1NamespacedRoleBinding, true
	case "readSchedulingV1PriorityClass":
		return p.ReadSchedulingV1PriorityClass, true
	case "readStorageV1CSIDriver":
		return p.ReadStorageV1CSIDriver, true
	case "readStorageV1CSINode":
		return p.ReadStorageV1CSINode, true
	case "readStorageV1StorageClass":
		return p.ReadStorageV1StorageClass, true
	case "readStorageV1VolumeAttachment":
		return p.ReadStorageV1VolumeAttachment, true
	case "readStorageV1VolumeAttachmentStatus":
		return p.ReadStorageV1VolumeAttachmentStatus, true
	case "readStorageV1alpha1NamespacedCSIStorageCapacity":
		return p.ReadStorageV1alpha1NamespacedCSIStorageCapacity, true
	case "readStorageV1beta1NamespacedCSIStorageCapacity":
		return p.ReadStorageV1beta1NamespacedCSIStorageCapacity, true
	case "watchAdmissionregistrationV1MutatingWebhookConfiguration":
		return p.WatchAdmissionregistrationV1MutatingWebhookConfiguration, true
	case "watchAdmissionregistrationV1MutatingWebhookConfigurationList":
		return p.WatchAdmissionregistrationV1MutatingWebhookConfigurationList, true
	case "watchAdmissionregistrationV1ValidatingWebhookConfiguration":
		return p.WatchAdmissionregistrationV1ValidatingWebhookConfiguration, true
	case "watchAdmissionregistrationV1ValidatingWebhookConfigurationList":
		return p.WatchAdmissionregistrationV1ValidatingWebhookConfigurationList, true
	case "watchApiextensionsV1CustomResourceDefinition":
		return p.WatchApiextensionsV1CustomResourceDefinition, true
	case "watchApiextensionsV1CustomResourceDefinitionList":
		return p.WatchApiextensionsV1CustomResourceDefinitionList, true
	case "watchApiregistrationV1APIService":
		return p.WatchApiregistrationV1APIService, true
	case "watchApiregistrationV1APIServiceList":
		return p.WatchApiregistrationV1APIServiceList, true
	case "watchAppsV1ControllerRevisionListForAllNamespaces":
		return p.WatchAppsV1ControllerRevisionListForAllNamespaces, true
	case "watchAppsV1DaemonSetListForAllNamespaces":
		return p.WatchAppsV1DaemonSetListForAllNamespaces, true
	case "watchAppsV1DeploymentListForAllNamespaces":
		return p.WatchAppsV1DeploymentListForAllNamespaces, true
	case "watchAppsV1NamespacedControllerRevision":
		return p.WatchAppsV1NamespacedControllerRevision, true
	case "watchAppsV1NamespacedControllerRevisionList":
		return p.WatchAppsV1NamespacedControllerRevisionList, true
	case "watchAppsV1NamespacedDaemonSet":
		return p.WatchAppsV1NamespacedDaemonSet, true
	case "watchAppsV1NamespacedDaemonSetList":
		return p.WatchAppsV1NamespacedDaemonSetList, true
	case "watchAppsV1NamespacedDeployment":
		return p.WatchAppsV1NamespacedDeployment, true
	case "watchAppsV1NamespacedDeploymentList":
		return p.WatchAppsV1NamespacedDeploymentList, true
	case "watchAppsV1NamespacedReplicaSet":
		return p.WatchAppsV1NamespacedReplicaSet, true
	case "watchAppsV1NamespacedReplicaSetList":
		return p.WatchAppsV1NamespacedReplicaSetList, true
	case "watchAppsV1NamespacedStatefulSet":
		return p.WatchAppsV1NamespacedStatefulSet, true
	case "watchAppsV1NamespacedStatefulSetList":
		return p.WatchAppsV1NamespacedStatefulSetList, true
	case "watchAppsV1ReplicaSetListForAllNamespaces":
		return p.WatchAppsV1ReplicaSetListForAllNamespaces, true
	case "watchAppsV1StatefulSetListForAllNamespaces":
		return p.WatchAppsV1StatefulSetListForAllNamespaces, true
	case "watchAutoscalingV1HorizontalPodAutoscalerListForAllNamespaces":
		return p.WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespaces, true
	case "watchAutoscalingV1NamespacedHorizontalPodAutoscaler":
		return p.WatchAutoscalingV1NamespacedHorizontalPodAutoscaler, true
	case "watchAutoscalingV1NamespacedHorizontalPodAutoscalerList":
		return p.WatchAutoscalingV1NamespacedHorizontalPodAutoscalerList, true
	case "watchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespaces":
		return p.WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespaces, true
	case "watchAutoscalingV2beta1NamespacedHorizontalPodAutoscaler":
		return p.WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscaler, true
	case "watchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerList":
		return p.WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerList, true
	case "watchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespaces":
		return p.WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespaces, true
	case "watchAutoscalingV2beta2NamespacedHorizontalPodAutoscaler":
		return p.WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscaler, true
	case "watchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerList":
		return p.WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerList, true
	case "watchBatchV1CronJobListForAllNamespaces":
		return p.WatchBatchV1CronJobListForAllNamespaces, true
	case "watchBatchV1JobListForAllNamespaces":
		return p.WatchBatchV1JobListForAllNamespaces, true
	case "watchBatchV1NamespacedCronJob":
		return p.WatchBatchV1NamespacedCronJob, true
	case "watchBatchV1NamespacedCronJobList":
		return p.WatchBatchV1NamespacedCronJobList, true
	case "watchBatchV1NamespacedJob":
		return p.WatchBatchV1NamespacedJob, true
	case "watchBatchV1NamespacedJobList":
		return p.WatchBatchV1NamespacedJobList, true
	case "watchBatchV1beta1CronJobListForAllNamespaces":
		return p.WatchBatchV1beta1CronJobListForAllNamespaces, true
	case "watchBatchV1beta1NamespacedCronJob":
		return p.WatchBatchV1beta1NamespacedCronJob, true
	case "watchBatchV1beta1NamespacedCronJobList":
		return p.WatchBatchV1beta1NamespacedCronJobList, true
	case "watchCertificatesV1CertificateSigningRequest":
		return p.WatchCertificatesV1CertificateSigningRequest, true
	case "watchCertificatesV1CertificateSigningRequestList":
		return p.WatchCertificatesV1CertificateSigningRequestList, true
	case "watchCoordinationV1LeaseListForAllNamespaces":
		return p.WatchCoordinationV1LeaseListForAllNamespaces, true
	case "watchCoordinationV1NamespacedLease":
		return p.WatchCoordinationV1NamespacedLease, true
	case "watchCoordinationV1NamespacedLeaseList":
		return p.WatchCoordinationV1NamespacedLeaseList, true
	case "watchCoreV1ConfigMapListForAllNamespaces":
		return p.WatchCoreV1ConfigMapListForAllNamespaces, true
	case "watchCoreV1EndpointsListForAllNamespaces":
		return p.WatchCoreV1EndpointsListForAllNamespaces, true
	case "watchCoreV1EventListForAllNamespaces":
		return p.WatchCoreV1EventListForAllNamespaces, true
	case "watchCoreV1LimitRangeListForAllNamespaces":
		return p.WatchCoreV1LimitRangeListForAllNamespaces, true
	case "watchCoreV1Namespace":
		return p.WatchCoreV1Namespace, true
	case "watchCoreV1NamespaceList":
		return p.WatchCoreV1NamespaceList, true
	case "watchCoreV1NamespacedConfigMap":
		return p.WatchCoreV1NamespacedConfigMap, true
	case "watchCoreV1NamespacedConfigMapList":
		return p.WatchCoreV1NamespacedConfigMapList, true
	case "watchCoreV1NamespacedEndpoints":
		return p.WatchCoreV1NamespacedEndpoints, true
	case "watchCoreV1NamespacedEndpointsList":
		return p.WatchCoreV1NamespacedEndpointsList, true
	case "watchCoreV1NamespacedEvent":
		return p.WatchCoreV1NamespacedEvent, true
	case "watchCoreV1NamespacedEventList":
		return p.WatchCoreV1NamespacedEventList, true
	case "watchCoreV1NamespacedLimitRange":
		return p.WatchCoreV1NamespacedLimitRange, true
	case "watchCoreV1NamespacedLimitRangeList":
		return p.WatchCoreV1NamespacedLimitRangeList, true
	case "watchCoreV1NamespacedPersistentVolumeClaim":
		return p.WatchCoreV1NamespacedPersistentVolumeClaim, true
	case "watchCoreV1NamespacedPersistentVolumeClaimList":
		return p.WatchCoreV1NamespacedPersistentVolumeClaimList, true
	case "watchCoreV1NamespacedPod":
		return p.WatchCoreV1NamespacedPod, true
	case "watchCoreV1NamespacedPodList":
		return p.WatchCoreV1NamespacedPodList, true
	case "watchCoreV1NamespacedPodTemplate":
		return p.WatchCoreV1NamespacedPodTemplate, true
	case "watchCoreV1NamespacedPodTemplateList":
		return p.WatchCoreV1NamespacedPodTemplateList, true
	case "watchCoreV1NamespacedReplicationController":
		return p.WatchCoreV1NamespacedReplicationController, true
	case "watchCoreV1NamespacedReplicationControllerList":
		return p.WatchCoreV1NamespacedReplicationControllerList, true
	case "watchCoreV1NamespacedResourceQuota":
		return p.WatchCoreV1NamespacedResourceQuota, true
	case "watchCoreV1NamespacedResourceQuotaList":
		return p.WatchCoreV1NamespacedResourceQuotaList, true
	case "watchCoreV1NamespacedSecret":
		return p.WatchCoreV1NamespacedSecret, true
	case "watchCoreV1NamespacedSecretList":
		return p.WatchCoreV1NamespacedSecretList, true
	case "watchCoreV1NamespacedService":
		return p.WatchCoreV1NamespacedService, true
	case "watchCoreV1NamespacedServiceAccount":
		return p.WatchCoreV1NamespacedServiceAccount, true
	case "watchCoreV1NamespacedServiceAccountList":
		return p.WatchCoreV1NamespacedServiceAccountList, true
	case "watchCoreV1NamespacedServiceList":
		return p.WatchCoreV1NamespacedServiceList, true
	case "watchCoreV1Node":
		return p.WatchCoreV1Node, true
	case "watchCoreV1NodeList":
		return p.WatchCoreV1NodeList, true
	case "watchCoreV1PersistentVolume":
		return p.WatchCoreV1PersistentVolume, true
	case "watchCoreV1PersistentVolumeClaimListForAllNamespaces":
		return p.WatchCoreV1PersistentVolumeClaimListForAllNamespaces, true
	case "watchCoreV1PersistentVolumeList":
		return p.WatchCoreV1PersistentVolumeList, true
	case "watchCoreV1PodListForAllNamespaces":
		return p.WatchCoreV1PodListForAllNamespaces, true
	case "watchCoreV1PodTemplateListForAllNamespaces":
		return p.WatchCoreV1PodTemplateListForAllNamespaces, true
	case "watchCoreV1ReplicationControllerListForAllNamespaces":
		return p.WatchCoreV1ReplicationControllerListForAllNamespaces, true
	case "watchCoreV1ResourceQuotaListForAllNamespaces":
		return p.WatchCoreV1ResourceQuotaListForAllNamespaces, true
	case "watchCoreV1SecretListForAllNamespaces":
		return p.WatchCoreV1SecretListForAllNamespaces, true
	case "watchCoreV1ServiceAccountListForAllNamespaces":
		return p.WatchCoreV1ServiceAccountListForAllNamespaces, true
	case "watchCoreV1ServiceListForAllNamespaces":
		return p.WatchCoreV1ServiceListForAllNamespaces, true
	case "watchDiscoveryV1EndpointSliceListForAllNamespaces":
		return p.WatchDiscoveryV1EndpointSliceListForAllNamespaces, true
	case "watchDiscoveryV1NamespacedEndpointSlice":
		return p.WatchDiscoveryV1NamespacedEndpointSlice, true
	case "watchDiscoveryV1NamespacedEndpointSliceList":
		return p.WatchDiscoveryV1NamespacedEndpointSliceList, true
	case "watchDiscoveryV1beta1EndpointSliceListForAllNamespaces":
		return p.WatchDiscoveryV1beta1EndpointSliceListForAllNamespaces, true
	case "watchDiscoveryV1beta1NamespacedEndpointSlice":
		return p.WatchDiscoveryV1beta1NamespacedEndpointSlice, true
	case "watchDiscoveryV1beta1NamespacedEndpointSliceList":
		return p.WatchDiscoveryV1beta1NamespacedEndpointSliceList, true
	case "watchEventsV1EventListForAllNamespaces":
		return p.WatchEventsV1EventListForAllNamespaces, true
	case "watchEventsV1NamespacedEvent":
		return p.WatchEventsV1NamespacedEvent, true
	case "watchEventsV1NamespacedEventList":
		return p.WatchEventsV1NamespacedEventList, true
	case "watchEventsV1beta1EventListForAllNamespaces":
		return p.WatchEventsV1beta1EventListForAllNamespaces, true
	case "watchEventsV1beta1NamespacedEvent":
		return p.WatchEventsV1beta1NamespacedEvent, true
	case "watchEventsV1beta1NamespacedEventList":
		return p.WatchEventsV1beta1NamespacedEventList, true
	case "watchFlowcontrolApiserverV1beta1FlowSchema":
		return p.WatchFlowcontrolApiserverV1beta1FlowSchema, true
	case "watchFlowcontrolApiserverV1beta1FlowSchemaList":
		return p.WatchFlowcontrolApiserverV1beta1FlowSchemaList, true
	case "watchFlowcontrolApiserverV1beta1PriorityLevelConfiguration":
		return p.WatchFlowcontrolApiserverV1beta1PriorityLevelConfiguration, true
	case "watchFlowcontrolApiserverV1beta1PriorityLevelConfigurationList":
		return p.WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationList, true
	case "watchFlowcontrolApiserverV1beta2FlowSchema":
		return p.WatchFlowcontrolApiserverV1beta2FlowSchema, true
	case "watchFlowcontrolApiserverV1beta2FlowSchemaList":
		return p.WatchFlowcontrolApiserverV1beta2FlowSchemaList, true
	case "watchFlowcontrolApiserverV1beta2PriorityLevelConfiguration":
		return p.WatchFlowcontrolApiserverV1beta2PriorityLevelConfiguration, true
	case "watchFlowcontrolApiserverV1beta2PriorityLevelConfigurationList":
		return p.WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationList, true
	case "watchInternalApiserverV1alpha1StorageVersion":
		return p.WatchInternalApiserverV1alpha1StorageVersion, true
	case "watchInternalApiserverV1alpha1StorageVersionList":
		return p.WatchInternalApiserverV1alpha1StorageVersionList, true
	case "watchNetworkingV1IngressClass":
		return p.WatchNetworkingV1IngressClass, true
	case "watchNetworkingV1IngressClassList":
		return p.WatchNetworkingV1IngressClassList, true
	case "watchNetworkingV1IngressListForAllNamespaces":
		return p.WatchNetworkingV1IngressListForAllNamespaces, true
	case "watchNetworkingV1NamespacedIngress":
		return p.WatchNetworkingV1NamespacedIngress, true
	case "watchNetworkingV1NamespacedIngressList":
		return p.WatchNetworkingV1NamespacedIngressList, true
	case "watchNetworkingV1NamespacedNetworkPolicy":
		return p.WatchNetworkingV1NamespacedNetworkPolicy, true
	case "watchNetworkingV1NamespacedNetworkPolicyList":
		return p.WatchNetworkingV1NamespacedNetworkPolicyList, true
	case "watchNetworkingV1NetworkPolicyListForAllNamespaces":
		return p.WatchNetworkingV1NetworkPolicyListForAllNamespaces, true
	case "watchNodeV1RuntimeClass":
		return p.WatchNodeV1RuntimeClass, true
	case "watchNodeV1RuntimeClassList":
		return p.WatchNodeV1RuntimeClassList, true
	case "watchNodeV1alpha1RuntimeClass":
		return p.WatchNodeV1alpha1RuntimeClass, true
	case "watchNodeV1alpha1RuntimeClassList":
		return p.WatchNodeV1alpha1RuntimeClassList, true
	case "watchNodeV1beta1RuntimeClass":
		return p.WatchNodeV1beta1RuntimeClass, true
	case "watchNodeV1beta1RuntimeClassList":
		return p.WatchNodeV1beta1RuntimeClassList, true
	case "watchPolicyV1NamespacedPodDisruptionBudget":
		return p.WatchPolicyV1NamespacedPodDisruptionBudget, true
	case "watchPolicyV1NamespacedPodDisruptionBudgetList":
		return p.WatchPolicyV1NamespacedPodDisruptionBudgetList, true
	case "watchPolicyV1PodDisruptionBudgetListForAllNamespaces":
		return p.WatchPolicyV1PodDisruptionBudgetListForAllNamespaces, true
	case "watchPolicyV1beta1NamespacedPodDisruptionBudget":
		return p.WatchPolicyV1beta1NamespacedPodDisruptionBudget, true
	case "watchPolicyV1beta1NamespacedPodDisruptionBudgetList":
		return p.WatchPolicyV1beta1NamespacedPodDisruptionBudgetList, true
	case "watchPolicyV1beta1PodDisruptionBudgetListForAllNamespaces":
		return p.WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespaces, true
	case "watchPolicyV1beta1PodSecurityPolicy":
		return p.WatchPolicyV1beta1PodSecurityPolicy, true
	case "watchPolicyV1beta1PodSecurityPolicyList":
		return p.WatchPolicyV1beta1PodSecurityPolicyList, true
	case "watchRbacAuthorizationV1ClusterRole":
		return p.WatchRbacAuthorizationV1ClusterRole, true
	case "watchRbacAuthorizationV1ClusterRoleBinding":
		return p.WatchRbacAuthorizationV1ClusterRoleBinding, true
	case "watchRbacAuthorizationV1ClusterRoleBindingList":
		return p.WatchRbacAuthorizationV1ClusterRoleBindingList, true
	case "watchRbacAuthorizationV1ClusterRoleList":
		return p.WatchRbacAuthorizationV1ClusterRoleList, true
	case "watchRbacAuthorizationV1NamespacedRole":
		return p.WatchRbacAuthorizationV1NamespacedRole, true
	case "watchRbacAuthorizationV1NamespacedRoleBinding":
		return p.WatchRbacAuthorizationV1NamespacedRoleBinding, true
	case "watchRbacAuthorizationV1NamespacedRoleBindingList":
		return p.WatchRbacAuthorizationV1NamespacedRoleBindingList, true
	case "watchRbacAuthorizationV1NamespacedRoleList":
		return p.WatchRbacAuthorizationV1NamespacedRoleList, true
	case "watchRbacAuthorizationV1RoleBindingListForAllNamespaces":
		return p.WatchRbacAuthorizationV1RoleBindingListForAllNamespaces, true
	case "watchRbacAuthorizationV1RoleListForAllNamespaces":
		return p.WatchRbacAuthorizationV1RoleListForAllNamespaces, true
	case "watchSchedulingV1PriorityClass":
		return p.WatchSchedulingV1PriorityClass, true
	case "watchSchedulingV1PriorityClassList":
		return p.WatchSchedulingV1PriorityClassList, true
	case "watchStorageV1CSIDriver":
		return p.WatchStorageV1CSIDriver, true
	case "watchStorageV1CSIDriverList":
		return p.WatchStorageV1CSIDriverList, true
	case "watchStorageV1CSINode":
		return p.WatchStorageV1CSINode, true
	case "watchStorageV1CSINodeList":
		return p.WatchStorageV1CSINodeList, true
	case "watchStorageV1StorageClass":
		return p.WatchStorageV1StorageClass, true
	case "watchStorageV1StorageClassList":
		return p.WatchStorageV1StorageClassList, true
	case "watchStorageV1VolumeAttachment":
		return p.WatchStorageV1VolumeAttachment, true
	case "watchStorageV1VolumeAttachmentList":
		return p.WatchStorageV1VolumeAttachmentList, true
	case "watchStorageV1alpha1CSIStorageCapacityListForAllNamespaces":
		return p.WatchStorageV1alpha1CSIStorageCapacityListForAllNamespaces, true
	case "watchStorageV1alpha1NamespacedCSIStorageCapacity":
		return p.WatchStorageV1alpha1NamespacedCSIStorageCapacity, true
	case "watchStorageV1alpha1NamespacedCSIStorageCapacityList":
		return p.WatchStorageV1alpha1NamespacedCSIStorageCapacityList, true
	case "watchStorageV1beta1CSIStorageCapacityListForAllNamespaces":
		return p.WatchStorageV1beta1CSIStorageCapacityListForAllNamespaces, true
	case "watchStorageV1beta1NamespacedCSIStorageCapacity":
		return p.WatchStorageV1beta1NamespacedCSIStorageCapacity, true
	case "watchStorageV1beta1NamespacedCSIStorageCapacityList":
		return p.WatchStorageV1beta1NamespacedCSIStorageCapacityList, true
	default:
		return op, false
	}
}

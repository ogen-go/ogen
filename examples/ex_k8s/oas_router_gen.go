// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [3]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case '.': // Prefix: ".well-known/openid-configuration/"
				if l := len(".well-known/openid-configuration/"); len(elem) >= l && elem[0:l] == ".well-known/openid-configuration/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleGetServiceAccountIssuerOpenIDConfigurationRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}
			case 'a': // Prefix: "api"
				if l := len("api"); len(elem) >= l && elem[0:l] == "api" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetCoreAPIVersionsRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case 'v': // Prefix: "v1/"
						if l := len("v1/"); len(elem) >= l && elem[0:l] == "v1/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleGetCoreV1APIResourcesRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
						switch elem[0] {
						case 'c': // Prefix: "co"
							if l := len("co"); len(elem) >= l && elem[0:l] == "co" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'm': // Prefix: "mponentstatuses"
								if l := len("mponentstatuses"); len(elem) >= l && elem[0:l] == "mponentstatuses" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleListCoreV1ComponentStatusRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "name"
									// Leaf parameter
									args[0] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleReadCoreV1ComponentStatusRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
								}
							case 'n': // Prefix: "nfigmaps"
								if l := len("nfigmaps"); len(elem) >= l && elem[0:l] == "nfigmaps" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleListCoreV1ConfigMapForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							}
						case 'e': // Prefix: "e"
							if l := len("e"); len(elem) >= l && elem[0:l] == "e" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'n': // Prefix: "ndpoints"
								if l := len("ndpoints"); len(elem) >= l && elem[0:l] == "ndpoints" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleListCoreV1EndpointsForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							case 'v': // Prefix: "vents"
								if l := len("vents"); len(elem) >= l && elem[0:l] == "vents" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleListCoreV1EventForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							}
						case 'l': // Prefix: "limitranges"
							if l := len("limitranges"); len(elem) >= l && elem[0:l] == "limitranges" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleListCoreV1LimitRangeForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						case 'n': // Prefix: "n"
							if l := len("n"); len(elem) >= l && elem[0:l] == "n" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "amespaces"
								if l := len("amespaces"); len(elem) >= l && elem[0:l] == "amespaces" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleListCoreV1NamespaceRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "namespace"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleReadCoreV1NamespaceRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'c': // Prefix: "configmaps"
											if l := len("configmaps"); len(elem) >= l && elem[0:l] == "configmaps" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "GET":
													s.handleListCoreV1NamespacedConfigMapRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "GET":
														s.handleReadCoreV1NamespacedConfigMapRequest([2]string{
															args[0],
															args[1],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
											}
										case 'e': // Prefix: "e"
											if l := len("e"); len(elem) >= l && elem[0:l] == "e" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'n': // Prefix: "ndpoints"
												if l := len("ndpoints"); len(elem) >= l && elem[0:l] == "ndpoints" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "GET":
														s.handleListCoreV1NamespacedEndpointsRequest([1]string{
															args[0],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args[1] = elem
													elem = ""

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "GET":
															s.handleReadCoreV1NamespacedEndpointsRequest([2]string{
																args[0],
																args[1],
															}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "GET")
														}

														return
													}
												}
											case 'v': // Prefix: "vents"
												if l := len("vents"); len(elem) >= l && elem[0:l] == "vents" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "GET":
														s.handleListCoreV1NamespacedEventRequest([1]string{
															args[0],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args[1] = elem
													elem = ""

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "GET":
															s.handleReadCoreV1NamespacedEventRequest([2]string{
																args[0],
																args[1],
															}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "GET")
														}

														return
													}
												}
											}
										case 'l': // Prefix: "limitranges"
											if l := len("limitranges"); len(elem) >= l && elem[0:l] == "limitranges" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "GET":
													s.handleListCoreV1NamespacedLimitRangeRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "GET":
														s.handleReadCoreV1NamespacedLimitRangeRequest([2]string{
															args[0],
															args[1],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
											}
										case 'p': // Prefix: "p"
											if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'e': // Prefix: "ersistentvolumeclaims"
												if l := len("ersistentvolumeclaims"); len(elem) >= l && elem[0:l] == "ersistentvolumeclaims" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "GET":
														s.handleListCoreV1NamespacedPersistentVolumeClaimRequest([1]string{
															args[0],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Match until "/"
													idx := strings.IndexByte(elem, '/')
													if idx < 0 {
														idx = len(elem)
													}
													args[1] = elem[:idx]
													elem = elem[idx:]

													if len(elem) == 0 {
														switch r.Method {
														case "GET":
															s.handleReadCoreV1NamespacedPersistentVolumeClaimRequest([2]string{
																args[0],
																args[1],
															}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "GET")
														}

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/status"
														if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "GET":
																s.handleReadCoreV1NamespacedPersistentVolumeClaimStatusRequest([2]string{
																	args[0],
																	args[1],
																}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "GET")
															}

															return
														}
													}
												}
											case 'o': // Prefix: "od"
												if l := len("od"); len(elem) >= l && elem[0:l] == "od" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 's': // Prefix: "s"
													if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "GET":
															s.handleListCoreV1NamespacedPodRequest([1]string{
																args[0],
															}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "GET")
														}

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Match until "/"
														idx := strings.IndexByte(elem, '/')
														if idx < 0 {
															idx = len(elem)
														}
														args[1] = elem[:idx]
														elem = elem[idx:]

														if len(elem) == 0 {
															switch r.Method {
															case "GET":
																s.handleReadCoreV1NamespacedPodRequest([2]string{
																	args[0],
																	args[1],
																}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "GET")
															}

															return
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																break
															}
															switch elem[0] {
															case 'a': // Prefix: "attach"
																if l := len("attach"); len(elem) >= l && elem[0:l] == "attach" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch r.Method {
																	case "GET":
																		s.handleConnectCoreV1GetNamespacedPodAttachRequest([2]string{
																			args[0],
																			args[1],
																		}, elemIsEscaped, w, r)
																	case "POST":
																		s.handleConnectCoreV1PostNamespacedPodAttachRequest([2]string{
																			args[0],
																			args[1],
																		}, elemIsEscaped, w, r)
																	default:
																		s.notAllowed(w, r, "GET,POST")
																	}

																	return
																}
															case 'e': // Prefix: "e"
																if l := len("e"); len(elem) >= l && elem[0:l] == "e" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	break
																}
																switch elem[0] {
																case 'p': // Prefix: "phemeralcontainers"
																	if l := len("phemeralcontainers"); len(elem) >= l && elem[0:l] == "phemeralcontainers" {
																		elem = elem[l:]
																	} else {
																		break
																	}

																	if len(elem) == 0 {
																		// Leaf node.
																		switch r.Method {
																		case "GET":
																			s.handleReadCoreV1NamespacedPodEphemeralcontainersRequest([2]string{
																				args[0],
																				args[1],
																			}, elemIsEscaped, w, r)
																		default:
																			s.notAllowed(w, r, "GET")
																		}

																		return
																	}
																case 'x': // Prefix: "xec"
																	if l := len("xec"); len(elem) >= l && elem[0:l] == "xec" {
																		elem = elem[l:]
																	} else {
																		break
																	}

																	if len(elem) == 0 {
																		// Leaf node.
																		switch r.Method {
																		case "GET":
																			s.handleConnectCoreV1GetNamespacedPodExecRequest([2]string{
																				args[0],
																				args[1],
																			}, elemIsEscaped, w, r)
																		case "POST":
																			s.handleConnectCoreV1PostNamespacedPodExecRequest([2]string{
																				args[0],
																				args[1],
																			}, elemIsEscaped, w, r)
																		default:
																			s.notAllowed(w, r, "GET,POST")
																		}

																		return
																	}
																}
															case 'l': // Prefix: "log"
																if l := len("log"); len(elem) >= l && elem[0:l] == "log" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch r.Method {
																	case "GET":
																		s.handleReadCoreV1NamespacedPodLogRequest([2]string{
																			args[0],
																			args[1],
																		}, elemIsEscaped, w, r)
																	default:
																		s.notAllowed(w, r, "GET")
																	}

																	return
																}
															case 'p': // Prefix: "p"
																if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	break
																}
																switch elem[0] {
																case 'o': // Prefix: "ortforward"
																	if l := len("ortforward"); len(elem) >= l && elem[0:l] == "ortforward" {
																		elem = elem[l:]
																	} else {
																		break
																	}

																	if len(elem) == 0 {
																		// Leaf node.
																		switch r.Method {
																		case "GET":
																			s.handleConnectCoreV1GetNamespacedPodPortforwardRequest([2]string{
																				args[0],
																				args[1],
																			}, elemIsEscaped, w, r)
																		case "POST":
																			s.handleConnectCoreV1PostNamespacedPodPortforwardRequest([2]string{
																				args[0],
																				args[1],
																			}, elemIsEscaped, w, r)
																		default:
																			s.notAllowed(w, r, "GET,POST")
																		}

																		return
																	}
																case 'r': // Prefix: "roxy"
																	if l := len("roxy"); len(elem) >= l && elem[0:l] == "roxy" {
																		elem = elem[l:]
																	} else {
																		break
																	}

																	if len(elem) == 0 {
																		switch r.Method {
																		case "DELETE":
																			s.handleConnectCoreV1DeleteNamespacedPodProxyRequest([2]string{
																				args[0],
																				args[1],
																			}, elemIsEscaped, w, r)
																		case "GET":
																			s.handleConnectCoreV1GetNamespacedPodProxyRequest([2]string{
																				args[0],
																				args[1],
																			}, elemIsEscaped, w, r)
																		case "HEAD":
																			s.handleConnectCoreV1HeadNamespacedPodProxyRequest([2]string{
																				args[0],
																				args[1],
																			}, elemIsEscaped, w, r)
																		case "OPTIONS":
																			s.handleConnectCoreV1OptionsNamespacedPodProxyRequest([2]string{
																				args[0],
																				args[1],
																			}, elemIsEscaped, w, r)
																		case "PATCH":
																			s.handleConnectCoreV1PatchNamespacedPodProxyRequest([2]string{
																				args[0],
																				args[1],
																			}, elemIsEscaped, w, r)
																		case "POST":
																			s.handleConnectCoreV1PostNamespacedPodProxyRequest([2]string{
																				args[0],
																				args[1],
																			}, elemIsEscaped, w, r)
																		case "PUT":
																			s.handleConnectCoreV1PutNamespacedPodProxyRequest([2]string{
																				args[0],
																				args[1],
																			}, elemIsEscaped, w, r)
																		default:
																			s.notAllowed(w, r, "DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT")
																		}

																		return
																	}
																	switch elem[0] {
																	case '/': // Prefix: "/"
																		if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
																			elem = elem[l:]
																		} else {
																			break
																		}

																		// Param: "path"
																		// Leaf parameter
																		args[2] = elem
																		elem = ""

																		if len(elem) == 0 {
																			// Leaf node.
																			switch r.Method {
																			case "DELETE":
																				s.handleConnectCoreV1DeleteNamespacedPodProxyWithPathRequest([3]string{
																					args[0],
																					args[1],
																					args[2],
																				}, elemIsEscaped, w, r)
																			case "GET":
																				s.handleConnectCoreV1GetNamespacedPodProxyWithPathRequest([3]string{
																					args[0],
																					args[1],
																					args[2],
																				}, elemIsEscaped, w, r)
																			case "HEAD":
																				s.handleConnectCoreV1HeadNamespacedPodProxyWithPathRequest([3]string{
																					args[0],
																					args[1],
																					args[2],
																				}, elemIsEscaped, w, r)
																			case "OPTIONS":
																				s.handleConnectCoreV1OptionsNamespacedPodProxyWithPathRequest([3]string{
																					args[0],
																					args[1],
																					args[2],
																				}, elemIsEscaped, w, r)
																			case "PATCH":
																				s.handleConnectCoreV1PatchNamespacedPodProxyWithPathRequest([3]string{
																					args[0],
																					args[1],
																					args[2],
																				}, elemIsEscaped, w, r)
																			case "POST":
																				s.handleConnectCoreV1PostNamespacedPodProxyWithPathRequest([3]string{
																					args[0],
																					args[1],
																					args[2],
																				}, elemIsEscaped, w, r)
																			case "PUT":
																				s.handleConnectCoreV1PutNamespacedPodProxyWithPathRequest([3]string{
																					args[0],
																					args[1],
																					args[2],
																				}, elemIsEscaped, w, r)
																			default:
																				s.notAllowed(w, r, "DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT")
																			}

																			return
																		}
																	}
																}
															case 's': // Prefix: "status"
																if l := len("status"); len(elem) >= l && elem[0:l] == "status" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch r.Method {
																	case "GET":
																		s.handleReadCoreV1NamespacedPodStatusRequest([2]string{
																			args[0],
																			args[1],
																		}, elemIsEscaped, w, r)
																	default:
																		s.notAllowed(w, r, "GET")
																	}

																	return
																}
															}
														}
													}
												case 't': // Prefix: "templates"
													if l := len("templates"); len(elem) >= l && elem[0:l] == "templates" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "GET":
															s.handleListCoreV1NamespacedPodTemplateRequest([1]string{
																args[0],
															}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "GET")
														}

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "GET":
																s.handleReadCoreV1NamespacedPodTemplateRequest([2]string{
																	args[0],
																	args[1],
																}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "GET")
															}

															return
														}
													}
												}
											}
										case 'r': // Prefix: "re"
											if l := len("re"); len(elem) >= l && elem[0:l] == "re" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'p': // Prefix: "plicationcontrollers"
												if l := len("plicationcontrollers"); len(elem) >= l && elem[0:l] == "plicationcontrollers" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "GET":
														s.handleListCoreV1NamespacedReplicationControllerRequest([1]string{
															args[0],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Match until "/"
													idx := strings.IndexByte(elem, '/')
													if idx < 0 {
														idx = len(elem)
													}
													args[1] = elem[:idx]
													elem = elem[idx:]

													if len(elem) == 0 {
														switch r.Method {
														case "GET":
															s.handleReadCoreV1NamespacedReplicationControllerRequest([2]string{
																args[0],
																args[1],
															}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "GET")
														}

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/s"
														if l := len("/s"); len(elem) >= l && elem[0:l] == "/s" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															break
														}
														switch elem[0] {
														case 'c': // Prefix: "cale"
															if l := len("cale"); len(elem) >= l && elem[0:l] == "cale" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "GET":
																	s.handleReadCoreV1NamespacedReplicationControllerScaleRequest([2]string{
																		args[0],
																		args[1],
																	}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "GET")
																}

																return
															}
														case 't': // Prefix: "tatus"
															if l := len("tatus"); len(elem) >= l && elem[0:l] == "tatus" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "GET":
																	s.handleReadCoreV1NamespacedReplicationControllerStatusRequest([2]string{
																		args[0],
																		args[1],
																	}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "GET")
																}

																return
															}
														}
													}
												}
											case 's': // Prefix: "sourcequotas"
												if l := len("sourcequotas"); len(elem) >= l && elem[0:l] == "sourcequotas" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "GET":
														s.handleListCoreV1NamespacedResourceQuotaRequest([1]string{
															args[0],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Match until "/"
													idx := strings.IndexByte(elem, '/')
													if idx < 0 {
														idx = len(elem)
													}
													args[1] = elem[:idx]
													elem = elem[idx:]

													if len(elem) == 0 {
														switch r.Method {
														case "GET":
															s.handleReadCoreV1NamespacedResourceQuotaRequest([2]string{
																args[0],
																args[1],
															}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "GET")
														}

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/status"
														if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "GET":
																s.handleReadCoreV1NamespacedResourceQuotaStatusRequest([2]string{
																	args[0],
																	args[1],
																}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "GET")
															}

															return
														}
													}
												}
											}
										case 's': // Prefix: "s"
											if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'e': // Prefix: "e"
												if l := len("e"); len(elem) >= l && elem[0:l] == "e" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'c': // Prefix: "crets"
													if l := len("crets"); len(elem) >= l && elem[0:l] == "crets" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "GET":
															s.handleListCoreV1NamespacedSecretRequest([1]string{
																args[0],
															}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "GET")
														}

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "GET":
																s.handleReadCoreV1NamespacedSecretRequest([2]string{
																	args[0],
																	args[1],
																}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "GET")
															}

															return
														}
													}
												case 'r': // Prefix: "rvice"
													if l := len("rvice"); len(elem) >= l && elem[0:l] == "rvice" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "accounts"
														if l := len("accounts"); len(elem) >= l && elem[0:l] == "accounts" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "GET":
																s.handleListCoreV1NamespacedServiceAccountRequest([1]string{
																	args[0],
																}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "GET")
															}

															return
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
																elem = elem[l:]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args[1] = elem
															elem = ""

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "GET":
																	s.handleReadCoreV1NamespacedServiceAccountRequest([2]string{
																		args[0],
																		args[1],
																	}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "GET")
																}

																return
															}
														}
													case 's': // Prefix: "s"
														if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "GET":
																s.handleListCoreV1NamespacedServiceRequest([1]string{
																	args[0],
																}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "GET")
															}

															return
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
																elem = elem[l:]
															} else {
																break
															}

															// Param: "name"
															// Match until "/"
															idx := strings.IndexByte(elem, '/')
															if idx < 0 {
																idx = len(elem)
															}
															args[1] = elem[:idx]
															elem = elem[idx:]

															if len(elem) == 0 {
																switch r.Method {
																case "GET":
																	s.handleReadCoreV1NamespacedServiceRequest([2]string{
																		args[0],
																		args[1],
																	}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "GET")
																}

																return
															}
															switch elem[0] {
															case '/': // Prefix: "/"
																if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	break
																}
																switch elem[0] {
																case 'p': // Prefix: "proxy"
																	if l := len("proxy"); len(elem) >= l && elem[0:l] == "proxy" {
																		elem = elem[l:]
																	} else {
																		break
																	}

																	if len(elem) == 0 {
																		switch r.Method {
																		case "DELETE":
																			s.handleConnectCoreV1DeleteNamespacedServiceProxyRequest([2]string{
																				args[0],
																				args[1],
																			}, elemIsEscaped, w, r)
																		case "GET":
																			s.handleConnectCoreV1GetNamespacedServiceProxyRequest([2]string{
																				args[0],
																				args[1],
																			}, elemIsEscaped, w, r)
																		case "HEAD":
																			s.handleConnectCoreV1HeadNamespacedServiceProxyRequest([2]string{
																				args[0],
																				args[1],
																			}, elemIsEscaped, w, r)
																		case "OPTIONS":
																			s.handleConnectCoreV1OptionsNamespacedServiceProxyRequest([2]string{
																				args[0],
																				args[1],
																			}, elemIsEscaped, w, r)
																		case "PATCH":
																			s.handleConnectCoreV1PatchNamespacedServiceProxyRequest([2]string{
																				args[0],
																				args[1],
																			}, elemIsEscaped, w, r)
																		case "POST":
																			s.handleConnectCoreV1PostNamespacedServiceProxyRequest([2]string{
																				args[0],
																				args[1],
																			}, elemIsEscaped, w, r)
																		case "PUT":
																			s.handleConnectCoreV1PutNamespacedServiceProxyRequest([2]string{
																				args[0],
																				args[1],
																			}, elemIsEscaped, w, r)
																		default:
																			s.notAllowed(w, r, "DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT")
																		}

																		return
																	}
																	switch elem[0] {
																	case '/': // Prefix: "/"
																		if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
																			elem = elem[l:]
																		} else {
																			break
																		}

																		// Param: "path"
																		// Leaf parameter
																		args[2] = elem
																		elem = ""

																		if len(elem) == 0 {
																			// Leaf node.
																			switch r.Method {
																			case "DELETE":
																				s.handleConnectCoreV1DeleteNamespacedServiceProxyWithPathRequest([3]string{
																					args[0],
																					args[1],
																					args[2],
																				}, elemIsEscaped, w, r)
																			case "GET":
																				s.handleConnectCoreV1GetNamespacedServiceProxyWithPathRequest([3]string{
																					args[0],
																					args[1],
																					args[2],
																				}, elemIsEscaped, w, r)
																			case "HEAD":
																				s.handleConnectCoreV1HeadNamespacedServiceProxyWithPathRequest([3]string{
																					args[0],
																					args[1],
																					args[2],
																				}, elemIsEscaped, w, r)
																			case "OPTIONS":
																				s.handleConnectCoreV1OptionsNamespacedServiceProxyWithPathRequest([3]string{
																					args[0],
																					args[1],
																					args[2],
																				}, elemIsEscaped, w, r)
																			case "PATCH":
																				s.handleConnectCoreV1PatchNamespacedServiceProxyWithPathRequest([3]string{
																					args[0],
																					args[1],
																					args[2],
																				}, elemIsEscaped, w, r)
																			case "POST":
																				s.handleConnectCoreV1PostNamespacedServiceProxyWithPathRequest([3]string{
																					args[0],
																					args[1],
																					args[2],
																				}, elemIsEscaped, w, r)
																			case "PUT":
																				s.handleConnectCoreV1PutNamespacedServiceProxyWithPathRequest([3]string{
																					args[0],
																					args[1],
																					args[2],
																				}, elemIsEscaped, w, r)
																			default:
																				s.notAllowed(w, r, "DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT")
																			}

																			return
																		}
																	}
																case 's': // Prefix: "status"
																	if l := len("status"); len(elem) >= l && elem[0:l] == "status" {
																		elem = elem[l:]
																	} else {
																		break
																	}

																	if len(elem) == 0 {
																		// Leaf node.
																		switch r.Method {
																		case "GET":
																			s.handleReadCoreV1NamespacedServiceStatusRequest([2]string{
																				args[0],
																				args[1],
																			}, elemIsEscaped, w, r)
																		default:
																			s.notAllowed(w, r, "GET")
																		}

																		return
																	}
																}
															}
														}
													}
												}
											case 't': // Prefix: "tatus"
												if l := len("tatus"); len(elem) >= l && elem[0:l] == "tatus" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "GET":
														s.handleReadCoreV1NamespaceStatusRequest([1]string{
															args[0],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
											}
										}
									}
								}
							case 'o': // Prefix: "odes"
								if l := len("odes"); len(elem) >= l && elem[0:l] == "odes" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleListCoreV1NodeRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "name"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleReadCoreV1NodeRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'p': // Prefix: "proxy"
											if l := len("proxy"); len(elem) >= l && elem[0:l] == "proxy" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "DELETE":
													s.handleConnectCoreV1DeleteNodeProxyRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												case "GET":
													s.handleConnectCoreV1GetNodeProxyRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												case "HEAD":
													s.handleConnectCoreV1HeadNodeProxyRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												case "OPTIONS":
													s.handleConnectCoreV1OptionsNodeProxyRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												case "PATCH":
													s.handleConnectCoreV1PatchNodeProxyRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												case "POST":
													s.handleConnectCoreV1PostNodeProxyRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												case "PUT":
													s.handleConnectCoreV1PutNodeProxyRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT")
												}

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "path"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "DELETE":
														s.handleConnectCoreV1DeleteNodeProxyWithPathRequest([2]string{
															args[0],
															args[1],
														}, elemIsEscaped, w, r)
													case "GET":
														s.handleConnectCoreV1GetNodeProxyWithPathRequest([2]string{
															args[0],
															args[1],
														}, elemIsEscaped, w, r)
													case "HEAD":
														s.handleConnectCoreV1HeadNodeProxyWithPathRequest([2]string{
															args[0],
															args[1],
														}, elemIsEscaped, w, r)
													case "OPTIONS":
														s.handleConnectCoreV1OptionsNodeProxyWithPathRequest([2]string{
															args[0],
															args[1],
														}, elemIsEscaped, w, r)
													case "PATCH":
														s.handleConnectCoreV1PatchNodeProxyWithPathRequest([2]string{
															args[0],
															args[1],
														}, elemIsEscaped, w, r)
													case "POST":
														s.handleConnectCoreV1PostNodeProxyWithPathRequest([2]string{
															args[0],
															args[1],
														}, elemIsEscaped, w, r)
													case "PUT":
														s.handleConnectCoreV1PutNodeProxyWithPathRequest([2]string{
															args[0],
															args[1],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT")
													}

													return
												}
											}
										case 's': // Prefix: "status"
											if l := len("status"); len(elem) >= l && elem[0:l] == "status" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleReadCoreV1NodeStatusRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
										}
									}
								}
							}
						case 'p': // Prefix: "p"
							if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'e': // Prefix: "ersistentvolume"
								if l := len("ersistentvolume"); len(elem) >= l && elem[0:l] == "ersistentvolume" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'c': // Prefix: "claims"
									if l := len("claims"); len(elem) >= l && elem[0:l] == "claims" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleListCoreV1PersistentVolumeClaimForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
								case 's': // Prefix: "s"
									if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleListCoreV1PersistentVolumeRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											switch r.Method {
											case "GET":
												s.handleReadCoreV1PersistentVolumeRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/status"
											if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleReadCoreV1PersistentVolumeStatusRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
										}
									}
								}
							case 'o': // Prefix: "od"
								if l := len("od"); len(elem) >= l && elem[0:l] == "od" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 's': // Prefix: "s"
									if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleListCoreV1PodForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
								case 't': // Prefix: "templates"
									if l := len("templates"); len(elem) >= l && elem[0:l] == "templates" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleListCoreV1PodTemplateForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
								}
							}
						case 'r': // Prefix: "re"
							if l := len("re"); len(elem) >= l && elem[0:l] == "re" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'p': // Prefix: "plicationcontrollers"
								if l := len("plicationcontrollers"); len(elem) >= l && elem[0:l] == "plicationcontrollers" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleListCoreV1ReplicationControllerForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							case 's': // Prefix: "sourcequotas"
								if l := len("sourcequotas"); len(elem) >= l && elem[0:l] == "sourcequotas" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleListCoreV1ResourceQuotaForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							}
						case 's': // Prefix: "se"
							if l := len("se"); len(elem) >= l && elem[0:l] == "se" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'c': // Prefix: "crets"
								if l := len("crets"); len(elem) >= l && elem[0:l] == "crets" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleListCoreV1SecretForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							case 'r': // Prefix: "rvice"
								if l := len("rvice"); len(elem) >= l && elem[0:l] == "rvice" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "accounts"
									if l := len("accounts"); len(elem) >= l && elem[0:l] == "accounts" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleListCoreV1ServiceAccountForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
								case 's': // Prefix: "s"
									if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleListCoreV1ServiceForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
								}
							}
						case 'w': // Prefix: "watch/"
							if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'c': // Prefix: "configmaps"
								if l := len("configmaps"); len(elem) >= l && elem[0:l] == "configmaps" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleWatchCoreV1ConfigMapListForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							case 'e': // Prefix: "e"
								if l := len("e"); len(elem) >= l && elem[0:l] == "e" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'n': // Prefix: "ndpoints"
									if l := len("ndpoints"); len(elem) >= l && elem[0:l] == "ndpoints" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleWatchCoreV1EndpointsListForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
								case 'v': // Prefix: "vents"
									if l := len("vents"); len(elem) >= l && elem[0:l] == "vents" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleWatchCoreV1EventListForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
								}
							case 'l': // Prefix: "limitranges"
								if l := len("limitranges"); len(elem) >= l && elem[0:l] == "limitranges" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleWatchCoreV1LimitRangeListForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							case 'n': // Prefix: "n"
								if l := len("n"); len(elem) >= l && elem[0:l] == "n" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "amespaces"
									if l := len("amespaces"); len(elem) >= l && elem[0:l] == "amespaces" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleWatchCoreV1NamespaceListRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											switch r.Method {
											case "GET":
												s.handleWatchCoreV1NamespaceRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'c': // Prefix: "configmaps"
												if l := len("configmaps"); len(elem) >= l && elem[0:l] == "configmaps" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "GET":
														s.handleWatchCoreV1NamespacedConfigMapListRequest([1]string{
															args[0],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args[1] = elem
													elem = ""

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "GET":
															s.handleWatchCoreV1NamespacedConfigMapRequest([2]string{
																args[0],
																args[1],
															}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "GET")
														}

														return
													}
												}
											case 'e': // Prefix: "e"
												if l := len("e"); len(elem) >= l && elem[0:l] == "e" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'n': // Prefix: "ndpoints"
													if l := len("ndpoints"); len(elem) >= l && elem[0:l] == "ndpoints" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "GET":
															s.handleWatchCoreV1NamespacedEndpointsListRequest([1]string{
																args[0],
															}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "GET")
														}

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "GET":
																s.handleWatchCoreV1NamespacedEndpointsRequest([2]string{
																	args[0],
																	args[1],
																}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "GET")
															}

															return
														}
													}
												case 'v': // Prefix: "vents"
													if l := len("vents"); len(elem) >= l && elem[0:l] == "vents" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "GET":
															s.handleWatchCoreV1NamespacedEventListRequest([1]string{
																args[0],
															}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "GET")
														}

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "GET":
																s.handleWatchCoreV1NamespacedEventRequest([2]string{
																	args[0],
																	args[1],
																}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "GET")
															}

															return
														}
													}
												}
											case 'l': // Prefix: "limitranges"
												if l := len("limitranges"); len(elem) >= l && elem[0:l] == "limitranges" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "GET":
														s.handleWatchCoreV1NamespacedLimitRangeListRequest([1]string{
															args[0],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args[1] = elem
													elem = ""

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "GET":
															s.handleWatchCoreV1NamespacedLimitRangeRequest([2]string{
																args[0],
																args[1],
															}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "GET")
														}

														return
													}
												}
											case 'p': // Prefix: "p"
												if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'e': // Prefix: "ersistentvolumeclaims"
													if l := len("ersistentvolumeclaims"); len(elem) >= l && elem[0:l] == "ersistentvolumeclaims" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "GET":
															s.handleWatchCoreV1NamespacedPersistentVolumeClaimListRequest([1]string{
																args[0],
															}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "GET")
														}

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "GET":
																s.handleWatchCoreV1NamespacedPersistentVolumeClaimRequest([2]string{
																	args[0],
																	args[1],
																}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "GET")
															}

															return
														}
													}
												case 'o': // Prefix: "od"
													if l := len("od"); len(elem) >= l && elem[0:l] == "od" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 's': // Prefix: "s"
														if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "GET":
																s.handleWatchCoreV1NamespacedPodListRequest([1]string{
																	args[0],
																}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "GET")
															}

															return
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
																elem = elem[l:]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args[1] = elem
															elem = ""

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "GET":
																	s.handleWatchCoreV1NamespacedPodRequest([2]string{
																		args[0],
																		args[1],
																	}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "GET")
																}

																return
															}
														}
													case 't': // Prefix: "templates"
														if l := len("templates"); len(elem) >= l && elem[0:l] == "templates" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "GET":
																s.handleWatchCoreV1NamespacedPodTemplateListRequest([1]string{
																	args[0],
																}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "GET")
															}

															return
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
																elem = elem[l:]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args[1] = elem
															elem = ""

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "GET":
																	s.handleWatchCoreV1NamespacedPodTemplateRequest([2]string{
																		args[0],
																		args[1],
																	}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "GET")
																}

																return
															}
														}
													}
												}
											case 'r': // Prefix: "re"
												if l := len("re"); len(elem) >= l && elem[0:l] == "re" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'p': // Prefix: "plicationcontrollers"
													if l := len("plicationcontrollers"); len(elem) >= l && elem[0:l] == "plicationcontrollers" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "GET":
															s.handleWatchCoreV1NamespacedReplicationControllerListRequest([1]string{
																args[0],
															}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "GET")
														}

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "GET":
																s.handleWatchCoreV1NamespacedReplicationControllerRequest([2]string{
																	args[0],
																	args[1],
																}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "GET")
															}

															return
														}
													}
												case 's': // Prefix: "sourcequotas"
													if l := len("sourcequotas"); len(elem) >= l && elem[0:l] == "sourcequotas" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "GET":
															s.handleWatchCoreV1NamespacedResourceQuotaListRequest([1]string{
																args[0],
															}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "GET")
														}

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "GET":
																s.handleWatchCoreV1NamespacedResourceQuotaRequest([2]string{
																	args[0],
																	args[1],
																}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "GET")
															}

															return
														}
													}
												}
											case 's': // Prefix: "se"
												if l := len("se"); len(elem) >= l && elem[0:l] == "se" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'c': // Prefix: "crets"
													if l := len("crets"); len(elem) >= l && elem[0:l] == "crets" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "GET":
															s.handleWatchCoreV1NamespacedSecretListRequest([1]string{
																args[0],
															}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "GET")
														}

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "GET":
																s.handleWatchCoreV1NamespacedSecretRequest([2]string{
																	args[0],
																	args[1],
																}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "GET")
															}

															return
														}
													}
												case 'r': // Prefix: "rvice"
													if l := len("rvice"); len(elem) >= l && elem[0:l] == "rvice" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "accounts"
														if l := len("accounts"); len(elem) >= l && elem[0:l] == "accounts" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "GET":
																s.handleWatchCoreV1NamespacedServiceAccountListRequest([1]string{
																	args[0],
																}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "GET")
															}

															return
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
																elem = elem[l:]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args[1] = elem
															elem = ""

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "GET":
																	s.handleWatchCoreV1NamespacedServiceAccountRequest([2]string{
																		args[0],
																		args[1],
																	}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "GET")
																}

																return
															}
														}
													case 's': // Prefix: "s"
														if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "GET":
																s.handleWatchCoreV1NamespacedServiceListRequest([1]string{
																	args[0],
																}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "GET")
															}

															return
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
																elem = elem[l:]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args[1] = elem
															elem = ""

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "GET":
																	s.handleWatchCoreV1NamespacedServiceRequest([2]string{
																		args[0],
																		args[1],
																	}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "GET")
																}

																return
															}
														}
													}
												}
											}
										}
									}
								case 'o': // Prefix: "odes"
									if l := len("odes"); len(elem) >= l && elem[0:l] == "odes" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleWatchCoreV1NodeListRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Leaf parameter
										args[0] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleWatchCoreV1NodeRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
									}
								}
							case 'p': // Prefix: "p"
								if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'e': // Prefix: "ersistentvolume"
									if l := len("ersistentvolume"); len(elem) >= l && elem[0:l] == "ersistentvolume" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'c': // Prefix: "claims"
										if l := len("claims"); len(elem) >= l && elem[0:l] == "claims" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleWatchCoreV1PersistentVolumeClaimListForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
									case 's': // Prefix: "s"
										if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "GET":
												s.handleWatchCoreV1PersistentVolumeListRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleWatchCoreV1PersistentVolumeRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
										}
									}
								case 'o': // Prefix: "od"
									if l := len("od"); len(elem) >= l && elem[0:l] == "od" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 's': // Prefix: "s"
										if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleWatchCoreV1PodListForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
									case 't': // Prefix: "templates"
										if l := len("templates"); len(elem) >= l && elem[0:l] == "templates" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleWatchCoreV1PodTemplateListForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
									}
								}
							case 'r': // Prefix: "re"
								if l := len("re"); len(elem) >= l && elem[0:l] == "re" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'p': // Prefix: "plicationcontrollers"
									if l := len("plicationcontrollers"); len(elem) >= l && elem[0:l] == "plicationcontrollers" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleWatchCoreV1ReplicationControllerListForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
								case 's': // Prefix: "sourcequotas"
									if l := len("sourcequotas"); len(elem) >= l && elem[0:l] == "sourcequotas" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleWatchCoreV1ResourceQuotaListForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
								}
							case 's': // Prefix: "se"
								if l := len("se"); len(elem) >= l && elem[0:l] == "se" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'c': // Prefix: "crets"
									if l := len("crets"); len(elem) >= l && elem[0:l] == "crets" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleWatchCoreV1SecretListForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
								case 'r': // Prefix: "rvice"
									if l := len("rvice"); len(elem) >= l && elem[0:l] == "rvice" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "accounts"
										if l := len("accounts"); len(elem) >= l && elem[0:l] == "accounts" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleWatchCoreV1ServiceAccountListForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
									case 's': // Prefix: "s"
										if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleWatchCoreV1ServiceListForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
									}
								}
							}
						}
					}
				case 's': // Prefix: "s/"
					if l := len("s/"); len(elem) >= l && elem[0:l] == "s/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetAPIVersionsRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case 'a': // Prefix: "a"
						if l := len("a"); len(elem) >= l && elem[0:l] == "a" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'd': // Prefix: "dmissionregistration.k8s.io/"
							if l := len("dmissionregistration.k8s.io/"); len(elem) >= l && elem[0:l] == "dmissionregistration.k8s.io/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleGetAdmissionregistrationAPIGroupRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
							switch elem[0] {
							case 'v': // Prefix: "v1/"
								if l := len("v1/"); len(elem) >= l && elem[0:l] == "v1/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetAdmissionregistrationV1APIResourcesRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
								switch elem[0] {
								case 'm': // Prefix: "mutatingwebhookconfigurations"
									if l := len("mutatingwebhookconfigurations"); len(elem) >= l && elem[0:l] == "mutatingwebhookconfigurations" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleListAdmissionregistrationV1MutatingWebhookConfigurationRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Leaf parameter
										args[0] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleReadAdmissionregistrationV1MutatingWebhookConfigurationRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
									}
								case 'v': // Prefix: "validatingwebhookconfigurations"
									if l := len("validatingwebhookconfigurations"); len(elem) >= l && elem[0:l] == "validatingwebhookconfigurations" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleListAdmissionregistrationV1ValidatingWebhookConfigurationRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Leaf parameter
										args[0] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleReadAdmissionregistrationV1ValidatingWebhookConfigurationRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
									}
								case 'w': // Prefix: "watch/"
									if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'm': // Prefix: "mutatingwebhookconfigurations"
										if l := len("mutatingwebhookconfigurations"); len(elem) >= l && elem[0:l] == "mutatingwebhookconfigurations" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "GET":
												s.handleWatchAdmissionregistrationV1MutatingWebhookConfigurationListRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleWatchAdmissionregistrationV1MutatingWebhookConfigurationRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
										}
									case 'v': // Prefix: "validatingwebhookconfigurations"
										if l := len("validatingwebhookconfigurations"); len(elem) >= l && elem[0:l] == "validatingwebhookconfigurations" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "GET":
												s.handleWatchAdmissionregistrationV1ValidatingWebhookConfigurationListRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleWatchAdmissionregistrationV1ValidatingWebhookConfigurationRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
										}
									}
								}
							}
						case 'p': // Prefix: "p"
							if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'i': // Prefix: "i"
								if l := len("i"); len(elem) >= l && elem[0:l] == "i" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'e': // Prefix: "extensions.k8s.io/"
									if l := len("extensions.k8s.io/"); len(elem) >= l && elem[0:l] == "extensions.k8s.io/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleGetApiextensionsAPIGroupRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
									switch elem[0] {
									case 'v': // Prefix: "v1/"
										if l := len("v1/"); len(elem) >= l && elem[0:l] == "v1/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "GET":
												s.handleGetApiextensionsV1APIResourcesRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
										switch elem[0] {
										case 'c': // Prefix: "customresourcedefinitions"
											if l := len("customresourcedefinitions"); len(elem) >= l && elem[0:l] == "customresourcedefinitions" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "GET":
													s.handleListApiextensionsV1CustomResourceDefinitionRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Match until "/"
												idx := strings.IndexByte(elem, '/')
												if idx < 0 {
													idx = len(elem)
												}
												args[0] = elem[:idx]
												elem = elem[idx:]

												if len(elem) == 0 {
													switch r.Method {
													case "GET":
														s.handleReadApiextensionsV1CustomResourceDefinitionRequest([1]string{
															args[0],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
												switch elem[0] {
												case '/': // Prefix: "/status"
													if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "GET":
															s.handleReadApiextensionsV1CustomResourceDefinitionStatusRequest([1]string{
																args[0],
															}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "GET")
														}

														return
													}
												}
											}
										case 'w': // Prefix: "watch/customresourcedefinitions"
											if l := len("watch/customresourcedefinitions"); len(elem) >= l && elem[0:l] == "watch/customresourcedefinitions" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "GET":
													s.handleWatchApiextensionsV1CustomResourceDefinitionListRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[0] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "GET":
														s.handleWatchApiextensionsV1CustomResourceDefinitionRequest([1]string{
															args[0],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
											}
										}
									}
								case 'r': // Prefix: "registration.k8s.io/"
									if l := len("registration.k8s.io/"); len(elem) >= l && elem[0:l] == "registration.k8s.io/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleGetApiregistrationAPIGroupRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
									switch elem[0] {
									case 'v': // Prefix: "v1/"
										if l := len("v1/"); len(elem) >= l && elem[0:l] == "v1/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "GET":
												s.handleGetApiregistrationV1APIResourcesRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
										switch elem[0] {
										case 'a': // Prefix: "apiservices"
											if l := len("apiservices"); len(elem) >= l && elem[0:l] == "apiservices" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "GET":
													s.handleListApiregistrationV1APIServiceRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Match until "/"
												idx := strings.IndexByte(elem, '/')
												if idx < 0 {
													idx = len(elem)
												}
												args[0] = elem[:idx]
												elem = elem[idx:]

												if len(elem) == 0 {
													switch r.Method {
													case "GET":
														s.handleReadApiregistrationV1APIServiceRequest([1]string{
															args[0],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
												switch elem[0] {
												case '/': // Prefix: "/status"
													if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "GET":
															s.handleReadApiregistrationV1APIServiceStatusRequest([1]string{
																args[0],
															}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "GET")
														}

														return
													}
												}
											}
										case 'w': // Prefix: "watch/apiservices"
											if l := len("watch/apiservices"); len(elem) >= l && elem[0:l] == "watch/apiservices" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "GET":
													s.handleWatchApiregistrationV1APIServiceListRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[0] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "GET":
														s.handleWatchApiregistrationV1APIServiceRequest([1]string{
															args[0],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
											}
										}
									}
								}
							case 'p': // Prefix: "ps/"
								if l := len("ps/"); len(elem) >= l && elem[0:l] == "ps/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetAppsAPIGroupRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
								switch elem[0] {
								case 'v': // Prefix: "v1/"
									if l := len("v1/"); len(elem) >= l && elem[0:l] == "v1/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleGetAppsV1APIResourcesRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
									switch elem[0] {
									case 'c': // Prefix: "controllerrevisions"
										if l := len("controllerrevisions"); len(elem) >= l && elem[0:l] == "controllerrevisions" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleListAppsV1ControllerRevisionForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
									case 'd': // Prefix: "d"
										if l := len("d"); len(elem) >= l && elem[0:l] == "d" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "aemonsets"
											if l := len("aemonsets"); len(elem) >= l && elem[0:l] == "aemonsets" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleListAppsV1DaemonSetForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
										case 'e': // Prefix: "eployments"
											if l := len("eployments"); len(elem) >= l && elem[0:l] == "eployments" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleListAppsV1DeploymentForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
										}
									case 'n': // Prefix: "namespaces/"
										if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "namespace"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'c': // Prefix: "controllerrevisions"
												if l := len("controllerrevisions"); len(elem) >= l && elem[0:l] == "controllerrevisions" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "GET":
														s.handleListAppsV1NamespacedControllerRevisionRequest([1]string{
															args[0],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args[1] = elem
													elem = ""

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "GET":
															s.handleReadAppsV1NamespacedControllerRevisionRequest([2]string{
																args[0],
																args[1],
															}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "GET")
														}

														return
													}
												}
											case 'd': // Prefix: "d"
												if l := len("d"); len(elem) >= l && elem[0:l] == "d" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "aemonsets"
													if l := len("aemonsets"); len(elem) >= l && elem[0:l] == "aemonsets" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "GET":
															s.handleListAppsV1NamespacedDaemonSetRequest([1]string{
																args[0],
															}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "GET")
														}

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Match until "/"
														idx := strings.IndexByte(elem, '/')
														if idx < 0 {
															idx = len(elem)
														}
														args[1] = elem[:idx]
														elem = elem[idx:]

														if len(elem) == 0 {
															switch r.Method {
															case "GET":
																s.handleReadAppsV1NamespacedDaemonSetRequest([2]string{
																	args[0],
																	args[1],
																}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "GET")
															}

															return
														}
														switch elem[0] {
														case '/': // Prefix: "/status"
															if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "GET":
																	s.handleReadAppsV1NamespacedDaemonSetStatusRequest([2]string{
																		args[0],
																		args[1],
																	}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "GET")
																}

																return
															}
														}
													}
												case 'e': // Prefix: "eployments"
													if l := len("eployments"); len(elem) >= l && elem[0:l] == "eployments" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "GET":
															s.handleListAppsV1NamespacedDeploymentRequest([1]string{
																args[0],
															}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "GET")
														}

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Match until "/"
														idx := strings.IndexByte(elem, '/')
														if idx < 0 {
															idx = len(elem)
														}
														args[1] = elem[:idx]
														elem = elem[idx:]

														if len(elem) == 0 {
															switch r.Method {
															case "GET":
																s.handleReadAppsV1NamespacedDeploymentRequest([2]string{
																	args[0],
																	args[1],
																}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "GET")
															}

															return
														}
														switch elem[0] {
														case '/': // Prefix: "/s"
															if l := len("/s"); len(elem) >= l && elem[0:l] == "/s" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																break
															}
															switch elem[0] {
															case 'c': // Prefix: "cale"
																if l := len("cale"); len(elem) >= l && elem[0:l] == "cale" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch r.Method {
																	case "GET":
																		s.handleReadAppsV1NamespacedDeploymentScaleRequest([2]string{
																			args[0],
																			args[1],
																		}, elemIsEscaped, w, r)
																	default:
																		s.notAllowed(w, r, "GET")
																	}

																	return
																}
															case 't': // Prefix: "tatus"
																if l := len("tatus"); len(elem) >= l && elem[0:l] == "tatus" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch r.Method {
																	case "GET":
																		s.handleReadAppsV1NamespacedDeploymentStatusRequest([2]string{
																			args[0],
																			args[1],
																		}, elemIsEscaped, w, r)
																	default:
																		s.notAllowed(w, r, "GET")
																	}

																	return
																}
															}
														}
													}
												}
											case 'r': // Prefix: "replicasets"
												if l := len("replicasets"); len(elem) >= l && elem[0:l] == "replicasets" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "GET":
														s.handleListAppsV1NamespacedReplicaSetRequest([1]string{
															args[0],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Match until "/"
													idx := strings.IndexByte(elem, '/')
													if idx < 0 {
														idx = len(elem)
													}
													args[1] = elem[:idx]
													elem = elem[idx:]

													if len(elem) == 0 {
														switch r.Method {
														case "GET":
															s.handleReadAppsV1NamespacedReplicaSetRequest([2]string{
																args[0],
																args[1],
															}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "GET")
														}

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/s"
														if l := len("/s"); len(elem) >= l && elem[0:l] == "/s" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															break
														}
														switch elem[0] {
														case 'c': // Prefix: "cale"
															if l := len("cale"); len(elem) >= l && elem[0:l] == "cale" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "GET":
																	s.handleReadAppsV1NamespacedReplicaSetScaleRequest([2]string{
																		args[0],
																		args[1],
																	}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "GET")
																}

																return
															}
														case 't': // Prefix: "tatus"
															if l := len("tatus"); len(elem) >= l && elem[0:l] == "tatus" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "GET":
																	s.handleReadAppsV1NamespacedReplicaSetStatusRequest([2]string{
																		args[0],
																		args[1],
																	}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "GET")
																}

																return
															}
														}
													}
												}
											case 's': // Prefix: "statefulsets"
												if l := len("statefulsets"); len(elem) >= l && elem[0:l] == "statefulsets" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "GET":
														s.handleListAppsV1NamespacedStatefulSetRequest([1]string{
															args[0],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Match until "/"
													idx := strings.IndexByte(elem, '/')
													if idx < 0 {
														idx = len(elem)
													}
													args[1] = elem[:idx]
													elem = elem[idx:]

													if len(elem) == 0 {
														switch r.Method {
														case "GET":
															s.handleReadAppsV1NamespacedStatefulSetRequest([2]string{
																args[0],
																args[1],
															}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "GET")
														}

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/s"
														if l := len("/s"); len(elem) >= l && elem[0:l] == "/s" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															break
														}
														switch elem[0] {
														case 'c': // Prefix: "cale"
															if l := len("cale"); len(elem) >= l && elem[0:l] == "cale" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "GET":
																	s.handleReadAppsV1NamespacedStatefulSetScaleRequest([2]string{
																		args[0],
																		args[1],
																	}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "GET")
																}

																return
															}
														case 't': // Prefix: "tatus"
															if l := len("tatus"); len(elem) >= l && elem[0:l] == "tatus" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "GET":
																	s.handleReadAppsV1NamespacedStatefulSetStatusRequest([2]string{
																		args[0],
																		args[1],
																	}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "GET")
																}

																return
															}
														}
													}
												}
											}
										}
									case 'r': // Prefix: "replicasets"
										if l := len("replicasets"); len(elem) >= l && elem[0:l] == "replicasets" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleListAppsV1ReplicaSetForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
									case 's': // Prefix: "statefulsets"
										if l := len("statefulsets"); len(elem) >= l && elem[0:l] == "statefulsets" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleListAppsV1StatefulSetForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
									case 'w': // Prefix: "watch/"
										if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'c': // Prefix: "controllerrevisions"
											if l := len("controllerrevisions"); len(elem) >= l && elem[0:l] == "controllerrevisions" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleWatchAppsV1ControllerRevisionListForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
										case 'd': // Prefix: "d"
											if l := len("d"); len(elem) >= l && elem[0:l] == "d" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "aemonsets"
												if l := len("aemonsets"); len(elem) >= l && elem[0:l] == "aemonsets" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "GET":
														s.handleWatchAppsV1DaemonSetListForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
											case 'e': // Prefix: "eployments"
												if l := len("eployments"); len(elem) >= l && elem[0:l] == "eployments" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "GET":
														s.handleWatchAppsV1DeploymentListForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
											}
										case 'n': // Prefix: "namespaces/"
											if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "namespace"
											// Match until "/"
											idx := strings.IndexByte(elem, '/')
											if idx < 0 {
												idx = len(elem)
											}
											args[0] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'c': // Prefix: "controllerrevisions"
													if l := len("controllerrevisions"); len(elem) >= l && elem[0:l] == "controllerrevisions" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "GET":
															s.handleWatchAppsV1NamespacedControllerRevisionListRequest([1]string{
																args[0],
															}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "GET")
														}

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "GET":
																s.handleWatchAppsV1NamespacedControllerRevisionRequest([2]string{
																	args[0],
																	args[1],
																}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "GET")
															}

															return
														}
													}
												case 'd': // Prefix: "d"
													if l := len("d"); len(elem) >= l && elem[0:l] == "d" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "aemonsets"
														if l := len("aemonsets"); len(elem) >= l && elem[0:l] == "aemonsets" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "GET":
																s.handleWatchAppsV1NamespacedDaemonSetListRequest([1]string{
																	args[0],
																}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "GET")
															}

															return
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
																elem = elem[l:]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args[1] = elem
															elem = ""

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "GET":
																	s.handleWatchAppsV1NamespacedDaemonSetRequest([2]string{
																		args[0],
																		args[1],
																	}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "GET")
																}

																return
															}
														}
													case 'e': // Prefix: "eployments"
														if l := len("eployments"); len(elem) >= l && elem[0:l] == "eployments" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "GET":
																s.handleWatchAppsV1NamespacedDeploymentListRequest([1]string{
																	args[0],
																}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "GET")
															}

															return
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
																elem = elem[l:]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args[1] = elem
															elem = ""

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "GET":
																	s.handleWatchAppsV1NamespacedDeploymentRequest([2]string{
																		args[0],
																		args[1],
																	}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "GET")
																}

																return
															}
														}
													}
												case 'r': // Prefix: "replicasets"
													if l := len("replicasets"); len(elem) >= l && elem[0:l] == "replicasets" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "GET":
															s.handleWatchAppsV1NamespacedReplicaSetListRequest([1]string{
																args[0],
															}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "GET")
														}

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "GET":
																s.handleWatchAppsV1NamespacedReplicaSetRequest([2]string{
																	args[0],
																	args[1],
																}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "GET")
															}

															return
														}
													}
												case 's': // Prefix: "statefulsets"
													if l := len("statefulsets"); len(elem) >= l && elem[0:l] == "statefulsets" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "GET":
															s.handleWatchAppsV1NamespacedStatefulSetListRequest([1]string{
																args[0],
															}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "GET")
														}

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "GET":
																s.handleWatchAppsV1NamespacedStatefulSetRequest([2]string{
																	args[0],
																	args[1],
																}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "GET")
															}

															return
														}
													}
												}
											}
										case 'r': // Prefix: "replicasets"
											if l := len("replicasets"); len(elem) >= l && elem[0:l] == "replicasets" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleWatchAppsV1ReplicaSetListForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
										case 's': // Prefix: "statefulsets"
											if l := len("statefulsets"); len(elem) >= l && elem[0:l] == "statefulsets" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleWatchAppsV1StatefulSetListForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
										}
									}
								}
							}
						case 'u': // Prefix: "ut"
							if l := len("ut"); len(elem) >= l && elem[0:l] == "ut" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'h': // Prefix: "h"
								if l := len("h"); len(elem) >= l && elem[0:l] == "h" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'e': // Prefix: "entication.k8s.io/"
									if l := len("entication.k8s.io/"); len(elem) >= l && elem[0:l] == "entication.k8s.io/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleGetAuthenticationAPIGroupRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
									switch elem[0] {
									case 'v': // Prefix: "v1/"
										if l := len("v1/"); len(elem) >= l && elem[0:l] == "v1/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleGetAuthenticationV1APIResourcesRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
									}
								case 'o': // Prefix: "orization.k8s.io/"
									if l := len("orization.k8s.io/"); len(elem) >= l && elem[0:l] == "orization.k8s.io/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleGetAuthorizationAPIGroupRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
									switch elem[0] {
									case 'v': // Prefix: "v1/"
										if l := len("v1/"); len(elem) >= l && elem[0:l] == "v1/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleGetAuthorizationV1APIResourcesRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
									}
								}
							case 'o': // Prefix: "oscaling/"
								if l := len("oscaling/"); len(elem) >= l && elem[0:l] == "oscaling/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetAutoscalingAPIGroupRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
								switch elem[0] {
								case 'v': // Prefix: "v"
									if l := len("v"); len(elem) >= l && elem[0:l] == "v" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '1': // Prefix: "1/"
										if l := len("1/"); len(elem) >= l && elem[0:l] == "1/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "GET":
												s.handleGetAutoscalingV1APIResourcesRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
										switch elem[0] {
										case 'h': // Prefix: "horizontalpodautoscalers"
											if l := len("horizontalpodautoscalers"); len(elem) >= l && elem[0:l] == "horizontalpodautoscalers" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
										case 'n': // Prefix: "namespaces/"
											if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "namespace"
											// Match until "/"
											idx := strings.IndexByte(elem, '/')
											if idx < 0 {
												idx = len(elem)
											}
											args[0] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case '/': // Prefix: "/horizontalpodautoscalers"
												if l := len("/horizontalpodautoscalers"); len(elem) >= l && elem[0:l] == "/horizontalpodautoscalers" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "GET":
														s.handleListAutoscalingV1NamespacedHorizontalPodAutoscalerRequest([1]string{
															args[0],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Match until "/"
													idx := strings.IndexByte(elem, '/')
													if idx < 0 {
														idx = len(elem)
													}
													args[1] = elem[:idx]
													elem = elem[idx:]

													if len(elem) == 0 {
														switch r.Method {
														case "GET":
															s.handleReadAutoscalingV1NamespacedHorizontalPodAutoscalerRequest([2]string{
																args[0],
																args[1],
															}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "GET")
														}

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/status"
														if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "GET":
																s.handleReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusRequest([2]string{
																	args[0],
																	args[1],
																}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "GET")
															}

															return
														}
													}
												}
											}
										case 'w': // Prefix: "watch/"
											if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'h': // Prefix: "horizontalpodautoscalers"
												if l := len("horizontalpodautoscalers"); len(elem) >= l && elem[0:l] == "horizontalpodautoscalers" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "GET":
														s.handleWatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
											case 'n': // Prefix: "namespaces/"
												if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "namespace"
												// Match until "/"
												idx := strings.IndexByte(elem, '/')
												if idx < 0 {
													idx = len(elem)
												}
												args[0] = elem[:idx]
												elem = elem[idx:]

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case '/': // Prefix: "/horizontalpodautoscalers"
													if l := len("/horizontalpodautoscalers"); len(elem) >= l && elem[0:l] == "/horizontalpodautoscalers" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "GET":
															s.handleWatchAutoscalingV1NamespacedHorizontalPodAutoscalerListRequest([1]string{
																args[0],
															}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "GET")
														}

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "GET":
																s.handleWatchAutoscalingV1NamespacedHorizontalPodAutoscalerRequest([2]string{
																	args[0],
																	args[1],
																}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "GET")
															}

															return
														}
													}
												}
											}
										}
									case '2': // Prefix: "2beta"
										if l := len("2beta"); len(elem) >= l && elem[0:l] == "2beta" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '1': // Prefix: "1/"
											if l := len("1/"); len(elem) >= l && elem[0:l] == "1/" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "GET":
													s.handleGetAutoscalingV2beta1APIResourcesRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
											switch elem[0] {
											case 'h': // Prefix: "horizontalpodautoscalers"
												if l := len("horizontalpodautoscalers"); len(elem) >= l && elem[0:l] == "horizontalpodautoscalers" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "GET":
														s.handleListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
											case 'n': // Prefix: "namespaces/"
												if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "namespace"
												// Match until "/"
												idx := strings.IndexByte(elem, '/')
												if idx < 0 {
													idx = len(elem)
												}
												args[0] = elem[:idx]
												elem = elem[idx:]

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case '/': // Prefix: "/horizontalpodautoscalers"
													if l := len("/horizontalpodautoscalers"); len(elem) >= l && elem[0:l] == "/horizontalpodautoscalers" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "GET":
															s.handleListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest([1]string{
																args[0],
															}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "GET")
														}

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Match until "/"
														idx := strings.IndexByte(elem, '/')
														if idx < 0 {
															idx = len(elem)
														}
														args[1] = elem[:idx]
														elem = elem[idx:]

														if len(elem) == 0 {
															switch r.Method {
															case "GET":
																s.handleReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest([2]string{
																	args[0],
																	args[1],
																}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "GET")
															}

															return
														}
														switch elem[0] {
														case '/': // Prefix: "/status"
															if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "GET":
																	s.handleReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusRequest([2]string{
																		args[0],
																		args[1],
																	}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "GET")
																}

																return
															}
														}
													}
												}
											case 'w': // Prefix: "watch/"
												if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'h': // Prefix: "horizontalpodautoscalers"
													if l := len("horizontalpodautoscalers"); len(elem) >= l && elem[0:l] == "horizontalpodautoscalers" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "GET":
															s.handleWatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "GET")
														}

														return
													}
												case 'n': // Prefix: "namespaces/"
													if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "namespace"
													// Match until "/"
													idx := strings.IndexByte(elem, '/')
													if idx < 0 {
														idx = len(elem)
													}
													args[0] = elem[:idx]
													elem = elem[idx:]

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case '/': // Prefix: "/horizontalpodautoscalers"
														if l := len("/horizontalpodautoscalers"); len(elem) >= l && elem[0:l] == "/horizontalpodautoscalers" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "GET":
																s.handleWatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListRequest([1]string{
																	args[0],
																}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "GET")
															}

															return
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
																elem = elem[l:]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args[1] = elem
															elem = ""

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "GET":
																	s.handleWatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRequest([2]string{
																		args[0],
																		args[1],
																	}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "GET")
																}

																return
															}
														}
													}
												}
											}
										case '2': // Prefix: "2/"
											if l := len("2/"); len(elem) >= l && elem[0:l] == "2/" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "GET":
													s.handleGetAutoscalingV2beta2APIResourcesRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
											switch elem[0] {
											case 'h': // Prefix: "horizontalpodautoscalers"
												if l := len("horizontalpodautoscalers"); len(elem) >= l && elem[0:l] == "horizontalpodautoscalers" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "GET":
														s.handleListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
											case 'n': // Prefix: "namespaces/"
												if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "namespace"
												// Match until "/"
												idx := strings.IndexByte(elem, '/')
												if idx < 0 {
													idx = len(elem)
												}
												args[0] = elem[:idx]
												elem = elem[idx:]

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case '/': // Prefix: "/horizontalpodautoscalers"
													if l := len("/horizontalpodautoscalers"); len(elem) >= l && elem[0:l] == "/horizontalpodautoscalers" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "GET":
															s.handleListAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRequest([1]string{
																args[0],
															}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "GET")
														}

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Match until "/"
														idx := strings.IndexByte(elem, '/')
														if idx < 0 {
															idx = len(elem)
														}
														args[1] = elem[:idx]
														elem = elem[idx:]

														if len(elem) == 0 {
															switch r.Method {
															case "GET":
																s.handleReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRequest([2]string{
																	args[0],
																	args[1],
																}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "GET")
															}

															return
														}
														switch elem[0] {
														case '/': // Prefix: "/status"
															if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "GET":
																	s.handleReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusRequest([2]string{
																		args[0],
																		args[1],
																	}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "GET")
																}

																return
															}
														}
													}
												}
											case 'w': // Prefix: "watch/"
												if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'h': // Prefix: "horizontalpodautoscalers"
													if l := len("horizontalpodautoscalers"); len(elem) >= l && elem[0:l] == "horizontalpodautoscalers" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "GET":
															s.handleWatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "GET")
														}

														return
													}
												case 'n': // Prefix: "namespaces/"
													if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "namespace"
													// Match until "/"
													idx := strings.IndexByte(elem, '/')
													if idx < 0 {
														idx = len(elem)
													}
													args[0] = elem[:idx]
													elem = elem[idx:]

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case '/': // Prefix: "/horizontalpodautoscalers"
														if l := len("/horizontalpodautoscalers"); len(elem) >= l && elem[0:l] == "/horizontalpodautoscalers" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "GET":
																s.handleWatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListRequest([1]string{
																	args[0],
																}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "GET")
															}

															return
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
																elem = elem[l:]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args[1] = elem
															elem = ""

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "GET":
																	s.handleWatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRequest([2]string{
																		args[0],
																		args[1],
																	}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "GET")
																}

																return
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					case 'b': // Prefix: "batch/"
						if l := len("batch/"); len(elem) >= l && elem[0:l] == "batch/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleGetBatchAPIGroupRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
						switch elem[0] {
						case 'v': // Prefix: "v1"
							if l := len("v1"); len(elem) >= l && elem[0:l] == "v1" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetBatchV1APIResourcesRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
								switch elem[0] {
								case 'c': // Prefix: "cronjobs"
									if l := len("cronjobs"); len(elem) >= l && elem[0:l] == "cronjobs" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleListBatchV1CronJobForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
								case 'j': // Prefix: "jobs"
									if l := len("jobs"); len(elem) >= l && elem[0:l] == "jobs" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleListBatchV1JobForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
								case 'n': // Prefix: "namespaces/"
									if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "namespace"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'c': // Prefix: "cronjobs"
											if l := len("cronjobs"); len(elem) >= l && elem[0:l] == "cronjobs" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "GET":
													s.handleListBatchV1NamespacedCronJobRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Match until "/"
												idx := strings.IndexByte(elem, '/')
												if idx < 0 {
													idx = len(elem)
												}
												args[1] = elem[:idx]
												elem = elem[idx:]

												if len(elem) == 0 {
													switch r.Method {
													case "GET":
														s.handleReadBatchV1NamespacedCronJobRequest([2]string{
															args[0],
															args[1],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
												switch elem[0] {
												case '/': // Prefix: "/status"
													if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "GET":
															s.handleReadBatchV1NamespacedCronJobStatusRequest([2]string{
																args[0],
																args[1],
															}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "GET")
														}

														return
													}
												}
											}
										case 'j': // Prefix: "jobs"
											if l := len("jobs"); len(elem) >= l && elem[0:l] == "jobs" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "GET":
													s.handleListBatchV1NamespacedJobRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Match until "/"
												idx := strings.IndexByte(elem, '/')
												if idx < 0 {
													idx = len(elem)
												}
												args[1] = elem[:idx]
												elem = elem[idx:]

												if len(elem) == 0 {
													switch r.Method {
													case "GET":
														s.handleReadBatchV1NamespacedJobRequest([2]string{
															args[0],
															args[1],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
												switch elem[0] {
												case '/': // Prefix: "/status"
													if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "GET":
															s.handleReadBatchV1NamespacedJobStatusRequest([2]string{
																args[0],
																args[1],
															}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "GET")
														}

														return
													}
												}
											}
										}
									}
								case 'w': // Prefix: "watch/"
									if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'c': // Prefix: "cronjobs"
										if l := len("cronjobs"); len(elem) >= l && elem[0:l] == "cronjobs" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleWatchBatchV1CronJobListForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
									case 'j': // Prefix: "jobs"
										if l := len("jobs"); len(elem) >= l && elem[0:l] == "jobs" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleWatchBatchV1JobListForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
									case 'n': // Prefix: "namespaces/"
										if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "namespace"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'c': // Prefix: "cronjobs"
												if l := len("cronjobs"); len(elem) >= l && elem[0:l] == "cronjobs" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "GET":
														s.handleWatchBatchV1NamespacedCronJobListRequest([1]string{
															args[0],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args[1] = elem
													elem = ""

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "GET":
															s.handleWatchBatchV1NamespacedCronJobRequest([2]string{
																args[0],
																args[1],
															}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "GET")
														}

														return
													}
												}
											case 'j': // Prefix: "jobs"
												if l := len("jobs"); len(elem) >= l && elem[0:l] == "jobs" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "GET":
														s.handleWatchBatchV1NamespacedJobListRequest([1]string{
															args[0],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args[1] = elem
													elem = ""

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "GET":
															s.handleWatchBatchV1NamespacedJobRequest([2]string{
																args[0],
																args[1],
															}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "GET")
														}

														return
													}
												}
											}
										}
									}
								}
							case 'b': // Prefix: "beta1/"
								if l := len("beta1/"); len(elem) >= l && elem[0:l] == "beta1/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetBatchV1beta1APIResourcesRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
								switch elem[0] {
								case 'c': // Prefix: "cronjobs"
									if l := len("cronjobs"); len(elem) >= l && elem[0:l] == "cronjobs" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleListBatchV1beta1CronJobForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
								case 'n': // Prefix: "namespaces/"
									if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "namespace"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '/': // Prefix: "/cronjobs"
										if l := len("/cronjobs"); len(elem) >= l && elem[0:l] == "/cronjobs" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "GET":
												s.handleListBatchV1beta1NamespacedCronJobRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Match until "/"
											idx := strings.IndexByte(elem, '/')
											if idx < 0 {
												idx = len(elem)
											}
											args[1] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												switch r.Method {
												case "GET":
													s.handleReadBatchV1beta1NamespacedCronJobRequest([2]string{
														args[0],
														args[1],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/status"
												if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "GET":
														s.handleReadBatchV1beta1NamespacedCronJobStatusRequest([2]string{
															args[0],
															args[1],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
											}
										}
									}
								case 'w': // Prefix: "watch/"
									if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'c': // Prefix: "cronjobs"
										if l := len("cronjobs"); len(elem) >= l && elem[0:l] == "cronjobs" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleWatchBatchV1beta1CronJobListForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
									case 'n': // Prefix: "namespaces/"
										if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "namespace"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/cronjobs"
											if l := len("/cronjobs"); len(elem) >= l && elem[0:l] == "/cronjobs" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "GET":
													s.handleWatchBatchV1beta1NamespacedCronJobListRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "GET":
														s.handleWatchBatchV1beta1NamespacedCronJobRequest([2]string{
															args[0],
															args[1],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
											}
										}
									}
								}
							}
						}
					case 'c': // Prefix: "c"
						if l := len("c"); len(elem) >= l && elem[0:l] == "c" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'e': // Prefix: "ertificates.k8s.io/"
							if l := len("ertificates.k8s.io/"); len(elem) >= l && elem[0:l] == "ertificates.k8s.io/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleGetCertificatesAPIGroupRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
							switch elem[0] {
							case 'v': // Prefix: "v1/"
								if l := len("v1/"); len(elem) >= l && elem[0:l] == "v1/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetCertificatesV1APIResourcesRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
								switch elem[0] {
								case 'c': // Prefix: "certificatesigningrequests"
									if l := len("certificatesigningrequests"); len(elem) >= l && elem[0:l] == "certificatesigningrequests" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleListCertificatesV1CertificateSigningRequestRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											switch r.Method {
											case "GET":
												s.handleReadCertificatesV1CertificateSigningRequestRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "approval"
												if l := len("approval"); len(elem) >= l && elem[0:l] == "approval" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "GET":
														s.handleReadCertificatesV1CertificateSigningRequestApprovalRequest([1]string{
															args[0],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
											case 's': // Prefix: "status"
												if l := len("status"); len(elem) >= l && elem[0:l] == "status" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "GET":
														s.handleReadCertificatesV1CertificateSigningRequestStatusRequest([1]string{
															args[0],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
											}
										}
									}
								case 'w': // Prefix: "watch/certificatesigningrequests"
									if l := len("watch/certificatesigningrequests"); len(elem) >= l && elem[0:l] == "watch/certificatesigningrequests" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleWatchCertificatesV1CertificateSigningRequestListRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Leaf parameter
										args[0] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleWatchCertificatesV1CertificateSigningRequestRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
									}
								}
							}
						case 'o': // Prefix: "oordination.k8s.io/"
							if l := len("oordination.k8s.io/"); len(elem) >= l && elem[0:l] == "oordination.k8s.io/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleGetCoordinationAPIGroupRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
							switch elem[0] {
							case 'v': // Prefix: "v1/"
								if l := len("v1/"); len(elem) >= l && elem[0:l] == "v1/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetCoordinationV1APIResourcesRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
								switch elem[0] {
								case 'l': // Prefix: "leases"
									if l := len("leases"); len(elem) >= l && elem[0:l] == "leases" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleListCoordinationV1LeaseForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
								case 'n': // Prefix: "namespaces/"
									if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "namespace"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '/': // Prefix: "/leases"
										if l := len("/leases"); len(elem) >= l && elem[0:l] == "/leases" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "GET":
												s.handleListCoordinationV1NamespacedLeaseRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[1] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleReadCoordinationV1NamespacedLeaseRequest([2]string{
														args[0],
														args[1],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
										}
									}
								case 'w': // Prefix: "watch/"
									if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'l': // Prefix: "leases"
										if l := len("leases"); len(elem) >= l && elem[0:l] == "leases" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleWatchCoordinationV1LeaseListForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
									case 'n': // Prefix: "namespaces/"
										if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "namespace"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/leases"
											if l := len("/leases"); len(elem) >= l && elem[0:l] == "/leases" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "GET":
													s.handleWatchCoordinationV1NamespacedLeaseListRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "GET":
														s.handleWatchCoordinationV1NamespacedLeaseRequest([2]string{
															args[0],
															args[1],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
											}
										}
									}
								}
							}
						}
					case 'd': // Prefix: "discovery.k8s.io/"
						if l := len("discovery.k8s.io/"); len(elem) >= l && elem[0:l] == "discovery.k8s.io/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleGetDiscoveryAPIGroupRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
						switch elem[0] {
						case 'v': // Prefix: "v1"
							if l := len("v1"); len(elem) >= l && elem[0:l] == "v1" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetDiscoveryV1APIResourcesRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
								switch elem[0] {
								case 'e': // Prefix: "endpointslices"
									if l := len("endpointslices"); len(elem) >= l && elem[0:l] == "endpointslices" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleListDiscoveryV1EndpointSliceForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
								case 'n': // Prefix: "namespaces/"
									if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "namespace"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '/': // Prefix: "/endpointslices"
										if l := len("/endpointslices"); len(elem) >= l && elem[0:l] == "/endpointslices" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "GET":
												s.handleListDiscoveryV1NamespacedEndpointSliceRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[1] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleReadDiscoveryV1NamespacedEndpointSliceRequest([2]string{
														args[0],
														args[1],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
										}
									}
								case 'w': // Prefix: "watch/"
									if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'e': // Prefix: "endpointslices"
										if l := len("endpointslices"); len(elem) >= l && elem[0:l] == "endpointslices" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleWatchDiscoveryV1EndpointSliceListForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
									case 'n': // Prefix: "namespaces/"
										if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "namespace"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/endpointslices"
											if l := len("/endpointslices"); len(elem) >= l && elem[0:l] == "/endpointslices" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "GET":
													s.handleWatchDiscoveryV1NamespacedEndpointSliceListRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "GET":
														s.handleWatchDiscoveryV1NamespacedEndpointSliceRequest([2]string{
															args[0],
															args[1],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
											}
										}
									}
								}
							case 'b': // Prefix: "beta1/"
								if l := len("beta1/"); len(elem) >= l && elem[0:l] == "beta1/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetDiscoveryV1beta1APIResourcesRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
								switch elem[0] {
								case 'e': // Prefix: "endpointslices"
									if l := len("endpointslices"); len(elem) >= l && elem[0:l] == "endpointslices" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleListDiscoveryV1beta1EndpointSliceForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
								case 'n': // Prefix: "namespaces/"
									if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "namespace"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '/': // Prefix: "/endpointslices"
										if l := len("/endpointslices"); len(elem) >= l && elem[0:l] == "/endpointslices" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "GET":
												s.handleListDiscoveryV1beta1NamespacedEndpointSliceRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[1] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleReadDiscoveryV1beta1NamespacedEndpointSliceRequest([2]string{
														args[0],
														args[1],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
										}
									}
								case 'w': // Prefix: "watch/"
									if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'e': // Prefix: "endpointslices"
										if l := len("endpointslices"); len(elem) >= l && elem[0:l] == "endpointslices" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleWatchDiscoveryV1beta1EndpointSliceListForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
									case 'n': // Prefix: "namespaces/"
										if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "namespace"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/endpointslices"
											if l := len("/endpointslices"); len(elem) >= l && elem[0:l] == "/endpointslices" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "GET":
													s.handleWatchDiscoveryV1beta1NamespacedEndpointSliceListRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "GET":
														s.handleWatchDiscoveryV1beta1NamespacedEndpointSliceRequest([2]string{
															args[0],
															args[1],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
											}
										}
									}
								}
							}
						}
					case 'e': // Prefix: "events.k8s.io/"
						if l := len("events.k8s.io/"); len(elem) >= l && elem[0:l] == "events.k8s.io/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleGetEventsAPIGroupRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
						switch elem[0] {
						case 'v': // Prefix: "v1"
							if l := len("v1"); len(elem) >= l && elem[0:l] == "v1" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetEventsV1APIResourcesRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
								switch elem[0] {
								case 'e': // Prefix: "events"
									if l := len("events"); len(elem) >= l && elem[0:l] == "events" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleListEventsV1EventForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
								case 'n': // Prefix: "namespaces/"
									if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "namespace"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '/': // Prefix: "/events"
										if l := len("/events"); len(elem) >= l && elem[0:l] == "/events" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "GET":
												s.handleListEventsV1NamespacedEventRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[1] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleReadEventsV1NamespacedEventRequest([2]string{
														args[0],
														args[1],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
										}
									}
								case 'w': // Prefix: "watch/"
									if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'e': // Prefix: "events"
										if l := len("events"); len(elem) >= l && elem[0:l] == "events" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleWatchEventsV1EventListForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
									case 'n': // Prefix: "namespaces/"
										if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "namespace"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/events"
											if l := len("/events"); len(elem) >= l && elem[0:l] == "/events" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "GET":
													s.handleWatchEventsV1NamespacedEventListRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "GET":
														s.handleWatchEventsV1NamespacedEventRequest([2]string{
															args[0],
															args[1],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
											}
										}
									}
								}
							case 'b': // Prefix: "beta1/"
								if l := len("beta1/"); len(elem) >= l && elem[0:l] == "beta1/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetEventsV1beta1APIResourcesRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
								switch elem[0] {
								case 'e': // Prefix: "events"
									if l := len("events"); len(elem) >= l && elem[0:l] == "events" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleListEventsV1beta1EventForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
								case 'n': // Prefix: "namespaces/"
									if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "namespace"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '/': // Prefix: "/events"
										if l := len("/events"); len(elem) >= l && elem[0:l] == "/events" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "GET":
												s.handleListEventsV1beta1NamespacedEventRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[1] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleReadEventsV1beta1NamespacedEventRequest([2]string{
														args[0],
														args[1],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
										}
									}
								case 'w': // Prefix: "watch/"
									if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'e': // Prefix: "events"
										if l := len("events"); len(elem) >= l && elem[0:l] == "events" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleWatchEventsV1beta1EventListForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
									case 'n': // Prefix: "namespaces/"
										if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "namespace"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/events"
											if l := len("/events"); len(elem) >= l && elem[0:l] == "/events" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "GET":
													s.handleWatchEventsV1beta1NamespacedEventListRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "GET":
														s.handleWatchEventsV1beta1NamespacedEventRequest([2]string{
															args[0],
															args[1],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
											}
										}
									}
								}
							}
						}
					case 'f': // Prefix: "flowcontrol.apiserver.k8s.io/"
						if l := len("flowcontrol.apiserver.k8s.io/"); len(elem) >= l && elem[0:l] == "flowcontrol.apiserver.k8s.io/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleGetFlowcontrolApiserverAPIGroupRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
						switch elem[0] {
						case 'v': // Prefix: "v1beta"
							if l := len("v1beta"); len(elem) >= l && elem[0:l] == "v1beta" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case '1': // Prefix: "1/"
								if l := len("1/"); len(elem) >= l && elem[0:l] == "1/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetFlowcontrolApiserverV1beta1APIResourcesRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
								switch elem[0] {
								case 'f': // Prefix: "flowschemas"
									if l := len("flowschemas"); len(elem) >= l && elem[0:l] == "flowschemas" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleListFlowcontrolApiserverV1beta1FlowSchemaRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											switch r.Method {
											case "GET":
												s.handleReadFlowcontrolApiserverV1beta1FlowSchemaRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/status"
											if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleReadFlowcontrolApiserverV1beta1FlowSchemaStatusRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
										}
									}
								case 'p': // Prefix: "prioritylevelconfigurations"
									if l := len("prioritylevelconfigurations"); len(elem) >= l && elem[0:l] == "prioritylevelconfigurations" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleListFlowcontrolApiserverV1beta1PriorityLevelConfigurationRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											switch r.Method {
											case "GET":
												s.handleReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/status"
											if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
										}
									}
								case 'w': // Prefix: "watch/"
									if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'f': // Prefix: "flowschemas"
										if l := len("flowschemas"); len(elem) >= l && elem[0:l] == "flowschemas" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "GET":
												s.handleWatchFlowcontrolApiserverV1beta1FlowSchemaListRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleWatchFlowcontrolApiserverV1beta1FlowSchemaRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
										}
									case 'p': // Prefix: "prioritylevelconfigurations"
										if l := len("prioritylevelconfigurations"); len(elem) >= l && elem[0:l] == "prioritylevelconfigurations" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "GET":
												s.handleWatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleWatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
										}
									}
								}
							case '2': // Prefix: "2/"
								if l := len("2/"); len(elem) >= l && elem[0:l] == "2/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetFlowcontrolApiserverV1beta2APIResourcesRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
								switch elem[0] {
								case 'f': // Prefix: "flowschemas"
									if l := len("flowschemas"); len(elem) >= l && elem[0:l] == "flowschemas" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleListFlowcontrolApiserverV1beta2FlowSchemaRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											switch r.Method {
											case "GET":
												s.handleReadFlowcontrolApiserverV1beta2FlowSchemaRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/status"
											if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleReadFlowcontrolApiserverV1beta2FlowSchemaStatusRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
										}
									}
								case 'p': // Prefix: "prioritylevelconfigurations"
									if l := len("prioritylevelconfigurations"); len(elem) >= l && elem[0:l] == "prioritylevelconfigurations" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleListFlowcontrolApiserverV1beta2PriorityLevelConfigurationRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											switch r.Method {
											case "GET":
												s.handleReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/status"
											if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
										}
									}
								case 'w': // Prefix: "watch/"
									if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'f': // Prefix: "flowschemas"
										if l := len("flowschemas"); len(elem) >= l && elem[0:l] == "flowschemas" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "GET":
												s.handleWatchFlowcontrolApiserverV1beta2FlowSchemaListRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleWatchFlowcontrolApiserverV1beta2FlowSchemaRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
										}
									case 'p': // Prefix: "prioritylevelconfigurations"
										if l := len("prioritylevelconfigurations"); len(elem) >= l && elem[0:l] == "prioritylevelconfigurations" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "GET":
												s.handleWatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleWatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
										}
									}
								}
							}
						}
					case 'i': // Prefix: "internal.apiserver.k8s.io/"
						if l := len("internal.apiserver.k8s.io/"); len(elem) >= l && elem[0:l] == "internal.apiserver.k8s.io/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleGetInternalApiserverAPIGroupRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
						switch elem[0] {
						case 'v': // Prefix: "v1alpha1/"
							if l := len("v1alpha1/"); len(elem) >= l && elem[0:l] == "v1alpha1/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleGetInternalApiserverV1alpha1APIResourcesRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
							switch elem[0] {
							case 's': // Prefix: "storageversions"
								if l := len("storageversions"); len(elem) >= l && elem[0:l] == "storageversions" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleListInternalApiserverV1alpha1StorageVersionRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "name"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleReadInternalApiserverV1alpha1StorageVersionRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/status"
										if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleReadInternalApiserverV1alpha1StorageVersionStatusRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
									}
								}
							case 'w': // Prefix: "watch/storageversions"
								if l := len("watch/storageversions"); len(elem) >= l && elem[0:l] == "watch/storageversions" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleWatchInternalApiserverV1alpha1StorageVersionListRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "name"
									// Leaf parameter
									args[0] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleWatchInternalApiserverV1alpha1StorageVersionRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
								}
							}
						}
					case 'n': // Prefix: "n"
						if l := len("n"); len(elem) >= l && elem[0:l] == "n" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'e': // Prefix: "etworking.k8s.io/"
							if l := len("etworking.k8s.io/"); len(elem) >= l && elem[0:l] == "etworking.k8s.io/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleGetNetworkingAPIGroupRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
							switch elem[0] {
							case 'v': // Prefix: "v1/"
								if l := len("v1/"); len(elem) >= l && elem[0:l] == "v1/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetNetworkingV1APIResourcesRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
								switch elem[0] {
								case 'i': // Prefix: "ingress"
									if l := len("ingress"); len(elem) >= l && elem[0:l] == "ingress" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'c': // Prefix: "classes"
										if l := len("classes"); len(elem) >= l && elem[0:l] == "classes" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "GET":
												s.handleListNetworkingV1IngressClassRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleReadNetworkingV1IngressClassRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
										}
									case 'e': // Prefix: "es"
										if l := len("es"); len(elem) >= l && elem[0:l] == "es" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleListNetworkingV1IngressForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
									}
								case 'n': // Prefix: "n"
									if l := len("n"); len(elem) >= l && elem[0:l] == "n" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "amespaces/"
										if l := len("amespaces/"); len(elem) >= l && elem[0:l] == "amespaces/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "namespace"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'i': // Prefix: "ingresses"
												if l := len("ingresses"); len(elem) >= l && elem[0:l] == "ingresses" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "GET":
														s.handleListNetworkingV1NamespacedIngressRequest([1]string{
															args[0],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Match until "/"
													idx := strings.IndexByte(elem, '/')
													if idx < 0 {
														idx = len(elem)
													}
													args[1] = elem[:idx]
													elem = elem[idx:]

													if len(elem) == 0 {
														switch r.Method {
														case "GET":
															s.handleReadNetworkingV1NamespacedIngressRequest([2]string{
																args[0],
																args[1],
															}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "GET")
														}

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/status"
														if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "GET":
																s.handleReadNetworkingV1NamespacedIngressStatusRequest([2]string{
																	args[0],
																	args[1],
																}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "GET")
															}

															return
														}
													}
												}
											case 'n': // Prefix: "networkpolicies"
												if l := len("networkpolicies"); len(elem) >= l && elem[0:l] == "networkpolicies" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "GET":
														s.handleListNetworkingV1NamespacedNetworkPolicyRequest([1]string{
															args[0],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args[1] = elem
													elem = ""

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "GET":
															s.handleReadNetworkingV1NamespacedNetworkPolicyRequest([2]string{
																args[0],
																args[1],
															}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "GET")
														}

														return
													}
												}
											}
										}
									case 'e': // Prefix: "etworkpolicies"
										if l := len("etworkpolicies"); len(elem) >= l && elem[0:l] == "etworkpolicies" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleListNetworkingV1NetworkPolicyForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
									}
								case 'w': // Prefix: "watch/"
									if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'i': // Prefix: "ingress"
										if l := len("ingress"); len(elem) >= l && elem[0:l] == "ingress" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'c': // Prefix: "classes"
											if l := len("classes"); len(elem) >= l && elem[0:l] == "classes" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "GET":
													s.handleWatchNetworkingV1IngressClassListRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[0] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "GET":
														s.handleWatchNetworkingV1IngressClassRequest([1]string{
															args[0],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
											}
										case 'e': // Prefix: "es"
											if l := len("es"); len(elem) >= l && elem[0:l] == "es" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleWatchNetworkingV1IngressListForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
										}
									case 'n': // Prefix: "n"
										if l := len("n"); len(elem) >= l && elem[0:l] == "n" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "amespaces/"
											if l := len("amespaces/"); len(elem) >= l && elem[0:l] == "amespaces/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "namespace"
											// Match until "/"
											idx := strings.IndexByte(elem, '/')
											if idx < 0 {
												idx = len(elem)
											}
											args[0] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'i': // Prefix: "ingresses"
													if l := len("ingresses"); len(elem) >= l && elem[0:l] == "ingresses" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "GET":
															s.handleWatchNetworkingV1NamespacedIngressListRequest([1]string{
																args[0],
															}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "GET")
														}

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "GET":
																s.handleWatchNetworkingV1NamespacedIngressRequest([2]string{
																	args[0],
																	args[1],
																}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "GET")
															}

															return
														}
													}
												case 'n': // Prefix: "networkpolicies"
													if l := len("networkpolicies"); len(elem) >= l && elem[0:l] == "networkpolicies" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "GET":
															s.handleWatchNetworkingV1NamespacedNetworkPolicyListRequest([1]string{
																args[0],
															}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "GET")
														}

														return
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "GET":
																s.handleWatchNetworkingV1NamespacedNetworkPolicyRequest([2]string{
																	args[0],
																	args[1],
																}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "GET")
															}

															return
														}
													}
												}
											}
										case 'e': // Prefix: "etworkpolicies"
											if l := len("etworkpolicies"); len(elem) >= l && elem[0:l] == "etworkpolicies" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleWatchNetworkingV1NetworkPolicyListForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
										}
									}
								}
							}
						case 'o': // Prefix: "ode.k8s.io/"
							if l := len("ode.k8s.io/"); len(elem) >= l && elem[0:l] == "ode.k8s.io/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleGetNodeAPIGroupRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
							switch elem[0] {
							case 'v': // Prefix: "v1"
								if l := len("v1"); len(elem) >= l && elem[0:l] == "v1" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleGetNodeV1APIResourcesRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
									switch elem[0] {
									case 'r': // Prefix: "runtimeclasses"
										if l := len("runtimeclasses"); len(elem) >= l && elem[0:l] == "runtimeclasses" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "GET":
												s.handleListNodeV1RuntimeClassRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleReadNodeV1RuntimeClassRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
										}
									case 'w': // Prefix: "watch/runtimeclasses"
										if l := len("watch/runtimeclasses"); len(elem) >= l && elem[0:l] == "watch/runtimeclasses" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "GET":
												s.handleWatchNodeV1RuntimeClassListRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleWatchNodeV1RuntimeClassRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
										}
									}
								case 'a': // Prefix: "alpha1/"
									if l := len("alpha1/"); len(elem) >= l && elem[0:l] == "alpha1/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleGetNodeV1alpha1APIResourcesRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
									switch elem[0] {
									case 'r': // Prefix: "runtimeclasses"
										if l := len("runtimeclasses"); len(elem) >= l && elem[0:l] == "runtimeclasses" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "GET":
												s.handleListNodeV1alpha1RuntimeClassRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleReadNodeV1alpha1RuntimeClassRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
										}
									case 'w': // Prefix: "watch/runtimeclasses"
										if l := len("watch/runtimeclasses"); len(elem) >= l && elem[0:l] == "watch/runtimeclasses" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "GET":
												s.handleWatchNodeV1alpha1RuntimeClassListRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleWatchNodeV1alpha1RuntimeClassRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
										}
									}
								case 'b': // Prefix: "beta1/"
									if l := len("beta1/"); len(elem) >= l && elem[0:l] == "beta1/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleGetNodeV1beta1APIResourcesRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
									switch elem[0] {
									case 'r': // Prefix: "runtimeclasses"
										if l := len("runtimeclasses"); len(elem) >= l && elem[0:l] == "runtimeclasses" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "GET":
												s.handleListNodeV1beta1RuntimeClassRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleReadNodeV1beta1RuntimeClassRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
										}
									case 'w': // Prefix: "watch/runtimeclasses"
										if l := len("watch/runtimeclasses"); len(elem) >= l && elem[0:l] == "watch/runtimeclasses" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "GET":
												s.handleWatchNodeV1beta1RuntimeClassListRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleWatchNodeV1beta1RuntimeClassRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
										}
									}
								}
							}
						}
					case 'p': // Prefix: "policy/"
						if l := len("policy/"); len(elem) >= l && elem[0:l] == "policy/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleGetPolicyAPIGroupRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
						switch elem[0] {
						case 'v': // Prefix: "v1"
							if l := len("v1"); len(elem) >= l && elem[0:l] == "v1" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetPolicyV1APIResourcesRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
								switch elem[0] {
								case 'n': // Prefix: "namespaces/"
									if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "namespace"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '/': // Prefix: "/poddisruptionbudgets"
										if l := len("/poddisruptionbudgets"); len(elem) >= l && elem[0:l] == "/poddisruptionbudgets" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "GET":
												s.handleListPolicyV1NamespacedPodDisruptionBudgetRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Match until "/"
											idx := strings.IndexByte(elem, '/')
											if idx < 0 {
												idx = len(elem)
											}
											args[1] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												switch r.Method {
												case "GET":
													s.handleReadPolicyV1NamespacedPodDisruptionBudgetRequest([2]string{
														args[0],
														args[1],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/status"
												if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "GET":
														s.handleReadPolicyV1NamespacedPodDisruptionBudgetStatusRequest([2]string{
															args[0],
															args[1],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
											}
										}
									}
								case 'p': // Prefix: "poddisruptionbudgets"
									if l := len("poddisruptionbudgets"); len(elem) >= l && elem[0:l] == "poddisruptionbudgets" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleListPolicyV1PodDisruptionBudgetForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
								case 'w': // Prefix: "watch/"
									if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'n': // Prefix: "namespaces/"
										if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "namespace"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/poddisruptionbudgets"
											if l := len("/poddisruptionbudgets"); len(elem) >= l && elem[0:l] == "/poddisruptionbudgets" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "GET":
													s.handleWatchPolicyV1NamespacedPodDisruptionBudgetListRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "GET":
														s.handleWatchPolicyV1NamespacedPodDisruptionBudgetRequest([2]string{
															args[0],
															args[1],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
											}
										}
									case 'p': // Prefix: "poddisruptionbudgets"
										if l := len("poddisruptionbudgets"); len(elem) >= l && elem[0:l] == "poddisruptionbudgets" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleWatchPolicyV1PodDisruptionBudgetListForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
									}
								}
							case 'b': // Prefix: "beta1/"
								if l := len("beta1/"); len(elem) >= l && elem[0:l] == "beta1/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetPolicyV1beta1APIResourcesRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
								switch elem[0] {
								case 'n': // Prefix: "namespaces/"
									if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "namespace"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '/': // Prefix: "/poddisruptionbudgets"
										if l := len("/poddisruptionbudgets"); len(elem) >= l && elem[0:l] == "/poddisruptionbudgets" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "GET":
												s.handleListPolicyV1beta1NamespacedPodDisruptionBudgetRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Match until "/"
											idx := strings.IndexByte(elem, '/')
											if idx < 0 {
												idx = len(elem)
											}
											args[1] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												switch r.Method {
												case "GET":
													s.handleReadPolicyV1beta1NamespacedPodDisruptionBudgetRequest([2]string{
														args[0],
														args[1],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/status"
												if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "GET":
														s.handleReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusRequest([2]string{
															args[0],
															args[1],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
											}
										}
									}
								case 'p': // Prefix: "pod"
									if l := len("pod"); len(elem) >= l && elem[0:l] == "pod" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'd': // Prefix: "disruptionbudgets"
										if l := len("disruptionbudgets"); len(elem) >= l && elem[0:l] == "disruptionbudgets" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleListPolicyV1beta1PodDisruptionBudgetForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
									case 's': // Prefix: "securitypolicies"
										if l := len("securitypolicies"); len(elem) >= l && elem[0:l] == "securitypolicies" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "GET":
												s.handleListPolicyV1beta1PodSecurityPolicyRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleReadPolicyV1beta1PodSecurityPolicyRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
										}
									}
								case 'w': // Prefix: "watch/"
									if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'n': // Prefix: "namespaces/"
										if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "namespace"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/poddisruptionbudgets"
											if l := len("/poddisruptionbudgets"); len(elem) >= l && elem[0:l] == "/poddisruptionbudgets" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "GET":
													s.handleWatchPolicyV1beta1NamespacedPodDisruptionBudgetListRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "GET":
														s.handleWatchPolicyV1beta1NamespacedPodDisruptionBudgetRequest([2]string{
															args[0],
															args[1],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
											}
										}
									case 'p': // Prefix: "pod"
										if l := len("pod"); len(elem) >= l && elem[0:l] == "pod" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'd': // Prefix: "disruptionbudgets"
											if l := len("disruptionbudgets"); len(elem) >= l && elem[0:l] == "disruptionbudgets" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleWatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
										case 's': // Prefix: "securitypolicies"
											if l := len("securitypolicies"); len(elem) >= l && elem[0:l] == "securitypolicies" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "GET":
													s.handleWatchPolicyV1beta1PodSecurityPolicyListRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[0] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "GET":
														s.handleWatchPolicyV1beta1PodSecurityPolicyRequest([1]string{
															args[0],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
											}
										}
									}
								}
							}
						}
					case 'r': // Prefix: "rbac.authorization.k8s.io/"
						if l := len("rbac.authorization.k8s.io/"); len(elem) >= l && elem[0:l] == "rbac.authorization.k8s.io/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleGetRbacAuthorizationAPIGroupRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
						switch elem[0] {
						case 'v': // Prefix: "v1/"
							if l := len("v1/"); len(elem) >= l && elem[0:l] == "v1/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleGetRbacAuthorizationV1APIResourcesRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
							switch elem[0] {
							case 'c': // Prefix: "clusterrole"
								if l := len("clusterrole"); len(elem) >= l && elem[0:l] == "clusterrole" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'b': // Prefix: "bindings"
									if l := len("bindings"); len(elem) >= l && elem[0:l] == "bindings" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleListRbacAuthorizationV1ClusterRoleBindingRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Leaf parameter
										args[0] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleReadRbacAuthorizationV1ClusterRoleBindingRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
									}
								case 's': // Prefix: "s"
									if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleListRbacAuthorizationV1ClusterRoleRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Leaf parameter
										args[0] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleReadRbacAuthorizationV1ClusterRoleRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
									}
								}
							case 'n': // Prefix: "namespaces/"
								if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "namespace"
								// Match until "/"
								idx := strings.IndexByte(elem, '/')
								if idx < 0 {
									idx = len(elem)
								}
								args[0] = elem[:idx]
								elem = elem[idx:]

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case '/': // Prefix: "/role"
									if l := len("/role"); len(elem) >= l && elem[0:l] == "/role" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'b': // Prefix: "bindings"
										if l := len("bindings"); len(elem) >= l && elem[0:l] == "bindings" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "GET":
												s.handleListRbacAuthorizationV1NamespacedRoleBindingRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[1] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleReadRbacAuthorizationV1NamespacedRoleBindingRequest([2]string{
														args[0],
														args[1],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
										}
									case 's': // Prefix: "s"
										if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "GET":
												s.handleListRbacAuthorizationV1NamespacedRoleRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[1] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleReadRbacAuthorizationV1NamespacedRoleRequest([2]string{
														args[0],
														args[1],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
										}
									}
								}
							case 'r': // Prefix: "role"
								if l := len("role"); len(elem) >= l && elem[0:l] == "role" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'b': // Prefix: "bindings"
									if l := len("bindings"); len(elem) >= l && elem[0:l] == "bindings" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleListRbacAuthorizationV1RoleBindingForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
								case 's': // Prefix: "s"
									if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleListRbacAuthorizationV1RoleForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
								}
							case 'w': // Prefix: "watch/"
								if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'c': // Prefix: "clusterrole"
									if l := len("clusterrole"); len(elem) >= l && elem[0:l] == "clusterrole" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'b': // Prefix: "bindings"
										if l := len("bindings"); len(elem) >= l && elem[0:l] == "bindings" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "GET":
												s.handleWatchRbacAuthorizationV1ClusterRoleBindingListRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleWatchRbacAuthorizationV1ClusterRoleBindingRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
										}
									case 's': // Prefix: "s"
										if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "GET":
												s.handleWatchRbacAuthorizationV1ClusterRoleListRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleWatchRbacAuthorizationV1ClusterRoleRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
										}
									}
								case 'n': // Prefix: "namespaces/"
									if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "namespace"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '/': // Prefix: "/role"
										if l := len("/role"); len(elem) >= l && elem[0:l] == "/role" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'b': // Prefix: "bindings"
											if l := len("bindings"); len(elem) >= l && elem[0:l] == "bindings" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "GET":
													s.handleWatchRbacAuthorizationV1NamespacedRoleBindingListRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "GET":
														s.handleWatchRbacAuthorizationV1NamespacedRoleBindingRequest([2]string{
															args[0],
															args[1],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
											}
										case 's': // Prefix: "s"
											if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "GET":
													s.handleWatchRbacAuthorizationV1NamespacedRoleListRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "GET":
														s.handleWatchRbacAuthorizationV1NamespacedRoleRequest([2]string{
															args[0],
															args[1],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
											}
										}
									}
								case 'r': // Prefix: "role"
									if l := len("role"); len(elem) >= l && elem[0:l] == "role" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'b': // Prefix: "bindings"
										if l := len("bindings"); len(elem) >= l && elem[0:l] == "bindings" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleWatchRbacAuthorizationV1RoleBindingListForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
									case 's': // Prefix: "s"
										if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleWatchRbacAuthorizationV1RoleListForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
									}
								}
							}
						}
					case 's': // Prefix: "s"
						if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'c': // Prefix: "cheduling.k8s.io/"
							if l := len("cheduling.k8s.io/"); len(elem) >= l && elem[0:l] == "cheduling.k8s.io/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleGetSchedulingAPIGroupRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
							switch elem[0] {
							case 'v': // Prefix: "v1/"
								if l := len("v1/"); len(elem) >= l && elem[0:l] == "v1/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetSchedulingV1APIResourcesRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
								switch elem[0] {
								case 'p': // Prefix: "priorityclasses"
									if l := len("priorityclasses"); len(elem) >= l && elem[0:l] == "priorityclasses" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleListSchedulingV1PriorityClassRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Leaf parameter
										args[0] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleReadSchedulingV1PriorityClassRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
									}
								case 'w': // Prefix: "watch/priorityclasses"
									if l := len("watch/priorityclasses"); len(elem) >= l && elem[0:l] == "watch/priorityclasses" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleWatchSchedulingV1PriorityClassListRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Leaf parameter
										args[0] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleWatchSchedulingV1PriorityClassRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
									}
								}
							}
						case 't': // Prefix: "torage.k8s.io/"
							if l := len("torage.k8s.io/"); len(elem) >= l && elem[0:l] == "torage.k8s.io/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleGetStorageAPIGroupRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
							switch elem[0] {
							case 'v': // Prefix: "v1"
								if l := len("v1"); len(elem) >= l && elem[0:l] == "v1" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleGetStorageV1APIResourcesRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
									switch elem[0] {
									case 'c': // Prefix: "csi"
										if l := len("csi"); len(elem) >= l && elem[0:l] == "csi" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'd': // Prefix: "drivers"
											if l := len("drivers"); len(elem) >= l && elem[0:l] == "drivers" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "GET":
													s.handleListStorageV1CSIDriverRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[0] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "GET":
														s.handleReadStorageV1CSIDriverRequest([1]string{
															args[0],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
											}
										case 'n': // Prefix: "nodes"
											if l := len("nodes"); len(elem) >= l && elem[0:l] == "nodes" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "GET":
													s.handleListStorageV1CSINodeRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[0] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "GET":
														s.handleReadStorageV1CSINodeRequest([1]string{
															args[0],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
											}
										}
									case 's': // Prefix: "storageclasses"
										if l := len("storageclasses"); len(elem) >= l && elem[0:l] == "storageclasses" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "GET":
												s.handleListStorageV1StorageClassRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleReadStorageV1StorageClassRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
										}
									case 'v': // Prefix: "volumeattachments"
										if l := len("volumeattachments"); len(elem) >= l && elem[0:l] == "volumeattachments" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "GET":
												s.handleListStorageV1VolumeAttachmentRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Match until "/"
											idx := strings.IndexByte(elem, '/')
											if idx < 0 {
												idx = len(elem)
											}
											args[0] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												switch r.Method {
												case "GET":
													s.handleReadStorageV1VolumeAttachmentRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/status"
												if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "GET":
														s.handleReadStorageV1VolumeAttachmentStatusRequest([1]string{
															args[0],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
											}
										}
									case 'w': // Prefix: "watch/"
										if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'c': // Prefix: "csi"
											if l := len("csi"); len(elem) >= l && elem[0:l] == "csi" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'd': // Prefix: "drivers"
												if l := len("drivers"); len(elem) >= l && elem[0:l] == "drivers" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "GET":
														s.handleWatchStorageV1CSIDriverListRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args[0] = elem
													elem = ""

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "GET":
															s.handleWatchStorageV1CSIDriverRequest([1]string{
																args[0],
															}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "GET")
														}

														return
													}
												}
											case 'n': // Prefix: "nodes"
												if l := len("nodes"); len(elem) >= l && elem[0:l] == "nodes" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "GET":
														s.handleWatchStorageV1CSINodeListRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args[0] = elem
													elem = ""

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "GET":
															s.handleWatchStorageV1CSINodeRequest([1]string{
																args[0],
															}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "GET")
														}

														return
													}
												}
											}
										case 's': // Prefix: "storageclasses"
											if l := len("storageclasses"); len(elem) >= l && elem[0:l] == "storageclasses" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "GET":
													s.handleWatchStorageV1StorageClassListRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[0] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "GET":
														s.handleWatchStorageV1StorageClassRequest([1]string{
															args[0],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
											}
										case 'v': // Prefix: "volumeattachments"
											if l := len("volumeattachments"); len(elem) >= l && elem[0:l] == "volumeattachments" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "GET":
													s.handleWatchStorageV1VolumeAttachmentListRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[0] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "GET":
														s.handleWatchStorageV1VolumeAttachmentRequest([1]string{
															args[0],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
											}
										}
									}
								case 'a': // Prefix: "alpha1/"
									if l := len("alpha1/"); len(elem) >= l && elem[0:l] == "alpha1/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleGetStorageV1alpha1APIResourcesRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
									switch elem[0] {
									case 'c': // Prefix: "csistoragecapacities"
										if l := len("csistoragecapacities"); len(elem) >= l && elem[0:l] == "csistoragecapacities" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleListStorageV1alpha1CSIStorageCapacityForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
									case 'n': // Prefix: "namespaces/"
										if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "namespace"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/csistoragecapacities"
											if l := len("/csistoragecapacities"); len(elem) >= l && elem[0:l] == "/csistoragecapacities" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "GET":
													s.handleListStorageV1alpha1NamespacedCSIStorageCapacityRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "GET":
														s.handleReadStorageV1alpha1NamespacedCSIStorageCapacityRequest([2]string{
															args[0],
															args[1],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
											}
										}
									case 'w': // Prefix: "watch/"
										if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'c': // Prefix: "csistoragecapacities"
											if l := len("csistoragecapacities"); len(elem) >= l && elem[0:l] == "csistoragecapacities" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleWatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
										case 'n': // Prefix: "namespaces/"
											if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "namespace"
											// Match until "/"
											idx := strings.IndexByte(elem, '/')
											if idx < 0 {
												idx = len(elem)
											}
											args[0] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case '/': // Prefix: "/csistoragecapacities"
												if l := len("/csistoragecapacities"); len(elem) >= l && elem[0:l] == "/csistoragecapacities" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "GET":
														s.handleWatchStorageV1alpha1NamespacedCSIStorageCapacityListRequest([1]string{
															args[0],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args[1] = elem
													elem = ""

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "GET":
															s.handleWatchStorageV1alpha1NamespacedCSIStorageCapacityRequest([2]string{
																args[0],
																args[1],
															}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "GET")
														}

														return
													}
												}
											}
										}
									}
								case 'b': // Prefix: "beta1/"
									if l := len("beta1/"); len(elem) >= l && elem[0:l] == "beta1/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleGetStorageV1beta1APIResourcesRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
									switch elem[0] {
									case 'c': // Prefix: "csistoragecapacities"
										if l := len("csistoragecapacities"); len(elem) >= l && elem[0:l] == "csistoragecapacities" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleListStorageV1beta1CSIStorageCapacityForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
									case 'n': // Prefix: "namespaces/"
										if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "namespace"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/csistoragecapacities"
											if l := len("/csistoragecapacities"); len(elem) >= l && elem[0:l] == "/csistoragecapacities" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "GET":
													s.handleListStorageV1beta1NamespacedCSIStorageCapacityRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "GET":
														s.handleReadStorageV1beta1NamespacedCSIStorageCapacityRequest([2]string{
															args[0],
															args[1],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
											}
										}
									case 'w': // Prefix: "watch/"
										if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'c': // Prefix: "csistoragecapacities"
											if l := len("csistoragecapacities"); len(elem) >= l && elem[0:l] == "csistoragecapacities" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleWatchStorageV1beta1CSIStorageCapacityListForAllNamespacesRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}
										case 'n': // Prefix: "namespaces/"
											if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "namespace"
											// Match until "/"
											idx := strings.IndexByte(elem, '/')
											if idx < 0 {
												idx = len(elem)
											}
											args[0] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case '/': // Prefix: "/csistoragecapacities"
												if l := len("/csistoragecapacities"); len(elem) >= l && elem[0:l] == "/csistoragecapacities" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "GET":
														s.handleWatchStorageV1beta1NamespacedCSIStorageCapacityListRequest([1]string{
															args[0],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "GET")
													}

													return
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args[1] = elem
													elem = ""

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "GET":
															s.handleWatchStorageV1beta1NamespacedCSIStorageCapacityRequest([2]string{
																args[0],
																args[1],
															}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "GET")
														}

														return
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			case 'l': // Prefix: "logs/"
				if l := len("logs/"); len(elem) >= l && elem[0:l] == "logs/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "logpath"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleLogFileHandlerRequest([1]string{
							args[0],
						}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}
			case 'o': // Prefix: "openid/v1/jwks/"
				if l := len("openid/v1/jwks/"); len(elem) >= l && elem[0:l] == "openid/v1/jwks/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleGetServiceAccountIssuerOpenIDKeysetRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}
			case 'v': // Prefix: "version/"
				if l := len("version/"); len(elem) >= l && elem[0:l] == "version/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleGetCodeVersionRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}
			}
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [3]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil { // if NO error
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case '.': // Prefix: ".well-known/openid-configuration/"
				if l := len(".well-known/openid-configuration/"); len(elem) >= l && elem[0:l] == ".well-known/openid-configuration/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						// Leaf: GetServiceAccountIssuerOpenIDConfiguration
						r.name = "GetServiceAccountIssuerOpenIDConfiguration"
						r.summary = ""
						r.operationID = "getServiceAccountIssuerOpenIDConfiguration"
						r.pathPattern = "/.well-known/openid-configuration/"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
			case 'a': // Prefix: "api"
				if l := len("api"); len(elem) >= l && elem[0:l] == "api" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "GetCoreAPIVersions"
							r.summary = ""
							r.operationID = "getCoreAPIVersions"
							r.pathPattern = "/api/"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case 'v': // Prefix: "v1/"
						if l := len("v1/"); len(elem) >= l && elem[0:l] == "v1/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "GetCoreV1APIResources"
								r.summary = ""
								r.operationID = "getCoreV1APIResources"
								r.pathPattern = "/api/v1/"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case 'c': // Prefix: "co"
							if l := len("co"); len(elem) >= l && elem[0:l] == "co" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'm': // Prefix: "mponentstatuses"
								if l := len("mponentstatuses"); len(elem) >= l && elem[0:l] == "mponentstatuses" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "ListCoreV1ComponentStatus"
										r.summary = ""
										r.operationID = "listCoreV1ComponentStatus"
										r.pathPattern = "/api/v1/componentstatuses"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "name"
									// Leaf parameter
									args[0] = elem
									elem = ""

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: ReadCoreV1ComponentStatus
											r.name = "ReadCoreV1ComponentStatus"
											r.summary = ""
											r.operationID = "readCoreV1ComponentStatus"
											r.pathPattern = "/api/v1/componentstatuses/{name}"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}
								}
							case 'n': // Prefix: "nfigmaps"
								if l := len("nfigmaps"); len(elem) >= l && elem[0:l] == "nfigmaps" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: ListCoreV1ConfigMapForAllNamespaces
										r.name = "ListCoreV1ConfigMapForAllNamespaces"
										r.summary = ""
										r.operationID = "listCoreV1ConfigMapForAllNamespaces"
										r.pathPattern = "/api/v1/configmaps"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
							}
						case 'e': // Prefix: "e"
							if l := len("e"); len(elem) >= l && elem[0:l] == "e" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'n': // Prefix: "ndpoints"
								if l := len("ndpoints"); len(elem) >= l && elem[0:l] == "ndpoints" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: ListCoreV1EndpointsForAllNamespaces
										r.name = "ListCoreV1EndpointsForAllNamespaces"
										r.summary = ""
										r.operationID = "listCoreV1EndpointsForAllNamespaces"
										r.pathPattern = "/api/v1/endpoints"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
							case 'v': // Prefix: "vents"
								if l := len("vents"); len(elem) >= l && elem[0:l] == "vents" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: ListCoreV1EventForAllNamespaces
										r.name = "ListCoreV1EventForAllNamespaces"
										r.summary = ""
										r.operationID = "listCoreV1EventForAllNamespaces"
										r.pathPattern = "/api/v1/events"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
							}
						case 'l': // Prefix: "limitranges"
							if l := len("limitranges"); len(elem) >= l && elem[0:l] == "limitranges" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: ListCoreV1LimitRangeForAllNamespaces
									r.name = "ListCoreV1LimitRangeForAllNamespaces"
									r.summary = ""
									r.operationID = "listCoreV1LimitRangeForAllNamespaces"
									r.pathPattern = "/api/v1/limitranges"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
						case 'n': // Prefix: "n"
							if l := len("n"); len(elem) >= l && elem[0:l] == "n" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "amespaces"
								if l := len("amespaces"); len(elem) >= l && elem[0:l] == "amespaces" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "ListCoreV1Namespace"
										r.summary = ""
										r.operationID = "listCoreV1Namespace"
										r.pathPattern = "/api/v1/namespaces"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "namespace"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = "ReadCoreV1Namespace"
											r.summary = ""
											r.operationID = "readCoreV1Namespace"
											r.pathPattern = "/api/v1/namespaces/{name}"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'c': // Prefix: "configmaps"
											if l := len("configmaps"); len(elem) >= l && elem[0:l] == "configmaps" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "GET":
													r.name = "ListCoreV1NamespacedConfigMap"
													r.summary = ""
													r.operationID = "listCoreV1NamespacedConfigMap"
													r.pathPattern = "/api/v1/namespaces/{namespace}/configmaps"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													switch method {
													case "GET":
														// Leaf: ReadCoreV1NamespacedConfigMap
														r.name = "ReadCoreV1NamespacedConfigMap"
														r.summary = ""
														r.operationID = "readCoreV1NamespacedConfigMap"
														r.pathPattern = "/api/v1/namespaces/{namespace}/configmaps/{name}"
														r.args = args
														r.count = 2
														return r, true
													default:
														return
													}
												}
											}
										case 'e': // Prefix: "e"
											if l := len("e"); len(elem) >= l && elem[0:l] == "e" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'n': // Prefix: "ndpoints"
												if l := len("ndpoints"); len(elem) >= l && elem[0:l] == "ndpoints" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "GET":
														r.name = "ListCoreV1NamespacedEndpoints"
														r.summary = ""
														r.operationID = "listCoreV1NamespacedEndpoints"
														r.pathPattern = "/api/v1/namespaces/{namespace}/endpoints"
														r.args = args
														r.count = 1
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args[1] = elem
													elem = ""

													if len(elem) == 0 {
														switch method {
														case "GET":
															// Leaf: ReadCoreV1NamespacedEndpoints
															r.name = "ReadCoreV1NamespacedEndpoints"
															r.summary = ""
															r.operationID = "readCoreV1NamespacedEndpoints"
															r.pathPattern = "/api/v1/namespaces/{namespace}/endpoints/{name}"
															r.args = args
															r.count = 2
															return r, true
														default:
															return
														}
													}
												}
											case 'v': // Prefix: "vents"
												if l := len("vents"); len(elem) >= l && elem[0:l] == "vents" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "GET":
														r.name = "ListCoreV1NamespacedEvent"
														r.summary = ""
														r.operationID = "listCoreV1NamespacedEvent"
														r.pathPattern = "/api/v1/namespaces/{namespace}/events"
														r.args = args
														r.count = 1
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args[1] = elem
													elem = ""

													if len(elem) == 0 {
														switch method {
														case "GET":
															// Leaf: ReadCoreV1NamespacedEvent
															r.name = "ReadCoreV1NamespacedEvent"
															r.summary = ""
															r.operationID = "readCoreV1NamespacedEvent"
															r.pathPattern = "/api/v1/namespaces/{namespace}/events/{name}"
															r.args = args
															r.count = 2
															return r, true
														default:
															return
														}
													}
												}
											}
										case 'l': // Prefix: "limitranges"
											if l := len("limitranges"); len(elem) >= l && elem[0:l] == "limitranges" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "GET":
													r.name = "ListCoreV1NamespacedLimitRange"
													r.summary = ""
													r.operationID = "listCoreV1NamespacedLimitRange"
													r.pathPattern = "/api/v1/namespaces/{namespace}/limitranges"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													switch method {
													case "GET":
														// Leaf: ReadCoreV1NamespacedLimitRange
														r.name = "ReadCoreV1NamespacedLimitRange"
														r.summary = ""
														r.operationID = "readCoreV1NamespacedLimitRange"
														r.pathPattern = "/api/v1/namespaces/{namespace}/limitranges/{name}"
														r.args = args
														r.count = 2
														return r, true
													default:
														return
													}
												}
											}
										case 'p': // Prefix: "p"
											if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'e': // Prefix: "ersistentvolumeclaims"
												if l := len("ersistentvolumeclaims"); len(elem) >= l && elem[0:l] == "ersistentvolumeclaims" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "GET":
														r.name = "ListCoreV1NamespacedPersistentVolumeClaim"
														r.summary = ""
														r.operationID = "listCoreV1NamespacedPersistentVolumeClaim"
														r.pathPattern = "/api/v1/namespaces/{namespace}/persistentvolumeclaims"
														r.args = args
														r.count = 1
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Match until "/"
													idx := strings.IndexByte(elem, '/')
													if idx < 0 {
														idx = len(elem)
													}
													args[1] = elem[:idx]
													elem = elem[idx:]

													if len(elem) == 0 {
														switch method {
														case "GET":
															r.name = "ReadCoreV1NamespacedPersistentVolumeClaim"
															r.summary = ""
															r.operationID = "readCoreV1NamespacedPersistentVolumeClaim"
															r.pathPattern = "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}"
															r.args = args
															r.count = 2
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '/': // Prefix: "/status"
														if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "GET":
																// Leaf: ReadCoreV1NamespacedPersistentVolumeClaimStatus
																r.name = "ReadCoreV1NamespacedPersistentVolumeClaimStatus"
																r.summary = ""
																r.operationID = "readCoreV1NamespacedPersistentVolumeClaimStatus"
																r.pathPattern = "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status"
																r.args = args
																r.count = 2
																return r, true
															default:
																return
															}
														}
													}
												}
											case 'o': // Prefix: "od"
												if l := len("od"); len(elem) >= l && elem[0:l] == "od" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 's': // Prefix: "s"
													if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "GET":
															r.name = "ListCoreV1NamespacedPod"
															r.summary = ""
															r.operationID = "listCoreV1NamespacedPod"
															r.pathPattern = "/api/v1/namespaces/{namespace}/pods"
															r.args = args
															r.count = 1
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Match until "/"
														idx := strings.IndexByte(elem, '/')
														if idx < 0 {
															idx = len(elem)
														}
														args[1] = elem[:idx]
														elem = elem[idx:]

														if len(elem) == 0 {
															switch method {
															case "GET":
																r.name = "ReadCoreV1NamespacedPod"
																r.summary = ""
																r.operationID = "readCoreV1NamespacedPod"
																r.pathPattern = "/api/v1/namespaces/{namespace}/pods/{name}"
																r.args = args
																r.count = 2
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																break
															}
															switch elem[0] {
															case 'a': // Prefix: "attach"
																if l := len("attach"); len(elem) >= l && elem[0:l] == "attach" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	switch method {
																	case "GET":
																		// Leaf: ConnectCoreV1GetNamespacedPodAttach
																		r.name = "ConnectCoreV1GetNamespacedPodAttach"
																		r.summary = ""
																		r.operationID = "connectCoreV1GetNamespacedPodAttach"
																		r.pathPattern = "/api/v1/namespaces/{namespace}/pods/{name}/attach"
																		r.args = args
																		r.count = 2
																		return r, true
																	case "POST":
																		// Leaf: ConnectCoreV1PostNamespacedPodAttach
																		r.name = "ConnectCoreV1PostNamespacedPodAttach"
																		r.summary = ""
																		r.operationID = "connectCoreV1PostNamespacedPodAttach"
																		r.pathPattern = "/api/v1/namespaces/{namespace}/pods/{name}/attach"
																		r.args = args
																		r.count = 2
																		return r, true
																	default:
																		return
																	}
																}
															case 'e': // Prefix: "e"
																if l := len("e"); len(elem) >= l && elem[0:l] == "e" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	break
																}
																switch elem[0] {
																case 'p': // Prefix: "phemeralcontainers"
																	if l := len("phemeralcontainers"); len(elem) >= l && elem[0:l] == "phemeralcontainers" {
																		elem = elem[l:]
																	} else {
																		break
																	}

																	if len(elem) == 0 {
																		switch method {
																		case "GET":
																			// Leaf: ReadCoreV1NamespacedPodEphemeralcontainers
																			r.name = "ReadCoreV1NamespacedPodEphemeralcontainers"
																			r.summary = ""
																			r.operationID = "readCoreV1NamespacedPodEphemeralcontainers"
																			r.pathPattern = "/api/v1/namespaces/{namespace}/pods/{name}/ephemeralcontainers"
																			r.args = args
																			r.count = 2
																			return r, true
																		default:
																			return
																		}
																	}
																case 'x': // Prefix: "xec"
																	if l := len("xec"); len(elem) >= l && elem[0:l] == "xec" {
																		elem = elem[l:]
																	} else {
																		break
																	}

																	if len(elem) == 0 {
																		switch method {
																		case "GET":
																			// Leaf: ConnectCoreV1GetNamespacedPodExec
																			r.name = "ConnectCoreV1GetNamespacedPodExec"
																			r.summary = ""
																			r.operationID = "connectCoreV1GetNamespacedPodExec"
																			r.pathPattern = "/api/v1/namespaces/{namespace}/pods/{name}/exec"
																			r.args = args
																			r.count = 2
																			return r, true
																		case "POST":
																			// Leaf: ConnectCoreV1PostNamespacedPodExec
																			r.name = "ConnectCoreV1PostNamespacedPodExec"
																			r.summary = ""
																			r.operationID = "connectCoreV1PostNamespacedPodExec"
																			r.pathPattern = "/api/v1/namespaces/{namespace}/pods/{name}/exec"
																			r.args = args
																			r.count = 2
																			return r, true
																		default:
																			return
																		}
																	}
																}
															case 'l': // Prefix: "log"
																if l := len("log"); len(elem) >= l && elem[0:l] == "log" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	switch method {
																	case "GET":
																		// Leaf: ReadCoreV1NamespacedPodLog
																		r.name = "ReadCoreV1NamespacedPodLog"
																		r.summary = ""
																		r.operationID = "readCoreV1NamespacedPodLog"
																		r.pathPattern = "/api/v1/namespaces/{namespace}/pods/{name}/log"
																		r.args = args
																		r.count = 2
																		return r, true
																	default:
																		return
																	}
																}
															case 'p': // Prefix: "p"
																if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	break
																}
																switch elem[0] {
																case 'o': // Prefix: "ortforward"
																	if l := len("ortforward"); len(elem) >= l && elem[0:l] == "ortforward" {
																		elem = elem[l:]
																	} else {
																		break
																	}

																	if len(elem) == 0 {
																		switch method {
																		case "GET":
																			// Leaf: ConnectCoreV1GetNamespacedPodPortforward
																			r.name = "ConnectCoreV1GetNamespacedPodPortforward"
																			r.summary = ""
																			r.operationID = "connectCoreV1GetNamespacedPodPortforward"
																			r.pathPattern = "/api/v1/namespaces/{namespace}/pods/{name}/portforward"
																			r.args = args
																			r.count = 2
																			return r, true
																		case "POST":
																			// Leaf: ConnectCoreV1PostNamespacedPodPortforward
																			r.name = "ConnectCoreV1PostNamespacedPodPortforward"
																			r.summary = ""
																			r.operationID = "connectCoreV1PostNamespacedPodPortforward"
																			r.pathPattern = "/api/v1/namespaces/{namespace}/pods/{name}/portforward"
																			r.args = args
																			r.count = 2
																			return r, true
																		default:
																			return
																		}
																	}
																case 'r': // Prefix: "roxy"
																	if l := len("roxy"); len(elem) >= l && elem[0:l] == "roxy" {
																		elem = elem[l:]
																	} else {
																		break
																	}

																	if len(elem) == 0 {
																		switch method {
																		case "DELETE":
																			r.name = "ConnectCoreV1DeleteNamespacedPodProxy"
																			r.summary = ""
																			r.operationID = "connectCoreV1DeleteNamespacedPodProxy"
																			r.pathPattern = "/api/v1/namespaces/{namespace}/pods/{name}/proxy"
																			r.args = args
																			r.count = 2
																			return r, true
																		case "GET":
																			r.name = "ConnectCoreV1GetNamespacedPodProxy"
																			r.summary = ""
																			r.operationID = "connectCoreV1GetNamespacedPodProxy"
																			r.pathPattern = "/api/v1/namespaces/{namespace}/pods/{name}/proxy"
																			r.args = args
																			r.count = 2
																			return r, true
																		case "HEAD":
																			r.name = "ConnectCoreV1HeadNamespacedPodProxy"
																			r.summary = ""
																			r.operationID = "connectCoreV1HeadNamespacedPodProxy"
																			r.pathPattern = "/api/v1/namespaces/{namespace}/pods/{name}/proxy"
																			r.args = args
																			r.count = 2
																			return r, true
																		case "OPTIONS":
																			r.name = "ConnectCoreV1OptionsNamespacedPodProxy"
																			r.summary = ""
																			r.operationID = "connectCoreV1OptionsNamespacedPodProxy"
																			r.pathPattern = "/api/v1/namespaces/{namespace}/pods/{name}/proxy"
																			r.args = args
																			r.count = 2
																			return r, true
																		case "PATCH":
																			r.name = "ConnectCoreV1PatchNamespacedPodProxy"
																			r.summary = ""
																			r.operationID = "connectCoreV1PatchNamespacedPodProxy"
																			r.pathPattern = "/api/v1/namespaces/{namespace}/pods/{name}/proxy"
																			r.args = args
																			r.count = 2
																			return r, true
																		case "POST":
																			r.name = "ConnectCoreV1PostNamespacedPodProxy"
																			r.summary = ""
																			r.operationID = "connectCoreV1PostNamespacedPodProxy"
																			r.pathPattern = "/api/v1/namespaces/{namespace}/pods/{name}/proxy"
																			r.args = args
																			r.count = 2
																			return r, true
																		case "PUT":
																			r.name = "ConnectCoreV1PutNamespacedPodProxy"
																			r.summary = ""
																			r.operationID = "connectCoreV1PutNamespacedPodProxy"
																			r.pathPattern = "/api/v1/namespaces/{namespace}/pods/{name}/proxy"
																			r.args = args
																			r.count = 2
																			return r, true
																		default:
																			return
																		}
																	}
																	switch elem[0] {
																	case '/': // Prefix: "/"
																		if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
																			elem = elem[l:]
																		} else {
																			break
																		}

																		// Param: "path"
																		// Leaf parameter
																		args[2] = elem
																		elem = ""

																		if len(elem) == 0 {
																			switch method {
																			case "DELETE":
																				// Leaf: ConnectCoreV1DeleteNamespacedPodProxyWithPath
																				r.name = "ConnectCoreV1DeleteNamespacedPodProxyWithPath"
																				r.summary = ""
																				r.operationID = "connectCoreV1DeleteNamespacedPodProxyWithPath"
																				r.pathPattern = "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}"
																				r.args = args
																				r.count = 3
																				return r, true
																			case "GET":
																				// Leaf: ConnectCoreV1GetNamespacedPodProxyWithPath
																				r.name = "ConnectCoreV1GetNamespacedPodProxyWithPath"
																				r.summary = ""
																				r.operationID = "connectCoreV1GetNamespacedPodProxyWithPath"
																				r.pathPattern = "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}"
																				r.args = args
																				r.count = 3
																				return r, true
																			case "HEAD":
																				// Leaf: ConnectCoreV1HeadNamespacedPodProxyWithPath
																				r.name = "ConnectCoreV1HeadNamespacedPodProxyWithPath"
																				r.summary = ""
																				r.operationID = "connectCoreV1HeadNamespacedPodProxyWithPath"
																				r.pathPattern = "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}"
																				r.args = args
																				r.count = 3
																				return r, true
																			case "OPTIONS":
																				// Leaf: ConnectCoreV1OptionsNamespacedPodProxyWithPath
																				r.name = "ConnectCoreV1OptionsNamespacedPodProxyWithPath"
																				r.summary = ""
																				r.operationID = "connectCoreV1OptionsNamespacedPodProxyWithPath"
																				r.pathPattern = "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}"
																				r.args = args
																				r.count = 3
																				return r, true
																			case "PATCH":
																				// Leaf: ConnectCoreV1PatchNamespacedPodProxyWithPath
																				r.name = "ConnectCoreV1PatchNamespacedPodProxyWithPath"
																				r.summary = ""
																				r.operationID = "connectCoreV1PatchNamespacedPodProxyWithPath"
																				r.pathPattern = "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}"
																				r.args = args
																				r.count = 3
																				return r, true
																			case "POST":
																				// Leaf: ConnectCoreV1PostNamespacedPodProxyWithPath
																				r.name = "ConnectCoreV1PostNamespacedPodProxyWithPath"
																				r.summary = ""
																				r.operationID = "connectCoreV1PostNamespacedPodProxyWithPath"
																				r.pathPattern = "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}"
																				r.args = args
																				r.count = 3
																				return r, true
																			case "PUT":
																				// Leaf: ConnectCoreV1PutNamespacedPodProxyWithPath
																				r.name = "ConnectCoreV1PutNamespacedPodProxyWithPath"
																				r.summary = ""
																				r.operationID = "connectCoreV1PutNamespacedPodProxyWithPath"
																				r.pathPattern = "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}"
																				r.args = args
																				r.count = 3
																				return r, true
																			default:
																				return
																			}
																		}
																	}
																}
															case 's': // Prefix: "status"
																if l := len("status"); len(elem) >= l && elem[0:l] == "status" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	switch method {
																	case "GET":
																		// Leaf: ReadCoreV1NamespacedPodStatus
																		r.name = "ReadCoreV1NamespacedPodStatus"
																		r.summary = ""
																		r.operationID = "readCoreV1NamespacedPodStatus"
																		r.pathPattern = "/api/v1/namespaces/{namespace}/pods/{name}/status"
																		r.args = args
																		r.count = 2
																		return r, true
																	default:
																		return
																	}
																}
															}
														}
													}
												case 't': // Prefix: "templates"
													if l := len("templates"); len(elem) >= l && elem[0:l] == "templates" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "GET":
															r.name = "ListCoreV1NamespacedPodTemplate"
															r.summary = ""
															r.operationID = "listCoreV1NamespacedPodTemplate"
															r.pathPattern = "/api/v1/namespaces/{namespace}/podtemplates"
															r.args = args
															r.count = 1
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															switch method {
															case "GET":
																// Leaf: ReadCoreV1NamespacedPodTemplate
																r.name = "ReadCoreV1NamespacedPodTemplate"
																r.summary = ""
																r.operationID = "readCoreV1NamespacedPodTemplate"
																r.pathPattern = "/api/v1/namespaces/{namespace}/podtemplates/{name}"
																r.args = args
																r.count = 2
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										case 'r': // Prefix: "re"
											if l := len("re"); len(elem) >= l && elem[0:l] == "re" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'p': // Prefix: "plicationcontrollers"
												if l := len("plicationcontrollers"); len(elem) >= l && elem[0:l] == "plicationcontrollers" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "GET":
														r.name = "ListCoreV1NamespacedReplicationController"
														r.summary = ""
														r.operationID = "listCoreV1NamespacedReplicationController"
														r.pathPattern = "/api/v1/namespaces/{namespace}/replicationcontrollers"
														r.args = args
														r.count = 1
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Match until "/"
													idx := strings.IndexByte(elem, '/')
													if idx < 0 {
														idx = len(elem)
													}
													args[1] = elem[:idx]
													elem = elem[idx:]

													if len(elem) == 0 {
														switch method {
														case "GET":
															r.name = "ReadCoreV1NamespacedReplicationController"
															r.summary = ""
															r.operationID = "readCoreV1NamespacedReplicationController"
															r.pathPattern = "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}"
															r.args = args
															r.count = 2
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '/': // Prefix: "/s"
														if l := len("/s"); len(elem) >= l && elem[0:l] == "/s" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															break
														}
														switch elem[0] {
														case 'c': // Prefix: "cale"
															if l := len("cale"); len(elem) >= l && elem[0:l] == "cale" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "GET":
																	// Leaf: ReadCoreV1NamespacedReplicationControllerScale
																	r.name = "ReadCoreV1NamespacedReplicationControllerScale"
																	r.summary = ""
																	r.operationID = "readCoreV1NamespacedReplicationControllerScale"
																	r.pathPattern = "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale"
																	r.args = args
																	r.count = 2
																	return r, true
																default:
																	return
																}
															}
														case 't': // Prefix: "tatus"
															if l := len("tatus"); len(elem) >= l && elem[0:l] == "tatus" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "GET":
																	// Leaf: ReadCoreV1NamespacedReplicationControllerStatus
																	r.name = "ReadCoreV1NamespacedReplicationControllerStatus"
																	r.summary = ""
																	r.operationID = "readCoreV1NamespacedReplicationControllerStatus"
																	r.pathPattern = "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status"
																	r.args = args
																	r.count = 2
																	return r, true
																default:
																	return
																}
															}
														}
													}
												}
											case 's': // Prefix: "sourcequotas"
												if l := len("sourcequotas"); len(elem) >= l && elem[0:l] == "sourcequotas" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "GET":
														r.name = "ListCoreV1NamespacedResourceQuota"
														r.summary = ""
														r.operationID = "listCoreV1NamespacedResourceQuota"
														r.pathPattern = "/api/v1/namespaces/{namespace}/resourcequotas"
														r.args = args
														r.count = 1
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Match until "/"
													idx := strings.IndexByte(elem, '/')
													if idx < 0 {
														idx = len(elem)
													}
													args[1] = elem[:idx]
													elem = elem[idx:]

													if len(elem) == 0 {
														switch method {
														case "GET":
															r.name = "ReadCoreV1NamespacedResourceQuota"
															r.summary = ""
															r.operationID = "readCoreV1NamespacedResourceQuota"
															r.pathPattern = "/api/v1/namespaces/{namespace}/resourcequotas/{name}"
															r.args = args
															r.count = 2
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '/': // Prefix: "/status"
														if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "GET":
																// Leaf: ReadCoreV1NamespacedResourceQuotaStatus
																r.name = "ReadCoreV1NamespacedResourceQuotaStatus"
																r.summary = ""
																r.operationID = "readCoreV1NamespacedResourceQuotaStatus"
																r.pathPattern = "/api/v1/namespaces/{namespace}/resourcequotas/{name}/status"
																r.args = args
																r.count = 2
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										case 's': // Prefix: "s"
											if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'e': // Prefix: "e"
												if l := len("e"); len(elem) >= l && elem[0:l] == "e" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'c': // Prefix: "crets"
													if l := len("crets"); len(elem) >= l && elem[0:l] == "crets" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "GET":
															r.name = "ListCoreV1NamespacedSecret"
															r.summary = ""
															r.operationID = "listCoreV1NamespacedSecret"
															r.pathPattern = "/api/v1/namespaces/{namespace}/secrets"
															r.args = args
															r.count = 1
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															switch method {
															case "GET":
																// Leaf: ReadCoreV1NamespacedSecret
																r.name = "ReadCoreV1NamespacedSecret"
																r.summary = ""
																r.operationID = "readCoreV1NamespacedSecret"
																r.pathPattern = "/api/v1/namespaces/{namespace}/secrets/{name}"
																r.args = args
																r.count = 2
																return r, true
															default:
																return
															}
														}
													}
												case 'r': // Prefix: "rvice"
													if l := len("rvice"); len(elem) >= l && elem[0:l] == "rvice" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "accounts"
														if l := len("accounts"); len(elem) >= l && elem[0:l] == "accounts" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "GET":
																r.name = "ListCoreV1NamespacedServiceAccount"
																r.summary = ""
																r.operationID = "listCoreV1NamespacedServiceAccount"
																r.pathPattern = "/api/v1/namespaces/{namespace}/serviceaccounts"
																r.args = args
																r.count = 1
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
																elem = elem[l:]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args[1] = elem
															elem = ""

															if len(elem) == 0 {
																switch method {
																case "GET":
																	// Leaf: ReadCoreV1NamespacedServiceAccount
																	r.name = "ReadCoreV1NamespacedServiceAccount"
																	r.summary = ""
																	r.operationID = "readCoreV1NamespacedServiceAccount"
																	r.pathPattern = "/api/v1/namespaces/{namespace}/serviceaccounts/{name}"
																	r.args = args
																	r.count = 2
																	return r, true
																default:
																	return
																}
															}
														}
													case 's': // Prefix: "s"
														if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "GET":
																r.name = "ListCoreV1NamespacedService"
																r.summary = ""
																r.operationID = "listCoreV1NamespacedService"
																r.pathPattern = "/api/v1/namespaces/{namespace}/services"
																r.args = args
																r.count = 1
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
																elem = elem[l:]
															} else {
																break
															}

															// Param: "name"
															// Match until "/"
															idx := strings.IndexByte(elem, '/')
															if idx < 0 {
																idx = len(elem)
															}
															args[1] = elem[:idx]
															elem = elem[idx:]

															if len(elem) == 0 {
																switch method {
																case "GET":
																	r.name = "ReadCoreV1NamespacedService"
																	r.summary = ""
																	r.operationID = "readCoreV1NamespacedService"
																	r.pathPattern = "/api/v1/namespaces/{namespace}/services/{name}"
																	r.args = args
																	r.count = 2
																	return r, true
																default:
																	return
																}
															}
															switch elem[0] {
															case '/': // Prefix: "/"
																if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	break
																}
																switch elem[0] {
																case 'p': // Prefix: "proxy"
																	if l := len("proxy"); len(elem) >= l && elem[0:l] == "proxy" {
																		elem = elem[l:]
																	} else {
																		break
																	}

																	if len(elem) == 0 {
																		switch method {
																		case "DELETE":
																			r.name = "ConnectCoreV1DeleteNamespacedServiceProxy"
																			r.summary = ""
																			r.operationID = "connectCoreV1DeleteNamespacedServiceProxy"
																			r.pathPattern = "/api/v1/namespaces/{namespace}/services/{name}/proxy"
																			r.args = args
																			r.count = 2
																			return r, true
																		case "GET":
																			r.name = "ConnectCoreV1GetNamespacedServiceProxy"
																			r.summary = ""
																			r.operationID = "connectCoreV1GetNamespacedServiceProxy"
																			r.pathPattern = "/api/v1/namespaces/{namespace}/services/{name}/proxy"
																			r.args = args
																			r.count = 2
																			return r, true
																		case "HEAD":
																			r.name = "ConnectCoreV1HeadNamespacedServiceProxy"
																			r.summary = ""
																			r.operationID = "connectCoreV1HeadNamespacedServiceProxy"
																			r.pathPattern = "/api/v1/namespaces/{namespace}/services/{name}/proxy"
																			r.args = args
																			r.count = 2
																			return r, true
																		case "OPTIONS":
																			r.name = "ConnectCoreV1OptionsNamespacedServiceProxy"
																			r.summary = ""
																			r.operationID = "connectCoreV1OptionsNamespacedServiceProxy"
																			r.pathPattern = "/api/v1/namespaces/{namespace}/services/{name}/proxy"
																			r.args = args
																			r.count = 2
																			return r, true
																		case "PATCH":
																			r.name = "ConnectCoreV1PatchNamespacedServiceProxy"
																			r.summary = ""
																			r.operationID = "connectCoreV1PatchNamespacedServiceProxy"
																			r.pathPattern = "/api/v1/namespaces/{namespace}/services/{name}/proxy"
																			r.args = args
																			r.count = 2
																			return r, true
																		case "POST":
																			r.name = "ConnectCoreV1PostNamespacedServiceProxy"
																			r.summary = ""
																			r.operationID = "connectCoreV1PostNamespacedServiceProxy"
																			r.pathPattern = "/api/v1/namespaces/{namespace}/services/{name}/proxy"
																			r.args = args
																			r.count = 2
																			return r, true
																		case "PUT":
																			r.name = "ConnectCoreV1PutNamespacedServiceProxy"
																			r.summary = ""
																			r.operationID = "connectCoreV1PutNamespacedServiceProxy"
																			r.pathPattern = "/api/v1/namespaces/{namespace}/services/{name}/proxy"
																			r.args = args
																			r.count = 2
																			return r, true
																		default:
																			return
																		}
																	}
																	switch elem[0] {
																	case '/': // Prefix: "/"
																		if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
																			elem = elem[l:]
																		} else {
																			break
																		}

																		// Param: "path"
																		// Leaf parameter
																		args[2] = elem
																		elem = ""

																		if len(elem) == 0 {
																			switch method {
																			case "DELETE":
																				// Leaf: ConnectCoreV1DeleteNamespacedServiceProxyWithPath
																				r.name = "ConnectCoreV1DeleteNamespacedServiceProxyWithPath"
																				r.summary = ""
																				r.operationID = "connectCoreV1DeleteNamespacedServiceProxyWithPath"
																				r.pathPattern = "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}"
																				r.args = args
																				r.count = 3
																				return r, true
																			case "GET":
																				// Leaf: ConnectCoreV1GetNamespacedServiceProxyWithPath
																				r.name = "ConnectCoreV1GetNamespacedServiceProxyWithPath"
																				r.summary = ""
																				r.operationID = "connectCoreV1GetNamespacedServiceProxyWithPath"
																				r.pathPattern = "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}"
																				r.args = args
																				r.count = 3
																				return r, true
																			case "HEAD":
																				// Leaf: ConnectCoreV1HeadNamespacedServiceProxyWithPath
																				r.name = "ConnectCoreV1HeadNamespacedServiceProxyWithPath"
																				r.summary = ""
																				r.operationID = "connectCoreV1HeadNamespacedServiceProxyWithPath"
																				r.pathPattern = "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}"
																				r.args = args
																				r.count = 3
																				return r, true
																			case "OPTIONS":
																				// Leaf: ConnectCoreV1OptionsNamespacedServiceProxyWithPath
																				r.name = "ConnectCoreV1OptionsNamespacedServiceProxyWithPath"
																				r.summary = ""
																				r.operationID = "connectCoreV1OptionsNamespacedServiceProxyWithPath"
																				r.pathPattern = "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}"
																				r.args = args
																				r.count = 3
																				return r, true
																			case "PATCH":
																				// Leaf: ConnectCoreV1PatchNamespacedServiceProxyWithPath
																				r.name = "ConnectCoreV1PatchNamespacedServiceProxyWithPath"
																				r.summary = ""
																				r.operationID = "connectCoreV1PatchNamespacedServiceProxyWithPath"
																				r.pathPattern = "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}"
																				r.args = args
																				r.count = 3
																				return r, true
																			case "POST":
																				// Leaf: ConnectCoreV1PostNamespacedServiceProxyWithPath
																				r.name = "ConnectCoreV1PostNamespacedServiceProxyWithPath"
																				r.summary = ""
																				r.operationID = "connectCoreV1PostNamespacedServiceProxyWithPath"
																				r.pathPattern = "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}"
																				r.args = args
																				r.count = 3
																				return r, true
																			case "PUT":
																				// Leaf: ConnectCoreV1PutNamespacedServiceProxyWithPath
																				r.name = "ConnectCoreV1PutNamespacedServiceProxyWithPath"
																				r.summary = ""
																				r.operationID = "connectCoreV1PutNamespacedServiceProxyWithPath"
																				r.pathPattern = "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}"
																				r.args = args
																				r.count = 3
																				return r, true
																			default:
																				return
																			}
																		}
																	}
																case 's': // Prefix: "status"
																	if l := len("status"); len(elem) >= l && elem[0:l] == "status" {
																		elem = elem[l:]
																	} else {
																		break
																	}

																	if len(elem) == 0 {
																		switch method {
																		case "GET":
																			// Leaf: ReadCoreV1NamespacedServiceStatus
																			r.name = "ReadCoreV1NamespacedServiceStatus"
																			r.summary = ""
																			r.operationID = "readCoreV1NamespacedServiceStatus"
																			r.pathPattern = "/api/v1/namespaces/{namespace}/services/{name}/status"
																			r.args = args
																			r.count = 2
																			return r, true
																		default:
																			return
																		}
																	}
																}
															}
														}
													}
												}
											case 't': // Prefix: "tatus"
												if l := len("tatus"); len(elem) >= l && elem[0:l] == "tatus" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "GET":
														// Leaf: ReadCoreV1NamespaceStatus
														r.name = "ReadCoreV1NamespaceStatus"
														r.summary = ""
														r.operationID = "readCoreV1NamespaceStatus"
														r.pathPattern = "/api/v1/namespaces/{name}/status"
														r.args = args
														r.count = 1
														return r, true
													default:
														return
													}
												}
											}
										}
									}
								}
							case 'o': // Prefix: "odes"
								if l := len("odes"); len(elem) >= l && elem[0:l] == "odes" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "ListCoreV1Node"
										r.summary = ""
										r.operationID = "listCoreV1Node"
										r.pathPattern = "/api/v1/nodes"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "name"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = "ReadCoreV1Node"
											r.summary = ""
											r.operationID = "readCoreV1Node"
											r.pathPattern = "/api/v1/nodes/{name}"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'p': // Prefix: "proxy"
											if l := len("proxy"); len(elem) >= l && elem[0:l] == "proxy" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "DELETE":
													r.name = "ConnectCoreV1DeleteNodeProxy"
													r.summary = ""
													r.operationID = "connectCoreV1DeleteNodeProxy"
													r.pathPattern = "/api/v1/nodes/{name}/proxy"
													r.args = args
													r.count = 1
													return r, true
												case "GET":
													r.name = "ConnectCoreV1GetNodeProxy"
													r.summary = ""
													r.operationID = "connectCoreV1GetNodeProxy"
													r.pathPattern = "/api/v1/nodes/{name}/proxy"
													r.args = args
													r.count = 1
													return r, true
												case "HEAD":
													r.name = "ConnectCoreV1HeadNodeProxy"
													r.summary = ""
													r.operationID = "connectCoreV1HeadNodeProxy"
													r.pathPattern = "/api/v1/nodes/{name}/proxy"
													r.args = args
													r.count = 1
													return r, true
												case "OPTIONS":
													r.name = "ConnectCoreV1OptionsNodeProxy"
													r.summary = ""
													r.operationID = "connectCoreV1OptionsNodeProxy"
													r.pathPattern = "/api/v1/nodes/{name}/proxy"
													r.args = args
													r.count = 1
													return r, true
												case "PATCH":
													r.name = "ConnectCoreV1PatchNodeProxy"
													r.summary = ""
													r.operationID = "connectCoreV1PatchNodeProxy"
													r.pathPattern = "/api/v1/nodes/{name}/proxy"
													r.args = args
													r.count = 1
													return r, true
												case "POST":
													r.name = "ConnectCoreV1PostNodeProxy"
													r.summary = ""
													r.operationID = "connectCoreV1PostNodeProxy"
													r.pathPattern = "/api/v1/nodes/{name}/proxy"
													r.args = args
													r.count = 1
													return r, true
												case "PUT":
													r.name = "ConnectCoreV1PutNodeProxy"
													r.summary = ""
													r.operationID = "connectCoreV1PutNodeProxy"
													r.pathPattern = "/api/v1/nodes/{name}/proxy"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "path"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													switch method {
													case "DELETE":
														// Leaf: ConnectCoreV1DeleteNodeProxyWithPath
														r.name = "ConnectCoreV1DeleteNodeProxyWithPath"
														r.summary = ""
														r.operationID = "connectCoreV1DeleteNodeProxyWithPath"
														r.pathPattern = "/api/v1/nodes/{name}/proxy/{path}"
														r.args = args
														r.count = 2
														return r, true
													case "GET":
														// Leaf: ConnectCoreV1GetNodeProxyWithPath
														r.name = "ConnectCoreV1GetNodeProxyWithPath"
														r.summary = ""
														r.operationID = "connectCoreV1GetNodeProxyWithPath"
														r.pathPattern = "/api/v1/nodes/{name}/proxy/{path}"
														r.args = args
														r.count = 2
														return r, true
													case "HEAD":
														// Leaf: ConnectCoreV1HeadNodeProxyWithPath
														r.name = "ConnectCoreV1HeadNodeProxyWithPath"
														r.summary = ""
														r.operationID = "connectCoreV1HeadNodeProxyWithPath"
														r.pathPattern = "/api/v1/nodes/{name}/proxy/{path}"
														r.args = args
														r.count = 2
														return r, true
													case "OPTIONS":
														// Leaf: ConnectCoreV1OptionsNodeProxyWithPath
														r.name = "ConnectCoreV1OptionsNodeProxyWithPath"
														r.summary = ""
														r.operationID = "connectCoreV1OptionsNodeProxyWithPath"
														r.pathPattern = "/api/v1/nodes/{name}/proxy/{path}"
														r.args = args
														r.count = 2
														return r, true
													case "PATCH":
														// Leaf: ConnectCoreV1PatchNodeProxyWithPath
														r.name = "ConnectCoreV1PatchNodeProxyWithPath"
														r.summary = ""
														r.operationID = "connectCoreV1PatchNodeProxyWithPath"
														r.pathPattern = "/api/v1/nodes/{name}/proxy/{path}"
														r.args = args
														r.count = 2
														return r, true
													case "POST":
														// Leaf: ConnectCoreV1PostNodeProxyWithPath
														r.name = "ConnectCoreV1PostNodeProxyWithPath"
														r.summary = ""
														r.operationID = "connectCoreV1PostNodeProxyWithPath"
														r.pathPattern = "/api/v1/nodes/{name}/proxy/{path}"
														r.args = args
														r.count = 2
														return r, true
													case "PUT":
														// Leaf: ConnectCoreV1PutNodeProxyWithPath
														r.name = "ConnectCoreV1PutNodeProxyWithPath"
														r.summary = ""
														r.operationID = "connectCoreV1PutNodeProxyWithPath"
														r.pathPattern = "/api/v1/nodes/{name}/proxy/{path}"
														r.args = args
														r.count = 2
														return r, true
													default:
														return
													}
												}
											}
										case 's': // Prefix: "status"
											if l := len("status"); len(elem) >= l && elem[0:l] == "status" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "GET":
													// Leaf: ReadCoreV1NodeStatus
													r.name = "ReadCoreV1NodeStatus"
													r.summary = ""
													r.operationID = "readCoreV1NodeStatus"
													r.pathPattern = "/api/v1/nodes/{name}/status"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}
										}
									}
								}
							}
						case 'p': // Prefix: "p"
							if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'e': // Prefix: "ersistentvolume"
								if l := len("ersistentvolume"); len(elem) >= l && elem[0:l] == "ersistentvolume" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'c': // Prefix: "claims"
									if l := len("claims"); len(elem) >= l && elem[0:l] == "claims" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: ListCoreV1PersistentVolumeClaimForAllNamespaces
											r.name = "ListCoreV1PersistentVolumeClaimForAllNamespaces"
											r.summary = ""
											r.operationID = "listCoreV1PersistentVolumeClaimForAllNamespaces"
											r.pathPattern = "/api/v1/persistentvolumeclaims"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
								case 's': // Prefix: "s"
									if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = "ListCoreV1PersistentVolume"
											r.summary = ""
											r.operationID = "listCoreV1PersistentVolume"
											r.pathPattern = "/api/v1/persistentvolumes"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											switch method {
											case "GET":
												r.name = "ReadCoreV1PersistentVolume"
												r.summary = ""
												r.operationID = "readCoreV1PersistentVolume"
												r.pathPattern = "/api/v1/persistentvolumes/{name}"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/status"
											if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "GET":
													// Leaf: ReadCoreV1PersistentVolumeStatus
													r.name = "ReadCoreV1PersistentVolumeStatus"
													r.summary = ""
													r.operationID = "readCoreV1PersistentVolumeStatus"
													r.pathPattern = "/api/v1/persistentvolumes/{name}/status"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}
										}
									}
								}
							case 'o': // Prefix: "od"
								if l := len("od"); len(elem) >= l && elem[0:l] == "od" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 's': // Prefix: "s"
									if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: ListCoreV1PodForAllNamespaces
											r.name = "ListCoreV1PodForAllNamespaces"
											r.summary = ""
											r.operationID = "listCoreV1PodForAllNamespaces"
											r.pathPattern = "/api/v1/pods"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
								case 't': // Prefix: "templates"
									if l := len("templates"); len(elem) >= l && elem[0:l] == "templates" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: ListCoreV1PodTemplateForAllNamespaces
											r.name = "ListCoreV1PodTemplateForAllNamespaces"
											r.summary = ""
											r.operationID = "listCoreV1PodTemplateForAllNamespaces"
											r.pathPattern = "/api/v1/podtemplates"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
								}
							}
						case 'r': // Prefix: "re"
							if l := len("re"); len(elem) >= l && elem[0:l] == "re" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'p': // Prefix: "plicationcontrollers"
								if l := len("plicationcontrollers"); len(elem) >= l && elem[0:l] == "plicationcontrollers" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: ListCoreV1ReplicationControllerForAllNamespaces
										r.name = "ListCoreV1ReplicationControllerForAllNamespaces"
										r.summary = ""
										r.operationID = "listCoreV1ReplicationControllerForAllNamespaces"
										r.pathPattern = "/api/v1/replicationcontrollers"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
							case 's': // Prefix: "sourcequotas"
								if l := len("sourcequotas"); len(elem) >= l && elem[0:l] == "sourcequotas" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: ListCoreV1ResourceQuotaForAllNamespaces
										r.name = "ListCoreV1ResourceQuotaForAllNamespaces"
										r.summary = ""
										r.operationID = "listCoreV1ResourceQuotaForAllNamespaces"
										r.pathPattern = "/api/v1/resourcequotas"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
							}
						case 's': // Prefix: "se"
							if l := len("se"); len(elem) >= l && elem[0:l] == "se" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'c': // Prefix: "crets"
								if l := len("crets"); len(elem) >= l && elem[0:l] == "crets" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: ListCoreV1SecretForAllNamespaces
										r.name = "ListCoreV1SecretForAllNamespaces"
										r.summary = ""
										r.operationID = "listCoreV1SecretForAllNamespaces"
										r.pathPattern = "/api/v1/secrets"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
							case 'r': // Prefix: "rvice"
								if l := len("rvice"); len(elem) >= l && elem[0:l] == "rvice" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "accounts"
									if l := len("accounts"); len(elem) >= l && elem[0:l] == "accounts" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: ListCoreV1ServiceAccountForAllNamespaces
											r.name = "ListCoreV1ServiceAccountForAllNamespaces"
											r.summary = ""
											r.operationID = "listCoreV1ServiceAccountForAllNamespaces"
											r.pathPattern = "/api/v1/serviceaccounts"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
								case 's': // Prefix: "s"
									if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: ListCoreV1ServiceForAllNamespaces
											r.name = "ListCoreV1ServiceForAllNamespaces"
											r.summary = ""
											r.operationID = "listCoreV1ServiceForAllNamespaces"
											r.pathPattern = "/api/v1/services"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
								}
							}
						case 'w': // Prefix: "watch/"
							if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'c': // Prefix: "configmaps"
								if l := len("configmaps"); len(elem) >= l && elem[0:l] == "configmaps" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: WatchCoreV1ConfigMapListForAllNamespaces
										r.name = "WatchCoreV1ConfigMapListForAllNamespaces"
										r.summary = ""
										r.operationID = "watchCoreV1ConfigMapListForAllNamespaces"
										r.pathPattern = "/api/v1/watch/configmaps"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
							case 'e': // Prefix: "e"
								if l := len("e"); len(elem) >= l && elem[0:l] == "e" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'n': // Prefix: "ndpoints"
									if l := len("ndpoints"); len(elem) >= l && elem[0:l] == "ndpoints" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: WatchCoreV1EndpointsListForAllNamespaces
											r.name = "WatchCoreV1EndpointsListForAllNamespaces"
											r.summary = ""
											r.operationID = "watchCoreV1EndpointsListForAllNamespaces"
											r.pathPattern = "/api/v1/watch/endpoints"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
								case 'v': // Prefix: "vents"
									if l := len("vents"); len(elem) >= l && elem[0:l] == "vents" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: WatchCoreV1EventListForAllNamespaces
											r.name = "WatchCoreV1EventListForAllNamespaces"
											r.summary = ""
											r.operationID = "watchCoreV1EventListForAllNamespaces"
											r.pathPattern = "/api/v1/watch/events"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
								}
							case 'l': // Prefix: "limitranges"
								if l := len("limitranges"); len(elem) >= l && elem[0:l] == "limitranges" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: WatchCoreV1LimitRangeListForAllNamespaces
										r.name = "WatchCoreV1LimitRangeListForAllNamespaces"
										r.summary = ""
										r.operationID = "watchCoreV1LimitRangeListForAllNamespaces"
										r.pathPattern = "/api/v1/watch/limitranges"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
							case 'n': // Prefix: "n"
								if l := len("n"); len(elem) >= l && elem[0:l] == "n" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "amespaces"
									if l := len("amespaces"); len(elem) >= l && elem[0:l] == "amespaces" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = "WatchCoreV1NamespaceList"
											r.summary = ""
											r.operationID = "watchCoreV1NamespaceList"
											r.pathPattern = "/api/v1/watch/namespaces"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											switch method {
											case "GET":
												r.name = "WatchCoreV1Namespace"
												r.summary = ""
												r.operationID = "watchCoreV1Namespace"
												r.pathPattern = "/api/v1/watch/namespaces/{name}"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'c': // Prefix: "configmaps"
												if l := len("configmaps"); len(elem) >= l && elem[0:l] == "configmaps" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "GET":
														r.name = "WatchCoreV1NamespacedConfigMapList"
														r.summary = ""
														r.operationID = "watchCoreV1NamespacedConfigMapList"
														r.pathPattern = "/api/v1/watch/namespaces/{namespace}/configmaps"
														r.args = args
														r.count = 1
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args[1] = elem
													elem = ""

													if len(elem) == 0 {
														switch method {
														case "GET":
															// Leaf: WatchCoreV1NamespacedConfigMap
															r.name = "WatchCoreV1NamespacedConfigMap"
															r.summary = ""
															r.operationID = "watchCoreV1NamespacedConfigMap"
															r.pathPattern = "/api/v1/watch/namespaces/{namespace}/configmaps/{name}"
															r.args = args
															r.count = 2
															return r, true
														default:
															return
														}
													}
												}
											case 'e': // Prefix: "e"
												if l := len("e"); len(elem) >= l && elem[0:l] == "e" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'n': // Prefix: "ndpoints"
													if l := len("ndpoints"); len(elem) >= l && elem[0:l] == "ndpoints" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "GET":
															r.name = "WatchCoreV1NamespacedEndpointsList"
															r.summary = ""
															r.operationID = "watchCoreV1NamespacedEndpointsList"
															r.pathPattern = "/api/v1/watch/namespaces/{namespace}/endpoints"
															r.args = args
															r.count = 1
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															switch method {
															case "GET":
																// Leaf: WatchCoreV1NamespacedEndpoints
																r.name = "WatchCoreV1NamespacedEndpoints"
																r.summary = ""
																r.operationID = "watchCoreV1NamespacedEndpoints"
																r.pathPattern = "/api/v1/watch/namespaces/{namespace}/endpoints/{name}"
																r.args = args
																r.count = 2
																return r, true
															default:
																return
															}
														}
													}
												case 'v': // Prefix: "vents"
													if l := len("vents"); len(elem) >= l && elem[0:l] == "vents" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "GET":
															r.name = "WatchCoreV1NamespacedEventList"
															r.summary = ""
															r.operationID = "watchCoreV1NamespacedEventList"
															r.pathPattern = "/api/v1/watch/namespaces/{namespace}/events"
															r.args = args
															r.count = 1
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															switch method {
															case "GET":
																// Leaf: WatchCoreV1NamespacedEvent
																r.name = "WatchCoreV1NamespacedEvent"
																r.summary = ""
																r.operationID = "watchCoreV1NamespacedEvent"
																r.pathPattern = "/api/v1/watch/namespaces/{namespace}/events/{name}"
																r.args = args
																r.count = 2
																return r, true
															default:
																return
															}
														}
													}
												}
											case 'l': // Prefix: "limitranges"
												if l := len("limitranges"); len(elem) >= l && elem[0:l] == "limitranges" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "GET":
														r.name = "WatchCoreV1NamespacedLimitRangeList"
														r.summary = ""
														r.operationID = "watchCoreV1NamespacedLimitRangeList"
														r.pathPattern = "/api/v1/watch/namespaces/{namespace}/limitranges"
														r.args = args
														r.count = 1
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args[1] = elem
													elem = ""

													if len(elem) == 0 {
														switch method {
														case "GET":
															// Leaf: WatchCoreV1NamespacedLimitRange
															r.name = "WatchCoreV1NamespacedLimitRange"
															r.summary = ""
															r.operationID = "watchCoreV1NamespacedLimitRange"
															r.pathPattern = "/api/v1/watch/namespaces/{namespace}/limitranges/{name}"
															r.args = args
															r.count = 2
															return r, true
														default:
															return
														}
													}
												}
											case 'p': // Prefix: "p"
												if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'e': // Prefix: "ersistentvolumeclaims"
													if l := len("ersistentvolumeclaims"); len(elem) >= l && elem[0:l] == "ersistentvolumeclaims" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "GET":
															r.name = "WatchCoreV1NamespacedPersistentVolumeClaimList"
															r.summary = ""
															r.operationID = "watchCoreV1NamespacedPersistentVolumeClaimList"
															r.pathPattern = "/api/v1/watch/namespaces/{namespace}/persistentvolumeclaims"
															r.args = args
															r.count = 1
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															switch method {
															case "GET":
																// Leaf: WatchCoreV1NamespacedPersistentVolumeClaim
																r.name = "WatchCoreV1NamespacedPersistentVolumeClaim"
																r.summary = ""
																r.operationID = "watchCoreV1NamespacedPersistentVolumeClaim"
																r.pathPattern = "/api/v1/watch/namespaces/{namespace}/persistentvolumeclaims/{name}"
																r.args = args
																r.count = 2
																return r, true
															default:
																return
															}
														}
													}
												case 'o': // Prefix: "od"
													if l := len("od"); len(elem) >= l && elem[0:l] == "od" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 's': // Prefix: "s"
														if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "GET":
																r.name = "WatchCoreV1NamespacedPodList"
																r.summary = ""
																r.operationID = "watchCoreV1NamespacedPodList"
																r.pathPattern = "/api/v1/watch/namespaces/{namespace}/pods"
																r.args = args
																r.count = 1
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
																elem = elem[l:]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args[1] = elem
															elem = ""

															if len(elem) == 0 {
																switch method {
																case "GET":
																	// Leaf: WatchCoreV1NamespacedPod
																	r.name = "WatchCoreV1NamespacedPod"
																	r.summary = ""
																	r.operationID = "watchCoreV1NamespacedPod"
																	r.pathPattern = "/api/v1/watch/namespaces/{namespace}/pods/{name}"
																	r.args = args
																	r.count = 2
																	return r, true
																default:
																	return
																}
															}
														}
													case 't': // Prefix: "templates"
														if l := len("templates"); len(elem) >= l && elem[0:l] == "templates" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "GET":
																r.name = "WatchCoreV1NamespacedPodTemplateList"
																r.summary = ""
																r.operationID = "watchCoreV1NamespacedPodTemplateList"
																r.pathPattern = "/api/v1/watch/namespaces/{namespace}/podtemplates"
																r.args = args
																r.count = 1
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
																elem = elem[l:]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args[1] = elem
															elem = ""

															if len(elem) == 0 {
																switch method {
																case "GET":
																	// Leaf: WatchCoreV1NamespacedPodTemplate
																	r.name = "WatchCoreV1NamespacedPodTemplate"
																	r.summary = ""
																	r.operationID = "watchCoreV1NamespacedPodTemplate"
																	r.pathPattern = "/api/v1/watch/namespaces/{namespace}/podtemplates/{name}"
																	r.args = args
																	r.count = 2
																	return r, true
																default:
																	return
																}
															}
														}
													}
												}
											case 'r': // Prefix: "re"
												if l := len("re"); len(elem) >= l && elem[0:l] == "re" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'p': // Prefix: "plicationcontrollers"
													if l := len("plicationcontrollers"); len(elem) >= l && elem[0:l] == "plicationcontrollers" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "GET":
															r.name = "WatchCoreV1NamespacedReplicationControllerList"
															r.summary = ""
															r.operationID = "watchCoreV1NamespacedReplicationControllerList"
															r.pathPattern = "/api/v1/watch/namespaces/{namespace}/replicationcontrollers"
															r.args = args
															r.count = 1
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															switch method {
															case "GET":
																// Leaf: WatchCoreV1NamespacedReplicationController
																r.name = "WatchCoreV1NamespacedReplicationController"
																r.summary = ""
																r.operationID = "watchCoreV1NamespacedReplicationController"
																r.pathPattern = "/api/v1/watch/namespaces/{namespace}/replicationcontrollers/{name}"
																r.args = args
																r.count = 2
																return r, true
															default:
																return
															}
														}
													}
												case 's': // Prefix: "sourcequotas"
													if l := len("sourcequotas"); len(elem) >= l && elem[0:l] == "sourcequotas" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "GET":
															r.name = "WatchCoreV1NamespacedResourceQuotaList"
															r.summary = ""
															r.operationID = "watchCoreV1NamespacedResourceQuotaList"
															r.pathPattern = "/api/v1/watch/namespaces/{namespace}/resourcequotas"
															r.args = args
															r.count = 1
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															switch method {
															case "GET":
																// Leaf: WatchCoreV1NamespacedResourceQuota
																r.name = "WatchCoreV1NamespacedResourceQuota"
																r.summary = ""
																r.operationID = "watchCoreV1NamespacedResourceQuota"
																r.pathPattern = "/api/v1/watch/namespaces/{namespace}/resourcequotas/{name}"
																r.args = args
																r.count = 2
																return r, true
															default:
																return
															}
														}
													}
												}
											case 's': // Prefix: "se"
												if l := len("se"); len(elem) >= l && elem[0:l] == "se" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'c': // Prefix: "crets"
													if l := len("crets"); len(elem) >= l && elem[0:l] == "crets" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "GET":
															r.name = "WatchCoreV1NamespacedSecretList"
															r.summary = ""
															r.operationID = "watchCoreV1NamespacedSecretList"
															r.pathPattern = "/api/v1/watch/namespaces/{namespace}/secrets"
															r.args = args
															r.count = 1
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															switch method {
															case "GET":
																// Leaf: WatchCoreV1NamespacedSecret
																r.name = "WatchCoreV1NamespacedSecret"
																r.summary = ""
																r.operationID = "watchCoreV1NamespacedSecret"
																r.pathPattern = "/api/v1/watch/namespaces/{namespace}/secrets/{name}"
																r.args = args
																r.count = 2
																return r, true
															default:
																return
															}
														}
													}
												case 'r': // Prefix: "rvice"
													if l := len("rvice"); len(elem) >= l && elem[0:l] == "rvice" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "accounts"
														if l := len("accounts"); len(elem) >= l && elem[0:l] == "accounts" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "GET":
																r.name = "WatchCoreV1NamespacedServiceAccountList"
																r.summary = ""
																r.operationID = "watchCoreV1NamespacedServiceAccountList"
																r.pathPattern = "/api/v1/watch/namespaces/{namespace}/serviceaccounts"
																r.args = args
																r.count = 1
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
																elem = elem[l:]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args[1] = elem
															elem = ""

															if len(elem) == 0 {
																switch method {
																case "GET":
																	// Leaf: WatchCoreV1NamespacedServiceAccount
																	r.name = "WatchCoreV1NamespacedServiceAccount"
																	r.summary = ""
																	r.operationID = "watchCoreV1NamespacedServiceAccount"
																	r.pathPattern = "/api/v1/watch/namespaces/{namespace}/serviceaccounts/{name}"
																	r.args = args
																	r.count = 2
																	return r, true
																default:
																	return
																}
															}
														}
													case 's': // Prefix: "s"
														if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "GET":
																r.name = "WatchCoreV1NamespacedServiceList"
																r.summary = ""
																r.operationID = "watchCoreV1NamespacedServiceList"
																r.pathPattern = "/api/v1/watch/namespaces/{namespace}/services"
																r.args = args
																r.count = 1
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
																elem = elem[l:]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args[1] = elem
															elem = ""

															if len(elem) == 0 {
																switch method {
																case "GET":
																	// Leaf: WatchCoreV1NamespacedService
																	r.name = "WatchCoreV1NamespacedService"
																	r.summary = ""
																	r.operationID = "watchCoreV1NamespacedService"
																	r.pathPattern = "/api/v1/watch/namespaces/{namespace}/services/{name}"
																	r.args = args
																	r.count = 2
																	return r, true
																default:
																	return
																}
															}
														}
													}
												}
											}
										}
									}
								case 'o': // Prefix: "odes"
									if l := len("odes"); len(elem) >= l && elem[0:l] == "odes" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = "WatchCoreV1NodeList"
											r.summary = ""
											r.operationID = "watchCoreV1NodeList"
											r.pathPattern = "/api/v1/watch/nodes"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Leaf parameter
										args[0] = elem
										elem = ""

										if len(elem) == 0 {
											switch method {
											case "GET":
												// Leaf: WatchCoreV1Node
												r.name = "WatchCoreV1Node"
												r.summary = ""
												r.operationID = "watchCoreV1Node"
												r.pathPattern = "/api/v1/watch/nodes/{name}"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}
									}
								}
							case 'p': // Prefix: "p"
								if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'e': // Prefix: "ersistentvolume"
									if l := len("ersistentvolume"); len(elem) >= l && elem[0:l] == "ersistentvolume" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'c': // Prefix: "claims"
										if l := len("claims"); len(elem) >= l && elem[0:l] == "claims" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												// Leaf: WatchCoreV1PersistentVolumeClaimListForAllNamespaces
												r.name = "WatchCoreV1PersistentVolumeClaimListForAllNamespaces"
												r.summary = ""
												r.operationID = "watchCoreV1PersistentVolumeClaimListForAllNamespaces"
												r.pathPattern = "/api/v1/watch/persistentvolumeclaims"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
									case 's': // Prefix: "s"
										if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												r.name = "WatchCoreV1PersistentVolumeList"
												r.summary = ""
												r.operationID = "watchCoreV1PersistentVolumeList"
												r.pathPattern = "/api/v1/watch/persistentvolumes"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												switch method {
												case "GET":
													// Leaf: WatchCoreV1PersistentVolume
													r.name = "WatchCoreV1PersistentVolume"
													r.summary = ""
													r.operationID = "watchCoreV1PersistentVolume"
													r.pathPattern = "/api/v1/watch/persistentvolumes/{name}"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}
										}
									}
								case 'o': // Prefix: "od"
									if l := len("od"); len(elem) >= l && elem[0:l] == "od" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 's': // Prefix: "s"
										if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												// Leaf: WatchCoreV1PodListForAllNamespaces
												r.name = "WatchCoreV1PodListForAllNamespaces"
												r.summary = ""
												r.operationID = "watchCoreV1PodListForAllNamespaces"
												r.pathPattern = "/api/v1/watch/pods"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
									case 't': // Prefix: "templates"
										if l := len("templates"); len(elem) >= l && elem[0:l] == "templates" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												// Leaf: WatchCoreV1PodTemplateListForAllNamespaces
												r.name = "WatchCoreV1PodTemplateListForAllNamespaces"
												r.summary = ""
												r.operationID = "watchCoreV1PodTemplateListForAllNamespaces"
												r.pathPattern = "/api/v1/watch/podtemplates"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
									}
								}
							case 'r': // Prefix: "re"
								if l := len("re"); len(elem) >= l && elem[0:l] == "re" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'p': // Prefix: "plicationcontrollers"
									if l := len("plicationcontrollers"); len(elem) >= l && elem[0:l] == "plicationcontrollers" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: WatchCoreV1ReplicationControllerListForAllNamespaces
											r.name = "WatchCoreV1ReplicationControllerListForAllNamespaces"
											r.summary = ""
											r.operationID = "watchCoreV1ReplicationControllerListForAllNamespaces"
											r.pathPattern = "/api/v1/watch/replicationcontrollers"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
								case 's': // Prefix: "sourcequotas"
									if l := len("sourcequotas"); len(elem) >= l && elem[0:l] == "sourcequotas" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: WatchCoreV1ResourceQuotaListForAllNamespaces
											r.name = "WatchCoreV1ResourceQuotaListForAllNamespaces"
											r.summary = ""
											r.operationID = "watchCoreV1ResourceQuotaListForAllNamespaces"
											r.pathPattern = "/api/v1/watch/resourcequotas"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
								}
							case 's': // Prefix: "se"
								if l := len("se"); len(elem) >= l && elem[0:l] == "se" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'c': // Prefix: "crets"
									if l := len("crets"); len(elem) >= l && elem[0:l] == "crets" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: WatchCoreV1SecretListForAllNamespaces
											r.name = "WatchCoreV1SecretListForAllNamespaces"
											r.summary = ""
											r.operationID = "watchCoreV1SecretListForAllNamespaces"
											r.pathPattern = "/api/v1/watch/secrets"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
								case 'r': // Prefix: "rvice"
									if l := len("rvice"); len(elem) >= l && elem[0:l] == "rvice" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "accounts"
										if l := len("accounts"); len(elem) >= l && elem[0:l] == "accounts" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												// Leaf: WatchCoreV1ServiceAccountListForAllNamespaces
												r.name = "WatchCoreV1ServiceAccountListForAllNamespaces"
												r.summary = ""
												r.operationID = "watchCoreV1ServiceAccountListForAllNamespaces"
												r.pathPattern = "/api/v1/watch/serviceaccounts"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
									case 's': // Prefix: "s"
										if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												// Leaf: WatchCoreV1ServiceListForAllNamespaces
												r.name = "WatchCoreV1ServiceListForAllNamespaces"
												r.summary = ""
												r.operationID = "watchCoreV1ServiceListForAllNamespaces"
												r.pathPattern = "/api/v1/watch/services"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
									}
								}
							}
						}
					}
				case 's': // Prefix: "s/"
					if l := len("s/"); len(elem) >= l && elem[0:l] == "s/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "GetAPIVersions"
							r.summary = ""
							r.operationID = "getAPIVersions"
							r.pathPattern = "/apis/"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case 'a': // Prefix: "a"
						if l := len("a"); len(elem) >= l && elem[0:l] == "a" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'd': // Prefix: "dmissionregistration.k8s.io/"
							if l := len("dmissionregistration.k8s.io/"); len(elem) >= l && elem[0:l] == "dmissionregistration.k8s.io/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = "GetAdmissionregistrationAPIGroup"
									r.summary = ""
									r.operationID = "getAdmissionregistrationAPIGroup"
									r.pathPattern = "/apis/admissionregistration.k8s.io/"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case 'v': // Prefix: "v1/"
								if l := len("v1/"); len(elem) >= l && elem[0:l] == "v1/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "GetAdmissionregistrationV1APIResources"
										r.summary = ""
										r.operationID = "getAdmissionregistrationV1APIResources"
										r.pathPattern = "/apis/admissionregistration.k8s.io/v1/"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case 'm': // Prefix: "mutatingwebhookconfigurations"
									if l := len("mutatingwebhookconfigurations"); len(elem) >= l && elem[0:l] == "mutatingwebhookconfigurations" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = "ListAdmissionregistrationV1MutatingWebhookConfiguration"
											r.summary = ""
											r.operationID = "listAdmissionregistrationV1MutatingWebhookConfiguration"
											r.pathPattern = "/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Leaf parameter
										args[0] = elem
										elem = ""

										if len(elem) == 0 {
											switch method {
											case "GET":
												// Leaf: ReadAdmissionregistrationV1MutatingWebhookConfiguration
												r.name = "ReadAdmissionregistrationV1MutatingWebhookConfiguration"
												r.summary = ""
												r.operationID = "readAdmissionregistrationV1MutatingWebhookConfiguration"
												r.pathPattern = "/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations/{name}"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}
									}
								case 'v': // Prefix: "validatingwebhookconfigurations"
									if l := len("validatingwebhookconfigurations"); len(elem) >= l && elem[0:l] == "validatingwebhookconfigurations" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = "ListAdmissionregistrationV1ValidatingWebhookConfiguration"
											r.summary = ""
											r.operationID = "listAdmissionregistrationV1ValidatingWebhookConfiguration"
											r.pathPattern = "/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Leaf parameter
										args[0] = elem
										elem = ""

										if len(elem) == 0 {
											switch method {
											case "GET":
												// Leaf: ReadAdmissionregistrationV1ValidatingWebhookConfiguration
												r.name = "ReadAdmissionregistrationV1ValidatingWebhookConfiguration"
												r.summary = ""
												r.operationID = "readAdmissionregistrationV1ValidatingWebhookConfiguration"
												r.pathPattern = "/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations/{name}"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}
									}
								case 'w': // Prefix: "watch/"
									if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'm': // Prefix: "mutatingwebhookconfigurations"
										if l := len("mutatingwebhookconfigurations"); len(elem) >= l && elem[0:l] == "mutatingwebhookconfigurations" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												r.name = "WatchAdmissionregistrationV1MutatingWebhookConfigurationList"
												r.summary = ""
												r.operationID = "watchAdmissionregistrationV1MutatingWebhookConfigurationList"
												r.pathPattern = "/apis/admissionregistration.k8s.io/v1/watch/mutatingwebhookconfigurations"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												switch method {
												case "GET":
													// Leaf: WatchAdmissionregistrationV1MutatingWebhookConfiguration
													r.name = "WatchAdmissionregistrationV1MutatingWebhookConfiguration"
													r.summary = ""
													r.operationID = "watchAdmissionregistrationV1MutatingWebhookConfiguration"
													r.pathPattern = "/apis/admissionregistration.k8s.io/v1/watch/mutatingwebhookconfigurations/{name}"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}
										}
									case 'v': // Prefix: "validatingwebhookconfigurations"
										if l := len("validatingwebhookconfigurations"); len(elem) >= l && elem[0:l] == "validatingwebhookconfigurations" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												r.name = "WatchAdmissionregistrationV1ValidatingWebhookConfigurationList"
												r.summary = ""
												r.operationID = "watchAdmissionregistrationV1ValidatingWebhookConfigurationList"
												r.pathPattern = "/apis/admissionregistration.k8s.io/v1/watch/validatingwebhookconfigurations"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												switch method {
												case "GET":
													// Leaf: WatchAdmissionregistrationV1ValidatingWebhookConfiguration
													r.name = "WatchAdmissionregistrationV1ValidatingWebhookConfiguration"
													r.summary = ""
													r.operationID = "watchAdmissionregistrationV1ValidatingWebhookConfiguration"
													r.pathPattern = "/apis/admissionregistration.k8s.io/v1/watch/validatingwebhookconfigurations/{name}"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}
										}
									}
								}
							}
						case 'p': // Prefix: "p"
							if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'i': // Prefix: "i"
								if l := len("i"); len(elem) >= l && elem[0:l] == "i" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'e': // Prefix: "extensions.k8s.io/"
									if l := len("extensions.k8s.io/"); len(elem) >= l && elem[0:l] == "extensions.k8s.io/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = "GetApiextensionsAPIGroup"
											r.summary = ""
											r.operationID = "getApiextensionsAPIGroup"
											r.pathPattern = "/apis/apiextensions.k8s.io/"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case 'v': // Prefix: "v1/"
										if l := len("v1/"); len(elem) >= l && elem[0:l] == "v1/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												r.name = "GetApiextensionsV1APIResources"
												r.summary = ""
												r.operationID = "getApiextensionsV1APIResources"
												r.pathPattern = "/apis/apiextensions.k8s.io/v1/"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case 'c': // Prefix: "customresourcedefinitions"
											if l := len("customresourcedefinitions"); len(elem) >= l && elem[0:l] == "customresourcedefinitions" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "GET":
													r.name = "ListApiextensionsV1CustomResourceDefinition"
													r.summary = ""
													r.operationID = "listApiextensionsV1CustomResourceDefinition"
													r.pathPattern = "/apis/apiextensions.k8s.io/v1/customresourcedefinitions"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Match until "/"
												idx := strings.IndexByte(elem, '/')
												if idx < 0 {
													idx = len(elem)
												}
												args[0] = elem[:idx]
												elem = elem[idx:]

												if len(elem) == 0 {
													switch method {
													case "GET":
														r.name = "ReadApiextensionsV1CustomResourceDefinition"
														r.summary = ""
														r.operationID = "readApiextensionsV1CustomResourceDefinition"
														r.pathPattern = "/apis/apiextensions.k8s.io/v1/customresourcedefinitions/{name}"
														r.args = args
														r.count = 1
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '/': // Prefix: "/status"
													if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "GET":
															// Leaf: ReadApiextensionsV1CustomResourceDefinitionStatus
															r.name = "ReadApiextensionsV1CustomResourceDefinitionStatus"
															r.summary = ""
															r.operationID = "readApiextensionsV1CustomResourceDefinitionStatus"
															r.pathPattern = "/apis/apiextensions.k8s.io/v1/customresourcedefinitions/{name}/status"
															r.args = args
															r.count = 1
															return r, true
														default:
															return
														}
													}
												}
											}
										case 'w': // Prefix: "watch/customresourcedefinitions"
											if l := len("watch/customresourcedefinitions"); len(elem) >= l && elem[0:l] == "watch/customresourcedefinitions" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "GET":
													r.name = "WatchApiextensionsV1CustomResourceDefinitionList"
													r.summary = ""
													r.operationID = "watchApiextensionsV1CustomResourceDefinitionList"
													r.pathPattern = "/apis/apiextensions.k8s.io/v1/watch/customresourcedefinitions"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[0] = elem
												elem = ""

												if len(elem) == 0 {
													switch method {
													case "GET":
														// Leaf: WatchApiextensionsV1CustomResourceDefinition
														r.name = "WatchApiextensionsV1CustomResourceDefinition"
														r.summary = ""
														r.operationID = "watchApiextensionsV1CustomResourceDefinition"
														r.pathPattern = "/apis/apiextensions.k8s.io/v1/watch/customresourcedefinitions/{name}"
														r.args = args
														r.count = 1
														return r, true
													default:
														return
													}
												}
											}
										}
									}
								case 'r': // Prefix: "registration.k8s.io/"
									if l := len("registration.k8s.io/"); len(elem) >= l && elem[0:l] == "registration.k8s.io/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = "GetApiregistrationAPIGroup"
											r.summary = ""
											r.operationID = "getApiregistrationAPIGroup"
											r.pathPattern = "/apis/apiregistration.k8s.io/"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case 'v': // Prefix: "v1/"
										if l := len("v1/"); len(elem) >= l && elem[0:l] == "v1/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												r.name = "GetApiregistrationV1APIResources"
												r.summary = ""
												r.operationID = "getApiregistrationV1APIResources"
												r.pathPattern = "/apis/apiregistration.k8s.io/v1/"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case 'a': // Prefix: "apiservices"
											if l := len("apiservices"); len(elem) >= l && elem[0:l] == "apiservices" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "GET":
													r.name = "ListApiregistrationV1APIService"
													r.summary = ""
													r.operationID = "listApiregistrationV1APIService"
													r.pathPattern = "/apis/apiregistration.k8s.io/v1/apiservices"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Match until "/"
												idx := strings.IndexByte(elem, '/')
												if idx < 0 {
													idx = len(elem)
												}
												args[0] = elem[:idx]
												elem = elem[idx:]

												if len(elem) == 0 {
													switch method {
													case "GET":
														r.name = "ReadApiregistrationV1APIService"
														r.summary = ""
														r.operationID = "readApiregistrationV1APIService"
														r.pathPattern = "/apis/apiregistration.k8s.io/v1/apiservices/{name}"
														r.args = args
														r.count = 1
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '/': // Prefix: "/status"
													if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "GET":
															// Leaf: ReadApiregistrationV1APIServiceStatus
															r.name = "ReadApiregistrationV1APIServiceStatus"
															r.summary = ""
															r.operationID = "readApiregistrationV1APIServiceStatus"
															r.pathPattern = "/apis/apiregistration.k8s.io/v1/apiservices/{name}/status"
															r.args = args
															r.count = 1
															return r, true
														default:
															return
														}
													}
												}
											}
										case 'w': // Prefix: "watch/apiservices"
											if l := len("watch/apiservices"); len(elem) >= l && elem[0:l] == "watch/apiservices" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "GET":
													r.name = "WatchApiregistrationV1APIServiceList"
													r.summary = ""
													r.operationID = "watchApiregistrationV1APIServiceList"
													r.pathPattern = "/apis/apiregistration.k8s.io/v1/watch/apiservices"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[0] = elem
												elem = ""

												if len(elem) == 0 {
													switch method {
													case "GET":
														// Leaf: WatchApiregistrationV1APIService
														r.name = "WatchApiregistrationV1APIService"
														r.summary = ""
														r.operationID = "watchApiregistrationV1APIService"
														r.pathPattern = "/apis/apiregistration.k8s.io/v1/watch/apiservices/{name}"
														r.args = args
														r.count = 1
														return r, true
													default:
														return
													}
												}
											}
										}
									}
								}
							case 'p': // Prefix: "ps/"
								if l := len("ps/"); len(elem) >= l && elem[0:l] == "ps/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "GetAppsAPIGroup"
										r.summary = ""
										r.operationID = "getAppsAPIGroup"
										r.pathPattern = "/apis/apps/"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case 'v': // Prefix: "v1/"
									if l := len("v1/"); len(elem) >= l && elem[0:l] == "v1/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = "GetAppsV1APIResources"
											r.summary = ""
											r.operationID = "getAppsV1APIResources"
											r.pathPattern = "/apis/apps/v1/"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case 'c': // Prefix: "controllerrevisions"
										if l := len("controllerrevisions"); len(elem) >= l && elem[0:l] == "controllerrevisions" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												// Leaf: ListAppsV1ControllerRevisionForAllNamespaces
												r.name = "ListAppsV1ControllerRevisionForAllNamespaces"
												r.summary = ""
												r.operationID = "listAppsV1ControllerRevisionForAllNamespaces"
												r.pathPattern = "/apis/apps/v1/controllerrevisions"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
									case 'd': // Prefix: "d"
										if l := len("d"); len(elem) >= l && elem[0:l] == "d" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "aemonsets"
											if l := len("aemonsets"); len(elem) >= l && elem[0:l] == "aemonsets" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "GET":
													// Leaf: ListAppsV1DaemonSetForAllNamespaces
													r.name = "ListAppsV1DaemonSetForAllNamespaces"
													r.summary = ""
													r.operationID = "listAppsV1DaemonSetForAllNamespaces"
													r.pathPattern = "/apis/apps/v1/daemonsets"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
										case 'e': // Prefix: "eployments"
											if l := len("eployments"); len(elem) >= l && elem[0:l] == "eployments" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "GET":
													// Leaf: ListAppsV1DeploymentForAllNamespaces
													r.name = "ListAppsV1DeploymentForAllNamespaces"
													r.summary = ""
													r.operationID = "listAppsV1DeploymentForAllNamespaces"
													r.pathPattern = "/apis/apps/v1/deployments"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
										}
									case 'n': // Prefix: "namespaces/"
										if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "namespace"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'c': // Prefix: "controllerrevisions"
												if l := len("controllerrevisions"); len(elem) >= l && elem[0:l] == "controllerrevisions" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "GET":
														r.name = "ListAppsV1NamespacedControllerRevision"
														r.summary = ""
														r.operationID = "listAppsV1NamespacedControllerRevision"
														r.pathPattern = "/apis/apps/v1/namespaces/{namespace}/controllerrevisions"
														r.args = args
														r.count = 1
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args[1] = elem
													elem = ""

													if len(elem) == 0 {
														switch method {
														case "GET":
															// Leaf: ReadAppsV1NamespacedControllerRevision
															r.name = "ReadAppsV1NamespacedControllerRevision"
															r.summary = ""
															r.operationID = "readAppsV1NamespacedControllerRevision"
															r.pathPattern = "/apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name}"
															r.args = args
															r.count = 2
															return r, true
														default:
															return
														}
													}
												}
											case 'd': // Prefix: "d"
												if l := len("d"); len(elem) >= l && elem[0:l] == "d" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "aemonsets"
													if l := len("aemonsets"); len(elem) >= l && elem[0:l] == "aemonsets" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "GET":
															r.name = "ListAppsV1NamespacedDaemonSet"
															r.summary = ""
															r.operationID = "listAppsV1NamespacedDaemonSet"
															r.pathPattern = "/apis/apps/v1/namespaces/{namespace}/daemonsets"
															r.args = args
															r.count = 1
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Match until "/"
														idx := strings.IndexByte(elem, '/')
														if idx < 0 {
															idx = len(elem)
														}
														args[1] = elem[:idx]
														elem = elem[idx:]

														if len(elem) == 0 {
															switch method {
															case "GET":
																r.name = "ReadAppsV1NamespacedDaemonSet"
																r.summary = ""
																r.operationID = "readAppsV1NamespacedDaemonSet"
																r.pathPattern = "/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}"
																r.args = args
																r.count = 2
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '/': // Prefix: "/status"
															if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "GET":
																	// Leaf: ReadAppsV1NamespacedDaemonSetStatus
																	r.name = "ReadAppsV1NamespacedDaemonSetStatus"
																	r.summary = ""
																	r.operationID = "readAppsV1NamespacedDaemonSetStatus"
																	r.pathPattern = "/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}/status"
																	r.args = args
																	r.count = 2
																	return r, true
																default:
																	return
																}
															}
														}
													}
												case 'e': // Prefix: "eployments"
													if l := len("eployments"); len(elem) >= l && elem[0:l] == "eployments" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "GET":
															r.name = "ListAppsV1NamespacedDeployment"
															r.summary = ""
															r.operationID = "listAppsV1NamespacedDeployment"
															r.pathPattern = "/apis/apps/v1/namespaces/{namespace}/deployments"
															r.args = args
															r.count = 1
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Match until "/"
														idx := strings.IndexByte(elem, '/')
														if idx < 0 {
															idx = len(elem)
														}
														args[1] = elem[:idx]
														elem = elem[idx:]

														if len(elem) == 0 {
															switch method {
															case "GET":
																r.name = "ReadAppsV1NamespacedDeployment"
																r.summary = ""
																r.operationID = "readAppsV1NamespacedDeployment"
																r.pathPattern = "/apis/apps/v1/namespaces/{namespace}/deployments/{name}"
																r.args = args
																r.count = 2
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '/': // Prefix: "/s"
															if l := len("/s"); len(elem) >= l && elem[0:l] == "/s" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																break
															}
															switch elem[0] {
															case 'c': // Prefix: "cale"
																if l := len("cale"); len(elem) >= l && elem[0:l] == "cale" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	switch method {
																	case "GET":
																		// Leaf: ReadAppsV1NamespacedDeploymentScale
																		r.name = "ReadAppsV1NamespacedDeploymentScale"
																		r.summary = ""
																		r.operationID = "readAppsV1NamespacedDeploymentScale"
																		r.pathPattern = "/apis/apps/v1/namespaces/{namespace}/deployments/{name}/scale"
																		r.args = args
																		r.count = 2
																		return r, true
																	default:
																		return
																	}
																}
															case 't': // Prefix: "tatus"
																if l := len("tatus"); len(elem) >= l && elem[0:l] == "tatus" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	switch method {
																	case "GET":
																		// Leaf: ReadAppsV1NamespacedDeploymentStatus
																		r.name = "ReadAppsV1NamespacedDeploymentStatus"
																		r.summary = ""
																		r.operationID = "readAppsV1NamespacedDeploymentStatus"
																		r.pathPattern = "/apis/apps/v1/namespaces/{namespace}/deployments/{name}/status"
																		r.args = args
																		r.count = 2
																		return r, true
																	default:
																		return
																	}
																}
															}
														}
													}
												}
											case 'r': // Prefix: "replicasets"
												if l := len("replicasets"); len(elem) >= l && elem[0:l] == "replicasets" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "GET":
														r.name = "ListAppsV1NamespacedReplicaSet"
														r.summary = ""
														r.operationID = "listAppsV1NamespacedReplicaSet"
														r.pathPattern = "/apis/apps/v1/namespaces/{namespace}/replicasets"
														r.args = args
														r.count = 1
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Match until "/"
													idx := strings.IndexByte(elem, '/')
													if idx < 0 {
														idx = len(elem)
													}
													args[1] = elem[:idx]
													elem = elem[idx:]

													if len(elem) == 0 {
														switch method {
														case "GET":
															r.name = "ReadAppsV1NamespacedReplicaSet"
															r.summary = ""
															r.operationID = "readAppsV1NamespacedReplicaSet"
															r.pathPattern = "/apis/apps/v1/namespaces/{namespace}/replicasets/{name}"
															r.args = args
															r.count = 2
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '/': // Prefix: "/s"
														if l := len("/s"); len(elem) >= l && elem[0:l] == "/s" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															break
														}
														switch elem[0] {
														case 'c': // Prefix: "cale"
															if l := len("cale"); len(elem) >= l && elem[0:l] == "cale" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "GET":
																	// Leaf: ReadAppsV1NamespacedReplicaSetScale
																	r.name = "ReadAppsV1NamespacedReplicaSetScale"
																	r.summary = ""
																	r.operationID = "readAppsV1NamespacedReplicaSetScale"
																	r.pathPattern = "/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/scale"
																	r.args = args
																	r.count = 2
																	return r, true
																default:
																	return
																}
															}
														case 't': // Prefix: "tatus"
															if l := len("tatus"); len(elem) >= l && elem[0:l] == "tatus" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "GET":
																	// Leaf: ReadAppsV1NamespacedReplicaSetStatus
																	r.name = "ReadAppsV1NamespacedReplicaSetStatus"
																	r.summary = ""
																	r.operationID = "readAppsV1NamespacedReplicaSetStatus"
																	r.pathPattern = "/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/status"
																	r.args = args
																	r.count = 2
																	return r, true
																default:
																	return
																}
															}
														}
													}
												}
											case 's': // Prefix: "statefulsets"
												if l := len("statefulsets"); len(elem) >= l && elem[0:l] == "statefulsets" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "GET":
														r.name = "ListAppsV1NamespacedStatefulSet"
														r.summary = ""
														r.operationID = "listAppsV1NamespacedStatefulSet"
														r.pathPattern = "/apis/apps/v1/namespaces/{namespace}/statefulsets"
														r.args = args
														r.count = 1
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Match until "/"
													idx := strings.IndexByte(elem, '/')
													if idx < 0 {
														idx = len(elem)
													}
													args[1] = elem[:idx]
													elem = elem[idx:]

													if len(elem) == 0 {
														switch method {
														case "GET":
															r.name = "ReadAppsV1NamespacedStatefulSet"
															r.summary = ""
															r.operationID = "readAppsV1NamespacedStatefulSet"
															r.pathPattern = "/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}"
															r.args = args
															r.count = 2
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '/': // Prefix: "/s"
														if l := len("/s"); len(elem) >= l && elem[0:l] == "/s" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															break
														}
														switch elem[0] {
														case 'c': // Prefix: "cale"
															if l := len("cale"); len(elem) >= l && elem[0:l] == "cale" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "GET":
																	// Leaf: ReadAppsV1NamespacedStatefulSetScale
																	r.name = "ReadAppsV1NamespacedStatefulSetScale"
																	r.summary = ""
																	r.operationID = "readAppsV1NamespacedStatefulSetScale"
																	r.pathPattern = "/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/scale"
																	r.args = args
																	r.count = 2
																	return r, true
																default:
																	return
																}
															}
														case 't': // Prefix: "tatus"
															if l := len("tatus"); len(elem) >= l && elem[0:l] == "tatus" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "GET":
																	// Leaf: ReadAppsV1NamespacedStatefulSetStatus
																	r.name = "ReadAppsV1NamespacedStatefulSetStatus"
																	r.summary = ""
																	r.operationID = "readAppsV1NamespacedStatefulSetStatus"
																	r.pathPattern = "/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/status"
																	r.args = args
																	r.count = 2
																	return r, true
																default:
																	return
																}
															}
														}
													}
												}
											}
										}
									case 'r': // Prefix: "replicasets"
										if l := len("replicasets"); len(elem) >= l && elem[0:l] == "replicasets" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												// Leaf: ListAppsV1ReplicaSetForAllNamespaces
												r.name = "ListAppsV1ReplicaSetForAllNamespaces"
												r.summary = ""
												r.operationID = "listAppsV1ReplicaSetForAllNamespaces"
												r.pathPattern = "/apis/apps/v1/replicasets"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
									case 's': // Prefix: "statefulsets"
										if l := len("statefulsets"); len(elem) >= l && elem[0:l] == "statefulsets" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												// Leaf: ListAppsV1StatefulSetForAllNamespaces
												r.name = "ListAppsV1StatefulSetForAllNamespaces"
												r.summary = ""
												r.operationID = "listAppsV1StatefulSetForAllNamespaces"
												r.pathPattern = "/apis/apps/v1/statefulsets"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
									case 'w': // Prefix: "watch/"
										if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'c': // Prefix: "controllerrevisions"
											if l := len("controllerrevisions"); len(elem) >= l && elem[0:l] == "controllerrevisions" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "GET":
													// Leaf: WatchAppsV1ControllerRevisionListForAllNamespaces
													r.name = "WatchAppsV1ControllerRevisionListForAllNamespaces"
													r.summary = ""
													r.operationID = "watchAppsV1ControllerRevisionListForAllNamespaces"
													r.pathPattern = "/apis/apps/v1/watch/controllerrevisions"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
										case 'd': // Prefix: "d"
											if l := len("d"); len(elem) >= l && elem[0:l] == "d" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "aemonsets"
												if l := len("aemonsets"); len(elem) >= l && elem[0:l] == "aemonsets" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "GET":
														// Leaf: WatchAppsV1DaemonSetListForAllNamespaces
														r.name = "WatchAppsV1DaemonSetListForAllNamespaces"
														r.summary = ""
														r.operationID = "watchAppsV1DaemonSetListForAllNamespaces"
														r.pathPattern = "/apis/apps/v1/watch/daemonsets"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											case 'e': // Prefix: "eployments"
												if l := len("eployments"); len(elem) >= l && elem[0:l] == "eployments" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "GET":
														// Leaf: WatchAppsV1DeploymentListForAllNamespaces
														r.name = "WatchAppsV1DeploymentListForAllNamespaces"
														r.summary = ""
														r.operationID = "watchAppsV1DeploymentListForAllNamespaces"
														r.pathPattern = "/apis/apps/v1/watch/deployments"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										case 'n': // Prefix: "namespaces/"
											if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "namespace"
											// Match until "/"
											idx := strings.IndexByte(elem, '/')
											if idx < 0 {
												idx = len(elem)
											}
											args[0] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'c': // Prefix: "controllerrevisions"
													if l := len("controllerrevisions"); len(elem) >= l && elem[0:l] == "controllerrevisions" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "GET":
															r.name = "WatchAppsV1NamespacedControllerRevisionList"
															r.summary = ""
															r.operationID = "watchAppsV1NamespacedControllerRevisionList"
															r.pathPattern = "/apis/apps/v1/watch/namespaces/{namespace}/controllerrevisions"
															r.args = args
															r.count = 1
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															switch method {
															case "GET":
																// Leaf: WatchAppsV1NamespacedControllerRevision
																r.name = "WatchAppsV1NamespacedControllerRevision"
																r.summary = ""
																r.operationID = "watchAppsV1NamespacedControllerRevision"
																r.pathPattern = "/apis/apps/v1/watch/namespaces/{namespace}/controllerrevisions/{name}"
																r.args = args
																r.count = 2
																return r, true
															default:
																return
															}
														}
													}
												case 'd': // Prefix: "d"
													if l := len("d"); len(elem) >= l && elem[0:l] == "d" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "aemonsets"
														if l := len("aemonsets"); len(elem) >= l && elem[0:l] == "aemonsets" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "GET":
																r.name = "WatchAppsV1NamespacedDaemonSetList"
																r.summary = ""
																r.operationID = "watchAppsV1NamespacedDaemonSetList"
																r.pathPattern = "/apis/apps/v1/watch/namespaces/{namespace}/daemonsets"
																r.args = args
																r.count = 1
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
																elem = elem[l:]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args[1] = elem
															elem = ""

															if len(elem) == 0 {
																switch method {
																case "GET":
																	// Leaf: WatchAppsV1NamespacedDaemonSet
																	r.name = "WatchAppsV1NamespacedDaemonSet"
																	r.summary = ""
																	r.operationID = "watchAppsV1NamespacedDaemonSet"
																	r.pathPattern = "/apis/apps/v1/watch/namespaces/{namespace}/daemonsets/{name}"
																	r.args = args
																	r.count = 2
																	return r, true
																default:
																	return
																}
															}
														}
													case 'e': // Prefix: "eployments"
														if l := len("eployments"); len(elem) >= l && elem[0:l] == "eployments" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "GET":
																r.name = "WatchAppsV1NamespacedDeploymentList"
																r.summary = ""
																r.operationID = "watchAppsV1NamespacedDeploymentList"
																r.pathPattern = "/apis/apps/v1/watch/namespaces/{namespace}/deployments"
																r.args = args
																r.count = 1
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
																elem = elem[l:]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args[1] = elem
															elem = ""

															if len(elem) == 0 {
																switch method {
																case "GET":
																	// Leaf: WatchAppsV1NamespacedDeployment
																	r.name = "WatchAppsV1NamespacedDeployment"
																	r.summary = ""
																	r.operationID = "watchAppsV1NamespacedDeployment"
																	r.pathPattern = "/apis/apps/v1/watch/namespaces/{namespace}/deployments/{name}"
																	r.args = args
																	r.count = 2
																	return r, true
																default:
																	return
																}
															}
														}
													}
												case 'r': // Prefix: "replicasets"
													if l := len("replicasets"); len(elem) >= l && elem[0:l] == "replicasets" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "GET":
															r.name = "WatchAppsV1NamespacedReplicaSetList"
															r.summary = ""
															r.operationID = "watchAppsV1NamespacedReplicaSetList"
															r.pathPattern = "/apis/apps/v1/watch/namespaces/{namespace}/replicasets"
															r.args = args
															r.count = 1
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															switch method {
															case "GET":
																// Leaf: WatchAppsV1NamespacedReplicaSet
																r.name = "WatchAppsV1NamespacedReplicaSet"
																r.summary = ""
																r.operationID = "watchAppsV1NamespacedReplicaSet"
																r.pathPattern = "/apis/apps/v1/watch/namespaces/{namespace}/replicasets/{name}"
																r.args = args
																r.count = 2
																return r, true
															default:
																return
															}
														}
													}
												case 's': // Prefix: "statefulsets"
													if l := len("statefulsets"); len(elem) >= l && elem[0:l] == "statefulsets" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "GET":
															r.name = "WatchAppsV1NamespacedStatefulSetList"
															r.summary = ""
															r.operationID = "watchAppsV1NamespacedStatefulSetList"
															r.pathPattern = "/apis/apps/v1/watch/namespaces/{namespace}/statefulsets"
															r.args = args
															r.count = 1
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															switch method {
															case "GET":
																// Leaf: WatchAppsV1NamespacedStatefulSet
																r.name = "WatchAppsV1NamespacedStatefulSet"
																r.summary = ""
																r.operationID = "watchAppsV1NamespacedStatefulSet"
																r.pathPattern = "/apis/apps/v1/watch/namespaces/{namespace}/statefulsets/{name}"
																r.args = args
																r.count = 2
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										case 'r': // Prefix: "replicasets"
											if l := len("replicasets"); len(elem) >= l && elem[0:l] == "replicasets" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "GET":
													// Leaf: WatchAppsV1ReplicaSetListForAllNamespaces
													r.name = "WatchAppsV1ReplicaSetListForAllNamespaces"
													r.summary = ""
													r.operationID = "watchAppsV1ReplicaSetListForAllNamespaces"
													r.pathPattern = "/apis/apps/v1/watch/replicasets"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
										case 's': // Prefix: "statefulsets"
											if l := len("statefulsets"); len(elem) >= l && elem[0:l] == "statefulsets" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "GET":
													// Leaf: WatchAppsV1StatefulSetListForAllNamespaces
													r.name = "WatchAppsV1StatefulSetListForAllNamespaces"
													r.summary = ""
													r.operationID = "watchAppsV1StatefulSetListForAllNamespaces"
													r.pathPattern = "/apis/apps/v1/watch/statefulsets"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
										}
									}
								}
							}
						case 'u': // Prefix: "ut"
							if l := len("ut"); len(elem) >= l && elem[0:l] == "ut" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'h': // Prefix: "h"
								if l := len("h"); len(elem) >= l && elem[0:l] == "h" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'e': // Prefix: "entication.k8s.io/"
									if l := len("entication.k8s.io/"); len(elem) >= l && elem[0:l] == "entication.k8s.io/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = "GetAuthenticationAPIGroup"
											r.summary = ""
											r.operationID = "getAuthenticationAPIGroup"
											r.pathPattern = "/apis/authentication.k8s.io/"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case 'v': // Prefix: "v1/"
										if l := len("v1/"); len(elem) >= l && elem[0:l] == "v1/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												// Leaf: GetAuthenticationV1APIResources
												r.name = "GetAuthenticationV1APIResources"
												r.summary = ""
												r.operationID = "getAuthenticationV1APIResources"
												r.pathPattern = "/apis/authentication.k8s.io/v1/"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
									}
								case 'o': // Prefix: "orization.k8s.io/"
									if l := len("orization.k8s.io/"); len(elem) >= l && elem[0:l] == "orization.k8s.io/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = "GetAuthorizationAPIGroup"
											r.summary = ""
											r.operationID = "getAuthorizationAPIGroup"
											r.pathPattern = "/apis/authorization.k8s.io/"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case 'v': // Prefix: "v1/"
										if l := len("v1/"); len(elem) >= l && elem[0:l] == "v1/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												// Leaf: GetAuthorizationV1APIResources
												r.name = "GetAuthorizationV1APIResources"
												r.summary = ""
												r.operationID = "getAuthorizationV1APIResources"
												r.pathPattern = "/apis/authorization.k8s.io/v1/"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
									}
								}
							case 'o': // Prefix: "oscaling/"
								if l := len("oscaling/"); len(elem) >= l && elem[0:l] == "oscaling/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "GetAutoscalingAPIGroup"
										r.summary = ""
										r.operationID = "getAutoscalingAPIGroup"
										r.pathPattern = "/apis/autoscaling/"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case 'v': // Prefix: "v"
									if l := len("v"); len(elem) >= l && elem[0:l] == "v" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '1': // Prefix: "1/"
										if l := len("1/"); len(elem) >= l && elem[0:l] == "1/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												r.name = "GetAutoscalingV1APIResources"
												r.summary = ""
												r.operationID = "getAutoscalingV1APIResources"
												r.pathPattern = "/apis/autoscaling/v1/"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case 'h': // Prefix: "horizontalpodautoscalers"
											if l := len("horizontalpodautoscalers"); len(elem) >= l && elem[0:l] == "horizontalpodautoscalers" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "GET":
													// Leaf: ListAutoscalingV1HorizontalPodAutoscalerForAllNamespaces
													r.name = "ListAutoscalingV1HorizontalPodAutoscalerForAllNamespaces"
													r.summary = ""
													r.operationID = "listAutoscalingV1HorizontalPodAutoscalerForAllNamespaces"
													r.pathPattern = "/apis/autoscaling/v1/horizontalpodautoscalers"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
										case 'n': // Prefix: "namespaces/"
											if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "namespace"
											// Match until "/"
											idx := strings.IndexByte(elem, '/')
											if idx < 0 {
												idx = len(elem)
											}
											args[0] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case '/': // Prefix: "/horizontalpodautoscalers"
												if l := len("/horizontalpodautoscalers"); len(elem) >= l && elem[0:l] == "/horizontalpodautoscalers" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "GET":
														r.name = "ListAutoscalingV1NamespacedHorizontalPodAutoscaler"
														r.summary = ""
														r.operationID = "listAutoscalingV1NamespacedHorizontalPodAutoscaler"
														r.pathPattern = "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers"
														r.args = args
														r.count = 1
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Match until "/"
													idx := strings.IndexByte(elem, '/')
													if idx < 0 {
														idx = len(elem)
													}
													args[1] = elem[:idx]
													elem = elem[idx:]

													if len(elem) == 0 {
														switch method {
														case "GET":
															r.name = "ReadAutoscalingV1NamespacedHorizontalPodAutoscaler"
															r.summary = ""
															r.operationID = "readAutoscalingV1NamespacedHorizontalPodAutoscaler"
															r.pathPattern = "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}"
															r.args = args
															r.count = 2
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '/': // Prefix: "/status"
														if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "GET":
																// Leaf: ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatus
																r.name = "ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatus"
																r.summary = ""
																r.operationID = "readAutoscalingV1NamespacedHorizontalPodAutoscalerStatus"
																r.pathPattern = "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status"
																r.args = args
																r.count = 2
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										case 'w': // Prefix: "watch/"
											if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'h': // Prefix: "horizontalpodautoscalers"
												if l := len("horizontalpodautoscalers"); len(elem) >= l && elem[0:l] == "horizontalpodautoscalers" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "GET":
														// Leaf: WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespaces
														r.name = "WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespaces"
														r.summary = ""
														r.operationID = "watchAutoscalingV1HorizontalPodAutoscalerListForAllNamespaces"
														r.pathPattern = "/apis/autoscaling/v1/watch/horizontalpodautoscalers"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											case 'n': // Prefix: "namespaces/"
												if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "namespace"
												// Match until "/"
												idx := strings.IndexByte(elem, '/')
												if idx < 0 {
													idx = len(elem)
												}
												args[0] = elem[:idx]
												elem = elem[idx:]

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case '/': // Prefix: "/horizontalpodautoscalers"
													if l := len("/horizontalpodautoscalers"); len(elem) >= l && elem[0:l] == "/horizontalpodautoscalers" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "GET":
															r.name = "WatchAutoscalingV1NamespacedHorizontalPodAutoscalerList"
															r.summary = ""
															r.operationID = "watchAutoscalingV1NamespacedHorizontalPodAutoscalerList"
															r.pathPattern = "/apis/autoscaling/v1/watch/namespaces/{namespace}/horizontalpodautoscalers"
															r.args = args
															r.count = 1
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															switch method {
															case "GET":
																// Leaf: WatchAutoscalingV1NamespacedHorizontalPodAutoscaler
																r.name = "WatchAutoscalingV1NamespacedHorizontalPodAutoscaler"
																r.summary = ""
																r.operationID = "watchAutoscalingV1NamespacedHorizontalPodAutoscaler"
																r.pathPattern = "/apis/autoscaling/v1/watch/namespaces/{namespace}/horizontalpodautoscalers/{name}"
																r.args = args
																r.count = 2
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										}
									case '2': // Prefix: "2beta"
										if l := len("2beta"); len(elem) >= l && elem[0:l] == "2beta" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '1': // Prefix: "1/"
											if l := len("1/"); len(elem) >= l && elem[0:l] == "1/" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "GET":
													r.name = "GetAutoscalingV2beta1APIResources"
													r.summary = ""
													r.operationID = "getAutoscalingV2beta1APIResources"
													r.pathPattern = "/apis/autoscaling/v2beta1/"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case 'h': // Prefix: "horizontalpodautoscalers"
												if l := len("horizontalpodautoscalers"); len(elem) >= l && elem[0:l] == "horizontalpodautoscalers" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "GET":
														// Leaf: ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespaces
														r.name = "ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespaces"
														r.summary = ""
														r.operationID = "listAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespaces"
														r.pathPattern = "/apis/autoscaling/v2beta1/horizontalpodautoscalers"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											case 'n': // Prefix: "namespaces/"
												if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "namespace"
												// Match until "/"
												idx := strings.IndexByte(elem, '/')
												if idx < 0 {
													idx = len(elem)
												}
												args[0] = elem[:idx]
												elem = elem[idx:]

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case '/': // Prefix: "/horizontalpodautoscalers"
													if l := len("/horizontalpodautoscalers"); len(elem) >= l && elem[0:l] == "/horizontalpodautoscalers" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "GET":
															r.name = "ListAutoscalingV2beta1NamespacedHorizontalPodAutoscaler"
															r.summary = ""
															r.operationID = "listAutoscalingV2beta1NamespacedHorizontalPodAutoscaler"
															r.pathPattern = "/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers"
															r.args = args
															r.count = 1
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Match until "/"
														idx := strings.IndexByte(elem, '/')
														if idx < 0 {
															idx = len(elem)
														}
														args[1] = elem[:idx]
														elem = elem[idx:]

														if len(elem) == 0 {
															switch method {
															case "GET":
																r.name = "ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscaler"
																r.summary = ""
																r.operationID = "readAutoscalingV2beta1NamespacedHorizontalPodAutoscaler"
																r.pathPattern = "/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}"
																r.args = args
																r.count = 2
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '/': // Prefix: "/status"
															if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "GET":
																	// Leaf: ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus
																	r.name = "ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus"
																	r.summary = ""
																	r.operationID = "readAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus"
																	r.pathPattern = "/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status"
																	r.args = args
																	r.count = 2
																	return r, true
																default:
																	return
																}
															}
														}
													}
												}
											case 'w': // Prefix: "watch/"
												if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'h': // Prefix: "horizontalpodautoscalers"
													if l := len("horizontalpodautoscalers"); len(elem) >= l && elem[0:l] == "horizontalpodautoscalers" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "GET":
															// Leaf: WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespaces
															r.name = "WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespaces"
															r.summary = ""
															r.operationID = "watchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespaces"
															r.pathPattern = "/apis/autoscaling/v2beta1/watch/horizontalpodautoscalers"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												case 'n': // Prefix: "namespaces/"
													if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "namespace"
													// Match until "/"
													idx := strings.IndexByte(elem, '/')
													if idx < 0 {
														idx = len(elem)
													}
													args[0] = elem[:idx]
													elem = elem[idx:]

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case '/': // Prefix: "/horizontalpodautoscalers"
														if l := len("/horizontalpodautoscalers"); len(elem) >= l && elem[0:l] == "/horizontalpodautoscalers" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "GET":
																r.name = "WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerList"
																r.summary = ""
																r.operationID = "watchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerList"
																r.pathPattern = "/apis/autoscaling/v2beta1/watch/namespaces/{namespace}/horizontalpodautoscalers"
																r.args = args
																r.count = 1
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
																elem = elem[l:]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args[1] = elem
															elem = ""

															if len(elem) == 0 {
																switch method {
																case "GET":
																	// Leaf: WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscaler
																	r.name = "WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscaler"
																	r.summary = ""
																	r.operationID = "watchAutoscalingV2beta1NamespacedHorizontalPodAutoscaler"
																	r.pathPattern = "/apis/autoscaling/v2beta1/watch/namespaces/{namespace}/horizontalpodautoscalers/{name}"
																	r.args = args
																	r.count = 2
																	return r, true
																default:
																	return
																}
															}
														}
													}
												}
											}
										case '2': // Prefix: "2/"
											if l := len("2/"); len(elem) >= l && elem[0:l] == "2/" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "GET":
													r.name = "GetAutoscalingV2beta2APIResources"
													r.summary = ""
													r.operationID = "getAutoscalingV2beta2APIResources"
													r.pathPattern = "/apis/autoscaling/v2beta2/"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case 'h': // Prefix: "horizontalpodautoscalers"
												if l := len("horizontalpodautoscalers"); len(elem) >= l && elem[0:l] == "horizontalpodautoscalers" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "GET":
														// Leaf: ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespaces
														r.name = "ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespaces"
														r.summary = ""
														r.operationID = "listAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespaces"
														r.pathPattern = "/apis/autoscaling/v2beta2/horizontalpodautoscalers"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											case 'n': // Prefix: "namespaces/"
												if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "namespace"
												// Match until "/"
												idx := strings.IndexByte(elem, '/')
												if idx < 0 {
													idx = len(elem)
												}
												args[0] = elem[:idx]
												elem = elem[idx:]

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case '/': // Prefix: "/horizontalpodautoscalers"
													if l := len("/horizontalpodautoscalers"); len(elem) >= l && elem[0:l] == "/horizontalpodautoscalers" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "GET":
															r.name = "ListAutoscalingV2beta2NamespacedHorizontalPodAutoscaler"
															r.summary = ""
															r.operationID = "listAutoscalingV2beta2NamespacedHorizontalPodAutoscaler"
															r.pathPattern = "/apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers"
															r.args = args
															r.count = 1
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Match until "/"
														idx := strings.IndexByte(elem, '/')
														if idx < 0 {
															idx = len(elem)
														}
														args[1] = elem[:idx]
														elem = elem[idx:]

														if len(elem) == 0 {
															switch method {
															case "GET":
																r.name = "ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscaler"
																r.summary = ""
																r.operationID = "readAutoscalingV2beta2NamespacedHorizontalPodAutoscaler"
																r.pathPattern = "/apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers/{name}"
																r.args = args
																r.count = 2
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '/': // Prefix: "/status"
															if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "GET":
																	// Leaf: ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus
																	r.name = "ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus"
																	r.summary = ""
																	r.operationID = "readAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus"
																	r.pathPattern = "/apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers/{name}/status"
																	r.args = args
																	r.count = 2
																	return r, true
																default:
																	return
																}
															}
														}
													}
												}
											case 'w': // Prefix: "watch/"
												if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'h': // Prefix: "horizontalpodautoscalers"
													if l := len("horizontalpodautoscalers"); len(elem) >= l && elem[0:l] == "horizontalpodautoscalers" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "GET":
															// Leaf: WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespaces
															r.name = "WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespaces"
															r.summary = ""
															r.operationID = "watchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespaces"
															r.pathPattern = "/apis/autoscaling/v2beta2/watch/horizontalpodautoscalers"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												case 'n': // Prefix: "namespaces/"
													if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "namespace"
													// Match until "/"
													idx := strings.IndexByte(elem, '/')
													if idx < 0 {
														idx = len(elem)
													}
													args[0] = elem[:idx]
													elem = elem[idx:]

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case '/': // Prefix: "/horizontalpodautoscalers"
														if l := len("/horizontalpodautoscalers"); len(elem) >= l && elem[0:l] == "/horizontalpodautoscalers" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "GET":
																r.name = "WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerList"
																r.summary = ""
																r.operationID = "watchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerList"
																r.pathPattern = "/apis/autoscaling/v2beta2/watch/namespaces/{namespace}/horizontalpodautoscalers"
																r.args = args
																r.count = 1
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '/': // Prefix: "/"
															if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
																elem = elem[l:]
															} else {
																break
															}

															// Param: "name"
															// Leaf parameter
															args[1] = elem
															elem = ""

															if len(elem) == 0 {
																switch method {
																case "GET":
																	// Leaf: WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscaler
																	r.name = "WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscaler"
																	r.summary = ""
																	r.operationID = "watchAutoscalingV2beta2NamespacedHorizontalPodAutoscaler"
																	r.pathPattern = "/apis/autoscaling/v2beta2/watch/namespaces/{namespace}/horizontalpodautoscalers/{name}"
																	r.args = args
																	r.count = 2
																	return r, true
																default:
																	return
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					case 'b': // Prefix: "batch/"
						if l := len("batch/"); len(elem) >= l && elem[0:l] == "batch/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "GetBatchAPIGroup"
								r.summary = ""
								r.operationID = "getBatchAPIGroup"
								r.pathPattern = "/apis/batch/"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case 'v': // Prefix: "v1"
							if l := len("v1"); len(elem) >= l && elem[0:l] == "v1" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "GetBatchV1APIResources"
										r.summary = ""
										r.operationID = "getBatchV1APIResources"
										r.pathPattern = "/apis/batch/v1/"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case 'c': // Prefix: "cronjobs"
									if l := len("cronjobs"); len(elem) >= l && elem[0:l] == "cronjobs" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: ListBatchV1CronJobForAllNamespaces
											r.name = "ListBatchV1CronJobForAllNamespaces"
											r.summary = ""
											r.operationID = "listBatchV1CronJobForAllNamespaces"
											r.pathPattern = "/apis/batch/v1/cronjobs"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
								case 'j': // Prefix: "jobs"
									if l := len("jobs"); len(elem) >= l && elem[0:l] == "jobs" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: ListBatchV1JobForAllNamespaces
											r.name = "ListBatchV1JobForAllNamespaces"
											r.summary = ""
											r.operationID = "listBatchV1JobForAllNamespaces"
											r.pathPattern = "/apis/batch/v1/jobs"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
								case 'n': // Prefix: "namespaces/"
									if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "namespace"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'c': // Prefix: "cronjobs"
											if l := len("cronjobs"); len(elem) >= l && elem[0:l] == "cronjobs" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "GET":
													r.name = "ListBatchV1NamespacedCronJob"
													r.summary = ""
													r.operationID = "listBatchV1NamespacedCronJob"
													r.pathPattern = "/apis/batch/v1/namespaces/{namespace}/cronjobs"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Match until "/"
												idx := strings.IndexByte(elem, '/')
												if idx < 0 {
													idx = len(elem)
												}
												args[1] = elem[:idx]
												elem = elem[idx:]

												if len(elem) == 0 {
													switch method {
													case "GET":
														r.name = "ReadBatchV1NamespacedCronJob"
														r.summary = ""
														r.operationID = "readBatchV1NamespacedCronJob"
														r.pathPattern = "/apis/batch/v1/namespaces/{namespace}/cronjobs/{name}"
														r.args = args
														r.count = 2
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '/': // Prefix: "/status"
													if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "GET":
															// Leaf: ReadBatchV1NamespacedCronJobStatus
															r.name = "ReadBatchV1NamespacedCronJobStatus"
															r.summary = ""
															r.operationID = "readBatchV1NamespacedCronJobStatus"
															r.pathPattern = "/apis/batch/v1/namespaces/{namespace}/cronjobs/{name}/status"
															r.args = args
															r.count = 2
															return r, true
														default:
															return
														}
													}
												}
											}
										case 'j': // Prefix: "jobs"
											if l := len("jobs"); len(elem) >= l && elem[0:l] == "jobs" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "GET":
													r.name = "ListBatchV1NamespacedJob"
													r.summary = ""
													r.operationID = "listBatchV1NamespacedJob"
													r.pathPattern = "/apis/batch/v1/namespaces/{namespace}/jobs"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Match until "/"
												idx := strings.IndexByte(elem, '/')
												if idx < 0 {
													idx = len(elem)
												}
												args[1] = elem[:idx]
												elem = elem[idx:]

												if len(elem) == 0 {
													switch method {
													case "GET":
														r.name = "ReadBatchV1NamespacedJob"
														r.summary = ""
														r.operationID = "readBatchV1NamespacedJob"
														r.pathPattern = "/apis/batch/v1/namespaces/{namespace}/jobs/{name}"
														r.args = args
														r.count = 2
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '/': // Prefix: "/status"
													if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "GET":
															// Leaf: ReadBatchV1NamespacedJobStatus
															r.name = "ReadBatchV1NamespacedJobStatus"
															r.summary = ""
															r.operationID = "readBatchV1NamespacedJobStatus"
															r.pathPattern = "/apis/batch/v1/namespaces/{namespace}/jobs/{name}/status"
															r.args = args
															r.count = 2
															return r, true
														default:
															return
														}
													}
												}
											}
										}
									}
								case 'w': // Prefix: "watch/"
									if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'c': // Prefix: "cronjobs"
										if l := len("cronjobs"); len(elem) >= l && elem[0:l] == "cronjobs" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												// Leaf: WatchBatchV1CronJobListForAllNamespaces
												r.name = "WatchBatchV1CronJobListForAllNamespaces"
												r.summary = ""
												r.operationID = "watchBatchV1CronJobListForAllNamespaces"
												r.pathPattern = "/apis/batch/v1/watch/cronjobs"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
									case 'j': // Prefix: "jobs"
										if l := len("jobs"); len(elem) >= l && elem[0:l] == "jobs" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												// Leaf: WatchBatchV1JobListForAllNamespaces
												r.name = "WatchBatchV1JobListForAllNamespaces"
												r.summary = ""
												r.operationID = "watchBatchV1JobListForAllNamespaces"
												r.pathPattern = "/apis/batch/v1/watch/jobs"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
									case 'n': // Prefix: "namespaces/"
										if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "namespace"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'c': // Prefix: "cronjobs"
												if l := len("cronjobs"); len(elem) >= l && elem[0:l] == "cronjobs" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "GET":
														r.name = "WatchBatchV1NamespacedCronJobList"
														r.summary = ""
														r.operationID = "watchBatchV1NamespacedCronJobList"
														r.pathPattern = "/apis/batch/v1/watch/namespaces/{namespace}/cronjobs"
														r.args = args
														r.count = 1
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args[1] = elem
													elem = ""

													if len(elem) == 0 {
														switch method {
														case "GET":
															// Leaf: WatchBatchV1NamespacedCronJob
															r.name = "WatchBatchV1NamespacedCronJob"
															r.summary = ""
															r.operationID = "watchBatchV1NamespacedCronJob"
															r.pathPattern = "/apis/batch/v1/watch/namespaces/{namespace}/cronjobs/{name}"
															r.args = args
															r.count = 2
															return r, true
														default:
															return
														}
													}
												}
											case 'j': // Prefix: "jobs"
												if l := len("jobs"); len(elem) >= l && elem[0:l] == "jobs" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "GET":
														r.name = "WatchBatchV1NamespacedJobList"
														r.summary = ""
														r.operationID = "watchBatchV1NamespacedJobList"
														r.pathPattern = "/apis/batch/v1/watch/namespaces/{namespace}/jobs"
														r.args = args
														r.count = 1
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args[1] = elem
													elem = ""

													if len(elem) == 0 {
														switch method {
														case "GET":
															// Leaf: WatchBatchV1NamespacedJob
															r.name = "WatchBatchV1NamespacedJob"
															r.summary = ""
															r.operationID = "watchBatchV1NamespacedJob"
															r.pathPattern = "/apis/batch/v1/watch/namespaces/{namespace}/jobs/{name}"
															r.args = args
															r.count = 2
															return r, true
														default:
															return
														}
													}
												}
											}
										}
									}
								}
							case 'b': // Prefix: "beta1/"
								if l := len("beta1/"); len(elem) >= l && elem[0:l] == "beta1/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "GetBatchV1beta1APIResources"
										r.summary = ""
										r.operationID = "getBatchV1beta1APIResources"
										r.pathPattern = "/apis/batch/v1beta1/"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case 'c': // Prefix: "cronjobs"
									if l := len("cronjobs"); len(elem) >= l && elem[0:l] == "cronjobs" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: ListBatchV1beta1CronJobForAllNamespaces
											r.name = "ListBatchV1beta1CronJobForAllNamespaces"
											r.summary = ""
											r.operationID = "listBatchV1beta1CronJobForAllNamespaces"
											r.pathPattern = "/apis/batch/v1beta1/cronjobs"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
								case 'n': // Prefix: "namespaces/"
									if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "namespace"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '/': // Prefix: "/cronjobs"
										if l := len("/cronjobs"); len(elem) >= l && elem[0:l] == "/cronjobs" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												r.name = "ListBatchV1beta1NamespacedCronJob"
												r.summary = ""
												r.operationID = "listBatchV1beta1NamespacedCronJob"
												r.pathPattern = "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Match until "/"
											idx := strings.IndexByte(elem, '/')
											if idx < 0 {
												idx = len(elem)
											}
											args[1] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												switch method {
												case "GET":
													r.name = "ReadBatchV1beta1NamespacedCronJob"
													r.summary = ""
													r.operationID = "readBatchV1beta1NamespacedCronJob"
													r.pathPattern = "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs/{name}"
													r.args = args
													r.count = 2
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '/': // Prefix: "/status"
												if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "GET":
														// Leaf: ReadBatchV1beta1NamespacedCronJobStatus
														r.name = "ReadBatchV1beta1NamespacedCronJobStatus"
														r.summary = ""
														r.operationID = "readBatchV1beta1NamespacedCronJobStatus"
														r.pathPattern = "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs/{name}/status"
														r.args = args
														r.count = 2
														return r, true
													default:
														return
													}
												}
											}
										}
									}
								case 'w': // Prefix: "watch/"
									if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'c': // Prefix: "cronjobs"
										if l := len("cronjobs"); len(elem) >= l && elem[0:l] == "cronjobs" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												// Leaf: WatchBatchV1beta1CronJobListForAllNamespaces
												r.name = "WatchBatchV1beta1CronJobListForAllNamespaces"
												r.summary = ""
												r.operationID = "watchBatchV1beta1CronJobListForAllNamespaces"
												r.pathPattern = "/apis/batch/v1beta1/watch/cronjobs"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
									case 'n': // Prefix: "namespaces/"
										if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "namespace"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/cronjobs"
											if l := len("/cronjobs"); len(elem) >= l && elem[0:l] == "/cronjobs" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "GET":
													r.name = "WatchBatchV1beta1NamespacedCronJobList"
													r.summary = ""
													r.operationID = "watchBatchV1beta1NamespacedCronJobList"
													r.pathPattern = "/apis/batch/v1beta1/watch/namespaces/{namespace}/cronjobs"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													switch method {
													case "GET":
														// Leaf: WatchBatchV1beta1NamespacedCronJob
														r.name = "WatchBatchV1beta1NamespacedCronJob"
														r.summary = ""
														r.operationID = "watchBatchV1beta1NamespacedCronJob"
														r.pathPattern = "/apis/batch/v1beta1/watch/namespaces/{namespace}/cronjobs/{name}"
														r.args = args
														r.count = 2
														return r, true
													default:
														return
													}
												}
											}
										}
									}
								}
							}
						}
					case 'c': // Prefix: "c"
						if l := len("c"); len(elem) >= l && elem[0:l] == "c" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'e': // Prefix: "ertificates.k8s.io/"
							if l := len("ertificates.k8s.io/"); len(elem) >= l && elem[0:l] == "ertificates.k8s.io/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = "GetCertificatesAPIGroup"
									r.summary = ""
									r.operationID = "getCertificatesAPIGroup"
									r.pathPattern = "/apis/certificates.k8s.io/"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case 'v': // Prefix: "v1/"
								if l := len("v1/"); len(elem) >= l && elem[0:l] == "v1/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "GetCertificatesV1APIResources"
										r.summary = ""
										r.operationID = "getCertificatesV1APIResources"
										r.pathPattern = "/apis/certificates.k8s.io/v1/"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case 'c': // Prefix: "certificatesigningrequests"
									if l := len("certificatesigningrequests"); len(elem) >= l && elem[0:l] == "certificatesigningrequests" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = "ListCertificatesV1CertificateSigningRequest"
											r.summary = ""
											r.operationID = "listCertificatesV1CertificateSigningRequest"
											r.pathPattern = "/apis/certificates.k8s.io/v1/certificatesigningrequests"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											switch method {
											case "GET":
												r.name = "ReadCertificatesV1CertificateSigningRequest"
												r.summary = ""
												r.operationID = "readCertificatesV1CertificateSigningRequest"
												r.pathPattern = "/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "approval"
												if l := len("approval"); len(elem) >= l && elem[0:l] == "approval" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "GET":
														// Leaf: ReadCertificatesV1CertificateSigningRequestApproval
														r.name = "ReadCertificatesV1CertificateSigningRequestApproval"
														r.summary = ""
														r.operationID = "readCertificatesV1CertificateSigningRequestApproval"
														r.pathPattern = "/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/approval"
														r.args = args
														r.count = 1
														return r, true
													default:
														return
													}
												}
											case 's': // Prefix: "status"
												if l := len("status"); len(elem) >= l && elem[0:l] == "status" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "GET":
														// Leaf: ReadCertificatesV1CertificateSigningRequestStatus
														r.name = "ReadCertificatesV1CertificateSigningRequestStatus"
														r.summary = ""
														r.operationID = "readCertificatesV1CertificateSigningRequestStatus"
														r.pathPattern = "/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/status"
														r.args = args
														r.count = 1
														return r, true
													default:
														return
													}
												}
											}
										}
									}
								case 'w': // Prefix: "watch/certificatesigningrequests"
									if l := len("watch/certificatesigningrequests"); len(elem) >= l && elem[0:l] == "watch/certificatesigningrequests" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = "WatchCertificatesV1CertificateSigningRequestList"
											r.summary = ""
											r.operationID = "watchCertificatesV1CertificateSigningRequestList"
											r.pathPattern = "/apis/certificates.k8s.io/v1/watch/certificatesigningrequests"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Leaf parameter
										args[0] = elem
										elem = ""

										if len(elem) == 0 {
											switch method {
											case "GET":
												// Leaf: WatchCertificatesV1CertificateSigningRequest
												r.name = "WatchCertificatesV1CertificateSigningRequest"
												r.summary = ""
												r.operationID = "watchCertificatesV1CertificateSigningRequest"
												r.pathPattern = "/apis/certificates.k8s.io/v1/watch/certificatesigningrequests/{name}"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}
									}
								}
							}
						case 'o': // Prefix: "oordination.k8s.io/"
							if l := len("oordination.k8s.io/"); len(elem) >= l && elem[0:l] == "oordination.k8s.io/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = "GetCoordinationAPIGroup"
									r.summary = ""
									r.operationID = "getCoordinationAPIGroup"
									r.pathPattern = "/apis/coordination.k8s.io/"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case 'v': // Prefix: "v1/"
								if l := len("v1/"); len(elem) >= l && elem[0:l] == "v1/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "GetCoordinationV1APIResources"
										r.summary = ""
										r.operationID = "getCoordinationV1APIResources"
										r.pathPattern = "/apis/coordination.k8s.io/v1/"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case 'l': // Prefix: "leases"
									if l := len("leases"); len(elem) >= l && elem[0:l] == "leases" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: ListCoordinationV1LeaseForAllNamespaces
											r.name = "ListCoordinationV1LeaseForAllNamespaces"
											r.summary = ""
											r.operationID = "listCoordinationV1LeaseForAllNamespaces"
											r.pathPattern = "/apis/coordination.k8s.io/v1/leases"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
								case 'n': // Prefix: "namespaces/"
									if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "namespace"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '/': // Prefix: "/leases"
										if l := len("/leases"); len(elem) >= l && elem[0:l] == "/leases" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												r.name = "ListCoordinationV1NamespacedLease"
												r.summary = ""
												r.operationID = "listCoordinationV1NamespacedLease"
												r.pathPattern = "/apis/coordination.k8s.io/v1/namespaces/{namespace}/leases"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[1] = elem
											elem = ""

											if len(elem) == 0 {
												switch method {
												case "GET":
													// Leaf: ReadCoordinationV1NamespacedLease
													r.name = "ReadCoordinationV1NamespacedLease"
													r.summary = ""
													r.operationID = "readCoordinationV1NamespacedLease"
													r.pathPattern = "/apis/coordination.k8s.io/v1/namespaces/{namespace}/leases/{name}"
													r.args = args
													r.count = 2
													return r, true
												default:
													return
												}
											}
										}
									}
								case 'w': // Prefix: "watch/"
									if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'l': // Prefix: "leases"
										if l := len("leases"); len(elem) >= l && elem[0:l] == "leases" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												// Leaf: WatchCoordinationV1LeaseListForAllNamespaces
												r.name = "WatchCoordinationV1LeaseListForAllNamespaces"
												r.summary = ""
												r.operationID = "watchCoordinationV1LeaseListForAllNamespaces"
												r.pathPattern = "/apis/coordination.k8s.io/v1/watch/leases"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
									case 'n': // Prefix: "namespaces/"
										if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "namespace"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/leases"
											if l := len("/leases"); len(elem) >= l && elem[0:l] == "/leases" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "GET":
													r.name = "WatchCoordinationV1NamespacedLeaseList"
													r.summary = ""
													r.operationID = "watchCoordinationV1NamespacedLeaseList"
													r.pathPattern = "/apis/coordination.k8s.io/v1/watch/namespaces/{namespace}/leases"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													switch method {
													case "GET":
														// Leaf: WatchCoordinationV1NamespacedLease
														r.name = "WatchCoordinationV1NamespacedLease"
														r.summary = ""
														r.operationID = "watchCoordinationV1NamespacedLease"
														r.pathPattern = "/apis/coordination.k8s.io/v1/watch/namespaces/{namespace}/leases/{name}"
														r.args = args
														r.count = 2
														return r, true
													default:
														return
													}
												}
											}
										}
									}
								}
							}
						}
					case 'd': // Prefix: "discovery.k8s.io/"
						if l := len("discovery.k8s.io/"); len(elem) >= l && elem[0:l] == "discovery.k8s.io/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "GetDiscoveryAPIGroup"
								r.summary = ""
								r.operationID = "getDiscoveryAPIGroup"
								r.pathPattern = "/apis/discovery.k8s.io/"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case 'v': // Prefix: "v1"
							if l := len("v1"); len(elem) >= l && elem[0:l] == "v1" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "GetDiscoveryV1APIResources"
										r.summary = ""
										r.operationID = "getDiscoveryV1APIResources"
										r.pathPattern = "/apis/discovery.k8s.io/v1/"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case 'e': // Prefix: "endpointslices"
									if l := len("endpointslices"); len(elem) >= l && elem[0:l] == "endpointslices" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: ListDiscoveryV1EndpointSliceForAllNamespaces
											r.name = "ListDiscoveryV1EndpointSliceForAllNamespaces"
											r.summary = ""
											r.operationID = "listDiscoveryV1EndpointSliceForAllNamespaces"
											r.pathPattern = "/apis/discovery.k8s.io/v1/endpointslices"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
								case 'n': // Prefix: "namespaces/"
									if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "namespace"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '/': // Prefix: "/endpointslices"
										if l := len("/endpointslices"); len(elem) >= l && elem[0:l] == "/endpointslices" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												r.name = "ListDiscoveryV1NamespacedEndpointSlice"
												r.summary = ""
												r.operationID = "listDiscoveryV1NamespacedEndpointSlice"
												r.pathPattern = "/apis/discovery.k8s.io/v1/namespaces/{namespace}/endpointslices"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[1] = elem
											elem = ""

											if len(elem) == 0 {
												switch method {
												case "GET":
													// Leaf: ReadDiscoveryV1NamespacedEndpointSlice
													r.name = "ReadDiscoveryV1NamespacedEndpointSlice"
													r.summary = ""
													r.operationID = "readDiscoveryV1NamespacedEndpointSlice"
													r.pathPattern = "/apis/discovery.k8s.io/v1/namespaces/{namespace}/endpointslices/{name}"
													r.args = args
													r.count = 2
													return r, true
												default:
													return
												}
											}
										}
									}
								case 'w': // Prefix: "watch/"
									if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'e': // Prefix: "endpointslices"
										if l := len("endpointslices"); len(elem) >= l && elem[0:l] == "endpointslices" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												// Leaf: WatchDiscoveryV1EndpointSliceListForAllNamespaces
												r.name = "WatchDiscoveryV1EndpointSliceListForAllNamespaces"
												r.summary = ""
												r.operationID = "watchDiscoveryV1EndpointSliceListForAllNamespaces"
												r.pathPattern = "/apis/discovery.k8s.io/v1/watch/endpointslices"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
									case 'n': // Prefix: "namespaces/"
										if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "namespace"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/endpointslices"
											if l := len("/endpointslices"); len(elem) >= l && elem[0:l] == "/endpointslices" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "GET":
													r.name = "WatchDiscoveryV1NamespacedEndpointSliceList"
													r.summary = ""
													r.operationID = "watchDiscoveryV1NamespacedEndpointSliceList"
													r.pathPattern = "/apis/discovery.k8s.io/v1/watch/namespaces/{namespace}/endpointslices"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													switch method {
													case "GET":
														// Leaf: WatchDiscoveryV1NamespacedEndpointSlice
														r.name = "WatchDiscoveryV1NamespacedEndpointSlice"
														r.summary = ""
														r.operationID = "watchDiscoveryV1NamespacedEndpointSlice"
														r.pathPattern = "/apis/discovery.k8s.io/v1/watch/namespaces/{namespace}/endpointslices/{name}"
														r.args = args
														r.count = 2
														return r, true
													default:
														return
													}
												}
											}
										}
									}
								}
							case 'b': // Prefix: "beta1/"
								if l := len("beta1/"); len(elem) >= l && elem[0:l] == "beta1/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "GetDiscoveryV1beta1APIResources"
										r.summary = ""
										r.operationID = "getDiscoveryV1beta1APIResources"
										r.pathPattern = "/apis/discovery.k8s.io/v1beta1/"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case 'e': // Prefix: "endpointslices"
									if l := len("endpointslices"); len(elem) >= l && elem[0:l] == "endpointslices" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: ListDiscoveryV1beta1EndpointSliceForAllNamespaces
											r.name = "ListDiscoveryV1beta1EndpointSliceForAllNamespaces"
											r.summary = ""
											r.operationID = "listDiscoveryV1beta1EndpointSliceForAllNamespaces"
											r.pathPattern = "/apis/discovery.k8s.io/v1beta1/endpointslices"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
								case 'n': // Prefix: "namespaces/"
									if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "namespace"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '/': // Prefix: "/endpointslices"
										if l := len("/endpointslices"); len(elem) >= l && elem[0:l] == "/endpointslices" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												r.name = "ListDiscoveryV1beta1NamespacedEndpointSlice"
												r.summary = ""
												r.operationID = "listDiscoveryV1beta1NamespacedEndpointSlice"
												r.pathPattern = "/apis/discovery.k8s.io/v1beta1/namespaces/{namespace}/endpointslices"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[1] = elem
											elem = ""

											if len(elem) == 0 {
												switch method {
												case "GET":
													// Leaf: ReadDiscoveryV1beta1NamespacedEndpointSlice
													r.name = "ReadDiscoveryV1beta1NamespacedEndpointSlice"
													r.summary = ""
													r.operationID = "readDiscoveryV1beta1NamespacedEndpointSlice"
													r.pathPattern = "/apis/discovery.k8s.io/v1beta1/namespaces/{namespace}/endpointslices/{name}"
													r.args = args
													r.count = 2
													return r, true
												default:
													return
												}
											}
										}
									}
								case 'w': // Prefix: "watch/"
									if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'e': // Prefix: "endpointslices"
										if l := len("endpointslices"); len(elem) >= l && elem[0:l] == "endpointslices" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												// Leaf: WatchDiscoveryV1beta1EndpointSliceListForAllNamespaces
												r.name = "WatchDiscoveryV1beta1EndpointSliceListForAllNamespaces"
												r.summary = ""
												r.operationID = "watchDiscoveryV1beta1EndpointSliceListForAllNamespaces"
												r.pathPattern = "/apis/discovery.k8s.io/v1beta1/watch/endpointslices"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
									case 'n': // Prefix: "namespaces/"
										if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "namespace"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/endpointslices"
											if l := len("/endpointslices"); len(elem) >= l && elem[0:l] == "/endpointslices" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "GET":
													r.name = "WatchDiscoveryV1beta1NamespacedEndpointSliceList"
													r.summary = ""
													r.operationID = "watchDiscoveryV1beta1NamespacedEndpointSliceList"
													r.pathPattern = "/apis/discovery.k8s.io/v1beta1/watch/namespaces/{namespace}/endpointslices"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													switch method {
													case "GET":
														// Leaf: WatchDiscoveryV1beta1NamespacedEndpointSlice
														r.name = "WatchDiscoveryV1beta1NamespacedEndpointSlice"
														r.summary = ""
														r.operationID = "watchDiscoveryV1beta1NamespacedEndpointSlice"
														r.pathPattern = "/apis/discovery.k8s.io/v1beta1/watch/namespaces/{namespace}/endpointslices/{name}"
														r.args = args
														r.count = 2
														return r, true
													default:
														return
													}
												}
											}
										}
									}
								}
							}
						}
					case 'e': // Prefix: "events.k8s.io/"
						if l := len("events.k8s.io/"); len(elem) >= l && elem[0:l] == "events.k8s.io/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "GetEventsAPIGroup"
								r.summary = ""
								r.operationID = "getEventsAPIGroup"
								r.pathPattern = "/apis/events.k8s.io/"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case 'v': // Prefix: "v1"
							if l := len("v1"); len(elem) >= l && elem[0:l] == "v1" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "GetEventsV1APIResources"
										r.summary = ""
										r.operationID = "getEventsV1APIResources"
										r.pathPattern = "/apis/events.k8s.io/v1/"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case 'e': // Prefix: "events"
									if l := len("events"); len(elem) >= l && elem[0:l] == "events" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: ListEventsV1EventForAllNamespaces
											r.name = "ListEventsV1EventForAllNamespaces"
											r.summary = ""
											r.operationID = "listEventsV1EventForAllNamespaces"
											r.pathPattern = "/apis/events.k8s.io/v1/events"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
								case 'n': // Prefix: "namespaces/"
									if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "namespace"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '/': // Prefix: "/events"
										if l := len("/events"); len(elem) >= l && elem[0:l] == "/events" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												r.name = "ListEventsV1NamespacedEvent"
												r.summary = ""
												r.operationID = "listEventsV1NamespacedEvent"
												r.pathPattern = "/apis/events.k8s.io/v1/namespaces/{namespace}/events"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[1] = elem
											elem = ""

											if len(elem) == 0 {
												switch method {
												case "GET":
													// Leaf: ReadEventsV1NamespacedEvent
													r.name = "ReadEventsV1NamespacedEvent"
													r.summary = ""
													r.operationID = "readEventsV1NamespacedEvent"
													r.pathPattern = "/apis/events.k8s.io/v1/namespaces/{namespace}/events/{name}"
													r.args = args
													r.count = 2
													return r, true
												default:
													return
												}
											}
										}
									}
								case 'w': // Prefix: "watch/"
									if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'e': // Prefix: "events"
										if l := len("events"); len(elem) >= l && elem[0:l] == "events" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												// Leaf: WatchEventsV1EventListForAllNamespaces
												r.name = "WatchEventsV1EventListForAllNamespaces"
												r.summary = ""
												r.operationID = "watchEventsV1EventListForAllNamespaces"
												r.pathPattern = "/apis/events.k8s.io/v1/watch/events"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
									case 'n': // Prefix: "namespaces/"
										if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "namespace"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/events"
											if l := len("/events"); len(elem) >= l && elem[0:l] == "/events" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "GET":
													r.name = "WatchEventsV1NamespacedEventList"
													r.summary = ""
													r.operationID = "watchEventsV1NamespacedEventList"
													r.pathPattern = "/apis/events.k8s.io/v1/watch/namespaces/{namespace}/events"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													switch method {
													case "GET":
														// Leaf: WatchEventsV1NamespacedEvent
														r.name = "WatchEventsV1NamespacedEvent"
														r.summary = ""
														r.operationID = "watchEventsV1NamespacedEvent"
														r.pathPattern = "/apis/events.k8s.io/v1/watch/namespaces/{namespace}/events/{name}"
														r.args = args
														r.count = 2
														return r, true
													default:
														return
													}
												}
											}
										}
									}
								}
							case 'b': // Prefix: "beta1/"
								if l := len("beta1/"); len(elem) >= l && elem[0:l] == "beta1/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "GetEventsV1beta1APIResources"
										r.summary = ""
										r.operationID = "getEventsV1beta1APIResources"
										r.pathPattern = "/apis/events.k8s.io/v1beta1/"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case 'e': // Prefix: "events"
									if l := len("events"); len(elem) >= l && elem[0:l] == "events" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: ListEventsV1beta1EventForAllNamespaces
											r.name = "ListEventsV1beta1EventForAllNamespaces"
											r.summary = ""
											r.operationID = "listEventsV1beta1EventForAllNamespaces"
											r.pathPattern = "/apis/events.k8s.io/v1beta1/events"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
								case 'n': // Prefix: "namespaces/"
									if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "namespace"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '/': // Prefix: "/events"
										if l := len("/events"); len(elem) >= l && elem[0:l] == "/events" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												r.name = "ListEventsV1beta1NamespacedEvent"
												r.summary = ""
												r.operationID = "listEventsV1beta1NamespacedEvent"
												r.pathPattern = "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[1] = elem
											elem = ""

											if len(elem) == 0 {
												switch method {
												case "GET":
													// Leaf: ReadEventsV1beta1NamespacedEvent
													r.name = "ReadEventsV1beta1NamespacedEvent"
													r.summary = ""
													r.operationID = "readEventsV1beta1NamespacedEvent"
													r.pathPattern = "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events/{name}"
													r.args = args
													r.count = 2
													return r, true
												default:
													return
												}
											}
										}
									}
								case 'w': // Prefix: "watch/"
									if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'e': // Prefix: "events"
										if l := len("events"); len(elem) >= l && elem[0:l] == "events" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												// Leaf: WatchEventsV1beta1EventListForAllNamespaces
												r.name = "WatchEventsV1beta1EventListForAllNamespaces"
												r.summary = ""
												r.operationID = "watchEventsV1beta1EventListForAllNamespaces"
												r.pathPattern = "/apis/events.k8s.io/v1beta1/watch/events"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
									case 'n': // Prefix: "namespaces/"
										if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "namespace"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/events"
											if l := len("/events"); len(elem) >= l && elem[0:l] == "/events" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "GET":
													r.name = "WatchEventsV1beta1NamespacedEventList"
													r.summary = ""
													r.operationID = "watchEventsV1beta1NamespacedEventList"
													r.pathPattern = "/apis/events.k8s.io/v1beta1/watch/namespaces/{namespace}/events"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													switch method {
													case "GET":
														// Leaf: WatchEventsV1beta1NamespacedEvent
														r.name = "WatchEventsV1beta1NamespacedEvent"
														r.summary = ""
														r.operationID = "watchEventsV1beta1NamespacedEvent"
														r.pathPattern = "/apis/events.k8s.io/v1beta1/watch/namespaces/{namespace}/events/{name}"
														r.args = args
														r.count = 2
														return r, true
													default:
														return
													}
												}
											}
										}
									}
								}
							}
						}
					case 'f': // Prefix: "flowcontrol.apiserver.k8s.io/"
						if l := len("flowcontrol.apiserver.k8s.io/"); len(elem) >= l && elem[0:l] == "flowcontrol.apiserver.k8s.io/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "GetFlowcontrolApiserverAPIGroup"
								r.summary = ""
								r.operationID = "getFlowcontrolApiserverAPIGroup"
								r.pathPattern = "/apis/flowcontrol.apiserver.k8s.io/"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case 'v': // Prefix: "v1beta"
							if l := len("v1beta"); len(elem) >= l && elem[0:l] == "v1beta" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case '1': // Prefix: "1/"
								if l := len("1/"); len(elem) >= l && elem[0:l] == "1/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "GetFlowcontrolApiserverV1beta1APIResources"
										r.summary = ""
										r.operationID = "getFlowcontrolApiserverV1beta1APIResources"
										r.pathPattern = "/apis/flowcontrol.apiserver.k8s.io/v1beta1/"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case 'f': // Prefix: "flowschemas"
									if l := len("flowschemas"); len(elem) >= l && elem[0:l] == "flowschemas" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = "ListFlowcontrolApiserverV1beta1FlowSchema"
											r.summary = ""
											r.operationID = "listFlowcontrolApiserverV1beta1FlowSchema"
											r.pathPattern = "/apis/flowcontrol.apiserver.k8s.io/v1beta1/flowschemas"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											switch method {
											case "GET":
												r.name = "ReadFlowcontrolApiserverV1beta1FlowSchema"
												r.summary = ""
												r.operationID = "readFlowcontrolApiserverV1beta1FlowSchema"
												r.pathPattern = "/apis/flowcontrol.apiserver.k8s.io/v1beta1/flowschemas/{name}"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/status"
											if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "GET":
													// Leaf: ReadFlowcontrolApiserverV1beta1FlowSchemaStatus
													r.name = "ReadFlowcontrolApiserverV1beta1FlowSchemaStatus"
													r.summary = ""
													r.operationID = "readFlowcontrolApiserverV1beta1FlowSchemaStatus"
													r.pathPattern = "/apis/flowcontrol.apiserver.k8s.io/v1beta1/flowschemas/{name}/status"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}
										}
									}
								case 'p': // Prefix: "prioritylevelconfigurations"
									if l := len("prioritylevelconfigurations"); len(elem) >= l && elem[0:l] == "prioritylevelconfigurations" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = "ListFlowcontrolApiserverV1beta1PriorityLevelConfiguration"
											r.summary = ""
											r.operationID = "listFlowcontrolApiserverV1beta1PriorityLevelConfiguration"
											r.pathPattern = "/apis/flowcontrol.apiserver.k8s.io/v1beta1/prioritylevelconfigurations"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											switch method {
											case "GET":
												r.name = "ReadFlowcontrolApiserverV1beta1PriorityLevelConfiguration"
												r.summary = ""
												r.operationID = "readFlowcontrolApiserverV1beta1PriorityLevelConfiguration"
												r.pathPattern = "/apis/flowcontrol.apiserver.k8s.io/v1beta1/prioritylevelconfigurations/{name}"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/status"
											if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "GET":
													// Leaf: ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatus
													r.name = "ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatus"
													r.summary = ""
													r.operationID = "readFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatus"
													r.pathPattern = "/apis/flowcontrol.apiserver.k8s.io/v1beta1/prioritylevelconfigurations/{name}/status"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}
										}
									}
								case 'w': // Prefix: "watch/"
									if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'f': // Prefix: "flowschemas"
										if l := len("flowschemas"); len(elem) >= l && elem[0:l] == "flowschemas" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												r.name = "WatchFlowcontrolApiserverV1beta1FlowSchemaList"
												r.summary = ""
												r.operationID = "watchFlowcontrolApiserverV1beta1FlowSchemaList"
												r.pathPattern = "/apis/flowcontrol.apiserver.k8s.io/v1beta1/watch/flowschemas"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												switch method {
												case "GET":
													// Leaf: WatchFlowcontrolApiserverV1beta1FlowSchema
													r.name = "WatchFlowcontrolApiserverV1beta1FlowSchema"
													r.summary = ""
													r.operationID = "watchFlowcontrolApiserverV1beta1FlowSchema"
													r.pathPattern = "/apis/flowcontrol.apiserver.k8s.io/v1beta1/watch/flowschemas/{name}"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}
										}
									case 'p': // Prefix: "prioritylevelconfigurations"
										if l := len("prioritylevelconfigurations"); len(elem) >= l && elem[0:l] == "prioritylevelconfigurations" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												r.name = "WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationList"
												r.summary = ""
												r.operationID = "watchFlowcontrolApiserverV1beta1PriorityLevelConfigurationList"
												r.pathPattern = "/apis/flowcontrol.apiserver.k8s.io/v1beta1/watch/prioritylevelconfigurations"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												switch method {
												case "GET":
													// Leaf: WatchFlowcontrolApiserverV1beta1PriorityLevelConfiguration
													r.name = "WatchFlowcontrolApiserverV1beta1PriorityLevelConfiguration"
													r.summary = ""
													r.operationID = "watchFlowcontrolApiserverV1beta1PriorityLevelConfiguration"
													r.pathPattern = "/apis/flowcontrol.apiserver.k8s.io/v1beta1/watch/prioritylevelconfigurations/{name}"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}
										}
									}
								}
							case '2': // Prefix: "2/"
								if l := len("2/"); len(elem) >= l && elem[0:l] == "2/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "GetFlowcontrolApiserverV1beta2APIResources"
										r.summary = ""
										r.operationID = "getFlowcontrolApiserverV1beta2APIResources"
										r.pathPattern = "/apis/flowcontrol.apiserver.k8s.io/v1beta2/"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case 'f': // Prefix: "flowschemas"
									if l := len("flowschemas"); len(elem) >= l && elem[0:l] == "flowschemas" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = "ListFlowcontrolApiserverV1beta2FlowSchema"
											r.summary = ""
											r.operationID = "listFlowcontrolApiserverV1beta2FlowSchema"
											r.pathPattern = "/apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											switch method {
											case "GET":
												r.name = "ReadFlowcontrolApiserverV1beta2FlowSchema"
												r.summary = ""
												r.operationID = "readFlowcontrolApiserverV1beta2FlowSchema"
												r.pathPattern = "/apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas/{name}"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/status"
											if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "GET":
													// Leaf: ReadFlowcontrolApiserverV1beta2FlowSchemaStatus
													r.name = "ReadFlowcontrolApiserverV1beta2FlowSchemaStatus"
													r.summary = ""
													r.operationID = "readFlowcontrolApiserverV1beta2FlowSchemaStatus"
													r.pathPattern = "/apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas/{name}/status"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}
										}
									}
								case 'p': // Prefix: "prioritylevelconfigurations"
									if l := len("prioritylevelconfigurations"); len(elem) >= l && elem[0:l] == "prioritylevelconfigurations" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = "ListFlowcontrolApiserverV1beta2PriorityLevelConfiguration"
											r.summary = ""
											r.operationID = "listFlowcontrolApiserverV1beta2PriorityLevelConfiguration"
											r.pathPattern = "/apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											switch method {
											case "GET":
												r.name = "ReadFlowcontrolApiserverV1beta2PriorityLevelConfiguration"
												r.summary = ""
												r.operationID = "readFlowcontrolApiserverV1beta2PriorityLevelConfiguration"
												r.pathPattern = "/apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations/{name}"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/status"
											if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "GET":
													// Leaf: ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatus
													r.name = "ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatus"
													r.summary = ""
													r.operationID = "readFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatus"
													r.pathPattern = "/apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations/{name}/status"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}
										}
									}
								case 'w': // Prefix: "watch/"
									if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'f': // Prefix: "flowschemas"
										if l := len("flowschemas"); len(elem) >= l && elem[0:l] == "flowschemas" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												r.name = "WatchFlowcontrolApiserverV1beta2FlowSchemaList"
												r.summary = ""
												r.operationID = "watchFlowcontrolApiserverV1beta2FlowSchemaList"
												r.pathPattern = "/apis/flowcontrol.apiserver.k8s.io/v1beta2/watch/flowschemas"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												switch method {
												case "GET":
													// Leaf: WatchFlowcontrolApiserverV1beta2FlowSchema
													r.name = "WatchFlowcontrolApiserverV1beta2FlowSchema"
													r.summary = ""
													r.operationID = "watchFlowcontrolApiserverV1beta2FlowSchema"
													r.pathPattern = "/apis/flowcontrol.apiserver.k8s.io/v1beta2/watch/flowschemas/{name}"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}
										}
									case 'p': // Prefix: "prioritylevelconfigurations"
										if l := len("prioritylevelconfigurations"); len(elem) >= l && elem[0:l] == "prioritylevelconfigurations" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												r.name = "WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationList"
												r.summary = ""
												r.operationID = "watchFlowcontrolApiserverV1beta2PriorityLevelConfigurationList"
												r.pathPattern = "/apis/flowcontrol.apiserver.k8s.io/v1beta2/watch/prioritylevelconfigurations"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												switch method {
												case "GET":
													// Leaf: WatchFlowcontrolApiserverV1beta2PriorityLevelConfiguration
													r.name = "WatchFlowcontrolApiserverV1beta2PriorityLevelConfiguration"
													r.summary = ""
													r.operationID = "watchFlowcontrolApiserverV1beta2PriorityLevelConfiguration"
													r.pathPattern = "/apis/flowcontrol.apiserver.k8s.io/v1beta2/watch/prioritylevelconfigurations/{name}"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}
										}
									}
								}
							}
						}
					case 'i': // Prefix: "internal.apiserver.k8s.io/"
						if l := len("internal.apiserver.k8s.io/"); len(elem) >= l && elem[0:l] == "internal.apiserver.k8s.io/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "GetInternalApiserverAPIGroup"
								r.summary = ""
								r.operationID = "getInternalApiserverAPIGroup"
								r.pathPattern = "/apis/internal.apiserver.k8s.io/"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case 'v': // Prefix: "v1alpha1/"
							if l := len("v1alpha1/"); len(elem) >= l && elem[0:l] == "v1alpha1/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = "GetInternalApiserverV1alpha1APIResources"
									r.summary = ""
									r.operationID = "getInternalApiserverV1alpha1APIResources"
									r.pathPattern = "/apis/internal.apiserver.k8s.io/v1alpha1/"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case 's': // Prefix: "storageversions"
								if l := len("storageversions"); len(elem) >= l && elem[0:l] == "storageversions" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "ListInternalApiserverV1alpha1StorageVersion"
										r.summary = ""
										r.operationID = "listInternalApiserverV1alpha1StorageVersion"
										r.pathPattern = "/apis/internal.apiserver.k8s.io/v1alpha1/storageversions"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "name"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = "ReadInternalApiserverV1alpha1StorageVersion"
											r.summary = ""
											r.operationID = "readInternalApiserverV1alpha1StorageVersion"
											r.pathPattern = "/apis/internal.apiserver.k8s.io/v1alpha1/storageversions/{name}"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '/': // Prefix: "/status"
										if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												// Leaf: ReadInternalApiserverV1alpha1StorageVersionStatus
												r.name = "ReadInternalApiserverV1alpha1StorageVersionStatus"
												r.summary = ""
												r.operationID = "readInternalApiserverV1alpha1StorageVersionStatus"
												r.pathPattern = "/apis/internal.apiserver.k8s.io/v1alpha1/storageversions/{name}/status"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}
									}
								}
							case 'w': // Prefix: "watch/storageversions"
								if l := len("watch/storageversions"); len(elem) >= l && elem[0:l] == "watch/storageversions" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "WatchInternalApiserverV1alpha1StorageVersionList"
										r.summary = ""
										r.operationID = "watchInternalApiserverV1alpha1StorageVersionList"
										r.pathPattern = "/apis/internal.apiserver.k8s.io/v1alpha1/watch/storageversions"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "name"
									// Leaf parameter
									args[0] = elem
									elem = ""

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: WatchInternalApiserverV1alpha1StorageVersion
											r.name = "WatchInternalApiserverV1alpha1StorageVersion"
											r.summary = ""
											r.operationID = "watchInternalApiserverV1alpha1StorageVersion"
											r.pathPattern = "/apis/internal.apiserver.k8s.io/v1alpha1/watch/storageversions/{name}"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}
								}
							}
						}
					case 'n': // Prefix: "n"
						if l := len("n"); len(elem) >= l && elem[0:l] == "n" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'e': // Prefix: "etworking.k8s.io/"
							if l := len("etworking.k8s.io/"); len(elem) >= l && elem[0:l] == "etworking.k8s.io/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = "GetNetworkingAPIGroup"
									r.summary = ""
									r.operationID = "getNetworkingAPIGroup"
									r.pathPattern = "/apis/networking.k8s.io/"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case 'v': // Prefix: "v1/"
								if l := len("v1/"); len(elem) >= l && elem[0:l] == "v1/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "GetNetworkingV1APIResources"
										r.summary = ""
										r.operationID = "getNetworkingV1APIResources"
										r.pathPattern = "/apis/networking.k8s.io/v1/"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case 'i': // Prefix: "ingress"
									if l := len("ingress"); len(elem) >= l && elem[0:l] == "ingress" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'c': // Prefix: "classes"
										if l := len("classes"); len(elem) >= l && elem[0:l] == "classes" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												r.name = "ListNetworkingV1IngressClass"
												r.summary = ""
												r.operationID = "listNetworkingV1IngressClass"
												r.pathPattern = "/apis/networking.k8s.io/v1/ingressclasses"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												switch method {
												case "GET":
													// Leaf: ReadNetworkingV1IngressClass
													r.name = "ReadNetworkingV1IngressClass"
													r.summary = ""
													r.operationID = "readNetworkingV1IngressClass"
													r.pathPattern = "/apis/networking.k8s.io/v1/ingressclasses/{name}"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}
										}
									case 'e': // Prefix: "es"
										if l := len("es"); len(elem) >= l && elem[0:l] == "es" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												// Leaf: ListNetworkingV1IngressForAllNamespaces
												r.name = "ListNetworkingV1IngressForAllNamespaces"
												r.summary = ""
												r.operationID = "listNetworkingV1IngressForAllNamespaces"
												r.pathPattern = "/apis/networking.k8s.io/v1/ingresses"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
									}
								case 'n': // Prefix: "n"
									if l := len("n"); len(elem) >= l && elem[0:l] == "n" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "amespaces/"
										if l := len("amespaces/"); len(elem) >= l && elem[0:l] == "amespaces/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "namespace"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'i': // Prefix: "ingresses"
												if l := len("ingresses"); len(elem) >= l && elem[0:l] == "ingresses" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "GET":
														r.name = "ListNetworkingV1NamespacedIngress"
														r.summary = ""
														r.operationID = "listNetworkingV1NamespacedIngress"
														r.pathPattern = "/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses"
														r.args = args
														r.count = 1
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Match until "/"
													idx := strings.IndexByte(elem, '/')
													if idx < 0 {
														idx = len(elem)
													}
													args[1] = elem[:idx]
													elem = elem[idx:]

													if len(elem) == 0 {
														switch method {
														case "GET":
															r.name = "ReadNetworkingV1NamespacedIngress"
															r.summary = ""
															r.operationID = "readNetworkingV1NamespacedIngress"
															r.pathPattern = "/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}"
															r.args = args
															r.count = 2
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '/': // Prefix: "/status"
														if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "GET":
																// Leaf: ReadNetworkingV1NamespacedIngressStatus
																r.name = "ReadNetworkingV1NamespacedIngressStatus"
																r.summary = ""
																r.operationID = "readNetworkingV1NamespacedIngressStatus"
																r.pathPattern = "/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}/status"
																r.args = args
																r.count = 2
																return r, true
															default:
																return
															}
														}
													}
												}
											case 'n': // Prefix: "networkpolicies"
												if l := len("networkpolicies"); len(elem) >= l && elem[0:l] == "networkpolicies" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "GET":
														r.name = "ListNetworkingV1NamespacedNetworkPolicy"
														r.summary = ""
														r.operationID = "listNetworkingV1NamespacedNetworkPolicy"
														r.pathPattern = "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies"
														r.args = args
														r.count = 1
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args[1] = elem
													elem = ""

													if len(elem) == 0 {
														switch method {
														case "GET":
															// Leaf: ReadNetworkingV1NamespacedNetworkPolicy
															r.name = "ReadNetworkingV1NamespacedNetworkPolicy"
															r.summary = ""
															r.operationID = "readNetworkingV1NamespacedNetworkPolicy"
															r.pathPattern = "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}"
															r.args = args
															r.count = 2
															return r, true
														default:
															return
														}
													}
												}
											}
										}
									case 'e': // Prefix: "etworkpolicies"
										if l := len("etworkpolicies"); len(elem) >= l && elem[0:l] == "etworkpolicies" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												// Leaf: ListNetworkingV1NetworkPolicyForAllNamespaces
												r.name = "ListNetworkingV1NetworkPolicyForAllNamespaces"
												r.summary = ""
												r.operationID = "listNetworkingV1NetworkPolicyForAllNamespaces"
												r.pathPattern = "/apis/networking.k8s.io/v1/networkpolicies"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
									}
								case 'w': // Prefix: "watch/"
									if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'i': // Prefix: "ingress"
										if l := len("ingress"); len(elem) >= l && elem[0:l] == "ingress" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'c': // Prefix: "classes"
											if l := len("classes"); len(elem) >= l && elem[0:l] == "classes" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "GET":
													r.name = "WatchNetworkingV1IngressClassList"
													r.summary = ""
													r.operationID = "watchNetworkingV1IngressClassList"
													r.pathPattern = "/apis/networking.k8s.io/v1/watch/ingressclasses"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[0] = elem
												elem = ""

												if len(elem) == 0 {
													switch method {
													case "GET":
														// Leaf: WatchNetworkingV1IngressClass
														r.name = "WatchNetworkingV1IngressClass"
														r.summary = ""
														r.operationID = "watchNetworkingV1IngressClass"
														r.pathPattern = "/apis/networking.k8s.io/v1/watch/ingressclasses/{name}"
														r.args = args
														r.count = 1
														return r, true
													default:
														return
													}
												}
											}
										case 'e': // Prefix: "es"
											if l := len("es"); len(elem) >= l && elem[0:l] == "es" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "GET":
													// Leaf: WatchNetworkingV1IngressListForAllNamespaces
													r.name = "WatchNetworkingV1IngressListForAllNamespaces"
													r.summary = ""
													r.operationID = "watchNetworkingV1IngressListForAllNamespaces"
													r.pathPattern = "/apis/networking.k8s.io/v1/watch/ingresses"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
										}
									case 'n': // Prefix: "n"
										if l := len("n"); len(elem) >= l && elem[0:l] == "n" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "amespaces/"
											if l := len("amespaces/"); len(elem) >= l && elem[0:l] == "amespaces/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "namespace"
											// Match until "/"
											idx := strings.IndexByte(elem, '/')
											if idx < 0 {
												idx = len(elem)
											}
											args[0] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'i': // Prefix: "ingresses"
													if l := len("ingresses"); len(elem) >= l && elem[0:l] == "ingresses" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "GET":
															r.name = "WatchNetworkingV1NamespacedIngressList"
															r.summary = ""
															r.operationID = "watchNetworkingV1NamespacedIngressList"
															r.pathPattern = "/apis/networking.k8s.io/v1/watch/namespaces/{namespace}/ingresses"
															r.args = args
															r.count = 1
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															switch method {
															case "GET":
																// Leaf: WatchNetworkingV1NamespacedIngress
																r.name = "WatchNetworkingV1NamespacedIngress"
																r.summary = ""
																r.operationID = "watchNetworkingV1NamespacedIngress"
																r.pathPattern = "/apis/networking.k8s.io/v1/watch/namespaces/{namespace}/ingresses/{name}"
																r.args = args
																r.count = 2
																return r, true
															default:
																return
															}
														}
													}
												case 'n': // Prefix: "networkpolicies"
													if l := len("networkpolicies"); len(elem) >= l && elem[0:l] == "networkpolicies" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "GET":
															r.name = "WatchNetworkingV1NamespacedNetworkPolicyList"
															r.summary = ""
															r.operationID = "watchNetworkingV1NamespacedNetworkPolicyList"
															r.pathPattern = "/apis/networking.k8s.io/v1/watch/namespaces/{namespace}/networkpolicies"
															r.args = args
															r.count = 1
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '/': // Prefix: "/"
														if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
															elem = elem[l:]
														} else {
															break
														}

														// Param: "name"
														// Leaf parameter
														args[1] = elem
														elem = ""

														if len(elem) == 0 {
															switch method {
															case "GET":
																// Leaf: WatchNetworkingV1NamespacedNetworkPolicy
																r.name = "WatchNetworkingV1NamespacedNetworkPolicy"
																r.summary = ""
																r.operationID = "watchNetworkingV1NamespacedNetworkPolicy"
																r.pathPattern = "/apis/networking.k8s.io/v1/watch/namespaces/{namespace}/networkpolicies/{name}"
																r.args = args
																r.count = 2
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										case 'e': // Prefix: "etworkpolicies"
											if l := len("etworkpolicies"); len(elem) >= l && elem[0:l] == "etworkpolicies" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "GET":
													// Leaf: WatchNetworkingV1NetworkPolicyListForAllNamespaces
													r.name = "WatchNetworkingV1NetworkPolicyListForAllNamespaces"
													r.summary = ""
													r.operationID = "watchNetworkingV1NetworkPolicyListForAllNamespaces"
													r.pathPattern = "/apis/networking.k8s.io/v1/watch/networkpolicies"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
										}
									}
								}
							}
						case 'o': // Prefix: "ode.k8s.io/"
							if l := len("ode.k8s.io/"); len(elem) >= l && elem[0:l] == "ode.k8s.io/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = "GetNodeAPIGroup"
									r.summary = ""
									r.operationID = "getNodeAPIGroup"
									r.pathPattern = "/apis/node.k8s.io/"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case 'v': // Prefix: "v1"
								if l := len("v1"); len(elem) >= l && elem[0:l] == "v1" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = "GetNodeV1APIResources"
											r.summary = ""
											r.operationID = "getNodeV1APIResources"
											r.pathPattern = "/apis/node.k8s.io/v1/"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case 'r': // Prefix: "runtimeclasses"
										if l := len("runtimeclasses"); len(elem) >= l && elem[0:l] == "runtimeclasses" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												r.name = "ListNodeV1RuntimeClass"
												r.summary = ""
												r.operationID = "listNodeV1RuntimeClass"
												r.pathPattern = "/apis/node.k8s.io/v1/runtimeclasses"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												switch method {
												case "GET":
													// Leaf: ReadNodeV1RuntimeClass
													r.name = "ReadNodeV1RuntimeClass"
													r.summary = ""
													r.operationID = "readNodeV1RuntimeClass"
													r.pathPattern = "/apis/node.k8s.io/v1/runtimeclasses/{name}"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}
										}
									case 'w': // Prefix: "watch/runtimeclasses"
										if l := len("watch/runtimeclasses"); len(elem) >= l && elem[0:l] == "watch/runtimeclasses" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												r.name = "WatchNodeV1RuntimeClassList"
												r.summary = ""
												r.operationID = "watchNodeV1RuntimeClassList"
												r.pathPattern = "/apis/node.k8s.io/v1/watch/runtimeclasses"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												switch method {
												case "GET":
													// Leaf: WatchNodeV1RuntimeClass
													r.name = "WatchNodeV1RuntimeClass"
													r.summary = ""
													r.operationID = "watchNodeV1RuntimeClass"
													r.pathPattern = "/apis/node.k8s.io/v1/watch/runtimeclasses/{name}"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}
										}
									}
								case 'a': // Prefix: "alpha1/"
									if l := len("alpha1/"); len(elem) >= l && elem[0:l] == "alpha1/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = "GetNodeV1alpha1APIResources"
											r.summary = ""
											r.operationID = "getNodeV1alpha1APIResources"
											r.pathPattern = "/apis/node.k8s.io/v1alpha1/"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case 'r': // Prefix: "runtimeclasses"
										if l := len("runtimeclasses"); len(elem) >= l && elem[0:l] == "runtimeclasses" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												r.name = "ListNodeV1alpha1RuntimeClass"
												r.summary = ""
												r.operationID = "listNodeV1alpha1RuntimeClass"
												r.pathPattern = "/apis/node.k8s.io/v1alpha1/runtimeclasses"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												switch method {
												case "GET":
													// Leaf: ReadNodeV1alpha1RuntimeClass
													r.name = "ReadNodeV1alpha1RuntimeClass"
													r.summary = ""
													r.operationID = "readNodeV1alpha1RuntimeClass"
													r.pathPattern = "/apis/node.k8s.io/v1alpha1/runtimeclasses/{name}"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}
										}
									case 'w': // Prefix: "watch/runtimeclasses"
										if l := len("watch/runtimeclasses"); len(elem) >= l && elem[0:l] == "watch/runtimeclasses" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												r.name = "WatchNodeV1alpha1RuntimeClassList"
												r.summary = ""
												r.operationID = "watchNodeV1alpha1RuntimeClassList"
												r.pathPattern = "/apis/node.k8s.io/v1alpha1/watch/runtimeclasses"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												switch method {
												case "GET":
													// Leaf: WatchNodeV1alpha1RuntimeClass
													r.name = "WatchNodeV1alpha1RuntimeClass"
													r.summary = ""
													r.operationID = "watchNodeV1alpha1RuntimeClass"
													r.pathPattern = "/apis/node.k8s.io/v1alpha1/watch/runtimeclasses/{name}"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}
										}
									}
								case 'b': // Prefix: "beta1/"
									if l := len("beta1/"); len(elem) >= l && elem[0:l] == "beta1/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = "GetNodeV1beta1APIResources"
											r.summary = ""
											r.operationID = "getNodeV1beta1APIResources"
											r.pathPattern = "/apis/node.k8s.io/v1beta1/"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case 'r': // Prefix: "runtimeclasses"
										if l := len("runtimeclasses"); len(elem) >= l && elem[0:l] == "runtimeclasses" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												r.name = "ListNodeV1beta1RuntimeClass"
												r.summary = ""
												r.operationID = "listNodeV1beta1RuntimeClass"
												r.pathPattern = "/apis/node.k8s.io/v1beta1/runtimeclasses"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												switch method {
												case "GET":
													// Leaf: ReadNodeV1beta1RuntimeClass
													r.name = "ReadNodeV1beta1RuntimeClass"
													r.summary = ""
													r.operationID = "readNodeV1beta1RuntimeClass"
													r.pathPattern = "/apis/node.k8s.io/v1beta1/runtimeclasses/{name}"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}
										}
									case 'w': // Prefix: "watch/runtimeclasses"
										if l := len("watch/runtimeclasses"); len(elem) >= l && elem[0:l] == "watch/runtimeclasses" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												r.name = "WatchNodeV1beta1RuntimeClassList"
												r.summary = ""
												r.operationID = "watchNodeV1beta1RuntimeClassList"
												r.pathPattern = "/apis/node.k8s.io/v1beta1/watch/runtimeclasses"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												switch method {
												case "GET":
													// Leaf: WatchNodeV1beta1RuntimeClass
													r.name = "WatchNodeV1beta1RuntimeClass"
													r.summary = ""
													r.operationID = "watchNodeV1beta1RuntimeClass"
													r.pathPattern = "/apis/node.k8s.io/v1beta1/watch/runtimeclasses/{name}"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}
										}
									}
								}
							}
						}
					case 'p': // Prefix: "policy/"
						if l := len("policy/"); len(elem) >= l && elem[0:l] == "policy/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "GetPolicyAPIGroup"
								r.summary = ""
								r.operationID = "getPolicyAPIGroup"
								r.pathPattern = "/apis/policy/"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case 'v': // Prefix: "v1"
							if l := len("v1"); len(elem) >= l && elem[0:l] == "v1" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case '/': // Prefix: "/"
								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "GetPolicyV1APIResources"
										r.summary = ""
										r.operationID = "getPolicyV1APIResources"
										r.pathPattern = "/apis/policy/v1/"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case 'n': // Prefix: "namespaces/"
									if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "namespace"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '/': // Prefix: "/poddisruptionbudgets"
										if l := len("/poddisruptionbudgets"); len(elem) >= l && elem[0:l] == "/poddisruptionbudgets" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												r.name = "ListPolicyV1NamespacedPodDisruptionBudget"
												r.summary = ""
												r.operationID = "listPolicyV1NamespacedPodDisruptionBudget"
												r.pathPattern = "/apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Match until "/"
											idx := strings.IndexByte(elem, '/')
											if idx < 0 {
												idx = len(elem)
											}
											args[1] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												switch method {
												case "GET":
													r.name = "ReadPolicyV1NamespacedPodDisruptionBudget"
													r.summary = ""
													r.operationID = "readPolicyV1NamespacedPodDisruptionBudget"
													r.pathPattern = "/apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets/{name}"
													r.args = args
													r.count = 2
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '/': // Prefix: "/status"
												if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "GET":
														// Leaf: ReadPolicyV1NamespacedPodDisruptionBudgetStatus
														r.name = "ReadPolicyV1NamespacedPodDisruptionBudgetStatus"
														r.summary = ""
														r.operationID = "readPolicyV1NamespacedPodDisruptionBudgetStatus"
														r.pathPattern = "/apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets/{name}/status"
														r.args = args
														r.count = 2
														return r, true
													default:
														return
													}
												}
											}
										}
									}
								case 'p': // Prefix: "poddisruptionbudgets"
									if l := len("poddisruptionbudgets"); len(elem) >= l && elem[0:l] == "poddisruptionbudgets" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: ListPolicyV1PodDisruptionBudgetForAllNamespaces
											r.name = "ListPolicyV1PodDisruptionBudgetForAllNamespaces"
											r.summary = ""
											r.operationID = "listPolicyV1PodDisruptionBudgetForAllNamespaces"
											r.pathPattern = "/apis/policy/v1/poddisruptionbudgets"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
								case 'w': // Prefix: "watch/"
									if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'n': // Prefix: "namespaces/"
										if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "namespace"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/poddisruptionbudgets"
											if l := len("/poddisruptionbudgets"); len(elem) >= l && elem[0:l] == "/poddisruptionbudgets" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "GET":
													r.name = "WatchPolicyV1NamespacedPodDisruptionBudgetList"
													r.summary = ""
													r.operationID = "watchPolicyV1NamespacedPodDisruptionBudgetList"
													r.pathPattern = "/apis/policy/v1/watch/namespaces/{namespace}/poddisruptionbudgets"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													switch method {
													case "GET":
														// Leaf: WatchPolicyV1NamespacedPodDisruptionBudget
														r.name = "WatchPolicyV1NamespacedPodDisruptionBudget"
														r.summary = ""
														r.operationID = "watchPolicyV1NamespacedPodDisruptionBudget"
														r.pathPattern = "/apis/policy/v1/watch/namespaces/{namespace}/poddisruptionbudgets/{name}"
														r.args = args
														r.count = 2
														return r, true
													default:
														return
													}
												}
											}
										}
									case 'p': // Prefix: "poddisruptionbudgets"
										if l := len("poddisruptionbudgets"); len(elem) >= l && elem[0:l] == "poddisruptionbudgets" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												// Leaf: WatchPolicyV1PodDisruptionBudgetListForAllNamespaces
												r.name = "WatchPolicyV1PodDisruptionBudgetListForAllNamespaces"
												r.summary = ""
												r.operationID = "watchPolicyV1PodDisruptionBudgetListForAllNamespaces"
												r.pathPattern = "/apis/policy/v1/watch/poddisruptionbudgets"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
									}
								}
							case 'b': // Prefix: "beta1/"
								if l := len("beta1/"); len(elem) >= l && elem[0:l] == "beta1/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "GetPolicyV1beta1APIResources"
										r.summary = ""
										r.operationID = "getPolicyV1beta1APIResources"
										r.pathPattern = "/apis/policy/v1beta1/"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case 'n': // Prefix: "namespaces/"
									if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "namespace"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '/': // Prefix: "/poddisruptionbudgets"
										if l := len("/poddisruptionbudgets"); len(elem) >= l && elem[0:l] == "/poddisruptionbudgets" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												r.name = "ListPolicyV1beta1NamespacedPodDisruptionBudget"
												r.summary = ""
												r.operationID = "listPolicyV1beta1NamespacedPodDisruptionBudget"
												r.pathPattern = "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Match until "/"
											idx := strings.IndexByte(elem, '/')
											if idx < 0 {
												idx = len(elem)
											}
											args[1] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												switch method {
												case "GET":
													r.name = "ReadPolicyV1beta1NamespacedPodDisruptionBudget"
													r.summary = ""
													r.operationID = "readPolicyV1beta1NamespacedPodDisruptionBudget"
													r.pathPattern = "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}"
													r.args = args
													r.count = 2
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '/': // Prefix: "/status"
												if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "GET":
														// Leaf: ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatus
														r.name = "ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatus"
														r.summary = ""
														r.operationID = "readPolicyV1beta1NamespacedPodDisruptionBudgetStatus"
														r.pathPattern = "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}/status"
														r.args = args
														r.count = 2
														return r, true
													default:
														return
													}
												}
											}
										}
									}
								case 'p': // Prefix: "pod"
									if l := len("pod"); len(elem) >= l && elem[0:l] == "pod" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'd': // Prefix: "disruptionbudgets"
										if l := len("disruptionbudgets"); len(elem) >= l && elem[0:l] == "disruptionbudgets" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												// Leaf: ListPolicyV1beta1PodDisruptionBudgetForAllNamespaces
												r.name = "ListPolicyV1beta1PodDisruptionBudgetForAllNamespaces"
												r.summary = ""
												r.operationID = "listPolicyV1beta1PodDisruptionBudgetForAllNamespaces"
												r.pathPattern = "/apis/policy/v1beta1/poddisruptionbudgets"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
									case 's': // Prefix: "securitypolicies"
										if l := len("securitypolicies"); len(elem) >= l && elem[0:l] == "securitypolicies" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												r.name = "ListPolicyV1beta1PodSecurityPolicy"
												r.summary = ""
												r.operationID = "listPolicyV1beta1PodSecurityPolicy"
												r.pathPattern = "/apis/policy/v1beta1/podsecuritypolicies"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												switch method {
												case "GET":
													// Leaf: ReadPolicyV1beta1PodSecurityPolicy
													r.name = "ReadPolicyV1beta1PodSecurityPolicy"
													r.summary = ""
													r.operationID = "readPolicyV1beta1PodSecurityPolicy"
													r.pathPattern = "/apis/policy/v1beta1/podsecuritypolicies/{name}"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}
										}
									}
								case 'w': // Prefix: "watch/"
									if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'n': // Prefix: "namespaces/"
										if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "namespace"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/poddisruptionbudgets"
											if l := len("/poddisruptionbudgets"); len(elem) >= l && elem[0:l] == "/poddisruptionbudgets" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "GET":
													r.name = "WatchPolicyV1beta1NamespacedPodDisruptionBudgetList"
													r.summary = ""
													r.operationID = "watchPolicyV1beta1NamespacedPodDisruptionBudgetList"
													r.pathPattern = "/apis/policy/v1beta1/watch/namespaces/{namespace}/poddisruptionbudgets"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													switch method {
													case "GET":
														// Leaf: WatchPolicyV1beta1NamespacedPodDisruptionBudget
														r.name = "WatchPolicyV1beta1NamespacedPodDisruptionBudget"
														r.summary = ""
														r.operationID = "watchPolicyV1beta1NamespacedPodDisruptionBudget"
														r.pathPattern = "/apis/policy/v1beta1/watch/namespaces/{namespace}/poddisruptionbudgets/{name}"
														r.args = args
														r.count = 2
														return r, true
													default:
														return
													}
												}
											}
										}
									case 'p': // Prefix: "pod"
										if l := len("pod"); len(elem) >= l && elem[0:l] == "pod" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'd': // Prefix: "disruptionbudgets"
											if l := len("disruptionbudgets"); len(elem) >= l && elem[0:l] == "disruptionbudgets" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "GET":
													// Leaf: WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespaces
													r.name = "WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespaces"
													r.summary = ""
													r.operationID = "watchPolicyV1beta1PodDisruptionBudgetListForAllNamespaces"
													r.pathPattern = "/apis/policy/v1beta1/watch/poddisruptionbudgets"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
										case 's': // Prefix: "securitypolicies"
											if l := len("securitypolicies"); len(elem) >= l && elem[0:l] == "securitypolicies" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "GET":
													r.name = "WatchPolicyV1beta1PodSecurityPolicyList"
													r.summary = ""
													r.operationID = "watchPolicyV1beta1PodSecurityPolicyList"
													r.pathPattern = "/apis/policy/v1beta1/watch/podsecuritypolicies"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[0] = elem
												elem = ""

												if len(elem) == 0 {
													switch method {
													case "GET":
														// Leaf: WatchPolicyV1beta1PodSecurityPolicy
														r.name = "WatchPolicyV1beta1PodSecurityPolicy"
														r.summary = ""
														r.operationID = "watchPolicyV1beta1PodSecurityPolicy"
														r.pathPattern = "/apis/policy/v1beta1/watch/podsecuritypolicies/{name}"
														r.args = args
														r.count = 1
														return r, true
													default:
														return
													}
												}
											}
										}
									}
								}
							}
						}
					case 'r': // Prefix: "rbac.authorization.k8s.io/"
						if l := len("rbac.authorization.k8s.io/"); len(elem) >= l && elem[0:l] == "rbac.authorization.k8s.io/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "GetRbacAuthorizationAPIGroup"
								r.summary = ""
								r.operationID = "getRbacAuthorizationAPIGroup"
								r.pathPattern = "/apis/rbac.authorization.k8s.io/"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case 'v': // Prefix: "v1/"
							if l := len("v1/"); len(elem) >= l && elem[0:l] == "v1/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = "GetRbacAuthorizationV1APIResources"
									r.summary = ""
									r.operationID = "getRbacAuthorizationV1APIResources"
									r.pathPattern = "/apis/rbac.authorization.k8s.io/v1/"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case 'c': // Prefix: "clusterrole"
								if l := len("clusterrole"); len(elem) >= l && elem[0:l] == "clusterrole" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'b': // Prefix: "bindings"
									if l := len("bindings"); len(elem) >= l && elem[0:l] == "bindings" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = "ListRbacAuthorizationV1ClusterRoleBinding"
											r.summary = ""
											r.operationID = "listRbacAuthorizationV1ClusterRoleBinding"
											r.pathPattern = "/apis/rbac.authorization.k8s.io/v1/clusterrolebindings"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Leaf parameter
										args[0] = elem
										elem = ""

										if len(elem) == 0 {
											switch method {
											case "GET":
												// Leaf: ReadRbacAuthorizationV1ClusterRoleBinding
												r.name = "ReadRbacAuthorizationV1ClusterRoleBinding"
												r.summary = ""
												r.operationID = "readRbacAuthorizationV1ClusterRoleBinding"
												r.pathPattern = "/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/{name}"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}
									}
								case 's': // Prefix: "s"
									if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = "ListRbacAuthorizationV1ClusterRole"
											r.summary = ""
											r.operationID = "listRbacAuthorizationV1ClusterRole"
											r.pathPattern = "/apis/rbac.authorization.k8s.io/v1/clusterroles"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Leaf parameter
										args[0] = elem
										elem = ""

										if len(elem) == 0 {
											switch method {
											case "GET":
												// Leaf: ReadRbacAuthorizationV1ClusterRole
												r.name = "ReadRbacAuthorizationV1ClusterRole"
												r.summary = ""
												r.operationID = "readRbacAuthorizationV1ClusterRole"
												r.pathPattern = "/apis/rbac.authorization.k8s.io/v1/clusterroles/{name}"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}
									}
								}
							case 'n': // Prefix: "namespaces/"
								if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "namespace"
								// Match until "/"
								idx := strings.IndexByte(elem, '/')
								if idx < 0 {
									idx = len(elem)
								}
								args[0] = elem[:idx]
								elem = elem[idx:]

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case '/': // Prefix: "/role"
									if l := len("/role"); len(elem) >= l && elem[0:l] == "/role" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'b': // Prefix: "bindings"
										if l := len("bindings"); len(elem) >= l && elem[0:l] == "bindings" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												r.name = "ListRbacAuthorizationV1NamespacedRoleBinding"
												r.summary = ""
												r.operationID = "listRbacAuthorizationV1NamespacedRoleBinding"
												r.pathPattern = "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[1] = elem
											elem = ""

											if len(elem) == 0 {
												switch method {
												case "GET":
													// Leaf: ReadRbacAuthorizationV1NamespacedRoleBinding
													r.name = "ReadRbacAuthorizationV1NamespacedRoleBinding"
													r.summary = ""
													r.operationID = "readRbacAuthorizationV1NamespacedRoleBinding"
													r.pathPattern = "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}"
													r.args = args
													r.count = 2
													return r, true
												default:
													return
												}
											}
										}
									case 's': // Prefix: "s"
										if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												r.name = "ListRbacAuthorizationV1NamespacedRole"
												r.summary = ""
												r.operationID = "listRbacAuthorizationV1NamespacedRole"
												r.pathPattern = "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[1] = elem
											elem = ""

											if len(elem) == 0 {
												switch method {
												case "GET":
													// Leaf: ReadRbacAuthorizationV1NamespacedRole
													r.name = "ReadRbacAuthorizationV1NamespacedRole"
													r.summary = ""
													r.operationID = "readRbacAuthorizationV1NamespacedRole"
													r.pathPattern = "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles/{name}"
													r.args = args
													r.count = 2
													return r, true
												default:
													return
												}
											}
										}
									}
								}
							case 'r': // Prefix: "role"
								if l := len("role"); len(elem) >= l && elem[0:l] == "role" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'b': // Prefix: "bindings"
									if l := len("bindings"); len(elem) >= l && elem[0:l] == "bindings" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: ListRbacAuthorizationV1RoleBindingForAllNamespaces
											r.name = "ListRbacAuthorizationV1RoleBindingForAllNamespaces"
											r.summary = ""
											r.operationID = "listRbacAuthorizationV1RoleBindingForAllNamespaces"
											r.pathPattern = "/apis/rbac.authorization.k8s.io/v1/rolebindings"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
								case 's': // Prefix: "s"
									if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: ListRbacAuthorizationV1RoleForAllNamespaces
											r.name = "ListRbacAuthorizationV1RoleForAllNamespaces"
											r.summary = ""
											r.operationID = "listRbacAuthorizationV1RoleForAllNamespaces"
											r.pathPattern = "/apis/rbac.authorization.k8s.io/v1/roles"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
								}
							case 'w': // Prefix: "watch/"
								if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'c': // Prefix: "clusterrole"
									if l := len("clusterrole"); len(elem) >= l && elem[0:l] == "clusterrole" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'b': // Prefix: "bindings"
										if l := len("bindings"); len(elem) >= l && elem[0:l] == "bindings" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												r.name = "WatchRbacAuthorizationV1ClusterRoleBindingList"
												r.summary = ""
												r.operationID = "watchRbacAuthorizationV1ClusterRoleBindingList"
												r.pathPattern = "/apis/rbac.authorization.k8s.io/v1/watch/clusterrolebindings"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												switch method {
												case "GET":
													// Leaf: WatchRbacAuthorizationV1ClusterRoleBinding
													r.name = "WatchRbacAuthorizationV1ClusterRoleBinding"
													r.summary = ""
													r.operationID = "watchRbacAuthorizationV1ClusterRoleBinding"
													r.pathPattern = "/apis/rbac.authorization.k8s.io/v1/watch/clusterrolebindings/{name}"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}
										}
									case 's': // Prefix: "s"
										if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												r.name = "WatchRbacAuthorizationV1ClusterRoleList"
												r.summary = ""
												r.operationID = "watchRbacAuthorizationV1ClusterRoleList"
												r.pathPattern = "/apis/rbac.authorization.k8s.io/v1/watch/clusterroles"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												switch method {
												case "GET":
													// Leaf: WatchRbacAuthorizationV1ClusterRole
													r.name = "WatchRbacAuthorizationV1ClusterRole"
													r.summary = ""
													r.operationID = "watchRbacAuthorizationV1ClusterRole"
													r.pathPattern = "/apis/rbac.authorization.k8s.io/v1/watch/clusterroles/{name}"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}
										}
									}
								case 'n': // Prefix: "namespaces/"
									if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "namespace"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[0] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '/': // Prefix: "/role"
										if l := len("/role"); len(elem) >= l && elem[0:l] == "/role" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'b': // Prefix: "bindings"
											if l := len("bindings"); len(elem) >= l && elem[0:l] == "bindings" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "GET":
													r.name = "WatchRbacAuthorizationV1NamespacedRoleBindingList"
													r.summary = ""
													r.operationID = "watchRbacAuthorizationV1NamespacedRoleBindingList"
													r.pathPattern = "/apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/rolebindings"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													switch method {
													case "GET":
														// Leaf: WatchRbacAuthorizationV1NamespacedRoleBinding
														r.name = "WatchRbacAuthorizationV1NamespacedRoleBinding"
														r.summary = ""
														r.operationID = "watchRbacAuthorizationV1NamespacedRoleBinding"
														r.pathPattern = "/apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/rolebindings/{name}"
														r.args = args
														r.count = 2
														return r, true
													default:
														return
													}
												}
											}
										case 's': // Prefix: "s"
											if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "GET":
													r.name = "WatchRbacAuthorizationV1NamespacedRoleList"
													r.summary = ""
													r.operationID = "watchRbacAuthorizationV1NamespacedRoleList"
													r.pathPattern = "/apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/roles"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													switch method {
													case "GET":
														// Leaf: WatchRbacAuthorizationV1NamespacedRole
														r.name = "WatchRbacAuthorizationV1NamespacedRole"
														r.summary = ""
														r.operationID = "watchRbacAuthorizationV1NamespacedRole"
														r.pathPattern = "/apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/roles/{name}"
														r.args = args
														r.count = 2
														return r, true
													default:
														return
													}
												}
											}
										}
									}
								case 'r': // Prefix: "role"
									if l := len("role"); len(elem) >= l && elem[0:l] == "role" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'b': // Prefix: "bindings"
										if l := len("bindings"); len(elem) >= l && elem[0:l] == "bindings" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												// Leaf: WatchRbacAuthorizationV1RoleBindingListForAllNamespaces
												r.name = "WatchRbacAuthorizationV1RoleBindingListForAllNamespaces"
												r.summary = ""
												r.operationID = "watchRbacAuthorizationV1RoleBindingListForAllNamespaces"
												r.pathPattern = "/apis/rbac.authorization.k8s.io/v1/watch/rolebindings"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
									case 's': // Prefix: "s"
										if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												// Leaf: WatchRbacAuthorizationV1RoleListForAllNamespaces
												r.name = "WatchRbacAuthorizationV1RoleListForAllNamespaces"
												r.summary = ""
												r.operationID = "watchRbacAuthorizationV1RoleListForAllNamespaces"
												r.pathPattern = "/apis/rbac.authorization.k8s.io/v1/watch/roles"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
									}
								}
							}
						}
					case 's': // Prefix: "s"
						if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'c': // Prefix: "cheduling.k8s.io/"
							if l := len("cheduling.k8s.io/"); len(elem) >= l && elem[0:l] == "cheduling.k8s.io/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = "GetSchedulingAPIGroup"
									r.summary = ""
									r.operationID = "getSchedulingAPIGroup"
									r.pathPattern = "/apis/scheduling.k8s.io/"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case 'v': // Prefix: "v1/"
								if l := len("v1/"); len(elem) >= l && elem[0:l] == "v1/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "GetSchedulingV1APIResources"
										r.summary = ""
										r.operationID = "getSchedulingV1APIResources"
										r.pathPattern = "/apis/scheduling.k8s.io/v1/"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case 'p': // Prefix: "priorityclasses"
									if l := len("priorityclasses"); len(elem) >= l && elem[0:l] == "priorityclasses" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = "ListSchedulingV1PriorityClass"
											r.summary = ""
											r.operationID = "listSchedulingV1PriorityClass"
											r.pathPattern = "/apis/scheduling.k8s.io/v1/priorityclasses"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Leaf parameter
										args[0] = elem
										elem = ""

										if len(elem) == 0 {
											switch method {
											case "GET":
												// Leaf: ReadSchedulingV1PriorityClass
												r.name = "ReadSchedulingV1PriorityClass"
												r.summary = ""
												r.operationID = "readSchedulingV1PriorityClass"
												r.pathPattern = "/apis/scheduling.k8s.io/v1/priorityclasses/{name}"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}
									}
								case 'w': // Prefix: "watch/priorityclasses"
									if l := len("watch/priorityclasses"); len(elem) >= l && elem[0:l] == "watch/priorityclasses" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = "WatchSchedulingV1PriorityClassList"
											r.summary = ""
											r.operationID = "watchSchedulingV1PriorityClassList"
											r.pathPattern = "/apis/scheduling.k8s.io/v1/watch/priorityclasses"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '/': // Prefix: "/"
										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "name"
										// Leaf parameter
										args[0] = elem
										elem = ""

										if len(elem) == 0 {
											switch method {
											case "GET":
												// Leaf: WatchSchedulingV1PriorityClass
												r.name = "WatchSchedulingV1PriorityClass"
												r.summary = ""
												r.operationID = "watchSchedulingV1PriorityClass"
												r.pathPattern = "/apis/scheduling.k8s.io/v1/watch/priorityclasses/{name}"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}
									}
								}
							}
						case 't': // Prefix: "torage.k8s.io/"
							if l := len("torage.k8s.io/"); len(elem) >= l && elem[0:l] == "torage.k8s.io/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = "GetStorageAPIGroup"
									r.summary = ""
									r.operationID = "getStorageAPIGroup"
									r.pathPattern = "/apis/storage.k8s.io/"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case 'v': // Prefix: "v1"
								if l := len("v1"); len(elem) >= l && elem[0:l] == "v1" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = "GetStorageV1APIResources"
											r.summary = ""
											r.operationID = "getStorageV1APIResources"
											r.pathPattern = "/apis/storage.k8s.io/v1/"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case 'c': // Prefix: "csi"
										if l := len("csi"); len(elem) >= l && elem[0:l] == "csi" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'd': // Prefix: "drivers"
											if l := len("drivers"); len(elem) >= l && elem[0:l] == "drivers" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "GET":
													r.name = "ListStorageV1CSIDriver"
													r.summary = ""
													r.operationID = "listStorageV1CSIDriver"
													r.pathPattern = "/apis/storage.k8s.io/v1/csidrivers"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[0] = elem
												elem = ""

												if len(elem) == 0 {
													switch method {
													case "GET":
														// Leaf: ReadStorageV1CSIDriver
														r.name = "ReadStorageV1CSIDriver"
														r.summary = ""
														r.operationID = "readStorageV1CSIDriver"
														r.pathPattern = "/apis/storage.k8s.io/v1/csidrivers/{name}"
														r.args = args
														r.count = 1
														return r, true
													default:
														return
													}
												}
											}
										case 'n': // Prefix: "nodes"
											if l := len("nodes"); len(elem) >= l && elem[0:l] == "nodes" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "GET":
													r.name = "ListStorageV1CSINode"
													r.summary = ""
													r.operationID = "listStorageV1CSINode"
													r.pathPattern = "/apis/storage.k8s.io/v1/csinodes"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[0] = elem
												elem = ""

												if len(elem) == 0 {
													switch method {
													case "GET":
														// Leaf: ReadStorageV1CSINode
														r.name = "ReadStorageV1CSINode"
														r.summary = ""
														r.operationID = "readStorageV1CSINode"
														r.pathPattern = "/apis/storage.k8s.io/v1/csinodes/{name}"
														r.args = args
														r.count = 1
														return r, true
													default:
														return
													}
												}
											}
										}
									case 's': // Prefix: "storageclasses"
										if l := len("storageclasses"); len(elem) >= l && elem[0:l] == "storageclasses" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												r.name = "ListStorageV1StorageClass"
												r.summary = ""
												r.operationID = "listStorageV1StorageClass"
												r.pathPattern = "/apis/storage.k8s.io/v1/storageclasses"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Leaf parameter
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												switch method {
												case "GET":
													// Leaf: ReadStorageV1StorageClass
													r.name = "ReadStorageV1StorageClass"
													r.summary = ""
													r.operationID = "readStorageV1StorageClass"
													r.pathPattern = "/apis/storage.k8s.io/v1/storageclasses/{name}"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}
										}
									case 'v': // Prefix: "volumeattachments"
										if l := len("volumeattachments"); len(elem) >= l && elem[0:l] == "volumeattachments" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												r.name = "ListStorageV1VolumeAttachment"
												r.summary = ""
												r.operationID = "listStorageV1VolumeAttachment"
												r.pathPattern = "/apis/storage.k8s.io/v1/volumeattachments"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/"
											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "name"
											// Match until "/"
											idx := strings.IndexByte(elem, '/')
											if idx < 0 {
												idx = len(elem)
											}
											args[0] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												switch method {
												case "GET":
													r.name = "ReadStorageV1VolumeAttachment"
													r.summary = ""
													r.operationID = "readStorageV1VolumeAttachment"
													r.pathPattern = "/apis/storage.k8s.io/v1/volumeattachments/{name}"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '/': // Prefix: "/status"
												if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "GET":
														// Leaf: ReadStorageV1VolumeAttachmentStatus
														r.name = "ReadStorageV1VolumeAttachmentStatus"
														r.summary = ""
														r.operationID = "readStorageV1VolumeAttachmentStatus"
														r.pathPattern = "/apis/storage.k8s.io/v1/volumeattachments/{name}/status"
														r.args = args
														r.count = 1
														return r, true
													default:
														return
													}
												}
											}
										}
									case 'w': // Prefix: "watch/"
										if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'c': // Prefix: "csi"
											if l := len("csi"); len(elem) >= l && elem[0:l] == "csi" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'd': // Prefix: "drivers"
												if l := len("drivers"); len(elem) >= l && elem[0:l] == "drivers" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "GET":
														r.name = "WatchStorageV1CSIDriverList"
														r.summary = ""
														r.operationID = "watchStorageV1CSIDriverList"
														r.pathPattern = "/apis/storage.k8s.io/v1/watch/csidrivers"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args[0] = elem
													elem = ""

													if len(elem) == 0 {
														switch method {
														case "GET":
															// Leaf: WatchStorageV1CSIDriver
															r.name = "WatchStorageV1CSIDriver"
															r.summary = ""
															r.operationID = "watchStorageV1CSIDriver"
															r.pathPattern = "/apis/storage.k8s.io/v1/watch/csidrivers/{name}"
															r.args = args
															r.count = 1
															return r, true
														default:
															return
														}
													}
												}
											case 'n': // Prefix: "nodes"
												if l := len("nodes"); len(elem) >= l && elem[0:l] == "nodes" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "GET":
														r.name = "WatchStorageV1CSINodeList"
														r.summary = ""
														r.operationID = "watchStorageV1CSINodeList"
														r.pathPattern = "/apis/storage.k8s.io/v1/watch/csinodes"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args[0] = elem
													elem = ""

													if len(elem) == 0 {
														switch method {
														case "GET":
															// Leaf: WatchStorageV1CSINode
															r.name = "WatchStorageV1CSINode"
															r.summary = ""
															r.operationID = "watchStorageV1CSINode"
															r.pathPattern = "/apis/storage.k8s.io/v1/watch/csinodes/{name}"
															r.args = args
															r.count = 1
															return r, true
														default:
															return
														}
													}
												}
											}
										case 's': // Prefix: "storageclasses"
											if l := len("storageclasses"); len(elem) >= l && elem[0:l] == "storageclasses" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "GET":
													r.name = "WatchStorageV1StorageClassList"
													r.summary = ""
													r.operationID = "watchStorageV1StorageClassList"
													r.pathPattern = "/apis/storage.k8s.io/v1/watch/storageclasses"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[0] = elem
												elem = ""

												if len(elem) == 0 {
													switch method {
													case "GET":
														// Leaf: WatchStorageV1StorageClass
														r.name = "WatchStorageV1StorageClass"
														r.summary = ""
														r.operationID = "watchStorageV1StorageClass"
														r.pathPattern = "/apis/storage.k8s.io/v1/watch/storageclasses/{name}"
														r.args = args
														r.count = 1
														return r, true
													default:
														return
													}
												}
											}
										case 'v': // Prefix: "volumeattachments"
											if l := len("volumeattachments"); len(elem) >= l && elem[0:l] == "volumeattachments" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "GET":
													r.name = "WatchStorageV1VolumeAttachmentList"
													r.summary = ""
													r.operationID = "watchStorageV1VolumeAttachmentList"
													r.pathPattern = "/apis/storage.k8s.io/v1/watch/volumeattachments"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[0] = elem
												elem = ""

												if len(elem) == 0 {
													switch method {
													case "GET":
														// Leaf: WatchStorageV1VolumeAttachment
														r.name = "WatchStorageV1VolumeAttachment"
														r.summary = ""
														r.operationID = "watchStorageV1VolumeAttachment"
														r.pathPattern = "/apis/storage.k8s.io/v1/watch/volumeattachments/{name}"
														r.args = args
														r.count = 1
														return r, true
													default:
														return
													}
												}
											}
										}
									}
								case 'a': // Prefix: "alpha1/"
									if l := len("alpha1/"); len(elem) >= l && elem[0:l] == "alpha1/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = "GetStorageV1alpha1APIResources"
											r.summary = ""
											r.operationID = "getStorageV1alpha1APIResources"
											r.pathPattern = "/apis/storage.k8s.io/v1alpha1/"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case 'c': // Prefix: "csistoragecapacities"
										if l := len("csistoragecapacities"); len(elem) >= l && elem[0:l] == "csistoragecapacities" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												// Leaf: ListStorageV1alpha1CSIStorageCapacityForAllNamespaces
												r.name = "ListStorageV1alpha1CSIStorageCapacityForAllNamespaces"
												r.summary = ""
												r.operationID = "listStorageV1alpha1CSIStorageCapacityForAllNamespaces"
												r.pathPattern = "/apis/storage.k8s.io/v1alpha1/csistoragecapacities"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
									case 'n': // Prefix: "namespaces/"
										if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "namespace"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/csistoragecapacities"
											if l := len("/csistoragecapacities"); len(elem) >= l && elem[0:l] == "/csistoragecapacities" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "GET":
													r.name = "ListStorageV1alpha1NamespacedCSIStorageCapacity"
													r.summary = ""
													r.operationID = "listStorageV1alpha1NamespacedCSIStorageCapacity"
													r.pathPattern = "/apis/storage.k8s.io/v1alpha1/namespaces/{namespace}/csistoragecapacities"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													switch method {
													case "GET":
														// Leaf: ReadStorageV1alpha1NamespacedCSIStorageCapacity
														r.name = "ReadStorageV1alpha1NamespacedCSIStorageCapacity"
														r.summary = ""
														r.operationID = "readStorageV1alpha1NamespacedCSIStorageCapacity"
														r.pathPattern = "/apis/storage.k8s.io/v1alpha1/namespaces/{namespace}/csistoragecapacities/{name}"
														r.args = args
														r.count = 2
														return r, true
													default:
														return
													}
												}
											}
										}
									case 'w': // Prefix: "watch/"
										if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'c': // Prefix: "csistoragecapacities"
											if l := len("csistoragecapacities"); len(elem) >= l && elem[0:l] == "csistoragecapacities" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "GET":
													// Leaf: WatchStorageV1alpha1CSIStorageCapacityListForAllNamespaces
													r.name = "WatchStorageV1alpha1CSIStorageCapacityListForAllNamespaces"
													r.summary = ""
													r.operationID = "watchStorageV1alpha1CSIStorageCapacityListForAllNamespaces"
													r.pathPattern = "/apis/storage.k8s.io/v1alpha1/watch/csistoragecapacities"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
										case 'n': // Prefix: "namespaces/"
											if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "namespace"
											// Match until "/"
											idx := strings.IndexByte(elem, '/')
											if idx < 0 {
												idx = len(elem)
											}
											args[0] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case '/': // Prefix: "/csistoragecapacities"
												if l := len("/csistoragecapacities"); len(elem) >= l && elem[0:l] == "/csistoragecapacities" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "GET":
														r.name = "WatchStorageV1alpha1NamespacedCSIStorageCapacityList"
														r.summary = ""
														r.operationID = "watchStorageV1alpha1NamespacedCSIStorageCapacityList"
														r.pathPattern = "/apis/storage.k8s.io/v1alpha1/watch/namespaces/{namespace}/csistoragecapacities"
														r.args = args
														r.count = 1
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args[1] = elem
													elem = ""

													if len(elem) == 0 {
														switch method {
														case "GET":
															// Leaf: WatchStorageV1alpha1NamespacedCSIStorageCapacity
															r.name = "WatchStorageV1alpha1NamespacedCSIStorageCapacity"
															r.summary = ""
															r.operationID = "watchStorageV1alpha1NamespacedCSIStorageCapacity"
															r.pathPattern = "/apis/storage.k8s.io/v1alpha1/watch/namespaces/{namespace}/csistoragecapacities/{name}"
															r.args = args
															r.count = 2
															return r, true
														default:
															return
														}
													}
												}
											}
										}
									}
								case 'b': // Prefix: "beta1/"
									if l := len("beta1/"); len(elem) >= l && elem[0:l] == "beta1/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = "GetStorageV1beta1APIResources"
											r.summary = ""
											r.operationID = "getStorageV1beta1APIResources"
											r.pathPattern = "/apis/storage.k8s.io/v1beta1/"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case 'c': // Prefix: "csistoragecapacities"
										if l := len("csistoragecapacities"); len(elem) >= l && elem[0:l] == "csistoragecapacities" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												// Leaf: ListStorageV1beta1CSIStorageCapacityForAllNamespaces
												r.name = "ListStorageV1beta1CSIStorageCapacityForAllNamespaces"
												r.summary = ""
												r.operationID = "listStorageV1beta1CSIStorageCapacityForAllNamespaces"
												r.pathPattern = "/apis/storage.k8s.io/v1beta1/csistoragecapacities"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
									case 'n': // Prefix: "namespaces/"
										if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "namespace"
										// Match until "/"
										idx := strings.IndexByte(elem, '/')
										if idx < 0 {
											idx = len(elem)
										}
										args[0] = elem[:idx]
										elem = elem[idx:]

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '/': // Prefix: "/csistoragecapacities"
											if l := len("/csistoragecapacities"); len(elem) >= l && elem[0:l] == "/csistoragecapacities" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "GET":
													r.name = "ListStorageV1beta1NamespacedCSIStorageCapacity"
													r.summary = ""
													r.operationID = "listStorageV1beta1NamespacedCSIStorageCapacity"
													r.pathPattern = "/apis/storage.k8s.io/v1beta1/namespaces/{namespace}/csistoragecapacities"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '/': // Prefix: "/"
												if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
													elem = elem[l:]
												} else {
													break
												}

												// Param: "name"
												// Leaf parameter
												args[1] = elem
												elem = ""

												if len(elem) == 0 {
													switch method {
													case "GET":
														// Leaf: ReadStorageV1beta1NamespacedCSIStorageCapacity
														r.name = "ReadStorageV1beta1NamespacedCSIStorageCapacity"
														r.summary = ""
														r.operationID = "readStorageV1beta1NamespacedCSIStorageCapacity"
														r.pathPattern = "/apis/storage.k8s.io/v1beta1/namespaces/{namespace}/csistoragecapacities/{name}"
														r.args = args
														r.count = 2
														return r, true
													default:
														return
													}
												}
											}
										}
									case 'w': // Prefix: "watch/"
										if l := len("watch/"); len(elem) >= l && elem[0:l] == "watch/" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'c': // Prefix: "csistoragecapacities"
											if l := len("csistoragecapacities"); len(elem) >= l && elem[0:l] == "csistoragecapacities" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "GET":
													// Leaf: WatchStorageV1beta1CSIStorageCapacityListForAllNamespaces
													r.name = "WatchStorageV1beta1CSIStorageCapacityListForAllNamespaces"
													r.summary = ""
													r.operationID = "watchStorageV1beta1CSIStorageCapacityListForAllNamespaces"
													r.pathPattern = "/apis/storage.k8s.io/v1beta1/watch/csistoragecapacities"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
										case 'n': // Prefix: "namespaces/"
											if l := len("namespaces/"); len(elem) >= l && elem[0:l] == "namespaces/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "namespace"
											// Match until "/"
											idx := strings.IndexByte(elem, '/')
											if idx < 0 {
												idx = len(elem)
											}
											args[0] = elem[:idx]
											elem = elem[idx:]

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case '/': // Prefix: "/csistoragecapacities"
												if l := len("/csistoragecapacities"); len(elem) >= l && elem[0:l] == "/csistoragecapacities" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "GET":
														r.name = "WatchStorageV1beta1NamespacedCSIStorageCapacityList"
														r.summary = ""
														r.operationID = "watchStorageV1beta1NamespacedCSIStorageCapacityList"
														r.pathPattern = "/apis/storage.k8s.io/v1beta1/watch/namespaces/{namespace}/csistoragecapacities"
														r.args = args
														r.count = 1
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '/': // Prefix: "/"
													if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
														elem = elem[l:]
													} else {
														break
													}

													// Param: "name"
													// Leaf parameter
													args[1] = elem
													elem = ""

													if len(elem) == 0 {
														switch method {
														case "GET":
															// Leaf: WatchStorageV1beta1NamespacedCSIStorageCapacity
															r.name = "WatchStorageV1beta1NamespacedCSIStorageCapacity"
															r.summary = ""
															r.operationID = "watchStorageV1beta1NamespacedCSIStorageCapacity"
															r.pathPattern = "/apis/storage.k8s.io/v1beta1/watch/namespaces/{namespace}/csistoragecapacities/{name}"
															r.args = args
															r.count = 2
															return r, true
														default:
															return
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			case 'l': // Prefix: "logs/"
				if l := len("logs/"); len(elem) >= l && elem[0:l] == "logs/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "logpath"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					switch method {
					case "GET":
						// Leaf: LogFileHandler
						r.name = "LogFileHandler"
						r.summary = ""
						r.operationID = "logFileHandler"
						r.pathPattern = "/logs/{logpath}"
						r.args = args
						r.count = 1
						return r, true
					default:
						return
					}
				}
			case 'o': // Prefix: "openid/v1/jwks/"
				if l := len("openid/v1/jwks/"); len(elem) >= l && elem[0:l] == "openid/v1/jwks/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						// Leaf: GetServiceAccountIssuerOpenIDKeyset
						r.name = "GetServiceAccountIssuerOpenIDKeyset"
						r.summary = ""
						r.operationID = "getServiceAccountIssuerOpenIDKeyset"
						r.pathPattern = "/openid/v1/jwks/"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
			case 'v': // Prefix: "version/"
				if l := len("version/"); len(elem) >= l && elem[0:l] == "version/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						// Leaf: GetCodeVersion
						r.name = "GetCodeVersion"
						r.summary = ""
						r.operationID = "getCodeVersion"
						r.pathPattern = "/version/"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
			}
		}
	}
	return r, false
}

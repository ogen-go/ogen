// Code generated by ogen, DO NOT EDIT.

package api

import (
	"io"
	"time"
)

type BearerToken struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *BearerToken) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *BearerToken) SetAPIKey(val string) {
	s.APIKey = val
}

type ConnectCoreV1DeleteNamespacedPodProxyOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ConnectCoreV1DeleteNamespacedPodProxyOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// ConnectCoreV1DeleteNamespacedPodProxyOKHeaders wraps ConnectCoreV1DeleteNamespacedPodProxyOK with response headers.
type ConnectCoreV1DeleteNamespacedPodProxyOKHeaders struct {
	ContentType string
	Response    ConnectCoreV1DeleteNamespacedPodProxyOK
}

// GetContentType returns the value of ContentType.
func (s *ConnectCoreV1DeleteNamespacedPodProxyOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetResponse returns the value of Response.
func (s *ConnectCoreV1DeleteNamespacedPodProxyOKHeaders) GetResponse() ConnectCoreV1DeleteNamespacedPodProxyOK {
	return s.Response
}

// SetContentType sets the value of ContentType.
func (s *ConnectCoreV1DeleteNamespacedPodProxyOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetResponse sets the value of Response.
func (s *ConnectCoreV1DeleteNamespacedPodProxyOKHeaders) SetResponse(val ConnectCoreV1DeleteNamespacedPodProxyOK) {
	s.Response = val
}

func (*ConnectCoreV1DeleteNamespacedPodProxyOKHeaders) connectCoreV1DeleteNamespacedPodProxyRes() {}

// ConnectCoreV1DeleteNamespacedPodProxyUnauthorized is response for ConnectCoreV1DeleteNamespacedPodProxy operation.
type ConnectCoreV1DeleteNamespacedPodProxyUnauthorized struct{}

func (*ConnectCoreV1DeleteNamespacedPodProxyUnauthorized) connectCoreV1DeleteNamespacedPodProxyRes() {
}

type ConnectCoreV1DeleteNamespacedPodProxyWithPathOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ConnectCoreV1DeleteNamespacedPodProxyWithPathOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// ConnectCoreV1DeleteNamespacedPodProxyWithPathOKHeaders wraps ConnectCoreV1DeleteNamespacedPodProxyWithPathOK with response headers.
type ConnectCoreV1DeleteNamespacedPodProxyWithPathOKHeaders struct {
	ContentType string
	Response    ConnectCoreV1DeleteNamespacedPodProxyWithPathOK
}

// GetContentType returns the value of ContentType.
func (s *ConnectCoreV1DeleteNamespacedPodProxyWithPathOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetResponse returns the value of Response.
func (s *ConnectCoreV1DeleteNamespacedPodProxyWithPathOKHeaders) GetResponse() ConnectCoreV1DeleteNamespacedPodProxyWithPathOK {
	return s.Response
}

// SetContentType sets the value of ContentType.
func (s *ConnectCoreV1DeleteNamespacedPodProxyWithPathOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetResponse sets the value of Response.
func (s *ConnectCoreV1DeleteNamespacedPodProxyWithPathOKHeaders) SetResponse(val ConnectCoreV1DeleteNamespacedPodProxyWithPathOK) {
	s.Response = val
}

func (*ConnectCoreV1DeleteNamespacedPodProxyWithPathOKHeaders) connectCoreV1DeleteNamespacedPodProxyWithPathRes() {
}

// ConnectCoreV1DeleteNamespacedPodProxyWithPathUnauthorized is response for ConnectCoreV1DeleteNamespacedPodProxyWithPath operation.
type ConnectCoreV1DeleteNamespacedPodProxyWithPathUnauthorized struct{}

func (*ConnectCoreV1DeleteNamespacedPodProxyWithPathUnauthorized) connectCoreV1DeleteNamespacedPodProxyWithPathRes() {
}

type ConnectCoreV1DeleteNamespacedServiceProxyOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ConnectCoreV1DeleteNamespacedServiceProxyOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// ConnectCoreV1DeleteNamespacedServiceProxyOKHeaders wraps ConnectCoreV1DeleteNamespacedServiceProxyOK with response headers.
type ConnectCoreV1DeleteNamespacedServiceProxyOKHeaders struct {
	ContentType string
	Response    ConnectCoreV1DeleteNamespacedServiceProxyOK
}

// GetContentType returns the value of ContentType.
func (s *ConnectCoreV1DeleteNamespacedServiceProxyOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetResponse returns the value of Response.
func (s *ConnectCoreV1DeleteNamespacedServiceProxyOKHeaders) GetResponse() ConnectCoreV1DeleteNamespacedServiceProxyOK {
	return s.Response
}

// SetContentType sets the value of ContentType.
func (s *ConnectCoreV1DeleteNamespacedServiceProxyOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetResponse sets the value of Response.
func (s *ConnectCoreV1DeleteNamespacedServiceProxyOKHeaders) SetResponse(val ConnectCoreV1DeleteNamespacedServiceProxyOK) {
	s.Response = val
}

func (*ConnectCoreV1DeleteNamespacedServiceProxyOKHeaders) connectCoreV1DeleteNamespacedServiceProxyRes() {
}

// ConnectCoreV1DeleteNamespacedServiceProxyUnauthorized is response for ConnectCoreV1DeleteNamespacedServiceProxy operation.
type ConnectCoreV1DeleteNamespacedServiceProxyUnauthorized struct{}

func (*ConnectCoreV1DeleteNamespacedServiceProxyUnauthorized) connectCoreV1DeleteNamespacedServiceProxyRes() {
}

type ConnectCoreV1DeleteNamespacedServiceProxyWithPathOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ConnectCoreV1DeleteNamespacedServiceProxyWithPathOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// ConnectCoreV1DeleteNamespacedServiceProxyWithPathOKHeaders wraps ConnectCoreV1DeleteNamespacedServiceProxyWithPathOK with response headers.
type ConnectCoreV1DeleteNamespacedServiceProxyWithPathOKHeaders struct {
	ContentType string
	Response    ConnectCoreV1DeleteNamespacedServiceProxyWithPathOK
}

// GetContentType returns the value of ContentType.
func (s *ConnectCoreV1DeleteNamespacedServiceProxyWithPathOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetResponse returns the value of Response.
func (s *ConnectCoreV1DeleteNamespacedServiceProxyWithPathOKHeaders) GetResponse() ConnectCoreV1DeleteNamespacedServiceProxyWithPathOK {
	return s.Response
}

// SetContentType sets the value of ContentType.
func (s *ConnectCoreV1DeleteNamespacedServiceProxyWithPathOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetResponse sets the value of Response.
func (s *ConnectCoreV1DeleteNamespacedServiceProxyWithPathOKHeaders) SetResponse(val ConnectCoreV1DeleteNamespacedServiceProxyWithPathOK) {
	s.Response = val
}

func (*ConnectCoreV1DeleteNamespacedServiceProxyWithPathOKHeaders) connectCoreV1DeleteNamespacedServiceProxyWithPathRes() {
}

// ConnectCoreV1DeleteNamespacedServiceProxyWithPathUnauthorized is response for ConnectCoreV1DeleteNamespacedServiceProxyWithPath operation.
type ConnectCoreV1DeleteNamespacedServiceProxyWithPathUnauthorized struct{}

func (*ConnectCoreV1DeleteNamespacedServiceProxyWithPathUnauthorized) connectCoreV1DeleteNamespacedServiceProxyWithPathRes() {
}

type ConnectCoreV1DeleteNodeProxyOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ConnectCoreV1DeleteNodeProxyOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// ConnectCoreV1DeleteNodeProxyOKHeaders wraps ConnectCoreV1DeleteNodeProxyOK with response headers.
type ConnectCoreV1DeleteNodeProxyOKHeaders struct {
	ContentType string
	Response    ConnectCoreV1DeleteNodeProxyOK
}

// GetContentType returns the value of ContentType.
func (s *ConnectCoreV1DeleteNodeProxyOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetResponse returns the value of Response.
func (s *ConnectCoreV1DeleteNodeProxyOKHeaders) GetResponse() ConnectCoreV1DeleteNodeProxyOK {
	return s.Response
}

// SetContentType sets the value of ContentType.
func (s *ConnectCoreV1DeleteNodeProxyOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetResponse sets the value of Response.
func (s *ConnectCoreV1DeleteNodeProxyOKHeaders) SetResponse(val ConnectCoreV1DeleteNodeProxyOK) {
	s.Response = val
}

func (*ConnectCoreV1DeleteNodeProxyOKHeaders) connectCoreV1DeleteNodeProxyRes() {}

// ConnectCoreV1DeleteNodeProxyUnauthorized is response for ConnectCoreV1DeleteNodeProxy operation.
type ConnectCoreV1DeleteNodeProxyUnauthorized struct{}

func (*ConnectCoreV1DeleteNodeProxyUnauthorized) connectCoreV1DeleteNodeProxyRes() {}

type ConnectCoreV1DeleteNodeProxyWithPathOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ConnectCoreV1DeleteNodeProxyWithPathOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// ConnectCoreV1DeleteNodeProxyWithPathOKHeaders wraps ConnectCoreV1DeleteNodeProxyWithPathOK with response headers.
type ConnectCoreV1DeleteNodeProxyWithPathOKHeaders struct {
	ContentType string
	Response    ConnectCoreV1DeleteNodeProxyWithPathOK
}

// GetContentType returns the value of ContentType.
func (s *ConnectCoreV1DeleteNodeProxyWithPathOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetResponse returns the value of Response.
func (s *ConnectCoreV1DeleteNodeProxyWithPathOKHeaders) GetResponse() ConnectCoreV1DeleteNodeProxyWithPathOK {
	return s.Response
}

// SetContentType sets the value of ContentType.
func (s *ConnectCoreV1DeleteNodeProxyWithPathOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetResponse sets the value of Response.
func (s *ConnectCoreV1DeleteNodeProxyWithPathOKHeaders) SetResponse(val ConnectCoreV1DeleteNodeProxyWithPathOK) {
	s.Response = val
}

func (*ConnectCoreV1DeleteNodeProxyWithPathOKHeaders) connectCoreV1DeleteNodeProxyWithPathRes() {}

// ConnectCoreV1DeleteNodeProxyWithPathUnauthorized is response for ConnectCoreV1DeleteNodeProxyWithPath operation.
type ConnectCoreV1DeleteNodeProxyWithPathUnauthorized struct{}

func (*ConnectCoreV1DeleteNodeProxyWithPathUnauthorized) connectCoreV1DeleteNodeProxyWithPathRes() {}

type ConnectCoreV1GetNamespacedPodAttachOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ConnectCoreV1GetNamespacedPodAttachOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// ConnectCoreV1GetNamespacedPodAttachOKHeaders wraps ConnectCoreV1GetNamespacedPodAttachOK with response headers.
type ConnectCoreV1GetNamespacedPodAttachOKHeaders struct {
	ContentType string
	Response    ConnectCoreV1GetNamespacedPodAttachOK
}

// GetContentType returns the value of ContentType.
func (s *ConnectCoreV1GetNamespacedPodAttachOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetResponse returns the value of Response.
func (s *ConnectCoreV1GetNamespacedPodAttachOKHeaders) GetResponse() ConnectCoreV1GetNamespacedPodAttachOK {
	return s.Response
}

// SetContentType sets the value of ContentType.
func (s *ConnectCoreV1GetNamespacedPodAttachOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetResponse sets the value of Response.
func (s *ConnectCoreV1GetNamespacedPodAttachOKHeaders) SetResponse(val ConnectCoreV1GetNamespacedPodAttachOK) {
	s.Response = val
}

func (*ConnectCoreV1GetNamespacedPodAttachOKHeaders) connectCoreV1GetNamespacedPodAttachRes() {}

// ConnectCoreV1GetNamespacedPodAttachUnauthorized is response for ConnectCoreV1GetNamespacedPodAttach operation.
type ConnectCoreV1GetNamespacedPodAttachUnauthorized struct{}

func (*ConnectCoreV1GetNamespacedPodAttachUnauthorized) connectCoreV1GetNamespacedPodAttachRes() {}

type ConnectCoreV1GetNamespacedPodExecOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ConnectCoreV1GetNamespacedPodExecOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// ConnectCoreV1GetNamespacedPodExecOKHeaders wraps ConnectCoreV1GetNamespacedPodExecOK with response headers.
type ConnectCoreV1GetNamespacedPodExecOKHeaders struct {
	ContentType string
	Response    ConnectCoreV1GetNamespacedPodExecOK
}

// GetContentType returns the value of ContentType.
func (s *ConnectCoreV1GetNamespacedPodExecOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetResponse returns the value of Response.
func (s *ConnectCoreV1GetNamespacedPodExecOKHeaders) GetResponse() ConnectCoreV1GetNamespacedPodExecOK {
	return s.Response
}

// SetContentType sets the value of ContentType.
func (s *ConnectCoreV1GetNamespacedPodExecOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetResponse sets the value of Response.
func (s *ConnectCoreV1GetNamespacedPodExecOKHeaders) SetResponse(val ConnectCoreV1GetNamespacedPodExecOK) {
	s.Response = val
}

func (*ConnectCoreV1GetNamespacedPodExecOKHeaders) connectCoreV1GetNamespacedPodExecRes() {}

// ConnectCoreV1GetNamespacedPodExecUnauthorized is response for ConnectCoreV1GetNamespacedPodExec operation.
type ConnectCoreV1GetNamespacedPodExecUnauthorized struct{}

func (*ConnectCoreV1GetNamespacedPodExecUnauthorized) connectCoreV1GetNamespacedPodExecRes() {}

type ConnectCoreV1GetNamespacedPodPortforwardOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ConnectCoreV1GetNamespacedPodPortforwardOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// ConnectCoreV1GetNamespacedPodPortforwardOKHeaders wraps ConnectCoreV1GetNamespacedPodPortforwardOK with response headers.
type ConnectCoreV1GetNamespacedPodPortforwardOKHeaders struct {
	ContentType string
	Response    ConnectCoreV1GetNamespacedPodPortforwardOK
}

// GetContentType returns the value of ContentType.
func (s *ConnectCoreV1GetNamespacedPodPortforwardOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetResponse returns the value of Response.
func (s *ConnectCoreV1GetNamespacedPodPortforwardOKHeaders) GetResponse() ConnectCoreV1GetNamespacedPodPortforwardOK {
	return s.Response
}

// SetContentType sets the value of ContentType.
func (s *ConnectCoreV1GetNamespacedPodPortforwardOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetResponse sets the value of Response.
func (s *ConnectCoreV1GetNamespacedPodPortforwardOKHeaders) SetResponse(val ConnectCoreV1GetNamespacedPodPortforwardOK) {
	s.Response = val
}

func (*ConnectCoreV1GetNamespacedPodPortforwardOKHeaders) connectCoreV1GetNamespacedPodPortforwardRes() {
}

// ConnectCoreV1GetNamespacedPodPortforwardUnauthorized is response for ConnectCoreV1GetNamespacedPodPortforward operation.
type ConnectCoreV1GetNamespacedPodPortforwardUnauthorized struct{}

func (*ConnectCoreV1GetNamespacedPodPortforwardUnauthorized) connectCoreV1GetNamespacedPodPortforwardRes() {
}

type ConnectCoreV1GetNamespacedPodProxyOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ConnectCoreV1GetNamespacedPodProxyOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// ConnectCoreV1GetNamespacedPodProxyOKHeaders wraps ConnectCoreV1GetNamespacedPodProxyOK with response headers.
type ConnectCoreV1GetNamespacedPodProxyOKHeaders struct {
	ContentType string
	Response    ConnectCoreV1GetNamespacedPodProxyOK
}

// GetContentType returns the value of ContentType.
func (s *ConnectCoreV1GetNamespacedPodProxyOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetResponse returns the value of Response.
func (s *ConnectCoreV1GetNamespacedPodProxyOKHeaders) GetResponse() ConnectCoreV1GetNamespacedPodProxyOK {
	return s.Response
}

// SetContentType sets the value of ContentType.
func (s *ConnectCoreV1GetNamespacedPodProxyOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetResponse sets the value of Response.
func (s *ConnectCoreV1GetNamespacedPodProxyOKHeaders) SetResponse(val ConnectCoreV1GetNamespacedPodProxyOK) {
	s.Response = val
}

func (*ConnectCoreV1GetNamespacedPodProxyOKHeaders) connectCoreV1GetNamespacedPodProxyRes() {}

// ConnectCoreV1GetNamespacedPodProxyUnauthorized is response for ConnectCoreV1GetNamespacedPodProxy operation.
type ConnectCoreV1GetNamespacedPodProxyUnauthorized struct{}

func (*ConnectCoreV1GetNamespacedPodProxyUnauthorized) connectCoreV1GetNamespacedPodProxyRes() {}

type ConnectCoreV1GetNamespacedPodProxyWithPathOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ConnectCoreV1GetNamespacedPodProxyWithPathOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// ConnectCoreV1GetNamespacedPodProxyWithPathOKHeaders wraps ConnectCoreV1GetNamespacedPodProxyWithPathOK with response headers.
type ConnectCoreV1GetNamespacedPodProxyWithPathOKHeaders struct {
	ContentType string
	Response    ConnectCoreV1GetNamespacedPodProxyWithPathOK
}

// GetContentType returns the value of ContentType.
func (s *ConnectCoreV1GetNamespacedPodProxyWithPathOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetResponse returns the value of Response.
func (s *ConnectCoreV1GetNamespacedPodProxyWithPathOKHeaders) GetResponse() ConnectCoreV1GetNamespacedPodProxyWithPathOK {
	return s.Response
}

// SetContentType sets the value of ContentType.
func (s *ConnectCoreV1GetNamespacedPodProxyWithPathOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetResponse sets the value of Response.
func (s *ConnectCoreV1GetNamespacedPodProxyWithPathOKHeaders) SetResponse(val ConnectCoreV1GetNamespacedPodProxyWithPathOK) {
	s.Response = val
}

func (*ConnectCoreV1GetNamespacedPodProxyWithPathOKHeaders) connectCoreV1GetNamespacedPodProxyWithPathRes() {
}

// ConnectCoreV1GetNamespacedPodProxyWithPathUnauthorized is response for ConnectCoreV1GetNamespacedPodProxyWithPath operation.
type ConnectCoreV1GetNamespacedPodProxyWithPathUnauthorized struct{}

func (*ConnectCoreV1GetNamespacedPodProxyWithPathUnauthorized) connectCoreV1GetNamespacedPodProxyWithPathRes() {
}

type ConnectCoreV1GetNamespacedServiceProxyOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ConnectCoreV1GetNamespacedServiceProxyOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// ConnectCoreV1GetNamespacedServiceProxyOKHeaders wraps ConnectCoreV1GetNamespacedServiceProxyOK with response headers.
type ConnectCoreV1GetNamespacedServiceProxyOKHeaders struct {
	ContentType string
	Response    ConnectCoreV1GetNamespacedServiceProxyOK
}

// GetContentType returns the value of ContentType.
func (s *ConnectCoreV1GetNamespacedServiceProxyOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetResponse returns the value of Response.
func (s *ConnectCoreV1GetNamespacedServiceProxyOKHeaders) GetResponse() ConnectCoreV1GetNamespacedServiceProxyOK {
	return s.Response
}

// SetContentType sets the value of ContentType.
func (s *ConnectCoreV1GetNamespacedServiceProxyOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetResponse sets the value of Response.
func (s *ConnectCoreV1GetNamespacedServiceProxyOKHeaders) SetResponse(val ConnectCoreV1GetNamespacedServiceProxyOK) {
	s.Response = val
}

func (*ConnectCoreV1GetNamespacedServiceProxyOKHeaders) connectCoreV1GetNamespacedServiceProxyRes() {}

// ConnectCoreV1GetNamespacedServiceProxyUnauthorized is response for ConnectCoreV1GetNamespacedServiceProxy operation.
type ConnectCoreV1GetNamespacedServiceProxyUnauthorized struct{}

func (*ConnectCoreV1GetNamespacedServiceProxyUnauthorized) connectCoreV1GetNamespacedServiceProxyRes() {
}

type ConnectCoreV1GetNamespacedServiceProxyWithPathOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ConnectCoreV1GetNamespacedServiceProxyWithPathOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// ConnectCoreV1GetNamespacedServiceProxyWithPathOKHeaders wraps ConnectCoreV1GetNamespacedServiceProxyWithPathOK with response headers.
type ConnectCoreV1GetNamespacedServiceProxyWithPathOKHeaders struct {
	ContentType string
	Response    ConnectCoreV1GetNamespacedServiceProxyWithPathOK
}

// GetContentType returns the value of ContentType.
func (s *ConnectCoreV1GetNamespacedServiceProxyWithPathOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetResponse returns the value of Response.
func (s *ConnectCoreV1GetNamespacedServiceProxyWithPathOKHeaders) GetResponse() ConnectCoreV1GetNamespacedServiceProxyWithPathOK {
	return s.Response
}

// SetContentType sets the value of ContentType.
func (s *ConnectCoreV1GetNamespacedServiceProxyWithPathOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetResponse sets the value of Response.
func (s *ConnectCoreV1GetNamespacedServiceProxyWithPathOKHeaders) SetResponse(val ConnectCoreV1GetNamespacedServiceProxyWithPathOK) {
	s.Response = val
}

func (*ConnectCoreV1GetNamespacedServiceProxyWithPathOKHeaders) connectCoreV1GetNamespacedServiceProxyWithPathRes() {
}

// ConnectCoreV1GetNamespacedServiceProxyWithPathUnauthorized is response for ConnectCoreV1GetNamespacedServiceProxyWithPath operation.
type ConnectCoreV1GetNamespacedServiceProxyWithPathUnauthorized struct{}

func (*ConnectCoreV1GetNamespacedServiceProxyWithPathUnauthorized) connectCoreV1GetNamespacedServiceProxyWithPathRes() {
}

type ConnectCoreV1GetNodeProxyOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ConnectCoreV1GetNodeProxyOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// ConnectCoreV1GetNodeProxyOKHeaders wraps ConnectCoreV1GetNodeProxyOK with response headers.
type ConnectCoreV1GetNodeProxyOKHeaders struct {
	ContentType string
	Response    ConnectCoreV1GetNodeProxyOK
}

// GetContentType returns the value of ContentType.
func (s *ConnectCoreV1GetNodeProxyOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetResponse returns the value of Response.
func (s *ConnectCoreV1GetNodeProxyOKHeaders) GetResponse() ConnectCoreV1GetNodeProxyOK {
	return s.Response
}

// SetContentType sets the value of ContentType.
func (s *ConnectCoreV1GetNodeProxyOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetResponse sets the value of Response.
func (s *ConnectCoreV1GetNodeProxyOKHeaders) SetResponse(val ConnectCoreV1GetNodeProxyOK) {
	s.Response = val
}

func (*ConnectCoreV1GetNodeProxyOKHeaders) connectCoreV1GetNodeProxyRes() {}

// ConnectCoreV1GetNodeProxyUnauthorized is response for ConnectCoreV1GetNodeProxy operation.
type ConnectCoreV1GetNodeProxyUnauthorized struct{}

func (*ConnectCoreV1GetNodeProxyUnauthorized) connectCoreV1GetNodeProxyRes() {}

type ConnectCoreV1GetNodeProxyWithPathOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ConnectCoreV1GetNodeProxyWithPathOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// ConnectCoreV1GetNodeProxyWithPathOKHeaders wraps ConnectCoreV1GetNodeProxyWithPathOK with response headers.
type ConnectCoreV1GetNodeProxyWithPathOKHeaders struct {
	ContentType string
	Response    ConnectCoreV1GetNodeProxyWithPathOK
}

// GetContentType returns the value of ContentType.
func (s *ConnectCoreV1GetNodeProxyWithPathOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetResponse returns the value of Response.
func (s *ConnectCoreV1GetNodeProxyWithPathOKHeaders) GetResponse() ConnectCoreV1GetNodeProxyWithPathOK {
	return s.Response
}

// SetContentType sets the value of ContentType.
func (s *ConnectCoreV1GetNodeProxyWithPathOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetResponse sets the value of Response.
func (s *ConnectCoreV1GetNodeProxyWithPathOKHeaders) SetResponse(val ConnectCoreV1GetNodeProxyWithPathOK) {
	s.Response = val
}

func (*ConnectCoreV1GetNodeProxyWithPathOKHeaders) connectCoreV1GetNodeProxyWithPathRes() {}

// ConnectCoreV1GetNodeProxyWithPathUnauthorized is response for ConnectCoreV1GetNodeProxyWithPath operation.
type ConnectCoreV1GetNodeProxyWithPathUnauthorized struct{}

func (*ConnectCoreV1GetNodeProxyWithPathUnauthorized) connectCoreV1GetNodeProxyWithPathRes() {}

type ConnectCoreV1HeadNamespacedPodProxyOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ConnectCoreV1HeadNamespacedPodProxyOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// ConnectCoreV1HeadNamespacedPodProxyOKHeaders wraps ConnectCoreV1HeadNamespacedPodProxyOK with response headers.
type ConnectCoreV1HeadNamespacedPodProxyOKHeaders struct {
	ContentType string
	Response    ConnectCoreV1HeadNamespacedPodProxyOK
}

// GetContentType returns the value of ContentType.
func (s *ConnectCoreV1HeadNamespacedPodProxyOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetResponse returns the value of Response.
func (s *ConnectCoreV1HeadNamespacedPodProxyOKHeaders) GetResponse() ConnectCoreV1HeadNamespacedPodProxyOK {
	return s.Response
}

// SetContentType sets the value of ContentType.
func (s *ConnectCoreV1HeadNamespacedPodProxyOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetResponse sets the value of Response.
func (s *ConnectCoreV1HeadNamespacedPodProxyOKHeaders) SetResponse(val ConnectCoreV1HeadNamespacedPodProxyOK) {
	s.Response = val
}

func (*ConnectCoreV1HeadNamespacedPodProxyOKHeaders) connectCoreV1HeadNamespacedPodProxyRes() {}

// ConnectCoreV1HeadNamespacedPodProxyUnauthorized is response for ConnectCoreV1HeadNamespacedPodProxy operation.
type ConnectCoreV1HeadNamespacedPodProxyUnauthorized struct{}

func (*ConnectCoreV1HeadNamespacedPodProxyUnauthorized) connectCoreV1HeadNamespacedPodProxyRes() {}

type ConnectCoreV1HeadNamespacedPodProxyWithPathOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ConnectCoreV1HeadNamespacedPodProxyWithPathOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// ConnectCoreV1HeadNamespacedPodProxyWithPathOKHeaders wraps ConnectCoreV1HeadNamespacedPodProxyWithPathOK with response headers.
type ConnectCoreV1HeadNamespacedPodProxyWithPathOKHeaders struct {
	ContentType string
	Response    ConnectCoreV1HeadNamespacedPodProxyWithPathOK
}

// GetContentType returns the value of ContentType.
func (s *ConnectCoreV1HeadNamespacedPodProxyWithPathOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetResponse returns the value of Response.
func (s *ConnectCoreV1HeadNamespacedPodProxyWithPathOKHeaders) GetResponse() ConnectCoreV1HeadNamespacedPodProxyWithPathOK {
	return s.Response
}

// SetContentType sets the value of ContentType.
func (s *ConnectCoreV1HeadNamespacedPodProxyWithPathOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetResponse sets the value of Response.
func (s *ConnectCoreV1HeadNamespacedPodProxyWithPathOKHeaders) SetResponse(val ConnectCoreV1HeadNamespacedPodProxyWithPathOK) {
	s.Response = val
}

func (*ConnectCoreV1HeadNamespacedPodProxyWithPathOKHeaders) connectCoreV1HeadNamespacedPodProxyWithPathRes() {
}

// ConnectCoreV1HeadNamespacedPodProxyWithPathUnauthorized is response for ConnectCoreV1HeadNamespacedPodProxyWithPath operation.
type ConnectCoreV1HeadNamespacedPodProxyWithPathUnauthorized struct{}

func (*ConnectCoreV1HeadNamespacedPodProxyWithPathUnauthorized) connectCoreV1HeadNamespacedPodProxyWithPathRes() {
}

type ConnectCoreV1HeadNamespacedServiceProxyOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ConnectCoreV1HeadNamespacedServiceProxyOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// ConnectCoreV1HeadNamespacedServiceProxyOKHeaders wraps ConnectCoreV1HeadNamespacedServiceProxyOK with response headers.
type ConnectCoreV1HeadNamespacedServiceProxyOKHeaders struct {
	ContentType string
	Response    ConnectCoreV1HeadNamespacedServiceProxyOK
}

// GetContentType returns the value of ContentType.
func (s *ConnectCoreV1HeadNamespacedServiceProxyOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetResponse returns the value of Response.
func (s *ConnectCoreV1HeadNamespacedServiceProxyOKHeaders) GetResponse() ConnectCoreV1HeadNamespacedServiceProxyOK {
	return s.Response
}

// SetContentType sets the value of ContentType.
func (s *ConnectCoreV1HeadNamespacedServiceProxyOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetResponse sets the value of Response.
func (s *ConnectCoreV1HeadNamespacedServiceProxyOKHeaders) SetResponse(val ConnectCoreV1HeadNamespacedServiceProxyOK) {
	s.Response = val
}

func (*ConnectCoreV1HeadNamespacedServiceProxyOKHeaders) connectCoreV1HeadNamespacedServiceProxyRes() {
}

// ConnectCoreV1HeadNamespacedServiceProxyUnauthorized is response for ConnectCoreV1HeadNamespacedServiceProxy operation.
type ConnectCoreV1HeadNamespacedServiceProxyUnauthorized struct{}

func (*ConnectCoreV1HeadNamespacedServiceProxyUnauthorized) connectCoreV1HeadNamespacedServiceProxyRes() {
}

type ConnectCoreV1HeadNamespacedServiceProxyWithPathOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ConnectCoreV1HeadNamespacedServiceProxyWithPathOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// ConnectCoreV1HeadNamespacedServiceProxyWithPathOKHeaders wraps ConnectCoreV1HeadNamespacedServiceProxyWithPathOK with response headers.
type ConnectCoreV1HeadNamespacedServiceProxyWithPathOKHeaders struct {
	ContentType string
	Response    ConnectCoreV1HeadNamespacedServiceProxyWithPathOK
}

// GetContentType returns the value of ContentType.
func (s *ConnectCoreV1HeadNamespacedServiceProxyWithPathOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetResponse returns the value of Response.
func (s *ConnectCoreV1HeadNamespacedServiceProxyWithPathOKHeaders) GetResponse() ConnectCoreV1HeadNamespacedServiceProxyWithPathOK {
	return s.Response
}

// SetContentType sets the value of ContentType.
func (s *ConnectCoreV1HeadNamespacedServiceProxyWithPathOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetResponse sets the value of Response.
func (s *ConnectCoreV1HeadNamespacedServiceProxyWithPathOKHeaders) SetResponse(val ConnectCoreV1HeadNamespacedServiceProxyWithPathOK) {
	s.Response = val
}

func (*ConnectCoreV1HeadNamespacedServiceProxyWithPathOKHeaders) connectCoreV1HeadNamespacedServiceProxyWithPathRes() {
}

// ConnectCoreV1HeadNamespacedServiceProxyWithPathUnauthorized is response for ConnectCoreV1HeadNamespacedServiceProxyWithPath operation.
type ConnectCoreV1HeadNamespacedServiceProxyWithPathUnauthorized struct{}

func (*ConnectCoreV1HeadNamespacedServiceProxyWithPathUnauthorized) connectCoreV1HeadNamespacedServiceProxyWithPathRes() {
}

type ConnectCoreV1HeadNodeProxyOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ConnectCoreV1HeadNodeProxyOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// ConnectCoreV1HeadNodeProxyOKHeaders wraps ConnectCoreV1HeadNodeProxyOK with response headers.
type ConnectCoreV1HeadNodeProxyOKHeaders struct {
	ContentType string
	Response    ConnectCoreV1HeadNodeProxyOK
}

// GetContentType returns the value of ContentType.
func (s *ConnectCoreV1HeadNodeProxyOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetResponse returns the value of Response.
func (s *ConnectCoreV1HeadNodeProxyOKHeaders) GetResponse() ConnectCoreV1HeadNodeProxyOK {
	return s.Response
}

// SetContentType sets the value of ContentType.
func (s *ConnectCoreV1HeadNodeProxyOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetResponse sets the value of Response.
func (s *ConnectCoreV1HeadNodeProxyOKHeaders) SetResponse(val ConnectCoreV1HeadNodeProxyOK) {
	s.Response = val
}

func (*ConnectCoreV1HeadNodeProxyOKHeaders) connectCoreV1HeadNodeProxyRes() {}

// ConnectCoreV1HeadNodeProxyUnauthorized is response for ConnectCoreV1HeadNodeProxy operation.
type ConnectCoreV1HeadNodeProxyUnauthorized struct{}

func (*ConnectCoreV1HeadNodeProxyUnauthorized) connectCoreV1HeadNodeProxyRes() {}

type ConnectCoreV1HeadNodeProxyWithPathOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ConnectCoreV1HeadNodeProxyWithPathOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// ConnectCoreV1HeadNodeProxyWithPathOKHeaders wraps ConnectCoreV1HeadNodeProxyWithPathOK with response headers.
type ConnectCoreV1HeadNodeProxyWithPathOKHeaders struct {
	ContentType string
	Response    ConnectCoreV1HeadNodeProxyWithPathOK
}

// GetContentType returns the value of ContentType.
func (s *ConnectCoreV1HeadNodeProxyWithPathOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetResponse returns the value of Response.
func (s *ConnectCoreV1HeadNodeProxyWithPathOKHeaders) GetResponse() ConnectCoreV1HeadNodeProxyWithPathOK {
	return s.Response
}

// SetContentType sets the value of ContentType.
func (s *ConnectCoreV1HeadNodeProxyWithPathOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetResponse sets the value of Response.
func (s *ConnectCoreV1HeadNodeProxyWithPathOKHeaders) SetResponse(val ConnectCoreV1HeadNodeProxyWithPathOK) {
	s.Response = val
}

func (*ConnectCoreV1HeadNodeProxyWithPathOKHeaders) connectCoreV1HeadNodeProxyWithPathRes() {}

// ConnectCoreV1HeadNodeProxyWithPathUnauthorized is response for ConnectCoreV1HeadNodeProxyWithPath operation.
type ConnectCoreV1HeadNodeProxyWithPathUnauthorized struct{}

func (*ConnectCoreV1HeadNodeProxyWithPathUnauthorized) connectCoreV1HeadNodeProxyWithPathRes() {}

type ConnectCoreV1OptionsNamespacedPodProxyOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ConnectCoreV1OptionsNamespacedPodProxyOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// ConnectCoreV1OptionsNamespacedPodProxyOKHeaders wraps ConnectCoreV1OptionsNamespacedPodProxyOK with response headers.
type ConnectCoreV1OptionsNamespacedPodProxyOKHeaders struct {
	ContentType string
	Response    ConnectCoreV1OptionsNamespacedPodProxyOK
}

// GetContentType returns the value of ContentType.
func (s *ConnectCoreV1OptionsNamespacedPodProxyOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetResponse returns the value of Response.
func (s *ConnectCoreV1OptionsNamespacedPodProxyOKHeaders) GetResponse() ConnectCoreV1OptionsNamespacedPodProxyOK {
	return s.Response
}

// SetContentType sets the value of ContentType.
func (s *ConnectCoreV1OptionsNamespacedPodProxyOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetResponse sets the value of Response.
func (s *ConnectCoreV1OptionsNamespacedPodProxyOKHeaders) SetResponse(val ConnectCoreV1OptionsNamespacedPodProxyOK) {
	s.Response = val
}

func (*ConnectCoreV1OptionsNamespacedPodProxyOKHeaders) connectCoreV1OptionsNamespacedPodProxyRes() {}

// ConnectCoreV1OptionsNamespacedPodProxyUnauthorized is response for ConnectCoreV1OptionsNamespacedPodProxy operation.
type ConnectCoreV1OptionsNamespacedPodProxyUnauthorized struct{}

func (*ConnectCoreV1OptionsNamespacedPodProxyUnauthorized) connectCoreV1OptionsNamespacedPodProxyRes() {
}

type ConnectCoreV1OptionsNamespacedPodProxyWithPathOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ConnectCoreV1OptionsNamespacedPodProxyWithPathOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// ConnectCoreV1OptionsNamespacedPodProxyWithPathOKHeaders wraps ConnectCoreV1OptionsNamespacedPodProxyWithPathOK with response headers.
type ConnectCoreV1OptionsNamespacedPodProxyWithPathOKHeaders struct {
	ContentType string
	Response    ConnectCoreV1OptionsNamespacedPodProxyWithPathOK
}

// GetContentType returns the value of ContentType.
func (s *ConnectCoreV1OptionsNamespacedPodProxyWithPathOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetResponse returns the value of Response.
func (s *ConnectCoreV1OptionsNamespacedPodProxyWithPathOKHeaders) GetResponse() ConnectCoreV1OptionsNamespacedPodProxyWithPathOK {
	return s.Response
}

// SetContentType sets the value of ContentType.
func (s *ConnectCoreV1OptionsNamespacedPodProxyWithPathOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetResponse sets the value of Response.
func (s *ConnectCoreV1OptionsNamespacedPodProxyWithPathOKHeaders) SetResponse(val ConnectCoreV1OptionsNamespacedPodProxyWithPathOK) {
	s.Response = val
}

func (*ConnectCoreV1OptionsNamespacedPodProxyWithPathOKHeaders) connectCoreV1OptionsNamespacedPodProxyWithPathRes() {
}

// ConnectCoreV1OptionsNamespacedPodProxyWithPathUnauthorized is response for ConnectCoreV1OptionsNamespacedPodProxyWithPath operation.
type ConnectCoreV1OptionsNamespacedPodProxyWithPathUnauthorized struct{}

func (*ConnectCoreV1OptionsNamespacedPodProxyWithPathUnauthorized) connectCoreV1OptionsNamespacedPodProxyWithPathRes() {
}

type ConnectCoreV1OptionsNamespacedServiceProxyOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ConnectCoreV1OptionsNamespacedServiceProxyOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// ConnectCoreV1OptionsNamespacedServiceProxyOKHeaders wraps ConnectCoreV1OptionsNamespacedServiceProxyOK with response headers.
type ConnectCoreV1OptionsNamespacedServiceProxyOKHeaders struct {
	ContentType string
	Response    ConnectCoreV1OptionsNamespacedServiceProxyOK
}

// GetContentType returns the value of ContentType.
func (s *ConnectCoreV1OptionsNamespacedServiceProxyOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetResponse returns the value of Response.
func (s *ConnectCoreV1OptionsNamespacedServiceProxyOKHeaders) GetResponse() ConnectCoreV1OptionsNamespacedServiceProxyOK {
	return s.Response
}

// SetContentType sets the value of ContentType.
func (s *ConnectCoreV1OptionsNamespacedServiceProxyOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetResponse sets the value of Response.
func (s *ConnectCoreV1OptionsNamespacedServiceProxyOKHeaders) SetResponse(val ConnectCoreV1OptionsNamespacedServiceProxyOK) {
	s.Response = val
}

func (*ConnectCoreV1OptionsNamespacedServiceProxyOKHeaders) connectCoreV1OptionsNamespacedServiceProxyRes() {
}

// ConnectCoreV1OptionsNamespacedServiceProxyUnauthorized is response for ConnectCoreV1OptionsNamespacedServiceProxy operation.
type ConnectCoreV1OptionsNamespacedServiceProxyUnauthorized struct{}

func (*ConnectCoreV1OptionsNamespacedServiceProxyUnauthorized) connectCoreV1OptionsNamespacedServiceProxyRes() {
}

type ConnectCoreV1OptionsNamespacedServiceProxyWithPathOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ConnectCoreV1OptionsNamespacedServiceProxyWithPathOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// ConnectCoreV1OptionsNamespacedServiceProxyWithPathOKHeaders wraps ConnectCoreV1OptionsNamespacedServiceProxyWithPathOK with response headers.
type ConnectCoreV1OptionsNamespacedServiceProxyWithPathOKHeaders struct {
	ContentType string
	Response    ConnectCoreV1OptionsNamespacedServiceProxyWithPathOK
}

// GetContentType returns the value of ContentType.
func (s *ConnectCoreV1OptionsNamespacedServiceProxyWithPathOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetResponse returns the value of Response.
func (s *ConnectCoreV1OptionsNamespacedServiceProxyWithPathOKHeaders) GetResponse() ConnectCoreV1OptionsNamespacedServiceProxyWithPathOK {
	return s.Response
}

// SetContentType sets the value of ContentType.
func (s *ConnectCoreV1OptionsNamespacedServiceProxyWithPathOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetResponse sets the value of Response.
func (s *ConnectCoreV1OptionsNamespacedServiceProxyWithPathOKHeaders) SetResponse(val ConnectCoreV1OptionsNamespacedServiceProxyWithPathOK) {
	s.Response = val
}

func (*ConnectCoreV1OptionsNamespacedServiceProxyWithPathOKHeaders) connectCoreV1OptionsNamespacedServiceProxyWithPathRes() {
}

// ConnectCoreV1OptionsNamespacedServiceProxyWithPathUnauthorized is response for ConnectCoreV1OptionsNamespacedServiceProxyWithPath operation.
type ConnectCoreV1OptionsNamespacedServiceProxyWithPathUnauthorized struct{}

func (*ConnectCoreV1OptionsNamespacedServiceProxyWithPathUnauthorized) connectCoreV1OptionsNamespacedServiceProxyWithPathRes() {
}

type ConnectCoreV1OptionsNodeProxyOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ConnectCoreV1OptionsNodeProxyOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// ConnectCoreV1OptionsNodeProxyOKHeaders wraps ConnectCoreV1OptionsNodeProxyOK with response headers.
type ConnectCoreV1OptionsNodeProxyOKHeaders struct {
	ContentType string
	Response    ConnectCoreV1OptionsNodeProxyOK
}

// GetContentType returns the value of ContentType.
func (s *ConnectCoreV1OptionsNodeProxyOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetResponse returns the value of Response.
func (s *ConnectCoreV1OptionsNodeProxyOKHeaders) GetResponse() ConnectCoreV1OptionsNodeProxyOK {
	return s.Response
}

// SetContentType sets the value of ContentType.
func (s *ConnectCoreV1OptionsNodeProxyOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetResponse sets the value of Response.
func (s *ConnectCoreV1OptionsNodeProxyOKHeaders) SetResponse(val ConnectCoreV1OptionsNodeProxyOK) {
	s.Response = val
}

func (*ConnectCoreV1OptionsNodeProxyOKHeaders) connectCoreV1OptionsNodeProxyRes() {}

// ConnectCoreV1OptionsNodeProxyUnauthorized is response for ConnectCoreV1OptionsNodeProxy operation.
type ConnectCoreV1OptionsNodeProxyUnauthorized struct{}

func (*ConnectCoreV1OptionsNodeProxyUnauthorized) connectCoreV1OptionsNodeProxyRes() {}

type ConnectCoreV1OptionsNodeProxyWithPathOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ConnectCoreV1OptionsNodeProxyWithPathOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// ConnectCoreV1OptionsNodeProxyWithPathOKHeaders wraps ConnectCoreV1OptionsNodeProxyWithPathOK with response headers.
type ConnectCoreV1OptionsNodeProxyWithPathOKHeaders struct {
	ContentType string
	Response    ConnectCoreV1OptionsNodeProxyWithPathOK
}

// GetContentType returns the value of ContentType.
func (s *ConnectCoreV1OptionsNodeProxyWithPathOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetResponse returns the value of Response.
func (s *ConnectCoreV1OptionsNodeProxyWithPathOKHeaders) GetResponse() ConnectCoreV1OptionsNodeProxyWithPathOK {
	return s.Response
}

// SetContentType sets the value of ContentType.
func (s *ConnectCoreV1OptionsNodeProxyWithPathOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetResponse sets the value of Response.
func (s *ConnectCoreV1OptionsNodeProxyWithPathOKHeaders) SetResponse(val ConnectCoreV1OptionsNodeProxyWithPathOK) {
	s.Response = val
}

func (*ConnectCoreV1OptionsNodeProxyWithPathOKHeaders) connectCoreV1OptionsNodeProxyWithPathRes() {}

// ConnectCoreV1OptionsNodeProxyWithPathUnauthorized is response for ConnectCoreV1OptionsNodeProxyWithPath operation.
type ConnectCoreV1OptionsNodeProxyWithPathUnauthorized struct{}

func (*ConnectCoreV1OptionsNodeProxyWithPathUnauthorized) connectCoreV1OptionsNodeProxyWithPathRes() {
}

type ConnectCoreV1PatchNamespacedPodProxyOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ConnectCoreV1PatchNamespacedPodProxyOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// ConnectCoreV1PatchNamespacedPodProxyOKHeaders wraps ConnectCoreV1PatchNamespacedPodProxyOK with response headers.
type ConnectCoreV1PatchNamespacedPodProxyOKHeaders struct {
	ContentType string
	Response    ConnectCoreV1PatchNamespacedPodProxyOK
}

// GetContentType returns the value of ContentType.
func (s *ConnectCoreV1PatchNamespacedPodProxyOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetResponse returns the value of Response.
func (s *ConnectCoreV1PatchNamespacedPodProxyOKHeaders) GetResponse() ConnectCoreV1PatchNamespacedPodProxyOK {
	return s.Response
}

// SetContentType sets the value of ContentType.
func (s *ConnectCoreV1PatchNamespacedPodProxyOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetResponse sets the value of Response.
func (s *ConnectCoreV1PatchNamespacedPodProxyOKHeaders) SetResponse(val ConnectCoreV1PatchNamespacedPodProxyOK) {
	s.Response = val
}

func (*ConnectCoreV1PatchNamespacedPodProxyOKHeaders) connectCoreV1PatchNamespacedPodProxyRes() {}

// ConnectCoreV1PatchNamespacedPodProxyUnauthorized is response for ConnectCoreV1PatchNamespacedPodProxy operation.
type ConnectCoreV1PatchNamespacedPodProxyUnauthorized struct{}

func (*ConnectCoreV1PatchNamespacedPodProxyUnauthorized) connectCoreV1PatchNamespacedPodProxyRes() {}

type ConnectCoreV1PatchNamespacedPodProxyWithPathOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ConnectCoreV1PatchNamespacedPodProxyWithPathOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// ConnectCoreV1PatchNamespacedPodProxyWithPathOKHeaders wraps ConnectCoreV1PatchNamespacedPodProxyWithPathOK with response headers.
type ConnectCoreV1PatchNamespacedPodProxyWithPathOKHeaders struct {
	ContentType string
	Response    ConnectCoreV1PatchNamespacedPodProxyWithPathOK
}

// GetContentType returns the value of ContentType.
func (s *ConnectCoreV1PatchNamespacedPodProxyWithPathOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetResponse returns the value of Response.
func (s *ConnectCoreV1PatchNamespacedPodProxyWithPathOKHeaders) GetResponse() ConnectCoreV1PatchNamespacedPodProxyWithPathOK {
	return s.Response
}

// SetContentType sets the value of ContentType.
func (s *ConnectCoreV1PatchNamespacedPodProxyWithPathOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetResponse sets the value of Response.
func (s *ConnectCoreV1PatchNamespacedPodProxyWithPathOKHeaders) SetResponse(val ConnectCoreV1PatchNamespacedPodProxyWithPathOK) {
	s.Response = val
}

func (*ConnectCoreV1PatchNamespacedPodProxyWithPathOKHeaders) connectCoreV1PatchNamespacedPodProxyWithPathRes() {
}

// ConnectCoreV1PatchNamespacedPodProxyWithPathUnauthorized is response for ConnectCoreV1PatchNamespacedPodProxyWithPath operation.
type ConnectCoreV1PatchNamespacedPodProxyWithPathUnauthorized struct{}

func (*ConnectCoreV1PatchNamespacedPodProxyWithPathUnauthorized) connectCoreV1PatchNamespacedPodProxyWithPathRes() {
}

type ConnectCoreV1PatchNamespacedServiceProxyOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ConnectCoreV1PatchNamespacedServiceProxyOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// ConnectCoreV1PatchNamespacedServiceProxyOKHeaders wraps ConnectCoreV1PatchNamespacedServiceProxyOK with response headers.
type ConnectCoreV1PatchNamespacedServiceProxyOKHeaders struct {
	ContentType string
	Response    ConnectCoreV1PatchNamespacedServiceProxyOK
}

// GetContentType returns the value of ContentType.
func (s *ConnectCoreV1PatchNamespacedServiceProxyOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetResponse returns the value of Response.
func (s *ConnectCoreV1PatchNamespacedServiceProxyOKHeaders) GetResponse() ConnectCoreV1PatchNamespacedServiceProxyOK {
	return s.Response
}

// SetContentType sets the value of ContentType.
func (s *ConnectCoreV1PatchNamespacedServiceProxyOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetResponse sets the value of Response.
func (s *ConnectCoreV1PatchNamespacedServiceProxyOKHeaders) SetResponse(val ConnectCoreV1PatchNamespacedServiceProxyOK) {
	s.Response = val
}

func (*ConnectCoreV1PatchNamespacedServiceProxyOKHeaders) connectCoreV1PatchNamespacedServiceProxyRes() {
}

// ConnectCoreV1PatchNamespacedServiceProxyUnauthorized is response for ConnectCoreV1PatchNamespacedServiceProxy operation.
type ConnectCoreV1PatchNamespacedServiceProxyUnauthorized struct{}

func (*ConnectCoreV1PatchNamespacedServiceProxyUnauthorized) connectCoreV1PatchNamespacedServiceProxyRes() {
}

type ConnectCoreV1PatchNamespacedServiceProxyWithPathOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ConnectCoreV1PatchNamespacedServiceProxyWithPathOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// ConnectCoreV1PatchNamespacedServiceProxyWithPathOKHeaders wraps ConnectCoreV1PatchNamespacedServiceProxyWithPathOK with response headers.
type ConnectCoreV1PatchNamespacedServiceProxyWithPathOKHeaders struct {
	ContentType string
	Response    ConnectCoreV1PatchNamespacedServiceProxyWithPathOK
}

// GetContentType returns the value of ContentType.
func (s *ConnectCoreV1PatchNamespacedServiceProxyWithPathOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetResponse returns the value of Response.
func (s *ConnectCoreV1PatchNamespacedServiceProxyWithPathOKHeaders) GetResponse() ConnectCoreV1PatchNamespacedServiceProxyWithPathOK {
	return s.Response
}

// SetContentType sets the value of ContentType.
func (s *ConnectCoreV1PatchNamespacedServiceProxyWithPathOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetResponse sets the value of Response.
func (s *ConnectCoreV1PatchNamespacedServiceProxyWithPathOKHeaders) SetResponse(val ConnectCoreV1PatchNamespacedServiceProxyWithPathOK) {
	s.Response = val
}

func (*ConnectCoreV1PatchNamespacedServiceProxyWithPathOKHeaders) connectCoreV1PatchNamespacedServiceProxyWithPathRes() {
}

// ConnectCoreV1PatchNamespacedServiceProxyWithPathUnauthorized is response for ConnectCoreV1PatchNamespacedServiceProxyWithPath operation.
type ConnectCoreV1PatchNamespacedServiceProxyWithPathUnauthorized struct{}

func (*ConnectCoreV1PatchNamespacedServiceProxyWithPathUnauthorized) connectCoreV1PatchNamespacedServiceProxyWithPathRes() {
}

type ConnectCoreV1PatchNodeProxyOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ConnectCoreV1PatchNodeProxyOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// ConnectCoreV1PatchNodeProxyOKHeaders wraps ConnectCoreV1PatchNodeProxyOK with response headers.
type ConnectCoreV1PatchNodeProxyOKHeaders struct {
	ContentType string
	Response    ConnectCoreV1PatchNodeProxyOK
}

// GetContentType returns the value of ContentType.
func (s *ConnectCoreV1PatchNodeProxyOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetResponse returns the value of Response.
func (s *ConnectCoreV1PatchNodeProxyOKHeaders) GetResponse() ConnectCoreV1PatchNodeProxyOK {
	return s.Response
}

// SetContentType sets the value of ContentType.
func (s *ConnectCoreV1PatchNodeProxyOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetResponse sets the value of Response.
func (s *ConnectCoreV1PatchNodeProxyOKHeaders) SetResponse(val ConnectCoreV1PatchNodeProxyOK) {
	s.Response = val
}

func (*ConnectCoreV1PatchNodeProxyOKHeaders) connectCoreV1PatchNodeProxyRes() {}

// ConnectCoreV1PatchNodeProxyUnauthorized is response for ConnectCoreV1PatchNodeProxy operation.
type ConnectCoreV1PatchNodeProxyUnauthorized struct{}

func (*ConnectCoreV1PatchNodeProxyUnauthorized) connectCoreV1PatchNodeProxyRes() {}

type ConnectCoreV1PatchNodeProxyWithPathOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ConnectCoreV1PatchNodeProxyWithPathOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// ConnectCoreV1PatchNodeProxyWithPathOKHeaders wraps ConnectCoreV1PatchNodeProxyWithPathOK with response headers.
type ConnectCoreV1PatchNodeProxyWithPathOKHeaders struct {
	ContentType string
	Response    ConnectCoreV1PatchNodeProxyWithPathOK
}

// GetContentType returns the value of ContentType.
func (s *ConnectCoreV1PatchNodeProxyWithPathOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetResponse returns the value of Response.
func (s *ConnectCoreV1PatchNodeProxyWithPathOKHeaders) GetResponse() ConnectCoreV1PatchNodeProxyWithPathOK {
	return s.Response
}

// SetContentType sets the value of ContentType.
func (s *ConnectCoreV1PatchNodeProxyWithPathOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetResponse sets the value of Response.
func (s *ConnectCoreV1PatchNodeProxyWithPathOKHeaders) SetResponse(val ConnectCoreV1PatchNodeProxyWithPathOK) {
	s.Response = val
}

func (*ConnectCoreV1PatchNodeProxyWithPathOKHeaders) connectCoreV1PatchNodeProxyWithPathRes() {}

// ConnectCoreV1PatchNodeProxyWithPathUnauthorized is response for ConnectCoreV1PatchNodeProxyWithPath operation.
type ConnectCoreV1PatchNodeProxyWithPathUnauthorized struct{}

func (*ConnectCoreV1PatchNodeProxyWithPathUnauthorized) connectCoreV1PatchNodeProxyWithPathRes() {}

type ConnectCoreV1PostNamespacedPodAttachOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ConnectCoreV1PostNamespacedPodAttachOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// ConnectCoreV1PostNamespacedPodAttachOKHeaders wraps ConnectCoreV1PostNamespacedPodAttachOK with response headers.
type ConnectCoreV1PostNamespacedPodAttachOKHeaders struct {
	ContentType string
	Response    ConnectCoreV1PostNamespacedPodAttachOK
}

// GetContentType returns the value of ContentType.
func (s *ConnectCoreV1PostNamespacedPodAttachOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetResponse returns the value of Response.
func (s *ConnectCoreV1PostNamespacedPodAttachOKHeaders) GetResponse() ConnectCoreV1PostNamespacedPodAttachOK {
	return s.Response
}

// SetContentType sets the value of ContentType.
func (s *ConnectCoreV1PostNamespacedPodAttachOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetResponse sets the value of Response.
func (s *ConnectCoreV1PostNamespacedPodAttachOKHeaders) SetResponse(val ConnectCoreV1PostNamespacedPodAttachOK) {
	s.Response = val
}

func (*ConnectCoreV1PostNamespacedPodAttachOKHeaders) connectCoreV1PostNamespacedPodAttachRes() {}

// ConnectCoreV1PostNamespacedPodAttachUnauthorized is response for ConnectCoreV1PostNamespacedPodAttach operation.
type ConnectCoreV1PostNamespacedPodAttachUnauthorized struct{}

func (*ConnectCoreV1PostNamespacedPodAttachUnauthorized) connectCoreV1PostNamespacedPodAttachRes() {}

type ConnectCoreV1PostNamespacedPodExecOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ConnectCoreV1PostNamespacedPodExecOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// ConnectCoreV1PostNamespacedPodExecOKHeaders wraps ConnectCoreV1PostNamespacedPodExecOK with response headers.
type ConnectCoreV1PostNamespacedPodExecOKHeaders struct {
	ContentType string
	Response    ConnectCoreV1PostNamespacedPodExecOK
}

// GetContentType returns the value of ContentType.
func (s *ConnectCoreV1PostNamespacedPodExecOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetResponse returns the value of Response.
func (s *ConnectCoreV1PostNamespacedPodExecOKHeaders) GetResponse() ConnectCoreV1PostNamespacedPodExecOK {
	return s.Response
}

// SetContentType sets the value of ContentType.
func (s *ConnectCoreV1PostNamespacedPodExecOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetResponse sets the value of Response.
func (s *ConnectCoreV1PostNamespacedPodExecOKHeaders) SetResponse(val ConnectCoreV1PostNamespacedPodExecOK) {
	s.Response = val
}

func (*ConnectCoreV1PostNamespacedPodExecOKHeaders) connectCoreV1PostNamespacedPodExecRes() {}

// ConnectCoreV1PostNamespacedPodExecUnauthorized is response for ConnectCoreV1PostNamespacedPodExec operation.
type ConnectCoreV1PostNamespacedPodExecUnauthorized struct{}

func (*ConnectCoreV1PostNamespacedPodExecUnauthorized) connectCoreV1PostNamespacedPodExecRes() {}

type ConnectCoreV1PostNamespacedPodPortforwardOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ConnectCoreV1PostNamespacedPodPortforwardOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// ConnectCoreV1PostNamespacedPodPortforwardOKHeaders wraps ConnectCoreV1PostNamespacedPodPortforwardOK with response headers.
type ConnectCoreV1PostNamespacedPodPortforwardOKHeaders struct {
	ContentType string
	Response    ConnectCoreV1PostNamespacedPodPortforwardOK
}

// GetContentType returns the value of ContentType.
func (s *ConnectCoreV1PostNamespacedPodPortforwardOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetResponse returns the value of Response.
func (s *ConnectCoreV1PostNamespacedPodPortforwardOKHeaders) GetResponse() ConnectCoreV1PostNamespacedPodPortforwardOK {
	return s.Response
}

// SetContentType sets the value of ContentType.
func (s *ConnectCoreV1PostNamespacedPodPortforwardOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetResponse sets the value of Response.
func (s *ConnectCoreV1PostNamespacedPodPortforwardOKHeaders) SetResponse(val ConnectCoreV1PostNamespacedPodPortforwardOK) {
	s.Response = val
}

func (*ConnectCoreV1PostNamespacedPodPortforwardOKHeaders) connectCoreV1PostNamespacedPodPortforwardRes() {
}

// ConnectCoreV1PostNamespacedPodPortforwardUnauthorized is response for ConnectCoreV1PostNamespacedPodPortforward operation.
type ConnectCoreV1PostNamespacedPodPortforwardUnauthorized struct{}

func (*ConnectCoreV1PostNamespacedPodPortforwardUnauthorized) connectCoreV1PostNamespacedPodPortforwardRes() {
}

type ConnectCoreV1PostNamespacedPodProxyOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ConnectCoreV1PostNamespacedPodProxyOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// ConnectCoreV1PostNamespacedPodProxyOKHeaders wraps ConnectCoreV1PostNamespacedPodProxyOK with response headers.
type ConnectCoreV1PostNamespacedPodProxyOKHeaders struct {
	ContentType string
	Response    ConnectCoreV1PostNamespacedPodProxyOK
}

// GetContentType returns the value of ContentType.
func (s *ConnectCoreV1PostNamespacedPodProxyOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetResponse returns the value of Response.
func (s *ConnectCoreV1PostNamespacedPodProxyOKHeaders) GetResponse() ConnectCoreV1PostNamespacedPodProxyOK {
	return s.Response
}

// SetContentType sets the value of ContentType.
func (s *ConnectCoreV1PostNamespacedPodProxyOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetResponse sets the value of Response.
func (s *ConnectCoreV1PostNamespacedPodProxyOKHeaders) SetResponse(val ConnectCoreV1PostNamespacedPodProxyOK) {
	s.Response = val
}

func (*ConnectCoreV1PostNamespacedPodProxyOKHeaders) connectCoreV1PostNamespacedPodProxyRes() {}

// ConnectCoreV1PostNamespacedPodProxyUnauthorized is response for ConnectCoreV1PostNamespacedPodProxy operation.
type ConnectCoreV1PostNamespacedPodProxyUnauthorized struct{}

func (*ConnectCoreV1PostNamespacedPodProxyUnauthorized) connectCoreV1PostNamespacedPodProxyRes() {}

type ConnectCoreV1PostNamespacedPodProxyWithPathOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ConnectCoreV1PostNamespacedPodProxyWithPathOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// ConnectCoreV1PostNamespacedPodProxyWithPathOKHeaders wraps ConnectCoreV1PostNamespacedPodProxyWithPathOK with response headers.
type ConnectCoreV1PostNamespacedPodProxyWithPathOKHeaders struct {
	ContentType string
	Response    ConnectCoreV1PostNamespacedPodProxyWithPathOK
}

// GetContentType returns the value of ContentType.
func (s *ConnectCoreV1PostNamespacedPodProxyWithPathOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetResponse returns the value of Response.
func (s *ConnectCoreV1PostNamespacedPodProxyWithPathOKHeaders) GetResponse() ConnectCoreV1PostNamespacedPodProxyWithPathOK {
	return s.Response
}

// SetContentType sets the value of ContentType.
func (s *ConnectCoreV1PostNamespacedPodProxyWithPathOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetResponse sets the value of Response.
func (s *ConnectCoreV1PostNamespacedPodProxyWithPathOKHeaders) SetResponse(val ConnectCoreV1PostNamespacedPodProxyWithPathOK) {
	s.Response = val
}

func (*ConnectCoreV1PostNamespacedPodProxyWithPathOKHeaders) connectCoreV1PostNamespacedPodProxyWithPathRes() {
}

// ConnectCoreV1PostNamespacedPodProxyWithPathUnauthorized is response for ConnectCoreV1PostNamespacedPodProxyWithPath operation.
type ConnectCoreV1PostNamespacedPodProxyWithPathUnauthorized struct{}

func (*ConnectCoreV1PostNamespacedPodProxyWithPathUnauthorized) connectCoreV1PostNamespacedPodProxyWithPathRes() {
}

type ConnectCoreV1PostNamespacedServiceProxyOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ConnectCoreV1PostNamespacedServiceProxyOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// ConnectCoreV1PostNamespacedServiceProxyOKHeaders wraps ConnectCoreV1PostNamespacedServiceProxyOK with response headers.
type ConnectCoreV1PostNamespacedServiceProxyOKHeaders struct {
	ContentType string
	Response    ConnectCoreV1PostNamespacedServiceProxyOK
}

// GetContentType returns the value of ContentType.
func (s *ConnectCoreV1PostNamespacedServiceProxyOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetResponse returns the value of Response.
func (s *ConnectCoreV1PostNamespacedServiceProxyOKHeaders) GetResponse() ConnectCoreV1PostNamespacedServiceProxyOK {
	return s.Response
}

// SetContentType sets the value of ContentType.
func (s *ConnectCoreV1PostNamespacedServiceProxyOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetResponse sets the value of Response.
func (s *ConnectCoreV1PostNamespacedServiceProxyOKHeaders) SetResponse(val ConnectCoreV1PostNamespacedServiceProxyOK) {
	s.Response = val
}

func (*ConnectCoreV1PostNamespacedServiceProxyOKHeaders) connectCoreV1PostNamespacedServiceProxyRes() {
}

// ConnectCoreV1PostNamespacedServiceProxyUnauthorized is response for ConnectCoreV1PostNamespacedServiceProxy operation.
type ConnectCoreV1PostNamespacedServiceProxyUnauthorized struct{}

func (*ConnectCoreV1PostNamespacedServiceProxyUnauthorized) connectCoreV1PostNamespacedServiceProxyRes() {
}

type ConnectCoreV1PostNamespacedServiceProxyWithPathOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ConnectCoreV1PostNamespacedServiceProxyWithPathOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// ConnectCoreV1PostNamespacedServiceProxyWithPathOKHeaders wraps ConnectCoreV1PostNamespacedServiceProxyWithPathOK with response headers.
type ConnectCoreV1PostNamespacedServiceProxyWithPathOKHeaders struct {
	ContentType string
	Response    ConnectCoreV1PostNamespacedServiceProxyWithPathOK
}

// GetContentType returns the value of ContentType.
func (s *ConnectCoreV1PostNamespacedServiceProxyWithPathOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetResponse returns the value of Response.
func (s *ConnectCoreV1PostNamespacedServiceProxyWithPathOKHeaders) GetResponse() ConnectCoreV1PostNamespacedServiceProxyWithPathOK {
	return s.Response
}

// SetContentType sets the value of ContentType.
func (s *ConnectCoreV1PostNamespacedServiceProxyWithPathOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetResponse sets the value of Response.
func (s *ConnectCoreV1PostNamespacedServiceProxyWithPathOKHeaders) SetResponse(val ConnectCoreV1PostNamespacedServiceProxyWithPathOK) {
	s.Response = val
}

func (*ConnectCoreV1PostNamespacedServiceProxyWithPathOKHeaders) connectCoreV1PostNamespacedServiceProxyWithPathRes() {
}

// ConnectCoreV1PostNamespacedServiceProxyWithPathUnauthorized is response for ConnectCoreV1PostNamespacedServiceProxyWithPath operation.
type ConnectCoreV1PostNamespacedServiceProxyWithPathUnauthorized struct{}

func (*ConnectCoreV1PostNamespacedServiceProxyWithPathUnauthorized) connectCoreV1PostNamespacedServiceProxyWithPathRes() {
}

type ConnectCoreV1PostNodeProxyOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ConnectCoreV1PostNodeProxyOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// ConnectCoreV1PostNodeProxyOKHeaders wraps ConnectCoreV1PostNodeProxyOK with response headers.
type ConnectCoreV1PostNodeProxyOKHeaders struct {
	ContentType string
	Response    ConnectCoreV1PostNodeProxyOK
}

// GetContentType returns the value of ContentType.
func (s *ConnectCoreV1PostNodeProxyOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetResponse returns the value of Response.
func (s *ConnectCoreV1PostNodeProxyOKHeaders) GetResponse() ConnectCoreV1PostNodeProxyOK {
	return s.Response
}

// SetContentType sets the value of ContentType.
func (s *ConnectCoreV1PostNodeProxyOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetResponse sets the value of Response.
func (s *ConnectCoreV1PostNodeProxyOKHeaders) SetResponse(val ConnectCoreV1PostNodeProxyOK) {
	s.Response = val
}

func (*ConnectCoreV1PostNodeProxyOKHeaders) connectCoreV1PostNodeProxyRes() {}

// ConnectCoreV1PostNodeProxyUnauthorized is response for ConnectCoreV1PostNodeProxy operation.
type ConnectCoreV1PostNodeProxyUnauthorized struct{}

func (*ConnectCoreV1PostNodeProxyUnauthorized) connectCoreV1PostNodeProxyRes() {}

type ConnectCoreV1PostNodeProxyWithPathOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ConnectCoreV1PostNodeProxyWithPathOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// ConnectCoreV1PostNodeProxyWithPathOKHeaders wraps ConnectCoreV1PostNodeProxyWithPathOK with response headers.
type ConnectCoreV1PostNodeProxyWithPathOKHeaders struct {
	ContentType string
	Response    ConnectCoreV1PostNodeProxyWithPathOK
}

// GetContentType returns the value of ContentType.
func (s *ConnectCoreV1PostNodeProxyWithPathOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetResponse returns the value of Response.
func (s *ConnectCoreV1PostNodeProxyWithPathOKHeaders) GetResponse() ConnectCoreV1PostNodeProxyWithPathOK {
	return s.Response
}

// SetContentType sets the value of ContentType.
func (s *ConnectCoreV1PostNodeProxyWithPathOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetResponse sets the value of Response.
func (s *ConnectCoreV1PostNodeProxyWithPathOKHeaders) SetResponse(val ConnectCoreV1PostNodeProxyWithPathOK) {
	s.Response = val
}

func (*ConnectCoreV1PostNodeProxyWithPathOKHeaders) connectCoreV1PostNodeProxyWithPathRes() {}

// ConnectCoreV1PostNodeProxyWithPathUnauthorized is response for ConnectCoreV1PostNodeProxyWithPath operation.
type ConnectCoreV1PostNodeProxyWithPathUnauthorized struct{}

func (*ConnectCoreV1PostNodeProxyWithPathUnauthorized) connectCoreV1PostNodeProxyWithPathRes() {}

type ConnectCoreV1PutNamespacedPodProxyOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ConnectCoreV1PutNamespacedPodProxyOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// ConnectCoreV1PutNamespacedPodProxyOKHeaders wraps ConnectCoreV1PutNamespacedPodProxyOK with response headers.
type ConnectCoreV1PutNamespacedPodProxyOKHeaders struct {
	ContentType string
	Response    ConnectCoreV1PutNamespacedPodProxyOK
}

// GetContentType returns the value of ContentType.
func (s *ConnectCoreV1PutNamespacedPodProxyOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetResponse returns the value of Response.
func (s *ConnectCoreV1PutNamespacedPodProxyOKHeaders) GetResponse() ConnectCoreV1PutNamespacedPodProxyOK {
	return s.Response
}

// SetContentType sets the value of ContentType.
func (s *ConnectCoreV1PutNamespacedPodProxyOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetResponse sets the value of Response.
func (s *ConnectCoreV1PutNamespacedPodProxyOKHeaders) SetResponse(val ConnectCoreV1PutNamespacedPodProxyOK) {
	s.Response = val
}

func (*ConnectCoreV1PutNamespacedPodProxyOKHeaders) connectCoreV1PutNamespacedPodProxyRes() {}

// ConnectCoreV1PutNamespacedPodProxyUnauthorized is response for ConnectCoreV1PutNamespacedPodProxy operation.
type ConnectCoreV1PutNamespacedPodProxyUnauthorized struct{}

func (*ConnectCoreV1PutNamespacedPodProxyUnauthorized) connectCoreV1PutNamespacedPodProxyRes() {}

type ConnectCoreV1PutNamespacedPodProxyWithPathOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ConnectCoreV1PutNamespacedPodProxyWithPathOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// ConnectCoreV1PutNamespacedPodProxyWithPathOKHeaders wraps ConnectCoreV1PutNamespacedPodProxyWithPathOK with response headers.
type ConnectCoreV1PutNamespacedPodProxyWithPathOKHeaders struct {
	ContentType string
	Response    ConnectCoreV1PutNamespacedPodProxyWithPathOK
}

// GetContentType returns the value of ContentType.
func (s *ConnectCoreV1PutNamespacedPodProxyWithPathOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetResponse returns the value of Response.
func (s *ConnectCoreV1PutNamespacedPodProxyWithPathOKHeaders) GetResponse() ConnectCoreV1PutNamespacedPodProxyWithPathOK {
	return s.Response
}

// SetContentType sets the value of ContentType.
func (s *ConnectCoreV1PutNamespacedPodProxyWithPathOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetResponse sets the value of Response.
func (s *ConnectCoreV1PutNamespacedPodProxyWithPathOKHeaders) SetResponse(val ConnectCoreV1PutNamespacedPodProxyWithPathOK) {
	s.Response = val
}

func (*ConnectCoreV1PutNamespacedPodProxyWithPathOKHeaders) connectCoreV1PutNamespacedPodProxyWithPathRes() {
}

// ConnectCoreV1PutNamespacedPodProxyWithPathUnauthorized is response for ConnectCoreV1PutNamespacedPodProxyWithPath operation.
type ConnectCoreV1PutNamespacedPodProxyWithPathUnauthorized struct{}

func (*ConnectCoreV1PutNamespacedPodProxyWithPathUnauthorized) connectCoreV1PutNamespacedPodProxyWithPathRes() {
}

type ConnectCoreV1PutNamespacedServiceProxyOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ConnectCoreV1PutNamespacedServiceProxyOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// ConnectCoreV1PutNamespacedServiceProxyOKHeaders wraps ConnectCoreV1PutNamespacedServiceProxyOK with response headers.
type ConnectCoreV1PutNamespacedServiceProxyOKHeaders struct {
	ContentType string
	Response    ConnectCoreV1PutNamespacedServiceProxyOK
}

// GetContentType returns the value of ContentType.
func (s *ConnectCoreV1PutNamespacedServiceProxyOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetResponse returns the value of Response.
func (s *ConnectCoreV1PutNamespacedServiceProxyOKHeaders) GetResponse() ConnectCoreV1PutNamespacedServiceProxyOK {
	return s.Response
}

// SetContentType sets the value of ContentType.
func (s *ConnectCoreV1PutNamespacedServiceProxyOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetResponse sets the value of Response.
func (s *ConnectCoreV1PutNamespacedServiceProxyOKHeaders) SetResponse(val ConnectCoreV1PutNamespacedServiceProxyOK) {
	s.Response = val
}

func (*ConnectCoreV1PutNamespacedServiceProxyOKHeaders) connectCoreV1PutNamespacedServiceProxyRes() {}

// ConnectCoreV1PutNamespacedServiceProxyUnauthorized is response for ConnectCoreV1PutNamespacedServiceProxy operation.
type ConnectCoreV1PutNamespacedServiceProxyUnauthorized struct{}

func (*ConnectCoreV1PutNamespacedServiceProxyUnauthorized) connectCoreV1PutNamespacedServiceProxyRes() {
}

type ConnectCoreV1PutNamespacedServiceProxyWithPathOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ConnectCoreV1PutNamespacedServiceProxyWithPathOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// ConnectCoreV1PutNamespacedServiceProxyWithPathOKHeaders wraps ConnectCoreV1PutNamespacedServiceProxyWithPathOK with response headers.
type ConnectCoreV1PutNamespacedServiceProxyWithPathOKHeaders struct {
	ContentType string
	Response    ConnectCoreV1PutNamespacedServiceProxyWithPathOK
}

// GetContentType returns the value of ContentType.
func (s *ConnectCoreV1PutNamespacedServiceProxyWithPathOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetResponse returns the value of Response.
func (s *ConnectCoreV1PutNamespacedServiceProxyWithPathOKHeaders) GetResponse() ConnectCoreV1PutNamespacedServiceProxyWithPathOK {
	return s.Response
}

// SetContentType sets the value of ContentType.
func (s *ConnectCoreV1PutNamespacedServiceProxyWithPathOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetResponse sets the value of Response.
func (s *ConnectCoreV1PutNamespacedServiceProxyWithPathOKHeaders) SetResponse(val ConnectCoreV1PutNamespacedServiceProxyWithPathOK) {
	s.Response = val
}

func (*ConnectCoreV1PutNamespacedServiceProxyWithPathOKHeaders) connectCoreV1PutNamespacedServiceProxyWithPathRes() {
}

// ConnectCoreV1PutNamespacedServiceProxyWithPathUnauthorized is response for ConnectCoreV1PutNamespacedServiceProxyWithPath operation.
type ConnectCoreV1PutNamespacedServiceProxyWithPathUnauthorized struct{}

func (*ConnectCoreV1PutNamespacedServiceProxyWithPathUnauthorized) connectCoreV1PutNamespacedServiceProxyWithPathRes() {
}

type ConnectCoreV1PutNodeProxyOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ConnectCoreV1PutNodeProxyOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// ConnectCoreV1PutNodeProxyOKHeaders wraps ConnectCoreV1PutNodeProxyOK with response headers.
type ConnectCoreV1PutNodeProxyOKHeaders struct {
	ContentType string
	Response    ConnectCoreV1PutNodeProxyOK
}

// GetContentType returns the value of ContentType.
func (s *ConnectCoreV1PutNodeProxyOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetResponse returns the value of Response.
func (s *ConnectCoreV1PutNodeProxyOKHeaders) GetResponse() ConnectCoreV1PutNodeProxyOK {
	return s.Response
}

// SetContentType sets the value of ContentType.
func (s *ConnectCoreV1PutNodeProxyOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetResponse sets the value of Response.
func (s *ConnectCoreV1PutNodeProxyOKHeaders) SetResponse(val ConnectCoreV1PutNodeProxyOK) {
	s.Response = val
}

func (*ConnectCoreV1PutNodeProxyOKHeaders) connectCoreV1PutNodeProxyRes() {}

// ConnectCoreV1PutNodeProxyUnauthorized is response for ConnectCoreV1PutNodeProxy operation.
type ConnectCoreV1PutNodeProxyUnauthorized struct{}

func (*ConnectCoreV1PutNodeProxyUnauthorized) connectCoreV1PutNodeProxyRes() {}

type ConnectCoreV1PutNodeProxyWithPathOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ConnectCoreV1PutNodeProxyWithPathOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// ConnectCoreV1PutNodeProxyWithPathOKHeaders wraps ConnectCoreV1PutNodeProxyWithPathOK with response headers.
type ConnectCoreV1PutNodeProxyWithPathOKHeaders struct {
	ContentType string
	Response    ConnectCoreV1PutNodeProxyWithPathOK
}

// GetContentType returns the value of ContentType.
func (s *ConnectCoreV1PutNodeProxyWithPathOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetResponse returns the value of Response.
func (s *ConnectCoreV1PutNodeProxyWithPathOKHeaders) GetResponse() ConnectCoreV1PutNodeProxyWithPathOK {
	return s.Response
}

// SetContentType sets the value of ContentType.
func (s *ConnectCoreV1PutNodeProxyWithPathOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetResponse sets the value of Response.
func (s *ConnectCoreV1PutNodeProxyWithPathOKHeaders) SetResponse(val ConnectCoreV1PutNodeProxyWithPathOK) {
	s.Response = val
}

func (*ConnectCoreV1PutNodeProxyWithPathOKHeaders) connectCoreV1PutNodeProxyWithPathRes() {}

// ConnectCoreV1PutNodeProxyWithPathUnauthorized is response for ConnectCoreV1PutNodeProxyWithPath operation.
type ConnectCoreV1PutNodeProxyWithPathUnauthorized struct{}

func (*ConnectCoreV1PutNodeProxyWithPathUnauthorized) connectCoreV1PutNodeProxyWithPathRes() {}

// GetAPIVersionsUnauthorized is response for GetAPIVersions operation.
type GetAPIVersionsUnauthorized struct{}

func (*GetAPIVersionsUnauthorized) getAPIVersionsRes() {}

// GetAdmissionregistrationAPIGroupUnauthorized is response for GetAdmissionregistrationAPIGroup operation.
type GetAdmissionregistrationAPIGroupUnauthorized struct{}

func (*GetAdmissionregistrationAPIGroupUnauthorized) getAdmissionregistrationAPIGroupRes() {}

// GetAdmissionregistrationV1APIResourcesUnauthorized is response for GetAdmissionregistrationV1APIResources operation.
type GetAdmissionregistrationV1APIResourcesUnauthorized struct{}

func (*GetAdmissionregistrationV1APIResourcesUnauthorized) getAdmissionregistrationV1APIResourcesRes() {
}

// GetApiextensionsAPIGroupUnauthorized is response for GetApiextensionsAPIGroup operation.
type GetApiextensionsAPIGroupUnauthorized struct{}

func (*GetApiextensionsAPIGroupUnauthorized) getApiextensionsAPIGroupRes() {}

// GetApiextensionsV1APIResourcesUnauthorized is response for GetApiextensionsV1APIResources operation.
type GetApiextensionsV1APIResourcesUnauthorized struct{}

func (*GetApiextensionsV1APIResourcesUnauthorized) getApiextensionsV1APIResourcesRes() {}

// GetApiregistrationAPIGroupUnauthorized is response for GetApiregistrationAPIGroup operation.
type GetApiregistrationAPIGroupUnauthorized struct{}

func (*GetApiregistrationAPIGroupUnauthorized) getApiregistrationAPIGroupRes() {}

// GetApiregistrationV1APIResourcesUnauthorized is response for GetApiregistrationV1APIResources operation.
type GetApiregistrationV1APIResourcesUnauthorized struct{}

func (*GetApiregistrationV1APIResourcesUnauthorized) getApiregistrationV1APIResourcesRes() {}

// GetAppsAPIGroupUnauthorized is response for GetAppsAPIGroup operation.
type GetAppsAPIGroupUnauthorized struct{}

func (*GetAppsAPIGroupUnauthorized) getAppsAPIGroupRes() {}

// GetAppsV1APIResourcesUnauthorized is response for GetAppsV1APIResources operation.
type GetAppsV1APIResourcesUnauthorized struct{}

func (*GetAppsV1APIResourcesUnauthorized) getAppsV1APIResourcesRes() {}

// GetAuthenticationAPIGroupUnauthorized is response for GetAuthenticationAPIGroup operation.
type GetAuthenticationAPIGroupUnauthorized struct{}

func (*GetAuthenticationAPIGroupUnauthorized) getAuthenticationAPIGroupRes() {}

// GetAuthenticationV1APIResourcesUnauthorized is response for GetAuthenticationV1APIResources operation.
type GetAuthenticationV1APIResourcesUnauthorized struct{}

func (*GetAuthenticationV1APIResourcesUnauthorized) getAuthenticationV1APIResourcesRes() {}

// GetAuthorizationAPIGroupUnauthorized is response for GetAuthorizationAPIGroup operation.
type GetAuthorizationAPIGroupUnauthorized struct{}

func (*GetAuthorizationAPIGroupUnauthorized) getAuthorizationAPIGroupRes() {}

// GetAuthorizationV1APIResourcesUnauthorized is response for GetAuthorizationV1APIResources operation.
type GetAuthorizationV1APIResourcesUnauthorized struct{}

func (*GetAuthorizationV1APIResourcesUnauthorized) getAuthorizationV1APIResourcesRes() {}

// GetAutoscalingAPIGroupUnauthorized is response for GetAutoscalingAPIGroup operation.
type GetAutoscalingAPIGroupUnauthorized struct{}

func (*GetAutoscalingAPIGroupUnauthorized) getAutoscalingAPIGroupRes() {}

// GetAutoscalingV1APIResourcesUnauthorized is response for GetAutoscalingV1APIResources operation.
type GetAutoscalingV1APIResourcesUnauthorized struct{}

func (*GetAutoscalingV1APIResourcesUnauthorized) getAutoscalingV1APIResourcesRes() {}

// GetAutoscalingV2beta1APIResourcesUnauthorized is response for GetAutoscalingV2beta1APIResources operation.
type GetAutoscalingV2beta1APIResourcesUnauthorized struct{}

func (*GetAutoscalingV2beta1APIResourcesUnauthorized) getAutoscalingV2beta1APIResourcesRes() {}

// GetAutoscalingV2beta2APIResourcesUnauthorized is response for GetAutoscalingV2beta2APIResources operation.
type GetAutoscalingV2beta2APIResourcesUnauthorized struct{}

func (*GetAutoscalingV2beta2APIResourcesUnauthorized) getAutoscalingV2beta2APIResourcesRes() {}

// GetBatchAPIGroupUnauthorized is response for GetBatchAPIGroup operation.
type GetBatchAPIGroupUnauthorized struct{}

func (*GetBatchAPIGroupUnauthorized) getBatchAPIGroupRes() {}

// GetBatchV1APIResourcesUnauthorized is response for GetBatchV1APIResources operation.
type GetBatchV1APIResourcesUnauthorized struct{}

func (*GetBatchV1APIResourcesUnauthorized) getBatchV1APIResourcesRes() {}

// GetBatchV1beta1APIResourcesUnauthorized is response for GetBatchV1beta1APIResources operation.
type GetBatchV1beta1APIResourcesUnauthorized struct{}

func (*GetBatchV1beta1APIResourcesUnauthorized) getBatchV1beta1APIResourcesRes() {}

// GetCertificatesAPIGroupUnauthorized is response for GetCertificatesAPIGroup operation.
type GetCertificatesAPIGroupUnauthorized struct{}

func (*GetCertificatesAPIGroupUnauthorized) getCertificatesAPIGroupRes() {}

// GetCertificatesV1APIResourcesUnauthorized is response for GetCertificatesV1APIResources operation.
type GetCertificatesV1APIResourcesUnauthorized struct{}

func (*GetCertificatesV1APIResourcesUnauthorized) getCertificatesV1APIResourcesRes() {}

// GetCodeVersionUnauthorized is response for GetCodeVersion operation.
type GetCodeVersionUnauthorized struct{}

func (*GetCodeVersionUnauthorized) getCodeVersionRes() {}

// GetCoordinationAPIGroupUnauthorized is response for GetCoordinationAPIGroup operation.
type GetCoordinationAPIGroupUnauthorized struct{}

func (*GetCoordinationAPIGroupUnauthorized) getCoordinationAPIGroupRes() {}

// GetCoordinationV1APIResourcesUnauthorized is response for GetCoordinationV1APIResources operation.
type GetCoordinationV1APIResourcesUnauthorized struct{}

func (*GetCoordinationV1APIResourcesUnauthorized) getCoordinationV1APIResourcesRes() {}

// GetCoreAPIVersionsUnauthorized is response for GetCoreAPIVersions operation.
type GetCoreAPIVersionsUnauthorized struct{}

func (*GetCoreAPIVersionsUnauthorized) getCoreAPIVersionsRes() {}

// GetCoreV1APIResourcesUnauthorized is response for GetCoreV1APIResources operation.
type GetCoreV1APIResourcesUnauthorized struct{}

func (*GetCoreV1APIResourcesUnauthorized) getCoreV1APIResourcesRes() {}

// GetDiscoveryAPIGroupUnauthorized is response for GetDiscoveryAPIGroup operation.
type GetDiscoveryAPIGroupUnauthorized struct{}

func (*GetDiscoveryAPIGroupUnauthorized) getDiscoveryAPIGroupRes() {}

// GetDiscoveryV1APIResourcesUnauthorized is response for GetDiscoveryV1APIResources operation.
type GetDiscoveryV1APIResourcesUnauthorized struct{}

func (*GetDiscoveryV1APIResourcesUnauthorized) getDiscoveryV1APIResourcesRes() {}

// GetDiscoveryV1beta1APIResourcesUnauthorized is response for GetDiscoveryV1beta1APIResources operation.
type GetDiscoveryV1beta1APIResourcesUnauthorized struct{}

func (*GetDiscoveryV1beta1APIResourcesUnauthorized) getDiscoveryV1beta1APIResourcesRes() {}

// GetEventsAPIGroupUnauthorized is response for GetEventsAPIGroup operation.
type GetEventsAPIGroupUnauthorized struct{}

func (*GetEventsAPIGroupUnauthorized) getEventsAPIGroupRes() {}

// GetEventsV1APIResourcesUnauthorized is response for GetEventsV1APIResources operation.
type GetEventsV1APIResourcesUnauthorized struct{}

func (*GetEventsV1APIResourcesUnauthorized) getEventsV1APIResourcesRes() {}

// GetEventsV1beta1APIResourcesUnauthorized is response for GetEventsV1beta1APIResources operation.
type GetEventsV1beta1APIResourcesUnauthorized struct{}

func (*GetEventsV1beta1APIResourcesUnauthorized) getEventsV1beta1APIResourcesRes() {}

// GetFlowcontrolApiserverAPIGroupUnauthorized is response for GetFlowcontrolApiserverAPIGroup operation.
type GetFlowcontrolApiserverAPIGroupUnauthorized struct{}

func (*GetFlowcontrolApiserverAPIGroupUnauthorized) getFlowcontrolApiserverAPIGroupRes() {}

// GetFlowcontrolApiserverV1beta1APIResourcesUnauthorized is response for GetFlowcontrolApiserverV1beta1APIResources operation.
type GetFlowcontrolApiserverV1beta1APIResourcesUnauthorized struct{}

func (*GetFlowcontrolApiserverV1beta1APIResourcesUnauthorized) getFlowcontrolApiserverV1beta1APIResourcesRes() {
}

// GetFlowcontrolApiserverV1beta2APIResourcesUnauthorized is response for GetFlowcontrolApiserverV1beta2APIResources operation.
type GetFlowcontrolApiserverV1beta2APIResourcesUnauthorized struct{}

func (*GetFlowcontrolApiserverV1beta2APIResourcesUnauthorized) getFlowcontrolApiserverV1beta2APIResourcesRes() {
}

// GetInternalApiserverAPIGroupUnauthorized is response for GetInternalApiserverAPIGroup operation.
type GetInternalApiserverAPIGroupUnauthorized struct{}

func (*GetInternalApiserverAPIGroupUnauthorized) getInternalApiserverAPIGroupRes() {}

// GetInternalApiserverV1alpha1APIResourcesUnauthorized is response for GetInternalApiserverV1alpha1APIResources operation.
type GetInternalApiserverV1alpha1APIResourcesUnauthorized struct{}

func (*GetInternalApiserverV1alpha1APIResourcesUnauthorized) getInternalApiserverV1alpha1APIResourcesRes() {
}

// GetNetworkingAPIGroupUnauthorized is response for GetNetworkingAPIGroup operation.
type GetNetworkingAPIGroupUnauthorized struct{}

func (*GetNetworkingAPIGroupUnauthorized) getNetworkingAPIGroupRes() {}

// GetNetworkingV1APIResourcesUnauthorized is response for GetNetworkingV1APIResources operation.
type GetNetworkingV1APIResourcesUnauthorized struct{}

func (*GetNetworkingV1APIResourcesUnauthorized) getNetworkingV1APIResourcesRes() {}

// GetNodeAPIGroupUnauthorized is response for GetNodeAPIGroup operation.
type GetNodeAPIGroupUnauthorized struct{}

func (*GetNodeAPIGroupUnauthorized) getNodeAPIGroupRes() {}

// GetNodeV1APIResourcesUnauthorized is response for GetNodeV1APIResources operation.
type GetNodeV1APIResourcesUnauthorized struct{}

func (*GetNodeV1APIResourcesUnauthorized) getNodeV1APIResourcesRes() {}

// GetNodeV1alpha1APIResourcesUnauthorized is response for GetNodeV1alpha1APIResources operation.
type GetNodeV1alpha1APIResourcesUnauthorized struct{}

func (*GetNodeV1alpha1APIResourcesUnauthorized) getNodeV1alpha1APIResourcesRes() {}

// GetNodeV1beta1APIResourcesUnauthorized is response for GetNodeV1beta1APIResources operation.
type GetNodeV1beta1APIResourcesUnauthorized struct{}

func (*GetNodeV1beta1APIResourcesUnauthorized) getNodeV1beta1APIResourcesRes() {}

// GetPolicyAPIGroupUnauthorized is response for GetPolicyAPIGroup operation.
type GetPolicyAPIGroupUnauthorized struct{}

func (*GetPolicyAPIGroupUnauthorized) getPolicyAPIGroupRes() {}

// GetPolicyV1APIResourcesUnauthorized is response for GetPolicyV1APIResources operation.
type GetPolicyV1APIResourcesUnauthorized struct{}

func (*GetPolicyV1APIResourcesUnauthorized) getPolicyV1APIResourcesRes() {}

// GetPolicyV1beta1APIResourcesUnauthorized is response for GetPolicyV1beta1APIResources operation.
type GetPolicyV1beta1APIResourcesUnauthorized struct{}

func (*GetPolicyV1beta1APIResourcesUnauthorized) getPolicyV1beta1APIResourcesRes() {}

// GetRbacAuthorizationAPIGroupUnauthorized is response for GetRbacAuthorizationAPIGroup operation.
type GetRbacAuthorizationAPIGroupUnauthorized struct{}

func (*GetRbacAuthorizationAPIGroupUnauthorized) getRbacAuthorizationAPIGroupRes() {}

// GetRbacAuthorizationV1APIResourcesUnauthorized is response for GetRbacAuthorizationV1APIResources operation.
type GetRbacAuthorizationV1APIResourcesUnauthorized struct{}

func (*GetRbacAuthorizationV1APIResourcesUnauthorized) getRbacAuthorizationV1APIResourcesRes() {}

// GetSchedulingAPIGroupUnauthorized is response for GetSchedulingAPIGroup operation.
type GetSchedulingAPIGroupUnauthorized struct{}

func (*GetSchedulingAPIGroupUnauthorized) getSchedulingAPIGroupRes() {}

// GetSchedulingV1APIResourcesUnauthorized is response for GetSchedulingV1APIResources operation.
type GetSchedulingV1APIResourcesUnauthorized struct{}

func (*GetSchedulingV1APIResourcesUnauthorized) getSchedulingV1APIResourcesRes() {}

type GetServiceAccountIssuerOpenIDConfigurationOKApplicationJSON string

func (*GetServiceAccountIssuerOpenIDConfigurationOKApplicationJSON) getServiceAccountIssuerOpenIDConfigurationRes() {
}

// GetServiceAccountIssuerOpenIDConfigurationUnauthorized is response for GetServiceAccountIssuerOpenIDConfiguration operation.
type GetServiceAccountIssuerOpenIDConfigurationUnauthorized struct{}

func (*GetServiceAccountIssuerOpenIDConfigurationUnauthorized) getServiceAccountIssuerOpenIDConfigurationRes() {
}

type GetServiceAccountIssuerOpenIDKeysetOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetServiceAccountIssuerOpenIDKeysetOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetServiceAccountIssuerOpenIDKeysetOK) getServiceAccountIssuerOpenIDKeysetRes() {}

// GetServiceAccountIssuerOpenIDKeysetUnauthorized is response for GetServiceAccountIssuerOpenIDKeyset operation.
type GetServiceAccountIssuerOpenIDKeysetUnauthorized struct{}

func (*GetServiceAccountIssuerOpenIDKeysetUnauthorized) getServiceAccountIssuerOpenIDKeysetRes() {}

// GetStorageAPIGroupUnauthorized is response for GetStorageAPIGroup operation.
type GetStorageAPIGroupUnauthorized struct{}

func (*GetStorageAPIGroupUnauthorized) getStorageAPIGroupRes() {}

// GetStorageV1APIResourcesUnauthorized is response for GetStorageV1APIResources operation.
type GetStorageV1APIResourcesUnauthorized struct{}

func (*GetStorageV1APIResourcesUnauthorized) getStorageV1APIResourcesRes() {}

// GetStorageV1alpha1APIResourcesUnauthorized is response for GetStorageV1alpha1APIResources operation.
type GetStorageV1alpha1APIResourcesUnauthorized struct{}

func (*GetStorageV1alpha1APIResourcesUnauthorized) getStorageV1alpha1APIResourcesRes() {}

// GetStorageV1beta1APIResourcesUnauthorized is response for GetStorageV1beta1APIResources operation.
type GetStorageV1beta1APIResourcesUnauthorized struct{}

func (*GetStorageV1beta1APIResourcesUnauthorized) getStorageV1beta1APIResourcesRes() {}

// MutatingWebhook describes an admission webhook and the resources and operations it applies to.
// Ref: #/components/schemas/io.k8s.api.admissionregistration.v1.MutatingWebhook
type IoK8sAPIAdmissionregistrationV1MutatingWebhook struct {
	// AdmissionReviewVersions is an ordered list of preferred `AdmissionReview` versions the Webhook
	// expects. API server will try to use first version in the list which it supports. If none of the
	// versions specified in this list supported by API server, validation will fail for this object. If
	// a persisted webhook configuration specifies allowed versions and does not include any versions
	// known to the API Server, calls to the webhook will fail and be subject to the failure policy.
	AdmissionReviewVersions []string                                           `json:"admissionReviewVersions"`
	ClientConfig            IoK8sAPIAdmissionregistrationV1WebhookClientConfig `json:"clientConfig"`
	// FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed
	// values are Ignore or Fail. Defaults to Fail.
	FailurePolicy OptString `json:"failurePolicy"`
	// MatchPolicy defines how the "rules" list is used to match incoming requests. Allowed values are
	// "Exact" or "Equivalent".
	// - Exact: match a request only if it exactly matches a specified rule. For example, if deployments
	// can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but "rules" only included
	// `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or
	// extensions/v1beta1 would not be sent to the webhook.
	// - Equivalent: match a request if modifies a resource listed in rules, even via another API group
	// or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and
	// extensions/v1beta1, and "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources:
	// ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1
	// and sent to the webhook.
	// Defaults to "Equivalent".
	MatchPolicy OptString `json:"matchPolicy"`
	// The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io,
	//  where "imagepolicy" is the name of the webhook, and kubernetes.io is the name of the organization.
	//  Required.
	Name              string                                         `json:"name"`
	NamespaceSelector OptIoK8sApimachineryPkgApisMetaV1LabelSelector `json:"namespaceSelector"`
	ObjectSelector    OptIoK8sApimachineryPkgApisMetaV1LabelSelector `json:"objectSelector"`
	// ReinvocationPolicy indicates whether this webhook should be called multiple times as part of a
	// single admission evaluation. Allowed values are "Never" and "IfNeeded".
	// Never: the webhook will not be called more than once in a single admission evaluation.
	// IfNeeded: the webhook will be called at least one additional time as part of the admission
	// evaluation if the object being admitted is modified by other admission plugins after the initial
	// webhook call. Webhooks that specify this option *must* be idempotent, able to process objects they
	// previously admitted. Note: * the number of additional invocations is not guaranteed to be exactly
	// one. * if additional invocations result in further modifications to the object, webhooks are not
	// guaranteed to be invoked again. * webhooks that use this option may be reordered to minimize the
	// number of additional invocations. * to validate an object after all mutations are guaranteed
	// complete, use a validating admission webhook instead.
	// Defaults to "Never".
	ReinvocationPolicy OptString `json:"reinvocationPolicy"`
	// Rules describes what operations on what resources/subresources the webhook cares about. The
	// webhook cares about an operation if it matches _any_ Rule. However, in order to prevent
	// ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state
	// which cannot be recovered from without completely disabling the plugin,
	// ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests
	// for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.
	Rules []IoK8sAPIAdmissionregistrationV1RuleWithOperations `json:"rules"`
	// SideEffects states whether this webhook has side effects. Acceptable values are: None,
	// NoneOnDryRun (webhooks created via v1beta1 may also specify Some or Unknown). Webhooks with side
	// effects MUST implement a reconciliation system, since a request may be rejected by a future step
	// in the admission chain and the side effects therefore need to be undone. Requests with the dryRun
	// attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some.
	SideEffects string `json:"sideEffects"`
	// TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call
	// will be ignored or the API call will fail based on the failure policy. The timeout value must be
	// between 1 and 30 seconds. Default to 10 seconds.
	TimeoutSeconds OptInt32 `json:"timeoutSeconds"`
}

// GetAdmissionReviewVersions returns the value of AdmissionReviewVersions.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhook) GetAdmissionReviewVersions() []string {
	return s.AdmissionReviewVersions
}

// GetClientConfig returns the value of ClientConfig.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhook) GetClientConfig() IoK8sAPIAdmissionregistrationV1WebhookClientConfig {
	return s.ClientConfig
}

// GetFailurePolicy returns the value of FailurePolicy.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhook) GetFailurePolicy() OptString {
	return s.FailurePolicy
}

// GetMatchPolicy returns the value of MatchPolicy.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhook) GetMatchPolicy() OptString {
	return s.MatchPolicy
}

// GetName returns the value of Name.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhook) GetName() string {
	return s.Name
}

// GetNamespaceSelector returns the value of NamespaceSelector.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhook) GetNamespaceSelector() OptIoK8sApimachineryPkgApisMetaV1LabelSelector {
	return s.NamespaceSelector
}

// GetObjectSelector returns the value of ObjectSelector.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhook) GetObjectSelector() OptIoK8sApimachineryPkgApisMetaV1LabelSelector {
	return s.ObjectSelector
}

// GetReinvocationPolicy returns the value of ReinvocationPolicy.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhook) GetReinvocationPolicy() OptString {
	return s.ReinvocationPolicy
}

// GetRules returns the value of Rules.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhook) GetRules() []IoK8sAPIAdmissionregistrationV1RuleWithOperations {
	return s.Rules
}

// GetSideEffects returns the value of SideEffects.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhook) GetSideEffects() string {
	return s.SideEffects
}

// GetTimeoutSeconds returns the value of TimeoutSeconds.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhook) GetTimeoutSeconds() OptInt32 {
	return s.TimeoutSeconds
}

// SetAdmissionReviewVersions sets the value of AdmissionReviewVersions.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhook) SetAdmissionReviewVersions(val []string) {
	s.AdmissionReviewVersions = val
}

// SetClientConfig sets the value of ClientConfig.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhook) SetClientConfig(val IoK8sAPIAdmissionregistrationV1WebhookClientConfig) {
	s.ClientConfig = val
}

// SetFailurePolicy sets the value of FailurePolicy.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhook) SetFailurePolicy(val OptString) {
	s.FailurePolicy = val
}

// SetMatchPolicy sets the value of MatchPolicy.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhook) SetMatchPolicy(val OptString) {
	s.MatchPolicy = val
}

// SetName sets the value of Name.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhook) SetName(val string) {
	s.Name = val
}

// SetNamespaceSelector sets the value of NamespaceSelector.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhook) SetNamespaceSelector(val OptIoK8sApimachineryPkgApisMetaV1LabelSelector) {
	s.NamespaceSelector = val
}

// SetObjectSelector sets the value of ObjectSelector.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhook) SetObjectSelector(val OptIoK8sApimachineryPkgApisMetaV1LabelSelector) {
	s.ObjectSelector = val
}

// SetReinvocationPolicy sets the value of ReinvocationPolicy.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhook) SetReinvocationPolicy(val OptString) {
	s.ReinvocationPolicy = val
}

// SetRules sets the value of Rules.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhook) SetRules(val []IoK8sAPIAdmissionregistrationV1RuleWithOperations) {
	s.Rules = val
}

// SetSideEffects sets the value of SideEffects.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhook) SetSideEffects(val string) {
	s.SideEffects = val
}

// SetTimeoutSeconds sets the value of TimeoutSeconds.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhook) SetTimeoutSeconds(val OptInt32) {
	s.TimeoutSeconds = val
}

// MutatingWebhookConfiguration describes the configuration of and admission webhook that accept or
// reject and may change the object.
// Ref: #/components/schemas/io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration
type IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                   `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata"`
	// Webhooks is a list of webhooks and the affected resources and operations.
	Webhooks []IoK8sAPIAdmissionregistrationV1MutatingWebhook `json:"webhooks"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetWebhooks returns the value of Webhooks.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration) GetWebhooks() []IoK8sAPIAdmissionregistrationV1MutatingWebhook {
	return s.Webhooks
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetWebhooks sets the value of Webhooks.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration) SetWebhooks(val []IoK8sAPIAdmissionregistrationV1MutatingWebhook) {
	s.Webhooks = val
}

func (*IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration) readAdmissionregistrationV1MutatingWebhookConfigurationRes() {
}

// MutatingWebhookConfigurationList is a list of MutatingWebhookConfiguration.
// Ref: #/components/schemas/io.k8s.api.admissionregistration.v1.MutatingWebhookConfigurationList
type IoK8sAPIAdmissionregistrationV1MutatingWebhookConfigurationList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// List of MutatingWebhookConfiguration.
	Items []IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfigurationList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfigurationList) GetItems() []IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfigurationList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfigurationList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfigurationList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfigurationList) SetItems(val []IoK8sAPIAdmissionregistrationV1MutatingWebhookConfiguration) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfigurationList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIAdmissionregistrationV1MutatingWebhookConfigurationList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPIAdmissionregistrationV1MutatingWebhookConfigurationList) listAdmissionregistrationV1MutatingWebhookConfigurationRes() {
}

// RuleWithOperations is a tuple of Operations and Resources. It is recommended to make sure that all
// the tuple expansions are valid.
// Ref: #/components/schemas/io.k8s.api.admissionregistration.v1.RuleWithOperations
type IoK8sAPIAdmissionregistrationV1RuleWithOperations struct {
	// APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the
	// length of the slice must be one. Required.
	ApiGroups []string `json:"apiGroups"`
	// APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present,
	// the length of the slice must be one. Required.
	ApiVersions []string `json:"apiVersions"`
	// Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or *
	// for all of those operations and any future admission operations that are added. If '*' is present,
	// the length of the slice must be one. Required.
	Operations []string `json:"operations"`
	// Resources is a list of resources this rule applies to.
	// For example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all
	// resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all
	// scale subresources. '*/*' means all resources and their subresources.
	// If wildcard is present, the validation rule will ensure resources do not overlap with each other.
	// Depending on the enclosing object, subresources might not be allowed. Required.
	Resources []string `json:"resources"`
	// Scope specifies the scope of this rule. Valid values are "Cluster", "Namespaced", and "*"
	// "Cluster" means that only cluster-scoped resources will match this rule. Namespace API objects are
	// cluster-scoped. "Namespaced" means that only namespaced resources will match this rule. "*" means
	// that there are no scope restrictions. Subresources match the scope of their parent resource.
	// Default is "*".
	Scope OptString `json:"scope"`
}

// GetApiGroups returns the value of ApiGroups.
func (s *IoK8sAPIAdmissionregistrationV1RuleWithOperations) GetApiGroups() []string {
	return s.ApiGroups
}

// GetApiVersions returns the value of ApiVersions.
func (s *IoK8sAPIAdmissionregistrationV1RuleWithOperations) GetApiVersions() []string {
	return s.ApiVersions
}

// GetOperations returns the value of Operations.
func (s *IoK8sAPIAdmissionregistrationV1RuleWithOperations) GetOperations() []string {
	return s.Operations
}

// GetResources returns the value of Resources.
func (s *IoK8sAPIAdmissionregistrationV1RuleWithOperations) GetResources() []string {
	return s.Resources
}

// GetScope returns the value of Scope.
func (s *IoK8sAPIAdmissionregistrationV1RuleWithOperations) GetScope() OptString {
	return s.Scope
}

// SetApiGroups sets the value of ApiGroups.
func (s *IoK8sAPIAdmissionregistrationV1RuleWithOperations) SetApiGroups(val []string) {
	s.ApiGroups = val
}

// SetApiVersions sets the value of ApiVersions.
func (s *IoK8sAPIAdmissionregistrationV1RuleWithOperations) SetApiVersions(val []string) {
	s.ApiVersions = val
}

// SetOperations sets the value of Operations.
func (s *IoK8sAPIAdmissionregistrationV1RuleWithOperations) SetOperations(val []string) {
	s.Operations = val
}

// SetResources sets the value of Resources.
func (s *IoK8sAPIAdmissionregistrationV1RuleWithOperations) SetResources(val []string) {
	s.Resources = val
}

// SetScope sets the value of Scope.
func (s *IoK8sAPIAdmissionregistrationV1RuleWithOperations) SetScope(val OptString) {
	s.Scope = val
}

// ServiceReference holds a reference to Service.legacy.k8s.io.
// Ref: #/components/schemas/io.k8s.api.admissionregistration.v1.ServiceReference
type IoK8sAPIAdmissionregistrationV1ServiceReference struct {
	// `name` is the name of the service. Required.
	Name string `json:"name"`
	// `namespace` is the namespace of the service. Required.
	Namespace string `json:"namespace"`
	// `path` is an optional URL path which will be sent in any request to this service.
	Path OptString `json:"path"`
	// If specified, the port on the service that hosting webhook. Default to 443 for backward
	// compatibility. `port` should be a valid port number (1-65535, inclusive).
	Port OptInt32 `json:"port"`
}

// GetName returns the value of Name.
func (s *IoK8sAPIAdmissionregistrationV1ServiceReference) GetName() string {
	return s.Name
}

// GetNamespace returns the value of Namespace.
func (s *IoK8sAPIAdmissionregistrationV1ServiceReference) GetNamespace() string {
	return s.Namespace
}

// GetPath returns the value of Path.
func (s *IoK8sAPIAdmissionregistrationV1ServiceReference) GetPath() OptString {
	return s.Path
}

// GetPort returns the value of Port.
func (s *IoK8sAPIAdmissionregistrationV1ServiceReference) GetPort() OptInt32 {
	return s.Port
}

// SetName sets the value of Name.
func (s *IoK8sAPIAdmissionregistrationV1ServiceReference) SetName(val string) {
	s.Name = val
}

// SetNamespace sets the value of Namespace.
func (s *IoK8sAPIAdmissionregistrationV1ServiceReference) SetNamespace(val string) {
	s.Namespace = val
}

// SetPath sets the value of Path.
func (s *IoK8sAPIAdmissionregistrationV1ServiceReference) SetPath(val OptString) {
	s.Path = val
}

// SetPort sets the value of Port.
func (s *IoK8sAPIAdmissionregistrationV1ServiceReference) SetPort(val OptInt32) {
	s.Port = val
}

// ValidatingWebhook describes an admission webhook and the resources and operations it applies to.
// Ref: #/components/schemas/io.k8s.api.admissionregistration.v1.ValidatingWebhook
type IoK8sAPIAdmissionregistrationV1ValidatingWebhook struct {
	// AdmissionReviewVersions is an ordered list of preferred `AdmissionReview` versions the Webhook
	// expects. API server will try to use first version in the list which it supports. If none of the
	// versions specified in this list supported by API server, validation will fail for this object. If
	// a persisted webhook configuration specifies allowed versions and does not include any versions
	// known to the API Server, calls to the webhook will fail and be subject to the failure policy.
	AdmissionReviewVersions []string                                           `json:"admissionReviewVersions"`
	ClientConfig            IoK8sAPIAdmissionregistrationV1WebhookClientConfig `json:"clientConfig"`
	// FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed
	// values are Ignore or Fail. Defaults to Fail.
	FailurePolicy OptString `json:"failurePolicy"`
	// MatchPolicy defines how the "rules" list is used to match incoming requests. Allowed values are
	// "Exact" or "Equivalent".
	// - Exact: match a request only if it exactly matches a specified rule. For example, if deployments
	// can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but "rules" only included
	// `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or
	// extensions/v1beta1 would not be sent to the webhook.
	// - Equivalent: match a request if modifies a resource listed in rules, even via another API group
	// or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and
	// extensions/v1beta1, and "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources:
	// ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1
	// and sent to the webhook.
	// Defaults to "Equivalent".
	MatchPolicy OptString `json:"matchPolicy"`
	// The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io,
	//  where "imagepolicy" is the name of the webhook, and kubernetes.io is the name of the organization.
	//  Required.
	Name              string                                         `json:"name"`
	NamespaceSelector OptIoK8sApimachineryPkgApisMetaV1LabelSelector `json:"namespaceSelector"`
	ObjectSelector    OptIoK8sApimachineryPkgApisMetaV1LabelSelector `json:"objectSelector"`
	// Rules describes what operations on what resources/subresources the webhook cares about. The
	// webhook cares about an operation if it matches _any_ Rule. However, in order to prevent
	// ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state
	// which cannot be recovered from without completely disabling the plugin,
	// ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests
	// for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.
	Rules []IoK8sAPIAdmissionregistrationV1RuleWithOperations `json:"rules"`
	// SideEffects states whether this webhook has side effects. Acceptable values are: None,
	// NoneOnDryRun (webhooks created via v1beta1 may also specify Some or Unknown). Webhooks with side
	// effects MUST implement a reconciliation system, since a request may be rejected by a future step
	// in the admission chain and the side effects therefore need to be undone. Requests with the dryRun
	// attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some.
	SideEffects string `json:"sideEffects"`
	// TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call
	// will be ignored or the API call will fail based on the failure policy. The timeout value must be
	// between 1 and 30 seconds. Default to 10 seconds.
	TimeoutSeconds OptInt32 `json:"timeoutSeconds"`
}

// GetAdmissionReviewVersions returns the value of AdmissionReviewVersions.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhook) GetAdmissionReviewVersions() []string {
	return s.AdmissionReviewVersions
}

// GetClientConfig returns the value of ClientConfig.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhook) GetClientConfig() IoK8sAPIAdmissionregistrationV1WebhookClientConfig {
	return s.ClientConfig
}

// GetFailurePolicy returns the value of FailurePolicy.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhook) GetFailurePolicy() OptString {
	return s.FailurePolicy
}

// GetMatchPolicy returns the value of MatchPolicy.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhook) GetMatchPolicy() OptString {
	return s.MatchPolicy
}

// GetName returns the value of Name.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhook) GetName() string {
	return s.Name
}

// GetNamespaceSelector returns the value of NamespaceSelector.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhook) GetNamespaceSelector() OptIoK8sApimachineryPkgApisMetaV1LabelSelector {
	return s.NamespaceSelector
}

// GetObjectSelector returns the value of ObjectSelector.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhook) GetObjectSelector() OptIoK8sApimachineryPkgApisMetaV1LabelSelector {
	return s.ObjectSelector
}

// GetRules returns the value of Rules.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhook) GetRules() []IoK8sAPIAdmissionregistrationV1RuleWithOperations {
	return s.Rules
}

// GetSideEffects returns the value of SideEffects.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhook) GetSideEffects() string {
	return s.SideEffects
}

// GetTimeoutSeconds returns the value of TimeoutSeconds.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhook) GetTimeoutSeconds() OptInt32 {
	return s.TimeoutSeconds
}

// SetAdmissionReviewVersions sets the value of AdmissionReviewVersions.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhook) SetAdmissionReviewVersions(val []string) {
	s.AdmissionReviewVersions = val
}

// SetClientConfig sets the value of ClientConfig.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhook) SetClientConfig(val IoK8sAPIAdmissionregistrationV1WebhookClientConfig) {
	s.ClientConfig = val
}

// SetFailurePolicy sets the value of FailurePolicy.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhook) SetFailurePolicy(val OptString) {
	s.FailurePolicy = val
}

// SetMatchPolicy sets the value of MatchPolicy.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhook) SetMatchPolicy(val OptString) {
	s.MatchPolicy = val
}

// SetName sets the value of Name.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhook) SetName(val string) {
	s.Name = val
}

// SetNamespaceSelector sets the value of NamespaceSelector.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhook) SetNamespaceSelector(val OptIoK8sApimachineryPkgApisMetaV1LabelSelector) {
	s.NamespaceSelector = val
}

// SetObjectSelector sets the value of ObjectSelector.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhook) SetObjectSelector(val OptIoK8sApimachineryPkgApisMetaV1LabelSelector) {
	s.ObjectSelector = val
}

// SetRules sets the value of Rules.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhook) SetRules(val []IoK8sAPIAdmissionregistrationV1RuleWithOperations) {
	s.Rules = val
}

// SetSideEffects sets the value of SideEffects.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhook) SetSideEffects(val string) {
	s.SideEffects = val
}

// SetTimeoutSeconds sets the value of TimeoutSeconds.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhook) SetTimeoutSeconds(val OptInt32) {
	s.TimeoutSeconds = val
}

// ValidatingWebhookConfiguration describes the configuration of and admission webhook that accept or
// reject and object without changing it.
// Ref: #/components/schemas/io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration
type IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                   `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata"`
	// Webhooks is a list of webhooks and the affected resources and operations.
	Webhooks []IoK8sAPIAdmissionregistrationV1ValidatingWebhook `json:"webhooks"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetWebhooks returns the value of Webhooks.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration) GetWebhooks() []IoK8sAPIAdmissionregistrationV1ValidatingWebhook {
	return s.Webhooks
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetWebhooks sets the value of Webhooks.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration) SetWebhooks(val []IoK8sAPIAdmissionregistrationV1ValidatingWebhook) {
	s.Webhooks = val
}

func (*IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration) readAdmissionregistrationV1ValidatingWebhookConfigurationRes() {
}

// ValidatingWebhookConfigurationList is a list of ValidatingWebhookConfiguration.
// Ref: #/components/schemas/io.k8s.api.admissionregistration.v1.ValidatingWebhookConfigurationList
type IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfigurationList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// List of ValidatingWebhookConfiguration.
	Items []IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfigurationList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfigurationList) GetItems() []IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfigurationList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfigurationList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfigurationList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfigurationList) SetItems(val []IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfiguration) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfigurationList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfigurationList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPIAdmissionregistrationV1ValidatingWebhookConfigurationList) listAdmissionregistrationV1ValidatingWebhookConfigurationRes() {
}

// WebhookClientConfig contains the information to make a TLS connection with the webhook.
// Ref: #/components/schemas/io.k8s.api.admissionregistration.v1.WebhookClientConfig
type IoK8sAPIAdmissionregistrationV1WebhookClientConfig struct {
	// `caBundle` is a PEM encoded CA bundle which will be used to validate the webhook's server
	// certificate. If unspecified, system trust roots on the apiserver are used.
	CaBundle []byte                                             `json:"caBundle"`
	Service  OptIoK8sAPIAdmissionregistrationV1ServiceReference `json:"service"`
	// `url` gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly
	// one of `url` or `service` must be specified.
	// The `host` should not refer to a service running in the cluster; use the `service` field instead.
	// The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot
	// resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address.
	// Please note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care
	// to run this webhook on all hosts which run an apiserver which might need to make calls to this
	// webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.
	// The scheme must be "https"; the URL must begin with "https://".
	// A path is optional, and if present may be any string permissible in a URL. You may use the path to
	// pass an arbitrary string to the webhook, for example, a cluster identifier.
	// Attempting to use a user or basic auth e.g. "user:password@" is not allowed. Fragments ("#...")
	// and query parameters ("?...") are not allowed, either.
	URL OptString `json:"url"`
}

// GetCaBundle returns the value of CaBundle.
func (s *IoK8sAPIAdmissionregistrationV1WebhookClientConfig) GetCaBundle() []byte {
	return s.CaBundle
}

// GetService returns the value of Service.
func (s *IoK8sAPIAdmissionregistrationV1WebhookClientConfig) GetService() OptIoK8sAPIAdmissionregistrationV1ServiceReference {
	return s.Service
}

// GetURL returns the value of URL.
func (s *IoK8sAPIAdmissionregistrationV1WebhookClientConfig) GetURL() OptString {
	return s.URL
}

// SetCaBundle sets the value of CaBundle.
func (s *IoK8sAPIAdmissionregistrationV1WebhookClientConfig) SetCaBundle(val []byte) {
	s.CaBundle = val
}

// SetService sets the value of Service.
func (s *IoK8sAPIAdmissionregistrationV1WebhookClientConfig) SetService(val OptIoK8sAPIAdmissionregistrationV1ServiceReference) {
	s.Service = val
}

// SetURL sets the value of URL.
func (s *IoK8sAPIAdmissionregistrationV1WebhookClientConfig) SetURL(val OptString) {
	s.URL = val
}

// An API server instance reports the version it can decode and the version it encodes objects to
// when persisting objects in the backend.
// Ref: #/components/schemas/io.k8s.api.apiserverinternal.v1alpha1.ServerStorageVersion
type IoK8sAPIApiserverinternalV1alpha1ServerStorageVersion struct {
	// The ID of the reporting API server.
	ApiServerID OptString `json:"apiServerID"`
	// The API server can decode objects encoded in these versions. The encodingVersion must be included
	// in the decodableVersions.
	DecodableVersions []string `json:"decodableVersions"`
	// The API server encodes the object to this version when persisting it in the backend (e.g., etcd).
	EncodingVersion OptString `json:"encodingVersion"`
}

// GetApiServerID returns the value of ApiServerID.
func (s *IoK8sAPIApiserverinternalV1alpha1ServerStorageVersion) GetApiServerID() OptString {
	return s.ApiServerID
}

// GetDecodableVersions returns the value of DecodableVersions.
func (s *IoK8sAPIApiserverinternalV1alpha1ServerStorageVersion) GetDecodableVersions() []string {
	return s.DecodableVersions
}

// GetEncodingVersion returns the value of EncodingVersion.
func (s *IoK8sAPIApiserverinternalV1alpha1ServerStorageVersion) GetEncodingVersion() OptString {
	return s.EncodingVersion
}

// SetApiServerID sets the value of ApiServerID.
func (s *IoK8sAPIApiserverinternalV1alpha1ServerStorageVersion) SetApiServerID(val OptString) {
	s.ApiServerID = val
}

// SetDecodableVersions sets the value of DecodableVersions.
func (s *IoK8sAPIApiserverinternalV1alpha1ServerStorageVersion) SetDecodableVersions(val []string) {
	s.DecodableVersions = val
}

// SetEncodingVersion sets the value of EncodingVersion.
func (s *IoK8sAPIApiserverinternalV1alpha1ServerStorageVersion) SetEncodingVersion(val OptString) {
	s.EncodingVersion = val
}

// Storage version of a specific resource.
// Ref: #/components/schemas/io.k8s.api.apiserverinternal.v1alpha1.StorageVersion
type IoK8sAPIApiserverinternalV1alpha1StorageVersion struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                             `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta           `json:"metadata"`
	Spec     IoK8sAPIApiserverinternalV1alpha1StorageVersionSpec   `json:"spec"`
	Status   IoK8sAPIApiserverinternalV1alpha1StorageVersionStatus `json:"status"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersion) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersion) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersion) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetSpec returns the value of Spec.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersion) GetSpec() IoK8sAPIApiserverinternalV1alpha1StorageVersionSpec {
	return s.Spec
}

// GetStatus returns the value of Status.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersion) GetStatus() IoK8sAPIApiserverinternalV1alpha1StorageVersionStatus {
	return s.Status
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersion) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersion) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersion) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetSpec sets the value of Spec.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersion) SetSpec(val IoK8sAPIApiserverinternalV1alpha1StorageVersionSpec) {
	s.Spec = val
}

// SetStatus sets the value of Status.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersion) SetStatus(val IoK8sAPIApiserverinternalV1alpha1StorageVersionStatus) {
	s.Status = val
}

func (*IoK8sAPIApiserverinternalV1alpha1StorageVersion) readInternalApiserverV1alpha1StorageVersionRes() {
}
func (*IoK8sAPIApiserverinternalV1alpha1StorageVersion) readInternalApiserverV1alpha1StorageVersionStatusRes() {
}

// Describes the state of the storageVersion at a certain point.
// Ref: #/components/schemas/io.k8s.api.apiserverinternal.v1alpha1.StorageVersionCondition
type IoK8sAPIApiserverinternalV1alpha1StorageVersionCondition struct {
	LastTransitionTime OptIoK8sApimachineryPkgApisMetaV1Time `json:"lastTransitionTime"`
	// A human readable message indicating details about the transition.
	Message OptString `json:"message"`
	// If set, this represents the .metadata.generation that the condition was set based upon.
	ObservedGeneration OptInt64 `json:"observedGeneration"`
	// The reason for the condition's last transition.
	Reason string `json:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status string `json:"status"`
	// Type of the condition.
	Type string `json:"type"`
}

// GetLastTransitionTime returns the value of LastTransitionTime.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersionCondition) GetLastTransitionTime() OptIoK8sApimachineryPkgApisMetaV1Time {
	return s.LastTransitionTime
}

// GetMessage returns the value of Message.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersionCondition) GetMessage() OptString {
	return s.Message
}

// GetObservedGeneration returns the value of ObservedGeneration.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersionCondition) GetObservedGeneration() OptInt64 {
	return s.ObservedGeneration
}

// GetReason returns the value of Reason.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersionCondition) GetReason() string {
	return s.Reason
}

// GetStatus returns the value of Status.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersionCondition) GetStatus() string {
	return s.Status
}

// GetType returns the value of Type.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersionCondition) GetType() string {
	return s.Type
}

// SetLastTransitionTime sets the value of LastTransitionTime.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersionCondition) SetLastTransitionTime(val OptIoK8sApimachineryPkgApisMetaV1Time) {
	s.LastTransitionTime = val
}

// SetMessage sets the value of Message.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersionCondition) SetMessage(val OptString) {
	s.Message = val
}

// SetObservedGeneration sets the value of ObservedGeneration.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersionCondition) SetObservedGeneration(val OptInt64) {
	s.ObservedGeneration = val
}

// SetReason sets the value of Reason.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersionCondition) SetReason(val string) {
	s.Reason = val
}

// SetStatus sets the value of Status.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersionCondition) SetStatus(val string) {
	s.Status = val
}

// SetType sets the value of Type.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersionCondition) SetType(val string) {
	s.Type = val
}

// A list of StorageVersions.
// Ref: #/components/schemas/io.k8s.api.apiserverinternal.v1alpha1.StorageVersionList
type IoK8sAPIApiserverinternalV1alpha1StorageVersionList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Items holds a list of StorageVersion.
	Items []IoK8sAPIApiserverinternalV1alpha1StorageVersion `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersionList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersionList) GetItems() []IoK8sAPIApiserverinternalV1alpha1StorageVersion {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersionList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersionList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersionList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersionList) SetItems(val []IoK8sAPIApiserverinternalV1alpha1StorageVersion) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersionList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersionList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPIApiserverinternalV1alpha1StorageVersionList) listInternalApiserverV1alpha1StorageVersionRes() {
}

// StorageVersionSpec is an empty spec.
// Ref: #/components/schemas/io.k8s.api.apiserverinternal.v1alpha1.StorageVersionSpec
type IoK8sAPIApiserverinternalV1alpha1StorageVersionSpec struct{}

// API server instances report the versions they can decode and the version they encode objects to
// when persisting objects in the backend.
// Ref: #/components/schemas/io.k8s.api.apiserverinternal.v1alpha1.StorageVersionStatus
type IoK8sAPIApiserverinternalV1alpha1StorageVersionStatus struct {
	// If all API server instances agree on the same encoding storage version, then this field is set to
	// that version. Otherwise this field is left empty. API servers should finish updating its
	// storageVersionStatus entry before serving write operations, so that this field will be in sync
	// with the reality.
	CommonEncodingVersion OptString `json:"commonEncodingVersion"`
	// The latest available observations of the storageVersion's state.
	Conditions []IoK8sAPIApiserverinternalV1alpha1StorageVersionCondition `json:"conditions"`
	// The reported versions per API server instance.
	StorageVersions []IoK8sAPIApiserverinternalV1alpha1ServerStorageVersion `json:"storageVersions"`
}

// GetCommonEncodingVersion returns the value of CommonEncodingVersion.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersionStatus) GetCommonEncodingVersion() OptString {
	return s.CommonEncodingVersion
}

// GetConditions returns the value of Conditions.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersionStatus) GetConditions() []IoK8sAPIApiserverinternalV1alpha1StorageVersionCondition {
	return s.Conditions
}

// GetStorageVersions returns the value of StorageVersions.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersionStatus) GetStorageVersions() []IoK8sAPIApiserverinternalV1alpha1ServerStorageVersion {
	return s.StorageVersions
}

// SetCommonEncodingVersion sets the value of CommonEncodingVersion.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersionStatus) SetCommonEncodingVersion(val OptString) {
	s.CommonEncodingVersion = val
}

// SetConditions sets the value of Conditions.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersionStatus) SetConditions(val []IoK8sAPIApiserverinternalV1alpha1StorageVersionCondition) {
	s.Conditions = val
}

// SetStorageVersions sets the value of StorageVersions.
func (s *IoK8sAPIApiserverinternalV1alpha1StorageVersionStatus) SetStorageVersions(val []IoK8sAPIApiserverinternalV1alpha1ServerStorageVersion) {
	s.StorageVersions = val
}

// ControllerRevision implements an immutable snapshot of state data. Clients are responsible for
// serializing and deserializing the objects that contain their internal state. Once a
// ControllerRevision has been successfully created, it can not be updated. The API Server will fail
// validation of all requests that attempt to mutate the Data field. ControllerRevisions may, however,
//
//	be deleted. Note that, due to its use by both the DaemonSet and StatefulSet controllers for
//
// update and rollback, this object is beta. However, it may be subject to name and representation
// changes in future releases, and clients should not depend on its stability. It is primarily for
// internal use by controllers.
// Ref: #/components/schemas/io.k8s.api.apps.v1.ControllerRevision
type IoK8sAPIAppsV1ControllerRevision struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString                                `json:"apiVersion"`
	Data       *IoK8sApimachineryPkgRuntimeRawExtension `json:"data"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                   `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata"`
	// Revision indicates the revision of the state represented by Data.
	Revision int64 `json:"revision"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIAppsV1ControllerRevision) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetData returns the value of Data.
func (s *IoK8sAPIAppsV1ControllerRevision) GetData() *IoK8sApimachineryPkgRuntimeRawExtension {
	return s.Data
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIAppsV1ControllerRevision) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIAppsV1ControllerRevision) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetRevision returns the value of Revision.
func (s *IoK8sAPIAppsV1ControllerRevision) GetRevision() int64 {
	return s.Revision
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIAppsV1ControllerRevision) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetData sets the value of Data.
func (s *IoK8sAPIAppsV1ControllerRevision) SetData(val *IoK8sApimachineryPkgRuntimeRawExtension) {
	s.Data = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIAppsV1ControllerRevision) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIAppsV1ControllerRevision) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetRevision sets the value of Revision.
func (s *IoK8sAPIAppsV1ControllerRevision) SetRevision(val int64) {
	s.Revision = val
}

func (*IoK8sAPIAppsV1ControllerRevision) readAppsV1NamespacedControllerRevisionRes() {}

// ControllerRevisionList is a resource containing a list of ControllerRevision objects.
// Ref: #/components/schemas/io.k8s.api.apps.v1.ControllerRevisionList
type IoK8sAPIAppsV1ControllerRevisionList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Items is the list of ControllerRevisions.
	Items []IoK8sAPIAppsV1ControllerRevision `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIAppsV1ControllerRevisionList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPIAppsV1ControllerRevisionList) GetItems() []IoK8sAPIAppsV1ControllerRevision {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIAppsV1ControllerRevisionList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIAppsV1ControllerRevisionList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIAppsV1ControllerRevisionList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPIAppsV1ControllerRevisionList) SetItems(val []IoK8sAPIAppsV1ControllerRevision) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIAppsV1ControllerRevisionList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIAppsV1ControllerRevisionList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPIAppsV1ControllerRevisionList) listAppsV1ControllerRevisionForAllNamespacesRes() {}
func (*IoK8sAPIAppsV1ControllerRevisionList) listAppsV1NamespacedControllerRevisionRes()       {}

// DaemonSet represents the configuration of a daemon set.
// Ref: #/components/schemas/io.k8s.api.apps.v1.DaemonSet
type IoK8sAPIAppsV1DaemonSet struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                   `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata"`
	Spec     OptIoK8sAPIAppsV1DaemonSetSpec              `json:"spec"`
	Status   OptIoK8sAPIAppsV1DaemonSetStatus            `json:"status"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIAppsV1DaemonSet) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIAppsV1DaemonSet) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIAppsV1DaemonSet) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetSpec returns the value of Spec.
func (s *IoK8sAPIAppsV1DaemonSet) GetSpec() OptIoK8sAPIAppsV1DaemonSetSpec {
	return s.Spec
}

// GetStatus returns the value of Status.
func (s *IoK8sAPIAppsV1DaemonSet) GetStatus() OptIoK8sAPIAppsV1DaemonSetStatus {
	return s.Status
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIAppsV1DaemonSet) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIAppsV1DaemonSet) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIAppsV1DaemonSet) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetSpec sets the value of Spec.
func (s *IoK8sAPIAppsV1DaemonSet) SetSpec(val OptIoK8sAPIAppsV1DaemonSetSpec) {
	s.Spec = val
}

// SetStatus sets the value of Status.
func (s *IoK8sAPIAppsV1DaemonSet) SetStatus(val OptIoK8sAPIAppsV1DaemonSetStatus) {
	s.Status = val
}

func (*IoK8sAPIAppsV1DaemonSet) readAppsV1NamespacedDaemonSetRes()       {}
func (*IoK8sAPIAppsV1DaemonSet) readAppsV1NamespacedDaemonSetStatusRes() {}

// DaemonSetCondition describes the state of a DaemonSet at a certain point.
// Ref: #/components/schemas/io.k8s.api.apps.v1.DaemonSetCondition
type IoK8sAPIAppsV1DaemonSetCondition struct {
	LastTransitionTime OptIoK8sApimachineryPkgApisMetaV1Time `json:"lastTransitionTime"`
	// A human readable message indicating details about the transition.
	Message OptString `json:"message"`
	// The reason for the condition's last transition.
	Reason OptString `json:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status string `json:"status"`
	// Type of DaemonSet condition.
	Type string `json:"type"`
}

// GetLastTransitionTime returns the value of LastTransitionTime.
func (s *IoK8sAPIAppsV1DaemonSetCondition) GetLastTransitionTime() OptIoK8sApimachineryPkgApisMetaV1Time {
	return s.LastTransitionTime
}

// GetMessage returns the value of Message.
func (s *IoK8sAPIAppsV1DaemonSetCondition) GetMessage() OptString {
	return s.Message
}

// GetReason returns the value of Reason.
func (s *IoK8sAPIAppsV1DaemonSetCondition) GetReason() OptString {
	return s.Reason
}

// GetStatus returns the value of Status.
func (s *IoK8sAPIAppsV1DaemonSetCondition) GetStatus() string {
	return s.Status
}

// GetType returns the value of Type.
func (s *IoK8sAPIAppsV1DaemonSetCondition) GetType() string {
	return s.Type
}

// SetLastTransitionTime sets the value of LastTransitionTime.
func (s *IoK8sAPIAppsV1DaemonSetCondition) SetLastTransitionTime(val OptIoK8sApimachineryPkgApisMetaV1Time) {
	s.LastTransitionTime = val
}

// SetMessage sets the value of Message.
func (s *IoK8sAPIAppsV1DaemonSetCondition) SetMessage(val OptString) {
	s.Message = val
}

// SetReason sets the value of Reason.
func (s *IoK8sAPIAppsV1DaemonSetCondition) SetReason(val OptString) {
	s.Reason = val
}

// SetStatus sets the value of Status.
func (s *IoK8sAPIAppsV1DaemonSetCondition) SetStatus(val string) {
	s.Status = val
}

// SetType sets the value of Type.
func (s *IoK8sAPIAppsV1DaemonSetCondition) SetType(val string) {
	s.Type = val
}

// DaemonSetList is a collection of daemon sets.
// Ref: #/components/schemas/io.k8s.api.apps.v1.DaemonSetList
type IoK8sAPIAppsV1DaemonSetList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// A list of daemon sets.
	Items []IoK8sAPIAppsV1DaemonSet `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIAppsV1DaemonSetList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPIAppsV1DaemonSetList) GetItems() []IoK8sAPIAppsV1DaemonSet {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIAppsV1DaemonSetList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIAppsV1DaemonSetList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIAppsV1DaemonSetList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPIAppsV1DaemonSetList) SetItems(val []IoK8sAPIAppsV1DaemonSet) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIAppsV1DaemonSetList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIAppsV1DaemonSetList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPIAppsV1DaemonSetList) listAppsV1DaemonSetForAllNamespacesRes() {}
func (*IoK8sAPIAppsV1DaemonSetList) listAppsV1NamespacedDaemonSetRes()       {}

// DaemonSetSpec is the specification of a daemon set.
// Ref: #/components/schemas/io.k8s.api.apps.v1.DaemonSetSpec
type IoK8sAPIAppsV1DaemonSetSpec struct {
	// The minimum number of seconds for which a newly created DaemonSet pod should be ready without any
	// of its container crashing, for it to be considered available. Defaults to 0 (pod will be
	// considered available as soon as it is ready).
	MinReadySeconds OptInt32 `json:"minReadySeconds"`
	// The number of old history to retain to allow rollback. This is a pointer to distinguish between
	// explicit zero and not specified. Defaults to 10.
	RevisionHistoryLimit OptInt32                                    `json:"revisionHistoryLimit"`
	Selector             IoK8sApimachineryPkgApisMetaV1LabelSelector `json:"selector"`
	Template             IoK8sAPICoreV1PodTemplateSpec               `json:"template"`
	UpdateStrategy       OptIoK8sAPIAppsV1DaemonSetUpdateStrategy    `json:"updateStrategy"`
}

// GetMinReadySeconds returns the value of MinReadySeconds.
func (s *IoK8sAPIAppsV1DaemonSetSpec) GetMinReadySeconds() OptInt32 {
	return s.MinReadySeconds
}

// GetRevisionHistoryLimit returns the value of RevisionHistoryLimit.
func (s *IoK8sAPIAppsV1DaemonSetSpec) GetRevisionHistoryLimit() OptInt32 {
	return s.RevisionHistoryLimit
}

// GetSelector returns the value of Selector.
func (s *IoK8sAPIAppsV1DaemonSetSpec) GetSelector() IoK8sApimachineryPkgApisMetaV1LabelSelector {
	return s.Selector
}

// GetTemplate returns the value of Template.
func (s *IoK8sAPIAppsV1DaemonSetSpec) GetTemplate() IoK8sAPICoreV1PodTemplateSpec {
	return s.Template
}

// GetUpdateStrategy returns the value of UpdateStrategy.
func (s *IoK8sAPIAppsV1DaemonSetSpec) GetUpdateStrategy() OptIoK8sAPIAppsV1DaemonSetUpdateStrategy {
	return s.UpdateStrategy
}

// SetMinReadySeconds sets the value of MinReadySeconds.
func (s *IoK8sAPIAppsV1DaemonSetSpec) SetMinReadySeconds(val OptInt32) {
	s.MinReadySeconds = val
}

// SetRevisionHistoryLimit sets the value of RevisionHistoryLimit.
func (s *IoK8sAPIAppsV1DaemonSetSpec) SetRevisionHistoryLimit(val OptInt32) {
	s.RevisionHistoryLimit = val
}

// SetSelector sets the value of Selector.
func (s *IoK8sAPIAppsV1DaemonSetSpec) SetSelector(val IoK8sApimachineryPkgApisMetaV1LabelSelector) {
	s.Selector = val
}

// SetTemplate sets the value of Template.
func (s *IoK8sAPIAppsV1DaemonSetSpec) SetTemplate(val IoK8sAPICoreV1PodTemplateSpec) {
	s.Template = val
}

// SetUpdateStrategy sets the value of UpdateStrategy.
func (s *IoK8sAPIAppsV1DaemonSetSpec) SetUpdateStrategy(val OptIoK8sAPIAppsV1DaemonSetUpdateStrategy) {
	s.UpdateStrategy = val
}

// DaemonSetStatus represents the current status of a daemon set.
// Ref: #/components/schemas/io.k8s.api.apps.v1.DaemonSetStatus
type IoK8sAPIAppsV1DaemonSetStatus struct {
	// Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a
	// collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
	CollisionCount OptInt32 `json:"collisionCount"`
	// Represents the latest available observations of a DaemonSet's current state.
	Conditions []IoK8sAPIAppsV1DaemonSetCondition `json:"conditions"`
	// The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod.
	// More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/.
	CurrentNumberScheduled int32 `json:"currentNumberScheduled"`
	// The total number of nodes that should be running the daemon pod (including nodes correctly running
	// the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/.
	DesiredNumberScheduled int32 `json:"desiredNumberScheduled"`
	// The number of nodes that should be running the daemon pod and have one or more of the daemon pod
	// running and available (ready for at least spec.minReadySeconds).
	NumberAvailable OptInt32 `json:"numberAvailable"`
	// The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod.
	// More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/.
	NumberMisscheduled int32 `json:"numberMisscheduled"`
	// NumberReady is the number of nodes that should be running the daemon pod and have one or more of
	// the daemon pod running with a Ready Condition.
	NumberReady int32 `json:"numberReady"`
	// The number of nodes that should be running the daemon pod and have none of the daemon pod running
	// and available (ready for at least spec.minReadySeconds).
	NumberUnavailable OptInt32 `json:"numberUnavailable"`
	// The most recent generation observed by the daemon set controller.
	ObservedGeneration OptInt64 `json:"observedGeneration"`
	// The total number of nodes that are running updated daemon pod.
	UpdatedNumberScheduled OptInt32 `json:"updatedNumberScheduled"`
}

// GetCollisionCount returns the value of CollisionCount.
func (s *IoK8sAPIAppsV1DaemonSetStatus) GetCollisionCount() OptInt32 {
	return s.CollisionCount
}

// GetConditions returns the value of Conditions.
func (s *IoK8sAPIAppsV1DaemonSetStatus) GetConditions() []IoK8sAPIAppsV1DaemonSetCondition {
	return s.Conditions
}

// GetCurrentNumberScheduled returns the value of CurrentNumberScheduled.
func (s *IoK8sAPIAppsV1DaemonSetStatus) GetCurrentNumberScheduled() int32 {
	return s.CurrentNumberScheduled
}

// GetDesiredNumberScheduled returns the value of DesiredNumberScheduled.
func (s *IoK8sAPIAppsV1DaemonSetStatus) GetDesiredNumberScheduled() int32 {
	return s.DesiredNumberScheduled
}

// GetNumberAvailable returns the value of NumberAvailable.
func (s *IoK8sAPIAppsV1DaemonSetStatus) GetNumberAvailable() OptInt32 {
	return s.NumberAvailable
}

// GetNumberMisscheduled returns the value of NumberMisscheduled.
func (s *IoK8sAPIAppsV1DaemonSetStatus) GetNumberMisscheduled() int32 {
	return s.NumberMisscheduled
}

// GetNumberReady returns the value of NumberReady.
func (s *IoK8sAPIAppsV1DaemonSetStatus) GetNumberReady() int32 {
	return s.NumberReady
}

// GetNumberUnavailable returns the value of NumberUnavailable.
func (s *IoK8sAPIAppsV1DaemonSetStatus) GetNumberUnavailable() OptInt32 {
	return s.NumberUnavailable
}

// GetObservedGeneration returns the value of ObservedGeneration.
func (s *IoK8sAPIAppsV1DaemonSetStatus) GetObservedGeneration() OptInt64 {
	return s.ObservedGeneration
}

// GetUpdatedNumberScheduled returns the value of UpdatedNumberScheduled.
func (s *IoK8sAPIAppsV1DaemonSetStatus) GetUpdatedNumberScheduled() OptInt32 {
	return s.UpdatedNumberScheduled
}

// SetCollisionCount sets the value of CollisionCount.
func (s *IoK8sAPIAppsV1DaemonSetStatus) SetCollisionCount(val OptInt32) {
	s.CollisionCount = val
}

// SetConditions sets the value of Conditions.
func (s *IoK8sAPIAppsV1DaemonSetStatus) SetConditions(val []IoK8sAPIAppsV1DaemonSetCondition) {
	s.Conditions = val
}

// SetCurrentNumberScheduled sets the value of CurrentNumberScheduled.
func (s *IoK8sAPIAppsV1DaemonSetStatus) SetCurrentNumberScheduled(val int32) {
	s.CurrentNumberScheduled = val
}

// SetDesiredNumberScheduled sets the value of DesiredNumberScheduled.
func (s *IoK8sAPIAppsV1DaemonSetStatus) SetDesiredNumberScheduled(val int32) {
	s.DesiredNumberScheduled = val
}

// SetNumberAvailable sets the value of NumberAvailable.
func (s *IoK8sAPIAppsV1DaemonSetStatus) SetNumberAvailable(val OptInt32) {
	s.NumberAvailable = val
}

// SetNumberMisscheduled sets the value of NumberMisscheduled.
func (s *IoK8sAPIAppsV1DaemonSetStatus) SetNumberMisscheduled(val int32) {
	s.NumberMisscheduled = val
}

// SetNumberReady sets the value of NumberReady.
func (s *IoK8sAPIAppsV1DaemonSetStatus) SetNumberReady(val int32) {
	s.NumberReady = val
}

// SetNumberUnavailable sets the value of NumberUnavailable.
func (s *IoK8sAPIAppsV1DaemonSetStatus) SetNumberUnavailable(val OptInt32) {
	s.NumberUnavailable = val
}

// SetObservedGeneration sets the value of ObservedGeneration.
func (s *IoK8sAPIAppsV1DaemonSetStatus) SetObservedGeneration(val OptInt64) {
	s.ObservedGeneration = val
}

// SetUpdatedNumberScheduled sets the value of UpdatedNumberScheduled.
func (s *IoK8sAPIAppsV1DaemonSetStatus) SetUpdatedNumberScheduled(val OptInt32) {
	s.UpdatedNumberScheduled = val
}

// DaemonSetUpdateStrategy is a struct used to control the update strategy for a DaemonSet.
// Ref: #/components/schemas/io.k8s.api.apps.v1.DaemonSetUpdateStrategy
type IoK8sAPIAppsV1DaemonSetUpdateStrategy struct {
	RollingUpdate OptIoK8sAPIAppsV1RollingUpdateDaemonSet `json:"rollingUpdate"`
	// Type of daemon set update. Can be "RollingUpdate" or "OnDelete". Default is RollingUpdate.
	Type OptString `json:"type"`
}

// GetRollingUpdate returns the value of RollingUpdate.
func (s *IoK8sAPIAppsV1DaemonSetUpdateStrategy) GetRollingUpdate() OptIoK8sAPIAppsV1RollingUpdateDaemonSet {
	return s.RollingUpdate
}

// GetType returns the value of Type.
func (s *IoK8sAPIAppsV1DaemonSetUpdateStrategy) GetType() OptString {
	return s.Type
}

// SetRollingUpdate sets the value of RollingUpdate.
func (s *IoK8sAPIAppsV1DaemonSetUpdateStrategy) SetRollingUpdate(val OptIoK8sAPIAppsV1RollingUpdateDaemonSet) {
	s.RollingUpdate = val
}

// SetType sets the value of Type.
func (s *IoK8sAPIAppsV1DaemonSetUpdateStrategy) SetType(val OptString) {
	s.Type = val
}

// Deployment enables declarative updates for Pods and ReplicaSets.
// Ref: #/components/schemas/io.k8s.api.apps.v1.Deployment
type IoK8sAPIAppsV1Deployment struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                   `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata"`
	Spec     OptIoK8sAPIAppsV1DeploymentSpec             `json:"spec"`
	Status   OptIoK8sAPIAppsV1DeploymentStatus           `json:"status"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIAppsV1Deployment) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIAppsV1Deployment) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIAppsV1Deployment) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetSpec returns the value of Spec.
func (s *IoK8sAPIAppsV1Deployment) GetSpec() OptIoK8sAPIAppsV1DeploymentSpec {
	return s.Spec
}

// GetStatus returns the value of Status.
func (s *IoK8sAPIAppsV1Deployment) GetStatus() OptIoK8sAPIAppsV1DeploymentStatus {
	return s.Status
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIAppsV1Deployment) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIAppsV1Deployment) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIAppsV1Deployment) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetSpec sets the value of Spec.
func (s *IoK8sAPIAppsV1Deployment) SetSpec(val OptIoK8sAPIAppsV1DeploymentSpec) {
	s.Spec = val
}

// SetStatus sets the value of Status.
func (s *IoK8sAPIAppsV1Deployment) SetStatus(val OptIoK8sAPIAppsV1DeploymentStatus) {
	s.Status = val
}

func (*IoK8sAPIAppsV1Deployment) readAppsV1NamespacedDeploymentRes()       {}
func (*IoK8sAPIAppsV1Deployment) readAppsV1NamespacedDeploymentStatusRes() {}

// DeploymentCondition describes the state of a deployment at a certain point.
// Ref: #/components/schemas/io.k8s.api.apps.v1.DeploymentCondition
type IoK8sAPIAppsV1DeploymentCondition struct {
	LastTransitionTime OptIoK8sApimachineryPkgApisMetaV1Time `json:"lastTransitionTime"`
	LastUpdateTime     OptIoK8sApimachineryPkgApisMetaV1Time `json:"lastUpdateTime"`
	// A human readable message indicating details about the transition.
	Message OptString `json:"message"`
	// The reason for the condition's last transition.
	Reason OptString `json:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status string `json:"status"`
	// Type of deployment condition.
	Type string `json:"type"`
}

// GetLastTransitionTime returns the value of LastTransitionTime.
func (s *IoK8sAPIAppsV1DeploymentCondition) GetLastTransitionTime() OptIoK8sApimachineryPkgApisMetaV1Time {
	return s.LastTransitionTime
}

// GetLastUpdateTime returns the value of LastUpdateTime.
func (s *IoK8sAPIAppsV1DeploymentCondition) GetLastUpdateTime() OptIoK8sApimachineryPkgApisMetaV1Time {
	return s.LastUpdateTime
}

// GetMessage returns the value of Message.
func (s *IoK8sAPIAppsV1DeploymentCondition) GetMessage() OptString {
	return s.Message
}

// GetReason returns the value of Reason.
func (s *IoK8sAPIAppsV1DeploymentCondition) GetReason() OptString {
	return s.Reason
}

// GetStatus returns the value of Status.
func (s *IoK8sAPIAppsV1DeploymentCondition) GetStatus() string {
	return s.Status
}

// GetType returns the value of Type.
func (s *IoK8sAPIAppsV1DeploymentCondition) GetType() string {
	return s.Type
}

// SetLastTransitionTime sets the value of LastTransitionTime.
func (s *IoK8sAPIAppsV1DeploymentCondition) SetLastTransitionTime(val OptIoK8sApimachineryPkgApisMetaV1Time) {
	s.LastTransitionTime = val
}

// SetLastUpdateTime sets the value of LastUpdateTime.
func (s *IoK8sAPIAppsV1DeploymentCondition) SetLastUpdateTime(val OptIoK8sApimachineryPkgApisMetaV1Time) {
	s.LastUpdateTime = val
}

// SetMessage sets the value of Message.
func (s *IoK8sAPIAppsV1DeploymentCondition) SetMessage(val OptString) {
	s.Message = val
}

// SetReason sets the value of Reason.
func (s *IoK8sAPIAppsV1DeploymentCondition) SetReason(val OptString) {
	s.Reason = val
}

// SetStatus sets the value of Status.
func (s *IoK8sAPIAppsV1DeploymentCondition) SetStatus(val string) {
	s.Status = val
}

// SetType sets the value of Type.
func (s *IoK8sAPIAppsV1DeploymentCondition) SetType(val string) {
	s.Type = val
}

// DeploymentList is a list of Deployments.
// Ref: #/components/schemas/io.k8s.api.apps.v1.DeploymentList
type IoK8sAPIAppsV1DeploymentList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Items is the list of Deployments.
	Items []IoK8sAPIAppsV1Deployment `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIAppsV1DeploymentList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPIAppsV1DeploymentList) GetItems() []IoK8sAPIAppsV1Deployment {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIAppsV1DeploymentList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIAppsV1DeploymentList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIAppsV1DeploymentList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPIAppsV1DeploymentList) SetItems(val []IoK8sAPIAppsV1Deployment) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIAppsV1DeploymentList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIAppsV1DeploymentList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPIAppsV1DeploymentList) listAppsV1DeploymentForAllNamespacesRes() {}
func (*IoK8sAPIAppsV1DeploymentList) listAppsV1NamespacedDeploymentRes()       {}

// DeploymentSpec is the specification of the desired behavior of the Deployment.
// Ref: #/components/schemas/io.k8s.api.apps.v1.DeploymentSpec
type IoK8sAPIAppsV1DeploymentSpec struct {
	// Minimum number of seconds for which a newly created pod should be ready without any of its
	// container crashing, for it to be considered available. Defaults to 0 (pod will be considered
	// available as soon as it is ready).
	MinReadySeconds OptInt32 `json:"minReadySeconds"`
	// Indicates that the deployment is paused.
	Paused OptBool `json:"paused"`
	// The maximum time in seconds for a deployment to make progress before it is considered to be failed.
	//  The deployment controller will continue to process failed deployments and a condition with a
	// ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will
	// not be estimated during the time a deployment is paused. Defaults to 600s.
	ProgressDeadlineSeconds OptInt32 `json:"progressDeadlineSeconds"`
	// Number of desired pods. This is a pointer to distinguish between explicit zero and not specified.
	// Defaults to 1.
	Replicas OptInt32 `json:"replicas"`
	// The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish
	// between explicit zero and not specified. Defaults to 10.
	RevisionHistoryLimit OptInt32                                    `json:"revisionHistoryLimit"`
	Selector             IoK8sApimachineryPkgApisMetaV1LabelSelector `json:"selector"`
	Strategy             OptIoK8sAPIAppsV1DeploymentStrategy         `json:"strategy"`
	Template             IoK8sAPICoreV1PodTemplateSpec               `json:"template"`
}

// GetMinReadySeconds returns the value of MinReadySeconds.
func (s *IoK8sAPIAppsV1DeploymentSpec) GetMinReadySeconds() OptInt32 {
	return s.MinReadySeconds
}

// GetPaused returns the value of Paused.
func (s *IoK8sAPIAppsV1DeploymentSpec) GetPaused() OptBool {
	return s.Paused
}

// GetProgressDeadlineSeconds returns the value of ProgressDeadlineSeconds.
func (s *IoK8sAPIAppsV1DeploymentSpec) GetProgressDeadlineSeconds() OptInt32 {
	return s.ProgressDeadlineSeconds
}

// GetReplicas returns the value of Replicas.
func (s *IoK8sAPIAppsV1DeploymentSpec) GetReplicas() OptInt32 {
	return s.Replicas
}

// GetRevisionHistoryLimit returns the value of RevisionHistoryLimit.
func (s *IoK8sAPIAppsV1DeploymentSpec) GetRevisionHistoryLimit() OptInt32 {
	return s.RevisionHistoryLimit
}

// GetSelector returns the value of Selector.
func (s *IoK8sAPIAppsV1DeploymentSpec) GetSelector() IoK8sApimachineryPkgApisMetaV1LabelSelector {
	return s.Selector
}

// GetStrategy returns the value of Strategy.
func (s *IoK8sAPIAppsV1DeploymentSpec) GetStrategy() OptIoK8sAPIAppsV1DeploymentStrategy {
	return s.Strategy
}

// GetTemplate returns the value of Template.
func (s *IoK8sAPIAppsV1DeploymentSpec) GetTemplate() IoK8sAPICoreV1PodTemplateSpec {
	return s.Template
}

// SetMinReadySeconds sets the value of MinReadySeconds.
func (s *IoK8sAPIAppsV1DeploymentSpec) SetMinReadySeconds(val OptInt32) {
	s.MinReadySeconds = val
}

// SetPaused sets the value of Paused.
func (s *IoK8sAPIAppsV1DeploymentSpec) SetPaused(val OptBool) {
	s.Paused = val
}

// SetProgressDeadlineSeconds sets the value of ProgressDeadlineSeconds.
func (s *IoK8sAPIAppsV1DeploymentSpec) SetProgressDeadlineSeconds(val OptInt32) {
	s.ProgressDeadlineSeconds = val
}

// SetReplicas sets the value of Replicas.
func (s *IoK8sAPIAppsV1DeploymentSpec) SetReplicas(val OptInt32) {
	s.Replicas = val
}

// SetRevisionHistoryLimit sets the value of RevisionHistoryLimit.
func (s *IoK8sAPIAppsV1DeploymentSpec) SetRevisionHistoryLimit(val OptInt32) {
	s.RevisionHistoryLimit = val
}

// SetSelector sets the value of Selector.
func (s *IoK8sAPIAppsV1DeploymentSpec) SetSelector(val IoK8sApimachineryPkgApisMetaV1LabelSelector) {
	s.Selector = val
}

// SetStrategy sets the value of Strategy.
func (s *IoK8sAPIAppsV1DeploymentSpec) SetStrategy(val OptIoK8sAPIAppsV1DeploymentStrategy) {
	s.Strategy = val
}

// SetTemplate sets the value of Template.
func (s *IoK8sAPIAppsV1DeploymentSpec) SetTemplate(val IoK8sAPICoreV1PodTemplateSpec) {
	s.Template = val
}

// DeploymentStatus is the most recently observed status of the Deployment.
// Ref: #/components/schemas/io.k8s.api.apps.v1.DeploymentStatus
type IoK8sAPIAppsV1DeploymentStatus struct {
	// Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
	AvailableReplicas OptInt32 `json:"availableReplicas"`
	// Count of hash collisions for the Deployment. The Deployment controller uses this field as a
	// collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.
	CollisionCount OptInt32 `json:"collisionCount"`
	// Represents the latest available observations of a deployment's current state.
	Conditions []IoK8sAPIAppsV1DeploymentCondition `json:"conditions"`
	// The generation observed by the deployment controller.
	ObservedGeneration OptInt64 `json:"observedGeneration"`
	// ReadyReplicas is the number of pods targeted by this Deployment with a Ready Condition.
	ReadyReplicas OptInt32 `json:"readyReplicas"`
	// Total number of non-terminated pods targeted by this deployment (their labels match the selector).
	Replicas OptInt32 `json:"replicas"`
	// Total number of unavailable pods targeted by this deployment. This is the total number of pods
	// that are still required for the deployment to have 100% available capacity. They may either be
	// pods that are running but not yet available or pods that still have not been created.
	UnavailableReplicas OptInt32 `json:"unavailableReplicas"`
	// Total number of non-terminated pods targeted by this deployment that have the desired template
	// spec.
	UpdatedReplicas OptInt32 `json:"updatedReplicas"`
}

// GetAvailableReplicas returns the value of AvailableReplicas.
func (s *IoK8sAPIAppsV1DeploymentStatus) GetAvailableReplicas() OptInt32 {
	return s.AvailableReplicas
}

// GetCollisionCount returns the value of CollisionCount.
func (s *IoK8sAPIAppsV1DeploymentStatus) GetCollisionCount() OptInt32 {
	return s.CollisionCount
}

// GetConditions returns the value of Conditions.
func (s *IoK8sAPIAppsV1DeploymentStatus) GetConditions() []IoK8sAPIAppsV1DeploymentCondition {
	return s.Conditions
}

// GetObservedGeneration returns the value of ObservedGeneration.
func (s *IoK8sAPIAppsV1DeploymentStatus) GetObservedGeneration() OptInt64 {
	return s.ObservedGeneration
}

// GetReadyReplicas returns the value of ReadyReplicas.
func (s *IoK8sAPIAppsV1DeploymentStatus) GetReadyReplicas() OptInt32 {
	return s.ReadyReplicas
}

// GetReplicas returns the value of Replicas.
func (s *IoK8sAPIAppsV1DeploymentStatus) GetReplicas() OptInt32 {
	return s.Replicas
}

// GetUnavailableReplicas returns the value of UnavailableReplicas.
func (s *IoK8sAPIAppsV1DeploymentStatus) GetUnavailableReplicas() OptInt32 {
	return s.UnavailableReplicas
}

// GetUpdatedReplicas returns the value of UpdatedReplicas.
func (s *IoK8sAPIAppsV1DeploymentStatus) GetUpdatedReplicas() OptInt32 {
	return s.UpdatedReplicas
}

// SetAvailableReplicas sets the value of AvailableReplicas.
func (s *IoK8sAPIAppsV1DeploymentStatus) SetAvailableReplicas(val OptInt32) {
	s.AvailableReplicas = val
}

// SetCollisionCount sets the value of CollisionCount.
func (s *IoK8sAPIAppsV1DeploymentStatus) SetCollisionCount(val OptInt32) {
	s.CollisionCount = val
}

// SetConditions sets the value of Conditions.
func (s *IoK8sAPIAppsV1DeploymentStatus) SetConditions(val []IoK8sAPIAppsV1DeploymentCondition) {
	s.Conditions = val
}

// SetObservedGeneration sets the value of ObservedGeneration.
func (s *IoK8sAPIAppsV1DeploymentStatus) SetObservedGeneration(val OptInt64) {
	s.ObservedGeneration = val
}

// SetReadyReplicas sets the value of ReadyReplicas.
func (s *IoK8sAPIAppsV1DeploymentStatus) SetReadyReplicas(val OptInt32) {
	s.ReadyReplicas = val
}

// SetReplicas sets the value of Replicas.
func (s *IoK8sAPIAppsV1DeploymentStatus) SetReplicas(val OptInt32) {
	s.Replicas = val
}

// SetUnavailableReplicas sets the value of UnavailableReplicas.
func (s *IoK8sAPIAppsV1DeploymentStatus) SetUnavailableReplicas(val OptInt32) {
	s.UnavailableReplicas = val
}

// SetUpdatedReplicas sets the value of UpdatedReplicas.
func (s *IoK8sAPIAppsV1DeploymentStatus) SetUpdatedReplicas(val OptInt32) {
	s.UpdatedReplicas = val
}

// DeploymentStrategy describes how to replace existing pods with new ones.
// Ref: #/components/schemas/io.k8s.api.apps.v1.DeploymentStrategy
type IoK8sAPIAppsV1DeploymentStrategy struct {
	RollingUpdate OptIoK8sAPIAppsV1RollingUpdateDeployment `json:"rollingUpdate"`
	// Type of deployment. Can be "Recreate" or "RollingUpdate". Default is RollingUpdate.
	Type OptString `json:"type"`
}

// GetRollingUpdate returns the value of RollingUpdate.
func (s *IoK8sAPIAppsV1DeploymentStrategy) GetRollingUpdate() OptIoK8sAPIAppsV1RollingUpdateDeployment {
	return s.RollingUpdate
}

// GetType returns the value of Type.
func (s *IoK8sAPIAppsV1DeploymentStrategy) GetType() OptString {
	return s.Type
}

// SetRollingUpdate sets the value of RollingUpdate.
func (s *IoK8sAPIAppsV1DeploymentStrategy) SetRollingUpdate(val OptIoK8sAPIAppsV1RollingUpdateDeployment) {
	s.RollingUpdate = val
}

// SetType sets the value of Type.
func (s *IoK8sAPIAppsV1DeploymentStrategy) SetType(val OptString) {
	s.Type = val
}

// ReplicaSet ensures that a specified number of pod replicas are running at any given time.
// Ref: #/components/schemas/io.k8s.api.apps.v1.ReplicaSet
type IoK8sAPIAppsV1ReplicaSet struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                   `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata"`
	Spec     OptIoK8sAPIAppsV1ReplicaSetSpec             `json:"spec"`
	Status   OptIoK8sAPIAppsV1ReplicaSetStatus           `json:"status"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIAppsV1ReplicaSet) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIAppsV1ReplicaSet) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIAppsV1ReplicaSet) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetSpec returns the value of Spec.
func (s *IoK8sAPIAppsV1ReplicaSet) GetSpec() OptIoK8sAPIAppsV1ReplicaSetSpec {
	return s.Spec
}

// GetStatus returns the value of Status.
func (s *IoK8sAPIAppsV1ReplicaSet) GetStatus() OptIoK8sAPIAppsV1ReplicaSetStatus {
	return s.Status
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIAppsV1ReplicaSet) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIAppsV1ReplicaSet) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIAppsV1ReplicaSet) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetSpec sets the value of Spec.
func (s *IoK8sAPIAppsV1ReplicaSet) SetSpec(val OptIoK8sAPIAppsV1ReplicaSetSpec) {
	s.Spec = val
}

// SetStatus sets the value of Status.
func (s *IoK8sAPIAppsV1ReplicaSet) SetStatus(val OptIoK8sAPIAppsV1ReplicaSetStatus) {
	s.Status = val
}

func (*IoK8sAPIAppsV1ReplicaSet) readAppsV1NamespacedReplicaSetRes()       {}
func (*IoK8sAPIAppsV1ReplicaSet) readAppsV1NamespacedReplicaSetStatusRes() {}

// ReplicaSetCondition describes the state of a replica set at a certain point.
// Ref: #/components/schemas/io.k8s.api.apps.v1.ReplicaSetCondition
type IoK8sAPIAppsV1ReplicaSetCondition struct {
	LastTransitionTime OptIoK8sApimachineryPkgApisMetaV1Time `json:"lastTransitionTime"`
	// A human readable message indicating details about the transition.
	Message OptString `json:"message"`
	// The reason for the condition's last transition.
	Reason OptString `json:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status string `json:"status"`
	// Type of replica set condition.
	Type string `json:"type"`
}

// GetLastTransitionTime returns the value of LastTransitionTime.
func (s *IoK8sAPIAppsV1ReplicaSetCondition) GetLastTransitionTime() OptIoK8sApimachineryPkgApisMetaV1Time {
	return s.LastTransitionTime
}

// GetMessage returns the value of Message.
func (s *IoK8sAPIAppsV1ReplicaSetCondition) GetMessage() OptString {
	return s.Message
}

// GetReason returns the value of Reason.
func (s *IoK8sAPIAppsV1ReplicaSetCondition) GetReason() OptString {
	return s.Reason
}

// GetStatus returns the value of Status.
func (s *IoK8sAPIAppsV1ReplicaSetCondition) GetStatus() string {
	return s.Status
}

// GetType returns the value of Type.
func (s *IoK8sAPIAppsV1ReplicaSetCondition) GetType() string {
	return s.Type
}

// SetLastTransitionTime sets the value of LastTransitionTime.
func (s *IoK8sAPIAppsV1ReplicaSetCondition) SetLastTransitionTime(val OptIoK8sApimachineryPkgApisMetaV1Time) {
	s.LastTransitionTime = val
}

// SetMessage sets the value of Message.
func (s *IoK8sAPIAppsV1ReplicaSetCondition) SetMessage(val OptString) {
	s.Message = val
}

// SetReason sets the value of Reason.
func (s *IoK8sAPIAppsV1ReplicaSetCondition) SetReason(val OptString) {
	s.Reason = val
}

// SetStatus sets the value of Status.
func (s *IoK8sAPIAppsV1ReplicaSetCondition) SetStatus(val string) {
	s.Status = val
}

// SetType sets the value of Type.
func (s *IoK8sAPIAppsV1ReplicaSetCondition) SetType(val string) {
	s.Type = val
}

// ReplicaSetList is a collection of ReplicaSets.
// Ref: #/components/schemas/io.k8s.api.apps.v1.ReplicaSetList
type IoK8sAPIAppsV1ReplicaSetList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// List of ReplicaSets. More info: https://kubernetes.
	// io/docs/concepts/workloads/controllers/replicationcontroller.
	Items []IoK8sAPIAppsV1ReplicaSet `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIAppsV1ReplicaSetList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPIAppsV1ReplicaSetList) GetItems() []IoK8sAPIAppsV1ReplicaSet {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIAppsV1ReplicaSetList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIAppsV1ReplicaSetList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIAppsV1ReplicaSetList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPIAppsV1ReplicaSetList) SetItems(val []IoK8sAPIAppsV1ReplicaSet) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIAppsV1ReplicaSetList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIAppsV1ReplicaSetList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPIAppsV1ReplicaSetList) listAppsV1NamespacedReplicaSetRes()       {}
func (*IoK8sAPIAppsV1ReplicaSetList) listAppsV1ReplicaSetForAllNamespacesRes() {}

// ReplicaSetSpec is the specification of a ReplicaSet.
// Ref: #/components/schemas/io.k8s.api.apps.v1.ReplicaSetSpec
type IoK8sAPIAppsV1ReplicaSetSpec struct {
	// Minimum number of seconds for which a newly created pod should be ready without any of its
	// container crashing, for it to be considered available. Defaults to 0 (pod will be considered
	// available as soon as it is ready).
	MinReadySeconds OptInt32 `json:"minReadySeconds"`
	// Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero
	// and unspecified. Defaults to 1. More info: https://kubernetes.
	// io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller.
	Replicas OptInt32                                    `json:"replicas"`
	Selector IoK8sApimachineryPkgApisMetaV1LabelSelector `json:"selector"`
	Template OptIoK8sAPICoreV1PodTemplateSpec            `json:"template"`
}

// GetMinReadySeconds returns the value of MinReadySeconds.
func (s *IoK8sAPIAppsV1ReplicaSetSpec) GetMinReadySeconds() OptInt32 {
	return s.MinReadySeconds
}

// GetReplicas returns the value of Replicas.
func (s *IoK8sAPIAppsV1ReplicaSetSpec) GetReplicas() OptInt32 {
	return s.Replicas
}

// GetSelector returns the value of Selector.
func (s *IoK8sAPIAppsV1ReplicaSetSpec) GetSelector() IoK8sApimachineryPkgApisMetaV1LabelSelector {
	return s.Selector
}

// GetTemplate returns the value of Template.
func (s *IoK8sAPIAppsV1ReplicaSetSpec) GetTemplate() OptIoK8sAPICoreV1PodTemplateSpec {
	return s.Template
}

// SetMinReadySeconds sets the value of MinReadySeconds.
func (s *IoK8sAPIAppsV1ReplicaSetSpec) SetMinReadySeconds(val OptInt32) {
	s.MinReadySeconds = val
}

// SetReplicas sets the value of Replicas.
func (s *IoK8sAPIAppsV1ReplicaSetSpec) SetReplicas(val OptInt32) {
	s.Replicas = val
}

// SetSelector sets the value of Selector.
func (s *IoK8sAPIAppsV1ReplicaSetSpec) SetSelector(val IoK8sApimachineryPkgApisMetaV1LabelSelector) {
	s.Selector = val
}

// SetTemplate sets the value of Template.
func (s *IoK8sAPIAppsV1ReplicaSetSpec) SetTemplate(val OptIoK8sAPICoreV1PodTemplateSpec) {
	s.Template = val
}

// ReplicaSetStatus represents the current status of a ReplicaSet.
// Ref: #/components/schemas/io.k8s.api.apps.v1.ReplicaSetStatus
type IoK8sAPIAppsV1ReplicaSetStatus struct {
	// The number of available replicas (ready for at least minReadySeconds) for this replica set.
	AvailableReplicas OptInt32 `json:"availableReplicas"`
	// Represents the latest available observations of a replica set's current state.
	Conditions []IoK8sAPIAppsV1ReplicaSetCondition `json:"conditions"`
	// The number of pods that have labels matching the labels of the pod template of the replicaset.
	FullyLabeledReplicas OptInt32 `json:"fullyLabeledReplicas"`
	// ObservedGeneration reflects the generation of the most recently observed ReplicaSet.
	ObservedGeneration OptInt64 `json:"observedGeneration"`
	// ReadyReplicas is the number of pods targeted by this ReplicaSet with a Ready Condition.
	ReadyReplicas OptInt32 `json:"readyReplicas"`
	// Replicas is the most recently oberved number of replicas. More info: https://kubernetes.
	// io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller.
	Replicas int32 `json:"replicas"`
}

// GetAvailableReplicas returns the value of AvailableReplicas.
func (s *IoK8sAPIAppsV1ReplicaSetStatus) GetAvailableReplicas() OptInt32 {
	return s.AvailableReplicas
}

// GetConditions returns the value of Conditions.
func (s *IoK8sAPIAppsV1ReplicaSetStatus) GetConditions() []IoK8sAPIAppsV1ReplicaSetCondition {
	return s.Conditions
}

// GetFullyLabeledReplicas returns the value of FullyLabeledReplicas.
func (s *IoK8sAPIAppsV1ReplicaSetStatus) GetFullyLabeledReplicas() OptInt32 {
	return s.FullyLabeledReplicas
}

// GetObservedGeneration returns the value of ObservedGeneration.
func (s *IoK8sAPIAppsV1ReplicaSetStatus) GetObservedGeneration() OptInt64 {
	return s.ObservedGeneration
}

// GetReadyReplicas returns the value of ReadyReplicas.
func (s *IoK8sAPIAppsV1ReplicaSetStatus) GetReadyReplicas() OptInt32 {
	return s.ReadyReplicas
}

// GetReplicas returns the value of Replicas.
func (s *IoK8sAPIAppsV1ReplicaSetStatus) GetReplicas() int32 {
	return s.Replicas
}

// SetAvailableReplicas sets the value of AvailableReplicas.
func (s *IoK8sAPIAppsV1ReplicaSetStatus) SetAvailableReplicas(val OptInt32) {
	s.AvailableReplicas = val
}

// SetConditions sets the value of Conditions.
func (s *IoK8sAPIAppsV1ReplicaSetStatus) SetConditions(val []IoK8sAPIAppsV1ReplicaSetCondition) {
	s.Conditions = val
}

// SetFullyLabeledReplicas sets the value of FullyLabeledReplicas.
func (s *IoK8sAPIAppsV1ReplicaSetStatus) SetFullyLabeledReplicas(val OptInt32) {
	s.FullyLabeledReplicas = val
}

// SetObservedGeneration sets the value of ObservedGeneration.
func (s *IoK8sAPIAppsV1ReplicaSetStatus) SetObservedGeneration(val OptInt64) {
	s.ObservedGeneration = val
}

// SetReadyReplicas sets the value of ReadyReplicas.
func (s *IoK8sAPIAppsV1ReplicaSetStatus) SetReadyReplicas(val OptInt32) {
	s.ReadyReplicas = val
}

// SetReplicas sets the value of Replicas.
func (s *IoK8sAPIAppsV1ReplicaSetStatus) SetReplicas(val int32) {
	s.Replicas = val
}

// Spec to control the desired behavior of daemon set rolling update.
// Ref: #/components/schemas/io.k8s.api.apps.v1.RollingUpdateDaemonSet
type IoK8sAPIAppsV1RollingUpdateDaemonSet struct {
	MaxSurge       OptIoK8sApimachineryPkgUtilIntstrIntOrString `json:"maxSurge"`
	MaxUnavailable OptIoK8sApimachineryPkgUtilIntstrIntOrString `json:"maxUnavailable"`
}

// GetMaxSurge returns the value of MaxSurge.
func (s *IoK8sAPIAppsV1RollingUpdateDaemonSet) GetMaxSurge() OptIoK8sApimachineryPkgUtilIntstrIntOrString {
	return s.MaxSurge
}

// GetMaxUnavailable returns the value of MaxUnavailable.
func (s *IoK8sAPIAppsV1RollingUpdateDaemonSet) GetMaxUnavailable() OptIoK8sApimachineryPkgUtilIntstrIntOrString {
	return s.MaxUnavailable
}

// SetMaxSurge sets the value of MaxSurge.
func (s *IoK8sAPIAppsV1RollingUpdateDaemonSet) SetMaxSurge(val OptIoK8sApimachineryPkgUtilIntstrIntOrString) {
	s.MaxSurge = val
}

// SetMaxUnavailable sets the value of MaxUnavailable.
func (s *IoK8sAPIAppsV1RollingUpdateDaemonSet) SetMaxUnavailable(val OptIoK8sApimachineryPkgUtilIntstrIntOrString) {
	s.MaxUnavailable = val
}

// Spec to control the desired behavior of rolling update.
// Ref: #/components/schemas/io.k8s.api.apps.v1.RollingUpdateDeployment
type IoK8sAPIAppsV1RollingUpdateDeployment struct {
	MaxSurge       OptIoK8sApimachineryPkgUtilIntstrIntOrString `json:"maxSurge"`
	MaxUnavailable OptIoK8sApimachineryPkgUtilIntstrIntOrString `json:"maxUnavailable"`
}

// GetMaxSurge returns the value of MaxSurge.
func (s *IoK8sAPIAppsV1RollingUpdateDeployment) GetMaxSurge() OptIoK8sApimachineryPkgUtilIntstrIntOrString {
	return s.MaxSurge
}

// GetMaxUnavailable returns the value of MaxUnavailable.
func (s *IoK8sAPIAppsV1RollingUpdateDeployment) GetMaxUnavailable() OptIoK8sApimachineryPkgUtilIntstrIntOrString {
	return s.MaxUnavailable
}

// SetMaxSurge sets the value of MaxSurge.
func (s *IoK8sAPIAppsV1RollingUpdateDeployment) SetMaxSurge(val OptIoK8sApimachineryPkgUtilIntstrIntOrString) {
	s.MaxSurge = val
}

// SetMaxUnavailable sets the value of MaxUnavailable.
func (s *IoK8sAPIAppsV1RollingUpdateDeployment) SetMaxUnavailable(val OptIoK8sApimachineryPkgUtilIntstrIntOrString) {
	s.MaxUnavailable = val
}

// RollingUpdateStatefulSetStrategy is used to communicate parameter for
// RollingUpdateStatefulSetStrategyType.
// Ref: #/components/schemas/io.k8s.api.apps.v1.RollingUpdateStatefulSetStrategy
type IoK8sAPIAppsV1RollingUpdateStatefulSetStrategy struct {
	// Partition indicates the ordinal at which the StatefulSet should be partitioned. Default value is 0.
	Partition OptInt32 `json:"partition"`
}

// GetPartition returns the value of Partition.
func (s *IoK8sAPIAppsV1RollingUpdateStatefulSetStrategy) GetPartition() OptInt32 {
	return s.Partition
}

// SetPartition sets the value of Partition.
func (s *IoK8sAPIAppsV1RollingUpdateStatefulSetStrategy) SetPartition(val OptInt32) {
	s.Partition = val
}

// StatefulSet represents a set of pods with consistent identities. Identities are defined as:
// - Network: A single stable DNS and hostname.
// - Storage: As many VolumeClaims as requested.
// The StatefulSet guarantees that a given network identity will always map to the same storage
// identity.
// Ref: #/components/schemas/io.k8s.api.apps.v1.StatefulSet
type IoK8sAPIAppsV1StatefulSet struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                   `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata"`
	Spec     OptIoK8sAPIAppsV1StatefulSetSpec            `json:"spec"`
	Status   OptIoK8sAPIAppsV1StatefulSetStatus          `json:"status"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIAppsV1StatefulSet) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIAppsV1StatefulSet) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIAppsV1StatefulSet) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetSpec returns the value of Spec.
func (s *IoK8sAPIAppsV1StatefulSet) GetSpec() OptIoK8sAPIAppsV1StatefulSetSpec {
	return s.Spec
}

// GetStatus returns the value of Status.
func (s *IoK8sAPIAppsV1StatefulSet) GetStatus() OptIoK8sAPIAppsV1StatefulSetStatus {
	return s.Status
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIAppsV1StatefulSet) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIAppsV1StatefulSet) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIAppsV1StatefulSet) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetSpec sets the value of Spec.
func (s *IoK8sAPIAppsV1StatefulSet) SetSpec(val OptIoK8sAPIAppsV1StatefulSetSpec) {
	s.Spec = val
}

// SetStatus sets the value of Status.
func (s *IoK8sAPIAppsV1StatefulSet) SetStatus(val OptIoK8sAPIAppsV1StatefulSetStatus) {
	s.Status = val
}

func (*IoK8sAPIAppsV1StatefulSet) readAppsV1NamespacedStatefulSetRes()       {}
func (*IoK8sAPIAppsV1StatefulSet) readAppsV1NamespacedStatefulSetStatusRes() {}

// StatefulSetCondition describes the state of a statefulset at a certain point.
// Ref: #/components/schemas/io.k8s.api.apps.v1.StatefulSetCondition
type IoK8sAPIAppsV1StatefulSetCondition struct {
	LastTransitionTime OptIoK8sApimachineryPkgApisMetaV1Time `json:"lastTransitionTime"`
	// A human readable message indicating details about the transition.
	Message OptString `json:"message"`
	// The reason for the condition's last transition.
	Reason OptString `json:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status string `json:"status"`
	// Type of statefulset condition.
	Type string `json:"type"`
}

// GetLastTransitionTime returns the value of LastTransitionTime.
func (s *IoK8sAPIAppsV1StatefulSetCondition) GetLastTransitionTime() OptIoK8sApimachineryPkgApisMetaV1Time {
	return s.LastTransitionTime
}

// GetMessage returns the value of Message.
func (s *IoK8sAPIAppsV1StatefulSetCondition) GetMessage() OptString {
	return s.Message
}

// GetReason returns the value of Reason.
func (s *IoK8sAPIAppsV1StatefulSetCondition) GetReason() OptString {
	return s.Reason
}

// GetStatus returns the value of Status.
func (s *IoK8sAPIAppsV1StatefulSetCondition) GetStatus() string {
	return s.Status
}

// GetType returns the value of Type.
func (s *IoK8sAPIAppsV1StatefulSetCondition) GetType() string {
	return s.Type
}

// SetLastTransitionTime sets the value of LastTransitionTime.
func (s *IoK8sAPIAppsV1StatefulSetCondition) SetLastTransitionTime(val OptIoK8sApimachineryPkgApisMetaV1Time) {
	s.LastTransitionTime = val
}

// SetMessage sets the value of Message.
func (s *IoK8sAPIAppsV1StatefulSetCondition) SetMessage(val OptString) {
	s.Message = val
}

// SetReason sets the value of Reason.
func (s *IoK8sAPIAppsV1StatefulSetCondition) SetReason(val OptString) {
	s.Reason = val
}

// SetStatus sets the value of Status.
func (s *IoK8sAPIAppsV1StatefulSetCondition) SetStatus(val string) {
	s.Status = val
}

// SetType sets the value of Type.
func (s *IoK8sAPIAppsV1StatefulSetCondition) SetType(val string) {
	s.Type = val
}

// StatefulSetList is a collection of StatefulSets.
// Ref: #/components/schemas/io.k8s.api.apps.v1.StatefulSetList
type IoK8sAPIAppsV1StatefulSetList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Items is the list of stateful sets.
	Items []IoK8sAPIAppsV1StatefulSet `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIAppsV1StatefulSetList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPIAppsV1StatefulSetList) GetItems() []IoK8sAPIAppsV1StatefulSet {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIAppsV1StatefulSetList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIAppsV1StatefulSetList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIAppsV1StatefulSetList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPIAppsV1StatefulSetList) SetItems(val []IoK8sAPIAppsV1StatefulSet) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIAppsV1StatefulSetList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIAppsV1StatefulSetList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPIAppsV1StatefulSetList) listAppsV1NamespacedStatefulSetRes()       {}
func (*IoK8sAPIAppsV1StatefulSetList) listAppsV1StatefulSetForAllNamespacesRes() {}

// A StatefulSetSpec is the specification of a StatefulSet.
// Ref: #/components/schemas/io.k8s.api.apps.v1.StatefulSetSpec
type IoK8sAPIAppsV1StatefulSetSpec struct {
	// Minimum number of seconds for which a newly created pod should be ready without any of its
	// container crashing for it to be considered available. Defaults to 0 (pod will be considered
	// available as soon as it is ready) This is an alpha field and requires enabling
	// StatefulSetMinReadySeconds feature gate.
	MinReadySeconds OptInt32 `json:"minReadySeconds"`
	// PodManagementPolicy controls how pods are created during initial scale up, when replacing pods on
	// nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in
	// increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready
	// before continuing. When scaling down, the pods are removed in the opposite order. The alternative
	// policy is `Parallel` which will create pods in parallel to match the desired scale without waiting,
	//  and on scale down will delete all pods at once.
	PodManagementPolicy OptString `json:"podManagementPolicy"`
	// Replicas is the desired number of replicas of the given Template. These are replicas in the sense
	// that they are instantiations of the same Template, but individual replicas also have a consistent
	// identity. If unspecified, defaults to 1.
	Replicas OptInt32 `json:"replicas"`
	// RevisionHistoryLimit is the maximum number of revisions that will be maintained in the
	// StatefulSet's revision history. The revision history consists of all revisions not represented by
	// a currently applied StatefulSetSpec version. The default value is 10.
	RevisionHistoryLimit OptInt32                                    `json:"revisionHistoryLimit"`
	Selector             IoK8sApimachineryPkgApisMetaV1LabelSelector `json:"selector"`
	// ServiceName is the name of the service that governs this StatefulSet. This service must exist
	// before the StatefulSet, and is responsible for the network identity of the set. Pods get
	// DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local
	// where "pod-specific-string" is managed by the StatefulSet controller.
	ServiceName    string                                     `json:"serviceName"`
	Template       IoK8sAPICoreV1PodTemplateSpec              `json:"template"`
	UpdateStrategy OptIoK8sAPIAppsV1StatefulSetUpdateStrategy `json:"updateStrategy"`
	// VolumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet
	// controller is responsible for mapping network identities to claims in a way that maintains the
	// identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount
	// in one container in the template. A claim in this list takes precedence over any volumes in the
	// template, with the same name.
	VolumeClaimTemplates []IoK8sAPICoreV1PersistentVolumeClaim `json:"volumeClaimTemplates"`
}

// GetMinReadySeconds returns the value of MinReadySeconds.
func (s *IoK8sAPIAppsV1StatefulSetSpec) GetMinReadySeconds() OptInt32 {
	return s.MinReadySeconds
}

// GetPodManagementPolicy returns the value of PodManagementPolicy.
func (s *IoK8sAPIAppsV1StatefulSetSpec) GetPodManagementPolicy() OptString {
	return s.PodManagementPolicy
}

// GetReplicas returns the value of Replicas.
func (s *IoK8sAPIAppsV1StatefulSetSpec) GetReplicas() OptInt32 {
	return s.Replicas
}

// GetRevisionHistoryLimit returns the value of RevisionHistoryLimit.
func (s *IoK8sAPIAppsV1StatefulSetSpec) GetRevisionHistoryLimit() OptInt32 {
	return s.RevisionHistoryLimit
}

// GetSelector returns the value of Selector.
func (s *IoK8sAPIAppsV1StatefulSetSpec) GetSelector() IoK8sApimachineryPkgApisMetaV1LabelSelector {
	return s.Selector
}

// GetServiceName returns the value of ServiceName.
func (s *IoK8sAPIAppsV1StatefulSetSpec) GetServiceName() string {
	return s.ServiceName
}

// GetTemplate returns the value of Template.
func (s *IoK8sAPIAppsV1StatefulSetSpec) GetTemplate() IoK8sAPICoreV1PodTemplateSpec {
	return s.Template
}

// GetUpdateStrategy returns the value of UpdateStrategy.
func (s *IoK8sAPIAppsV1StatefulSetSpec) GetUpdateStrategy() OptIoK8sAPIAppsV1StatefulSetUpdateStrategy {
	return s.UpdateStrategy
}

// GetVolumeClaimTemplates returns the value of VolumeClaimTemplates.
func (s *IoK8sAPIAppsV1StatefulSetSpec) GetVolumeClaimTemplates() []IoK8sAPICoreV1PersistentVolumeClaim {
	return s.VolumeClaimTemplates
}

// SetMinReadySeconds sets the value of MinReadySeconds.
func (s *IoK8sAPIAppsV1StatefulSetSpec) SetMinReadySeconds(val OptInt32) {
	s.MinReadySeconds = val
}

// SetPodManagementPolicy sets the value of PodManagementPolicy.
func (s *IoK8sAPIAppsV1StatefulSetSpec) SetPodManagementPolicy(val OptString) {
	s.PodManagementPolicy = val
}

// SetReplicas sets the value of Replicas.
func (s *IoK8sAPIAppsV1StatefulSetSpec) SetReplicas(val OptInt32) {
	s.Replicas = val
}

// SetRevisionHistoryLimit sets the value of RevisionHistoryLimit.
func (s *IoK8sAPIAppsV1StatefulSetSpec) SetRevisionHistoryLimit(val OptInt32) {
	s.RevisionHistoryLimit = val
}

// SetSelector sets the value of Selector.
func (s *IoK8sAPIAppsV1StatefulSetSpec) SetSelector(val IoK8sApimachineryPkgApisMetaV1LabelSelector) {
	s.Selector = val
}

// SetServiceName sets the value of ServiceName.
func (s *IoK8sAPIAppsV1StatefulSetSpec) SetServiceName(val string) {
	s.ServiceName = val
}

// SetTemplate sets the value of Template.
func (s *IoK8sAPIAppsV1StatefulSetSpec) SetTemplate(val IoK8sAPICoreV1PodTemplateSpec) {
	s.Template = val
}

// SetUpdateStrategy sets the value of UpdateStrategy.
func (s *IoK8sAPIAppsV1StatefulSetSpec) SetUpdateStrategy(val OptIoK8sAPIAppsV1StatefulSetUpdateStrategy) {
	s.UpdateStrategy = val
}

// SetVolumeClaimTemplates sets the value of VolumeClaimTemplates.
func (s *IoK8sAPIAppsV1StatefulSetSpec) SetVolumeClaimTemplates(val []IoK8sAPICoreV1PersistentVolumeClaim) {
	s.VolumeClaimTemplates = val
}

// StatefulSetStatus represents the current state of a StatefulSet.
// Ref: #/components/schemas/io.k8s.api.apps.v1.StatefulSetStatus
type IoK8sAPIAppsV1StatefulSetStatus struct {
	// Total number of available pods (ready for at least minReadySeconds) targeted by this statefulset.
	// This is a beta field and enabled/disabled by StatefulSetMinReadySeconds feature gate.
	AvailableReplicas int32 `json:"availableReplicas"`
	// CollisionCount is the count of hash collisions for the StatefulSet. The StatefulSet controller
	// uses this field as a collision avoidance mechanism when it needs to create the name for the newest
	// ControllerRevision.
	CollisionCount OptInt32 `json:"collisionCount"`
	// Represents the latest available observations of a statefulset's current state.
	Conditions []IoK8sAPIAppsV1StatefulSetCondition `json:"conditions"`
	// CurrentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet
	// version indicated by currentRevision.
	CurrentReplicas OptInt32 `json:"currentReplicas"`
	// CurrentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in
	// the sequence [0,currentReplicas).
	CurrentRevision OptString `json:"currentRevision"`
	// ObservedGeneration is the most recent generation observed for this StatefulSet. It corresponds to
	// the StatefulSet's generation, which is updated on mutation by the API Server.
	ObservedGeneration OptInt64 `json:"observedGeneration"`
	// ReadyReplicas is the number of pods created for this StatefulSet with a Ready Condition.
	ReadyReplicas OptInt32 `json:"readyReplicas"`
	// Replicas is the number of Pods created by the StatefulSet controller.
	Replicas int32 `json:"replicas"`
	// UpdateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in
	// the sequence [replicas-updatedReplicas,replicas).
	UpdateRevision OptString `json:"updateRevision"`
	// UpdatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet
	// version indicated by updateRevision.
	UpdatedReplicas OptInt32 `json:"updatedReplicas"`
}

// GetAvailableReplicas returns the value of AvailableReplicas.
func (s *IoK8sAPIAppsV1StatefulSetStatus) GetAvailableReplicas() int32 {
	return s.AvailableReplicas
}

// GetCollisionCount returns the value of CollisionCount.
func (s *IoK8sAPIAppsV1StatefulSetStatus) GetCollisionCount() OptInt32 {
	return s.CollisionCount
}

// GetConditions returns the value of Conditions.
func (s *IoK8sAPIAppsV1StatefulSetStatus) GetConditions() []IoK8sAPIAppsV1StatefulSetCondition {
	return s.Conditions
}

// GetCurrentReplicas returns the value of CurrentReplicas.
func (s *IoK8sAPIAppsV1StatefulSetStatus) GetCurrentReplicas() OptInt32 {
	return s.CurrentReplicas
}

// GetCurrentRevision returns the value of CurrentRevision.
func (s *IoK8sAPIAppsV1StatefulSetStatus) GetCurrentRevision() OptString {
	return s.CurrentRevision
}

// GetObservedGeneration returns the value of ObservedGeneration.
func (s *IoK8sAPIAppsV1StatefulSetStatus) GetObservedGeneration() OptInt64 {
	return s.ObservedGeneration
}

// GetReadyReplicas returns the value of ReadyReplicas.
func (s *IoK8sAPIAppsV1StatefulSetStatus) GetReadyReplicas() OptInt32 {
	return s.ReadyReplicas
}

// GetReplicas returns the value of Replicas.
func (s *IoK8sAPIAppsV1StatefulSetStatus) GetReplicas() int32 {
	return s.Replicas
}

// GetUpdateRevision returns the value of UpdateRevision.
func (s *IoK8sAPIAppsV1StatefulSetStatus) GetUpdateRevision() OptString {
	return s.UpdateRevision
}

// GetUpdatedReplicas returns the value of UpdatedReplicas.
func (s *IoK8sAPIAppsV1StatefulSetStatus) GetUpdatedReplicas() OptInt32 {
	return s.UpdatedReplicas
}

// SetAvailableReplicas sets the value of AvailableReplicas.
func (s *IoK8sAPIAppsV1StatefulSetStatus) SetAvailableReplicas(val int32) {
	s.AvailableReplicas = val
}

// SetCollisionCount sets the value of CollisionCount.
func (s *IoK8sAPIAppsV1StatefulSetStatus) SetCollisionCount(val OptInt32) {
	s.CollisionCount = val
}

// SetConditions sets the value of Conditions.
func (s *IoK8sAPIAppsV1StatefulSetStatus) SetConditions(val []IoK8sAPIAppsV1StatefulSetCondition) {
	s.Conditions = val
}

// SetCurrentReplicas sets the value of CurrentReplicas.
func (s *IoK8sAPIAppsV1StatefulSetStatus) SetCurrentReplicas(val OptInt32) {
	s.CurrentReplicas = val
}

// SetCurrentRevision sets the value of CurrentRevision.
func (s *IoK8sAPIAppsV1StatefulSetStatus) SetCurrentRevision(val OptString) {
	s.CurrentRevision = val
}

// SetObservedGeneration sets the value of ObservedGeneration.
func (s *IoK8sAPIAppsV1StatefulSetStatus) SetObservedGeneration(val OptInt64) {
	s.ObservedGeneration = val
}

// SetReadyReplicas sets the value of ReadyReplicas.
func (s *IoK8sAPIAppsV1StatefulSetStatus) SetReadyReplicas(val OptInt32) {
	s.ReadyReplicas = val
}

// SetReplicas sets the value of Replicas.
func (s *IoK8sAPIAppsV1StatefulSetStatus) SetReplicas(val int32) {
	s.Replicas = val
}

// SetUpdateRevision sets the value of UpdateRevision.
func (s *IoK8sAPIAppsV1StatefulSetStatus) SetUpdateRevision(val OptString) {
	s.UpdateRevision = val
}

// SetUpdatedReplicas sets the value of UpdatedReplicas.
func (s *IoK8sAPIAppsV1StatefulSetStatus) SetUpdatedReplicas(val OptInt32) {
	s.UpdatedReplicas = val
}

// StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to
// perform updates. It includes any additional parameters necessary to perform the update for the
// indicated strategy.
// Ref: #/components/schemas/io.k8s.api.apps.v1.StatefulSetUpdateStrategy
type IoK8sAPIAppsV1StatefulSetUpdateStrategy struct {
	RollingUpdate OptIoK8sAPIAppsV1RollingUpdateStatefulSetStrategy `json:"rollingUpdate"`
	// Type indicates the type of the StatefulSetUpdateStrategy. Default is RollingUpdate.
	Type OptString `json:"type"`
}

// GetRollingUpdate returns the value of RollingUpdate.
func (s *IoK8sAPIAppsV1StatefulSetUpdateStrategy) GetRollingUpdate() OptIoK8sAPIAppsV1RollingUpdateStatefulSetStrategy {
	return s.RollingUpdate
}

// GetType returns the value of Type.
func (s *IoK8sAPIAppsV1StatefulSetUpdateStrategy) GetType() OptString {
	return s.Type
}

// SetRollingUpdate sets the value of RollingUpdate.
func (s *IoK8sAPIAppsV1StatefulSetUpdateStrategy) SetRollingUpdate(val OptIoK8sAPIAppsV1RollingUpdateStatefulSetStrategy) {
	s.RollingUpdate = val
}

// SetType sets the value of Type.
func (s *IoK8sAPIAppsV1StatefulSetUpdateStrategy) SetType(val OptString) {
	s.Type = val
}

// CrossVersionObjectReference contains enough information to let you identify the referred resource.
// Ref: #/components/schemas/io.k8s.api.autoscaling.v1.CrossVersionObjectReference
type IoK8sAPIAutoscalingV1CrossVersionObjectReference struct {
	// API version of the referent.
	ApiVersion OptString `json:"apiVersion"`
	// Kind of the referent; More info: https://git.k8s.
	// io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds".
	Kind string `json:"kind"`
	// Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names.
	Name string `json:"name"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIAutoscalingV1CrossVersionObjectReference) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIAutoscalingV1CrossVersionObjectReference) GetKind() string {
	return s.Kind
}

// GetName returns the value of Name.
func (s *IoK8sAPIAutoscalingV1CrossVersionObjectReference) GetName() string {
	return s.Name
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIAutoscalingV1CrossVersionObjectReference) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIAutoscalingV1CrossVersionObjectReference) SetKind(val string) {
	s.Kind = val
}

// SetName sets the value of Name.
func (s *IoK8sAPIAutoscalingV1CrossVersionObjectReference) SetName(val string) {
	s.Name = val
}

// Configuration of a horizontal pod autoscaler.
// Ref: #/components/schemas/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler
type IoK8sAPIAutoscalingV1HorizontalPodAutoscaler struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                             `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta           `json:"metadata"`
	Spec     OptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec   `json:"spec"`
	Status   OptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus `json:"status"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscaler) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscaler) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscaler) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetSpec returns the value of Spec.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscaler) GetSpec() OptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec {
	return s.Spec
}

// GetStatus returns the value of Status.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscaler) GetStatus() OptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus {
	return s.Status
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscaler) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscaler) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscaler) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetSpec sets the value of Spec.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscaler) SetSpec(val OptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec) {
	s.Spec = val
}

// SetStatus sets the value of Status.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscaler) SetStatus(val OptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus) {
	s.Status = val
}

func (*IoK8sAPIAutoscalingV1HorizontalPodAutoscaler) readAutoscalingV1NamespacedHorizontalPodAutoscalerRes() {
}
func (*IoK8sAPIAutoscalingV1HorizontalPodAutoscaler) readAutoscalingV1NamespacedHorizontalPodAutoscalerStatusRes() {
}

// List of horizontal pod autoscaler objects.
// Ref: #/components/schemas/io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerList
type IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// List of horizontal pod autoscaler objects.
	Items []IoK8sAPIAutoscalingV1HorizontalPodAutoscaler `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList) GetItems() []IoK8sAPIAutoscalingV1HorizontalPodAutoscaler {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList) SetItems(val []IoK8sAPIAutoscalingV1HorizontalPodAutoscaler) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList) listAutoscalingV1HorizontalPodAutoscalerForAllNamespacesRes() {
}
func (*IoK8sAPIAutoscalingV1HorizontalPodAutoscalerList) listAutoscalingV1NamespacedHorizontalPodAutoscalerRes() {
}

// Specification of a horizontal pod autoscaler.
// Ref: #/components/schemas/io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerSpec
type IoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec struct {
	// Upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than
	// MinReplicas.
	MaxReplicas int32 `json:"maxReplicas"`
	// MinReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.
	// It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is
	// enabled and at least one Object or External metric is configured.  Scaling is active as long as at
	// least one metric value is available.
	MinReplicas    OptInt32                                         `json:"minReplicas"`
	ScaleTargetRef IoK8sAPIAutoscalingV1CrossVersionObjectReference `json:"scaleTargetRef"`
	// Target average CPU utilization (represented as a percentage of requested CPU) over all the pods;
	// if not specified the default autoscaling policy will be used.
	TargetCPUUtilizationPercentage OptInt32 `json:"targetCPUUtilizationPercentage"`
}

// GetMaxReplicas returns the value of MaxReplicas.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec) GetMaxReplicas() int32 {
	return s.MaxReplicas
}

// GetMinReplicas returns the value of MinReplicas.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec) GetMinReplicas() OptInt32 {
	return s.MinReplicas
}

// GetScaleTargetRef returns the value of ScaleTargetRef.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec) GetScaleTargetRef() IoK8sAPIAutoscalingV1CrossVersionObjectReference {
	return s.ScaleTargetRef
}

// GetTargetCPUUtilizationPercentage returns the value of TargetCPUUtilizationPercentage.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec) GetTargetCPUUtilizationPercentage() OptInt32 {
	return s.TargetCPUUtilizationPercentage
}

// SetMaxReplicas sets the value of MaxReplicas.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec) SetMaxReplicas(val int32) {
	s.MaxReplicas = val
}

// SetMinReplicas sets the value of MinReplicas.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec) SetMinReplicas(val OptInt32) {
	s.MinReplicas = val
}

// SetScaleTargetRef sets the value of ScaleTargetRef.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec) SetScaleTargetRef(val IoK8sAPIAutoscalingV1CrossVersionObjectReference) {
	s.ScaleTargetRef = val
}

// SetTargetCPUUtilizationPercentage sets the value of TargetCPUUtilizationPercentage.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec) SetTargetCPUUtilizationPercentage(val OptInt32) {
	s.TargetCPUUtilizationPercentage = val
}

// Current status of a horizontal pod autoscaler.
// Ref: #/components/schemas/io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerStatus
type IoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus struct {
	// Current average CPU utilization over all pods, represented as a percentage of requested CPU, e.g.
	// 70 means that an average pod is using now 70% of its requested CPU.
	CurrentCPUUtilizationPercentage OptInt32 `json:"currentCPUUtilizationPercentage"`
	// Current number of replicas of pods managed by this autoscaler.
	CurrentReplicas int32 `json:"currentReplicas"`
	// Desired number of replicas of pods managed by this autoscaler.
	DesiredReplicas int32                                 `json:"desiredReplicas"`
	LastScaleTime   OptIoK8sApimachineryPkgApisMetaV1Time `json:"lastScaleTime"`
	// Most recent generation observed by this autoscaler.
	ObservedGeneration OptInt64 `json:"observedGeneration"`
}

// GetCurrentCPUUtilizationPercentage returns the value of CurrentCPUUtilizationPercentage.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus) GetCurrentCPUUtilizationPercentage() OptInt32 {
	return s.CurrentCPUUtilizationPercentage
}

// GetCurrentReplicas returns the value of CurrentReplicas.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus) GetCurrentReplicas() int32 {
	return s.CurrentReplicas
}

// GetDesiredReplicas returns the value of DesiredReplicas.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus) GetDesiredReplicas() int32 {
	return s.DesiredReplicas
}

// GetLastScaleTime returns the value of LastScaleTime.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus) GetLastScaleTime() OptIoK8sApimachineryPkgApisMetaV1Time {
	return s.LastScaleTime
}

// GetObservedGeneration returns the value of ObservedGeneration.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus) GetObservedGeneration() OptInt64 {
	return s.ObservedGeneration
}

// SetCurrentCPUUtilizationPercentage sets the value of CurrentCPUUtilizationPercentage.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus) SetCurrentCPUUtilizationPercentage(val OptInt32) {
	s.CurrentCPUUtilizationPercentage = val
}

// SetCurrentReplicas sets the value of CurrentReplicas.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus) SetCurrentReplicas(val int32) {
	s.CurrentReplicas = val
}

// SetDesiredReplicas sets the value of DesiredReplicas.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus) SetDesiredReplicas(val int32) {
	s.DesiredReplicas = val
}

// SetLastScaleTime sets the value of LastScaleTime.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus) SetLastScaleTime(val OptIoK8sApimachineryPkgApisMetaV1Time) {
	s.LastScaleTime = val
}

// SetObservedGeneration sets the value of ObservedGeneration.
func (s *IoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus) SetObservedGeneration(val OptInt64) {
	s.ObservedGeneration = val
}

// Scale represents a scaling request for a resource.
// Ref: #/components/schemas/io.k8s.api.autoscaling.v1.Scale
type IoK8sAPIAutoscalingV1Scale struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                   `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata"`
	Spec     OptIoK8sAPIAutoscalingV1ScaleSpec           `json:"spec"`
	Status   OptIoK8sAPIAutoscalingV1ScaleStatus         `json:"status"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIAutoscalingV1Scale) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIAutoscalingV1Scale) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIAutoscalingV1Scale) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetSpec returns the value of Spec.
func (s *IoK8sAPIAutoscalingV1Scale) GetSpec() OptIoK8sAPIAutoscalingV1ScaleSpec {
	return s.Spec
}

// GetStatus returns the value of Status.
func (s *IoK8sAPIAutoscalingV1Scale) GetStatus() OptIoK8sAPIAutoscalingV1ScaleStatus {
	return s.Status
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIAutoscalingV1Scale) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIAutoscalingV1Scale) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIAutoscalingV1Scale) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetSpec sets the value of Spec.
func (s *IoK8sAPIAutoscalingV1Scale) SetSpec(val OptIoK8sAPIAutoscalingV1ScaleSpec) {
	s.Spec = val
}

// SetStatus sets the value of Status.
func (s *IoK8sAPIAutoscalingV1Scale) SetStatus(val OptIoK8sAPIAutoscalingV1ScaleStatus) {
	s.Status = val
}

func (*IoK8sAPIAutoscalingV1Scale) readAppsV1NamespacedDeploymentScaleRes()            {}
func (*IoK8sAPIAutoscalingV1Scale) readAppsV1NamespacedReplicaSetScaleRes()            {}
func (*IoK8sAPIAutoscalingV1Scale) readAppsV1NamespacedStatefulSetScaleRes()           {}
func (*IoK8sAPIAutoscalingV1Scale) readCoreV1NamespacedReplicationControllerScaleRes() {}

// ScaleSpec describes the attributes of a scale subresource.
// Ref: #/components/schemas/io.k8s.api.autoscaling.v1.ScaleSpec
type IoK8sAPIAutoscalingV1ScaleSpec struct {
	// Desired number of instances for the scaled object.
	Replicas OptInt32 `json:"replicas"`
}

// GetReplicas returns the value of Replicas.
func (s *IoK8sAPIAutoscalingV1ScaleSpec) GetReplicas() OptInt32 {
	return s.Replicas
}

// SetReplicas sets the value of Replicas.
func (s *IoK8sAPIAutoscalingV1ScaleSpec) SetReplicas(val OptInt32) {
	s.Replicas = val
}

// ScaleStatus represents the current status of a scale subresource.
// Ref: #/components/schemas/io.k8s.api.autoscaling.v1.ScaleStatus
type IoK8sAPIAutoscalingV1ScaleStatus struct {
	// Actual number of observed instances of the scaled object.
	Replicas int32 `json:"replicas"`
	// Label query over pods that should match the replicas count. This is same as the label selector but
	// in the string format to avoid introspection by clients. The string will be in the same format as
	// the query-param syntax. More info about label selectors: http://kubernetes.
	// io/docs/user-guide/labels#label-selectors.
	Selector OptString `json:"selector"`
}

// GetReplicas returns the value of Replicas.
func (s *IoK8sAPIAutoscalingV1ScaleStatus) GetReplicas() int32 {
	return s.Replicas
}

// GetSelector returns the value of Selector.
func (s *IoK8sAPIAutoscalingV1ScaleStatus) GetSelector() OptString {
	return s.Selector
}

// SetReplicas sets the value of Replicas.
func (s *IoK8sAPIAutoscalingV1ScaleStatus) SetReplicas(val int32) {
	s.Replicas = val
}

// SetSelector sets the value of Selector.
func (s *IoK8sAPIAutoscalingV1ScaleStatus) SetSelector(val OptString) {
	s.Selector = val
}

// ContainerResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as
// specified in requests and limits, describing each pod in the current scale target (e.g. CPU or
// memory).  The values will be averaged together before being compared to the target.  Such metrics
// are built in to Kubernetes, and have special scaling options on top of those available to normal
// per-pod metrics using the "pods" source.  Only one "target" type should be set.
// Ref: #/components/schemas/io.k8s.api.autoscaling.v2beta1.ContainerResourceMetricSource
type IoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource struct {
	// Container is the name of the container in the pods of the scaling target.
	Container string `json:"container"`
	// Name is the name of the resource in question.
	Name string `json:"name"`
	// TargetAverageUtilization is the target value of the average of the resource metric across all
	// relevant pods, represented as a percentage of the requested value of the resource for the pods.
	TargetAverageUtilization OptInt32                                   `json:"targetAverageUtilization"`
	TargetAverageValue       OptIoK8sApimachineryPkgAPIResourceQuantity `json:"targetAverageValue"`
}

// GetContainer returns the value of Container.
func (s *IoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource) GetContainer() string {
	return s.Container
}

// GetName returns the value of Name.
func (s *IoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource) GetName() string {
	return s.Name
}

// GetTargetAverageUtilization returns the value of TargetAverageUtilization.
func (s *IoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource) GetTargetAverageUtilization() OptInt32 {
	return s.TargetAverageUtilization
}

// GetTargetAverageValue returns the value of TargetAverageValue.
func (s *IoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource) GetTargetAverageValue() OptIoK8sApimachineryPkgAPIResourceQuantity {
	return s.TargetAverageValue
}

// SetContainer sets the value of Container.
func (s *IoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource) SetContainer(val string) {
	s.Container = val
}

// SetName sets the value of Name.
func (s *IoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource) SetName(val string) {
	s.Name = val
}

// SetTargetAverageUtilization sets the value of TargetAverageUtilization.
func (s *IoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource) SetTargetAverageUtilization(val OptInt32) {
	s.TargetAverageUtilization = val
}

// SetTargetAverageValue sets the value of TargetAverageValue.
func (s *IoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource) SetTargetAverageValue(val OptIoK8sApimachineryPkgAPIResourceQuantity) {
	s.TargetAverageValue = val
}

// ContainerResourceMetricStatus indicates the current value of a resource metric known to Kubernetes,
//
//	as specified in requests and limits, describing a single container in each pod in the current
//
// scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special
// scaling options on top of those available to normal per-pod metrics using the "pods" source.
// Ref: #/components/schemas/io.k8s.api.autoscaling.v2beta1.ContainerResourceMetricStatus
type IoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus struct {
	// Container is the name of the container in the pods of the scaling target.
	Container string `json:"container"`
	// CurrentAverageUtilization is the current value of the average of the resource metric across all
	// relevant pods, represented as a percentage of the requested value of the resource for the pods.
	// It will only be present if `targetAverageValue` was set in the corresponding metric specification.
	CurrentAverageUtilization OptInt32                                `json:"currentAverageUtilization"`
	CurrentAverageValue       IoK8sApimachineryPkgAPIResourceQuantity `json:"currentAverageValue"`
	// Name is the name of the resource in question.
	Name string `json:"name"`
}

// GetContainer returns the value of Container.
func (s *IoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus) GetContainer() string {
	return s.Container
}

// GetCurrentAverageUtilization returns the value of CurrentAverageUtilization.
func (s *IoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus) GetCurrentAverageUtilization() OptInt32 {
	return s.CurrentAverageUtilization
}

// GetCurrentAverageValue returns the value of CurrentAverageValue.
func (s *IoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus) GetCurrentAverageValue() IoK8sApimachineryPkgAPIResourceQuantity {
	return s.CurrentAverageValue
}

// GetName returns the value of Name.
func (s *IoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus) GetName() string {
	return s.Name
}

// SetContainer sets the value of Container.
func (s *IoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus) SetContainer(val string) {
	s.Container = val
}

// SetCurrentAverageUtilization sets the value of CurrentAverageUtilization.
func (s *IoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus) SetCurrentAverageUtilization(val OptInt32) {
	s.CurrentAverageUtilization = val
}

// SetCurrentAverageValue sets the value of CurrentAverageValue.
func (s *IoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus) SetCurrentAverageValue(val IoK8sApimachineryPkgAPIResourceQuantity) {
	s.CurrentAverageValue = val
}

// SetName sets the value of Name.
func (s *IoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus) SetName(val string) {
	s.Name = val
}

// CrossVersionObjectReference contains enough information to let you identify the referred resource.
// Ref: #/components/schemas/io.k8s.api.autoscaling.v2beta1.CrossVersionObjectReference
type IoK8sAPIAutoscalingV2beta1CrossVersionObjectReference struct {
	// API version of the referent.
	ApiVersion OptString `json:"apiVersion"`
	// Kind of the referent; More info: https://git.k8s.
	// io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds".
	Kind string `json:"kind"`
	// Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names.
	Name string `json:"name"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIAutoscalingV2beta1CrossVersionObjectReference) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIAutoscalingV2beta1CrossVersionObjectReference) GetKind() string {
	return s.Kind
}

// GetName returns the value of Name.
func (s *IoK8sAPIAutoscalingV2beta1CrossVersionObjectReference) GetName() string {
	return s.Name
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIAutoscalingV2beta1CrossVersionObjectReference) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIAutoscalingV2beta1CrossVersionObjectReference) SetKind(val string) {
	s.Kind = val
}

// SetName sets the value of Name.
func (s *IoK8sAPIAutoscalingV2beta1CrossVersionObjectReference) SetName(val string) {
	s.Name = val
}

// ExternalMetricSource indicates how to scale on a metric not associated with any Kubernetes object
// (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside
// of cluster). Exactly one "target" type should be set.
// Ref: #/components/schemas/io.k8s.api.autoscaling.v2beta1.ExternalMetricSource
type IoK8sAPIAutoscalingV2beta1ExternalMetricSource struct {
	// MetricName is the name of the metric in question.
	MetricName         string                                         `json:"metricName"`
	MetricSelector     OptIoK8sApimachineryPkgApisMetaV1LabelSelector `json:"metricSelector"`
	TargetAverageValue OptIoK8sApimachineryPkgAPIResourceQuantity     `json:"targetAverageValue"`
	TargetValue        OptIoK8sApimachineryPkgAPIResourceQuantity     `json:"targetValue"`
}

// GetMetricName returns the value of MetricName.
func (s *IoK8sAPIAutoscalingV2beta1ExternalMetricSource) GetMetricName() string {
	return s.MetricName
}

// GetMetricSelector returns the value of MetricSelector.
func (s *IoK8sAPIAutoscalingV2beta1ExternalMetricSource) GetMetricSelector() OptIoK8sApimachineryPkgApisMetaV1LabelSelector {
	return s.MetricSelector
}

// GetTargetAverageValue returns the value of TargetAverageValue.
func (s *IoK8sAPIAutoscalingV2beta1ExternalMetricSource) GetTargetAverageValue() OptIoK8sApimachineryPkgAPIResourceQuantity {
	return s.TargetAverageValue
}

// GetTargetValue returns the value of TargetValue.
func (s *IoK8sAPIAutoscalingV2beta1ExternalMetricSource) GetTargetValue() OptIoK8sApimachineryPkgAPIResourceQuantity {
	return s.TargetValue
}

// SetMetricName sets the value of MetricName.
func (s *IoK8sAPIAutoscalingV2beta1ExternalMetricSource) SetMetricName(val string) {
	s.MetricName = val
}

// SetMetricSelector sets the value of MetricSelector.
func (s *IoK8sAPIAutoscalingV2beta1ExternalMetricSource) SetMetricSelector(val OptIoK8sApimachineryPkgApisMetaV1LabelSelector) {
	s.MetricSelector = val
}

// SetTargetAverageValue sets the value of TargetAverageValue.
func (s *IoK8sAPIAutoscalingV2beta1ExternalMetricSource) SetTargetAverageValue(val OptIoK8sApimachineryPkgAPIResourceQuantity) {
	s.TargetAverageValue = val
}

// SetTargetValue sets the value of TargetValue.
func (s *IoK8sAPIAutoscalingV2beta1ExternalMetricSource) SetTargetValue(val OptIoK8sApimachineryPkgAPIResourceQuantity) {
	s.TargetValue = val
}

// ExternalMetricStatus indicates the current value of a global metric not associated with any
// Kubernetes object.
// Ref: #/components/schemas/io.k8s.api.autoscaling.v2beta1.ExternalMetricStatus
type IoK8sAPIAutoscalingV2beta1ExternalMetricStatus struct {
	CurrentAverageValue OptIoK8sApimachineryPkgAPIResourceQuantity `json:"currentAverageValue"`
	CurrentValue        IoK8sApimachineryPkgAPIResourceQuantity    `json:"currentValue"`
	// MetricName is the name of a metric used for autoscaling in metric system.
	MetricName     string                                         `json:"metricName"`
	MetricSelector OptIoK8sApimachineryPkgApisMetaV1LabelSelector `json:"metricSelector"`
}

// GetCurrentAverageValue returns the value of CurrentAverageValue.
func (s *IoK8sAPIAutoscalingV2beta1ExternalMetricStatus) GetCurrentAverageValue() OptIoK8sApimachineryPkgAPIResourceQuantity {
	return s.CurrentAverageValue
}

// GetCurrentValue returns the value of CurrentValue.
func (s *IoK8sAPIAutoscalingV2beta1ExternalMetricStatus) GetCurrentValue() IoK8sApimachineryPkgAPIResourceQuantity {
	return s.CurrentValue
}

// GetMetricName returns the value of MetricName.
func (s *IoK8sAPIAutoscalingV2beta1ExternalMetricStatus) GetMetricName() string {
	return s.MetricName
}

// GetMetricSelector returns the value of MetricSelector.
func (s *IoK8sAPIAutoscalingV2beta1ExternalMetricStatus) GetMetricSelector() OptIoK8sApimachineryPkgApisMetaV1LabelSelector {
	return s.MetricSelector
}

// SetCurrentAverageValue sets the value of CurrentAverageValue.
func (s *IoK8sAPIAutoscalingV2beta1ExternalMetricStatus) SetCurrentAverageValue(val OptIoK8sApimachineryPkgAPIResourceQuantity) {
	s.CurrentAverageValue = val
}

// SetCurrentValue sets the value of CurrentValue.
func (s *IoK8sAPIAutoscalingV2beta1ExternalMetricStatus) SetCurrentValue(val IoK8sApimachineryPkgAPIResourceQuantity) {
	s.CurrentValue = val
}

// SetMetricName sets the value of MetricName.
func (s *IoK8sAPIAutoscalingV2beta1ExternalMetricStatus) SetMetricName(val string) {
	s.MetricName = val
}

// SetMetricSelector sets the value of MetricSelector.
func (s *IoK8sAPIAutoscalingV2beta1ExternalMetricStatus) SetMetricSelector(val OptIoK8sApimachineryPkgApisMetaV1LabelSelector) {
	s.MetricSelector = val
}

// HorizontalPodAutoscaler is the configuration for a horizontal pod autoscaler, which automatically
// manages the replica count of any resource implementing the scale subresource based on the metrics
// specified.
// Ref: #/components/schemas/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscaler
type IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscaler struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                                  `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta                `json:"metadata"`
	Spec     OptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec   `json:"spec"`
	Status   OptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus `json:"status"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscaler) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscaler) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscaler) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetSpec returns the value of Spec.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscaler) GetSpec() OptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec {
	return s.Spec
}

// GetStatus returns the value of Status.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscaler) GetStatus() OptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus {
	return s.Status
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscaler) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscaler) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscaler) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetSpec sets the value of Spec.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscaler) SetSpec(val OptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec) {
	s.Spec = val
}

// SetStatus sets the value of Status.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscaler) SetStatus(val OptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus) {
	s.Status = val
}

func (*IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscaler) readAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRes() {
}
func (*IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscaler) readAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusRes() {
}

// HorizontalPodAutoscalerCondition describes the state of a HorizontalPodAutoscaler at a certain
// point.
// Ref: #/components/schemas/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerCondition
type IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerCondition struct {
	LastTransitionTime OptIoK8sApimachineryPkgApisMetaV1Time `json:"lastTransitionTime"`
	// Message is a human-readable explanation containing details about the transition.
	Message OptString `json:"message"`
	// Reason is the reason for the condition's last transition.
	Reason OptString `json:"reason"`
	// Status is the status of the condition (True, False, Unknown).
	Status string `json:"status"`
	// Type describes the current condition.
	Type string `json:"type"`
}

// GetLastTransitionTime returns the value of LastTransitionTime.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerCondition) GetLastTransitionTime() OptIoK8sApimachineryPkgApisMetaV1Time {
	return s.LastTransitionTime
}

// GetMessage returns the value of Message.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerCondition) GetMessage() OptString {
	return s.Message
}

// GetReason returns the value of Reason.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerCondition) GetReason() OptString {
	return s.Reason
}

// GetStatus returns the value of Status.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerCondition) GetStatus() string {
	return s.Status
}

// GetType returns the value of Type.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerCondition) GetType() string {
	return s.Type
}

// SetLastTransitionTime sets the value of LastTransitionTime.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerCondition) SetLastTransitionTime(val OptIoK8sApimachineryPkgApisMetaV1Time) {
	s.LastTransitionTime = val
}

// SetMessage sets the value of Message.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerCondition) SetMessage(val OptString) {
	s.Message = val
}

// SetReason sets the value of Reason.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerCondition) SetReason(val OptString) {
	s.Reason = val
}

// SetStatus sets the value of Status.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerCondition) SetStatus(val string) {
	s.Status = val
}

// SetType sets the value of Type.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerCondition) SetType(val string) {
	s.Type = val
}

// HorizontalPodAutoscaler is a list of horizontal pod autoscaler objects.
// Ref: #/components/schemas/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerList
type IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Items is the list of horizontal pod autoscaler objects.
	Items []IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscaler `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerList) GetItems() []IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscaler {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerList) SetItems(val []IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscaler) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerList) listAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesRes() {
}
func (*IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerList) listAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRes() {
}

// HorizontalPodAutoscalerSpec describes the desired functionality of the HorizontalPodAutoscaler.
// Ref: #/components/schemas/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerSpec
type IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec struct {
	// MaxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up. It
	// cannot be less that minReplicas.
	MaxReplicas int32 `json:"maxReplicas"`
	// Metrics contains the specifications for which to use to calculate the desired replica count (the
	// maximum replica count across all metrics will be used).  The desired replica count is calculated
	// multiplying the ratio between the target value and the current value by the current number of pods.
	//   Ergo, metrics used must decrease as the pod count is increased, and vice-versa.  See the
	// individual metric source types for more information about how each type of metric must respond.
	Metrics []IoK8sAPIAutoscalingV2beta1MetricSpec `json:"metrics"`
	// MinReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.
	// It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is
	// enabled and at least one Object or External metric is configured.  Scaling is active as long as at
	// least one metric value is available.
	MinReplicas    OptInt32                                              `json:"minReplicas"`
	ScaleTargetRef IoK8sAPIAutoscalingV2beta1CrossVersionObjectReference `json:"scaleTargetRef"`
}

// GetMaxReplicas returns the value of MaxReplicas.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec) GetMaxReplicas() int32 {
	return s.MaxReplicas
}

// GetMetrics returns the value of Metrics.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec) GetMetrics() []IoK8sAPIAutoscalingV2beta1MetricSpec {
	return s.Metrics
}

// GetMinReplicas returns the value of MinReplicas.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec) GetMinReplicas() OptInt32 {
	return s.MinReplicas
}

// GetScaleTargetRef returns the value of ScaleTargetRef.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec) GetScaleTargetRef() IoK8sAPIAutoscalingV2beta1CrossVersionObjectReference {
	return s.ScaleTargetRef
}

// SetMaxReplicas sets the value of MaxReplicas.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec) SetMaxReplicas(val int32) {
	s.MaxReplicas = val
}

// SetMetrics sets the value of Metrics.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec) SetMetrics(val []IoK8sAPIAutoscalingV2beta1MetricSpec) {
	s.Metrics = val
}

// SetMinReplicas sets the value of MinReplicas.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec) SetMinReplicas(val OptInt32) {
	s.MinReplicas = val
}

// SetScaleTargetRef sets the value of ScaleTargetRef.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec) SetScaleTargetRef(val IoK8sAPIAutoscalingV2beta1CrossVersionObjectReference) {
	s.ScaleTargetRef = val
}

// HorizontalPodAutoscalerStatus describes the current status of a horizontal pod autoscaler.
// Ref: #/components/schemas/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerStatus
type IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus struct {
	// Conditions is the set of conditions required for this autoscaler to scale its target, and
	// indicates whether or not those conditions are met.
	Conditions []IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerCondition `json:"conditions"`
	// CurrentMetrics is the last read state of the metrics used by this autoscaler.
	CurrentMetrics []IoK8sAPIAutoscalingV2beta1MetricStatus `json:"currentMetrics"`
	// CurrentReplicas is current number of replicas of pods managed by this autoscaler, as last seen by
	// the autoscaler.
	CurrentReplicas int32 `json:"currentReplicas"`
	// DesiredReplicas is the desired number of replicas of pods managed by this autoscaler, as last
	// calculated by the autoscaler.
	DesiredReplicas int32                                 `json:"desiredReplicas"`
	LastScaleTime   OptIoK8sApimachineryPkgApisMetaV1Time `json:"lastScaleTime"`
	// ObservedGeneration is the most recent generation observed by this autoscaler.
	ObservedGeneration OptInt64 `json:"observedGeneration"`
}

// GetConditions returns the value of Conditions.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus) GetConditions() []IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerCondition {
	return s.Conditions
}

// GetCurrentMetrics returns the value of CurrentMetrics.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus) GetCurrentMetrics() []IoK8sAPIAutoscalingV2beta1MetricStatus {
	return s.CurrentMetrics
}

// GetCurrentReplicas returns the value of CurrentReplicas.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus) GetCurrentReplicas() int32 {
	return s.CurrentReplicas
}

// GetDesiredReplicas returns the value of DesiredReplicas.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus) GetDesiredReplicas() int32 {
	return s.DesiredReplicas
}

// GetLastScaleTime returns the value of LastScaleTime.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus) GetLastScaleTime() OptIoK8sApimachineryPkgApisMetaV1Time {
	return s.LastScaleTime
}

// GetObservedGeneration returns the value of ObservedGeneration.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus) GetObservedGeneration() OptInt64 {
	return s.ObservedGeneration
}

// SetConditions sets the value of Conditions.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus) SetConditions(val []IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerCondition) {
	s.Conditions = val
}

// SetCurrentMetrics sets the value of CurrentMetrics.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus) SetCurrentMetrics(val []IoK8sAPIAutoscalingV2beta1MetricStatus) {
	s.CurrentMetrics = val
}

// SetCurrentReplicas sets the value of CurrentReplicas.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus) SetCurrentReplicas(val int32) {
	s.CurrentReplicas = val
}

// SetDesiredReplicas sets the value of DesiredReplicas.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus) SetDesiredReplicas(val int32) {
	s.DesiredReplicas = val
}

// SetLastScaleTime sets the value of LastScaleTime.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus) SetLastScaleTime(val OptIoK8sApimachineryPkgApisMetaV1Time) {
	s.LastScaleTime = val
}

// SetObservedGeneration sets the value of ObservedGeneration.
func (s *IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus) SetObservedGeneration(val OptInt64) {
	s.ObservedGeneration = val
}

// MetricSpec specifies how to scale based on a single metric (only `type` and one other matching
// field should be set at once).
// Ref: #/components/schemas/io.k8s.api.autoscaling.v2beta1.MetricSpec
type IoK8sAPIAutoscalingV2beta1MetricSpec struct {
	ContainerResource OptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource `json:"containerResource"`
	External          OptIoK8sAPIAutoscalingV2beta1ExternalMetricSource          `json:"external"`
	Object            OptIoK8sAPIAutoscalingV2beta1ObjectMetricSource            `json:"object"`
	Pods              OptIoK8sAPIAutoscalingV2beta1PodsMetricSource              `json:"pods"`
	Resource          OptIoK8sAPIAutoscalingV2beta1ResourceMetricSource          `json:"resource"`
	// Type is the type of metric source.  It should be one of "ContainerResource", "External", "Object",
	// "Pods" or "Resource", each mapping to a matching field in the object. Note: "ContainerResource"
	// type is available on when the feature-gate HPAContainerMetrics is enabled.
	Type string `json:"type"`
}

// GetContainerResource returns the value of ContainerResource.
func (s *IoK8sAPIAutoscalingV2beta1MetricSpec) GetContainerResource() OptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource {
	return s.ContainerResource
}

// GetExternal returns the value of External.
func (s *IoK8sAPIAutoscalingV2beta1MetricSpec) GetExternal() OptIoK8sAPIAutoscalingV2beta1ExternalMetricSource {
	return s.External
}

// GetObject returns the value of Object.
func (s *IoK8sAPIAutoscalingV2beta1MetricSpec) GetObject() OptIoK8sAPIAutoscalingV2beta1ObjectMetricSource {
	return s.Object
}

// GetPods returns the value of Pods.
func (s *IoK8sAPIAutoscalingV2beta1MetricSpec) GetPods() OptIoK8sAPIAutoscalingV2beta1PodsMetricSource {
	return s.Pods
}

// GetResource returns the value of Resource.
func (s *IoK8sAPIAutoscalingV2beta1MetricSpec) GetResource() OptIoK8sAPIAutoscalingV2beta1ResourceMetricSource {
	return s.Resource
}

// GetType returns the value of Type.
func (s *IoK8sAPIAutoscalingV2beta1MetricSpec) GetType() string {
	return s.Type
}

// SetContainerResource sets the value of ContainerResource.
func (s *IoK8sAPIAutoscalingV2beta1MetricSpec) SetContainerResource(val OptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource) {
	s.ContainerResource = val
}

// SetExternal sets the value of External.
func (s *IoK8sAPIAutoscalingV2beta1MetricSpec) SetExternal(val OptIoK8sAPIAutoscalingV2beta1ExternalMetricSource) {
	s.External = val
}

// SetObject sets the value of Object.
func (s *IoK8sAPIAutoscalingV2beta1MetricSpec) SetObject(val OptIoK8sAPIAutoscalingV2beta1ObjectMetricSource) {
	s.Object = val
}

// SetPods sets the value of Pods.
func (s *IoK8sAPIAutoscalingV2beta1MetricSpec) SetPods(val OptIoK8sAPIAutoscalingV2beta1PodsMetricSource) {
	s.Pods = val
}

// SetResource sets the value of Resource.
func (s *IoK8sAPIAutoscalingV2beta1MetricSpec) SetResource(val OptIoK8sAPIAutoscalingV2beta1ResourceMetricSource) {
	s.Resource = val
}

// SetType sets the value of Type.
func (s *IoK8sAPIAutoscalingV2beta1MetricSpec) SetType(val string) {
	s.Type = val
}

// MetricStatus describes the last-read state of a single metric.
// Ref: #/components/schemas/io.k8s.api.autoscaling.v2beta1.MetricStatus
type IoK8sAPIAutoscalingV2beta1MetricStatus struct {
	ContainerResource OptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus `json:"containerResource"`
	External          OptIoK8sAPIAutoscalingV2beta1ExternalMetricStatus          `json:"external"`
	Object            OptIoK8sAPIAutoscalingV2beta1ObjectMetricStatus            `json:"object"`
	Pods              OptIoK8sAPIAutoscalingV2beta1PodsMetricStatus              `json:"pods"`
	Resource          OptIoK8sAPIAutoscalingV2beta1ResourceMetricStatus          `json:"resource"`
	// Type is the type of metric source.  It will be one of "ContainerResource", "External", "Object",
	// "Pods" or "Resource", each corresponds to a matching field in the object. Note:
	// "ContainerResource" type is available on when the feature-gate HPAContainerMetrics is enabled.
	Type string `json:"type"`
}

// GetContainerResource returns the value of ContainerResource.
func (s *IoK8sAPIAutoscalingV2beta1MetricStatus) GetContainerResource() OptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus {
	return s.ContainerResource
}

// GetExternal returns the value of External.
func (s *IoK8sAPIAutoscalingV2beta1MetricStatus) GetExternal() OptIoK8sAPIAutoscalingV2beta1ExternalMetricStatus {
	return s.External
}

// GetObject returns the value of Object.
func (s *IoK8sAPIAutoscalingV2beta1MetricStatus) GetObject() OptIoK8sAPIAutoscalingV2beta1ObjectMetricStatus {
	return s.Object
}

// GetPods returns the value of Pods.
func (s *IoK8sAPIAutoscalingV2beta1MetricStatus) GetPods() OptIoK8sAPIAutoscalingV2beta1PodsMetricStatus {
	return s.Pods
}

// GetResource returns the value of Resource.
func (s *IoK8sAPIAutoscalingV2beta1MetricStatus) GetResource() OptIoK8sAPIAutoscalingV2beta1ResourceMetricStatus {
	return s.Resource
}

// GetType returns the value of Type.
func (s *IoK8sAPIAutoscalingV2beta1MetricStatus) GetType() string {
	return s.Type
}

// SetContainerResource sets the value of ContainerResource.
func (s *IoK8sAPIAutoscalingV2beta1MetricStatus) SetContainerResource(val OptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus) {
	s.ContainerResource = val
}

// SetExternal sets the value of External.
func (s *IoK8sAPIAutoscalingV2beta1MetricStatus) SetExternal(val OptIoK8sAPIAutoscalingV2beta1ExternalMetricStatus) {
	s.External = val
}

// SetObject sets the value of Object.
func (s *IoK8sAPIAutoscalingV2beta1MetricStatus) SetObject(val OptIoK8sAPIAutoscalingV2beta1ObjectMetricStatus) {
	s.Object = val
}

// SetPods sets the value of Pods.
func (s *IoK8sAPIAutoscalingV2beta1MetricStatus) SetPods(val OptIoK8sAPIAutoscalingV2beta1PodsMetricStatus) {
	s.Pods = val
}

// SetResource sets the value of Resource.
func (s *IoK8sAPIAutoscalingV2beta1MetricStatus) SetResource(val OptIoK8sAPIAutoscalingV2beta1ResourceMetricStatus) {
	s.Resource = val
}

// SetType sets the value of Type.
func (s *IoK8sAPIAutoscalingV2beta1MetricStatus) SetType(val string) {
	s.Type = val
}

// ObjectMetricSource indicates how to scale on a metric describing a kubernetes object (for example,
// hits-per-second on an Ingress object).
// Ref: #/components/schemas/io.k8s.api.autoscaling.v2beta1.ObjectMetricSource
type IoK8sAPIAutoscalingV2beta1ObjectMetricSource struct {
	AverageValue OptIoK8sApimachineryPkgAPIResourceQuantity `json:"averageValue"`
	// MetricName is the name of the metric in question.
	MetricName  string                                                `json:"metricName"`
	Selector    OptIoK8sApimachineryPkgApisMetaV1LabelSelector        `json:"selector"`
	Target      IoK8sAPIAutoscalingV2beta1CrossVersionObjectReference `json:"target"`
	TargetValue IoK8sApimachineryPkgAPIResourceQuantity               `json:"targetValue"`
}

// GetAverageValue returns the value of AverageValue.
func (s *IoK8sAPIAutoscalingV2beta1ObjectMetricSource) GetAverageValue() OptIoK8sApimachineryPkgAPIResourceQuantity {
	return s.AverageValue
}

// GetMetricName returns the value of MetricName.
func (s *IoK8sAPIAutoscalingV2beta1ObjectMetricSource) GetMetricName() string {
	return s.MetricName
}

// GetSelector returns the value of Selector.
func (s *IoK8sAPIAutoscalingV2beta1ObjectMetricSource) GetSelector() OptIoK8sApimachineryPkgApisMetaV1LabelSelector {
	return s.Selector
}

// GetTarget returns the value of Target.
func (s *IoK8sAPIAutoscalingV2beta1ObjectMetricSource) GetTarget() IoK8sAPIAutoscalingV2beta1CrossVersionObjectReference {
	return s.Target
}

// GetTargetValue returns the value of TargetValue.
func (s *IoK8sAPIAutoscalingV2beta1ObjectMetricSource) GetTargetValue() IoK8sApimachineryPkgAPIResourceQuantity {
	return s.TargetValue
}

// SetAverageValue sets the value of AverageValue.
func (s *IoK8sAPIAutoscalingV2beta1ObjectMetricSource) SetAverageValue(val OptIoK8sApimachineryPkgAPIResourceQuantity) {
	s.AverageValue = val
}

// SetMetricName sets the value of MetricName.
func (s *IoK8sAPIAutoscalingV2beta1ObjectMetricSource) SetMetricName(val string) {
	s.MetricName = val
}

// SetSelector sets the value of Selector.
func (s *IoK8sAPIAutoscalingV2beta1ObjectMetricSource) SetSelector(val OptIoK8sApimachineryPkgApisMetaV1LabelSelector) {
	s.Selector = val
}

// SetTarget sets the value of Target.
func (s *IoK8sAPIAutoscalingV2beta1ObjectMetricSource) SetTarget(val IoK8sAPIAutoscalingV2beta1CrossVersionObjectReference) {
	s.Target = val
}

// SetTargetValue sets the value of TargetValue.
func (s *IoK8sAPIAutoscalingV2beta1ObjectMetricSource) SetTargetValue(val IoK8sApimachineryPkgAPIResourceQuantity) {
	s.TargetValue = val
}

// ObjectMetricStatus indicates the current value of a metric describing a kubernetes object (for
// example, hits-per-second on an Ingress object).
// Ref: #/components/schemas/io.k8s.api.autoscaling.v2beta1.ObjectMetricStatus
type IoK8sAPIAutoscalingV2beta1ObjectMetricStatus struct {
	AverageValue OptIoK8sApimachineryPkgAPIResourceQuantity `json:"averageValue"`
	CurrentValue IoK8sApimachineryPkgAPIResourceQuantity    `json:"currentValue"`
	// MetricName is the name of the metric in question.
	MetricName string                                                `json:"metricName"`
	Selector   OptIoK8sApimachineryPkgApisMetaV1LabelSelector        `json:"selector"`
	Target     IoK8sAPIAutoscalingV2beta1CrossVersionObjectReference `json:"target"`
}

// GetAverageValue returns the value of AverageValue.
func (s *IoK8sAPIAutoscalingV2beta1ObjectMetricStatus) GetAverageValue() OptIoK8sApimachineryPkgAPIResourceQuantity {
	return s.AverageValue
}

// GetCurrentValue returns the value of CurrentValue.
func (s *IoK8sAPIAutoscalingV2beta1ObjectMetricStatus) GetCurrentValue() IoK8sApimachineryPkgAPIResourceQuantity {
	return s.CurrentValue
}

// GetMetricName returns the value of MetricName.
func (s *IoK8sAPIAutoscalingV2beta1ObjectMetricStatus) GetMetricName() string {
	return s.MetricName
}

// GetSelector returns the value of Selector.
func (s *IoK8sAPIAutoscalingV2beta1ObjectMetricStatus) GetSelector() OptIoK8sApimachineryPkgApisMetaV1LabelSelector {
	return s.Selector
}

// GetTarget returns the value of Target.
func (s *IoK8sAPIAutoscalingV2beta1ObjectMetricStatus) GetTarget() IoK8sAPIAutoscalingV2beta1CrossVersionObjectReference {
	return s.Target
}

// SetAverageValue sets the value of AverageValue.
func (s *IoK8sAPIAutoscalingV2beta1ObjectMetricStatus) SetAverageValue(val OptIoK8sApimachineryPkgAPIResourceQuantity) {
	s.AverageValue = val
}

// SetCurrentValue sets the value of CurrentValue.
func (s *IoK8sAPIAutoscalingV2beta1ObjectMetricStatus) SetCurrentValue(val IoK8sApimachineryPkgAPIResourceQuantity) {
	s.CurrentValue = val
}

// SetMetricName sets the value of MetricName.
func (s *IoK8sAPIAutoscalingV2beta1ObjectMetricStatus) SetMetricName(val string) {
	s.MetricName = val
}

// SetSelector sets the value of Selector.
func (s *IoK8sAPIAutoscalingV2beta1ObjectMetricStatus) SetSelector(val OptIoK8sApimachineryPkgApisMetaV1LabelSelector) {
	s.Selector = val
}

// SetTarget sets the value of Target.
func (s *IoK8sAPIAutoscalingV2beta1ObjectMetricStatus) SetTarget(val IoK8sAPIAutoscalingV2beta1CrossVersionObjectReference) {
	s.Target = val
}

// PodsMetricSource indicates how to scale on a metric describing each pod in the current scale
// target (for example, transactions-processed-per-second). The values will be averaged together
// before being compared to the target value.
// Ref: #/components/schemas/io.k8s.api.autoscaling.v2beta1.PodsMetricSource
type IoK8sAPIAutoscalingV2beta1PodsMetricSource struct {
	// MetricName is the name of the metric in question.
	MetricName         string                                         `json:"metricName"`
	Selector           OptIoK8sApimachineryPkgApisMetaV1LabelSelector `json:"selector"`
	TargetAverageValue IoK8sApimachineryPkgAPIResourceQuantity        `json:"targetAverageValue"`
}

// GetMetricName returns the value of MetricName.
func (s *IoK8sAPIAutoscalingV2beta1PodsMetricSource) GetMetricName() string {
	return s.MetricName
}

// GetSelector returns the value of Selector.
func (s *IoK8sAPIAutoscalingV2beta1PodsMetricSource) GetSelector() OptIoK8sApimachineryPkgApisMetaV1LabelSelector {
	return s.Selector
}

// GetTargetAverageValue returns the value of TargetAverageValue.
func (s *IoK8sAPIAutoscalingV2beta1PodsMetricSource) GetTargetAverageValue() IoK8sApimachineryPkgAPIResourceQuantity {
	return s.TargetAverageValue
}

// SetMetricName sets the value of MetricName.
func (s *IoK8sAPIAutoscalingV2beta1PodsMetricSource) SetMetricName(val string) {
	s.MetricName = val
}

// SetSelector sets the value of Selector.
func (s *IoK8sAPIAutoscalingV2beta1PodsMetricSource) SetSelector(val OptIoK8sApimachineryPkgApisMetaV1LabelSelector) {
	s.Selector = val
}

// SetTargetAverageValue sets the value of TargetAverageValue.
func (s *IoK8sAPIAutoscalingV2beta1PodsMetricSource) SetTargetAverageValue(val IoK8sApimachineryPkgAPIResourceQuantity) {
	s.TargetAverageValue = val
}

// PodsMetricStatus indicates the current value of a metric describing each pod in the current scale
// target (for example, transactions-processed-per-second).
// Ref: #/components/schemas/io.k8s.api.autoscaling.v2beta1.PodsMetricStatus
type IoK8sAPIAutoscalingV2beta1PodsMetricStatus struct {
	CurrentAverageValue IoK8sApimachineryPkgAPIResourceQuantity `json:"currentAverageValue"`
	// MetricName is the name of the metric in question.
	MetricName string                                         `json:"metricName"`
	Selector   OptIoK8sApimachineryPkgApisMetaV1LabelSelector `json:"selector"`
}

// GetCurrentAverageValue returns the value of CurrentAverageValue.
func (s *IoK8sAPIAutoscalingV2beta1PodsMetricStatus) GetCurrentAverageValue() IoK8sApimachineryPkgAPIResourceQuantity {
	return s.CurrentAverageValue
}

// GetMetricName returns the value of MetricName.
func (s *IoK8sAPIAutoscalingV2beta1PodsMetricStatus) GetMetricName() string {
	return s.MetricName
}

// GetSelector returns the value of Selector.
func (s *IoK8sAPIAutoscalingV2beta1PodsMetricStatus) GetSelector() OptIoK8sApimachineryPkgApisMetaV1LabelSelector {
	return s.Selector
}

// SetCurrentAverageValue sets the value of CurrentAverageValue.
func (s *IoK8sAPIAutoscalingV2beta1PodsMetricStatus) SetCurrentAverageValue(val IoK8sApimachineryPkgAPIResourceQuantity) {
	s.CurrentAverageValue = val
}

// SetMetricName sets the value of MetricName.
func (s *IoK8sAPIAutoscalingV2beta1PodsMetricStatus) SetMetricName(val string) {
	s.MetricName = val
}

// SetSelector sets the value of Selector.
func (s *IoK8sAPIAutoscalingV2beta1PodsMetricStatus) SetSelector(val OptIoK8sApimachineryPkgApisMetaV1LabelSelector) {
	s.Selector = val
}

// ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified
// in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The
// values will be averaged together before being compared to the target.  Such metrics are built in
// to Kubernetes, and have special scaling options on top of those available to normal per-pod
// metrics using the "pods" source.  Only one "target" type should be set.
// Ref: #/components/schemas/io.k8s.api.autoscaling.v2beta1.ResourceMetricSource
type IoK8sAPIAutoscalingV2beta1ResourceMetricSource struct {
	// Name is the name of the resource in question.
	Name string `json:"name"`
	// TargetAverageUtilization is the target value of the average of the resource metric across all
	// relevant pods, represented as a percentage of the requested value of the resource for the pods.
	TargetAverageUtilization OptInt32                                   `json:"targetAverageUtilization"`
	TargetAverageValue       OptIoK8sApimachineryPkgAPIResourceQuantity `json:"targetAverageValue"`
}

// GetName returns the value of Name.
func (s *IoK8sAPIAutoscalingV2beta1ResourceMetricSource) GetName() string {
	return s.Name
}

// GetTargetAverageUtilization returns the value of TargetAverageUtilization.
func (s *IoK8sAPIAutoscalingV2beta1ResourceMetricSource) GetTargetAverageUtilization() OptInt32 {
	return s.TargetAverageUtilization
}

// GetTargetAverageValue returns the value of TargetAverageValue.
func (s *IoK8sAPIAutoscalingV2beta1ResourceMetricSource) GetTargetAverageValue() OptIoK8sApimachineryPkgAPIResourceQuantity {
	return s.TargetAverageValue
}

// SetName sets the value of Name.
func (s *IoK8sAPIAutoscalingV2beta1ResourceMetricSource) SetName(val string) {
	s.Name = val
}

// SetTargetAverageUtilization sets the value of TargetAverageUtilization.
func (s *IoK8sAPIAutoscalingV2beta1ResourceMetricSource) SetTargetAverageUtilization(val OptInt32) {
	s.TargetAverageUtilization = val
}

// SetTargetAverageValue sets the value of TargetAverageValue.
func (s *IoK8sAPIAutoscalingV2beta1ResourceMetricSource) SetTargetAverageValue(val OptIoK8sApimachineryPkgAPIResourceQuantity) {
	s.TargetAverageValue = val
}

// ResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as
// specified in requests and limits, describing each pod in the current scale target (e.g. CPU or
// memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of
// those available to normal per-pod metrics using the "pods" source.
// Ref: #/components/schemas/io.k8s.api.autoscaling.v2beta1.ResourceMetricStatus
type IoK8sAPIAutoscalingV2beta1ResourceMetricStatus struct {
	// CurrentAverageUtilization is the current value of the average of the resource metric across all
	// relevant pods, represented as a percentage of the requested value of the resource for the pods.
	// It will only be present if `targetAverageValue` was set in the corresponding metric specification.
	CurrentAverageUtilization OptInt32                                `json:"currentAverageUtilization"`
	CurrentAverageValue       IoK8sApimachineryPkgAPIResourceQuantity `json:"currentAverageValue"`
	// Name is the name of the resource in question.
	Name string `json:"name"`
}

// GetCurrentAverageUtilization returns the value of CurrentAverageUtilization.
func (s *IoK8sAPIAutoscalingV2beta1ResourceMetricStatus) GetCurrentAverageUtilization() OptInt32 {
	return s.CurrentAverageUtilization
}

// GetCurrentAverageValue returns the value of CurrentAverageValue.
func (s *IoK8sAPIAutoscalingV2beta1ResourceMetricStatus) GetCurrentAverageValue() IoK8sApimachineryPkgAPIResourceQuantity {
	return s.CurrentAverageValue
}

// GetName returns the value of Name.
func (s *IoK8sAPIAutoscalingV2beta1ResourceMetricStatus) GetName() string {
	return s.Name
}

// SetCurrentAverageUtilization sets the value of CurrentAverageUtilization.
func (s *IoK8sAPIAutoscalingV2beta1ResourceMetricStatus) SetCurrentAverageUtilization(val OptInt32) {
	s.CurrentAverageUtilization = val
}

// SetCurrentAverageValue sets the value of CurrentAverageValue.
func (s *IoK8sAPIAutoscalingV2beta1ResourceMetricStatus) SetCurrentAverageValue(val IoK8sApimachineryPkgAPIResourceQuantity) {
	s.CurrentAverageValue = val
}

// SetName sets the value of Name.
func (s *IoK8sAPIAutoscalingV2beta1ResourceMetricStatus) SetName(val string) {
	s.Name = val
}

// ContainerResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as
// specified in requests and limits, describing each pod in the current scale target (e.g. CPU or
// memory).  The values will be averaged together before being compared to the target.  Such metrics
// are built in to Kubernetes, and have special scaling options on top of those available to normal
// per-pod metrics using the "pods" source.  Only one "target" type should be set.
// Ref: #/components/schemas/io.k8s.api.autoscaling.v2beta2.ContainerResourceMetricSource
type IoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource struct {
	// Container is the name of the container in the pods of the scaling target.
	Container string `json:"container"`
	// Name is the name of the resource in question.
	Name   string                                 `json:"name"`
	Target IoK8sAPIAutoscalingV2beta2MetricTarget `json:"target"`
}

// GetContainer returns the value of Container.
func (s *IoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource) GetContainer() string {
	return s.Container
}

// GetName returns the value of Name.
func (s *IoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource) GetName() string {
	return s.Name
}

// GetTarget returns the value of Target.
func (s *IoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource) GetTarget() IoK8sAPIAutoscalingV2beta2MetricTarget {
	return s.Target
}

// SetContainer sets the value of Container.
func (s *IoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource) SetContainer(val string) {
	s.Container = val
}

// SetName sets the value of Name.
func (s *IoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource) SetName(val string) {
	s.Name = val
}

// SetTarget sets the value of Target.
func (s *IoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource) SetTarget(val IoK8sAPIAutoscalingV2beta2MetricTarget) {
	s.Target = val
}

// ContainerResourceMetricStatus indicates the current value of a resource metric known to Kubernetes,
//
//	as specified in requests and limits, describing a single container in each pod in the current
//
// scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special
// scaling options on top of those available to normal per-pod metrics using the "pods" source.
// Ref: #/components/schemas/io.k8s.api.autoscaling.v2beta2.ContainerResourceMetricStatus
type IoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus struct {
	// Container is the name of the container in the pods of the scaling target.
	Container string                                      `json:"container"`
	Current   IoK8sAPIAutoscalingV2beta2MetricValueStatus `json:"current"`
	// Name is the name of the resource in question.
	Name string `json:"name"`
}

// GetContainer returns the value of Container.
func (s *IoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus) GetContainer() string {
	return s.Container
}

// GetCurrent returns the value of Current.
func (s *IoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus) GetCurrent() IoK8sAPIAutoscalingV2beta2MetricValueStatus {
	return s.Current
}

// GetName returns the value of Name.
func (s *IoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus) GetName() string {
	return s.Name
}

// SetContainer sets the value of Container.
func (s *IoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus) SetContainer(val string) {
	s.Container = val
}

// SetCurrent sets the value of Current.
func (s *IoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus) SetCurrent(val IoK8sAPIAutoscalingV2beta2MetricValueStatus) {
	s.Current = val
}

// SetName sets the value of Name.
func (s *IoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus) SetName(val string) {
	s.Name = val
}

// CrossVersionObjectReference contains enough information to let you identify the referred resource.
// Ref: #/components/schemas/io.k8s.api.autoscaling.v2beta2.CrossVersionObjectReference
type IoK8sAPIAutoscalingV2beta2CrossVersionObjectReference struct {
	// API version of the referent.
	ApiVersion OptString `json:"apiVersion"`
	// Kind of the referent; More info: https://git.k8s.
	// io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds".
	Kind string `json:"kind"`
	// Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names.
	Name string `json:"name"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIAutoscalingV2beta2CrossVersionObjectReference) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIAutoscalingV2beta2CrossVersionObjectReference) GetKind() string {
	return s.Kind
}

// GetName returns the value of Name.
func (s *IoK8sAPIAutoscalingV2beta2CrossVersionObjectReference) GetName() string {
	return s.Name
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIAutoscalingV2beta2CrossVersionObjectReference) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIAutoscalingV2beta2CrossVersionObjectReference) SetKind(val string) {
	s.Kind = val
}

// SetName sets the value of Name.
func (s *IoK8sAPIAutoscalingV2beta2CrossVersionObjectReference) SetName(val string) {
	s.Name = val
}

// ExternalMetricSource indicates how to scale on a metric not associated with any Kubernetes object
// (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside
// of cluster).
// Ref: #/components/schemas/io.k8s.api.autoscaling.v2beta2.ExternalMetricSource
type IoK8sAPIAutoscalingV2beta2ExternalMetricSource struct {
	Metric IoK8sAPIAutoscalingV2beta2MetricIdentifier `json:"metric"`
	Target IoK8sAPIAutoscalingV2beta2MetricTarget     `json:"target"`
}

// GetMetric returns the value of Metric.
func (s *IoK8sAPIAutoscalingV2beta2ExternalMetricSource) GetMetric() IoK8sAPIAutoscalingV2beta2MetricIdentifier {
	return s.Metric
}

// GetTarget returns the value of Target.
func (s *IoK8sAPIAutoscalingV2beta2ExternalMetricSource) GetTarget() IoK8sAPIAutoscalingV2beta2MetricTarget {
	return s.Target
}

// SetMetric sets the value of Metric.
func (s *IoK8sAPIAutoscalingV2beta2ExternalMetricSource) SetMetric(val IoK8sAPIAutoscalingV2beta2MetricIdentifier) {
	s.Metric = val
}

// SetTarget sets the value of Target.
func (s *IoK8sAPIAutoscalingV2beta2ExternalMetricSource) SetTarget(val IoK8sAPIAutoscalingV2beta2MetricTarget) {
	s.Target = val
}

// ExternalMetricStatus indicates the current value of a global metric not associated with any
// Kubernetes object.
// Ref: #/components/schemas/io.k8s.api.autoscaling.v2beta2.ExternalMetricStatus
type IoK8sAPIAutoscalingV2beta2ExternalMetricStatus struct {
	Current IoK8sAPIAutoscalingV2beta2MetricValueStatus `json:"current"`
	Metric  IoK8sAPIAutoscalingV2beta2MetricIdentifier  `json:"metric"`
}

// GetCurrent returns the value of Current.
func (s *IoK8sAPIAutoscalingV2beta2ExternalMetricStatus) GetCurrent() IoK8sAPIAutoscalingV2beta2MetricValueStatus {
	return s.Current
}

// GetMetric returns the value of Metric.
func (s *IoK8sAPIAutoscalingV2beta2ExternalMetricStatus) GetMetric() IoK8sAPIAutoscalingV2beta2MetricIdentifier {
	return s.Metric
}

// SetCurrent sets the value of Current.
func (s *IoK8sAPIAutoscalingV2beta2ExternalMetricStatus) SetCurrent(val IoK8sAPIAutoscalingV2beta2MetricValueStatus) {
	s.Current = val
}

// SetMetric sets the value of Metric.
func (s *IoK8sAPIAutoscalingV2beta2ExternalMetricStatus) SetMetric(val IoK8sAPIAutoscalingV2beta2MetricIdentifier) {
	s.Metric = val
}

// HPAScalingPolicy is a single policy which must hold true for a specified past interval.
// Ref: #/components/schemas/io.k8s.api.autoscaling.v2beta2.HPAScalingPolicy
type IoK8sAPIAutoscalingV2beta2HPAScalingPolicy struct {
	// PeriodSeconds specifies the window of time for which the policy should hold true. PeriodSeconds
	// must be greater than zero and less than or equal to 1800 (30 min).
	PeriodSeconds int32 `json:"periodSeconds"`
	// Type is used to specify the scaling policy.
	Type string `json:"type"`
	// Value contains the amount of change which is permitted by the policy. It must be greater than zero.
	Value int32 `json:"value"`
}

// GetPeriodSeconds returns the value of PeriodSeconds.
func (s *IoK8sAPIAutoscalingV2beta2HPAScalingPolicy) GetPeriodSeconds() int32 {
	return s.PeriodSeconds
}

// GetType returns the value of Type.
func (s *IoK8sAPIAutoscalingV2beta2HPAScalingPolicy) GetType() string {
	return s.Type
}

// GetValue returns the value of Value.
func (s *IoK8sAPIAutoscalingV2beta2HPAScalingPolicy) GetValue() int32 {
	return s.Value
}

// SetPeriodSeconds sets the value of PeriodSeconds.
func (s *IoK8sAPIAutoscalingV2beta2HPAScalingPolicy) SetPeriodSeconds(val int32) {
	s.PeriodSeconds = val
}

// SetType sets the value of Type.
func (s *IoK8sAPIAutoscalingV2beta2HPAScalingPolicy) SetType(val string) {
	s.Type = val
}

// SetValue sets the value of Value.
func (s *IoK8sAPIAutoscalingV2beta2HPAScalingPolicy) SetValue(val int32) {
	s.Value = val
}

// HPAScalingRules configures the scaling behavior for one direction. These Rules are applied after
// calculating DesiredReplicas from metrics for the HPA. They can limit the scaling velocity by
// specifying scaling policies. They can prevent flapping by specifying the stabilization window, so
// that the number of replicas is not set instantly, instead, the safest value from the stabilization
// window is chosen.
// Ref: #/components/schemas/io.k8s.api.autoscaling.v2beta2.HPAScalingRules
type IoK8sAPIAutoscalingV2beta2HPAScalingRules struct {
	// Policies is a list of potential scaling polices which can be used during scaling. At least one
	// policy must be specified, otherwise the HPAScalingRules will be discarded as invalid.
	Policies []IoK8sAPIAutoscalingV2beta2HPAScalingPolicy `json:"policies"`
	// SelectPolicy is used to specify which policy should be used. If not set, the default value
	// MaxPolicySelect is used.
	SelectPolicy OptString `json:"selectPolicy"`
	// StabilizationWindowSeconds is the number of seconds for which past recommendations should be
	// considered while scaling up or scaling down. StabilizationWindowSeconds must be greater than or
	// equal to zero and less than or equal to 3600 (one hour). If not set, use the default values: - For
	// scale up: 0 (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization window
	// is 300 seconds long).
	StabilizationWindowSeconds OptInt32 `json:"stabilizationWindowSeconds"`
}

// GetPolicies returns the value of Policies.
func (s *IoK8sAPIAutoscalingV2beta2HPAScalingRules) GetPolicies() []IoK8sAPIAutoscalingV2beta2HPAScalingPolicy {
	return s.Policies
}

// GetSelectPolicy returns the value of SelectPolicy.
func (s *IoK8sAPIAutoscalingV2beta2HPAScalingRules) GetSelectPolicy() OptString {
	return s.SelectPolicy
}

// GetStabilizationWindowSeconds returns the value of StabilizationWindowSeconds.
func (s *IoK8sAPIAutoscalingV2beta2HPAScalingRules) GetStabilizationWindowSeconds() OptInt32 {
	return s.StabilizationWindowSeconds
}

// SetPolicies sets the value of Policies.
func (s *IoK8sAPIAutoscalingV2beta2HPAScalingRules) SetPolicies(val []IoK8sAPIAutoscalingV2beta2HPAScalingPolicy) {
	s.Policies = val
}

// SetSelectPolicy sets the value of SelectPolicy.
func (s *IoK8sAPIAutoscalingV2beta2HPAScalingRules) SetSelectPolicy(val OptString) {
	s.SelectPolicy = val
}

// SetStabilizationWindowSeconds sets the value of StabilizationWindowSeconds.
func (s *IoK8sAPIAutoscalingV2beta2HPAScalingRules) SetStabilizationWindowSeconds(val OptInt32) {
	s.StabilizationWindowSeconds = val
}

// HorizontalPodAutoscaler is the configuration for a horizontal pod autoscaler, which automatically
// manages the replica count of any resource implementing the scale subresource based on the metrics
// specified.
// Ref: #/components/schemas/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler
type IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscaler struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                                  `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta                `json:"metadata"`
	Spec     OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec   `json:"spec"`
	Status   OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus `json:"status"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscaler) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscaler) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscaler) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetSpec returns the value of Spec.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscaler) GetSpec() OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec {
	return s.Spec
}

// GetStatus returns the value of Status.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscaler) GetStatus() OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus {
	return s.Status
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscaler) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscaler) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscaler) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetSpec sets the value of Spec.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscaler) SetSpec(val OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec) {
	s.Spec = val
}

// SetStatus sets the value of Status.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscaler) SetStatus(val OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus) {
	s.Status = val
}

func (*IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscaler) readAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRes() {
}
func (*IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscaler) readAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusRes() {
}

// HorizontalPodAutoscalerBehavior configures the scaling behavior of the target in both Up and Down
// directions (scaleUp and scaleDown fields respectively).
// Ref: #/components/schemas/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerBehavior
type IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior struct {
	ScaleDown OptIoK8sAPIAutoscalingV2beta2HPAScalingRules `json:"scaleDown"`
	ScaleUp   OptIoK8sAPIAutoscalingV2beta2HPAScalingRules `json:"scaleUp"`
}

// GetScaleDown returns the value of ScaleDown.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior) GetScaleDown() OptIoK8sAPIAutoscalingV2beta2HPAScalingRules {
	return s.ScaleDown
}

// GetScaleUp returns the value of ScaleUp.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior) GetScaleUp() OptIoK8sAPIAutoscalingV2beta2HPAScalingRules {
	return s.ScaleUp
}

// SetScaleDown sets the value of ScaleDown.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior) SetScaleDown(val OptIoK8sAPIAutoscalingV2beta2HPAScalingRules) {
	s.ScaleDown = val
}

// SetScaleUp sets the value of ScaleUp.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior) SetScaleUp(val OptIoK8sAPIAutoscalingV2beta2HPAScalingRules) {
	s.ScaleUp = val
}

// HorizontalPodAutoscalerCondition describes the state of a HorizontalPodAutoscaler at a certain
// point.
// Ref: #/components/schemas/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerCondition
type IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerCondition struct {
	LastTransitionTime OptIoK8sApimachineryPkgApisMetaV1Time `json:"lastTransitionTime"`
	// Message is a human-readable explanation containing details about the transition.
	Message OptString `json:"message"`
	// Reason is the reason for the condition's last transition.
	Reason OptString `json:"reason"`
	// Status is the status of the condition (True, False, Unknown).
	Status string `json:"status"`
	// Type describes the current condition.
	Type string `json:"type"`
}

// GetLastTransitionTime returns the value of LastTransitionTime.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerCondition) GetLastTransitionTime() OptIoK8sApimachineryPkgApisMetaV1Time {
	return s.LastTransitionTime
}

// GetMessage returns the value of Message.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerCondition) GetMessage() OptString {
	return s.Message
}

// GetReason returns the value of Reason.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerCondition) GetReason() OptString {
	return s.Reason
}

// GetStatus returns the value of Status.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerCondition) GetStatus() string {
	return s.Status
}

// GetType returns the value of Type.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerCondition) GetType() string {
	return s.Type
}

// SetLastTransitionTime sets the value of LastTransitionTime.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerCondition) SetLastTransitionTime(val OptIoK8sApimachineryPkgApisMetaV1Time) {
	s.LastTransitionTime = val
}

// SetMessage sets the value of Message.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerCondition) SetMessage(val OptString) {
	s.Message = val
}

// SetReason sets the value of Reason.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerCondition) SetReason(val OptString) {
	s.Reason = val
}

// SetStatus sets the value of Status.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerCondition) SetStatus(val string) {
	s.Status = val
}

// SetType sets the value of Type.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerCondition) SetType(val string) {
	s.Type = val
}

// HorizontalPodAutoscalerList is a list of horizontal pod autoscaler objects.
// Ref: #/components/schemas/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerList
type IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Items is the list of horizontal pod autoscaler objects.
	Items []IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscaler `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerList) GetItems() []IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscaler {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerList) SetItems(val []IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscaler) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerList) listAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesRes() {
}
func (*IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerList) listAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRes() {
}

// HorizontalPodAutoscalerSpec describes the desired functionality of the HorizontalPodAutoscaler.
// Ref: #/components/schemas/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerSpec
type IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec struct {
	Behavior OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior `json:"behavior"`
	// MaxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up. It
	// cannot be less that minReplicas.
	MaxReplicas int32 `json:"maxReplicas"`
	// Metrics contains the specifications for which to use to calculate the desired replica count (the
	// maximum replica count across all metrics will be used).  The desired replica count is calculated
	// multiplying the ratio between the target value and the current value by the current number of pods.
	//   Ergo, metrics used must decrease as the pod count is increased, and vice-versa.  See the
	// individual metric source types for more information about how each type of metric must respond. If
	// not set, the default metric will be set to 80% average CPU utilization.
	Metrics []IoK8sAPIAutoscalingV2beta2MetricSpec `json:"metrics"`
	// MinReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.
	// It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is
	// enabled and at least one Object or External metric is configured.  Scaling is active as long as at
	// least one metric value is available.
	MinReplicas    OptInt32                                              `json:"minReplicas"`
	ScaleTargetRef IoK8sAPIAutoscalingV2beta2CrossVersionObjectReference `json:"scaleTargetRef"`
}

// GetBehavior returns the value of Behavior.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec) GetBehavior() OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior {
	return s.Behavior
}

// GetMaxReplicas returns the value of MaxReplicas.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec) GetMaxReplicas() int32 {
	return s.MaxReplicas
}

// GetMetrics returns the value of Metrics.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec) GetMetrics() []IoK8sAPIAutoscalingV2beta2MetricSpec {
	return s.Metrics
}

// GetMinReplicas returns the value of MinReplicas.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec) GetMinReplicas() OptInt32 {
	return s.MinReplicas
}

// GetScaleTargetRef returns the value of ScaleTargetRef.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec) GetScaleTargetRef() IoK8sAPIAutoscalingV2beta2CrossVersionObjectReference {
	return s.ScaleTargetRef
}

// SetBehavior sets the value of Behavior.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec) SetBehavior(val OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior) {
	s.Behavior = val
}

// SetMaxReplicas sets the value of MaxReplicas.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec) SetMaxReplicas(val int32) {
	s.MaxReplicas = val
}

// SetMetrics sets the value of Metrics.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec) SetMetrics(val []IoK8sAPIAutoscalingV2beta2MetricSpec) {
	s.Metrics = val
}

// SetMinReplicas sets the value of MinReplicas.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec) SetMinReplicas(val OptInt32) {
	s.MinReplicas = val
}

// SetScaleTargetRef sets the value of ScaleTargetRef.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec) SetScaleTargetRef(val IoK8sAPIAutoscalingV2beta2CrossVersionObjectReference) {
	s.ScaleTargetRef = val
}

// HorizontalPodAutoscalerStatus describes the current status of a horizontal pod autoscaler.
// Ref: #/components/schemas/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerStatus
type IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus struct {
	// Conditions is the set of conditions required for this autoscaler to scale its target, and
	// indicates whether or not those conditions are met.
	Conditions []IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerCondition `json:"conditions"`
	// CurrentMetrics is the last read state of the metrics used by this autoscaler.
	CurrentMetrics []IoK8sAPIAutoscalingV2beta2MetricStatus `json:"currentMetrics"`
	// CurrentReplicas is current number of replicas of pods managed by this autoscaler, as last seen by
	// the autoscaler.
	CurrentReplicas int32 `json:"currentReplicas"`
	// DesiredReplicas is the desired number of replicas of pods managed by this autoscaler, as last
	// calculated by the autoscaler.
	DesiredReplicas int32                                 `json:"desiredReplicas"`
	LastScaleTime   OptIoK8sApimachineryPkgApisMetaV1Time `json:"lastScaleTime"`
	// ObservedGeneration is the most recent generation observed by this autoscaler.
	ObservedGeneration OptInt64 `json:"observedGeneration"`
}

// GetConditions returns the value of Conditions.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus) GetConditions() []IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerCondition {
	return s.Conditions
}

// GetCurrentMetrics returns the value of CurrentMetrics.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus) GetCurrentMetrics() []IoK8sAPIAutoscalingV2beta2MetricStatus {
	return s.CurrentMetrics
}

// GetCurrentReplicas returns the value of CurrentReplicas.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus) GetCurrentReplicas() int32 {
	return s.CurrentReplicas
}

// GetDesiredReplicas returns the value of DesiredReplicas.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus) GetDesiredReplicas() int32 {
	return s.DesiredReplicas
}

// GetLastScaleTime returns the value of LastScaleTime.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus) GetLastScaleTime() OptIoK8sApimachineryPkgApisMetaV1Time {
	return s.LastScaleTime
}

// GetObservedGeneration returns the value of ObservedGeneration.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus) GetObservedGeneration() OptInt64 {
	return s.ObservedGeneration
}

// SetConditions sets the value of Conditions.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus) SetConditions(val []IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerCondition) {
	s.Conditions = val
}

// SetCurrentMetrics sets the value of CurrentMetrics.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus) SetCurrentMetrics(val []IoK8sAPIAutoscalingV2beta2MetricStatus) {
	s.CurrentMetrics = val
}

// SetCurrentReplicas sets the value of CurrentReplicas.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus) SetCurrentReplicas(val int32) {
	s.CurrentReplicas = val
}

// SetDesiredReplicas sets the value of DesiredReplicas.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus) SetDesiredReplicas(val int32) {
	s.DesiredReplicas = val
}

// SetLastScaleTime sets the value of LastScaleTime.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus) SetLastScaleTime(val OptIoK8sApimachineryPkgApisMetaV1Time) {
	s.LastScaleTime = val
}

// SetObservedGeneration sets the value of ObservedGeneration.
func (s *IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus) SetObservedGeneration(val OptInt64) {
	s.ObservedGeneration = val
}

// MetricIdentifier defines the name and optionally selector for a metric.
// Ref: #/components/schemas/io.k8s.api.autoscaling.v2beta2.MetricIdentifier
type IoK8sAPIAutoscalingV2beta2MetricIdentifier struct {
	// Name is the name of the given metric.
	Name     string                                         `json:"name"`
	Selector OptIoK8sApimachineryPkgApisMetaV1LabelSelector `json:"selector"`
}

// GetName returns the value of Name.
func (s *IoK8sAPIAutoscalingV2beta2MetricIdentifier) GetName() string {
	return s.Name
}

// GetSelector returns the value of Selector.
func (s *IoK8sAPIAutoscalingV2beta2MetricIdentifier) GetSelector() OptIoK8sApimachineryPkgApisMetaV1LabelSelector {
	return s.Selector
}

// SetName sets the value of Name.
func (s *IoK8sAPIAutoscalingV2beta2MetricIdentifier) SetName(val string) {
	s.Name = val
}

// SetSelector sets the value of Selector.
func (s *IoK8sAPIAutoscalingV2beta2MetricIdentifier) SetSelector(val OptIoK8sApimachineryPkgApisMetaV1LabelSelector) {
	s.Selector = val
}

// MetricSpec specifies how to scale based on a single metric (only `type` and one other matching
// field should be set at once).
// Ref: #/components/schemas/io.k8s.api.autoscaling.v2beta2.MetricSpec
type IoK8sAPIAutoscalingV2beta2MetricSpec struct {
	ContainerResource OptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource `json:"containerResource"`
	External          OptIoK8sAPIAutoscalingV2beta2ExternalMetricSource          `json:"external"`
	Object            OptIoK8sAPIAutoscalingV2beta2ObjectMetricSource            `json:"object"`
	Pods              OptIoK8sAPIAutoscalingV2beta2PodsMetricSource              `json:"pods"`
	Resource          OptIoK8sAPIAutoscalingV2beta2ResourceMetricSource          `json:"resource"`
	// Type is the type of metric source.  It should be one of "ContainerResource", "External", "Object",
	// "Pods" or "Resource", each mapping to a matching field in the object. Note: "ContainerResource"
	// type is available on when the feature-gate HPAContainerMetrics is enabled.
	Type string `json:"type"`
}

// GetContainerResource returns the value of ContainerResource.
func (s *IoK8sAPIAutoscalingV2beta2MetricSpec) GetContainerResource() OptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource {
	return s.ContainerResource
}

// GetExternal returns the value of External.
func (s *IoK8sAPIAutoscalingV2beta2MetricSpec) GetExternal() OptIoK8sAPIAutoscalingV2beta2ExternalMetricSource {
	return s.External
}

// GetObject returns the value of Object.
func (s *IoK8sAPIAutoscalingV2beta2MetricSpec) GetObject() OptIoK8sAPIAutoscalingV2beta2ObjectMetricSource {
	return s.Object
}

// GetPods returns the value of Pods.
func (s *IoK8sAPIAutoscalingV2beta2MetricSpec) GetPods() OptIoK8sAPIAutoscalingV2beta2PodsMetricSource {
	return s.Pods
}

// GetResource returns the value of Resource.
func (s *IoK8sAPIAutoscalingV2beta2MetricSpec) GetResource() OptIoK8sAPIAutoscalingV2beta2ResourceMetricSource {
	return s.Resource
}

// GetType returns the value of Type.
func (s *IoK8sAPIAutoscalingV2beta2MetricSpec) GetType() string {
	return s.Type
}

// SetContainerResource sets the value of ContainerResource.
func (s *IoK8sAPIAutoscalingV2beta2MetricSpec) SetContainerResource(val OptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource) {
	s.ContainerResource = val
}

// SetExternal sets the value of External.
func (s *IoK8sAPIAutoscalingV2beta2MetricSpec) SetExternal(val OptIoK8sAPIAutoscalingV2beta2ExternalMetricSource) {
	s.External = val
}

// SetObject sets the value of Object.
func (s *IoK8sAPIAutoscalingV2beta2MetricSpec) SetObject(val OptIoK8sAPIAutoscalingV2beta2ObjectMetricSource) {
	s.Object = val
}

// SetPods sets the value of Pods.
func (s *IoK8sAPIAutoscalingV2beta2MetricSpec) SetPods(val OptIoK8sAPIAutoscalingV2beta2PodsMetricSource) {
	s.Pods = val
}

// SetResource sets the value of Resource.
func (s *IoK8sAPIAutoscalingV2beta2MetricSpec) SetResource(val OptIoK8sAPIAutoscalingV2beta2ResourceMetricSource) {
	s.Resource = val
}

// SetType sets the value of Type.
func (s *IoK8sAPIAutoscalingV2beta2MetricSpec) SetType(val string) {
	s.Type = val
}

// MetricStatus describes the last-read state of a single metric.
// Ref: #/components/schemas/io.k8s.api.autoscaling.v2beta2.MetricStatus
type IoK8sAPIAutoscalingV2beta2MetricStatus struct {
	ContainerResource OptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus `json:"containerResource"`
	External          OptIoK8sAPIAutoscalingV2beta2ExternalMetricStatus          `json:"external"`
	Object            OptIoK8sAPIAutoscalingV2beta2ObjectMetricStatus            `json:"object"`
	Pods              OptIoK8sAPIAutoscalingV2beta2PodsMetricStatus              `json:"pods"`
	Resource          OptIoK8sAPIAutoscalingV2beta2ResourceMetricStatus          `json:"resource"`
	// Type is the type of metric source.  It will be one of "ContainerResource", "External", "Object",
	// "Pods" or "Resource", each corresponds to a matching field in the object. Note:
	// "ContainerResource" type is available on when the feature-gate HPAContainerMetrics is enabled.
	Type string `json:"type"`
}

// GetContainerResource returns the value of ContainerResource.
func (s *IoK8sAPIAutoscalingV2beta2MetricStatus) GetContainerResource() OptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus {
	return s.ContainerResource
}

// GetExternal returns the value of External.
func (s *IoK8sAPIAutoscalingV2beta2MetricStatus) GetExternal() OptIoK8sAPIAutoscalingV2beta2ExternalMetricStatus {
	return s.External
}

// GetObject returns the value of Object.
func (s *IoK8sAPIAutoscalingV2beta2MetricStatus) GetObject() OptIoK8sAPIAutoscalingV2beta2ObjectMetricStatus {
	return s.Object
}

// GetPods returns the value of Pods.
func (s *IoK8sAPIAutoscalingV2beta2MetricStatus) GetPods() OptIoK8sAPIAutoscalingV2beta2PodsMetricStatus {
	return s.Pods
}

// GetResource returns the value of Resource.
func (s *IoK8sAPIAutoscalingV2beta2MetricStatus) GetResource() OptIoK8sAPIAutoscalingV2beta2ResourceMetricStatus {
	return s.Resource
}

// GetType returns the value of Type.
func (s *IoK8sAPIAutoscalingV2beta2MetricStatus) GetType() string {
	return s.Type
}

// SetContainerResource sets the value of ContainerResource.
func (s *IoK8sAPIAutoscalingV2beta2MetricStatus) SetContainerResource(val OptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus) {
	s.ContainerResource = val
}

// SetExternal sets the value of External.
func (s *IoK8sAPIAutoscalingV2beta2MetricStatus) SetExternal(val OptIoK8sAPIAutoscalingV2beta2ExternalMetricStatus) {
	s.External = val
}

// SetObject sets the value of Object.
func (s *IoK8sAPIAutoscalingV2beta2MetricStatus) SetObject(val OptIoK8sAPIAutoscalingV2beta2ObjectMetricStatus) {
	s.Object = val
}

// SetPods sets the value of Pods.
func (s *IoK8sAPIAutoscalingV2beta2MetricStatus) SetPods(val OptIoK8sAPIAutoscalingV2beta2PodsMetricStatus) {
	s.Pods = val
}

// SetResource sets the value of Resource.
func (s *IoK8sAPIAutoscalingV2beta2MetricStatus) SetResource(val OptIoK8sAPIAutoscalingV2beta2ResourceMetricStatus) {
	s.Resource = val
}

// SetType sets the value of Type.
func (s *IoK8sAPIAutoscalingV2beta2MetricStatus) SetType(val string) {
	s.Type = val
}

// MetricTarget defines the target value, average value, or average utilization of a specific metric.
// Ref: #/components/schemas/io.k8s.api.autoscaling.v2beta2.MetricTarget
type IoK8sAPIAutoscalingV2beta2MetricTarget struct {
	// AverageUtilization is the target value of the average of the resource metric across all relevant
	// pods, represented as a percentage of the requested value of the resource for the pods. Currently
	// only valid for Resource metric source type.
	AverageUtilization OptInt32                                   `json:"averageUtilization"`
	AverageValue       OptIoK8sApimachineryPkgAPIResourceQuantity `json:"averageValue"`
	// Type represents whether the metric type is Utilization, Value, or AverageValue.
	Type  string                                     `json:"type"`
	Value OptIoK8sApimachineryPkgAPIResourceQuantity `json:"value"`
}

// GetAverageUtilization returns the value of AverageUtilization.
func (s *IoK8sAPIAutoscalingV2beta2MetricTarget) GetAverageUtilization() OptInt32 {
	return s.AverageUtilization
}

// GetAverageValue returns the value of AverageValue.
func (s *IoK8sAPIAutoscalingV2beta2MetricTarget) GetAverageValue() OptIoK8sApimachineryPkgAPIResourceQuantity {
	return s.AverageValue
}

// GetType returns the value of Type.
func (s *IoK8sAPIAutoscalingV2beta2MetricTarget) GetType() string {
	return s.Type
}

// GetValue returns the value of Value.
func (s *IoK8sAPIAutoscalingV2beta2MetricTarget) GetValue() OptIoK8sApimachineryPkgAPIResourceQuantity {
	return s.Value
}

// SetAverageUtilization sets the value of AverageUtilization.
func (s *IoK8sAPIAutoscalingV2beta2MetricTarget) SetAverageUtilization(val OptInt32) {
	s.AverageUtilization = val
}

// SetAverageValue sets the value of AverageValue.
func (s *IoK8sAPIAutoscalingV2beta2MetricTarget) SetAverageValue(val OptIoK8sApimachineryPkgAPIResourceQuantity) {
	s.AverageValue = val
}

// SetType sets the value of Type.
func (s *IoK8sAPIAutoscalingV2beta2MetricTarget) SetType(val string) {
	s.Type = val
}

// SetValue sets the value of Value.
func (s *IoK8sAPIAutoscalingV2beta2MetricTarget) SetValue(val OptIoK8sApimachineryPkgAPIResourceQuantity) {
	s.Value = val
}

// MetricValueStatus holds the current value for a metric.
// Ref: #/components/schemas/io.k8s.api.autoscaling.v2beta2.MetricValueStatus
type IoK8sAPIAutoscalingV2beta2MetricValueStatus struct {
	// CurrentAverageUtilization is the current value of the average of the resource metric across all
	// relevant pods, represented as a percentage of the requested value of the resource for the pods.
	AverageUtilization OptInt32                                   `json:"averageUtilization"`
	AverageValue       OptIoK8sApimachineryPkgAPIResourceQuantity `json:"averageValue"`
	Value              OptIoK8sApimachineryPkgAPIResourceQuantity `json:"value"`
}

// GetAverageUtilization returns the value of AverageUtilization.
func (s *IoK8sAPIAutoscalingV2beta2MetricValueStatus) GetAverageUtilization() OptInt32 {
	return s.AverageUtilization
}

// GetAverageValue returns the value of AverageValue.
func (s *IoK8sAPIAutoscalingV2beta2MetricValueStatus) GetAverageValue() OptIoK8sApimachineryPkgAPIResourceQuantity {
	return s.AverageValue
}

// GetValue returns the value of Value.
func (s *IoK8sAPIAutoscalingV2beta2MetricValueStatus) GetValue() OptIoK8sApimachineryPkgAPIResourceQuantity {
	return s.Value
}

// SetAverageUtilization sets the value of AverageUtilization.
func (s *IoK8sAPIAutoscalingV2beta2MetricValueStatus) SetAverageUtilization(val OptInt32) {
	s.AverageUtilization = val
}

// SetAverageValue sets the value of AverageValue.
func (s *IoK8sAPIAutoscalingV2beta2MetricValueStatus) SetAverageValue(val OptIoK8sApimachineryPkgAPIResourceQuantity) {
	s.AverageValue = val
}

// SetValue sets the value of Value.
func (s *IoK8sAPIAutoscalingV2beta2MetricValueStatus) SetValue(val OptIoK8sApimachineryPkgAPIResourceQuantity) {
	s.Value = val
}

// ObjectMetricSource indicates how to scale on a metric describing a kubernetes object (for example,
// hits-per-second on an Ingress object).
// Ref: #/components/schemas/io.k8s.api.autoscaling.v2beta2.ObjectMetricSource
type IoK8sAPIAutoscalingV2beta2ObjectMetricSource struct {
	DescribedObject IoK8sAPIAutoscalingV2beta2CrossVersionObjectReference `json:"describedObject"`
	Metric          IoK8sAPIAutoscalingV2beta2MetricIdentifier            `json:"metric"`
	Target          IoK8sAPIAutoscalingV2beta2MetricTarget                `json:"target"`
}

// GetDescribedObject returns the value of DescribedObject.
func (s *IoK8sAPIAutoscalingV2beta2ObjectMetricSource) GetDescribedObject() IoK8sAPIAutoscalingV2beta2CrossVersionObjectReference {
	return s.DescribedObject
}

// GetMetric returns the value of Metric.
func (s *IoK8sAPIAutoscalingV2beta2ObjectMetricSource) GetMetric() IoK8sAPIAutoscalingV2beta2MetricIdentifier {
	return s.Metric
}

// GetTarget returns the value of Target.
func (s *IoK8sAPIAutoscalingV2beta2ObjectMetricSource) GetTarget() IoK8sAPIAutoscalingV2beta2MetricTarget {
	return s.Target
}

// SetDescribedObject sets the value of DescribedObject.
func (s *IoK8sAPIAutoscalingV2beta2ObjectMetricSource) SetDescribedObject(val IoK8sAPIAutoscalingV2beta2CrossVersionObjectReference) {
	s.DescribedObject = val
}

// SetMetric sets the value of Metric.
func (s *IoK8sAPIAutoscalingV2beta2ObjectMetricSource) SetMetric(val IoK8sAPIAutoscalingV2beta2MetricIdentifier) {
	s.Metric = val
}

// SetTarget sets the value of Target.
func (s *IoK8sAPIAutoscalingV2beta2ObjectMetricSource) SetTarget(val IoK8sAPIAutoscalingV2beta2MetricTarget) {
	s.Target = val
}

// ObjectMetricStatus indicates the current value of a metric describing a kubernetes object (for
// example, hits-per-second on an Ingress object).
// Ref: #/components/schemas/io.k8s.api.autoscaling.v2beta2.ObjectMetricStatus
type IoK8sAPIAutoscalingV2beta2ObjectMetricStatus struct {
	Current         IoK8sAPIAutoscalingV2beta2MetricValueStatus           `json:"current"`
	DescribedObject IoK8sAPIAutoscalingV2beta2CrossVersionObjectReference `json:"describedObject"`
	Metric          IoK8sAPIAutoscalingV2beta2MetricIdentifier            `json:"metric"`
}

// GetCurrent returns the value of Current.
func (s *IoK8sAPIAutoscalingV2beta2ObjectMetricStatus) GetCurrent() IoK8sAPIAutoscalingV2beta2MetricValueStatus {
	return s.Current
}

// GetDescribedObject returns the value of DescribedObject.
func (s *IoK8sAPIAutoscalingV2beta2ObjectMetricStatus) GetDescribedObject() IoK8sAPIAutoscalingV2beta2CrossVersionObjectReference {
	return s.DescribedObject
}

// GetMetric returns the value of Metric.
func (s *IoK8sAPIAutoscalingV2beta2ObjectMetricStatus) GetMetric() IoK8sAPIAutoscalingV2beta2MetricIdentifier {
	return s.Metric
}

// SetCurrent sets the value of Current.
func (s *IoK8sAPIAutoscalingV2beta2ObjectMetricStatus) SetCurrent(val IoK8sAPIAutoscalingV2beta2MetricValueStatus) {
	s.Current = val
}

// SetDescribedObject sets the value of DescribedObject.
func (s *IoK8sAPIAutoscalingV2beta2ObjectMetricStatus) SetDescribedObject(val IoK8sAPIAutoscalingV2beta2CrossVersionObjectReference) {
	s.DescribedObject = val
}

// SetMetric sets the value of Metric.
func (s *IoK8sAPIAutoscalingV2beta2ObjectMetricStatus) SetMetric(val IoK8sAPIAutoscalingV2beta2MetricIdentifier) {
	s.Metric = val
}

// PodsMetricSource indicates how to scale on a metric describing each pod in the current scale
// target (for example, transactions-processed-per-second). The values will be averaged together
// before being compared to the target value.
// Ref: #/components/schemas/io.k8s.api.autoscaling.v2beta2.PodsMetricSource
type IoK8sAPIAutoscalingV2beta2PodsMetricSource struct {
	Metric IoK8sAPIAutoscalingV2beta2MetricIdentifier `json:"metric"`
	Target IoK8sAPIAutoscalingV2beta2MetricTarget     `json:"target"`
}

// GetMetric returns the value of Metric.
func (s *IoK8sAPIAutoscalingV2beta2PodsMetricSource) GetMetric() IoK8sAPIAutoscalingV2beta2MetricIdentifier {
	return s.Metric
}

// GetTarget returns the value of Target.
func (s *IoK8sAPIAutoscalingV2beta2PodsMetricSource) GetTarget() IoK8sAPIAutoscalingV2beta2MetricTarget {
	return s.Target
}

// SetMetric sets the value of Metric.
func (s *IoK8sAPIAutoscalingV2beta2PodsMetricSource) SetMetric(val IoK8sAPIAutoscalingV2beta2MetricIdentifier) {
	s.Metric = val
}

// SetTarget sets the value of Target.
func (s *IoK8sAPIAutoscalingV2beta2PodsMetricSource) SetTarget(val IoK8sAPIAutoscalingV2beta2MetricTarget) {
	s.Target = val
}

// PodsMetricStatus indicates the current value of a metric describing each pod in the current scale
// target (for example, transactions-processed-per-second).
// Ref: #/components/schemas/io.k8s.api.autoscaling.v2beta2.PodsMetricStatus
type IoK8sAPIAutoscalingV2beta2PodsMetricStatus struct {
	Current IoK8sAPIAutoscalingV2beta2MetricValueStatus `json:"current"`
	Metric  IoK8sAPIAutoscalingV2beta2MetricIdentifier  `json:"metric"`
}

// GetCurrent returns the value of Current.
func (s *IoK8sAPIAutoscalingV2beta2PodsMetricStatus) GetCurrent() IoK8sAPIAutoscalingV2beta2MetricValueStatus {
	return s.Current
}

// GetMetric returns the value of Metric.
func (s *IoK8sAPIAutoscalingV2beta2PodsMetricStatus) GetMetric() IoK8sAPIAutoscalingV2beta2MetricIdentifier {
	return s.Metric
}

// SetCurrent sets the value of Current.
func (s *IoK8sAPIAutoscalingV2beta2PodsMetricStatus) SetCurrent(val IoK8sAPIAutoscalingV2beta2MetricValueStatus) {
	s.Current = val
}

// SetMetric sets the value of Metric.
func (s *IoK8sAPIAutoscalingV2beta2PodsMetricStatus) SetMetric(val IoK8sAPIAutoscalingV2beta2MetricIdentifier) {
	s.Metric = val
}

// ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified
// in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The
// values will be averaged together before being compared to the target.  Such metrics are built in
// to Kubernetes, and have special scaling options on top of those available to normal per-pod
// metrics using the "pods" source.  Only one "target" type should be set.
// Ref: #/components/schemas/io.k8s.api.autoscaling.v2beta2.ResourceMetricSource
type IoK8sAPIAutoscalingV2beta2ResourceMetricSource struct {
	// Name is the name of the resource in question.
	Name   string                                 `json:"name"`
	Target IoK8sAPIAutoscalingV2beta2MetricTarget `json:"target"`
}

// GetName returns the value of Name.
func (s *IoK8sAPIAutoscalingV2beta2ResourceMetricSource) GetName() string {
	return s.Name
}

// GetTarget returns the value of Target.
func (s *IoK8sAPIAutoscalingV2beta2ResourceMetricSource) GetTarget() IoK8sAPIAutoscalingV2beta2MetricTarget {
	return s.Target
}

// SetName sets the value of Name.
func (s *IoK8sAPIAutoscalingV2beta2ResourceMetricSource) SetName(val string) {
	s.Name = val
}

// SetTarget sets the value of Target.
func (s *IoK8sAPIAutoscalingV2beta2ResourceMetricSource) SetTarget(val IoK8sAPIAutoscalingV2beta2MetricTarget) {
	s.Target = val
}

// ResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as
// specified in requests and limits, describing each pod in the current scale target (e.g. CPU or
// memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of
// those available to normal per-pod metrics using the "pods" source.
// Ref: #/components/schemas/io.k8s.api.autoscaling.v2beta2.ResourceMetricStatus
type IoK8sAPIAutoscalingV2beta2ResourceMetricStatus struct {
	Current IoK8sAPIAutoscalingV2beta2MetricValueStatus `json:"current"`
	// Name is the name of the resource in question.
	Name string `json:"name"`
}

// GetCurrent returns the value of Current.
func (s *IoK8sAPIAutoscalingV2beta2ResourceMetricStatus) GetCurrent() IoK8sAPIAutoscalingV2beta2MetricValueStatus {
	return s.Current
}

// GetName returns the value of Name.
func (s *IoK8sAPIAutoscalingV2beta2ResourceMetricStatus) GetName() string {
	return s.Name
}

// SetCurrent sets the value of Current.
func (s *IoK8sAPIAutoscalingV2beta2ResourceMetricStatus) SetCurrent(val IoK8sAPIAutoscalingV2beta2MetricValueStatus) {
	s.Current = val
}

// SetName sets the value of Name.
func (s *IoK8sAPIAutoscalingV2beta2ResourceMetricStatus) SetName(val string) {
	s.Name = val
}

// CronJob represents the configuration of a single cron job.
// Ref: #/components/schemas/io.k8s.api.batch.v1.CronJob
type IoK8sAPIBatchV1CronJob struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                   `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata"`
	Spec     OptIoK8sAPIBatchV1CronJobSpec               `json:"spec"`
	Status   OptIoK8sAPIBatchV1CronJobStatus             `json:"status"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIBatchV1CronJob) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIBatchV1CronJob) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIBatchV1CronJob) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetSpec returns the value of Spec.
func (s *IoK8sAPIBatchV1CronJob) GetSpec() OptIoK8sAPIBatchV1CronJobSpec {
	return s.Spec
}

// GetStatus returns the value of Status.
func (s *IoK8sAPIBatchV1CronJob) GetStatus() OptIoK8sAPIBatchV1CronJobStatus {
	return s.Status
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIBatchV1CronJob) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIBatchV1CronJob) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIBatchV1CronJob) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetSpec sets the value of Spec.
func (s *IoK8sAPIBatchV1CronJob) SetSpec(val OptIoK8sAPIBatchV1CronJobSpec) {
	s.Spec = val
}

// SetStatus sets the value of Status.
func (s *IoK8sAPIBatchV1CronJob) SetStatus(val OptIoK8sAPIBatchV1CronJobStatus) {
	s.Status = val
}

func (*IoK8sAPIBatchV1CronJob) readBatchV1NamespacedCronJobRes()       {}
func (*IoK8sAPIBatchV1CronJob) readBatchV1NamespacedCronJobStatusRes() {}

// CronJobList is a collection of cron jobs.
// Ref: #/components/schemas/io.k8s.api.batch.v1.CronJobList
type IoK8sAPIBatchV1CronJobList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Items is the list of CronJobs.
	Items []IoK8sAPIBatchV1CronJob `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIBatchV1CronJobList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPIBatchV1CronJobList) GetItems() []IoK8sAPIBatchV1CronJob {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIBatchV1CronJobList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIBatchV1CronJobList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIBatchV1CronJobList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPIBatchV1CronJobList) SetItems(val []IoK8sAPIBatchV1CronJob) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIBatchV1CronJobList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIBatchV1CronJobList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPIBatchV1CronJobList) listBatchV1CronJobForAllNamespacesRes() {}
func (*IoK8sAPIBatchV1CronJobList) listBatchV1NamespacedCronJobRes()       {}

// CronJobSpec describes how the job execution will look like and when it will actually run.
// Ref: #/components/schemas/io.k8s.api.batch.v1.CronJobSpec
type IoK8sAPIBatchV1CronJobSpec struct {
	// Specifies how to treat concurrent executions of a Job. Valid values are: - "Allow" (default):
	// allows CronJobs to run concurrently; - "Forbid": forbids concurrent runs, skipping next run if
	// previous run hasn't finished yet; - "Replace": cancels currently running job and replaces it with
	// a new one.
	ConcurrencyPolicy OptString `json:"concurrencyPolicy"`
	// The number of failed finished jobs to retain. Value must be non-negative integer. Defaults to 1.
	FailedJobsHistoryLimit OptInt32                       `json:"failedJobsHistoryLimit"`
	JobTemplate            IoK8sAPIBatchV1JobTemplateSpec `json:"jobTemplate"`
	// The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
	Schedule string `json:"schedule"`
	// Optional deadline in seconds for starting the job if it misses scheduled time for any reason.
	// Missed jobs executions will be counted as failed ones.
	StartingDeadlineSeconds OptInt64 `json:"startingDeadlineSeconds"`
	// The number of successful finished jobs to retain. Value must be non-negative integer. Defaults to
	// 3.
	SuccessfulJobsHistoryLimit OptInt32 `json:"successfulJobsHistoryLimit"`
	// This flag tells the controller to suspend subsequent executions, it does not apply to already
	// started executions.  Defaults to false.
	Suspend OptBool `json:"suspend"`
}

// GetConcurrencyPolicy returns the value of ConcurrencyPolicy.
func (s *IoK8sAPIBatchV1CronJobSpec) GetConcurrencyPolicy() OptString {
	return s.ConcurrencyPolicy
}

// GetFailedJobsHistoryLimit returns the value of FailedJobsHistoryLimit.
func (s *IoK8sAPIBatchV1CronJobSpec) GetFailedJobsHistoryLimit() OptInt32 {
	return s.FailedJobsHistoryLimit
}

// GetJobTemplate returns the value of JobTemplate.
func (s *IoK8sAPIBatchV1CronJobSpec) GetJobTemplate() IoK8sAPIBatchV1JobTemplateSpec {
	return s.JobTemplate
}

// GetSchedule returns the value of Schedule.
func (s *IoK8sAPIBatchV1CronJobSpec) GetSchedule() string {
	return s.Schedule
}

// GetStartingDeadlineSeconds returns the value of StartingDeadlineSeconds.
func (s *IoK8sAPIBatchV1CronJobSpec) GetStartingDeadlineSeconds() OptInt64 {
	return s.StartingDeadlineSeconds
}

// GetSuccessfulJobsHistoryLimit returns the value of SuccessfulJobsHistoryLimit.
func (s *IoK8sAPIBatchV1CronJobSpec) GetSuccessfulJobsHistoryLimit() OptInt32 {
	return s.SuccessfulJobsHistoryLimit
}

// GetSuspend returns the value of Suspend.
func (s *IoK8sAPIBatchV1CronJobSpec) GetSuspend() OptBool {
	return s.Suspend
}

// SetConcurrencyPolicy sets the value of ConcurrencyPolicy.
func (s *IoK8sAPIBatchV1CronJobSpec) SetConcurrencyPolicy(val OptString) {
	s.ConcurrencyPolicy = val
}

// SetFailedJobsHistoryLimit sets the value of FailedJobsHistoryLimit.
func (s *IoK8sAPIBatchV1CronJobSpec) SetFailedJobsHistoryLimit(val OptInt32) {
	s.FailedJobsHistoryLimit = val
}

// SetJobTemplate sets the value of JobTemplate.
func (s *IoK8sAPIBatchV1CronJobSpec) SetJobTemplate(val IoK8sAPIBatchV1JobTemplateSpec) {
	s.JobTemplate = val
}

// SetSchedule sets the value of Schedule.
func (s *IoK8sAPIBatchV1CronJobSpec) SetSchedule(val string) {
	s.Schedule = val
}

// SetStartingDeadlineSeconds sets the value of StartingDeadlineSeconds.
func (s *IoK8sAPIBatchV1CronJobSpec) SetStartingDeadlineSeconds(val OptInt64) {
	s.StartingDeadlineSeconds = val
}

// SetSuccessfulJobsHistoryLimit sets the value of SuccessfulJobsHistoryLimit.
func (s *IoK8sAPIBatchV1CronJobSpec) SetSuccessfulJobsHistoryLimit(val OptInt32) {
	s.SuccessfulJobsHistoryLimit = val
}

// SetSuspend sets the value of Suspend.
func (s *IoK8sAPIBatchV1CronJobSpec) SetSuspend(val OptBool) {
	s.Suspend = val
}

// CronJobStatus represents the current state of a cron job.
// Ref: #/components/schemas/io.k8s.api.batch.v1.CronJobStatus
type IoK8sAPIBatchV1CronJobStatus struct {
	// A list of pointers to currently running jobs.
	Active             []IoK8sAPICoreV1ObjectReference       `json:"active"`
	LastScheduleTime   OptIoK8sApimachineryPkgApisMetaV1Time `json:"lastScheduleTime"`
	LastSuccessfulTime OptIoK8sApimachineryPkgApisMetaV1Time `json:"lastSuccessfulTime"`
}

// GetActive returns the value of Active.
func (s *IoK8sAPIBatchV1CronJobStatus) GetActive() []IoK8sAPICoreV1ObjectReference {
	return s.Active
}

// GetLastScheduleTime returns the value of LastScheduleTime.
func (s *IoK8sAPIBatchV1CronJobStatus) GetLastScheduleTime() OptIoK8sApimachineryPkgApisMetaV1Time {
	return s.LastScheduleTime
}

// GetLastSuccessfulTime returns the value of LastSuccessfulTime.
func (s *IoK8sAPIBatchV1CronJobStatus) GetLastSuccessfulTime() OptIoK8sApimachineryPkgApisMetaV1Time {
	return s.LastSuccessfulTime
}

// SetActive sets the value of Active.
func (s *IoK8sAPIBatchV1CronJobStatus) SetActive(val []IoK8sAPICoreV1ObjectReference) {
	s.Active = val
}

// SetLastScheduleTime sets the value of LastScheduleTime.
func (s *IoK8sAPIBatchV1CronJobStatus) SetLastScheduleTime(val OptIoK8sApimachineryPkgApisMetaV1Time) {
	s.LastScheduleTime = val
}

// SetLastSuccessfulTime sets the value of LastSuccessfulTime.
func (s *IoK8sAPIBatchV1CronJobStatus) SetLastSuccessfulTime(val OptIoK8sApimachineryPkgApisMetaV1Time) {
	s.LastSuccessfulTime = val
}

// Job represents the configuration of a single job.
// Ref: #/components/schemas/io.k8s.api.batch.v1.Job
type IoK8sAPIBatchV1Job struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                   `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata"`
	Spec     OptIoK8sAPIBatchV1JobSpec                   `json:"spec"`
	Status   OptIoK8sAPIBatchV1JobStatus                 `json:"status"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIBatchV1Job) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIBatchV1Job) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIBatchV1Job) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetSpec returns the value of Spec.
func (s *IoK8sAPIBatchV1Job) GetSpec() OptIoK8sAPIBatchV1JobSpec {
	return s.Spec
}

// GetStatus returns the value of Status.
func (s *IoK8sAPIBatchV1Job) GetStatus() OptIoK8sAPIBatchV1JobStatus {
	return s.Status
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIBatchV1Job) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIBatchV1Job) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIBatchV1Job) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetSpec sets the value of Spec.
func (s *IoK8sAPIBatchV1Job) SetSpec(val OptIoK8sAPIBatchV1JobSpec) {
	s.Spec = val
}

// SetStatus sets the value of Status.
func (s *IoK8sAPIBatchV1Job) SetStatus(val OptIoK8sAPIBatchV1JobStatus) {
	s.Status = val
}

func (*IoK8sAPIBatchV1Job) readBatchV1NamespacedJobRes()       {}
func (*IoK8sAPIBatchV1Job) readBatchV1NamespacedJobStatusRes() {}

// JobCondition describes current state of a job.
// Ref: #/components/schemas/io.k8s.api.batch.v1.JobCondition
type IoK8sAPIBatchV1JobCondition struct {
	LastProbeTime      OptIoK8sApimachineryPkgApisMetaV1Time `json:"lastProbeTime"`
	LastTransitionTime OptIoK8sApimachineryPkgApisMetaV1Time `json:"lastTransitionTime"`
	// Human readable message indicating details about last transition.
	Message OptString `json:"message"`
	// (brief) reason for the condition's last transition.
	Reason OptString `json:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status string `json:"status"`
	// Type of job condition, Complete or Failed.
	Type string `json:"type"`
}

// GetLastProbeTime returns the value of LastProbeTime.
func (s *IoK8sAPIBatchV1JobCondition) GetLastProbeTime() OptIoK8sApimachineryPkgApisMetaV1Time {
	return s.LastProbeTime
}

// GetLastTransitionTime returns the value of LastTransitionTime.
func (s *IoK8sAPIBatchV1JobCondition) GetLastTransitionTime() OptIoK8sApimachineryPkgApisMetaV1Time {
	return s.LastTransitionTime
}

// GetMessage returns the value of Message.
func (s *IoK8sAPIBatchV1JobCondition) GetMessage() OptString {
	return s.Message
}

// GetReason returns the value of Reason.
func (s *IoK8sAPIBatchV1JobCondition) GetReason() OptString {
	return s.Reason
}

// GetStatus returns the value of Status.
func (s *IoK8sAPIBatchV1JobCondition) GetStatus() string {
	return s.Status
}

// GetType returns the value of Type.
func (s *IoK8sAPIBatchV1JobCondition) GetType() string {
	return s.Type
}

// SetLastProbeTime sets the value of LastProbeTime.
func (s *IoK8sAPIBatchV1JobCondition) SetLastProbeTime(val OptIoK8sApimachineryPkgApisMetaV1Time) {
	s.LastProbeTime = val
}

// SetLastTransitionTime sets the value of LastTransitionTime.
func (s *IoK8sAPIBatchV1JobCondition) SetLastTransitionTime(val OptIoK8sApimachineryPkgApisMetaV1Time) {
	s.LastTransitionTime = val
}

// SetMessage sets the value of Message.
func (s *IoK8sAPIBatchV1JobCondition) SetMessage(val OptString) {
	s.Message = val
}

// SetReason sets the value of Reason.
func (s *IoK8sAPIBatchV1JobCondition) SetReason(val OptString) {
	s.Reason = val
}

// SetStatus sets the value of Status.
func (s *IoK8sAPIBatchV1JobCondition) SetStatus(val string) {
	s.Status = val
}

// SetType sets the value of Type.
func (s *IoK8sAPIBatchV1JobCondition) SetType(val string) {
	s.Type = val
}

// JobList is a collection of jobs.
// Ref: #/components/schemas/io.k8s.api.batch.v1.JobList
type IoK8sAPIBatchV1JobList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Items is the list of Jobs.
	Items []IoK8sAPIBatchV1Job `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIBatchV1JobList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPIBatchV1JobList) GetItems() []IoK8sAPIBatchV1Job {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIBatchV1JobList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIBatchV1JobList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIBatchV1JobList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPIBatchV1JobList) SetItems(val []IoK8sAPIBatchV1Job) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIBatchV1JobList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIBatchV1JobList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPIBatchV1JobList) listBatchV1JobForAllNamespacesRes() {}
func (*IoK8sAPIBatchV1JobList) listBatchV1NamespacedJobRes()       {}

// JobSpec describes how the job execution will look like.
// Ref: #/components/schemas/io.k8s.api.batch.v1.JobSpec
type IoK8sAPIBatchV1JobSpec struct {
	// Specifies the duration in seconds relative to the startTime that the job may be continuously
	// active before the system tries to terminate it; value must be positive integer. If a Job is
	// suspended (at creation or through an update), this timer will effectively be stopped and reset
	// when the Job is resumed again.
	ActiveDeadlineSeconds OptInt64 `json:"activeDeadlineSeconds"`
	// Specifies the number of retries before marking this job failed. Defaults to 6.
	BackoffLimit OptInt32 `json:"backoffLimit"`
	// CompletionMode specifies how Pod completions are tracked. It can be `NonIndexed` (default) or
	// `Indexed`.
	// `NonIndexed` means that the Job is considered complete when there have been .spec.completions
	// successfully completed Pods. Each Pod completion is homologous to each other.
	// `Indexed` means that the Pods of a Job get an associated completion index from 0 to (.spec.
	// completions - 1), available in the annotation batch.kubernetes.io/job-completion-index. The Job is
	// considered complete when there is one successfully completed Pod for each index. When value is
	// `Indexed`, .spec.completions must be specified and `.spec.parallelism` must be less than or equal
	// to 10^5. In addition, The Pod name takes the form `$(job-name)-$(index)-$(random-string)`, the Pod
	// hostname takes the form `$(job-name)-$(index)`.
	// This field is beta-level. More completion modes can be added in the future. If the Job controller
	// observes a mode that it doesn't recognize, the controller skips updates for the Job.
	CompletionMode OptString `json:"completionMode"`
	// Specifies the desired number of successfully finished pods the job should be run with.  Setting to
	// nil means that the success of any pod signals the success of all pods, and allows parallelism to
	// have any positive value.  Setting to 1 means that parallelism is limited to 1 and the success of
	// that pod signals the success of the job. More info: https://kubernetes.
	// io/docs/concepts/workloads/controllers/jobs-run-to-completion/.
	Completions OptInt32 `json:"completions"`
	// ManualSelector controls generation of pod labels and pod selectors. Leave `manualSelector` unset
	// unless you are certain what you are doing. When false or unset, the system pick labels unique to
	// this job and appends those labels to the pod template.  When true, the user is responsible for
	// picking unique labels and specifying the selector.  Failure to pick a unique label may cause this
	// and other jobs to not function correctly.  However, You may see `manualSelector=true` in jobs that
	// were created with the old `extensions/v1beta1` API. More info: https://kubernetes.
	// io/docs/concepts/workloads/controllers/jobs-run-to-completion/#specifying-your-own-pod-selector.
	ManualSelector OptBool `json:"manualSelector"`
	// Specifies the maximum desired number of pods the job should run at any given time. The actual
	// number of pods running in steady state will be less than this number when ((.spec.completions - .
	// status.successful) < .spec.parallelism), i.e. when the work left to do is less than max
	// parallelism. More info: https://kubernetes.
	// io/docs/concepts/workloads/controllers/jobs-run-to-completion/.
	Parallelism OptInt32                                       `json:"parallelism"`
	Selector    OptIoK8sApimachineryPkgApisMetaV1LabelSelector `json:"selector"`
	// Suspend specifies whether the Job controller should create Pods or not. If a Job is created with
	// suspend set to true, no Pods are created by the Job controller. If a Job is suspended after
	// creation (i.e. the flag goes from false to true), the Job controller will delete all active Pods
	// associated with this Job. Users must design their workload to gracefully handle this. Suspending a
	// Job will reset the StartTime field of the Job, effectively resetting the ActiveDeadlineSeconds
	// timer too. Defaults to false.
	// This field is beta-level, gated by SuspendJob feature flag (enabled by default).
	Suspend  OptBool                       `json:"suspend"`
	Template IoK8sAPICoreV1PodTemplateSpec `json:"template"`
	// TtlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete
	// or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible
	// to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g.
	// finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If
	// this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes.
	// This field is alpha-level and is only honored by servers that enable the TTLAfterFinished feature.
	TtlSecondsAfterFinished OptInt32 `json:"ttlSecondsAfterFinished"`
}

// GetActiveDeadlineSeconds returns the value of ActiveDeadlineSeconds.
func (s *IoK8sAPIBatchV1JobSpec) GetActiveDeadlineSeconds() OptInt64 {
	return s.ActiveDeadlineSeconds
}

// GetBackoffLimit returns the value of BackoffLimit.
func (s *IoK8sAPIBatchV1JobSpec) GetBackoffLimit() OptInt32 {
	return s.BackoffLimit
}

// GetCompletionMode returns the value of CompletionMode.
func (s *IoK8sAPIBatchV1JobSpec) GetCompletionMode() OptString {
	return s.CompletionMode
}

// GetCompletions returns the value of Completions.
func (s *IoK8sAPIBatchV1JobSpec) GetCompletions() OptInt32 {
	return s.Completions
}

// GetManualSelector returns the value of ManualSelector.
func (s *IoK8sAPIBatchV1JobSpec) GetManualSelector() OptBool {
	return s.ManualSelector
}

// GetParallelism returns the value of Parallelism.
func (s *IoK8sAPIBatchV1JobSpec) GetParallelism() OptInt32 {
	return s.Parallelism
}

// GetSelector returns the value of Selector.
func (s *IoK8sAPIBatchV1JobSpec) GetSelector() OptIoK8sApimachineryPkgApisMetaV1LabelSelector {
	return s.Selector
}

// GetSuspend returns the value of Suspend.
func (s *IoK8sAPIBatchV1JobSpec) GetSuspend() OptBool {
	return s.Suspend
}

// GetTemplate returns the value of Template.
func (s *IoK8sAPIBatchV1JobSpec) GetTemplate() IoK8sAPICoreV1PodTemplateSpec {
	return s.Template
}

// GetTtlSecondsAfterFinished returns the value of TtlSecondsAfterFinished.
func (s *IoK8sAPIBatchV1JobSpec) GetTtlSecondsAfterFinished() OptInt32 {
	return s.TtlSecondsAfterFinished
}

// SetActiveDeadlineSeconds sets the value of ActiveDeadlineSeconds.
func (s *IoK8sAPIBatchV1JobSpec) SetActiveDeadlineSeconds(val OptInt64) {
	s.ActiveDeadlineSeconds = val
}

// SetBackoffLimit sets the value of BackoffLimit.
func (s *IoK8sAPIBatchV1JobSpec) SetBackoffLimit(val OptInt32) {
	s.BackoffLimit = val
}

// SetCompletionMode sets the value of CompletionMode.
func (s *IoK8sAPIBatchV1JobSpec) SetCompletionMode(val OptString) {
	s.CompletionMode = val
}

// SetCompletions sets the value of Completions.
func (s *IoK8sAPIBatchV1JobSpec) SetCompletions(val OptInt32) {
	s.Completions = val
}

// SetManualSelector sets the value of ManualSelector.
func (s *IoK8sAPIBatchV1JobSpec) SetManualSelector(val OptBool) {
	s.ManualSelector = val
}

// SetParallelism sets the value of Parallelism.
func (s *IoK8sAPIBatchV1JobSpec) SetParallelism(val OptInt32) {
	s.Parallelism = val
}

// SetSelector sets the value of Selector.
func (s *IoK8sAPIBatchV1JobSpec) SetSelector(val OptIoK8sApimachineryPkgApisMetaV1LabelSelector) {
	s.Selector = val
}

// SetSuspend sets the value of Suspend.
func (s *IoK8sAPIBatchV1JobSpec) SetSuspend(val OptBool) {
	s.Suspend = val
}

// SetTemplate sets the value of Template.
func (s *IoK8sAPIBatchV1JobSpec) SetTemplate(val IoK8sAPICoreV1PodTemplateSpec) {
	s.Template = val
}

// SetTtlSecondsAfterFinished sets the value of TtlSecondsAfterFinished.
func (s *IoK8sAPIBatchV1JobSpec) SetTtlSecondsAfterFinished(val OptInt32) {
	s.TtlSecondsAfterFinished = val
}

// JobStatus represents the current state of a Job.
// Ref: #/components/schemas/io.k8s.api.batch.v1.JobStatus
type IoK8sAPIBatchV1JobStatus struct {
	// The number of actively running pods.
	Active OptInt32 `json:"active"`
	// CompletedIndexes holds the completed indexes when .spec.completionMode = "Indexed" in a text
	// format. The indexes are represented as decimal integers separated by commas. The numbers are
	// listed in increasing order. Three or more consecutive numbers are compressed and represented by
	// the first and last element of the series, separated by a hyphen. For example, if the completed
	// indexes are 1, 3, 4, 5 and 7, they are represented as "1,3-5,7".
	CompletedIndexes OptString                             `json:"completedIndexes"`
	CompletionTime   OptIoK8sApimachineryPkgApisMetaV1Time `json:"completionTime"`
	// The latest available observations of an object's current state. When a Job fails, one of the
	// conditions will have type "Failed" and status true. When a Job is suspended, one of the conditions
	// will have type "Suspended" and status true; when the Job is resumed, the status of this condition
	// will become false. When a Job is completed, one of the conditions will have type "Complete" and
	// status true. More info: https://kubernetes.
	// io/docs/concepts/workloads/controllers/jobs-run-to-completion/.
	Conditions []IoK8sAPIBatchV1JobCondition `json:"conditions"`
	// The number of pods which reached phase Failed.
	Failed    OptInt32                              `json:"failed"`
	StartTime OptIoK8sApimachineryPkgApisMetaV1Time `json:"startTime"`
	// The number of pods which reached phase Succeeded.
	Succeeded               OptInt32                                  `json:"succeeded"`
	UncountedTerminatedPods OptIoK8sAPIBatchV1UncountedTerminatedPods `json:"uncountedTerminatedPods"`
}

// GetActive returns the value of Active.
func (s *IoK8sAPIBatchV1JobStatus) GetActive() OptInt32 {
	return s.Active
}

// GetCompletedIndexes returns the value of CompletedIndexes.
func (s *IoK8sAPIBatchV1JobStatus) GetCompletedIndexes() OptString {
	return s.CompletedIndexes
}

// GetCompletionTime returns the value of CompletionTime.
func (s *IoK8sAPIBatchV1JobStatus) GetCompletionTime() OptIoK8sApimachineryPkgApisMetaV1Time {
	return s.CompletionTime
}

// GetConditions returns the value of Conditions.
func (s *IoK8sAPIBatchV1JobStatus) GetConditions() []IoK8sAPIBatchV1JobCondition {
	return s.Conditions
}

// GetFailed returns the value of Failed.
func (s *IoK8sAPIBatchV1JobStatus) GetFailed() OptInt32 {
	return s.Failed
}

// GetStartTime returns the value of StartTime.
func (s *IoK8sAPIBatchV1JobStatus) GetStartTime() OptIoK8sApimachineryPkgApisMetaV1Time {
	return s.StartTime
}

// GetSucceeded returns the value of Succeeded.
func (s *IoK8sAPIBatchV1JobStatus) GetSucceeded() OptInt32 {
	return s.Succeeded
}

// GetUncountedTerminatedPods returns the value of UncountedTerminatedPods.
func (s *IoK8sAPIBatchV1JobStatus) GetUncountedTerminatedPods() OptIoK8sAPIBatchV1UncountedTerminatedPods {
	return s.UncountedTerminatedPods
}

// SetActive sets the value of Active.
func (s *IoK8sAPIBatchV1JobStatus) SetActive(val OptInt32) {
	s.Active = val
}

// SetCompletedIndexes sets the value of CompletedIndexes.
func (s *IoK8sAPIBatchV1JobStatus) SetCompletedIndexes(val OptString) {
	s.CompletedIndexes = val
}

// SetCompletionTime sets the value of CompletionTime.
func (s *IoK8sAPIBatchV1JobStatus) SetCompletionTime(val OptIoK8sApimachineryPkgApisMetaV1Time) {
	s.CompletionTime = val
}

// SetConditions sets the value of Conditions.
func (s *IoK8sAPIBatchV1JobStatus) SetConditions(val []IoK8sAPIBatchV1JobCondition) {
	s.Conditions = val
}

// SetFailed sets the value of Failed.
func (s *IoK8sAPIBatchV1JobStatus) SetFailed(val OptInt32) {
	s.Failed = val
}

// SetStartTime sets the value of StartTime.
func (s *IoK8sAPIBatchV1JobStatus) SetStartTime(val OptIoK8sApimachineryPkgApisMetaV1Time) {
	s.StartTime = val
}

// SetSucceeded sets the value of Succeeded.
func (s *IoK8sAPIBatchV1JobStatus) SetSucceeded(val OptInt32) {
	s.Succeeded = val
}

// SetUncountedTerminatedPods sets the value of UncountedTerminatedPods.
func (s *IoK8sAPIBatchV1JobStatus) SetUncountedTerminatedPods(val OptIoK8sAPIBatchV1UncountedTerminatedPods) {
	s.UncountedTerminatedPods = val
}

// JobTemplateSpec describes the data a Job should have when created from a template.
// Ref: #/components/schemas/io.k8s.api.batch.v1.JobTemplateSpec
type IoK8sAPIBatchV1JobTemplateSpec struct {
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata"`
	Spec     OptIoK8sAPIBatchV1JobSpec                   `json:"spec"`
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIBatchV1JobTemplateSpec) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetSpec returns the value of Spec.
func (s *IoK8sAPIBatchV1JobTemplateSpec) GetSpec() OptIoK8sAPIBatchV1JobSpec {
	return s.Spec
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIBatchV1JobTemplateSpec) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetSpec sets the value of Spec.
func (s *IoK8sAPIBatchV1JobTemplateSpec) SetSpec(val OptIoK8sAPIBatchV1JobSpec) {
	s.Spec = val
}

// UncountedTerminatedPods holds UIDs of Pods that have terminated but haven't been accounted in Job
// status counters.
// Ref: #/components/schemas/io.k8s.api.batch.v1.UncountedTerminatedPods
type IoK8sAPIBatchV1UncountedTerminatedPods struct {
	// Failed holds UIDs of failed Pods.
	Failed []string `json:"failed"`
	// Succeeded holds UIDs of succeeded Pods.
	Succeeded []string `json:"succeeded"`
}

// GetFailed returns the value of Failed.
func (s *IoK8sAPIBatchV1UncountedTerminatedPods) GetFailed() []string {
	return s.Failed
}

// GetSucceeded returns the value of Succeeded.
func (s *IoK8sAPIBatchV1UncountedTerminatedPods) GetSucceeded() []string {
	return s.Succeeded
}

// SetFailed sets the value of Failed.
func (s *IoK8sAPIBatchV1UncountedTerminatedPods) SetFailed(val []string) {
	s.Failed = val
}

// SetSucceeded sets the value of Succeeded.
func (s *IoK8sAPIBatchV1UncountedTerminatedPods) SetSucceeded(val []string) {
	s.Succeeded = val
}

// CronJob represents the configuration of a single cron job.
// Ref: #/components/schemas/io.k8s.api.batch.v1beta1.CronJob
type IoK8sAPIBatchV1beta1CronJob struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                   `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata"`
	Spec     OptIoK8sAPIBatchV1beta1CronJobSpec          `json:"spec"`
	Status   OptIoK8sAPIBatchV1beta1CronJobStatus        `json:"status"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIBatchV1beta1CronJob) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIBatchV1beta1CronJob) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIBatchV1beta1CronJob) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetSpec returns the value of Spec.
func (s *IoK8sAPIBatchV1beta1CronJob) GetSpec() OptIoK8sAPIBatchV1beta1CronJobSpec {
	return s.Spec
}

// GetStatus returns the value of Status.
func (s *IoK8sAPIBatchV1beta1CronJob) GetStatus() OptIoK8sAPIBatchV1beta1CronJobStatus {
	return s.Status
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIBatchV1beta1CronJob) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIBatchV1beta1CronJob) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIBatchV1beta1CronJob) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetSpec sets the value of Spec.
func (s *IoK8sAPIBatchV1beta1CronJob) SetSpec(val OptIoK8sAPIBatchV1beta1CronJobSpec) {
	s.Spec = val
}

// SetStatus sets the value of Status.
func (s *IoK8sAPIBatchV1beta1CronJob) SetStatus(val OptIoK8sAPIBatchV1beta1CronJobStatus) {
	s.Status = val
}

func (*IoK8sAPIBatchV1beta1CronJob) readBatchV1beta1NamespacedCronJobRes()       {}
func (*IoK8sAPIBatchV1beta1CronJob) readBatchV1beta1NamespacedCronJobStatusRes() {}

// CronJobList is a collection of cron jobs.
// Ref: #/components/schemas/io.k8s.api.batch.v1beta1.CronJobList
type IoK8sAPIBatchV1beta1CronJobList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Items is the list of CronJobs.
	Items []IoK8sAPIBatchV1beta1CronJob `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIBatchV1beta1CronJobList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPIBatchV1beta1CronJobList) GetItems() []IoK8sAPIBatchV1beta1CronJob {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIBatchV1beta1CronJobList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIBatchV1beta1CronJobList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIBatchV1beta1CronJobList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPIBatchV1beta1CronJobList) SetItems(val []IoK8sAPIBatchV1beta1CronJob) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIBatchV1beta1CronJobList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIBatchV1beta1CronJobList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPIBatchV1beta1CronJobList) listBatchV1beta1CronJobForAllNamespacesRes() {}
func (*IoK8sAPIBatchV1beta1CronJobList) listBatchV1beta1NamespacedCronJobRes()       {}

// CronJobSpec describes how the job execution will look like and when it will actually run.
// Ref: #/components/schemas/io.k8s.api.batch.v1beta1.CronJobSpec
type IoK8sAPIBatchV1beta1CronJobSpec struct {
	// Specifies how to treat concurrent executions of a Job. Valid values are: - "Allow" (default):
	// allows CronJobs to run concurrently; - "Forbid": forbids concurrent runs, skipping next run if
	// previous run hasn't finished yet; - "Replace": cancels currently running job and replaces it with
	// a new one.
	ConcurrencyPolicy OptString `json:"concurrencyPolicy"`
	// The number of failed finished jobs to retain. This is a pointer to distinguish between explicit
	// zero and not specified. Defaults to 1.
	FailedJobsHistoryLimit OptInt32                            `json:"failedJobsHistoryLimit"`
	JobTemplate            IoK8sAPIBatchV1beta1JobTemplateSpec `json:"jobTemplate"`
	// The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
	Schedule string `json:"schedule"`
	// Optional deadline in seconds for starting the job if it misses scheduled time for any reason.
	// Missed jobs executions will be counted as failed ones.
	StartingDeadlineSeconds OptInt64 `json:"startingDeadlineSeconds"`
	// The number of successful finished jobs to retain. This is a pointer to distinguish between
	// explicit zero and not specified. Defaults to 3.
	SuccessfulJobsHistoryLimit OptInt32 `json:"successfulJobsHistoryLimit"`
	// This flag tells the controller to suspend subsequent executions, it does not apply to already
	// started executions.  Defaults to false.
	Suspend OptBool `json:"suspend"`
}

// GetConcurrencyPolicy returns the value of ConcurrencyPolicy.
func (s *IoK8sAPIBatchV1beta1CronJobSpec) GetConcurrencyPolicy() OptString {
	return s.ConcurrencyPolicy
}

// GetFailedJobsHistoryLimit returns the value of FailedJobsHistoryLimit.
func (s *IoK8sAPIBatchV1beta1CronJobSpec) GetFailedJobsHistoryLimit() OptInt32 {
	return s.FailedJobsHistoryLimit
}

// GetJobTemplate returns the value of JobTemplate.
func (s *IoK8sAPIBatchV1beta1CronJobSpec) GetJobTemplate() IoK8sAPIBatchV1beta1JobTemplateSpec {
	return s.JobTemplate
}

// GetSchedule returns the value of Schedule.
func (s *IoK8sAPIBatchV1beta1CronJobSpec) GetSchedule() string {
	return s.Schedule
}

// GetStartingDeadlineSeconds returns the value of StartingDeadlineSeconds.
func (s *IoK8sAPIBatchV1beta1CronJobSpec) GetStartingDeadlineSeconds() OptInt64 {
	return s.StartingDeadlineSeconds
}

// GetSuccessfulJobsHistoryLimit returns the value of SuccessfulJobsHistoryLimit.
func (s *IoK8sAPIBatchV1beta1CronJobSpec) GetSuccessfulJobsHistoryLimit() OptInt32 {
	return s.SuccessfulJobsHistoryLimit
}

// GetSuspend returns the value of Suspend.
func (s *IoK8sAPIBatchV1beta1CronJobSpec) GetSuspend() OptBool {
	return s.Suspend
}

// SetConcurrencyPolicy sets the value of ConcurrencyPolicy.
func (s *IoK8sAPIBatchV1beta1CronJobSpec) SetConcurrencyPolicy(val OptString) {
	s.ConcurrencyPolicy = val
}

// SetFailedJobsHistoryLimit sets the value of FailedJobsHistoryLimit.
func (s *IoK8sAPIBatchV1beta1CronJobSpec) SetFailedJobsHistoryLimit(val OptInt32) {
	s.FailedJobsHistoryLimit = val
}

// SetJobTemplate sets the value of JobTemplate.
func (s *IoK8sAPIBatchV1beta1CronJobSpec) SetJobTemplate(val IoK8sAPIBatchV1beta1JobTemplateSpec) {
	s.JobTemplate = val
}

// SetSchedule sets the value of Schedule.
func (s *IoK8sAPIBatchV1beta1CronJobSpec) SetSchedule(val string) {
	s.Schedule = val
}

// SetStartingDeadlineSeconds sets the value of StartingDeadlineSeconds.
func (s *IoK8sAPIBatchV1beta1CronJobSpec) SetStartingDeadlineSeconds(val OptInt64) {
	s.StartingDeadlineSeconds = val
}

// SetSuccessfulJobsHistoryLimit sets the value of SuccessfulJobsHistoryLimit.
func (s *IoK8sAPIBatchV1beta1CronJobSpec) SetSuccessfulJobsHistoryLimit(val OptInt32) {
	s.SuccessfulJobsHistoryLimit = val
}

// SetSuspend sets the value of Suspend.
func (s *IoK8sAPIBatchV1beta1CronJobSpec) SetSuspend(val OptBool) {
	s.Suspend = val
}

// CronJobStatus represents the current state of a cron job.
// Ref: #/components/schemas/io.k8s.api.batch.v1beta1.CronJobStatus
type IoK8sAPIBatchV1beta1CronJobStatus struct {
	// A list of pointers to currently running jobs.
	Active             []IoK8sAPICoreV1ObjectReference       `json:"active"`
	LastScheduleTime   OptIoK8sApimachineryPkgApisMetaV1Time `json:"lastScheduleTime"`
	LastSuccessfulTime OptIoK8sApimachineryPkgApisMetaV1Time `json:"lastSuccessfulTime"`
}

// GetActive returns the value of Active.
func (s *IoK8sAPIBatchV1beta1CronJobStatus) GetActive() []IoK8sAPICoreV1ObjectReference {
	return s.Active
}

// GetLastScheduleTime returns the value of LastScheduleTime.
func (s *IoK8sAPIBatchV1beta1CronJobStatus) GetLastScheduleTime() OptIoK8sApimachineryPkgApisMetaV1Time {
	return s.LastScheduleTime
}

// GetLastSuccessfulTime returns the value of LastSuccessfulTime.
func (s *IoK8sAPIBatchV1beta1CronJobStatus) GetLastSuccessfulTime() OptIoK8sApimachineryPkgApisMetaV1Time {
	return s.LastSuccessfulTime
}

// SetActive sets the value of Active.
func (s *IoK8sAPIBatchV1beta1CronJobStatus) SetActive(val []IoK8sAPICoreV1ObjectReference) {
	s.Active = val
}

// SetLastScheduleTime sets the value of LastScheduleTime.
func (s *IoK8sAPIBatchV1beta1CronJobStatus) SetLastScheduleTime(val OptIoK8sApimachineryPkgApisMetaV1Time) {
	s.LastScheduleTime = val
}

// SetLastSuccessfulTime sets the value of LastSuccessfulTime.
func (s *IoK8sAPIBatchV1beta1CronJobStatus) SetLastSuccessfulTime(val OptIoK8sApimachineryPkgApisMetaV1Time) {
	s.LastSuccessfulTime = val
}

// JobTemplateSpec describes the data a Job should have when created from a template.
// Ref: #/components/schemas/io.k8s.api.batch.v1beta1.JobTemplateSpec
type IoK8sAPIBatchV1beta1JobTemplateSpec struct {
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata"`
	Spec     OptIoK8sAPIBatchV1JobSpec                   `json:"spec"`
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIBatchV1beta1JobTemplateSpec) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetSpec returns the value of Spec.
func (s *IoK8sAPIBatchV1beta1JobTemplateSpec) GetSpec() OptIoK8sAPIBatchV1JobSpec {
	return s.Spec
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIBatchV1beta1JobTemplateSpec) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetSpec sets the value of Spec.
func (s *IoK8sAPIBatchV1beta1JobTemplateSpec) SetSpec(val OptIoK8sAPIBatchV1JobSpec) {
	s.Spec = val
}

// CertificateSigningRequest objects provide a mechanism to obtain x509 certificates by submitting a
// certificate signing request, and having it asynchronously approved and issued.
// Kubelets use this API to obtain:
// 1. client certificates to authenticate to kube-apiserver (with the "kubernetes.
// io/kube-apiserver-client-kubelet" signerName).
// 2. serving certificates for TLS endpoints kube-apiserver can connect to securely (with the
// "kubernetes.io/kubelet-serving" signerName).
// This API can be used to request client certificates to authenticate to kube-apiserver (with the
// "kubernetes.io/kube-apiserver-client" signerName), or to obtain certificates from custom
// non-Kubernetes signers.
// Ref: #/components/schemas/io.k8s.api.certificates.v1.CertificateSigningRequest
type IoK8sAPICertificatesV1CertificateSigningRequest struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                                `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta              `json:"metadata"`
	Spec     IoK8sAPICertificatesV1CertificateSigningRequestSpec      `json:"spec"`
	Status   OptIoK8sAPICertificatesV1CertificateSigningRequestStatus `json:"status"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPICertificatesV1CertificateSigningRequest) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sAPICertificatesV1CertificateSigningRequest) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPICertificatesV1CertificateSigningRequest) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetSpec returns the value of Spec.
func (s *IoK8sAPICertificatesV1CertificateSigningRequest) GetSpec() IoK8sAPICertificatesV1CertificateSigningRequestSpec {
	return s.Spec
}

// GetStatus returns the value of Status.
func (s *IoK8sAPICertificatesV1CertificateSigningRequest) GetStatus() OptIoK8sAPICertificatesV1CertificateSigningRequestStatus {
	return s.Status
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPICertificatesV1CertificateSigningRequest) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPICertificatesV1CertificateSigningRequest) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPICertificatesV1CertificateSigningRequest) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetSpec sets the value of Spec.
func (s *IoK8sAPICertificatesV1CertificateSigningRequest) SetSpec(val IoK8sAPICertificatesV1CertificateSigningRequestSpec) {
	s.Spec = val
}

// SetStatus sets the value of Status.
func (s *IoK8sAPICertificatesV1CertificateSigningRequest) SetStatus(val OptIoK8sAPICertificatesV1CertificateSigningRequestStatus) {
	s.Status = val
}

func (*IoK8sAPICertificatesV1CertificateSigningRequest) readCertificatesV1CertificateSigningRequestApprovalRes() {
}
func (*IoK8sAPICertificatesV1CertificateSigningRequest) readCertificatesV1CertificateSigningRequestRes() {
}
func (*IoK8sAPICertificatesV1CertificateSigningRequest) readCertificatesV1CertificateSigningRequestStatusRes() {
}

// CertificateSigningRequestCondition describes a condition of a CertificateSigningRequest object.
// Ref: #/components/schemas/io.k8s.api.certificates.v1.CertificateSigningRequestCondition
type IoK8sAPICertificatesV1CertificateSigningRequestCondition struct {
	LastTransitionTime OptIoK8sApimachineryPkgApisMetaV1Time `json:"lastTransitionTime"`
	LastUpdateTime     OptIoK8sApimachineryPkgApisMetaV1Time `json:"lastUpdateTime"`
	// Message contains a human readable message with details about the request state.
	Message OptString `json:"message"`
	// Reason indicates a brief reason for the request state.
	Reason OptString `json:"reason"`
	// Status of the condition, one of True, False, Unknown. Approved, Denied, and Failed conditions may
	// not be "False" or "Unknown".
	Status string `json:"status"`
	// Type of the condition. Known conditions are "Approved", "Denied", and "Failed".
	// An "Approved" condition is added via the /approval subresource, indicating the request was
	// approved and should be issued by the signer.
	// A "Denied" condition is added via the /approval subresource, indicating the request was denied and
	// should not be issued by the signer.
	// A "Failed" condition is added via the /status subresource, indicating the signer failed to issue
	// the certificate.
	// Approved and Denied conditions are mutually exclusive. Approved, Denied, and Failed conditions
	// cannot be removed once added.
	// Only one condition of a given type is allowed.
	Type string `json:"type"`
}

// GetLastTransitionTime returns the value of LastTransitionTime.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestCondition) GetLastTransitionTime() OptIoK8sApimachineryPkgApisMetaV1Time {
	return s.LastTransitionTime
}

// GetLastUpdateTime returns the value of LastUpdateTime.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestCondition) GetLastUpdateTime() OptIoK8sApimachineryPkgApisMetaV1Time {
	return s.LastUpdateTime
}

// GetMessage returns the value of Message.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestCondition) GetMessage() OptString {
	return s.Message
}

// GetReason returns the value of Reason.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestCondition) GetReason() OptString {
	return s.Reason
}

// GetStatus returns the value of Status.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestCondition) GetStatus() string {
	return s.Status
}

// GetType returns the value of Type.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestCondition) GetType() string {
	return s.Type
}

// SetLastTransitionTime sets the value of LastTransitionTime.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestCondition) SetLastTransitionTime(val OptIoK8sApimachineryPkgApisMetaV1Time) {
	s.LastTransitionTime = val
}

// SetLastUpdateTime sets the value of LastUpdateTime.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestCondition) SetLastUpdateTime(val OptIoK8sApimachineryPkgApisMetaV1Time) {
	s.LastUpdateTime = val
}

// SetMessage sets the value of Message.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestCondition) SetMessage(val OptString) {
	s.Message = val
}

// SetReason sets the value of Reason.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestCondition) SetReason(val OptString) {
	s.Reason = val
}

// SetStatus sets the value of Status.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestCondition) SetStatus(val string) {
	s.Status = val
}

// SetType sets the value of Type.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestCondition) SetType(val string) {
	s.Type = val
}

// CertificateSigningRequestList is a collection of CertificateSigningRequest objects.
// Ref: #/components/schemas/io.k8s.api.certificates.v1.CertificateSigningRequestList
type IoK8sAPICertificatesV1CertificateSigningRequestList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Items is a collection of CertificateSigningRequest objects.
	Items []IoK8sAPICertificatesV1CertificateSigningRequest `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestList) GetItems() []IoK8sAPICertificatesV1CertificateSigningRequest {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestList) SetItems(val []IoK8sAPICertificatesV1CertificateSigningRequest) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPICertificatesV1CertificateSigningRequestList) listCertificatesV1CertificateSigningRequestRes() {
}

// CertificateSigningRequestSpec contains the certificate request.
// Ref: #/components/schemas/io.k8s.api.certificates.v1.CertificateSigningRequestSpec
type IoK8sAPICertificatesV1CertificateSigningRequestSpec struct {
	// ExpirationSeconds is the requested duration of validity of the issued certificate. The certificate
	// signer may issue a certificate with a different validity duration so a client must check the delta
	// between the notBefore and and notAfter fields in the issued certificate to determine the actual
	// duration.
	// The v1.22+ in-tree implementations of the well-known Kubernetes signers will honor this field as
	// long as the requested duration is not greater than the maximum duration they will honor per the
	// --cluster-signing-duration CLI flag to the Kubernetes controller manager.
	// Certificate signers may not honor this field for various reasons:
	// 1. Old signer that is unaware of the field (such as the in-tree
	// implementations prior to v1.22)
	// 2. Signer whose configured maximum is shorter than the requested duration
	// 3. Signer whose configured minimum is longer than the requested duration
	// The minimum valid value for expirationSeconds is 600, i.e. 10 minutes.
	// As of v1.22, this field is beta and is controlled via the CSRDuration feature gate.
	ExpirationSeconds OptInt32 `json:"expirationSeconds"`
	// Extra contains extra attributes of the user that created the CertificateSigningRequest. Populated
	// by the API server on creation and immutable.
	Extra OptIoK8sAPICertificatesV1CertificateSigningRequestSpecExtra `json:"extra"`
	// Groups contains group membership of the user that created the CertificateSigningRequest. Populated
	// by the API server on creation and immutable.
	Groups []string `json:"groups"`
	// Request contains an x509 certificate signing request encoded in a "CERTIFICATE REQUEST" PEM block.
	// When serialized as JSON or YAML, the data is additionally base64-encoded.
	Request []byte `json:"request"`
	// SignerName indicates the requested signer, and is a qualified name.
	// List/watch requests for CertificateSigningRequests can filter on this field using a "spec.
	// signerName=NAME" fieldSelector.
	// Well-known Kubernetes signers are:
	// 1. "kubernetes.io/kube-apiserver-client": issues client certificates that can be used to
	// authenticate to kube-apiserver.
	// Requests for this signer are never auto-approved by kube-controller-manager, can be issued by the
	// "csrsigning" controller in kube-controller-manager.
	// 2. "kubernetes.io/kube-apiserver-client-kubelet": issues client certificates that kubelets use to
	// authenticate to kube-apiserver.
	// Requests for this signer can be auto-approved by the "csrapproving" controller in
	// kube-controller-manager, and can be issued by the "csrsigning" controller in
	// kube-controller-manager.
	// 3. "kubernetes.io/kubelet-serving" issues serving certificates that kubelets use to serve TLS
	// endpoints, which kube-apiserver can connect to securely.
	// Requests for this signer are never auto-approved by kube-controller-manager, and can be issued by
	// the "csrsigning" controller in kube-controller-manager.
	// More details are available at https://k8s.
	// io/docs/reference/access-authn-authz/certificate-signing-requests/#kubernetes-signers
	// Custom signerNames can also be specified. The signer defines:
	// 1. Trust distribution: how trust (CA bundles) are distributed.
	// 2. Permitted subjects: and behavior when a disallowed subject is requested.
	// 3. Required, permitted, or forbidden x509 extensions in the request (including whether
	// subjectAltNames are allowed, which types, restrictions on allowed values) and behavior when a
	// disallowed extension is requested.
	// 4. Required, permitted, or forbidden key usages / extended key usages.
	// 5. Expiration/certificate lifetime: whether it is fixed by the signer, configurable by the admin.
	// 6. Whether or not requests for CA certificates are allowed.
	SignerName string `json:"signerName"`
	// Uid contains the uid of the user that created the CertificateSigningRequest. Populated by the API
	// server on creation and immutable.
	UID OptString `json:"uid"`
	// Usages specifies a set of key usages requested in the issued certificate.
	// Requests for TLS client certificates typically request: "digital signature", "key encipherment",
	// "client auth".
	// Requests for TLS serving certificates typically request: "key encipherment", "digital signature",
	// "server auth".
	// Valid values are:
	// "signing", "digital signature", "content commitment",
	// "key encipherment", "key agreement", "data encipherment",
	// "cert sign", "crl sign", "encipher only", "decipher only", "any",
	// "server auth", "client auth",
	// "code signing", "email protection", "s/mime",
	// "ipsec end system", "ipsec tunnel", "ipsec user",
	// "timestamping", "ocsp signing", "microsoft sgc", "netscape sgc".
	Usages []string `json:"usages"`
	// Username contains the name of the user that created the CertificateSigningRequest. Populated by
	// the API server on creation and immutable.
	Username OptString `json:"username"`
}

// GetExpirationSeconds returns the value of ExpirationSeconds.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestSpec) GetExpirationSeconds() OptInt32 {
	return s.ExpirationSeconds
}

// GetExtra returns the value of Extra.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestSpec) GetExtra() OptIoK8sAPICertificatesV1CertificateSigningRequestSpecExtra {
	return s.Extra
}

// GetGroups returns the value of Groups.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestSpec) GetGroups() []string {
	return s.Groups
}

// GetRequest returns the value of Request.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestSpec) GetRequest() []byte {
	return s.Request
}

// GetSignerName returns the value of SignerName.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestSpec) GetSignerName() string {
	return s.SignerName
}

// GetUID returns the value of UID.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestSpec) GetUID() OptString {
	return s.UID
}

// GetUsages returns the value of Usages.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestSpec) GetUsages() []string {
	return s.Usages
}

// GetUsername returns the value of Username.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestSpec) GetUsername() OptString {
	return s.Username
}

// SetExpirationSeconds sets the value of ExpirationSeconds.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestSpec) SetExpirationSeconds(val OptInt32) {
	s.ExpirationSeconds = val
}

// SetExtra sets the value of Extra.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestSpec) SetExtra(val OptIoK8sAPICertificatesV1CertificateSigningRequestSpecExtra) {
	s.Extra = val
}

// SetGroups sets the value of Groups.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestSpec) SetGroups(val []string) {
	s.Groups = val
}

// SetRequest sets the value of Request.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestSpec) SetRequest(val []byte) {
	s.Request = val
}

// SetSignerName sets the value of SignerName.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestSpec) SetSignerName(val string) {
	s.SignerName = val
}

// SetUID sets the value of UID.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestSpec) SetUID(val OptString) {
	s.UID = val
}

// SetUsages sets the value of Usages.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestSpec) SetUsages(val []string) {
	s.Usages = val
}

// SetUsername sets the value of Username.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestSpec) SetUsername(val OptString) {
	s.Username = val
}

// Extra contains extra attributes of the user that created the CertificateSigningRequest. Populated
// by the API server on creation and immutable.
type IoK8sAPICertificatesV1CertificateSigningRequestSpecExtra map[string][]string

func (s *IoK8sAPICertificatesV1CertificateSigningRequestSpecExtra) init() IoK8sAPICertificatesV1CertificateSigningRequestSpecExtra {
	m := *s
	if m == nil {
		m = map[string][]string{}
		*s = m
	}
	return m
}

// CertificateSigningRequestStatus contains conditions used to indicate approved/denied/failed status
// of the request, and the issued certificate.
// Ref: #/components/schemas/io.k8s.api.certificates.v1.CertificateSigningRequestStatus
type IoK8sAPICertificatesV1CertificateSigningRequestStatus struct {
	// Certificate is populated with an issued certificate by the signer after an Approved condition is
	// present. This field is set via the /status subresource. Once populated, this field is immutable.
	// If the certificate signing request is denied, a condition of type "Denied" is added and this field
	// remains empty. If the signer cannot issue the certificate, a condition of type "Failed" is added
	// and this field remains empty.
	// Validation requirements:
	// 1. certificate must contain one or more PEM blocks.
	// 2. All PEM blocks must have the "CERTIFICATE" label, contain no headers, and the encoded data
	// must be a BER-encoded ASN.1 Certificate structure as described in section 4 of RFC5280.
	// 3. Non-PEM content may appear before or after the "CERTIFICATE" PEM blocks and is unvalidated,
	// to allow for explanatory text as described in section 5.2 of RFC7468.
	// If more than one PEM block is present, and the definition of the requested spec.signerName does
	// not indicate otherwise, the first block is the issued certificate, and subsequent blocks should be
	// treated as intermediate certificates and presented in TLS handshakes.
	// The certificate is encoded in PEM format.
	// When serialized as JSON or YAML, the data is additionally base64-encoded, so it consists of:
	// base64(
	// -----BEGIN CERTIFICATE-----
	// ...
	// -----END CERTIFICATE-----
	// ).
	Certificate []byte `json:"certificate"`
	// Conditions applied to the request. Known conditions are "Approved", "Denied", and "Failed".
	Conditions []IoK8sAPICertificatesV1CertificateSigningRequestCondition `json:"conditions"`
}

// GetCertificate returns the value of Certificate.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestStatus) GetCertificate() []byte {
	return s.Certificate
}

// GetConditions returns the value of Conditions.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestStatus) GetConditions() []IoK8sAPICertificatesV1CertificateSigningRequestCondition {
	return s.Conditions
}

// SetCertificate sets the value of Certificate.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestStatus) SetCertificate(val []byte) {
	s.Certificate = val
}

// SetConditions sets the value of Conditions.
func (s *IoK8sAPICertificatesV1CertificateSigningRequestStatus) SetConditions(val []IoK8sAPICertificatesV1CertificateSigningRequestCondition) {
	s.Conditions = val
}

// Lease defines a lease concept.
// Ref: #/components/schemas/io.k8s.api.coordination.v1.Lease
type IoK8sAPICoordinationV1Lease struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                   `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata"`
	Spec     OptIoK8sAPICoordinationV1LeaseSpec          `json:"spec"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPICoordinationV1Lease) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sAPICoordinationV1Lease) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPICoordinationV1Lease) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetSpec returns the value of Spec.
func (s *IoK8sAPICoordinationV1Lease) GetSpec() OptIoK8sAPICoordinationV1LeaseSpec {
	return s.Spec
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPICoordinationV1Lease) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPICoordinationV1Lease) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPICoordinationV1Lease) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetSpec sets the value of Spec.
func (s *IoK8sAPICoordinationV1Lease) SetSpec(val OptIoK8sAPICoordinationV1LeaseSpec) {
	s.Spec = val
}

func (*IoK8sAPICoordinationV1Lease) readCoordinationV1NamespacedLeaseRes() {}

// LeaseList is a list of Lease objects.
// Ref: #/components/schemas/io.k8s.api.coordination.v1.LeaseList
type IoK8sAPICoordinationV1LeaseList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Items is a list of schema objects.
	Items []IoK8sAPICoordinationV1Lease `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPICoordinationV1LeaseList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPICoordinationV1LeaseList) GetItems() []IoK8sAPICoordinationV1Lease {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPICoordinationV1LeaseList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPICoordinationV1LeaseList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPICoordinationV1LeaseList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPICoordinationV1LeaseList) SetItems(val []IoK8sAPICoordinationV1Lease) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPICoordinationV1LeaseList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPICoordinationV1LeaseList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPICoordinationV1LeaseList) listCoordinationV1LeaseForAllNamespacesRes() {}
func (*IoK8sAPICoordinationV1LeaseList) listCoordinationV1NamespacedLeaseRes()       {}

// LeaseSpec is a specification of a Lease.
// Ref: #/components/schemas/io.k8s.api.coordination.v1.LeaseSpec
type IoK8sAPICoordinationV1LeaseSpec struct {
	AcquireTime OptIoK8sApimachineryPkgApisMetaV1MicroTime `json:"acquireTime"`
	// HolderIdentity contains the identity of the holder of a current lease.
	HolderIdentity OptString `json:"holderIdentity"`
	// LeaseDurationSeconds is a duration that candidates for a lease need to wait to force acquire it.
	// This is measure against time of last observed RenewTime.
	LeaseDurationSeconds OptInt32 `json:"leaseDurationSeconds"`
	// LeaseTransitions is the number of transitions of a lease between holders.
	LeaseTransitions OptInt32                                   `json:"leaseTransitions"`
	RenewTime        OptIoK8sApimachineryPkgApisMetaV1MicroTime `json:"renewTime"`
}

// GetAcquireTime returns the value of AcquireTime.
func (s *IoK8sAPICoordinationV1LeaseSpec) GetAcquireTime() OptIoK8sApimachineryPkgApisMetaV1MicroTime {
	return s.AcquireTime
}

// GetHolderIdentity returns the value of HolderIdentity.
func (s *IoK8sAPICoordinationV1LeaseSpec) GetHolderIdentity() OptString {
	return s.HolderIdentity
}

// GetLeaseDurationSeconds returns the value of LeaseDurationSeconds.
func (s *IoK8sAPICoordinationV1LeaseSpec) GetLeaseDurationSeconds() OptInt32 {
	return s.LeaseDurationSeconds
}

// GetLeaseTransitions returns the value of LeaseTransitions.
func (s *IoK8sAPICoordinationV1LeaseSpec) GetLeaseTransitions() OptInt32 {
	return s.LeaseTransitions
}

// GetRenewTime returns the value of RenewTime.
func (s *IoK8sAPICoordinationV1LeaseSpec) GetRenewTime() OptIoK8sApimachineryPkgApisMetaV1MicroTime {
	return s.RenewTime
}

// SetAcquireTime sets the value of AcquireTime.
func (s *IoK8sAPICoordinationV1LeaseSpec) SetAcquireTime(val OptIoK8sApimachineryPkgApisMetaV1MicroTime) {
	s.AcquireTime = val
}

// SetHolderIdentity sets the value of HolderIdentity.
func (s *IoK8sAPICoordinationV1LeaseSpec) SetHolderIdentity(val OptString) {
	s.HolderIdentity = val
}

// SetLeaseDurationSeconds sets the value of LeaseDurationSeconds.
func (s *IoK8sAPICoordinationV1LeaseSpec) SetLeaseDurationSeconds(val OptInt32) {
	s.LeaseDurationSeconds = val
}

// SetLeaseTransitions sets the value of LeaseTransitions.
func (s *IoK8sAPICoordinationV1LeaseSpec) SetLeaseTransitions(val OptInt32) {
	s.LeaseTransitions = val
}

// SetRenewTime sets the value of RenewTime.
func (s *IoK8sAPICoordinationV1LeaseSpec) SetRenewTime(val OptIoK8sApimachineryPkgApisMetaV1MicroTime) {
	s.RenewTime = val
}

// Represents a Persistent Disk resource in AWS.
// An AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS
// zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes
// support ownership management and SELinux relabeling.
// Ref: #/components/schemas/io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource
type IoK8sAPICoreV1AWSElasticBlockStoreVolumeSource struct {
	// Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is
	// supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be
	// "ext4" if unspecified. More info: https://kubernetes.
	// io/docs/concepts/storage/volumes#awselasticblockstore.
	FsType OptString `json:"fsType"`
	// The partition in the volume that you want to mount. If omitted, the default is to mount by volume
	// name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume
	// partition for /dev/sda is "0" (or you can leave the property empty).
	Partition OptInt32 `json:"partition"`
	// Specify "true" to force and set the ReadOnly property in VolumeMounts to "true". If omitted, the
	// default is "false". More info: https://kubernetes.
	// io/docs/concepts/storage/volumes#awselasticblockstore.
	ReadOnly OptBool `json:"readOnly"`
	// Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info:
	// https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore.
	VolumeID string `json:"volumeID"`
}

// GetFsType returns the value of FsType.
func (s *IoK8sAPICoreV1AWSElasticBlockStoreVolumeSource) GetFsType() OptString {
	return s.FsType
}

// GetPartition returns the value of Partition.
func (s *IoK8sAPICoreV1AWSElasticBlockStoreVolumeSource) GetPartition() OptInt32 {
	return s.Partition
}

// GetReadOnly returns the value of ReadOnly.
func (s *IoK8sAPICoreV1AWSElasticBlockStoreVolumeSource) GetReadOnly() OptBool {
	return s.ReadOnly
}

// GetVolumeID returns the value of VolumeID.
func (s *IoK8sAPICoreV1AWSElasticBlockStoreVolumeSource) GetVolumeID() string {
	return s.VolumeID
}

// SetFsType sets the value of FsType.
func (s *IoK8sAPICoreV1AWSElasticBlockStoreVolumeSource) SetFsType(val OptString) {
	s.FsType = val
}

// SetPartition sets the value of Partition.
func (s *IoK8sAPICoreV1AWSElasticBlockStoreVolumeSource) SetPartition(val OptInt32) {
	s.Partition = val
}

// SetReadOnly sets the value of ReadOnly.
func (s *IoK8sAPICoreV1AWSElasticBlockStoreVolumeSource) SetReadOnly(val OptBool) {
	s.ReadOnly = val
}

// SetVolumeID sets the value of VolumeID.
func (s *IoK8sAPICoreV1AWSElasticBlockStoreVolumeSource) SetVolumeID(val string) {
	s.VolumeID = val
}

// Affinity is a group of affinity scheduling rules.
// Ref: #/components/schemas/io.k8s.api.core.v1.Affinity
type IoK8sAPICoreV1Affinity struct {
	NodeAffinity    OptIoK8sAPICoreV1NodeAffinity    `json:"nodeAffinity"`
	PodAffinity     OptIoK8sAPICoreV1PodAffinity     `json:"podAffinity"`
	PodAntiAffinity OptIoK8sAPICoreV1PodAntiAffinity `json:"podAntiAffinity"`
}

// GetNodeAffinity returns the value of NodeAffinity.
func (s *IoK8sAPICoreV1Affinity) GetNodeAffinity() OptIoK8sAPICoreV1NodeAffinity {
	return s.NodeAffinity
}

// GetPodAffinity returns the value of PodAffinity.
func (s *IoK8sAPICoreV1Affinity) GetPodAffinity() OptIoK8sAPICoreV1PodAffinity {
	return s.PodAffinity
}

// GetPodAntiAffinity returns the value of PodAntiAffinity.
func (s *IoK8sAPICoreV1Affinity) GetPodAntiAffinity() OptIoK8sAPICoreV1PodAntiAffinity {
	return s.PodAntiAffinity
}

// SetNodeAffinity sets the value of NodeAffinity.
func (s *IoK8sAPICoreV1Affinity) SetNodeAffinity(val OptIoK8sAPICoreV1NodeAffinity) {
	s.NodeAffinity = val
}

// SetPodAffinity sets the value of PodAffinity.
func (s *IoK8sAPICoreV1Affinity) SetPodAffinity(val OptIoK8sAPICoreV1PodAffinity) {
	s.PodAffinity = val
}

// SetPodAntiAffinity sets the value of PodAntiAffinity.
func (s *IoK8sAPICoreV1Affinity) SetPodAntiAffinity(val OptIoK8sAPICoreV1PodAntiAffinity) {
	s.PodAntiAffinity = val
}

// AttachedVolume describes a volume attached to a node.
// Ref: #/components/schemas/io.k8s.api.core.v1.AttachedVolume
type IoK8sAPICoreV1AttachedVolume struct {
	// DevicePath represents the device path where the volume should be available.
	DevicePath string `json:"devicePath"`
	// Name of the attached volume.
	Name string `json:"name"`
}

// GetDevicePath returns the value of DevicePath.
func (s *IoK8sAPICoreV1AttachedVolume) GetDevicePath() string {
	return s.DevicePath
}

// GetName returns the value of Name.
func (s *IoK8sAPICoreV1AttachedVolume) GetName() string {
	return s.Name
}

// SetDevicePath sets the value of DevicePath.
func (s *IoK8sAPICoreV1AttachedVolume) SetDevicePath(val string) {
	s.DevicePath = val
}

// SetName sets the value of Name.
func (s *IoK8sAPICoreV1AttachedVolume) SetName(val string) {
	s.Name = val
}

// AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
// Ref: #/components/schemas/io.k8s.api.core.v1.AzureDiskVolumeSource
type IoK8sAPICoreV1AzureDiskVolumeSource struct {
	// Host Caching mode: None, Read Only, Read Write.
	CachingMode OptString `json:"cachingMode"`
	// The Name of the data disk in the blob storage.
	DiskName string `json:"diskName"`
	// The URI the data disk in the blob storage.
	DiskURI string `json:"diskURI"`
	// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex.
	// "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType OptString `json:"fsType"`
	// Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per
	// storage account  Managed: azure managed data disk (only in managed availability set). defaults to
	// shared.
	Kind OptString `json:"kind"`
	// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly OptBool `json:"readOnly"`
}

// GetCachingMode returns the value of CachingMode.
func (s *IoK8sAPICoreV1AzureDiskVolumeSource) GetCachingMode() OptString {
	return s.CachingMode
}

// GetDiskName returns the value of DiskName.
func (s *IoK8sAPICoreV1AzureDiskVolumeSource) GetDiskName() string {
	return s.DiskName
}

// GetDiskURI returns the value of DiskURI.
func (s *IoK8sAPICoreV1AzureDiskVolumeSource) GetDiskURI() string {
	return s.DiskURI
}

// GetFsType returns the value of FsType.
func (s *IoK8sAPICoreV1AzureDiskVolumeSource) GetFsType() OptString {
	return s.FsType
}

// GetKind returns the value of Kind.
func (s *IoK8sAPICoreV1AzureDiskVolumeSource) GetKind() OptString {
	return s.Kind
}

// GetReadOnly returns the value of ReadOnly.
func (s *IoK8sAPICoreV1AzureDiskVolumeSource) GetReadOnly() OptBool {
	return s.ReadOnly
}

// SetCachingMode sets the value of CachingMode.
func (s *IoK8sAPICoreV1AzureDiskVolumeSource) SetCachingMode(val OptString) {
	s.CachingMode = val
}

// SetDiskName sets the value of DiskName.
func (s *IoK8sAPICoreV1AzureDiskVolumeSource) SetDiskName(val string) {
	s.DiskName = val
}

// SetDiskURI sets the value of DiskURI.
func (s *IoK8sAPICoreV1AzureDiskVolumeSource) SetDiskURI(val string) {
	s.DiskURI = val
}

// SetFsType sets the value of FsType.
func (s *IoK8sAPICoreV1AzureDiskVolumeSource) SetFsType(val OptString) {
	s.FsType = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPICoreV1AzureDiskVolumeSource) SetKind(val OptString) {
	s.Kind = val
}

// SetReadOnly sets the value of ReadOnly.
func (s *IoK8sAPICoreV1AzureDiskVolumeSource) SetReadOnly(val OptBool) {
	s.ReadOnly = val
}

// AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
// Ref: #/components/schemas/io.k8s.api.core.v1.AzureFilePersistentVolumeSource
type IoK8sAPICoreV1AzureFilePersistentVolumeSource struct {
	// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly OptBool `json:"readOnly"`
	// The name of secret that contains Azure Storage Account Name and Key.
	SecretName string `json:"secretName"`
	// The namespace of the secret that contains Azure Storage Account Name and Key default is the same
	// as the Pod.
	SecretNamespace OptString `json:"secretNamespace"`
	// Share Name.
	ShareName string `json:"shareName"`
}

// GetReadOnly returns the value of ReadOnly.
func (s *IoK8sAPICoreV1AzureFilePersistentVolumeSource) GetReadOnly() OptBool {
	return s.ReadOnly
}

// GetSecretName returns the value of SecretName.
func (s *IoK8sAPICoreV1AzureFilePersistentVolumeSource) GetSecretName() string {
	return s.SecretName
}

// GetSecretNamespace returns the value of SecretNamespace.
func (s *IoK8sAPICoreV1AzureFilePersistentVolumeSource) GetSecretNamespace() OptString {
	return s.SecretNamespace
}

// GetShareName returns the value of ShareName.
func (s *IoK8sAPICoreV1AzureFilePersistentVolumeSource) GetShareName() string {
	return s.ShareName
}

// SetReadOnly sets the value of ReadOnly.
func (s *IoK8sAPICoreV1AzureFilePersistentVolumeSource) SetReadOnly(val OptBool) {
	s.ReadOnly = val
}

// SetSecretName sets the value of SecretName.
func (s *IoK8sAPICoreV1AzureFilePersistentVolumeSource) SetSecretName(val string) {
	s.SecretName = val
}

// SetSecretNamespace sets the value of SecretNamespace.
func (s *IoK8sAPICoreV1AzureFilePersistentVolumeSource) SetSecretNamespace(val OptString) {
	s.SecretNamespace = val
}

// SetShareName sets the value of ShareName.
func (s *IoK8sAPICoreV1AzureFilePersistentVolumeSource) SetShareName(val string) {
	s.ShareName = val
}

// AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
// Ref: #/components/schemas/io.k8s.api.core.v1.AzureFileVolumeSource
type IoK8sAPICoreV1AzureFileVolumeSource struct {
	// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly OptBool `json:"readOnly"`
	// The name of secret that contains Azure Storage Account Name and Key.
	SecretName string `json:"secretName"`
	// Share Name.
	ShareName string `json:"shareName"`
}

// GetReadOnly returns the value of ReadOnly.
func (s *IoK8sAPICoreV1AzureFileVolumeSource) GetReadOnly() OptBool {
	return s.ReadOnly
}

// GetSecretName returns the value of SecretName.
func (s *IoK8sAPICoreV1AzureFileVolumeSource) GetSecretName() string {
	return s.SecretName
}

// GetShareName returns the value of ShareName.
func (s *IoK8sAPICoreV1AzureFileVolumeSource) GetShareName() string {
	return s.ShareName
}

// SetReadOnly sets the value of ReadOnly.
func (s *IoK8sAPICoreV1AzureFileVolumeSource) SetReadOnly(val OptBool) {
	s.ReadOnly = val
}

// SetSecretName sets the value of SecretName.
func (s *IoK8sAPICoreV1AzureFileVolumeSource) SetSecretName(val string) {
	s.SecretName = val
}

// SetShareName sets the value of ShareName.
func (s *IoK8sAPICoreV1AzureFileVolumeSource) SetShareName(val string) {
	s.ShareName = val
}

// Represents storage that is managed by an external CSI volume driver (Beta feature).
// Ref: #/components/schemas/io.k8s.api.core.v1.CSIPersistentVolumeSource
type IoK8sAPICoreV1CSIPersistentVolumeSource struct {
	ControllerExpandSecretRef  OptIoK8sAPICoreV1SecretReference `json:"controllerExpandSecretRef"`
	ControllerPublishSecretRef OptIoK8sAPICoreV1SecretReference `json:"controllerPublishSecretRef"`
	// Driver is the name of the driver to use for this volume. Required.
	Driver string `json:"driver"`
	// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex.
	// "ext4", "xfs", "ntfs".
	FsType               OptString                        `json:"fsType"`
	NodePublishSecretRef OptIoK8sAPICoreV1SecretReference `json:"nodePublishSecretRef"`
	NodeStageSecretRef   OptIoK8sAPICoreV1SecretReference `json:"nodeStageSecretRef"`
	// Optional: The value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).
	ReadOnly OptBool `json:"readOnly"`
	// Attributes of the volume to publish.
	VolumeAttributes OptIoK8sAPICoreV1CSIPersistentVolumeSourceVolumeAttributes `json:"volumeAttributes"`
	// VolumeHandle is the unique volume name returned by the CSI volume plugin’s CreateVolume to refer
	// to the volume on all subsequent calls. Required.
	VolumeHandle string `json:"volumeHandle"`
}

// GetControllerExpandSecretRef returns the value of ControllerExpandSecretRef.
func (s *IoK8sAPICoreV1CSIPersistentVolumeSource) GetControllerExpandSecretRef() OptIoK8sAPICoreV1SecretReference {
	return s.ControllerExpandSecretRef
}

// GetControllerPublishSecretRef returns the value of ControllerPublishSecretRef.
func (s *IoK8sAPICoreV1CSIPersistentVolumeSource) GetControllerPublishSecretRef() OptIoK8sAPICoreV1SecretReference {
	return s.ControllerPublishSecretRef
}

// GetDriver returns the value of Driver.
func (s *IoK8sAPICoreV1CSIPersistentVolumeSource) GetDriver() string {
	return s.Driver
}

// GetFsType returns the value of FsType.
func (s *IoK8sAPICoreV1CSIPersistentVolumeSource) GetFsType() OptString {
	return s.FsType
}

// GetNodePublishSecretRef returns the value of NodePublishSecretRef.
func (s *IoK8sAPICoreV1CSIPersistentVolumeSource) GetNodePublishSecretRef() OptIoK8sAPICoreV1SecretReference {
	return s.NodePublishSecretRef
}

// GetNodeStageSecretRef returns the value of NodeStageSecretRef.
func (s *IoK8sAPICoreV1CSIPersistentVolumeSource) GetNodeStageSecretRef() OptIoK8sAPICoreV1SecretReference {
	return s.NodeStageSecretRef
}

// GetReadOnly returns the value of ReadOnly.
func (s *IoK8sAPICoreV1CSIPersistentVolumeSource) GetReadOnly() OptBool {
	return s.ReadOnly
}

// GetVolumeAttributes returns the value of VolumeAttributes.
func (s *IoK8sAPICoreV1CSIPersistentVolumeSource) GetVolumeAttributes() OptIoK8sAPICoreV1CSIPersistentVolumeSourceVolumeAttributes {
	return s.VolumeAttributes
}

// GetVolumeHandle returns the value of VolumeHandle.
func (s *IoK8sAPICoreV1CSIPersistentVolumeSource) GetVolumeHandle() string {
	return s.VolumeHandle
}

// SetControllerExpandSecretRef sets the value of ControllerExpandSecretRef.
func (s *IoK8sAPICoreV1CSIPersistentVolumeSource) SetControllerExpandSecretRef(val OptIoK8sAPICoreV1SecretReference) {
	s.ControllerExpandSecretRef = val
}

// SetControllerPublishSecretRef sets the value of ControllerPublishSecretRef.
func (s *IoK8sAPICoreV1CSIPersistentVolumeSource) SetControllerPublishSecretRef(val OptIoK8sAPICoreV1SecretReference) {
	s.ControllerPublishSecretRef = val
}

// SetDriver sets the value of Driver.
func (s *IoK8sAPICoreV1CSIPersistentVolumeSource) SetDriver(val string) {
	s.Driver = val
}

// SetFsType sets the value of FsType.
func (s *IoK8sAPICoreV1CSIPersistentVolumeSource) SetFsType(val OptString) {
	s.FsType = val
}

// SetNodePublishSecretRef sets the value of NodePublishSecretRef.
func (s *IoK8sAPICoreV1CSIPersistentVolumeSource) SetNodePublishSecretRef(val OptIoK8sAPICoreV1SecretReference) {
	s.NodePublishSecretRef = val
}

// SetNodeStageSecretRef sets the value of NodeStageSecretRef.
func (s *IoK8sAPICoreV1CSIPersistentVolumeSource) SetNodeStageSecretRef(val OptIoK8sAPICoreV1SecretReference) {
	s.NodeStageSecretRef = val
}

// SetReadOnly sets the value of ReadOnly.
func (s *IoK8sAPICoreV1CSIPersistentVolumeSource) SetReadOnly(val OptBool) {
	s.ReadOnly = val
}

// SetVolumeAttributes sets the value of VolumeAttributes.
func (s *IoK8sAPICoreV1CSIPersistentVolumeSource) SetVolumeAttributes(val OptIoK8sAPICoreV1CSIPersistentVolumeSourceVolumeAttributes) {
	s.VolumeAttributes = val
}

// SetVolumeHandle sets the value of VolumeHandle.
func (s *IoK8sAPICoreV1CSIPersistentVolumeSource) SetVolumeHandle(val string) {
	s.VolumeHandle = val
}

// Attributes of the volume to publish.
type IoK8sAPICoreV1CSIPersistentVolumeSourceVolumeAttributes map[string]string

func (s *IoK8sAPICoreV1CSIPersistentVolumeSourceVolumeAttributes) init() IoK8sAPICoreV1CSIPersistentVolumeSourceVolumeAttributes {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Represents a source location of a volume to mount, managed by an external CSI driver.
// Ref: #/components/schemas/io.k8s.api.core.v1.CSIVolumeSource
type IoK8sAPICoreV1CSIVolumeSource struct {
	// Driver is the name of the CSI driver that handles this volume. Consult with your admin for the
	// correct name as registered in the cluster.
	Driver string `json:"driver"`
	// Filesystem type to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to
	// the associated CSI driver which will determine the default filesystem to apply.
	FsType               OptString                             `json:"fsType"`
	NodePublishSecretRef OptIoK8sAPICoreV1LocalObjectReference `json:"nodePublishSecretRef"`
	// Specifies a read-only configuration for the volume. Defaults to false (read/write).
	ReadOnly OptBool `json:"readOnly"`
	// VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your
	// driver's documentation for supported values.
	VolumeAttributes OptIoK8sAPICoreV1CSIVolumeSourceVolumeAttributes `json:"volumeAttributes"`
}

// GetDriver returns the value of Driver.
func (s *IoK8sAPICoreV1CSIVolumeSource) GetDriver() string {
	return s.Driver
}

// GetFsType returns the value of FsType.
func (s *IoK8sAPICoreV1CSIVolumeSource) GetFsType() OptString {
	return s.FsType
}

// GetNodePublishSecretRef returns the value of NodePublishSecretRef.
func (s *IoK8sAPICoreV1CSIVolumeSource) GetNodePublishSecretRef() OptIoK8sAPICoreV1LocalObjectReference {
	return s.NodePublishSecretRef
}

// GetReadOnly returns the value of ReadOnly.
func (s *IoK8sAPICoreV1CSIVolumeSource) GetReadOnly() OptBool {
	return s.ReadOnly
}

// GetVolumeAttributes returns the value of VolumeAttributes.
func (s *IoK8sAPICoreV1CSIVolumeSource) GetVolumeAttributes() OptIoK8sAPICoreV1CSIVolumeSourceVolumeAttributes {
	return s.VolumeAttributes
}

// SetDriver sets the value of Driver.
func (s *IoK8sAPICoreV1CSIVolumeSource) SetDriver(val string) {
	s.Driver = val
}

// SetFsType sets the value of FsType.
func (s *IoK8sAPICoreV1CSIVolumeSource) SetFsType(val OptString) {
	s.FsType = val
}

// SetNodePublishSecretRef sets the value of NodePublishSecretRef.
func (s *IoK8sAPICoreV1CSIVolumeSource) SetNodePublishSecretRef(val OptIoK8sAPICoreV1LocalObjectReference) {
	s.NodePublishSecretRef = val
}

// SetReadOnly sets the value of ReadOnly.
func (s *IoK8sAPICoreV1CSIVolumeSource) SetReadOnly(val OptBool) {
	s.ReadOnly = val
}

// SetVolumeAttributes sets the value of VolumeAttributes.
func (s *IoK8sAPICoreV1CSIVolumeSource) SetVolumeAttributes(val OptIoK8sAPICoreV1CSIVolumeSourceVolumeAttributes) {
	s.VolumeAttributes = val
}

// VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your
// driver's documentation for supported values.
type IoK8sAPICoreV1CSIVolumeSourceVolumeAttributes map[string]string

func (s *IoK8sAPICoreV1CSIVolumeSourceVolumeAttributes) init() IoK8sAPICoreV1CSIVolumeSourceVolumeAttributes {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Adds and removes POSIX capabilities from running containers.
// Ref: #/components/schemas/io.k8s.api.core.v1.Capabilities
type IoK8sAPICoreV1Capabilities struct {
	// Added capabilities.
	Add []string `json:"add"`
	// Removed capabilities.
	Drop []string `json:"drop"`
}

// GetAdd returns the value of Add.
func (s *IoK8sAPICoreV1Capabilities) GetAdd() []string {
	return s.Add
}

// GetDrop returns the value of Drop.
func (s *IoK8sAPICoreV1Capabilities) GetDrop() []string {
	return s.Drop
}

// SetAdd sets the value of Add.
func (s *IoK8sAPICoreV1Capabilities) SetAdd(val []string) {
	s.Add = val
}

// SetDrop sets the value of Drop.
func (s *IoK8sAPICoreV1Capabilities) SetDrop(val []string) {
	s.Drop = val
}

// Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support
// ownership management or SELinux relabeling.
// Ref: #/components/schemas/io.k8s.api.core.v1.CephFSPersistentVolumeSource
type IoK8sAPICoreV1CephFSPersistentVolumeSource struct {
	// Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.
	// io/volumes/cephfs/README.md#how-to-use-it.
	Monitors []string `json:"monitors"`
	// Optional: Used as the mounted root, rather than the full Ceph tree, default is /.
	Path OptString `json:"path"`
	// Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in
	// VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it.
	ReadOnly OptBool `json:"readOnly"`
	// Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info:
	// https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it.
	SecretFile OptString                        `json:"secretFile"`
	SecretRef  OptIoK8sAPICoreV1SecretReference `json:"secretRef"`
	// Optional: User is the rados user name, default is admin More info: https://examples.k8s.
	// io/volumes/cephfs/README.md#how-to-use-it.
	User OptString `json:"user"`
}

// GetMonitors returns the value of Monitors.
func (s *IoK8sAPICoreV1CephFSPersistentVolumeSource) GetMonitors() []string {
	return s.Monitors
}

// GetPath returns the value of Path.
func (s *IoK8sAPICoreV1CephFSPersistentVolumeSource) GetPath() OptString {
	return s.Path
}

// GetReadOnly returns the value of ReadOnly.
func (s *IoK8sAPICoreV1CephFSPersistentVolumeSource) GetReadOnly() OptBool {
	return s.ReadOnly
}

// GetSecretFile returns the value of SecretFile.
func (s *IoK8sAPICoreV1CephFSPersistentVolumeSource) GetSecretFile() OptString {
	return s.SecretFile
}

// GetSecretRef returns the value of SecretRef.
func (s *IoK8sAPICoreV1CephFSPersistentVolumeSource) GetSecretRef() OptIoK8sAPICoreV1SecretReference {
	return s.SecretRef
}

// GetUser returns the value of User.
func (s *IoK8sAPICoreV1CephFSPersistentVolumeSource) GetUser() OptString {
	return s.User
}

// SetMonitors sets the value of Monitors.
func (s *IoK8sAPICoreV1CephFSPersistentVolumeSource) SetMonitors(val []string) {
	s.Monitors = val
}

// SetPath sets the value of Path.
func (s *IoK8sAPICoreV1CephFSPersistentVolumeSource) SetPath(val OptString) {
	s.Path = val
}

// SetReadOnly sets the value of ReadOnly.
func (s *IoK8sAPICoreV1CephFSPersistentVolumeSource) SetReadOnly(val OptBool) {
	s.ReadOnly = val
}

// SetSecretFile sets the value of SecretFile.
func (s *IoK8sAPICoreV1CephFSPersistentVolumeSource) SetSecretFile(val OptString) {
	s.SecretFile = val
}

// SetSecretRef sets the value of SecretRef.
func (s *IoK8sAPICoreV1CephFSPersistentVolumeSource) SetSecretRef(val OptIoK8sAPICoreV1SecretReference) {
	s.SecretRef = val
}

// SetUser sets the value of User.
func (s *IoK8sAPICoreV1CephFSPersistentVolumeSource) SetUser(val OptString) {
	s.User = val
}

// Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support
// ownership management or SELinux relabeling.
// Ref: #/components/schemas/io.k8s.api.core.v1.CephFSVolumeSource
type IoK8sAPICoreV1CephFSVolumeSource struct {
	// Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.
	// io/volumes/cephfs/README.md#how-to-use-it.
	Monitors []string `json:"monitors"`
	// Optional: Used as the mounted root, rather than the full Ceph tree, default is /.
	Path OptString `json:"path"`
	// Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in
	// VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it.
	ReadOnly OptBool `json:"readOnly"`
	// Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info:
	// https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it.
	SecretFile OptString                             `json:"secretFile"`
	SecretRef  OptIoK8sAPICoreV1LocalObjectReference `json:"secretRef"`
	// Optional: User is the rados user name, default is admin More info: https://examples.k8s.
	// io/volumes/cephfs/README.md#how-to-use-it.
	User OptString `json:"user"`
}

// GetMonitors returns the value of Monitors.
func (s *IoK8sAPICoreV1CephFSVolumeSource) GetMonitors() []string {
	return s.Monitors
}

// GetPath returns the value of Path.
func (s *IoK8sAPICoreV1CephFSVolumeSource) GetPath() OptString {
	return s.Path
}

// GetReadOnly returns the value of ReadOnly.
func (s *IoK8sAPICoreV1CephFSVolumeSource) GetReadOnly() OptBool {
	return s.ReadOnly
}

// GetSecretFile returns the value of SecretFile.
func (s *IoK8sAPICoreV1CephFSVolumeSource) GetSecretFile() OptString {
	return s.SecretFile
}

// GetSecretRef returns the value of SecretRef.
func (s *IoK8sAPICoreV1CephFSVolumeSource) GetSecretRef() OptIoK8sAPICoreV1LocalObjectReference {
	return s.SecretRef
}

// GetUser returns the value of User.
func (s *IoK8sAPICoreV1CephFSVolumeSource) GetUser() OptString {
	return s.User
}

// SetMonitors sets the value of Monitors.
func (s *IoK8sAPICoreV1CephFSVolumeSource) SetMonitors(val []string) {
	s.Monitors = val
}

// SetPath sets the value of Path.
func (s *IoK8sAPICoreV1CephFSVolumeSource) SetPath(val OptString) {
	s.Path = val
}

// SetReadOnly sets the value of ReadOnly.
func (s *IoK8sAPICoreV1CephFSVolumeSource) SetReadOnly(val OptBool) {
	s.ReadOnly = val
}

// SetSecretFile sets the value of SecretFile.
func (s *IoK8sAPICoreV1CephFSVolumeSource) SetSecretFile(val OptString) {
	s.SecretFile = val
}

// SetSecretRef sets the value of SecretRef.
func (s *IoK8sAPICoreV1CephFSVolumeSource) SetSecretRef(val OptIoK8sAPICoreV1LocalObjectReference) {
	s.SecretRef = val
}

// SetUser sets the value of User.
func (s *IoK8sAPICoreV1CephFSVolumeSource) SetUser(val OptString) {
	s.User = val
}

// Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a
// container. The volume must also be in the same region as the kubelet. Cinder volumes support
// ownership management and SELinux relabeling.
// Ref: #/components/schemas/io.k8s.api.core.v1.CinderPersistentVolumeSource
type IoK8sAPICoreV1CinderPersistentVolumeSource struct {
	// Filesystem type to mount. Must be a filesystem type supported by the host operating system.
	// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info:
	// https://examples.k8s.io/mysql-cinder-pd/README.md.
	FsType OptString `json:"fsType"`
	// Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in
	// VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md.
	ReadOnly  OptBool                          `json:"readOnly"`
	SecretRef OptIoK8sAPICoreV1SecretReference `json:"secretRef"`
	// Volume id used to identify the volume in cinder. More info: https://examples.k8s.
	// io/mysql-cinder-pd/README.md.
	VolumeID string `json:"volumeID"`
}

// GetFsType returns the value of FsType.
func (s *IoK8sAPICoreV1CinderPersistentVolumeSource) GetFsType() OptString {
	return s.FsType
}

// GetReadOnly returns the value of ReadOnly.
func (s *IoK8sAPICoreV1CinderPersistentVolumeSource) GetReadOnly() OptBool {
	return s.ReadOnly
}

// GetSecretRef returns the value of SecretRef.
func (s *IoK8sAPICoreV1CinderPersistentVolumeSource) GetSecretRef() OptIoK8sAPICoreV1SecretReference {
	return s.SecretRef
}

// GetVolumeID returns the value of VolumeID.
func (s *IoK8sAPICoreV1CinderPersistentVolumeSource) GetVolumeID() string {
	return s.VolumeID
}

// SetFsType sets the value of FsType.
func (s *IoK8sAPICoreV1CinderPersistentVolumeSource) SetFsType(val OptString) {
	s.FsType = val
}

// SetReadOnly sets the value of ReadOnly.
func (s *IoK8sAPICoreV1CinderPersistentVolumeSource) SetReadOnly(val OptBool) {
	s.ReadOnly = val
}

// SetSecretRef sets the value of SecretRef.
func (s *IoK8sAPICoreV1CinderPersistentVolumeSource) SetSecretRef(val OptIoK8sAPICoreV1SecretReference) {
	s.SecretRef = val
}

// SetVolumeID sets the value of VolumeID.
func (s *IoK8sAPICoreV1CinderPersistentVolumeSource) SetVolumeID(val string) {
	s.VolumeID = val
}

// Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a
// container. The volume must also be in the same region as the kubelet. Cinder volumes support
// ownership management and SELinux relabeling.
// Ref: #/components/schemas/io.k8s.api.core.v1.CinderVolumeSource
type IoK8sAPICoreV1CinderVolumeSource struct {
	// Filesystem type to mount. Must be a filesystem type supported by the host operating system.
	// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info:
	// https://examples.k8s.io/mysql-cinder-pd/README.md.
	FsType OptString `json:"fsType"`
	// Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in
	// VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md.
	ReadOnly  OptBool                               `json:"readOnly"`
	SecretRef OptIoK8sAPICoreV1LocalObjectReference `json:"secretRef"`
	// Volume id used to identify the volume in cinder. More info: https://examples.k8s.
	// io/mysql-cinder-pd/README.md.
	VolumeID string `json:"volumeID"`
}

// GetFsType returns the value of FsType.
func (s *IoK8sAPICoreV1CinderVolumeSource) GetFsType() OptString {
	return s.FsType
}

// GetReadOnly returns the value of ReadOnly.
func (s *IoK8sAPICoreV1CinderVolumeSource) GetReadOnly() OptBool {
	return s.ReadOnly
}

// GetSecretRef returns the value of SecretRef.
func (s *IoK8sAPICoreV1CinderVolumeSource) GetSecretRef() OptIoK8sAPICoreV1LocalObjectReference {
	return s.SecretRef
}

// GetVolumeID returns the value of VolumeID.
func (s *IoK8sAPICoreV1CinderVolumeSource) GetVolumeID() string {
	return s.VolumeID
}

// SetFsType sets the value of FsType.
func (s *IoK8sAPICoreV1CinderVolumeSource) SetFsType(val OptString) {
	s.FsType = val
}

// SetReadOnly sets the value of ReadOnly.
func (s *IoK8sAPICoreV1CinderVolumeSource) SetReadOnly(val OptBool) {
	s.ReadOnly = val
}

// SetSecretRef sets the value of SecretRef.
func (s *IoK8sAPICoreV1CinderVolumeSource) SetSecretRef(val OptIoK8sAPICoreV1LocalObjectReference) {
	s.SecretRef = val
}

// SetVolumeID sets the value of VolumeID.
func (s *IoK8sAPICoreV1CinderVolumeSource) SetVolumeID(val string) {
	s.VolumeID = val
}

// ClientIPConfig represents the configurations of Client IP based session affinity.
// Ref: #/components/schemas/io.k8s.api.core.v1.ClientIPConfig
type IoK8sAPICoreV1ClientIPConfig struct {
	// TimeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 &&
	// <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
	TimeoutSeconds OptInt32 `json:"timeoutSeconds"`
}

// GetTimeoutSeconds returns the value of TimeoutSeconds.
func (s *IoK8sAPICoreV1ClientIPConfig) GetTimeoutSeconds() OptInt32 {
	return s.TimeoutSeconds
}

// SetTimeoutSeconds sets the value of TimeoutSeconds.
func (s *IoK8sAPICoreV1ClientIPConfig) SetTimeoutSeconds(val OptInt32) {
	s.TimeoutSeconds = val
}

// Information about the condition of a component.
// Ref: #/components/schemas/io.k8s.api.core.v1.ComponentCondition
type IoK8sAPICoreV1ComponentCondition struct {
	// Condition error code for a component. For example, a health check error code.
	Error OptString `json:"error"`
	// Message about the condition for a component. For example, information about a health check.
	Message OptString `json:"message"`
	// Status of the condition for a component. Valid values for "Healthy": "True", "False", or "Unknown".
	Status string `json:"status"`
	// Type of condition for a component. Valid value: "Healthy".
	Type string `json:"type"`
}

// GetError returns the value of Error.
func (s *IoK8sAPICoreV1ComponentCondition) GetError() OptString {
	return s.Error
}

// GetMessage returns the value of Message.
func (s *IoK8sAPICoreV1ComponentCondition) GetMessage() OptString {
	return s.Message
}

// GetStatus returns the value of Status.
func (s *IoK8sAPICoreV1ComponentCondition) GetStatus() string {
	return s.Status
}

// GetType returns the value of Type.
func (s *IoK8sAPICoreV1ComponentCondition) GetType() string {
	return s.Type
}

// SetError sets the value of Error.
func (s *IoK8sAPICoreV1ComponentCondition) SetError(val OptString) {
	s.Error = val
}

// SetMessage sets the value of Message.
func (s *IoK8sAPICoreV1ComponentCondition) SetMessage(val OptString) {
	s.Message = val
}

// SetStatus sets the value of Status.
func (s *IoK8sAPICoreV1ComponentCondition) SetStatus(val string) {
	s.Status = val
}

// SetType sets the value of Type.
func (s *IoK8sAPICoreV1ComponentCondition) SetType(val string) {
	s.Type = val
}

// ComponentStatus (and ComponentStatusList) holds the cluster validation info. Deprecated: This API
// is deprecated in v1.19+.
// Ref: #/components/schemas/io.k8s.api.core.v1.ComponentStatus
type IoK8sAPICoreV1ComponentStatus struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// List of component conditions observed.
	Conditions []IoK8sAPICoreV1ComponentCondition `json:"conditions"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                   `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPICoreV1ComponentStatus) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetConditions returns the value of Conditions.
func (s *IoK8sAPICoreV1ComponentStatus) GetConditions() []IoK8sAPICoreV1ComponentCondition {
	return s.Conditions
}

// GetKind returns the value of Kind.
func (s *IoK8sAPICoreV1ComponentStatus) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPICoreV1ComponentStatus) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPICoreV1ComponentStatus) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetConditions sets the value of Conditions.
func (s *IoK8sAPICoreV1ComponentStatus) SetConditions(val []IoK8sAPICoreV1ComponentCondition) {
	s.Conditions = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPICoreV1ComponentStatus) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPICoreV1ComponentStatus) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

func (*IoK8sAPICoreV1ComponentStatus) readCoreV1ComponentStatusRes() {}

// Status of all the conditions for the component as a list of ComponentStatus objects. Deprecated:
// This API is deprecated in v1.19+.
// Ref: #/components/schemas/io.k8s.api.core.v1.ComponentStatusList
type IoK8sAPICoreV1ComponentStatusList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// List of ComponentStatus objects.
	Items []IoK8sAPICoreV1ComponentStatus `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPICoreV1ComponentStatusList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPICoreV1ComponentStatusList) GetItems() []IoK8sAPICoreV1ComponentStatus {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPICoreV1ComponentStatusList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPICoreV1ComponentStatusList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPICoreV1ComponentStatusList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPICoreV1ComponentStatusList) SetItems(val []IoK8sAPICoreV1ComponentStatus) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPICoreV1ComponentStatusList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPICoreV1ComponentStatusList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPICoreV1ComponentStatusList) listCoreV1ComponentStatusRes() {}

// ConfigMap holds configuration data for pods to consume.
// Ref: #/components/schemas/io.k8s.api.core.v1.ConfigMap
type IoK8sAPICoreV1ConfigMap struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', '_' or
	// '.'. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in
	// BinaryData must not overlap with the ones in the Data field, this is enforced during validation
	// process. Using this field will require 1.10+ apiserver and kubelet.
	BinaryData OptIoK8sAPICoreV1ConfigMapBinaryData `json:"binaryData"`
	// Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_'
	// or '.'. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in
	// Data must not overlap with the keys in the BinaryData field, this is enforced during validation
	// process.
	Data OptIoK8sAPICoreV1ConfigMapData `json:"data"`
	// Immutable, if set to true, ensures that data stored in the ConfigMap cannot be updated (only
	// object metadata can be modified). If not set to true, the field can be modified at any time.
	// Defaulted to nil.
	Immutable OptBool `json:"immutable"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                   `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPICoreV1ConfigMap) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetBinaryData returns the value of BinaryData.
func (s *IoK8sAPICoreV1ConfigMap) GetBinaryData() OptIoK8sAPICoreV1ConfigMapBinaryData {
	return s.BinaryData
}

// GetData returns the value of Data.
func (s *IoK8sAPICoreV1ConfigMap) GetData() OptIoK8sAPICoreV1ConfigMapData {
	return s.Data
}

// GetImmutable returns the value of Immutable.
func (s *IoK8sAPICoreV1ConfigMap) GetImmutable() OptBool {
	return s.Immutable
}

// GetKind returns the value of Kind.
func (s *IoK8sAPICoreV1ConfigMap) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPICoreV1ConfigMap) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPICoreV1ConfigMap) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetBinaryData sets the value of BinaryData.
func (s *IoK8sAPICoreV1ConfigMap) SetBinaryData(val OptIoK8sAPICoreV1ConfigMapBinaryData) {
	s.BinaryData = val
}

// SetData sets the value of Data.
func (s *IoK8sAPICoreV1ConfigMap) SetData(val OptIoK8sAPICoreV1ConfigMapData) {
	s.Data = val
}

// SetImmutable sets the value of Immutable.
func (s *IoK8sAPICoreV1ConfigMap) SetImmutable(val OptBool) {
	s.Immutable = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPICoreV1ConfigMap) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPICoreV1ConfigMap) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

func (*IoK8sAPICoreV1ConfigMap) readCoreV1NamespacedConfigMapRes() {}

// BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', '_' or
// '.'. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in
// BinaryData must not overlap with the ones in the Data field, this is enforced during validation
// process. Using this field will require 1.10+ apiserver and kubelet.
type IoK8sAPICoreV1ConfigMapBinaryData map[string][]byte

func (s *IoK8sAPICoreV1ConfigMapBinaryData) init() IoK8sAPICoreV1ConfigMapBinaryData {
	m := *s
	if m == nil {
		m = map[string][]byte{}
		*s = m
	}
	return m
}

// Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_'
// or '.'. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in
// Data must not overlap with the keys in the BinaryData field, this is enforced during validation
// process.
type IoK8sAPICoreV1ConfigMapData map[string]string

func (s *IoK8sAPICoreV1ConfigMapData) init() IoK8sAPICoreV1ConfigMapData {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.
// The contents of the target ConfigMap's Data field will represent the key-value pairs as
// environment variables.
// Ref: #/components/schemas/io.k8s.api.core.v1.ConfigMapEnvSource
type IoK8sAPICoreV1ConfigMapEnvSource struct {
	// Name of the referent. More info: https://kubernetes.
	// io/docs/concepts/overview/working-with-objects/names/#names.
	Name OptString `json:"name"`
	// Specify whether the ConfigMap must be defined.
	Optional OptBool `json:"optional"`
}

// GetName returns the value of Name.
func (s *IoK8sAPICoreV1ConfigMapEnvSource) GetName() OptString {
	return s.Name
}

// GetOptional returns the value of Optional.
func (s *IoK8sAPICoreV1ConfigMapEnvSource) GetOptional() OptBool {
	return s.Optional
}

// SetName sets the value of Name.
func (s *IoK8sAPICoreV1ConfigMapEnvSource) SetName(val OptString) {
	s.Name = val
}

// SetOptional sets the value of Optional.
func (s *IoK8sAPICoreV1ConfigMapEnvSource) SetOptional(val OptBool) {
	s.Optional = val
}

// Selects a key from a ConfigMap.
// Ref: #/components/schemas/io.k8s.api.core.v1.ConfigMapKeySelector
type IoK8sAPICoreV1ConfigMapKeySelector struct {
	// The key to select.
	Key string `json:"key"`
	// Name of the referent. More info: https://kubernetes.
	// io/docs/concepts/overview/working-with-objects/names/#names.
	Name OptString `json:"name"`
	// Specify whether the ConfigMap or its key must be defined.
	Optional OptBool `json:"optional"`
}

// GetKey returns the value of Key.
func (s *IoK8sAPICoreV1ConfigMapKeySelector) GetKey() string {
	return s.Key
}

// GetName returns the value of Name.
func (s *IoK8sAPICoreV1ConfigMapKeySelector) GetName() OptString {
	return s.Name
}

// GetOptional returns the value of Optional.
func (s *IoK8sAPICoreV1ConfigMapKeySelector) GetOptional() OptBool {
	return s.Optional
}

// SetKey sets the value of Key.
func (s *IoK8sAPICoreV1ConfigMapKeySelector) SetKey(val string) {
	s.Key = val
}

// SetName sets the value of Name.
func (s *IoK8sAPICoreV1ConfigMapKeySelector) SetName(val OptString) {
	s.Name = val
}

// SetOptional sets the value of Optional.
func (s *IoK8sAPICoreV1ConfigMapKeySelector) SetOptional(val OptBool) {
	s.Optional = val
}

// ConfigMapList is a resource containing a list of ConfigMap objects.
// Ref: #/components/schemas/io.k8s.api.core.v1.ConfigMapList
type IoK8sAPICoreV1ConfigMapList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Items is the list of ConfigMaps.
	Items []IoK8sAPICoreV1ConfigMap `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPICoreV1ConfigMapList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPICoreV1ConfigMapList) GetItems() []IoK8sAPICoreV1ConfigMap {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPICoreV1ConfigMapList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPICoreV1ConfigMapList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPICoreV1ConfigMapList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPICoreV1ConfigMapList) SetItems(val []IoK8sAPICoreV1ConfigMap) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPICoreV1ConfigMapList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPICoreV1ConfigMapList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPICoreV1ConfigMapList) listCoreV1ConfigMapForAllNamespacesRes() {}
func (*IoK8sAPICoreV1ConfigMapList) listCoreV1NamespacedConfigMapRes()       {}

// ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for
// the Node. This API is deprecated since 1.22: https://git.k8s.
// io/enhancements/keps/sig-node/281-dynamic-kubelet-configuration.
// Ref: #/components/schemas/io.k8s.api.core.v1.ConfigMapNodeConfigSource
type IoK8sAPICoreV1ConfigMapNodeConfigSource struct {
	// KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the
	// KubeletConfiguration structure This field is required in all cases.
	KubeletConfigKey string `json:"kubeletConfigKey"`
	// Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.
	Name string `json:"name"`
	// Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all
	// cases.
	Namespace string `json:"namespace"`
	// ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is
	// forbidden in Node.Spec, and required in Node.Status.
	ResourceVersion OptString `json:"resourceVersion"`
	// UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and
	// required in Node.Status.
	UID OptString `json:"uid"`
}

// GetKubeletConfigKey returns the value of KubeletConfigKey.
func (s *IoK8sAPICoreV1ConfigMapNodeConfigSource) GetKubeletConfigKey() string {
	return s.KubeletConfigKey
}

// GetName returns the value of Name.
func (s *IoK8sAPICoreV1ConfigMapNodeConfigSource) GetName() string {
	return s.Name
}

// GetNamespace returns the value of Namespace.
func (s *IoK8sAPICoreV1ConfigMapNodeConfigSource) GetNamespace() string {
	return s.Namespace
}

// GetResourceVersion returns the value of ResourceVersion.
func (s *IoK8sAPICoreV1ConfigMapNodeConfigSource) GetResourceVersion() OptString {
	return s.ResourceVersion
}

// GetUID returns the value of UID.
func (s *IoK8sAPICoreV1ConfigMapNodeConfigSource) GetUID() OptString {
	return s.UID
}

// SetKubeletConfigKey sets the value of KubeletConfigKey.
func (s *IoK8sAPICoreV1ConfigMapNodeConfigSource) SetKubeletConfigKey(val string) {
	s.KubeletConfigKey = val
}

// SetName sets the value of Name.
func (s *IoK8sAPICoreV1ConfigMapNodeConfigSource) SetName(val string) {
	s.Name = val
}

// SetNamespace sets the value of Namespace.
func (s *IoK8sAPICoreV1ConfigMapNodeConfigSource) SetNamespace(val string) {
	s.Namespace = val
}

// SetResourceVersion sets the value of ResourceVersion.
func (s *IoK8sAPICoreV1ConfigMapNodeConfigSource) SetResourceVersion(val OptString) {
	s.ResourceVersion = val
}

// SetUID sets the value of UID.
func (s *IoK8sAPICoreV1ConfigMapNodeConfigSource) SetUID(val OptString) {
	s.UID = val
}

// Adapts a ConfigMap into a projected volume.
// The contents of the target ConfigMap's Data field will be presented in a projected volume as files
// using the keys in the Data field as the file names, unless the items element is populated with
// specific mappings of keys to paths. Note that this is identical to a configmap volume source
// without the default mode.
// Ref: #/components/schemas/io.k8s.api.core.v1.ConfigMapProjection
type IoK8sAPICoreV1ConfigMapProjection struct {
	// If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be
	// projected into the volume as a file whose name is the key and content is the value. If specified,
	// the listed keys will be projected into the specified paths, and unlisted keys will not be present.
	// If a key is specified which is not present in the ConfigMap, the volume setup will error unless it
	// is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items []IoK8sAPICoreV1KeyToPath `json:"items"`
	// Name of the referent. More info: https://kubernetes.
	// io/docs/concepts/overview/working-with-objects/names/#names.
	Name OptString `json:"name"`
	// Specify whether the ConfigMap or its keys must be defined.
	Optional OptBool `json:"optional"`
}

// GetItems returns the value of Items.
func (s *IoK8sAPICoreV1ConfigMapProjection) GetItems() []IoK8sAPICoreV1KeyToPath {
	return s.Items
}

// GetName returns the value of Name.
func (s *IoK8sAPICoreV1ConfigMapProjection) GetName() OptString {
	return s.Name
}

// GetOptional returns the value of Optional.
func (s *IoK8sAPICoreV1ConfigMapProjection) GetOptional() OptBool {
	return s.Optional
}

// SetItems sets the value of Items.
func (s *IoK8sAPICoreV1ConfigMapProjection) SetItems(val []IoK8sAPICoreV1KeyToPath) {
	s.Items = val
}

// SetName sets the value of Name.
func (s *IoK8sAPICoreV1ConfigMapProjection) SetName(val OptString) {
	s.Name = val
}

// SetOptional sets the value of Optional.
func (s *IoK8sAPICoreV1ConfigMapProjection) SetOptional(val OptBool) {
	s.Optional = val
}

// Adapts a ConfigMap into a volume.
// The contents of the target ConfigMap's Data field will be presented in a volume as files using the
// keys in the Data field as the file names, unless the items element is populated with specific
// mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.
// Ref: #/components/schemas/io.k8s.api.core.v1.ConfigMapVolumeSource
type IoK8sAPICoreV1ConfigMapVolumeSource struct {
	// Optional: mode bits used to set permissions on created files by default. Must be an octal value
	// between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal
	// values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path
	// are not affected by this setting. This might be in conflict with other options that affect the
	// file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode OptInt32 `json:"defaultMode"`
	// If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be
	// projected into the volume as a file whose name is the key and content is the value. If specified,
	// the listed keys will be projected into the specified paths, and unlisted keys will not be present.
	// If a key is specified which is not present in the ConfigMap, the volume setup will error unless it
	// is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items []IoK8sAPICoreV1KeyToPath `json:"items"`
	// Name of the referent. More info: https://kubernetes.
	// io/docs/concepts/overview/working-with-objects/names/#names.
	Name OptString `json:"name"`
	// Specify whether the ConfigMap or its keys must be defined.
	Optional OptBool `json:"optional"`
}

// GetDefaultMode returns the value of DefaultMode.
func (s *IoK8sAPICoreV1ConfigMapVolumeSource) GetDefaultMode() OptInt32 {
	return s.DefaultMode
}

// GetItems returns the value of Items.
func (s *IoK8sAPICoreV1ConfigMapVolumeSource) GetItems() []IoK8sAPICoreV1KeyToPath {
	return s.Items
}

// GetName returns the value of Name.
func (s *IoK8sAPICoreV1ConfigMapVolumeSource) GetName() OptString {
	return s.Name
}

// GetOptional returns the value of Optional.
func (s *IoK8sAPICoreV1ConfigMapVolumeSource) GetOptional() OptBool {
	return s.Optional
}

// SetDefaultMode sets the value of DefaultMode.
func (s *IoK8sAPICoreV1ConfigMapVolumeSource) SetDefaultMode(val OptInt32) {
	s.DefaultMode = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPICoreV1ConfigMapVolumeSource) SetItems(val []IoK8sAPICoreV1KeyToPath) {
	s.Items = val
}

// SetName sets the value of Name.
func (s *IoK8sAPICoreV1ConfigMapVolumeSource) SetName(val OptString) {
	s.Name = val
}

// SetOptional sets the value of Optional.
func (s *IoK8sAPICoreV1ConfigMapVolumeSource) SetOptional(val OptBool) {
	s.Optional = val
}

// A single application container that you want to run within a pod.
// Ref: #/components/schemas/io.k8s.api.core.v1.Container
type IoK8sAPICoreV1Container struct {
	// Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable
	// references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be
	// resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $,
	//  which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string
	// literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the
	// variable exists or not. Cannot be updated. More info: https://kubernetes.
	// io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell.
	Args []string `json:"args"`
	// Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is
	// not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a
	// variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are
	// reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
	// produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of
	// whether the variable exists or not. Cannot be updated. More info: https://kubernetes.
	// io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell.
	Command []string `json:"command"`
	// List of environment variables to set in the container. Cannot be updated.
	Env []IoK8sAPICoreV1EnvVar `json:"env"`
	// List of sources to populate environment variables in the container. The keys defined within a
	// source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is
	// starting. When a key exists in multiple sources, the value associated with the last source will
	// take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be
	// updated.
	EnvFrom []IoK8sAPICoreV1EnvFromSource `json:"envFrom"`
	// Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is
	// optional to allow higher level config management to default or override container images in
	// workload controllers like Deployments and StatefulSets.
	Image OptString `json:"image"`
	// Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is
	// specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.
	// io/docs/concepts/containers/images#updating-images.
	ImagePullPolicy OptString                  `json:"imagePullPolicy"`
	Lifecycle       OptIoK8sAPICoreV1Lifecycle `json:"lifecycle"`
	LivenessProbe   OptIoK8sAPICoreV1Probe     `json:"livenessProbe"`
	// Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name
	// (DNS_LABEL). Cannot be updated.
	Name string `json:"name"`
	// List of ports to expose from the container. Exposing a port here gives the system additional
	// information about the network connections a container uses, but is primarily informational. Not
	// specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening
	// on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be
	// updated.
	Ports           []IoK8sAPICoreV1ContainerPort         `json:"ports"`
	ReadinessProbe  OptIoK8sAPICoreV1Probe                `json:"readinessProbe"`
	Resources       OptIoK8sAPICoreV1ResourceRequirements `json:"resources"`
	SecurityContext OptIoK8sAPICoreV1SecurityContext      `json:"securityContext"`
	StartupProbe    OptIoK8sAPICoreV1Probe                `json:"startupProbe"`
	// Whether this container should allocate a buffer for stdin in the container runtime. If this is not
	// set, reads from stdin in the container will always result in EOF. Default is false.
	Stdin OptBool `json:"stdin"`
	// Whether the container runtime should close the stdin channel after it has been opened by a single
	// attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If
	// stdinOnce is set to true, stdin is opened on container start, is empty until the first client
	// attaches to stdin, and then remains open and accepts data until the client disconnects, at which
	// time stdin is closed and remains closed until the container is restarted. If this flag is false, a
	// container processes that reads from stdin will never receive an EOF. Default is false.
	StdinOnce OptBool `json:"stdinOnce"`
	// Optional: Path at which the file to which the container's termination message will be written is
	// mounted into the container's filesystem. Message written is intended to be brief final status,
	// such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes.
	// The total message length across all containers will be limited to 12kb. Defaults to
	// /dev/termination-log. Cannot be updated.
	TerminationMessagePath OptString `json:"terminationMessagePath"`
	// Indicate how the termination message should be populated. File will use the contents of
	// terminationMessagePath to populate the container status message on both success and failure.
	// FallbackToLogsOnError will use the last chunk of container log output if the termination message
	// file is empty and the container exited with an error. The log output is limited to 2048 bytes or
	// 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
	TerminationMessagePolicy OptString `json:"terminationMessagePolicy"`
	// Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default
	// is false.
	Tty OptBool `json:"tty"`
	// VolumeDevices is the list of block devices to be used by the container.
	VolumeDevices []IoK8sAPICoreV1VolumeDevice `json:"volumeDevices"`
	// Pod volumes to mount into the container's filesystem. Cannot be updated.
	VolumeMounts []IoK8sAPICoreV1VolumeMount `json:"volumeMounts"`
	// Container's working directory. If not specified, the container runtime's default will be used,
	// which might be configured in the container image. Cannot be updated.
	WorkingDir OptString `json:"workingDir"`
}

// GetArgs returns the value of Args.
func (s *IoK8sAPICoreV1Container) GetArgs() []string {
	return s.Args
}

// GetCommand returns the value of Command.
func (s *IoK8sAPICoreV1Container) GetCommand() []string {
	return s.Command
}

// GetEnv returns the value of Env.
func (s *IoK8sAPICoreV1Container) GetEnv() []IoK8sAPICoreV1EnvVar {
	return s.Env
}

// GetEnvFrom returns the value of EnvFrom.
func (s *IoK8sAPICoreV1Container) GetEnvFrom() []IoK8sAPICoreV1EnvFromSource {
	return s.EnvFrom
}

// GetImage returns the value of Image.
func (s *IoK8sAPICoreV1Container) GetImage() OptString {
	return s.Image
}

// GetImagePullPolicy returns the value of ImagePullPolicy.
func (s *IoK8sAPICoreV1Container) GetImagePullPolicy() OptString {
	return s.ImagePullPolicy
}

// GetLifecycle returns the value of Lifecycle.
func (s *IoK8sAPICoreV1Container) GetLifecycle() OptIoK8sAPICoreV1Lifecycle {
	return s.Lifecycle
}

// GetLivenessProbe returns the value of LivenessProbe.
func (s *IoK8sAPICoreV1Container) GetLivenessProbe() OptIoK8sAPICoreV1Probe {
	return s.LivenessProbe
}

// GetName returns the value of Name.
func (s *IoK8sAPICoreV1Container) GetName() string {
	return s.Name
}

// GetPorts returns the value of Ports.
func (s *IoK8sAPICoreV1Container) GetPorts() []IoK8sAPICoreV1ContainerPort {
	return s.Ports
}

// GetReadinessProbe returns the value of ReadinessProbe.
func (s *IoK8sAPICoreV1Container) GetReadinessProbe() OptIoK8sAPICoreV1Probe {
	return s.ReadinessProbe
}

// GetResources returns the value of Resources.
func (s *IoK8sAPICoreV1Container) GetResources() OptIoK8sAPICoreV1ResourceRequirements {
	return s.Resources
}

// GetSecurityContext returns the value of SecurityContext.
func (s *IoK8sAPICoreV1Container) GetSecurityContext() OptIoK8sAPICoreV1SecurityContext {
	return s.SecurityContext
}

// GetStartupProbe returns the value of StartupProbe.
func (s *IoK8sAPICoreV1Container) GetStartupProbe() OptIoK8sAPICoreV1Probe {
	return s.StartupProbe
}

// GetStdin returns the value of Stdin.
func (s *IoK8sAPICoreV1Container) GetStdin() OptBool {
	return s.Stdin
}

// GetStdinOnce returns the value of StdinOnce.
func (s *IoK8sAPICoreV1Container) GetStdinOnce() OptBool {
	return s.StdinOnce
}

// GetTerminationMessagePath returns the value of TerminationMessagePath.
func (s *IoK8sAPICoreV1Container) GetTerminationMessagePath() OptString {
	return s.TerminationMessagePath
}

// GetTerminationMessagePolicy returns the value of TerminationMessagePolicy.
func (s *IoK8sAPICoreV1Container) GetTerminationMessagePolicy() OptString {
	return s.TerminationMessagePolicy
}

// GetTty returns the value of Tty.
func (s *IoK8sAPICoreV1Container) GetTty() OptBool {
	return s.Tty
}

// GetVolumeDevices returns the value of VolumeDevices.
func (s *IoK8sAPICoreV1Container) GetVolumeDevices() []IoK8sAPICoreV1VolumeDevice {
	return s.VolumeDevices
}

// GetVolumeMounts returns the value of VolumeMounts.
func (s *IoK8sAPICoreV1Container) GetVolumeMounts() []IoK8sAPICoreV1VolumeMount {
	return s.VolumeMounts
}

// GetWorkingDir returns the value of WorkingDir.
func (s *IoK8sAPICoreV1Container) GetWorkingDir() OptString {
	return s.WorkingDir
}

// SetArgs sets the value of Args.
func (s *IoK8sAPICoreV1Container) SetArgs(val []string) {
	s.Args = val
}

// SetCommand sets the value of Command.
func (s *IoK8sAPICoreV1Container) SetCommand(val []string) {
	s.Command = val
}

// SetEnv sets the value of Env.
func (s *IoK8sAPICoreV1Container) SetEnv(val []IoK8sAPICoreV1EnvVar) {
	s.Env = val
}

// SetEnvFrom sets the value of EnvFrom.
func (s *IoK8sAPICoreV1Container) SetEnvFrom(val []IoK8sAPICoreV1EnvFromSource) {
	s.EnvFrom = val
}

// SetImage sets the value of Image.
func (s *IoK8sAPICoreV1Container) SetImage(val OptString) {
	s.Image = val
}

// SetImagePullPolicy sets the value of ImagePullPolicy.
func (s *IoK8sAPICoreV1Container) SetImagePullPolicy(val OptString) {
	s.ImagePullPolicy = val
}

// SetLifecycle sets the value of Lifecycle.
func (s *IoK8sAPICoreV1Container) SetLifecycle(val OptIoK8sAPICoreV1Lifecycle) {
	s.Lifecycle = val
}

// SetLivenessProbe sets the value of LivenessProbe.
func (s *IoK8sAPICoreV1Container) SetLivenessProbe(val OptIoK8sAPICoreV1Probe) {
	s.LivenessProbe = val
}

// SetName sets the value of Name.
func (s *IoK8sAPICoreV1Container) SetName(val string) {
	s.Name = val
}

// SetPorts sets the value of Ports.
func (s *IoK8sAPICoreV1Container) SetPorts(val []IoK8sAPICoreV1ContainerPort) {
	s.Ports = val
}

// SetReadinessProbe sets the value of ReadinessProbe.
func (s *IoK8sAPICoreV1Container) SetReadinessProbe(val OptIoK8sAPICoreV1Probe) {
	s.ReadinessProbe = val
}

// SetResources sets the value of Resources.
func (s *IoK8sAPICoreV1Container) SetResources(val OptIoK8sAPICoreV1ResourceRequirements) {
	s.Resources = val
}

// SetSecurityContext sets the value of SecurityContext.
func (s *IoK8sAPICoreV1Container) SetSecurityContext(val OptIoK8sAPICoreV1SecurityContext) {
	s.SecurityContext = val
}

// SetStartupProbe sets the value of StartupProbe.
func (s *IoK8sAPICoreV1Container) SetStartupProbe(val OptIoK8sAPICoreV1Probe) {
	s.StartupProbe = val
}

// SetStdin sets the value of Stdin.
func (s *IoK8sAPICoreV1Container) SetStdin(val OptBool) {
	s.Stdin = val
}

// SetStdinOnce sets the value of StdinOnce.
func (s *IoK8sAPICoreV1Container) SetStdinOnce(val OptBool) {
	s.StdinOnce = val
}

// SetTerminationMessagePath sets the value of TerminationMessagePath.
func (s *IoK8sAPICoreV1Container) SetTerminationMessagePath(val OptString) {
	s.TerminationMessagePath = val
}

// SetTerminationMessagePolicy sets the value of TerminationMessagePolicy.
func (s *IoK8sAPICoreV1Container) SetTerminationMessagePolicy(val OptString) {
	s.TerminationMessagePolicy = val
}

// SetTty sets the value of Tty.
func (s *IoK8sAPICoreV1Container) SetTty(val OptBool) {
	s.Tty = val
}

// SetVolumeDevices sets the value of VolumeDevices.
func (s *IoK8sAPICoreV1Container) SetVolumeDevices(val []IoK8sAPICoreV1VolumeDevice) {
	s.VolumeDevices = val
}

// SetVolumeMounts sets the value of VolumeMounts.
func (s *IoK8sAPICoreV1Container) SetVolumeMounts(val []IoK8sAPICoreV1VolumeMount) {
	s.VolumeMounts = val
}

// SetWorkingDir sets the value of WorkingDir.
func (s *IoK8sAPICoreV1Container) SetWorkingDir(val OptString) {
	s.WorkingDir = val
}

// Describe a container image.
// Ref: #/components/schemas/io.k8s.api.core.v1.ContainerImage
type IoK8sAPICoreV1ContainerImage struct {
	// Names by which this image is known. e.g. ["k8s.gcr.io/hyperkube:v1.0.7", "dockerhub.
	// io/google_containers/hyperkube:v1.0.7"].
	Names []string `json:"names"`
	// The size of the image in bytes.
	SizeBytes OptInt64 `json:"sizeBytes"`
}

// GetNames returns the value of Names.
func (s *IoK8sAPICoreV1ContainerImage) GetNames() []string {
	return s.Names
}

// GetSizeBytes returns the value of SizeBytes.
func (s *IoK8sAPICoreV1ContainerImage) GetSizeBytes() OptInt64 {
	return s.SizeBytes
}

// SetNames sets the value of Names.
func (s *IoK8sAPICoreV1ContainerImage) SetNames(val []string) {
	s.Names = val
}

// SetSizeBytes sets the value of SizeBytes.
func (s *IoK8sAPICoreV1ContainerImage) SetSizeBytes(val OptInt64) {
	s.SizeBytes = val
}

// ContainerPort represents a network port in a single container.
// Ref: #/components/schemas/io.k8s.api.core.v1.ContainerPort
type IoK8sAPICoreV1ContainerPort struct {
	// Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
	ContainerPort int32 `json:"containerPort"`
	// What host IP to bind the external port to.
	HostIP OptString `json:"hostIP"`
	// Number of port to expose on the host. If specified, this must be a valid port number, 0 < x <
	// 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need
	// this.
	HostPort OptInt32 `json:"hostPort"`
	// If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod
	// must have a unique name. Name for the port that can be referred to by services.
	Name OptString `json:"name"`
	// Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
	Protocol OptString `json:"protocol"`
}

// GetContainerPort returns the value of ContainerPort.
func (s *IoK8sAPICoreV1ContainerPort) GetContainerPort() int32 {
	return s.ContainerPort
}

// GetHostIP returns the value of HostIP.
func (s *IoK8sAPICoreV1ContainerPort) GetHostIP() OptString {
	return s.HostIP
}

// GetHostPort returns the value of HostPort.
func (s *IoK8sAPICoreV1ContainerPort) GetHostPort() OptInt32 {
	return s.HostPort
}

// GetName returns the value of Name.
func (s *IoK8sAPICoreV1ContainerPort) GetName() OptString {
	return s.Name
}

// GetProtocol returns the value of Protocol.
func (s *IoK8sAPICoreV1ContainerPort) GetProtocol() OptString {
	return s.Protocol
}

// SetContainerPort sets the value of ContainerPort.
func (s *IoK8sAPICoreV1ContainerPort) SetContainerPort(val int32) {
	s.ContainerPort = val
}

// SetHostIP sets the value of HostIP.
func (s *IoK8sAPICoreV1ContainerPort) SetHostIP(val OptString) {
	s.HostIP = val
}

// SetHostPort sets the value of HostPort.
func (s *IoK8sAPICoreV1ContainerPort) SetHostPort(val OptInt32) {
	s.HostPort = val
}

// SetName sets the value of Name.
func (s *IoK8sAPICoreV1ContainerPort) SetName(val OptString) {
	s.Name = val
}

// SetProtocol sets the value of Protocol.
func (s *IoK8sAPICoreV1ContainerPort) SetProtocol(val OptString) {
	s.Protocol = val
}

// ContainerState holds a possible state of container. Only one of its members may be specified. If
// none of them is specified, the default one is ContainerStateWaiting.
// Ref: #/components/schemas/io.k8s.api.core.v1.ContainerState
type IoK8sAPICoreV1ContainerState struct {
	Running    OptIoK8sAPICoreV1ContainerStateRunning    `json:"running"`
	Terminated OptIoK8sAPICoreV1ContainerStateTerminated `json:"terminated"`
	Waiting    OptIoK8sAPICoreV1ContainerStateWaiting    `json:"waiting"`
}

// GetRunning returns the value of Running.
func (s *IoK8sAPICoreV1ContainerState) GetRunning() OptIoK8sAPICoreV1ContainerStateRunning {
	return s.Running
}

// GetTerminated returns the value of Terminated.
func (s *IoK8sAPICoreV1ContainerState) GetTerminated() OptIoK8sAPICoreV1ContainerStateTerminated {
	return s.Terminated
}

// GetWaiting returns the value of Waiting.
func (s *IoK8sAPICoreV1ContainerState) GetWaiting() OptIoK8sAPICoreV1ContainerStateWaiting {
	return s.Waiting
}

// SetRunning sets the value of Running.
func (s *IoK8sAPICoreV1ContainerState) SetRunning(val OptIoK8sAPICoreV1ContainerStateRunning) {
	s.Running = val
}

// SetTerminated sets the value of Terminated.
func (s *IoK8sAPICoreV1ContainerState) SetTerminated(val OptIoK8sAPICoreV1ContainerStateTerminated) {
	s.Terminated = val
}

// SetWaiting sets the value of Waiting.
func (s *IoK8sAPICoreV1ContainerState) SetWaiting(val OptIoK8sAPICoreV1ContainerStateWaiting) {
	s.Waiting = val
}

// ContainerStateRunning is a running state of a container.
// Ref: #/components/schemas/io.k8s.api.core.v1.ContainerStateRunning
type IoK8sAPICoreV1ContainerStateRunning struct {
	StartedAt OptIoK8sApimachineryPkgApisMetaV1Time `json:"startedAt"`
}

// GetStartedAt returns the value of StartedAt.
func (s *IoK8sAPICoreV1ContainerStateRunning) GetStartedAt() OptIoK8sApimachineryPkgApisMetaV1Time {
	return s.StartedAt
}

// SetStartedAt sets the value of StartedAt.
func (s *IoK8sAPICoreV1ContainerStateRunning) SetStartedAt(val OptIoK8sApimachineryPkgApisMetaV1Time) {
	s.StartedAt = val
}

// ContainerStateTerminated is a terminated state of a container.
// Ref: #/components/schemas/io.k8s.api.core.v1.ContainerStateTerminated
type IoK8sAPICoreV1ContainerStateTerminated struct {
	// Container's ID in the format 'docker://<container_id>'.
	ContainerID OptString `json:"containerID"`
	// Exit status from the last termination of the container.
	ExitCode   int32                                 `json:"exitCode"`
	FinishedAt OptIoK8sApimachineryPkgApisMetaV1Time `json:"finishedAt"`
	// Message regarding the last termination of the container.
	Message OptString `json:"message"`
	// (brief) reason from the last termination of the container.
	Reason OptString `json:"reason"`
	// Signal from the last termination of the container.
	Signal    OptInt32                              `json:"signal"`
	StartedAt OptIoK8sApimachineryPkgApisMetaV1Time `json:"startedAt"`
}

// GetContainerID returns the value of ContainerID.
func (s *IoK8sAPICoreV1ContainerStateTerminated) GetContainerID() OptString {
	return s.ContainerID
}

// GetExitCode returns the value of ExitCode.
func (s *IoK8sAPICoreV1ContainerStateTerminated) GetExitCode() int32 {
	return s.ExitCode
}

// GetFinishedAt returns the value of FinishedAt.
func (s *IoK8sAPICoreV1ContainerStateTerminated) GetFinishedAt() OptIoK8sApimachineryPkgApisMetaV1Time {
	return s.FinishedAt
}

// GetMessage returns the value of Message.
func (s *IoK8sAPICoreV1ContainerStateTerminated) GetMessage() OptString {
	return s.Message
}

// GetReason returns the value of Reason.
func (s *IoK8sAPICoreV1ContainerStateTerminated) GetReason() OptString {
	return s.Reason
}

// GetSignal returns the value of Signal.
func (s *IoK8sAPICoreV1ContainerStateTerminated) GetSignal() OptInt32 {
	return s.Signal
}

// GetStartedAt returns the value of StartedAt.
func (s *IoK8sAPICoreV1ContainerStateTerminated) GetStartedAt() OptIoK8sApimachineryPkgApisMetaV1Time {
	return s.StartedAt
}

// SetContainerID sets the value of ContainerID.
func (s *IoK8sAPICoreV1ContainerStateTerminated) SetContainerID(val OptString) {
	s.ContainerID = val
}

// SetExitCode sets the value of ExitCode.
func (s *IoK8sAPICoreV1ContainerStateTerminated) SetExitCode(val int32) {
	s.ExitCode = val
}

// SetFinishedAt sets the value of FinishedAt.
func (s *IoK8sAPICoreV1ContainerStateTerminated) SetFinishedAt(val OptIoK8sApimachineryPkgApisMetaV1Time) {
	s.FinishedAt = val
}

// SetMessage sets the value of Message.
func (s *IoK8sAPICoreV1ContainerStateTerminated) SetMessage(val OptString) {
	s.Message = val
}

// SetReason sets the value of Reason.
func (s *IoK8sAPICoreV1ContainerStateTerminated) SetReason(val OptString) {
	s.Reason = val
}

// SetSignal sets the value of Signal.
func (s *IoK8sAPICoreV1ContainerStateTerminated) SetSignal(val OptInt32) {
	s.Signal = val
}

// SetStartedAt sets the value of StartedAt.
func (s *IoK8sAPICoreV1ContainerStateTerminated) SetStartedAt(val OptIoK8sApimachineryPkgApisMetaV1Time) {
	s.StartedAt = val
}

// ContainerStateWaiting is a waiting state of a container.
// Ref: #/components/schemas/io.k8s.api.core.v1.ContainerStateWaiting
type IoK8sAPICoreV1ContainerStateWaiting struct {
	// Message regarding why the container is not yet running.
	Message OptString `json:"message"`
	// (brief) reason the container is not yet running.
	Reason OptString `json:"reason"`
}

// GetMessage returns the value of Message.
func (s *IoK8sAPICoreV1ContainerStateWaiting) GetMessage() OptString {
	return s.Message
}

// GetReason returns the value of Reason.
func (s *IoK8sAPICoreV1ContainerStateWaiting) GetReason() OptString {
	return s.Reason
}

// SetMessage sets the value of Message.
func (s *IoK8sAPICoreV1ContainerStateWaiting) SetMessage(val OptString) {
	s.Message = val
}

// SetReason sets the value of Reason.
func (s *IoK8sAPICoreV1ContainerStateWaiting) SetReason(val OptString) {
	s.Reason = val
}

// ContainerStatus contains details for the current status of this container.
// Ref: #/components/schemas/io.k8s.api.core.v1.ContainerStatus
type IoK8sAPICoreV1ContainerStatus struct {
	// Container's ID in the format 'docker://<container_id>'.
	ContainerID OptString `json:"containerID"`
	// The image the container is running. More info: https://kubernetes.
	// io/docs/concepts/containers/images.
	Image string `json:"image"`
	// ImageID of the container's image.
	ImageID   string                          `json:"imageID"`
	LastState OptIoK8sAPICoreV1ContainerState `json:"lastState"`
	// This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.
	Name string `json:"name"`
	// Specifies whether the container has passed its readiness probe.
	Ready bool `json:"ready"`
	// The number of times the container has been restarted.
	RestartCount int32 `json:"restartCount"`
	// Specifies whether the container has passed its startup probe. Initialized as false, becomes true
	// after startupProbe is considered successful. Resets to false when the container is restarted, or
	// if kubelet loses state temporarily. Is always true when no startupProbe is defined.
	Started OptBool                         `json:"started"`
	State   OptIoK8sAPICoreV1ContainerState `json:"state"`
}

// GetContainerID returns the value of ContainerID.
func (s *IoK8sAPICoreV1ContainerStatus) GetContainerID() OptString {
	return s.ContainerID
}

// GetImage returns the value of Image.
func (s *IoK8sAPICoreV1ContainerStatus) GetImage() string {
	return s.Image
}

// GetImageID returns the value of ImageID.
func (s *IoK8sAPICoreV1ContainerStatus) GetImageID() string {
	return s.ImageID
}

// GetLastState returns the value of LastState.
func (s *IoK8sAPICoreV1ContainerStatus) GetLastState() OptIoK8sAPICoreV1ContainerState {
	return s.LastState
}

// GetName returns the value of Name.
func (s *IoK8sAPICoreV1ContainerStatus) GetName() string {
	return s.Name
}

// GetReady returns the value of Ready.
func (s *IoK8sAPICoreV1ContainerStatus) GetReady() bool {
	return s.Ready
}

// GetRestartCount returns the value of RestartCount.
func (s *IoK8sAPICoreV1ContainerStatus) GetRestartCount() int32 {
	return s.RestartCount
}

// GetStarted returns the value of Started.
func (s *IoK8sAPICoreV1ContainerStatus) GetStarted() OptBool {
	return s.Started
}

// GetState returns the value of State.
func (s *IoK8sAPICoreV1ContainerStatus) GetState() OptIoK8sAPICoreV1ContainerState {
	return s.State
}

// SetContainerID sets the value of ContainerID.
func (s *IoK8sAPICoreV1ContainerStatus) SetContainerID(val OptString) {
	s.ContainerID = val
}

// SetImage sets the value of Image.
func (s *IoK8sAPICoreV1ContainerStatus) SetImage(val string) {
	s.Image = val
}

// SetImageID sets the value of ImageID.
func (s *IoK8sAPICoreV1ContainerStatus) SetImageID(val string) {
	s.ImageID = val
}

// SetLastState sets the value of LastState.
func (s *IoK8sAPICoreV1ContainerStatus) SetLastState(val OptIoK8sAPICoreV1ContainerState) {
	s.LastState = val
}

// SetName sets the value of Name.
func (s *IoK8sAPICoreV1ContainerStatus) SetName(val string) {
	s.Name = val
}

// SetReady sets the value of Ready.
func (s *IoK8sAPICoreV1ContainerStatus) SetReady(val bool) {
	s.Ready = val
}

// SetRestartCount sets the value of RestartCount.
func (s *IoK8sAPICoreV1ContainerStatus) SetRestartCount(val int32) {
	s.RestartCount = val
}

// SetStarted sets the value of Started.
func (s *IoK8sAPICoreV1ContainerStatus) SetStarted(val OptBool) {
	s.Started = val
}

// SetState sets the value of State.
func (s *IoK8sAPICoreV1ContainerStatus) SetState(val OptIoK8sAPICoreV1ContainerState) {
	s.State = val
}

// DaemonEndpoint contains information about a single Daemon endpoint.
// Ref: #/components/schemas/io.k8s.api.core.v1.DaemonEndpoint
type IoK8sAPICoreV1DaemonEndpoint struct {
	// Port number of the given endpoint.
	Port int32 `json:"Port"`
}

// GetPort returns the value of Port.
func (s *IoK8sAPICoreV1DaemonEndpoint) GetPort() int32 {
	return s.Port
}

// SetPort sets the value of Port.
func (s *IoK8sAPICoreV1DaemonEndpoint) SetPort(val int32) {
	s.Port = val
}

// Represents downward API info for projecting into a projected volume. Note that this is identical
// to a downwardAPI volume source without the default mode.
// Ref: #/components/schemas/io.k8s.api.core.v1.DownwardAPIProjection
type IoK8sAPICoreV1DownwardAPIProjection struct {
	// Items is a list of DownwardAPIVolume file.
	Items []IoK8sAPICoreV1DownwardAPIVolumeFile `json:"items"`
}

// GetItems returns the value of Items.
func (s *IoK8sAPICoreV1DownwardAPIProjection) GetItems() []IoK8sAPICoreV1DownwardAPIVolumeFile {
	return s.Items
}

// SetItems sets the value of Items.
func (s *IoK8sAPICoreV1DownwardAPIProjection) SetItems(val []IoK8sAPICoreV1DownwardAPIVolumeFile) {
	s.Items = val
}

// DownwardAPIVolumeFile represents information to create the file containing the pod field.
// Ref: #/components/schemas/io.k8s.api.core.v1.DownwardAPIVolumeFile
type IoK8sAPICoreV1DownwardAPIVolumeFile struct {
	FieldRef OptIoK8sAPICoreV1ObjectFieldSelector `json:"fieldRef"`
	// Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and
	// 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON
	// requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This
	// might be in conflict with other options that affect the file mode, like fsGroup, and the result
	// can be other mode bits set.
	Mode OptInt32 `json:"mode"`
	// Required: Path is  the relative path name of the file to be created. Must not be absolute or
	// contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start
	// with '..'.
	Path             string                                 `json:"path"`
	ResourceFieldRef OptIoK8sAPICoreV1ResourceFieldSelector `json:"resourceFieldRef"`
}

// GetFieldRef returns the value of FieldRef.
func (s *IoK8sAPICoreV1DownwardAPIVolumeFile) GetFieldRef() OptIoK8sAPICoreV1ObjectFieldSelector {
	return s.FieldRef
}

// GetMode returns the value of Mode.
func (s *IoK8sAPICoreV1DownwardAPIVolumeFile) GetMode() OptInt32 {
	return s.Mode
}

// GetPath returns the value of Path.
func (s *IoK8sAPICoreV1DownwardAPIVolumeFile) GetPath() string {
	return s.Path
}

// GetResourceFieldRef returns the value of ResourceFieldRef.
func (s *IoK8sAPICoreV1DownwardAPIVolumeFile) GetResourceFieldRef() OptIoK8sAPICoreV1ResourceFieldSelector {
	return s.ResourceFieldRef
}

// SetFieldRef sets the value of FieldRef.
func (s *IoK8sAPICoreV1DownwardAPIVolumeFile) SetFieldRef(val OptIoK8sAPICoreV1ObjectFieldSelector) {
	s.FieldRef = val
}

// SetMode sets the value of Mode.
func (s *IoK8sAPICoreV1DownwardAPIVolumeFile) SetMode(val OptInt32) {
	s.Mode = val
}

// SetPath sets the value of Path.
func (s *IoK8sAPICoreV1DownwardAPIVolumeFile) SetPath(val string) {
	s.Path = val
}

// SetResourceFieldRef sets the value of ResourceFieldRef.
func (s *IoK8sAPICoreV1DownwardAPIVolumeFile) SetResourceFieldRef(val OptIoK8sAPICoreV1ResourceFieldSelector) {
	s.ResourceFieldRef = val
}

// DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes
// support ownership management and SELinux relabeling.
// Ref: #/components/schemas/io.k8s.api.core.v1.DownwardAPIVolumeSource
type IoK8sAPICoreV1DownwardAPIVolumeSource struct {
	// Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set
	// permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal
	// value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values
	// for mode bits. Defaults to 0644. Directories within the path are not affected by this setting.
	// This might be in conflict with other options that affect the file mode, like fsGroup, and the
	// result can be other mode bits set.
	DefaultMode OptInt32 `json:"defaultMode"`
	// Items is a list of downward API volume file.
	Items []IoK8sAPICoreV1DownwardAPIVolumeFile `json:"items"`
}

// GetDefaultMode returns the value of DefaultMode.
func (s *IoK8sAPICoreV1DownwardAPIVolumeSource) GetDefaultMode() OptInt32 {
	return s.DefaultMode
}

// GetItems returns the value of Items.
func (s *IoK8sAPICoreV1DownwardAPIVolumeSource) GetItems() []IoK8sAPICoreV1DownwardAPIVolumeFile {
	return s.Items
}

// SetDefaultMode sets the value of DefaultMode.
func (s *IoK8sAPICoreV1DownwardAPIVolumeSource) SetDefaultMode(val OptInt32) {
	s.DefaultMode = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPICoreV1DownwardAPIVolumeSource) SetItems(val []IoK8sAPICoreV1DownwardAPIVolumeFile) {
	s.Items = val
}

// Represents an empty directory for a pod. Empty directory volumes support ownership management and
// SELinux relabeling.
// Ref: #/components/schemas/io.k8s.api.core.v1.EmptyDirVolumeSource
type IoK8sAPICoreV1EmptyDirVolumeSource struct {
	// What type of storage medium should back this directory. The default is "" which means to use the
	// node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.
	// io/docs/concepts/storage/volumes#emptydir.
	Medium    OptString                                  `json:"medium"`
	SizeLimit OptIoK8sApimachineryPkgAPIResourceQuantity `json:"sizeLimit"`
}

// GetMedium returns the value of Medium.
func (s *IoK8sAPICoreV1EmptyDirVolumeSource) GetMedium() OptString {
	return s.Medium
}

// GetSizeLimit returns the value of SizeLimit.
func (s *IoK8sAPICoreV1EmptyDirVolumeSource) GetSizeLimit() OptIoK8sApimachineryPkgAPIResourceQuantity {
	return s.SizeLimit
}

// SetMedium sets the value of Medium.
func (s *IoK8sAPICoreV1EmptyDirVolumeSource) SetMedium(val OptString) {
	s.Medium = val
}

// SetSizeLimit sets the value of SizeLimit.
func (s *IoK8sAPICoreV1EmptyDirVolumeSource) SetSizeLimit(val OptIoK8sApimachineryPkgAPIResourceQuantity) {
	s.SizeLimit = val
}

// EndpointAddress is a tuple that describes single IP address.
// Ref: #/components/schemas/io.k8s.api.core.v1.EndpointAddress
type IoK8sAPICoreV1EndpointAddress struct {
	// The Hostname of this endpoint.
	Hostname OptString `json:"hostname"`
	// The IP of this endpoint. May not be loopback (127.0.0.0/8), link-local (169.254.0.0/16), or
	// link-local multicast ((224.0.0.0/24). IPv6 is also accepted but not fully supported on all
	// platforms. Also, certain kubernetes components, like kube-proxy, are not IPv6 ready.
	IP string `json:"ip"`
	// Optional: Node hosting this endpoint. This can be used to determine endpoints local to a node.
	NodeName  OptString                        `json:"nodeName"`
	TargetRef OptIoK8sAPICoreV1ObjectReference `json:"targetRef"`
}

// GetHostname returns the value of Hostname.
func (s *IoK8sAPICoreV1EndpointAddress) GetHostname() OptString {
	return s.Hostname
}

// GetIP returns the value of IP.
func (s *IoK8sAPICoreV1EndpointAddress) GetIP() string {
	return s.IP
}

// GetNodeName returns the value of NodeName.
func (s *IoK8sAPICoreV1EndpointAddress) GetNodeName() OptString {
	return s.NodeName
}

// GetTargetRef returns the value of TargetRef.
func (s *IoK8sAPICoreV1EndpointAddress) GetTargetRef() OptIoK8sAPICoreV1ObjectReference {
	return s.TargetRef
}

// SetHostname sets the value of Hostname.
func (s *IoK8sAPICoreV1EndpointAddress) SetHostname(val OptString) {
	s.Hostname = val
}

// SetIP sets the value of IP.
func (s *IoK8sAPICoreV1EndpointAddress) SetIP(val string) {
	s.IP = val
}

// SetNodeName sets the value of NodeName.
func (s *IoK8sAPICoreV1EndpointAddress) SetNodeName(val OptString) {
	s.NodeName = val
}

// SetTargetRef sets the value of TargetRef.
func (s *IoK8sAPICoreV1EndpointAddress) SetTargetRef(val OptIoK8sAPICoreV1ObjectReference) {
	s.TargetRef = val
}

// EndpointPort is a tuple that describes a single port.
// Ref: #/components/schemas/io.k8s.api.core.v1.EndpointPort
type IoK8sAPICoreV1EndpointPort struct {
	// The application protocol for this port. This field follows standard Kubernetes label syntax.
	// Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.
	// iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as
	// mycompany.com/my-custom-protocol.
	AppProtocol OptString `json:"appProtocol"`
	// The name of this port.  This must match the 'name' field in the corresponding ServicePort. Must be
	// a DNS_LABEL. Optional only if one port is defined.
	Name OptString `json:"name"`
	// The port number of the endpoint.
	Port int32 `json:"port"`
	// The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.
	Protocol OptString `json:"protocol"`
}

// GetAppProtocol returns the value of AppProtocol.
func (s *IoK8sAPICoreV1EndpointPort) GetAppProtocol() OptString {
	return s.AppProtocol
}

// GetName returns the value of Name.
func (s *IoK8sAPICoreV1EndpointPort) GetName() OptString {
	return s.Name
}

// GetPort returns the value of Port.
func (s *IoK8sAPICoreV1EndpointPort) GetPort() int32 {
	return s.Port
}

// GetProtocol returns the value of Protocol.
func (s *IoK8sAPICoreV1EndpointPort) GetProtocol() OptString {
	return s.Protocol
}

// SetAppProtocol sets the value of AppProtocol.
func (s *IoK8sAPICoreV1EndpointPort) SetAppProtocol(val OptString) {
	s.AppProtocol = val
}

// SetName sets the value of Name.
func (s *IoK8sAPICoreV1EndpointPort) SetName(val OptString) {
	s.Name = val
}

// SetPort sets the value of Port.
func (s *IoK8sAPICoreV1EndpointPort) SetPort(val int32) {
	s.Port = val
}

// SetProtocol sets the value of Protocol.
func (s *IoK8sAPICoreV1EndpointPort) SetProtocol(val OptString) {
	s.Protocol = val
}

// EndpointSubset is a group of addresses with a common set of ports. The expanded set of endpoints
// is the Cartesian product of Addresses x Ports. For example, given:
// {
// Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
// Ports:     [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
// }
// The resulting set of endpoints can be viewed as:
// a: [ 10.10.1.1:8675, 10.10.2.2:8675 ],
// b: [ 10.10.1.1:309, 10.10.2.2:309 ].
// Ref: #/components/schemas/io.k8s.api.core.v1.EndpointSubset
type IoK8sAPICoreV1EndpointSubset struct {
	// IP addresses which offer the related ports that are marked as ready. These endpoints should be
	// considered safe for load balancers and clients to utilize.
	Addresses []IoK8sAPICoreV1EndpointAddress `json:"addresses"`
	// IP addresses which offer the related ports but are not currently marked as ready because they have
	// not yet finished starting, have recently failed a readiness check, or have recently failed a
	// liveness check.
	NotReadyAddresses []IoK8sAPICoreV1EndpointAddress `json:"notReadyAddresses"`
	// Port numbers available on the related IP addresses.
	Ports []IoK8sAPICoreV1EndpointPort `json:"ports"`
}

// GetAddresses returns the value of Addresses.
func (s *IoK8sAPICoreV1EndpointSubset) GetAddresses() []IoK8sAPICoreV1EndpointAddress {
	return s.Addresses
}

// GetNotReadyAddresses returns the value of NotReadyAddresses.
func (s *IoK8sAPICoreV1EndpointSubset) GetNotReadyAddresses() []IoK8sAPICoreV1EndpointAddress {
	return s.NotReadyAddresses
}

// GetPorts returns the value of Ports.
func (s *IoK8sAPICoreV1EndpointSubset) GetPorts() []IoK8sAPICoreV1EndpointPort {
	return s.Ports
}

// SetAddresses sets the value of Addresses.
func (s *IoK8sAPICoreV1EndpointSubset) SetAddresses(val []IoK8sAPICoreV1EndpointAddress) {
	s.Addresses = val
}

// SetNotReadyAddresses sets the value of NotReadyAddresses.
func (s *IoK8sAPICoreV1EndpointSubset) SetNotReadyAddresses(val []IoK8sAPICoreV1EndpointAddress) {
	s.NotReadyAddresses = val
}

// SetPorts sets the value of Ports.
func (s *IoK8sAPICoreV1EndpointSubset) SetPorts(val []IoK8sAPICoreV1EndpointPort) {
	s.Ports = val
}

// Endpoints is a collection of endpoints that implement the actual service. Example:
// Name: "mysvc",
// Subsets: [
// {
// Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
// Ports: [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
// },
// {
// Addresses: [{"ip": "10.10.3.3"}],
// Ports: [{"name": "a", "port": 93}, {"name": "b", "port": 76}]
// },
// ].
// Ref: #/components/schemas/io.k8s.api.core.v1.Endpoints
type IoK8sAPICoreV1Endpoints struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                   `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata"`
	// The set of all endpoints is the union of all subsets. Addresses are placed into subsets according
	// to the IPs they share. A single address with multiple ports, some of which are ready and some of
	// which are not (because they come from different containers) will result in the address being
	// displayed in different subsets for the different ports. No address will appear in both Addresses
	// and NotReadyAddresses in the same subset. Sets of addresses and ports that comprise a service.
	Subsets []IoK8sAPICoreV1EndpointSubset `json:"subsets"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPICoreV1Endpoints) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sAPICoreV1Endpoints) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPICoreV1Endpoints) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetSubsets returns the value of Subsets.
func (s *IoK8sAPICoreV1Endpoints) GetSubsets() []IoK8sAPICoreV1EndpointSubset {
	return s.Subsets
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPICoreV1Endpoints) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPICoreV1Endpoints) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPICoreV1Endpoints) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetSubsets sets the value of Subsets.
func (s *IoK8sAPICoreV1Endpoints) SetSubsets(val []IoK8sAPICoreV1EndpointSubset) {
	s.Subsets = val
}

func (*IoK8sAPICoreV1Endpoints) readCoreV1NamespacedEndpointsRes() {}

// EndpointsList is a list of endpoints.
// Ref: #/components/schemas/io.k8s.api.core.v1.EndpointsList
type IoK8sAPICoreV1EndpointsList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// List of endpoints.
	Items []IoK8sAPICoreV1Endpoints `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPICoreV1EndpointsList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPICoreV1EndpointsList) GetItems() []IoK8sAPICoreV1Endpoints {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPICoreV1EndpointsList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPICoreV1EndpointsList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPICoreV1EndpointsList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPICoreV1EndpointsList) SetItems(val []IoK8sAPICoreV1Endpoints) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPICoreV1EndpointsList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPICoreV1EndpointsList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPICoreV1EndpointsList) listCoreV1EndpointsForAllNamespacesRes() {}
func (*IoK8sAPICoreV1EndpointsList) listCoreV1NamespacedEndpointsRes()       {}

// EnvFromSource represents the source of a set of ConfigMaps.
// Ref: #/components/schemas/io.k8s.api.core.v1.EnvFromSource
type IoK8sAPICoreV1EnvFromSource struct {
	ConfigMapRef OptIoK8sAPICoreV1ConfigMapEnvSource `json:"configMapRef"`
	// An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
	Prefix    OptString                        `json:"prefix"`
	SecretRef OptIoK8sAPICoreV1SecretEnvSource `json:"secretRef"`
}

// GetConfigMapRef returns the value of ConfigMapRef.
func (s *IoK8sAPICoreV1EnvFromSource) GetConfigMapRef() OptIoK8sAPICoreV1ConfigMapEnvSource {
	return s.ConfigMapRef
}

// GetPrefix returns the value of Prefix.
func (s *IoK8sAPICoreV1EnvFromSource) GetPrefix() OptString {
	return s.Prefix
}

// GetSecretRef returns the value of SecretRef.
func (s *IoK8sAPICoreV1EnvFromSource) GetSecretRef() OptIoK8sAPICoreV1SecretEnvSource {
	return s.SecretRef
}

// SetConfigMapRef sets the value of ConfigMapRef.
func (s *IoK8sAPICoreV1EnvFromSource) SetConfigMapRef(val OptIoK8sAPICoreV1ConfigMapEnvSource) {
	s.ConfigMapRef = val
}

// SetPrefix sets the value of Prefix.
func (s *IoK8sAPICoreV1EnvFromSource) SetPrefix(val OptString) {
	s.Prefix = val
}

// SetSecretRef sets the value of SecretRef.
func (s *IoK8sAPICoreV1EnvFromSource) SetSecretRef(val OptIoK8sAPICoreV1SecretEnvSource) {
	s.SecretRef = val
}

// EnvVar represents an environment variable present in a Container.
// Ref: #/components/schemas/io.k8s.api.core.v1.EnvVar
type IoK8sAPICoreV1EnvVar struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `json:"name"`
	// Variable references $(VAR_NAME) are expanded using the previously defined environment variables in
	// the container and any service environment variables. If a variable cannot be resolved, the
	// reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows
	// for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal
	// "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable
	// exists or not. Defaults to "".
	Value     OptString                     `json:"value"`
	ValueFrom OptIoK8sAPICoreV1EnvVarSource `json:"valueFrom"`
}

// GetName returns the value of Name.
func (s *IoK8sAPICoreV1EnvVar) GetName() string {
	return s.Name
}

// GetValue returns the value of Value.
func (s *IoK8sAPICoreV1EnvVar) GetValue() OptString {
	return s.Value
}

// GetValueFrom returns the value of ValueFrom.
func (s *IoK8sAPICoreV1EnvVar) GetValueFrom() OptIoK8sAPICoreV1EnvVarSource {
	return s.ValueFrom
}

// SetName sets the value of Name.
func (s *IoK8sAPICoreV1EnvVar) SetName(val string) {
	s.Name = val
}

// SetValue sets the value of Value.
func (s *IoK8sAPICoreV1EnvVar) SetValue(val OptString) {
	s.Value = val
}

// SetValueFrom sets the value of ValueFrom.
func (s *IoK8sAPICoreV1EnvVar) SetValueFrom(val OptIoK8sAPICoreV1EnvVarSource) {
	s.ValueFrom = val
}

// EnvVarSource represents a source for the value of an EnvVar.
// Ref: #/components/schemas/io.k8s.api.core.v1.EnvVarSource
type IoK8sAPICoreV1EnvVarSource struct {
	ConfigMapKeyRef  OptIoK8sAPICoreV1ConfigMapKeySelector  `json:"configMapKeyRef"`
	FieldRef         OptIoK8sAPICoreV1ObjectFieldSelector   `json:"fieldRef"`
	ResourceFieldRef OptIoK8sAPICoreV1ResourceFieldSelector `json:"resourceFieldRef"`
	SecretKeyRef     OptIoK8sAPICoreV1SecretKeySelector     `json:"secretKeyRef"`
}

// GetConfigMapKeyRef returns the value of ConfigMapKeyRef.
func (s *IoK8sAPICoreV1EnvVarSource) GetConfigMapKeyRef() OptIoK8sAPICoreV1ConfigMapKeySelector {
	return s.ConfigMapKeyRef
}

// GetFieldRef returns the value of FieldRef.
func (s *IoK8sAPICoreV1EnvVarSource) GetFieldRef() OptIoK8sAPICoreV1ObjectFieldSelector {
	return s.FieldRef
}

// GetResourceFieldRef returns the value of ResourceFieldRef.
func (s *IoK8sAPICoreV1EnvVarSource) GetResourceFieldRef() OptIoK8sAPICoreV1ResourceFieldSelector {
	return s.ResourceFieldRef
}

// GetSecretKeyRef returns the value of SecretKeyRef.
func (s *IoK8sAPICoreV1EnvVarSource) GetSecretKeyRef() OptIoK8sAPICoreV1SecretKeySelector {
	return s.SecretKeyRef
}

// SetConfigMapKeyRef sets the value of ConfigMapKeyRef.
func (s *IoK8sAPICoreV1EnvVarSource) SetConfigMapKeyRef(val OptIoK8sAPICoreV1ConfigMapKeySelector) {
	s.ConfigMapKeyRef = val
}

// SetFieldRef sets the value of FieldRef.
func (s *IoK8sAPICoreV1EnvVarSource) SetFieldRef(val OptIoK8sAPICoreV1ObjectFieldSelector) {
	s.FieldRef = val
}

// SetResourceFieldRef sets the value of ResourceFieldRef.
func (s *IoK8sAPICoreV1EnvVarSource) SetResourceFieldRef(val OptIoK8sAPICoreV1ResourceFieldSelector) {
	s.ResourceFieldRef = val
}

// SetSecretKeyRef sets the value of SecretKeyRef.
func (s *IoK8sAPICoreV1EnvVarSource) SetSecretKeyRef(val OptIoK8sAPICoreV1SecretKeySelector) {
	s.SecretKeyRef = val
}

// An EphemeralContainer is a container that may be added temporarily to an existing pod for
// user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling
// guarantees, and they will not be restarted when they exit or when a pod is removed or restarted.
// If an ephemeral container causes a pod to exceed its resource allocation, the pod may be evicted.
// Ephemeral containers may not be added by directly updating the pod spec. They must be added via
// the pod's ephemeralcontainers subresource, and they will appear in the pod spec once added. This
// is an alpha feature enabled by the EphemeralContainers feature flag.
// Ref: #/components/schemas/io.k8s.api.core.v1.EphemeralContainer
type IoK8sAPICoreV1EphemeralContainer struct {
	// Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable
	// references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be
	// resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $,
	//  which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string
	// literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the
	// variable exists or not. Cannot be updated. More info: https://kubernetes.
	// io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell.
	Args []string `json:"args"`
	// Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is
	// not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a
	// variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are
	// reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
	// produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of
	// whether the variable exists or not. Cannot be updated. More info: https://kubernetes.
	// io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell.
	Command []string `json:"command"`
	// List of environment variables to set in the container. Cannot be updated.
	Env []IoK8sAPICoreV1EnvVar `json:"env"`
	// List of sources to populate environment variables in the container. The keys defined within a
	// source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is
	// starting. When a key exists in multiple sources, the value associated with the last source will
	// take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be
	// updated.
	EnvFrom []IoK8sAPICoreV1EnvFromSource `json:"envFrom"`
	// Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images.
	Image OptString `json:"image"`
	// Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is
	// specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.
	// io/docs/concepts/containers/images#updating-images.
	ImagePullPolicy OptString                  `json:"imagePullPolicy"`
	Lifecycle       OptIoK8sAPICoreV1Lifecycle `json:"lifecycle"`
	LivenessProbe   OptIoK8sAPICoreV1Probe     `json:"livenessProbe"`
	// Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all
	// containers, init containers and ephemeral containers.
	Name string `json:"name"`
	// Ports are not allowed for ephemeral containers.
	Ports           []IoK8sAPICoreV1ContainerPort         `json:"ports"`
	ReadinessProbe  OptIoK8sAPICoreV1Probe                `json:"readinessProbe"`
	Resources       OptIoK8sAPICoreV1ResourceRequirements `json:"resources"`
	SecurityContext OptIoK8sAPICoreV1SecurityContext      `json:"securityContext"`
	StartupProbe    OptIoK8sAPICoreV1Probe                `json:"startupProbe"`
	// Whether this container should allocate a buffer for stdin in the container runtime. If this is not
	// set, reads from stdin in the container will always result in EOF. Default is false.
	Stdin OptBool `json:"stdin"`
	// Whether the container runtime should close the stdin channel after it has been opened by a single
	// attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If
	// stdinOnce is set to true, stdin is opened on container start, is empty until the first client
	// attaches to stdin, and then remains open and accepts data until the client disconnects, at which
	// time stdin is closed and remains closed until the container is restarted. If this flag is false, a
	// container processes that reads from stdin will never receive an EOF. Default is false.
	StdinOnce OptBool `json:"stdinOnce"`
	// If set, the name of the container from PodSpec that this ephemeral container targets. The
	// ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set
	// then the ephemeral container is run in whatever namespaces are shared for the pod. Note that the
	// container runtime must support this feature.
	TargetContainerName OptString `json:"targetContainerName"`
	// Optional: Path at which the file to which the container's termination message will be written is
	// mounted into the container's filesystem. Message written is intended to be brief final status,
	// such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes.
	// The total message length across all containers will be limited to 12kb. Defaults to
	// /dev/termination-log. Cannot be updated.
	TerminationMessagePath OptString `json:"terminationMessagePath"`
	// Indicate how the termination message should be populated. File will use the contents of
	// terminationMessagePath to populate the container status message on both success and failure.
	// FallbackToLogsOnError will use the last chunk of container log output if the termination message
	// file is empty and the container exited with an error. The log output is limited to 2048 bytes or
	// 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
	TerminationMessagePolicy OptString `json:"terminationMessagePolicy"`
	// Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default
	// is false.
	Tty OptBool `json:"tty"`
	// VolumeDevices is the list of block devices to be used by the container.
	VolumeDevices []IoK8sAPICoreV1VolumeDevice `json:"volumeDevices"`
	// Pod volumes to mount into the container's filesystem. Cannot be updated.
	VolumeMounts []IoK8sAPICoreV1VolumeMount `json:"volumeMounts"`
	// Container's working directory. If not specified, the container runtime's default will be used,
	// which might be configured in the container image. Cannot be updated.
	WorkingDir OptString `json:"workingDir"`
}

// GetArgs returns the value of Args.
func (s *IoK8sAPICoreV1EphemeralContainer) GetArgs() []string {
	return s.Args
}

// GetCommand returns the value of Command.
func (s *IoK8sAPICoreV1EphemeralContainer) GetCommand() []string {
	return s.Command
}

// GetEnv returns the value of Env.
func (s *IoK8sAPICoreV1EphemeralContainer) GetEnv() []IoK8sAPICoreV1EnvVar {
	return s.Env
}

// GetEnvFrom returns the value of EnvFrom.
func (s *IoK8sAPICoreV1EphemeralContainer) GetEnvFrom() []IoK8sAPICoreV1EnvFromSource {
	return s.EnvFrom
}

// GetImage returns the value of Image.
func (s *IoK8sAPICoreV1EphemeralContainer) GetImage() OptString {
	return s.Image
}

// GetImagePullPolicy returns the value of ImagePullPolicy.
func (s *IoK8sAPICoreV1EphemeralContainer) GetImagePullPolicy() OptString {
	return s.ImagePullPolicy
}

// GetLifecycle returns the value of Lifecycle.
func (s *IoK8sAPICoreV1EphemeralContainer) GetLifecycle() OptIoK8sAPICoreV1Lifecycle {
	return s.Lifecycle
}

// GetLivenessProbe returns the value of LivenessProbe.
func (s *IoK8sAPICoreV1EphemeralContainer) GetLivenessProbe() OptIoK8sAPICoreV1Probe {
	return s.LivenessProbe
}

// GetName returns the value of Name.
func (s *IoK8sAPICoreV1EphemeralContainer) GetName() string {
	return s.Name
}

// GetPorts returns the value of Ports.
func (s *IoK8sAPICoreV1EphemeralContainer) GetPorts() []IoK8sAPICoreV1ContainerPort {
	return s.Ports
}

// GetReadinessProbe returns the value of ReadinessProbe.
func (s *IoK8sAPICoreV1EphemeralContainer) GetReadinessProbe() OptIoK8sAPICoreV1Probe {
	return s.ReadinessProbe
}

// GetResources returns the value of Resources.
func (s *IoK8sAPICoreV1EphemeralContainer) GetResources() OptIoK8sAPICoreV1ResourceRequirements {
	return s.Resources
}

// GetSecurityContext returns the value of SecurityContext.
func (s *IoK8sAPICoreV1EphemeralContainer) GetSecurityContext() OptIoK8sAPICoreV1SecurityContext {
	return s.SecurityContext
}

// GetStartupProbe returns the value of StartupProbe.
func (s *IoK8sAPICoreV1EphemeralContainer) GetStartupProbe() OptIoK8sAPICoreV1Probe {
	return s.StartupProbe
}

// GetStdin returns the value of Stdin.
func (s *IoK8sAPICoreV1EphemeralContainer) GetStdin() OptBool {
	return s.Stdin
}

// GetStdinOnce returns the value of StdinOnce.
func (s *IoK8sAPICoreV1EphemeralContainer) GetStdinOnce() OptBool {
	return s.StdinOnce
}

// GetTargetContainerName returns the value of TargetContainerName.
func (s *IoK8sAPICoreV1EphemeralContainer) GetTargetContainerName() OptString {
	return s.TargetContainerName
}

// GetTerminationMessagePath returns the value of TerminationMessagePath.
func (s *IoK8sAPICoreV1EphemeralContainer) GetTerminationMessagePath() OptString {
	return s.TerminationMessagePath
}

// GetTerminationMessagePolicy returns the value of TerminationMessagePolicy.
func (s *IoK8sAPICoreV1EphemeralContainer) GetTerminationMessagePolicy() OptString {
	return s.TerminationMessagePolicy
}

// GetTty returns the value of Tty.
func (s *IoK8sAPICoreV1EphemeralContainer) GetTty() OptBool {
	return s.Tty
}

// GetVolumeDevices returns the value of VolumeDevices.
func (s *IoK8sAPICoreV1EphemeralContainer) GetVolumeDevices() []IoK8sAPICoreV1VolumeDevice {
	return s.VolumeDevices
}

// GetVolumeMounts returns the value of VolumeMounts.
func (s *IoK8sAPICoreV1EphemeralContainer) GetVolumeMounts() []IoK8sAPICoreV1VolumeMount {
	return s.VolumeMounts
}

// GetWorkingDir returns the value of WorkingDir.
func (s *IoK8sAPICoreV1EphemeralContainer) GetWorkingDir() OptString {
	return s.WorkingDir
}

// SetArgs sets the value of Args.
func (s *IoK8sAPICoreV1EphemeralContainer) SetArgs(val []string) {
	s.Args = val
}

// SetCommand sets the value of Command.
func (s *IoK8sAPICoreV1EphemeralContainer) SetCommand(val []string) {
	s.Command = val
}

// SetEnv sets the value of Env.
func (s *IoK8sAPICoreV1EphemeralContainer) SetEnv(val []IoK8sAPICoreV1EnvVar) {
	s.Env = val
}

// SetEnvFrom sets the value of EnvFrom.
func (s *IoK8sAPICoreV1EphemeralContainer) SetEnvFrom(val []IoK8sAPICoreV1EnvFromSource) {
	s.EnvFrom = val
}

// SetImage sets the value of Image.
func (s *IoK8sAPICoreV1EphemeralContainer) SetImage(val OptString) {
	s.Image = val
}

// SetImagePullPolicy sets the value of ImagePullPolicy.
func (s *IoK8sAPICoreV1EphemeralContainer) SetImagePullPolicy(val OptString) {
	s.ImagePullPolicy = val
}

// SetLifecycle sets the value of Lifecycle.
func (s *IoK8sAPICoreV1EphemeralContainer) SetLifecycle(val OptIoK8sAPICoreV1Lifecycle) {
	s.Lifecycle = val
}

// SetLivenessProbe sets the value of LivenessProbe.
func (s *IoK8sAPICoreV1EphemeralContainer) SetLivenessProbe(val OptIoK8sAPICoreV1Probe) {
	s.LivenessProbe = val
}

// SetName sets the value of Name.
func (s *IoK8sAPICoreV1EphemeralContainer) SetName(val string) {
	s.Name = val
}

// SetPorts sets the value of Ports.
func (s *IoK8sAPICoreV1EphemeralContainer) SetPorts(val []IoK8sAPICoreV1ContainerPort) {
	s.Ports = val
}

// SetReadinessProbe sets the value of ReadinessProbe.
func (s *IoK8sAPICoreV1EphemeralContainer) SetReadinessProbe(val OptIoK8sAPICoreV1Probe) {
	s.ReadinessProbe = val
}

// SetResources sets the value of Resources.
func (s *IoK8sAPICoreV1EphemeralContainer) SetResources(val OptIoK8sAPICoreV1ResourceRequirements) {
	s.Resources = val
}

// SetSecurityContext sets the value of SecurityContext.
func (s *IoK8sAPICoreV1EphemeralContainer) SetSecurityContext(val OptIoK8sAPICoreV1SecurityContext) {
	s.SecurityContext = val
}

// SetStartupProbe sets the value of StartupProbe.
func (s *IoK8sAPICoreV1EphemeralContainer) SetStartupProbe(val OptIoK8sAPICoreV1Probe) {
	s.StartupProbe = val
}

// SetStdin sets the value of Stdin.
func (s *IoK8sAPICoreV1EphemeralContainer) SetStdin(val OptBool) {
	s.Stdin = val
}

// SetStdinOnce sets the value of StdinOnce.
func (s *IoK8sAPICoreV1EphemeralContainer) SetStdinOnce(val OptBool) {
	s.StdinOnce = val
}

// SetTargetContainerName sets the value of TargetContainerName.
func (s *IoK8sAPICoreV1EphemeralContainer) SetTargetContainerName(val OptString) {
	s.TargetContainerName = val
}

// SetTerminationMessagePath sets the value of TerminationMessagePath.
func (s *IoK8sAPICoreV1EphemeralContainer) SetTerminationMessagePath(val OptString) {
	s.TerminationMessagePath = val
}

// SetTerminationMessagePolicy sets the value of TerminationMessagePolicy.
func (s *IoK8sAPICoreV1EphemeralContainer) SetTerminationMessagePolicy(val OptString) {
	s.TerminationMessagePolicy = val
}

// SetTty sets the value of Tty.
func (s *IoK8sAPICoreV1EphemeralContainer) SetTty(val OptBool) {
	s.Tty = val
}

// SetVolumeDevices sets the value of VolumeDevices.
func (s *IoK8sAPICoreV1EphemeralContainer) SetVolumeDevices(val []IoK8sAPICoreV1VolumeDevice) {
	s.VolumeDevices = val
}

// SetVolumeMounts sets the value of VolumeMounts.
func (s *IoK8sAPICoreV1EphemeralContainer) SetVolumeMounts(val []IoK8sAPICoreV1VolumeMount) {
	s.VolumeMounts = val
}

// SetWorkingDir sets the value of WorkingDir.
func (s *IoK8sAPICoreV1EphemeralContainer) SetWorkingDir(val OptString) {
	s.WorkingDir = val
}

// Represents an ephemeral volume that is handled by a normal storage driver.
// Ref: #/components/schemas/io.k8s.api.core.v1.EphemeralVolumeSource
type IoK8sAPICoreV1EphemeralVolumeSource struct {
	VolumeClaimTemplate OptIoK8sAPICoreV1PersistentVolumeClaimTemplate `json:"volumeClaimTemplate"`
}

// GetVolumeClaimTemplate returns the value of VolumeClaimTemplate.
func (s *IoK8sAPICoreV1EphemeralVolumeSource) GetVolumeClaimTemplate() OptIoK8sAPICoreV1PersistentVolumeClaimTemplate {
	return s.VolumeClaimTemplate
}

// SetVolumeClaimTemplate sets the value of VolumeClaimTemplate.
func (s *IoK8sAPICoreV1EphemeralVolumeSource) SetVolumeClaimTemplate(val OptIoK8sAPICoreV1PersistentVolumeClaimTemplate) {
	s.VolumeClaimTemplate = val
}

// Event is a report of an event somewhere in the cluster.  Events have a limited retention time and
// triggers and messages may evolve with time.  Event consumers should not rely on the timing of an
// event with a given Reason reflecting a consistent underlying trigger, or the continued existence
// of events with that Reason.  Events should be treated as informative, best-effort, supplemental
// data.
// Ref: #/components/schemas/io.k8s.api.core.v1.Event
type IoK8sAPICoreV1Event struct {
	// What action was taken/failed regarding to the Regarding object.
	Action OptString `json:"action"`
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// The number of times this event has occurred.
	Count          OptInt32                                   `json:"count"`
	EventTime      OptIoK8sApimachineryPkgApisMetaV1MicroTime `json:"eventTime"`
	FirstTimestamp OptIoK8sApimachineryPkgApisMetaV1Time      `json:"firstTimestamp"`
	InvolvedObject IoK8sAPICoreV1ObjectReference              `json:"involvedObject"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind          OptString                             `json:"kind"`
	LastTimestamp OptIoK8sApimachineryPkgApisMetaV1Time `json:"lastTimestamp"`
	// A human-readable description of the status of this operation.
	Message  OptString                                `json:"message"`
	Metadata IoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata"`
	// This should be a short, machine understandable string that gives the reason for the transition
	// into the object's current status.
	Reason  OptString                        `json:"reason"`
	Related OptIoK8sAPICoreV1ObjectReference `json:"related"`
	// Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
	ReportingComponent OptString `json:"reportingComponent"`
	// ID of the controller instance, e.g. `kubelet-xyzf`.
	ReportingInstance OptString                    `json:"reportingInstance"`
	Series            OptIoK8sAPICoreV1EventSeries `json:"series"`
	Source            OptIoK8sAPICoreV1EventSource `json:"source"`
	// Type of this event (Normal, Warning), new types could be added in the future.
	Type OptString `json:"type"`
}

// GetAction returns the value of Action.
func (s *IoK8sAPICoreV1Event) GetAction() OptString {
	return s.Action
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPICoreV1Event) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetCount returns the value of Count.
func (s *IoK8sAPICoreV1Event) GetCount() OptInt32 {
	return s.Count
}

// GetEventTime returns the value of EventTime.
func (s *IoK8sAPICoreV1Event) GetEventTime() OptIoK8sApimachineryPkgApisMetaV1MicroTime {
	return s.EventTime
}

// GetFirstTimestamp returns the value of FirstTimestamp.
func (s *IoK8sAPICoreV1Event) GetFirstTimestamp() OptIoK8sApimachineryPkgApisMetaV1Time {
	return s.FirstTimestamp
}

// GetInvolvedObject returns the value of InvolvedObject.
func (s *IoK8sAPICoreV1Event) GetInvolvedObject() IoK8sAPICoreV1ObjectReference {
	return s.InvolvedObject
}

// GetKind returns the value of Kind.
func (s *IoK8sAPICoreV1Event) GetKind() OptString {
	return s.Kind
}

// GetLastTimestamp returns the value of LastTimestamp.
func (s *IoK8sAPICoreV1Event) GetLastTimestamp() OptIoK8sApimachineryPkgApisMetaV1Time {
	return s.LastTimestamp
}

// GetMessage returns the value of Message.
func (s *IoK8sAPICoreV1Event) GetMessage() OptString {
	return s.Message
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPICoreV1Event) GetMetadata() IoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetReason returns the value of Reason.
func (s *IoK8sAPICoreV1Event) GetReason() OptString {
	return s.Reason
}

// GetRelated returns the value of Related.
func (s *IoK8sAPICoreV1Event) GetRelated() OptIoK8sAPICoreV1ObjectReference {
	return s.Related
}

// GetReportingComponent returns the value of ReportingComponent.
func (s *IoK8sAPICoreV1Event) GetReportingComponent() OptString {
	return s.ReportingComponent
}

// GetReportingInstance returns the value of ReportingInstance.
func (s *IoK8sAPICoreV1Event) GetReportingInstance() OptString {
	return s.ReportingInstance
}

// GetSeries returns the value of Series.
func (s *IoK8sAPICoreV1Event) GetSeries() OptIoK8sAPICoreV1EventSeries {
	return s.Series
}

// GetSource returns the value of Source.
func (s *IoK8sAPICoreV1Event) GetSource() OptIoK8sAPICoreV1EventSource {
	return s.Source
}

// GetType returns the value of Type.
func (s *IoK8sAPICoreV1Event) GetType() OptString {
	return s.Type
}

// SetAction sets the value of Action.
func (s *IoK8sAPICoreV1Event) SetAction(val OptString) {
	s.Action = val
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPICoreV1Event) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetCount sets the value of Count.
func (s *IoK8sAPICoreV1Event) SetCount(val OptInt32) {
	s.Count = val
}

// SetEventTime sets the value of EventTime.
func (s *IoK8sAPICoreV1Event) SetEventTime(val OptIoK8sApimachineryPkgApisMetaV1MicroTime) {
	s.EventTime = val
}

// SetFirstTimestamp sets the value of FirstTimestamp.
func (s *IoK8sAPICoreV1Event) SetFirstTimestamp(val OptIoK8sApimachineryPkgApisMetaV1Time) {
	s.FirstTimestamp = val
}

// SetInvolvedObject sets the value of InvolvedObject.
func (s *IoK8sAPICoreV1Event) SetInvolvedObject(val IoK8sAPICoreV1ObjectReference) {
	s.InvolvedObject = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPICoreV1Event) SetKind(val OptString) {
	s.Kind = val
}

// SetLastTimestamp sets the value of LastTimestamp.
func (s *IoK8sAPICoreV1Event) SetLastTimestamp(val OptIoK8sApimachineryPkgApisMetaV1Time) {
	s.LastTimestamp = val
}

// SetMessage sets the value of Message.
func (s *IoK8sAPICoreV1Event) SetMessage(val OptString) {
	s.Message = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPICoreV1Event) SetMetadata(val IoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetReason sets the value of Reason.
func (s *IoK8sAPICoreV1Event) SetReason(val OptString) {
	s.Reason = val
}

// SetRelated sets the value of Related.
func (s *IoK8sAPICoreV1Event) SetRelated(val OptIoK8sAPICoreV1ObjectReference) {
	s.Related = val
}

// SetReportingComponent sets the value of ReportingComponent.
func (s *IoK8sAPICoreV1Event) SetReportingComponent(val OptString) {
	s.ReportingComponent = val
}

// SetReportingInstance sets the value of ReportingInstance.
func (s *IoK8sAPICoreV1Event) SetReportingInstance(val OptString) {
	s.ReportingInstance = val
}

// SetSeries sets the value of Series.
func (s *IoK8sAPICoreV1Event) SetSeries(val OptIoK8sAPICoreV1EventSeries) {
	s.Series = val
}

// SetSource sets the value of Source.
func (s *IoK8sAPICoreV1Event) SetSource(val OptIoK8sAPICoreV1EventSource) {
	s.Source = val
}

// SetType sets the value of Type.
func (s *IoK8sAPICoreV1Event) SetType(val OptString) {
	s.Type = val
}

func (*IoK8sAPICoreV1Event) readCoreV1NamespacedEventRes() {}

// EventList is a list of events.
// Ref: #/components/schemas/io.k8s.api.core.v1.EventList
type IoK8sAPICoreV1EventList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// List of events.
	Items []IoK8sAPICoreV1Event `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPICoreV1EventList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPICoreV1EventList) GetItems() []IoK8sAPICoreV1Event {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPICoreV1EventList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPICoreV1EventList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPICoreV1EventList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPICoreV1EventList) SetItems(val []IoK8sAPICoreV1Event) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPICoreV1EventList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPICoreV1EventList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPICoreV1EventList) listCoreV1EventForAllNamespacesRes() {}
func (*IoK8sAPICoreV1EventList) listCoreV1NamespacedEventRes()       {}

// EventSeries contain information on series of events, i.e. thing that was/is happening continuously
// for some time.
// Ref: #/components/schemas/io.k8s.api.core.v1.EventSeries
type IoK8sAPICoreV1EventSeries struct {
	// Number of occurrences in this series up to the last heartbeat time.
	Count            OptInt32                                   `json:"count"`
	LastObservedTime OptIoK8sApimachineryPkgApisMetaV1MicroTime `json:"lastObservedTime"`
}

// GetCount returns the value of Count.
func (s *IoK8sAPICoreV1EventSeries) GetCount() OptInt32 {
	return s.Count
}

// GetLastObservedTime returns the value of LastObservedTime.
func (s *IoK8sAPICoreV1EventSeries) GetLastObservedTime() OptIoK8sApimachineryPkgApisMetaV1MicroTime {
	return s.LastObservedTime
}

// SetCount sets the value of Count.
func (s *IoK8sAPICoreV1EventSeries) SetCount(val OptInt32) {
	s.Count = val
}

// SetLastObservedTime sets the value of LastObservedTime.
func (s *IoK8sAPICoreV1EventSeries) SetLastObservedTime(val OptIoK8sApimachineryPkgApisMetaV1MicroTime) {
	s.LastObservedTime = val
}

// EventSource contains information for an event.
// Ref: #/components/schemas/io.k8s.api.core.v1.EventSource
type IoK8sAPICoreV1EventSource struct {
	// Component from which the event is generated.
	Component OptString `json:"component"`
	// Node name on which the event is generated.
	Host OptString `json:"host"`
}

// GetComponent returns the value of Component.
func (s *IoK8sAPICoreV1EventSource) GetComponent() OptString {
	return s.Component
}

// GetHost returns the value of Host.
func (s *IoK8sAPICoreV1EventSource) GetHost() OptString {
	return s.Host
}

// SetComponent sets the value of Component.
func (s *IoK8sAPICoreV1EventSource) SetComponent(val OptString) {
	s.Component = val
}

// SetHost sets the value of Host.
func (s *IoK8sAPICoreV1EventSource) SetHost(val OptString) {
	s.Host = val
}

// ExecAction describes a "run in container" action.
// Ref: #/components/schemas/io.k8s.api.core.v1.ExecAction
type IoK8sAPICoreV1ExecAction struct {
	// Command is the command line to execute inside the container, the working directory for the command
	//  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a
	// shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to
	// explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is
	// unhealthy.
	Command []string `json:"command"`
}

// GetCommand returns the value of Command.
func (s *IoK8sAPICoreV1ExecAction) GetCommand() []string {
	return s.Command
}

// SetCommand sets the value of Command.
func (s *IoK8sAPICoreV1ExecAction) SetCommand(val []string) {
	s.Command = val
}

// Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once.
// Fibre Channel volumes support ownership management and SELinux relabeling.
// Ref: #/components/schemas/io.k8s.api.core.v1.FCVolumeSource
type IoK8sAPICoreV1FCVolumeSource struct {
	// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex.
	// "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType OptString `json:"fsType"`
	// Optional: FC target lun number.
	Lun OptInt32 `json:"lun"`
	// Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in
	// VolumeMounts.
	ReadOnly OptBool `json:"readOnly"`
	// Optional: FC target worldwide names (WWNs).
	TargetWWNs []string `json:"targetWWNs"`
	// Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and
	// lun must be set, but not both simultaneously.
	Wwids []string `json:"wwids"`
}

// GetFsType returns the value of FsType.
func (s *IoK8sAPICoreV1FCVolumeSource) GetFsType() OptString {
	return s.FsType
}

// GetLun returns the value of Lun.
func (s *IoK8sAPICoreV1FCVolumeSource) GetLun() OptInt32 {
	return s.Lun
}

// GetReadOnly returns the value of ReadOnly.
func (s *IoK8sAPICoreV1FCVolumeSource) GetReadOnly() OptBool {
	return s.ReadOnly
}

// GetTargetWWNs returns the value of TargetWWNs.
func (s *IoK8sAPICoreV1FCVolumeSource) GetTargetWWNs() []string {
	return s.TargetWWNs
}

// GetWwids returns the value of Wwids.
func (s *IoK8sAPICoreV1FCVolumeSource) GetWwids() []string {
	return s.Wwids
}

// SetFsType sets the value of FsType.
func (s *IoK8sAPICoreV1FCVolumeSource) SetFsType(val OptString) {
	s.FsType = val
}

// SetLun sets the value of Lun.
func (s *IoK8sAPICoreV1FCVolumeSource) SetLun(val OptInt32) {
	s.Lun = val
}

// SetReadOnly sets the value of ReadOnly.
func (s *IoK8sAPICoreV1FCVolumeSource) SetReadOnly(val OptBool) {
	s.ReadOnly = val
}

// SetTargetWWNs sets the value of TargetWWNs.
func (s *IoK8sAPICoreV1FCVolumeSource) SetTargetWWNs(val []string) {
	s.TargetWWNs = val
}

// SetWwids sets the value of Wwids.
func (s *IoK8sAPICoreV1FCVolumeSource) SetWwids(val []string) {
	s.Wwids = val
}

// FlexPersistentVolumeSource represents a generic persistent volume resource that is
// provisioned/attached using an exec based plugin.
// Ref: #/components/schemas/io.k8s.api.core.v1.FlexPersistentVolumeSource
type IoK8sAPICoreV1FlexPersistentVolumeSource struct {
	// Driver is the name of the driver to use for this volume.
	Driver string `json:"driver"`
	// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex.
	// "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
	FsType OptString `json:"fsType"`
	// Optional: Extra command options if any.
	Options OptIoK8sAPICoreV1FlexPersistentVolumeSourceOptions `json:"options"`
	// Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in
	// VolumeMounts.
	ReadOnly  OptBool                          `json:"readOnly"`
	SecretRef OptIoK8sAPICoreV1SecretReference `json:"secretRef"`
}

// GetDriver returns the value of Driver.
func (s *IoK8sAPICoreV1FlexPersistentVolumeSource) GetDriver() string {
	return s.Driver
}

// GetFsType returns the value of FsType.
func (s *IoK8sAPICoreV1FlexPersistentVolumeSource) GetFsType() OptString {
	return s.FsType
}

// GetOptions returns the value of Options.
func (s *IoK8sAPICoreV1FlexPersistentVolumeSource) GetOptions() OptIoK8sAPICoreV1FlexPersistentVolumeSourceOptions {
	return s.Options
}

// GetReadOnly returns the value of ReadOnly.
func (s *IoK8sAPICoreV1FlexPersistentVolumeSource) GetReadOnly() OptBool {
	return s.ReadOnly
}

// GetSecretRef returns the value of SecretRef.
func (s *IoK8sAPICoreV1FlexPersistentVolumeSource) GetSecretRef() OptIoK8sAPICoreV1SecretReference {
	return s.SecretRef
}

// SetDriver sets the value of Driver.
func (s *IoK8sAPICoreV1FlexPersistentVolumeSource) SetDriver(val string) {
	s.Driver = val
}

// SetFsType sets the value of FsType.
func (s *IoK8sAPICoreV1FlexPersistentVolumeSource) SetFsType(val OptString) {
	s.FsType = val
}

// SetOptions sets the value of Options.
func (s *IoK8sAPICoreV1FlexPersistentVolumeSource) SetOptions(val OptIoK8sAPICoreV1FlexPersistentVolumeSourceOptions) {
	s.Options = val
}

// SetReadOnly sets the value of ReadOnly.
func (s *IoK8sAPICoreV1FlexPersistentVolumeSource) SetReadOnly(val OptBool) {
	s.ReadOnly = val
}

// SetSecretRef sets the value of SecretRef.
func (s *IoK8sAPICoreV1FlexPersistentVolumeSource) SetSecretRef(val OptIoK8sAPICoreV1SecretReference) {
	s.SecretRef = val
}

// Optional: Extra command options if any.
type IoK8sAPICoreV1FlexPersistentVolumeSourceOptions map[string]string

func (s *IoK8sAPICoreV1FlexPersistentVolumeSourceOptions) init() IoK8sAPICoreV1FlexPersistentVolumeSourceOptions {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// FlexVolume represents a generic volume resource that is provisioned/attached using an exec based
// plugin.
// Ref: #/components/schemas/io.k8s.api.core.v1.FlexVolumeSource
type IoK8sAPICoreV1FlexVolumeSource struct {
	// Driver is the name of the driver to use for this volume.
	Driver string `json:"driver"`
	// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex.
	// "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
	FsType OptString `json:"fsType"`
	// Optional: Extra command options if any.
	Options OptIoK8sAPICoreV1FlexVolumeSourceOptions `json:"options"`
	// Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in
	// VolumeMounts.
	ReadOnly  OptBool                               `json:"readOnly"`
	SecretRef OptIoK8sAPICoreV1LocalObjectReference `json:"secretRef"`
}

// GetDriver returns the value of Driver.
func (s *IoK8sAPICoreV1FlexVolumeSource) GetDriver() string {
	return s.Driver
}

// GetFsType returns the value of FsType.
func (s *IoK8sAPICoreV1FlexVolumeSource) GetFsType() OptString {
	return s.FsType
}

// GetOptions returns the value of Options.
func (s *IoK8sAPICoreV1FlexVolumeSource) GetOptions() OptIoK8sAPICoreV1FlexVolumeSourceOptions {
	return s.Options
}

// GetReadOnly returns the value of ReadOnly.
func (s *IoK8sAPICoreV1FlexVolumeSource) GetReadOnly() OptBool {
	return s.ReadOnly
}

// GetSecretRef returns the value of SecretRef.
func (s *IoK8sAPICoreV1FlexVolumeSource) GetSecretRef() OptIoK8sAPICoreV1LocalObjectReference {
	return s.SecretRef
}

// SetDriver sets the value of Driver.
func (s *IoK8sAPICoreV1FlexVolumeSource) SetDriver(val string) {
	s.Driver = val
}

// SetFsType sets the value of FsType.
func (s *IoK8sAPICoreV1FlexVolumeSource) SetFsType(val OptString) {
	s.FsType = val
}

// SetOptions sets the value of Options.
func (s *IoK8sAPICoreV1FlexVolumeSource) SetOptions(val OptIoK8sAPICoreV1FlexVolumeSourceOptions) {
	s.Options = val
}

// SetReadOnly sets the value of ReadOnly.
func (s *IoK8sAPICoreV1FlexVolumeSource) SetReadOnly(val OptBool) {
	s.ReadOnly = val
}

// SetSecretRef sets the value of SecretRef.
func (s *IoK8sAPICoreV1FlexVolumeSource) SetSecretRef(val OptIoK8sAPICoreV1LocalObjectReference) {
	s.SecretRef = val
}

// Optional: Extra command options if any.
type IoK8sAPICoreV1FlexVolumeSourceOptions map[string]string

func (s *IoK8sAPICoreV1FlexVolumeSourceOptions) init() IoK8sAPICoreV1FlexVolumeSourceOptions {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and
// datasetUUID should be set. Flocker volumes do not support ownership management or SELinux
// relabeling.
// Ref: #/components/schemas/io.k8s.api.core.v1.FlockerVolumeSource
type IoK8sAPICoreV1FlockerVolumeSource struct {
	// Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as
	// deprecated.
	DatasetName OptString `json:"datasetName"`
	// UUID of the dataset. This is unique identifier of a Flocker dataset.
	DatasetUUID OptString `json:"datasetUUID"`
}

// GetDatasetName returns the value of DatasetName.
func (s *IoK8sAPICoreV1FlockerVolumeSource) GetDatasetName() OptString {
	return s.DatasetName
}

// GetDatasetUUID returns the value of DatasetUUID.
func (s *IoK8sAPICoreV1FlockerVolumeSource) GetDatasetUUID() OptString {
	return s.DatasetUUID
}

// SetDatasetName sets the value of DatasetName.
func (s *IoK8sAPICoreV1FlockerVolumeSource) SetDatasetName(val OptString) {
	s.DatasetName = val
}

// SetDatasetUUID sets the value of DatasetUUID.
func (s *IoK8sAPICoreV1FlockerVolumeSource) SetDatasetUUID(val OptString) {
	s.DatasetUUID = val
}

// Represents a Persistent Disk resource in Google Compute Engine.
// A GCE PD must exist before mounting to a container. The disk must also be in the same GCE project
// and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times.
// GCE PDs support ownership management and SELinux relabeling.
// Ref: #/components/schemas/io.k8s.api.core.v1.GCEPersistentDiskVolumeSource
type IoK8sAPICoreV1GCEPersistentDiskVolumeSource struct {
	// Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is
	// supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be
	// "ext4" if unspecified. More info: https://kubernetes.
	// io/docs/concepts/storage/volumes#gcepersistentdisk.
	FsType OptString `json:"fsType"`
	// The partition in the volume that you want to mount. If omitted, the default is to mount by volume
	// name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume
	// partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.
	// io/docs/concepts/storage/volumes#gcepersistentdisk.
	Partition OptInt32 `json:"partition"`
	// Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info:
	// https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk.
	PdName string `json:"pdName"`
	// ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info:
	// https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk.
	ReadOnly OptBool `json:"readOnly"`
}

// GetFsType returns the value of FsType.
func (s *IoK8sAPICoreV1GCEPersistentDiskVolumeSource) GetFsType() OptString {
	return s.FsType
}

// GetPartition returns the value of Partition.
func (s *IoK8sAPICoreV1GCEPersistentDiskVolumeSource) GetPartition() OptInt32 {
	return s.Partition
}

// GetPdName returns the value of PdName.
func (s *IoK8sAPICoreV1GCEPersistentDiskVolumeSource) GetPdName() string {
	return s.PdName
}

// GetReadOnly returns the value of ReadOnly.
func (s *IoK8sAPICoreV1GCEPersistentDiskVolumeSource) GetReadOnly() OptBool {
	return s.ReadOnly
}

// SetFsType sets the value of FsType.
func (s *IoK8sAPICoreV1GCEPersistentDiskVolumeSource) SetFsType(val OptString) {
	s.FsType = val
}

// SetPartition sets the value of Partition.
func (s *IoK8sAPICoreV1GCEPersistentDiskVolumeSource) SetPartition(val OptInt32) {
	s.Partition = val
}

// SetPdName sets the value of PdName.
func (s *IoK8sAPICoreV1GCEPersistentDiskVolumeSource) SetPdName(val string) {
	s.PdName = val
}

// SetReadOnly sets the value of ReadOnly.
func (s *IoK8sAPICoreV1GCEPersistentDiskVolumeSource) SetReadOnly(val OptBool) {
	s.ReadOnly = val
}

// Represents a volume that is populated with the contents of a git repository. Git repo volumes do
// not support ownership management. Git repo volumes support SELinux relabeling.
// DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir
// into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's
// container.
// Ref: #/components/schemas/io.k8s.api.core.v1.GitRepoVolumeSource
type IoK8sAPICoreV1GitRepoVolumeSource struct {
	// Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume
	// directory will be the git repository.  Otherwise, if specified, the volume will contain the git
	// repository in the subdirectory with the given name.
	Directory OptString `json:"directory"`
	// Repository URL.
	Repository string `json:"repository"`
	// Commit hash for the specified revision.
	Revision OptString `json:"revision"`
}

// GetDirectory returns the value of Directory.
func (s *IoK8sAPICoreV1GitRepoVolumeSource) GetDirectory() OptString {
	return s.Directory
}

// GetRepository returns the value of Repository.
func (s *IoK8sAPICoreV1GitRepoVolumeSource) GetRepository() string {
	return s.Repository
}

// GetRevision returns the value of Revision.
func (s *IoK8sAPICoreV1GitRepoVolumeSource) GetRevision() OptString {
	return s.Revision
}

// SetDirectory sets the value of Directory.
func (s *IoK8sAPICoreV1GitRepoVolumeSource) SetDirectory(val OptString) {
	s.Directory = val
}

// SetRepository sets the value of Repository.
func (s *IoK8sAPICoreV1GitRepoVolumeSource) SetRepository(val string) {
	s.Repository = val
}

// SetRevision sets the value of Revision.
func (s *IoK8sAPICoreV1GitRepoVolumeSource) SetRevision(val OptString) {
	s.Revision = val
}

// Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support
// ownership management or SELinux relabeling.
// Ref: #/components/schemas/io.k8s.api.core.v1.GlusterfsPersistentVolumeSource
type IoK8sAPICoreV1GlusterfsPersistentVolumeSource struct {
	// EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.
	// k8s.io/volumes/glusterfs/README.md#create-a-pod.
	Endpoints string `json:"endpoints"`
	// EndpointsNamespace is the namespace that contains Glusterfs endpoint. If this field is empty, the
	// EndpointNamespace defaults to the same namespace as the bound PVC. More info: https://examples.k8s.
	// io/volumes/glusterfs/README.md#create-a-pod.
	EndpointsNamespace OptString `json:"endpointsNamespace"`
	// Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.
	// md#create-a-pod.
	Path string `json:"path"`
	// ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults
	// to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod.
	ReadOnly OptBool `json:"readOnly"`
}

// GetEndpoints returns the value of Endpoints.
func (s *IoK8sAPICoreV1GlusterfsPersistentVolumeSource) GetEndpoints() string {
	return s.Endpoints
}

// GetEndpointsNamespace returns the value of EndpointsNamespace.
func (s *IoK8sAPICoreV1GlusterfsPersistentVolumeSource) GetEndpointsNamespace() OptString {
	return s.EndpointsNamespace
}

// GetPath returns the value of Path.
func (s *IoK8sAPICoreV1GlusterfsPersistentVolumeSource) GetPath() string {
	return s.Path
}

// GetReadOnly returns the value of ReadOnly.
func (s *IoK8sAPICoreV1GlusterfsPersistentVolumeSource) GetReadOnly() OptBool {
	return s.ReadOnly
}

// SetEndpoints sets the value of Endpoints.
func (s *IoK8sAPICoreV1GlusterfsPersistentVolumeSource) SetEndpoints(val string) {
	s.Endpoints = val
}

// SetEndpointsNamespace sets the value of EndpointsNamespace.
func (s *IoK8sAPICoreV1GlusterfsPersistentVolumeSource) SetEndpointsNamespace(val OptString) {
	s.EndpointsNamespace = val
}

// SetPath sets the value of Path.
func (s *IoK8sAPICoreV1GlusterfsPersistentVolumeSource) SetPath(val string) {
	s.Path = val
}

// SetReadOnly sets the value of ReadOnly.
func (s *IoK8sAPICoreV1GlusterfsPersistentVolumeSource) SetReadOnly(val OptBool) {
	s.ReadOnly = val
}

// Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support
// ownership management or SELinux relabeling.
// Ref: #/components/schemas/io.k8s.api.core.v1.GlusterfsVolumeSource
type IoK8sAPICoreV1GlusterfsVolumeSource struct {
	// EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.
	// k8s.io/volumes/glusterfs/README.md#create-a-pod.
	Endpoints string `json:"endpoints"`
	// Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.
	// md#create-a-pod.
	Path string `json:"path"`
	// ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults
	// to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod.
	ReadOnly OptBool `json:"readOnly"`
}

// GetEndpoints returns the value of Endpoints.
func (s *IoK8sAPICoreV1GlusterfsVolumeSource) GetEndpoints() string {
	return s.Endpoints
}

// GetPath returns the value of Path.
func (s *IoK8sAPICoreV1GlusterfsVolumeSource) GetPath() string {
	return s.Path
}

// GetReadOnly returns the value of ReadOnly.
func (s *IoK8sAPICoreV1GlusterfsVolumeSource) GetReadOnly() OptBool {
	return s.ReadOnly
}

// SetEndpoints sets the value of Endpoints.
func (s *IoK8sAPICoreV1GlusterfsVolumeSource) SetEndpoints(val string) {
	s.Endpoints = val
}

// SetPath sets the value of Path.
func (s *IoK8sAPICoreV1GlusterfsVolumeSource) SetPath(val string) {
	s.Path = val
}

// SetReadOnly sets the value of ReadOnly.
func (s *IoK8sAPICoreV1GlusterfsVolumeSource) SetReadOnly(val OptBool) {
	s.ReadOnly = val
}

// HTTPGetAction describes an action based on HTTP Get requests.
// Ref: #/components/schemas/io.k8s.api.core.v1.HTTPGetAction
type IoK8sAPICoreV1HTTPGetAction struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders
	// instead.
	Host OptString `json:"host"`
	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders []IoK8sAPICoreV1HTTPHeader `json:"httpHeaders"`
	// Path to access on the HTTP server.
	Path OptString                                 `json:"path"`
	Port IoK8sApimachineryPkgUtilIntstrIntOrString `json:"port"`
	// Scheme to use for connecting to the host. Defaults to HTTP.
	Scheme OptString `json:"scheme"`
}

// GetHost returns the value of Host.
func (s *IoK8sAPICoreV1HTTPGetAction) GetHost() OptString {
	return s.Host
}

// GetHttpHeaders returns the value of HttpHeaders.
func (s *IoK8sAPICoreV1HTTPGetAction) GetHttpHeaders() []IoK8sAPICoreV1HTTPHeader {
	return s.HttpHeaders
}

// GetPath returns the value of Path.
func (s *IoK8sAPICoreV1HTTPGetAction) GetPath() OptString {
	return s.Path
}

// GetPort returns the value of Port.
func (s *IoK8sAPICoreV1HTTPGetAction) GetPort() IoK8sApimachineryPkgUtilIntstrIntOrString {
	return s.Port
}

// GetScheme returns the value of Scheme.
func (s *IoK8sAPICoreV1HTTPGetAction) GetScheme() OptString {
	return s.Scheme
}

// SetHost sets the value of Host.
func (s *IoK8sAPICoreV1HTTPGetAction) SetHost(val OptString) {
	s.Host = val
}

// SetHttpHeaders sets the value of HttpHeaders.
func (s *IoK8sAPICoreV1HTTPGetAction) SetHttpHeaders(val []IoK8sAPICoreV1HTTPHeader) {
	s.HttpHeaders = val
}

// SetPath sets the value of Path.
func (s *IoK8sAPICoreV1HTTPGetAction) SetPath(val OptString) {
	s.Path = val
}

// SetPort sets the value of Port.
func (s *IoK8sAPICoreV1HTTPGetAction) SetPort(val IoK8sApimachineryPkgUtilIntstrIntOrString) {
	s.Port = val
}

// SetScheme sets the value of Scheme.
func (s *IoK8sAPICoreV1HTTPGetAction) SetScheme(val OptString) {
	s.Scheme = val
}

// HTTPHeader describes a custom header to be used in HTTP probes.
// Ref: #/components/schemas/io.k8s.api.core.v1.HTTPHeader
type IoK8sAPICoreV1HTTPHeader struct {
	// The header field name.
	Name string `json:"name"`
	// The header field value.
	Value string `json:"value"`
}

// GetName returns the value of Name.
func (s *IoK8sAPICoreV1HTTPHeader) GetName() string {
	return s.Name
}

// GetValue returns the value of Value.
func (s *IoK8sAPICoreV1HTTPHeader) GetValue() string {
	return s.Value
}

// SetName sets the value of Name.
func (s *IoK8sAPICoreV1HTTPHeader) SetName(val string) {
	s.Name = val
}

// SetValue sets the value of Value.
func (s *IoK8sAPICoreV1HTTPHeader) SetValue(val string) {
	s.Value = val
}

// Handler defines a specific action that should be taken.
// Ref: #/components/schemas/io.k8s.api.core.v1.Handler
type IoK8sAPICoreV1Handler struct {
	Exec      OptIoK8sAPICoreV1ExecAction      `json:"exec"`
	HttpGet   OptIoK8sAPICoreV1HTTPGetAction   `json:"httpGet"`
	TcpSocket OptIoK8sAPICoreV1TCPSocketAction `json:"tcpSocket"`
}

// GetExec returns the value of Exec.
func (s *IoK8sAPICoreV1Handler) GetExec() OptIoK8sAPICoreV1ExecAction {
	return s.Exec
}

// GetHttpGet returns the value of HttpGet.
func (s *IoK8sAPICoreV1Handler) GetHttpGet() OptIoK8sAPICoreV1HTTPGetAction {
	return s.HttpGet
}

// GetTcpSocket returns the value of TcpSocket.
func (s *IoK8sAPICoreV1Handler) GetTcpSocket() OptIoK8sAPICoreV1TCPSocketAction {
	return s.TcpSocket
}

// SetExec sets the value of Exec.
func (s *IoK8sAPICoreV1Handler) SetExec(val OptIoK8sAPICoreV1ExecAction) {
	s.Exec = val
}

// SetHttpGet sets the value of HttpGet.
func (s *IoK8sAPICoreV1Handler) SetHttpGet(val OptIoK8sAPICoreV1HTTPGetAction) {
	s.HttpGet = val
}

// SetTcpSocket sets the value of TcpSocket.
func (s *IoK8sAPICoreV1Handler) SetTcpSocket(val OptIoK8sAPICoreV1TCPSocketAction) {
	s.TcpSocket = val
}

// HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the
// pod's hosts file.
// Ref: #/components/schemas/io.k8s.api.core.v1.HostAlias
type IoK8sAPICoreV1HostAlias struct {
	// Hostnames for the above IP address.
	Hostnames []string `json:"hostnames"`
	// IP address of the host file entry.
	IP OptString `json:"ip"`
}

// GetHostnames returns the value of Hostnames.
func (s *IoK8sAPICoreV1HostAlias) GetHostnames() []string {
	return s.Hostnames
}

// GetIP returns the value of IP.
func (s *IoK8sAPICoreV1HostAlias) GetIP() OptString {
	return s.IP
}

// SetHostnames sets the value of Hostnames.
func (s *IoK8sAPICoreV1HostAlias) SetHostnames(val []string) {
	s.Hostnames = val
}

// SetIP sets the value of IP.
func (s *IoK8sAPICoreV1HostAlias) SetIP(val OptString) {
	s.IP = val
}

// Represents a host path mapped into a pod. Host path volumes do not support ownership management or
// SELinux relabeling.
// Ref: #/components/schemas/io.k8s.api.core.v1.HostPathVolumeSource
type IoK8sAPICoreV1HostPathVolumeSource struct {
	// Path of the directory on the host. If the path is a symlink, it will follow the link to the real
	// path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath.
	Path string `json:"path"`
	// Type for HostPath Volume Defaults to "" More info: https://kubernetes.
	// io/docs/concepts/storage/volumes#hostpath.
	Type OptString `json:"type"`
}

// GetPath returns the value of Path.
func (s *IoK8sAPICoreV1HostPathVolumeSource) GetPath() string {
	return s.Path
}

// GetType returns the value of Type.
func (s *IoK8sAPICoreV1HostPathVolumeSource) GetType() OptString {
	return s.Type
}

// SetPath sets the value of Path.
func (s *IoK8sAPICoreV1HostPathVolumeSource) SetPath(val string) {
	s.Path = val
}

// SetType sets the value of Type.
func (s *IoK8sAPICoreV1HostPathVolumeSource) SetType(val OptString) {
	s.Type = val
}

// ISCSIPersistentVolumeSource represents an ISCSI disk. ISCSI volumes can only be mounted as
// read/write once. ISCSI volumes support ownership management and SELinux relabeling.
// Ref: #/components/schemas/io.k8s.api.core.v1.ISCSIPersistentVolumeSource
type IoK8sAPICoreV1ISCSIPersistentVolumeSource struct {
	// Whether support iSCSI Discovery CHAP authentication.
	ChapAuthDiscovery OptBool `json:"chapAuthDiscovery"`
	// Whether support iSCSI Session CHAP authentication.
	ChapAuthSession OptBool `json:"chapAuthSession"`
	// Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is
	// supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be
	// "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi.
	FsType OptString `json:"fsType"`
	// Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new
	// iSCSI interface <target portal>:<volume name> will be created for the connection.
	InitiatorName OptString `json:"initiatorName"`
	// Target iSCSI Qualified Name.
	Iqn string `json:"iqn"`
	// ISCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
	IscsiInterface OptString `json:"iscsiInterface"`
	// ISCSI Target Lun number.
	Lun int32 `json:"lun"`
	// ISCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than
	// default (typically TCP ports 860 and 3260).
	Portals []string `json:"portals"`
	// ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
	ReadOnly  OptBool                          `json:"readOnly"`
	SecretRef OptIoK8sAPICoreV1SecretReference `json:"secretRef"`
	// ISCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default
	// (typically TCP ports 860 and 3260).
	TargetPortal string `json:"targetPortal"`
}

// GetChapAuthDiscovery returns the value of ChapAuthDiscovery.
func (s *IoK8sAPICoreV1ISCSIPersistentVolumeSource) GetChapAuthDiscovery() OptBool {
	return s.ChapAuthDiscovery
}

// GetChapAuthSession returns the value of ChapAuthSession.
func (s *IoK8sAPICoreV1ISCSIPersistentVolumeSource) GetChapAuthSession() OptBool {
	return s.ChapAuthSession
}

// GetFsType returns the value of FsType.
func (s *IoK8sAPICoreV1ISCSIPersistentVolumeSource) GetFsType() OptString {
	return s.FsType
}

// GetInitiatorName returns the value of InitiatorName.
func (s *IoK8sAPICoreV1ISCSIPersistentVolumeSource) GetInitiatorName() OptString {
	return s.InitiatorName
}

// GetIqn returns the value of Iqn.
func (s *IoK8sAPICoreV1ISCSIPersistentVolumeSource) GetIqn() string {
	return s.Iqn
}

// GetIscsiInterface returns the value of IscsiInterface.
func (s *IoK8sAPICoreV1ISCSIPersistentVolumeSource) GetIscsiInterface() OptString {
	return s.IscsiInterface
}

// GetLun returns the value of Lun.
func (s *IoK8sAPICoreV1ISCSIPersistentVolumeSource) GetLun() int32 {
	return s.Lun
}

// GetPortals returns the value of Portals.
func (s *IoK8sAPICoreV1ISCSIPersistentVolumeSource) GetPortals() []string {
	return s.Portals
}

// GetReadOnly returns the value of ReadOnly.
func (s *IoK8sAPICoreV1ISCSIPersistentVolumeSource) GetReadOnly() OptBool {
	return s.ReadOnly
}

// GetSecretRef returns the value of SecretRef.
func (s *IoK8sAPICoreV1ISCSIPersistentVolumeSource) GetSecretRef() OptIoK8sAPICoreV1SecretReference {
	return s.SecretRef
}

// GetTargetPortal returns the value of TargetPortal.
func (s *IoK8sAPICoreV1ISCSIPersistentVolumeSource) GetTargetPortal() string {
	return s.TargetPortal
}

// SetChapAuthDiscovery sets the value of ChapAuthDiscovery.
func (s *IoK8sAPICoreV1ISCSIPersistentVolumeSource) SetChapAuthDiscovery(val OptBool) {
	s.ChapAuthDiscovery = val
}

// SetChapAuthSession sets the value of ChapAuthSession.
func (s *IoK8sAPICoreV1ISCSIPersistentVolumeSource) SetChapAuthSession(val OptBool) {
	s.ChapAuthSession = val
}

// SetFsType sets the value of FsType.
func (s *IoK8sAPICoreV1ISCSIPersistentVolumeSource) SetFsType(val OptString) {
	s.FsType = val
}

// SetInitiatorName sets the value of InitiatorName.
func (s *IoK8sAPICoreV1ISCSIPersistentVolumeSource) SetInitiatorName(val OptString) {
	s.InitiatorName = val
}

// SetIqn sets the value of Iqn.
func (s *IoK8sAPICoreV1ISCSIPersistentVolumeSource) SetIqn(val string) {
	s.Iqn = val
}

// SetIscsiInterface sets the value of IscsiInterface.
func (s *IoK8sAPICoreV1ISCSIPersistentVolumeSource) SetIscsiInterface(val OptString) {
	s.IscsiInterface = val
}

// SetLun sets the value of Lun.
func (s *IoK8sAPICoreV1ISCSIPersistentVolumeSource) SetLun(val int32) {
	s.Lun = val
}

// SetPortals sets the value of Portals.
func (s *IoK8sAPICoreV1ISCSIPersistentVolumeSource) SetPortals(val []string) {
	s.Portals = val
}

// SetReadOnly sets the value of ReadOnly.
func (s *IoK8sAPICoreV1ISCSIPersistentVolumeSource) SetReadOnly(val OptBool) {
	s.ReadOnly = val
}

// SetSecretRef sets the value of SecretRef.
func (s *IoK8sAPICoreV1ISCSIPersistentVolumeSource) SetSecretRef(val OptIoK8sAPICoreV1SecretReference) {
	s.SecretRef = val
}

// SetTargetPortal sets the value of TargetPortal.
func (s *IoK8sAPICoreV1ISCSIPersistentVolumeSource) SetTargetPortal(val string) {
	s.TargetPortal = val
}

// Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes
// support ownership management and SELinux relabeling.
// Ref: #/components/schemas/io.k8s.api.core.v1.ISCSIVolumeSource
type IoK8sAPICoreV1ISCSIVolumeSource struct {
	// Whether support iSCSI Discovery CHAP authentication.
	ChapAuthDiscovery OptBool `json:"chapAuthDiscovery"`
	// Whether support iSCSI Session CHAP authentication.
	ChapAuthSession OptBool `json:"chapAuthSession"`
	// Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is
	// supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be
	// "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi.
	FsType OptString `json:"fsType"`
	// Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new
	// iSCSI interface <target portal>:<volume name> will be created for the connection.
	InitiatorName OptString `json:"initiatorName"`
	// Target iSCSI Qualified Name.
	Iqn string `json:"iqn"`
	// ISCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
	IscsiInterface OptString `json:"iscsiInterface"`
	// ISCSI Target Lun number.
	Lun int32 `json:"lun"`
	// ISCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than
	// default (typically TCP ports 860 and 3260).
	Portals []string `json:"portals"`
	// ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
	ReadOnly  OptBool                               `json:"readOnly"`
	SecretRef OptIoK8sAPICoreV1LocalObjectReference `json:"secretRef"`
	// ISCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default
	// (typically TCP ports 860 and 3260).
	TargetPortal string `json:"targetPortal"`
}

// GetChapAuthDiscovery returns the value of ChapAuthDiscovery.
func (s *IoK8sAPICoreV1ISCSIVolumeSource) GetChapAuthDiscovery() OptBool {
	return s.ChapAuthDiscovery
}

// GetChapAuthSession returns the value of ChapAuthSession.
func (s *IoK8sAPICoreV1ISCSIVolumeSource) GetChapAuthSession() OptBool {
	return s.ChapAuthSession
}

// GetFsType returns the value of FsType.
func (s *IoK8sAPICoreV1ISCSIVolumeSource) GetFsType() OptString {
	return s.FsType
}

// GetInitiatorName returns the value of InitiatorName.
func (s *IoK8sAPICoreV1ISCSIVolumeSource) GetInitiatorName() OptString {
	return s.InitiatorName
}

// GetIqn returns the value of Iqn.
func (s *IoK8sAPICoreV1ISCSIVolumeSource) GetIqn() string {
	return s.Iqn
}

// GetIscsiInterface returns the value of IscsiInterface.
func (s *IoK8sAPICoreV1ISCSIVolumeSource) GetIscsiInterface() OptString {
	return s.IscsiInterface
}

// GetLun returns the value of Lun.
func (s *IoK8sAPICoreV1ISCSIVolumeSource) GetLun() int32 {
	return s.Lun
}

// GetPortals returns the value of Portals.
func (s *IoK8sAPICoreV1ISCSIVolumeSource) GetPortals() []string {
	return s.Portals
}

// GetReadOnly returns the value of ReadOnly.
func (s *IoK8sAPICoreV1ISCSIVolumeSource) GetReadOnly() OptBool {
	return s.ReadOnly
}

// GetSecretRef returns the value of SecretRef.
func (s *IoK8sAPICoreV1ISCSIVolumeSource) GetSecretRef() OptIoK8sAPICoreV1LocalObjectReference {
	return s.SecretRef
}

// GetTargetPortal returns the value of TargetPortal.
func (s *IoK8sAPICoreV1ISCSIVolumeSource) GetTargetPortal() string {
	return s.TargetPortal
}

// SetChapAuthDiscovery sets the value of ChapAuthDiscovery.
func (s *IoK8sAPICoreV1ISCSIVolumeSource) SetChapAuthDiscovery(val OptBool) {
	s.ChapAuthDiscovery = val
}

// SetChapAuthSession sets the value of ChapAuthSession.
func (s *IoK8sAPICoreV1ISCSIVolumeSource) SetChapAuthSession(val OptBool) {
	s.ChapAuthSession = val
}

// SetFsType sets the value of FsType.
func (s *IoK8sAPICoreV1ISCSIVolumeSource) SetFsType(val OptString) {
	s.FsType = val
}

// SetInitiatorName sets the value of InitiatorName.
func (s *IoK8sAPICoreV1ISCSIVolumeSource) SetInitiatorName(val OptString) {
	s.InitiatorName = val
}

// SetIqn sets the value of Iqn.
func (s *IoK8sAPICoreV1ISCSIVolumeSource) SetIqn(val string) {
	s.Iqn = val
}

// SetIscsiInterface sets the value of IscsiInterface.
func (s *IoK8sAPICoreV1ISCSIVolumeSource) SetIscsiInterface(val OptString) {
	s.IscsiInterface = val
}

// SetLun sets the value of Lun.
func (s *IoK8sAPICoreV1ISCSIVolumeSource) SetLun(val int32) {
	s.Lun = val
}

// SetPortals sets the value of Portals.
func (s *IoK8sAPICoreV1ISCSIVolumeSource) SetPortals(val []string) {
	s.Portals = val
}

// SetReadOnly sets the value of ReadOnly.
func (s *IoK8sAPICoreV1ISCSIVolumeSource) SetReadOnly(val OptBool) {
	s.ReadOnly = val
}

// SetSecretRef sets the value of SecretRef.
func (s *IoK8sAPICoreV1ISCSIVolumeSource) SetSecretRef(val OptIoK8sAPICoreV1LocalObjectReference) {
	s.SecretRef = val
}

// SetTargetPortal sets the value of TargetPortal.
func (s *IoK8sAPICoreV1ISCSIVolumeSource) SetTargetPortal(val string) {
	s.TargetPortal = val
}

// Maps a string key to a path within a volume.
// Ref: #/components/schemas/io.k8s.api.core.v1.KeyToPath
type IoK8sAPICoreV1KeyToPath struct {
	// The key to project.
	Key string `json:"key"`
	// Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and
	// 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON
	// requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This
	// might be in conflict with other options that affect the file mode, like fsGroup, and the result
	// can be other mode bits set.
	Mode OptInt32 `json:"mode"`
	// The relative path of the file to map the key to. May not be an absolute path. May not contain the
	// path element '..'. May not start with the string '..'.
	Path string `json:"path"`
}

// GetKey returns the value of Key.
func (s *IoK8sAPICoreV1KeyToPath) GetKey() string {
	return s.Key
}

// GetMode returns the value of Mode.
func (s *IoK8sAPICoreV1KeyToPath) GetMode() OptInt32 {
	return s.Mode
}

// GetPath returns the value of Path.
func (s *IoK8sAPICoreV1KeyToPath) GetPath() string {
	return s.Path
}

// SetKey sets the value of Key.
func (s *IoK8sAPICoreV1KeyToPath) SetKey(val string) {
	s.Key = val
}

// SetMode sets the value of Mode.
func (s *IoK8sAPICoreV1KeyToPath) SetMode(val OptInt32) {
	s.Mode = val
}

// SetPath sets the value of Path.
func (s *IoK8sAPICoreV1KeyToPath) SetPath(val string) {
	s.Path = val
}

// Lifecycle describes actions that the management system should take in response to container
// lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container
// blocks until the action is complete, unless the container process fails, in which case the handler
// is aborted.
// Ref: #/components/schemas/io.k8s.api.core.v1.Lifecycle
type IoK8sAPICoreV1Lifecycle struct {
	PostStart OptIoK8sAPICoreV1Handler `json:"postStart"`
	PreStop   OptIoK8sAPICoreV1Handler `json:"preStop"`
}

// GetPostStart returns the value of PostStart.
func (s *IoK8sAPICoreV1Lifecycle) GetPostStart() OptIoK8sAPICoreV1Handler {
	return s.PostStart
}

// GetPreStop returns the value of PreStop.
func (s *IoK8sAPICoreV1Lifecycle) GetPreStop() OptIoK8sAPICoreV1Handler {
	return s.PreStop
}

// SetPostStart sets the value of PostStart.
func (s *IoK8sAPICoreV1Lifecycle) SetPostStart(val OptIoK8sAPICoreV1Handler) {
	s.PostStart = val
}

// SetPreStop sets the value of PreStop.
func (s *IoK8sAPICoreV1Lifecycle) SetPreStop(val OptIoK8sAPICoreV1Handler) {
	s.PreStop = val
}

// LimitRange sets resource usage limits for each kind of resource in a Namespace.
// Ref: #/components/schemas/io.k8s.api.core.v1.LimitRange
type IoK8sAPICoreV1LimitRange struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                   `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata"`
	Spec     OptIoK8sAPICoreV1LimitRangeSpec             `json:"spec"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPICoreV1LimitRange) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sAPICoreV1LimitRange) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPICoreV1LimitRange) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetSpec returns the value of Spec.
func (s *IoK8sAPICoreV1LimitRange) GetSpec() OptIoK8sAPICoreV1LimitRangeSpec {
	return s.Spec
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPICoreV1LimitRange) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPICoreV1LimitRange) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPICoreV1LimitRange) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetSpec sets the value of Spec.
func (s *IoK8sAPICoreV1LimitRange) SetSpec(val OptIoK8sAPICoreV1LimitRangeSpec) {
	s.Spec = val
}

func (*IoK8sAPICoreV1LimitRange) readCoreV1NamespacedLimitRangeRes() {}

// LimitRangeItem defines a min/max usage limit for any resource that matches on kind.
// Ref: #/components/schemas/io.k8s.api.core.v1.LimitRangeItem
type IoK8sAPICoreV1LimitRangeItem struct {
	// Default resource requirement limit value by resource name if resource limit is omitted.
	Default OptIoK8sAPICoreV1LimitRangeItemDefault `json:"default"`
	// DefaultRequest is the default resource requirement request value by resource name if resource
	// request is omitted.
	DefaultRequest OptIoK8sAPICoreV1LimitRangeItemDefaultRequest `json:"defaultRequest"`
	// Max usage constraints on this kind by resource name.
	Max OptIoK8sAPICoreV1LimitRangeItemMax `json:"max"`
	// MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both
	// non-zero where limit divided by request is less than or equal to the enumerated value; this
	// represents the max burst for the named resource.
	MaxLimitRequestRatio OptIoK8sAPICoreV1LimitRangeItemMaxLimitRequestRatio `json:"maxLimitRequestRatio"`
	// Min usage constraints on this kind by resource name.
	Min OptIoK8sAPICoreV1LimitRangeItemMin `json:"min"`
	// Type of resource that this limit applies to.
	Type string `json:"type"`
}

// GetDefault returns the value of Default.
func (s *IoK8sAPICoreV1LimitRangeItem) GetDefault() OptIoK8sAPICoreV1LimitRangeItemDefault {
	return s.Default
}

// GetDefaultRequest returns the value of DefaultRequest.
func (s *IoK8sAPICoreV1LimitRangeItem) GetDefaultRequest() OptIoK8sAPICoreV1LimitRangeItemDefaultRequest {
	return s.DefaultRequest
}

// GetMax returns the value of Max.
func (s *IoK8sAPICoreV1LimitRangeItem) GetMax() OptIoK8sAPICoreV1LimitRangeItemMax {
	return s.Max
}

// GetMaxLimitRequestRatio returns the value of MaxLimitRequestRatio.
func (s *IoK8sAPICoreV1LimitRangeItem) GetMaxLimitRequestRatio() OptIoK8sAPICoreV1LimitRangeItemMaxLimitRequestRatio {
	return s.MaxLimitRequestRatio
}

// GetMin returns the value of Min.
func (s *IoK8sAPICoreV1LimitRangeItem) GetMin() OptIoK8sAPICoreV1LimitRangeItemMin {
	return s.Min
}

// GetType returns the value of Type.
func (s *IoK8sAPICoreV1LimitRangeItem) GetType() string {
	return s.Type
}

// SetDefault sets the value of Default.
func (s *IoK8sAPICoreV1LimitRangeItem) SetDefault(val OptIoK8sAPICoreV1LimitRangeItemDefault) {
	s.Default = val
}

// SetDefaultRequest sets the value of DefaultRequest.
func (s *IoK8sAPICoreV1LimitRangeItem) SetDefaultRequest(val OptIoK8sAPICoreV1LimitRangeItemDefaultRequest) {
	s.DefaultRequest = val
}

// SetMax sets the value of Max.
func (s *IoK8sAPICoreV1LimitRangeItem) SetMax(val OptIoK8sAPICoreV1LimitRangeItemMax) {
	s.Max = val
}

// SetMaxLimitRequestRatio sets the value of MaxLimitRequestRatio.
func (s *IoK8sAPICoreV1LimitRangeItem) SetMaxLimitRequestRatio(val OptIoK8sAPICoreV1LimitRangeItemMaxLimitRequestRatio) {
	s.MaxLimitRequestRatio = val
}

// SetMin sets the value of Min.
func (s *IoK8sAPICoreV1LimitRangeItem) SetMin(val OptIoK8sAPICoreV1LimitRangeItemMin) {
	s.Min = val
}

// SetType sets the value of Type.
func (s *IoK8sAPICoreV1LimitRangeItem) SetType(val string) {
	s.Type = val
}

// Default resource requirement limit value by resource name if resource limit is omitted.
type IoK8sAPICoreV1LimitRangeItemDefault map[string]IoK8sApimachineryPkgAPIResourceQuantity

func (s *IoK8sAPICoreV1LimitRangeItemDefault) init() IoK8sAPICoreV1LimitRangeItemDefault {
	m := *s
	if m == nil {
		m = map[string]IoK8sApimachineryPkgAPIResourceQuantity{}
		*s = m
	}
	return m
}

// DefaultRequest is the default resource requirement request value by resource name if resource
// request is omitted.
type IoK8sAPICoreV1LimitRangeItemDefaultRequest map[string]IoK8sApimachineryPkgAPIResourceQuantity

func (s *IoK8sAPICoreV1LimitRangeItemDefaultRequest) init() IoK8sAPICoreV1LimitRangeItemDefaultRequest {
	m := *s
	if m == nil {
		m = map[string]IoK8sApimachineryPkgAPIResourceQuantity{}
		*s = m
	}
	return m
}

// Max usage constraints on this kind by resource name.
type IoK8sAPICoreV1LimitRangeItemMax map[string]IoK8sApimachineryPkgAPIResourceQuantity

func (s *IoK8sAPICoreV1LimitRangeItemMax) init() IoK8sAPICoreV1LimitRangeItemMax {
	m := *s
	if m == nil {
		m = map[string]IoK8sApimachineryPkgAPIResourceQuantity{}
		*s = m
	}
	return m
}

// MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both
// non-zero where limit divided by request is less than or equal to the enumerated value; this
// represents the max burst for the named resource.
type IoK8sAPICoreV1LimitRangeItemMaxLimitRequestRatio map[string]IoK8sApimachineryPkgAPIResourceQuantity

func (s *IoK8sAPICoreV1LimitRangeItemMaxLimitRequestRatio) init() IoK8sAPICoreV1LimitRangeItemMaxLimitRequestRatio {
	m := *s
	if m == nil {
		m = map[string]IoK8sApimachineryPkgAPIResourceQuantity{}
		*s = m
	}
	return m
}

// Min usage constraints on this kind by resource name.
type IoK8sAPICoreV1LimitRangeItemMin map[string]IoK8sApimachineryPkgAPIResourceQuantity

func (s *IoK8sAPICoreV1LimitRangeItemMin) init() IoK8sAPICoreV1LimitRangeItemMin {
	m := *s
	if m == nil {
		m = map[string]IoK8sApimachineryPkgAPIResourceQuantity{}
		*s = m
	}
	return m
}

// LimitRangeList is a list of LimitRange items.
// Ref: #/components/schemas/io.k8s.api.core.v1.LimitRangeList
type IoK8sAPICoreV1LimitRangeList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Items is a list of LimitRange objects. More info: https://kubernetes.
	// io/docs/concepts/configuration/manage-resources-containers/.
	Items []IoK8sAPICoreV1LimitRange `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPICoreV1LimitRangeList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPICoreV1LimitRangeList) GetItems() []IoK8sAPICoreV1LimitRange {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPICoreV1LimitRangeList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPICoreV1LimitRangeList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPICoreV1LimitRangeList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPICoreV1LimitRangeList) SetItems(val []IoK8sAPICoreV1LimitRange) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPICoreV1LimitRangeList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPICoreV1LimitRangeList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPICoreV1LimitRangeList) listCoreV1LimitRangeForAllNamespacesRes() {}
func (*IoK8sAPICoreV1LimitRangeList) listCoreV1NamespacedLimitRangeRes()       {}

// LimitRangeSpec defines a min/max usage limit for resources that match on kind.
// Ref: #/components/schemas/io.k8s.api.core.v1.LimitRangeSpec
type IoK8sAPICoreV1LimitRangeSpec struct {
	// Limits is the list of LimitRangeItem objects that are enforced.
	Limits []IoK8sAPICoreV1LimitRangeItem `json:"limits"`
}

// GetLimits returns the value of Limits.
func (s *IoK8sAPICoreV1LimitRangeSpec) GetLimits() []IoK8sAPICoreV1LimitRangeItem {
	return s.Limits
}

// SetLimits sets the value of Limits.
func (s *IoK8sAPICoreV1LimitRangeSpec) SetLimits(val []IoK8sAPICoreV1LimitRangeItem) {
	s.Limits = val
}

// LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for
// the service should be sent to an ingress point.
// Ref: #/components/schemas/io.k8s.api.core.v1.LoadBalancerIngress
type IoK8sAPICoreV1LoadBalancerIngress struct {
	// Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers).
	Hostname OptString `json:"hostname"`
	// IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack
	// load-balancers).
	IP OptString `json:"ip"`
	// Ports is a list of records of service ports If used, every port defined in the service should have
	// an entry in it.
	Ports []IoK8sAPICoreV1PortStatus `json:"ports"`
}

// GetHostname returns the value of Hostname.
func (s *IoK8sAPICoreV1LoadBalancerIngress) GetHostname() OptString {
	return s.Hostname
}

// GetIP returns the value of IP.
func (s *IoK8sAPICoreV1LoadBalancerIngress) GetIP() OptString {
	return s.IP
}

// GetPorts returns the value of Ports.
func (s *IoK8sAPICoreV1LoadBalancerIngress) GetPorts() []IoK8sAPICoreV1PortStatus {
	return s.Ports
}

// SetHostname sets the value of Hostname.
func (s *IoK8sAPICoreV1LoadBalancerIngress) SetHostname(val OptString) {
	s.Hostname = val
}

// SetIP sets the value of IP.
func (s *IoK8sAPICoreV1LoadBalancerIngress) SetIP(val OptString) {
	s.IP = val
}

// SetPorts sets the value of Ports.
func (s *IoK8sAPICoreV1LoadBalancerIngress) SetPorts(val []IoK8sAPICoreV1PortStatus) {
	s.Ports = val
}

// LoadBalancerStatus represents the status of a load-balancer.
// Ref: #/components/schemas/io.k8s.api.core.v1.LoadBalancerStatus
type IoK8sAPICoreV1LoadBalancerStatus struct {
	// Ingress is a list containing ingress points for the load-balancer. Traffic intended for the
	// service should be sent to these ingress points.
	Ingress []IoK8sAPICoreV1LoadBalancerIngress `json:"ingress"`
}

// GetIngress returns the value of Ingress.
func (s *IoK8sAPICoreV1LoadBalancerStatus) GetIngress() []IoK8sAPICoreV1LoadBalancerIngress {
	return s.Ingress
}

// SetIngress sets the value of Ingress.
func (s *IoK8sAPICoreV1LoadBalancerStatus) SetIngress(val []IoK8sAPICoreV1LoadBalancerIngress) {
	s.Ingress = val
}

// LocalObjectReference contains enough information to let you locate the referenced object inside
// the same namespace.
// Ref: #/components/schemas/io.k8s.api.core.v1.LocalObjectReference
type IoK8sAPICoreV1LocalObjectReference struct {
	// Name of the referent. More info: https://kubernetes.
	// io/docs/concepts/overview/working-with-objects/names/#names.
	Name OptString `json:"name"`
}

// GetName returns the value of Name.
func (s *IoK8sAPICoreV1LocalObjectReference) GetName() OptString {
	return s.Name
}

// SetName sets the value of Name.
func (s *IoK8sAPICoreV1LocalObjectReference) SetName(val OptString) {
	s.Name = val
}

// Local represents directly-attached storage with node affinity (Beta feature).
// Ref: #/components/schemas/io.k8s.api.core.v1.LocalVolumeSource
type IoK8sAPICoreV1LocalVolumeSource struct {
	// Filesystem type to mount. It applies only when the Path is a block device. Must be a filesystem
	// type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default value is to
	// auto-select a filesystem if unspecified.
	FsType OptString `json:"fsType"`
	// The full path to the volume on the node. It can be either a directory or block device (disk,
	// partition, ...).
	Path string `json:"path"`
}

// GetFsType returns the value of FsType.
func (s *IoK8sAPICoreV1LocalVolumeSource) GetFsType() OptString {
	return s.FsType
}

// GetPath returns the value of Path.
func (s *IoK8sAPICoreV1LocalVolumeSource) GetPath() string {
	return s.Path
}

// SetFsType sets the value of FsType.
func (s *IoK8sAPICoreV1LocalVolumeSource) SetFsType(val OptString) {
	s.FsType = val
}

// SetPath sets the value of Path.
func (s *IoK8sAPICoreV1LocalVolumeSource) SetPath(val string) {
	s.Path = val
}

// Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership
// management or SELinux relabeling.
// Ref: #/components/schemas/io.k8s.api.core.v1.NFSVolumeSource
type IoK8sAPICoreV1NFSVolumeSource struct {
	// Path that is exported by the NFS server. More info: https://kubernetes.
	// io/docs/concepts/storage/volumes#nfs.
	Path string `json:"path"`
	// ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to
	// false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs.
	ReadOnly OptBool `json:"readOnly"`
	// Server is the hostname or IP address of the NFS server. More info: https://kubernetes.
	// io/docs/concepts/storage/volumes#nfs.
	Server string `json:"server"`
}

// GetPath returns the value of Path.
func (s *IoK8sAPICoreV1NFSVolumeSource) GetPath() string {
	return s.Path
}

// GetReadOnly returns the value of ReadOnly.
func (s *IoK8sAPICoreV1NFSVolumeSource) GetReadOnly() OptBool {
	return s.ReadOnly
}

// GetServer returns the value of Server.
func (s *IoK8sAPICoreV1NFSVolumeSource) GetServer() string {
	return s.Server
}

// SetPath sets the value of Path.
func (s *IoK8sAPICoreV1NFSVolumeSource) SetPath(val string) {
	s.Path = val
}

// SetReadOnly sets the value of ReadOnly.
func (s *IoK8sAPICoreV1NFSVolumeSource) SetReadOnly(val OptBool) {
	s.ReadOnly = val
}

// SetServer sets the value of Server.
func (s *IoK8sAPICoreV1NFSVolumeSource) SetServer(val string) {
	s.Server = val
}

// Namespace provides a scope for Names. Use of multiple namespaces is optional.
// Ref: #/components/schemas/io.k8s.api.core.v1.Namespace
type IoK8sAPICoreV1Namespace struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                   `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata"`
	Spec     OptIoK8sAPICoreV1NamespaceSpec              `json:"spec"`
	Status   OptIoK8sAPICoreV1NamespaceStatus            `json:"status"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPICoreV1Namespace) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sAPICoreV1Namespace) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPICoreV1Namespace) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetSpec returns the value of Spec.
func (s *IoK8sAPICoreV1Namespace) GetSpec() OptIoK8sAPICoreV1NamespaceSpec {
	return s.Spec
}

// GetStatus returns the value of Status.
func (s *IoK8sAPICoreV1Namespace) GetStatus() OptIoK8sAPICoreV1NamespaceStatus {
	return s.Status
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPICoreV1Namespace) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPICoreV1Namespace) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPICoreV1Namespace) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetSpec sets the value of Spec.
func (s *IoK8sAPICoreV1Namespace) SetSpec(val OptIoK8sAPICoreV1NamespaceSpec) {
	s.Spec = val
}

// SetStatus sets the value of Status.
func (s *IoK8sAPICoreV1Namespace) SetStatus(val OptIoK8sAPICoreV1NamespaceStatus) {
	s.Status = val
}

func (*IoK8sAPICoreV1Namespace) readCoreV1NamespaceRes()       {}
func (*IoK8sAPICoreV1Namespace) readCoreV1NamespaceStatusRes() {}

// NamespaceCondition contains details about state of namespace.
// Ref: #/components/schemas/io.k8s.api.core.v1.NamespaceCondition
type IoK8sAPICoreV1NamespaceCondition struct {
	LastTransitionTime OptIoK8sApimachineryPkgApisMetaV1Time `json:"lastTransitionTime"`
	Message            OptString                             `json:"message"`
	Reason             OptString                             `json:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status string `json:"status"`
	// Type of namespace controller condition.
	Type string `json:"type"`
}

// GetLastTransitionTime returns the value of LastTransitionTime.
func (s *IoK8sAPICoreV1NamespaceCondition) GetLastTransitionTime() OptIoK8sApimachineryPkgApisMetaV1Time {
	return s.LastTransitionTime
}

// GetMessage returns the value of Message.
func (s *IoK8sAPICoreV1NamespaceCondition) GetMessage() OptString {
	return s.Message
}

// GetReason returns the value of Reason.
func (s *IoK8sAPICoreV1NamespaceCondition) GetReason() OptString {
	return s.Reason
}

// GetStatus returns the value of Status.
func (s *IoK8sAPICoreV1NamespaceCondition) GetStatus() string {
	return s.Status
}

// GetType returns the value of Type.
func (s *IoK8sAPICoreV1NamespaceCondition) GetType() string {
	return s.Type
}

// SetLastTransitionTime sets the value of LastTransitionTime.
func (s *IoK8sAPICoreV1NamespaceCondition) SetLastTransitionTime(val OptIoK8sApimachineryPkgApisMetaV1Time) {
	s.LastTransitionTime = val
}

// SetMessage sets the value of Message.
func (s *IoK8sAPICoreV1NamespaceCondition) SetMessage(val OptString) {
	s.Message = val
}

// SetReason sets the value of Reason.
func (s *IoK8sAPICoreV1NamespaceCondition) SetReason(val OptString) {
	s.Reason = val
}

// SetStatus sets the value of Status.
func (s *IoK8sAPICoreV1NamespaceCondition) SetStatus(val string) {
	s.Status = val
}

// SetType sets the value of Type.
func (s *IoK8sAPICoreV1NamespaceCondition) SetType(val string) {
	s.Type = val
}

// NamespaceList is a list of Namespaces.
// Ref: #/components/schemas/io.k8s.api.core.v1.NamespaceList
type IoK8sAPICoreV1NamespaceList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Items is the list of Namespace objects in the list. More info: https://kubernetes.
	// io/docs/concepts/overview/working-with-objects/namespaces/.
	Items []IoK8sAPICoreV1Namespace `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPICoreV1NamespaceList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPICoreV1NamespaceList) GetItems() []IoK8sAPICoreV1Namespace {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPICoreV1NamespaceList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPICoreV1NamespaceList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPICoreV1NamespaceList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPICoreV1NamespaceList) SetItems(val []IoK8sAPICoreV1Namespace) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPICoreV1NamespaceList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPICoreV1NamespaceList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPICoreV1NamespaceList) listCoreV1NamespaceRes() {}

// NamespaceSpec describes the attributes on a Namespace.
// Ref: #/components/schemas/io.k8s.api.core.v1.NamespaceSpec
type IoK8sAPICoreV1NamespaceSpec struct {
	// Finalizers is an opaque list of values that must be empty to permanently remove object from
	// storage. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/.
	Finalizers []string `json:"finalizers"`
}

// GetFinalizers returns the value of Finalizers.
func (s *IoK8sAPICoreV1NamespaceSpec) GetFinalizers() []string {
	return s.Finalizers
}

// SetFinalizers sets the value of Finalizers.
func (s *IoK8sAPICoreV1NamespaceSpec) SetFinalizers(val []string) {
	s.Finalizers = val
}

// NamespaceStatus is information about the current status of a Namespace.
// Ref: #/components/schemas/io.k8s.api.core.v1.NamespaceStatus
type IoK8sAPICoreV1NamespaceStatus struct {
	// Represents the latest available observations of a namespace's current state.
	Conditions []IoK8sAPICoreV1NamespaceCondition `json:"conditions"`
	// Phase is the current lifecycle phase of the namespace. More info: https://kubernetes.
	// io/docs/tasks/administer-cluster/namespaces/.
	Phase OptString `json:"phase"`
}

// GetConditions returns the value of Conditions.
func (s *IoK8sAPICoreV1NamespaceStatus) GetConditions() []IoK8sAPICoreV1NamespaceCondition {
	return s.Conditions
}

// GetPhase returns the value of Phase.
func (s *IoK8sAPICoreV1NamespaceStatus) GetPhase() OptString {
	return s.Phase
}

// SetConditions sets the value of Conditions.
func (s *IoK8sAPICoreV1NamespaceStatus) SetConditions(val []IoK8sAPICoreV1NamespaceCondition) {
	s.Conditions = val
}

// SetPhase sets the value of Phase.
func (s *IoK8sAPICoreV1NamespaceStatus) SetPhase(val OptString) {
	s.Phase = val
}

// Node is a worker node in Kubernetes. Each node will have a unique identifier in the cache (i.e. in
// etcd).
// Ref: #/components/schemas/io.k8s.api.core.v1.Node
type IoK8sAPICoreV1Node struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                   `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata"`
	Spec     OptIoK8sAPICoreV1NodeSpec                   `json:"spec"`
	Status   OptIoK8sAPICoreV1NodeStatus                 `json:"status"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPICoreV1Node) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sAPICoreV1Node) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPICoreV1Node) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetSpec returns the value of Spec.
func (s *IoK8sAPICoreV1Node) GetSpec() OptIoK8sAPICoreV1NodeSpec {
	return s.Spec
}

// GetStatus returns the value of Status.
func (s *IoK8sAPICoreV1Node) GetStatus() OptIoK8sAPICoreV1NodeStatus {
	return s.Status
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPICoreV1Node) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPICoreV1Node) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPICoreV1Node) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetSpec sets the value of Spec.
func (s *IoK8sAPICoreV1Node) SetSpec(val OptIoK8sAPICoreV1NodeSpec) {
	s.Spec = val
}

// SetStatus sets the value of Status.
func (s *IoK8sAPICoreV1Node) SetStatus(val OptIoK8sAPICoreV1NodeStatus) {
	s.Status = val
}

func (*IoK8sAPICoreV1Node) readCoreV1NodeRes()       {}
func (*IoK8sAPICoreV1Node) readCoreV1NodeStatusRes() {}

// NodeAddress contains information for the node's address.
// Ref: #/components/schemas/io.k8s.api.core.v1.NodeAddress
type IoK8sAPICoreV1NodeAddress struct {
	// The node address.
	Address string `json:"address"`
	// Node address type, one of Hostname, ExternalIP or InternalIP.
	Type string `json:"type"`
}

// GetAddress returns the value of Address.
func (s *IoK8sAPICoreV1NodeAddress) GetAddress() string {
	return s.Address
}

// GetType returns the value of Type.
func (s *IoK8sAPICoreV1NodeAddress) GetType() string {
	return s.Type
}

// SetAddress sets the value of Address.
func (s *IoK8sAPICoreV1NodeAddress) SetAddress(val string) {
	s.Address = val
}

// SetType sets the value of Type.
func (s *IoK8sAPICoreV1NodeAddress) SetType(val string) {
	s.Type = val
}

// Node affinity is a group of node affinity scheduling rules.
// Ref: #/components/schemas/io.k8s.api.core.v1.NodeAffinity
type IoK8sAPICoreV1NodeAffinity struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions
	// specified by this field, but it may choose a node that violates one or more of the expressions.
	// The node that is most preferred is the one with the greatest sum of weights, i.e. for each node
	// that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity
	// expressions, etc.), compute a sum by iterating through the elements of this field and adding
	// "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the
	// highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution []IoK8sAPICoreV1PreferredSchedulingTerm `json:"preferredDuringSchedulingIgnoredDuringExecution"`
	RequiredDuringSchedulingIgnoredDuringExecution  OptIoK8sAPICoreV1NodeSelector           `json:"requiredDuringSchedulingIgnoredDuringExecution"`
}

// GetPreferredDuringSchedulingIgnoredDuringExecution returns the value of PreferredDuringSchedulingIgnoredDuringExecution.
func (s *IoK8sAPICoreV1NodeAffinity) GetPreferredDuringSchedulingIgnoredDuringExecution() []IoK8sAPICoreV1PreferredSchedulingTerm {
	return s.PreferredDuringSchedulingIgnoredDuringExecution
}

// GetRequiredDuringSchedulingIgnoredDuringExecution returns the value of RequiredDuringSchedulingIgnoredDuringExecution.
func (s *IoK8sAPICoreV1NodeAffinity) GetRequiredDuringSchedulingIgnoredDuringExecution() OptIoK8sAPICoreV1NodeSelector {
	return s.RequiredDuringSchedulingIgnoredDuringExecution
}

// SetPreferredDuringSchedulingIgnoredDuringExecution sets the value of PreferredDuringSchedulingIgnoredDuringExecution.
func (s *IoK8sAPICoreV1NodeAffinity) SetPreferredDuringSchedulingIgnoredDuringExecution(val []IoK8sAPICoreV1PreferredSchedulingTerm) {
	s.PreferredDuringSchedulingIgnoredDuringExecution = val
}

// SetRequiredDuringSchedulingIgnoredDuringExecution sets the value of RequiredDuringSchedulingIgnoredDuringExecution.
func (s *IoK8sAPICoreV1NodeAffinity) SetRequiredDuringSchedulingIgnoredDuringExecution(val OptIoK8sAPICoreV1NodeSelector) {
	s.RequiredDuringSchedulingIgnoredDuringExecution = val
}

// NodeCondition contains condition information for a node.
// Ref: #/components/schemas/io.k8s.api.core.v1.NodeCondition
type IoK8sAPICoreV1NodeCondition struct {
	LastHeartbeatTime  OptIoK8sApimachineryPkgApisMetaV1Time `json:"lastHeartbeatTime"`
	LastTransitionTime OptIoK8sApimachineryPkgApisMetaV1Time `json:"lastTransitionTime"`
	// Human readable message indicating details about last transition.
	Message OptString `json:"message"`
	// (brief) reason for the condition's last transition.
	Reason OptString `json:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status string `json:"status"`
	// Type of node condition.
	Type string `json:"type"`
}

// GetLastHeartbeatTime returns the value of LastHeartbeatTime.
func (s *IoK8sAPICoreV1NodeCondition) GetLastHeartbeatTime() OptIoK8sApimachineryPkgApisMetaV1Time {
	return s.LastHeartbeatTime
}

// GetLastTransitionTime returns the value of LastTransitionTime.
func (s *IoK8sAPICoreV1NodeCondition) GetLastTransitionTime() OptIoK8sApimachineryPkgApisMetaV1Time {
	return s.LastTransitionTime
}

// GetMessage returns the value of Message.
func (s *IoK8sAPICoreV1NodeCondition) GetMessage() OptString {
	return s.Message
}

// GetReason returns the value of Reason.
func (s *IoK8sAPICoreV1NodeCondition) GetReason() OptString {
	return s.Reason
}

// GetStatus returns the value of Status.
func (s *IoK8sAPICoreV1NodeCondition) GetStatus() string {
	return s.Status
}

// GetType returns the value of Type.
func (s *IoK8sAPICoreV1NodeCondition) GetType() string {
	return s.Type
}

// SetLastHeartbeatTime sets the value of LastHeartbeatTime.
func (s *IoK8sAPICoreV1NodeCondition) SetLastHeartbeatTime(val OptIoK8sApimachineryPkgApisMetaV1Time) {
	s.LastHeartbeatTime = val
}

// SetLastTransitionTime sets the value of LastTransitionTime.
func (s *IoK8sAPICoreV1NodeCondition) SetLastTransitionTime(val OptIoK8sApimachineryPkgApisMetaV1Time) {
	s.LastTransitionTime = val
}

// SetMessage sets the value of Message.
func (s *IoK8sAPICoreV1NodeCondition) SetMessage(val OptString) {
	s.Message = val
}

// SetReason sets the value of Reason.
func (s *IoK8sAPICoreV1NodeCondition) SetReason(val OptString) {
	s.Reason = val
}

// SetStatus sets the value of Status.
func (s *IoK8sAPICoreV1NodeCondition) SetStatus(val string) {
	s.Status = val
}

// SetType sets the value of Type.
func (s *IoK8sAPICoreV1NodeCondition) SetType(val string) {
	s.Type = val
}

// NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding
// metadata) must be non-nil. This API is deprecated since 1.22.
// Ref: #/components/schemas/io.k8s.api.core.v1.NodeConfigSource
type IoK8sAPICoreV1NodeConfigSource struct {
	ConfigMap OptIoK8sAPICoreV1ConfigMapNodeConfigSource `json:"configMap"`
}

// GetConfigMap returns the value of ConfigMap.
func (s *IoK8sAPICoreV1NodeConfigSource) GetConfigMap() OptIoK8sAPICoreV1ConfigMapNodeConfigSource {
	return s.ConfigMap
}

// SetConfigMap sets the value of ConfigMap.
func (s *IoK8sAPICoreV1NodeConfigSource) SetConfigMap(val OptIoK8sAPICoreV1ConfigMapNodeConfigSource) {
	s.ConfigMap = val
}

// NodeConfigStatus describes the status of the config assigned by Node.Spec.ConfigSource.
// Ref: #/components/schemas/io.k8s.api.core.v1.NodeConfigStatus
type IoK8sAPICoreV1NodeConfigStatus struct {
	Active   OptIoK8sAPICoreV1NodeConfigSource `json:"active"`
	Assigned OptIoK8sAPICoreV1NodeConfigSource `json:"assigned"`
	// Error describes any problems reconciling the Spec.ConfigSource to the Active config. Errors may
	// occur, for example, attempting to checkpoint Spec.ConfigSource to the local Assigned record,
	// attempting to checkpoint the payload associated with Spec.ConfigSource, attempting to load or
	// validate the Assigned config, etc. Errors may occur at different points while syncing config.
	// Earlier errors (e.g. download or checkpointing errors) will not result in a rollback to
	// LastKnownGood, and may resolve across Kubelet retries. Later errors (e.g. loading or validating a
	// checkpointed config) will result in a rollback to LastKnownGood. In the latter case, it is usually
	// possible to resolve the error by fixing the config assigned in Spec.ConfigSource. You can find
	// additional information for debugging by searching the error message in the Kubelet log. Error is a
	// human-readable description of the error state; machines can check whether or not Error is empty,
	// but should not rely on the stability of the Error text across Kubelet versions.
	Error         OptString                         `json:"error"`
	LastKnownGood OptIoK8sAPICoreV1NodeConfigSource `json:"lastKnownGood"`
}

// GetActive returns the value of Active.
func (s *IoK8sAPICoreV1NodeConfigStatus) GetActive() OptIoK8sAPICoreV1NodeConfigSource {
	return s.Active
}

// GetAssigned returns the value of Assigned.
func (s *IoK8sAPICoreV1NodeConfigStatus) GetAssigned() OptIoK8sAPICoreV1NodeConfigSource {
	return s.Assigned
}

// GetError returns the value of Error.
func (s *IoK8sAPICoreV1NodeConfigStatus) GetError() OptString {
	return s.Error
}

// GetLastKnownGood returns the value of LastKnownGood.
func (s *IoK8sAPICoreV1NodeConfigStatus) GetLastKnownGood() OptIoK8sAPICoreV1NodeConfigSource {
	return s.LastKnownGood
}

// SetActive sets the value of Active.
func (s *IoK8sAPICoreV1NodeConfigStatus) SetActive(val OptIoK8sAPICoreV1NodeConfigSource) {
	s.Active = val
}

// SetAssigned sets the value of Assigned.
func (s *IoK8sAPICoreV1NodeConfigStatus) SetAssigned(val OptIoK8sAPICoreV1NodeConfigSource) {
	s.Assigned = val
}

// SetError sets the value of Error.
func (s *IoK8sAPICoreV1NodeConfigStatus) SetError(val OptString) {
	s.Error = val
}

// SetLastKnownGood sets the value of LastKnownGood.
func (s *IoK8sAPICoreV1NodeConfigStatus) SetLastKnownGood(val OptIoK8sAPICoreV1NodeConfigSource) {
	s.LastKnownGood = val
}

// NodeDaemonEndpoints lists ports opened by daemons running on the Node.
// Ref: #/components/schemas/io.k8s.api.core.v1.NodeDaemonEndpoints
type IoK8sAPICoreV1NodeDaemonEndpoints struct {
	KubeletEndpoint OptIoK8sAPICoreV1DaemonEndpoint `json:"kubeletEndpoint"`
}

// GetKubeletEndpoint returns the value of KubeletEndpoint.
func (s *IoK8sAPICoreV1NodeDaemonEndpoints) GetKubeletEndpoint() OptIoK8sAPICoreV1DaemonEndpoint {
	return s.KubeletEndpoint
}

// SetKubeletEndpoint sets the value of KubeletEndpoint.
func (s *IoK8sAPICoreV1NodeDaemonEndpoints) SetKubeletEndpoint(val OptIoK8sAPICoreV1DaemonEndpoint) {
	s.KubeletEndpoint = val
}

// NodeList is the whole list of all Nodes which have been registered with master.
// Ref: #/components/schemas/io.k8s.api.core.v1.NodeList
type IoK8sAPICoreV1NodeList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// List of nodes.
	Items []IoK8sAPICoreV1Node `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPICoreV1NodeList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPICoreV1NodeList) GetItems() []IoK8sAPICoreV1Node {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPICoreV1NodeList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPICoreV1NodeList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPICoreV1NodeList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPICoreV1NodeList) SetItems(val []IoK8sAPICoreV1Node) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPICoreV1NodeList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPICoreV1NodeList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPICoreV1NodeList) listCoreV1NodeRes() {}

// A node selector represents the union of the results of one or more label queries over a set of
// nodes; that is, it represents the OR of the selectors represented by the node selector terms.
// Ref: #/components/schemas/io.k8s.api.core.v1.NodeSelector
type IoK8sAPICoreV1NodeSelector struct {
	// Required. A list of node selector terms. The terms are ORed.
	NodeSelectorTerms []IoK8sAPICoreV1NodeSelectorTerm `json:"nodeSelectorTerms"`
}

// GetNodeSelectorTerms returns the value of NodeSelectorTerms.
func (s *IoK8sAPICoreV1NodeSelector) GetNodeSelectorTerms() []IoK8sAPICoreV1NodeSelectorTerm {
	return s.NodeSelectorTerms
}

// SetNodeSelectorTerms sets the value of NodeSelectorTerms.
func (s *IoK8sAPICoreV1NodeSelector) SetNodeSelectorTerms(val []IoK8sAPICoreV1NodeSelectorTerm) {
	s.NodeSelectorTerms = val
}

// A node selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
// Ref: #/components/schemas/io.k8s.api.core.v1.NodeSelectorRequirement
type IoK8sAPICoreV1NodeSelectorRequirement struct {
	// The label key that the selector applies to.
	Key string `json:"key"`
	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists,
	// DoesNotExist. Gt, and Lt.
	Operator string `json:"operator"`
	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If
	// the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or
	// Lt, the values array must have a single element, which will be interpreted as an integer. This
	// array is replaced during a strategic merge patch.
	Values []string `json:"values"`
}

// GetKey returns the value of Key.
func (s *IoK8sAPICoreV1NodeSelectorRequirement) GetKey() string {
	return s.Key
}

// GetOperator returns the value of Operator.
func (s *IoK8sAPICoreV1NodeSelectorRequirement) GetOperator() string {
	return s.Operator
}

// GetValues returns the value of Values.
func (s *IoK8sAPICoreV1NodeSelectorRequirement) GetValues() []string {
	return s.Values
}

// SetKey sets the value of Key.
func (s *IoK8sAPICoreV1NodeSelectorRequirement) SetKey(val string) {
	s.Key = val
}

// SetOperator sets the value of Operator.
func (s *IoK8sAPICoreV1NodeSelectorRequirement) SetOperator(val string) {
	s.Operator = val
}

// SetValues sets the value of Values.
func (s *IoK8sAPICoreV1NodeSelectorRequirement) SetValues(val []string) {
	s.Values = val
}

// A null or empty node selector term matches no objects. The requirements of them are ANDed. The
// TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
// Ref: #/components/schemas/io.k8s.api.core.v1.NodeSelectorTerm
type IoK8sAPICoreV1NodeSelectorTerm struct {
	// A list of node selector requirements by node's labels.
	MatchExpressions []IoK8sAPICoreV1NodeSelectorRequirement `json:"matchExpressions"`
	// A list of node selector requirements by node's fields.
	MatchFields []IoK8sAPICoreV1NodeSelectorRequirement `json:"matchFields"`
}

// GetMatchExpressions returns the value of MatchExpressions.
func (s *IoK8sAPICoreV1NodeSelectorTerm) GetMatchExpressions() []IoK8sAPICoreV1NodeSelectorRequirement {
	return s.MatchExpressions
}

// GetMatchFields returns the value of MatchFields.
func (s *IoK8sAPICoreV1NodeSelectorTerm) GetMatchFields() []IoK8sAPICoreV1NodeSelectorRequirement {
	return s.MatchFields
}

// SetMatchExpressions sets the value of MatchExpressions.
func (s *IoK8sAPICoreV1NodeSelectorTerm) SetMatchExpressions(val []IoK8sAPICoreV1NodeSelectorRequirement) {
	s.MatchExpressions = val
}

// SetMatchFields sets the value of MatchFields.
func (s *IoK8sAPICoreV1NodeSelectorTerm) SetMatchFields(val []IoK8sAPICoreV1NodeSelectorRequirement) {
	s.MatchFields = val
}

// NodeSpec describes the attributes that a node is created with.
// Ref: #/components/schemas/io.k8s.api.core.v1.NodeSpec
type IoK8sAPICoreV1NodeSpec struct {
	ConfigSource OptIoK8sAPICoreV1NodeConfigSource `json:"configSource"`
	// Deprecated. Not all kubelets will set this field. Remove field after 1.13. see: https://issues.k8s.
	// io/61966.
	ExternalID OptString `json:"externalID"`
	// PodCIDR represents the pod IP range assigned to the node.
	PodCIDR OptString `json:"podCIDR"`
	// PodCIDRs represents the IP ranges assigned to the node for usage by Pods on that node. If this
	// field is specified, the 0th entry must match the podCIDR field. It may contain at most 1 value for
	// each of IPv4 and IPv6.
	PodCIDRs []string `json:"podCIDRs"`
	// ID of the node assigned by the cloud provider in the format:
	// <ProviderName>://<ProviderSpecificNodeID>.
	ProviderID OptString `json:"providerID"`
	// If specified, the node's taints.
	Taints []IoK8sAPICoreV1Taint `json:"taints"`
	// Unschedulable controls node schedulability of new pods. By default, node is schedulable. More
	// info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration.
	Unschedulable OptBool `json:"unschedulable"`
}

// GetConfigSource returns the value of ConfigSource.
func (s *IoK8sAPICoreV1NodeSpec) GetConfigSource() OptIoK8sAPICoreV1NodeConfigSource {
	return s.ConfigSource
}

// GetExternalID returns the value of ExternalID.
func (s *IoK8sAPICoreV1NodeSpec) GetExternalID() OptString {
	return s.ExternalID
}

// GetPodCIDR returns the value of PodCIDR.
func (s *IoK8sAPICoreV1NodeSpec) GetPodCIDR() OptString {
	return s.PodCIDR
}

// GetPodCIDRs returns the value of PodCIDRs.
func (s *IoK8sAPICoreV1NodeSpec) GetPodCIDRs() []string {
	return s.PodCIDRs
}

// GetProviderID returns the value of ProviderID.
func (s *IoK8sAPICoreV1NodeSpec) GetProviderID() OptString {
	return s.ProviderID
}

// GetTaints returns the value of Taints.
func (s *IoK8sAPICoreV1NodeSpec) GetTaints() []IoK8sAPICoreV1Taint {
	return s.Taints
}

// GetUnschedulable returns the value of Unschedulable.
func (s *IoK8sAPICoreV1NodeSpec) GetUnschedulable() OptBool {
	return s.Unschedulable
}

// SetConfigSource sets the value of ConfigSource.
func (s *IoK8sAPICoreV1NodeSpec) SetConfigSource(val OptIoK8sAPICoreV1NodeConfigSource) {
	s.ConfigSource = val
}

// SetExternalID sets the value of ExternalID.
func (s *IoK8sAPICoreV1NodeSpec) SetExternalID(val OptString) {
	s.ExternalID = val
}

// SetPodCIDR sets the value of PodCIDR.
func (s *IoK8sAPICoreV1NodeSpec) SetPodCIDR(val OptString) {
	s.PodCIDR = val
}

// SetPodCIDRs sets the value of PodCIDRs.
func (s *IoK8sAPICoreV1NodeSpec) SetPodCIDRs(val []string) {
	s.PodCIDRs = val
}

// SetProviderID sets the value of ProviderID.
func (s *IoK8sAPICoreV1NodeSpec) SetProviderID(val OptString) {
	s.ProviderID = val
}

// SetTaints sets the value of Taints.
func (s *IoK8sAPICoreV1NodeSpec) SetTaints(val []IoK8sAPICoreV1Taint) {
	s.Taints = val
}

// SetUnschedulable sets the value of Unschedulable.
func (s *IoK8sAPICoreV1NodeSpec) SetUnschedulable(val OptBool) {
	s.Unschedulable = val
}

// NodeStatus is information about the current status of a node.
// Ref: #/components/schemas/io.k8s.api.core.v1.NodeStatus
type IoK8sAPICoreV1NodeStatus struct {
	// List of addresses reachable to the node. Queried from cloud provider, if available. More info:
	// https://kubernetes.io/docs/concepts/nodes/node/#addresses Note: This field is declared as
	// mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it
	// is merged. Callers should instead use a full-replacement patch. See http://pr.k8s.io/79391 for an
	// example.
	Addresses []IoK8sAPICoreV1NodeAddress `json:"addresses"`
	// Allocatable represents the resources of a node that are available for scheduling. Defaults to
	// Capacity.
	Allocatable OptIoK8sAPICoreV1NodeStatusAllocatable `json:"allocatable"`
	// Capacity represents the total resources of a node. More info: https://kubernetes.
	// io/docs/concepts/storage/persistent-volumes#capacity.
	Capacity OptIoK8sAPICoreV1NodeStatusCapacity `json:"capacity"`
	// Conditions is an array of current observed node conditions. More info: https://kubernetes.
	// io/docs/concepts/nodes/node/#condition.
	Conditions      []IoK8sAPICoreV1NodeCondition        `json:"conditions"`
	Config          OptIoK8sAPICoreV1NodeConfigStatus    `json:"config"`
	DaemonEndpoints OptIoK8sAPICoreV1NodeDaemonEndpoints `json:"daemonEndpoints"`
	// List of container images on this node.
	Images   []IoK8sAPICoreV1ContainerImage  `json:"images"`
	NodeInfo OptIoK8sAPICoreV1NodeSystemInfo `json:"nodeInfo"`
	// NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.
	// io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated.
	Phase OptString `json:"phase"`
	// List of volumes that are attached to the node.
	VolumesAttached []IoK8sAPICoreV1AttachedVolume `json:"volumesAttached"`
	// List of attachable volumes in use (mounted) by the node.
	VolumesInUse []string `json:"volumesInUse"`
}

// GetAddresses returns the value of Addresses.
func (s *IoK8sAPICoreV1NodeStatus) GetAddresses() []IoK8sAPICoreV1NodeAddress {
	return s.Addresses
}

// GetAllocatable returns the value of Allocatable.
func (s *IoK8sAPICoreV1NodeStatus) GetAllocatable() OptIoK8sAPICoreV1NodeStatusAllocatable {
	return s.Allocatable
}

// GetCapacity returns the value of Capacity.
func (s *IoK8sAPICoreV1NodeStatus) GetCapacity() OptIoK8sAPICoreV1NodeStatusCapacity {
	return s.Capacity
}

// GetConditions returns the value of Conditions.
func (s *IoK8sAPICoreV1NodeStatus) GetConditions() []IoK8sAPICoreV1NodeCondition {
	return s.Conditions
}

// GetConfig returns the value of Config.
func (s *IoK8sAPICoreV1NodeStatus) GetConfig() OptIoK8sAPICoreV1NodeConfigStatus {
	return s.Config
}

// GetDaemonEndpoints returns the value of DaemonEndpoints.
func (s *IoK8sAPICoreV1NodeStatus) GetDaemonEndpoints() OptIoK8sAPICoreV1NodeDaemonEndpoints {
	return s.DaemonEndpoints
}

// GetImages returns the value of Images.
func (s *IoK8sAPICoreV1NodeStatus) GetImages() []IoK8sAPICoreV1ContainerImage {
	return s.Images
}

// GetNodeInfo returns the value of NodeInfo.
func (s *IoK8sAPICoreV1NodeStatus) GetNodeInfo() OptIoK8sAPICoreV1NodeSystemInfo {
	return s.NodeInfo
}

// GetPhase returns the value of Phase.
func (s *IoK8sAPICoreV1NodeStatus) GetPhase() OptString {
	return s.Phase
}

// GetVolumesAttached returns the value of VolumesAttached.
func (s *IoK8sAPICoreV1NodeStatus) GetVolumesAttached() []IoK8sAPICoreV1AttachedVolume {
	return s.VolumesAttached
}

// GetVolumesInUse returns the value of VolumesInUse.
func (s *IoK8sAPICoreV1NodeStatus) GetVolumesInUse() []string {
	return s.VolumesInUse
}

// SetAddresses sets the value of Addresses.
func (s *IoK8sAPICoreV1NodeStatus) SetAddresses(val []IoK8sAPICoreV1NodeAddress) {
	s.Addresses = val
}

// SetAllocatable sets the value of Allocatable.
func (s *IoK8sAPICoreV1NodeStatus) SetAllocatable(val OptIoK8sAPICoreV1NodeStatusAllocatable) {
	s.Allocatable = val
}

// SetCapacity sets the value of Capacity.
func (s *IoK8sAPICoreV1NodeStatus) SetCapacity(val OptIoK8sAPICoreV1NodeStatusCapacity) {
	s.Capacity = val
}

// SetConditions sets the value of Conditions.
func (s *IoK8sAPICoreV1NodeStatus) SetConditions(val []IoK8sAPICoreV1NodeCondition) {
	s.Conditions = val
}

// SetConfig sets the value of Config.
func (s *IoK8sAPICoreV1NodeStatus) SetConfig(val OptIoK8sAPICoreV1NodeConfigStatus) {
	s.Config = val
}

// SetDaemonEndpoints sets the value of DaemonEndpoints.
func (s *IoK8sAPICoreV1NodeStatus) SetDaemonEndpoints(val OptIoK8sAPICoreV1NodeDaemonEndpoints) {
	s.DaemonEndpoints = val
}

// SetImages sets the value of Images.
func (s *IoK8sAPICoreV1NodeStatus) SetImages(val []IoK8sAPICoreV1ContainerImage) {
	s.Images = val
}

// SetNodeInfo sets the value of NodeInfo.
func (s *IoK8sAPICoreV1NodeStatus) SetNodeInfo(val OptIoK8sAPICoreV1NodeSystemInfo) {
	s.NodeInfo = val
}

// SetPhase sets the value of Phase.
func (s *IoK8sAPICoreV1NodeStatus) SetPhase(val OptString) {
	s.Phase = val
}

// SetVolumesAttached sets the value of VolumesAttached.
func (s *IoK8sAPICoreV1NodeStatus) SetVolumesAttached(val []IoK8sAPICoreV1AttachedVolume) {
	s.VolumesAttached = val
}

// SetVolumesInUse sets the value of VolumesInUse.
func (s *IoK8sAPICoreV1NodeStatus) SetVolumesInUse(val []string) {
	s.VolumesInUse = val
}

// Allocatable represents the resources of a node that are available for scheduling. Defaults to
// Capacity.
type IoK8sAPICoreV1NodeStatusAllocatable map[string]IoK8sApimachineryPkgAPIResourceQuantity

func (s *IoK8sAPICoreV1NodeStatusAllocatable) init() IoK8sAPICoreV1NodeStatusAllocatable {
	m := *s
	if m == nil {
		m = map[string]IoK8sApimachineryPkgAPIResourceQuantity{}
		*s = m
	}
	return m
}

// Capacity represents the total resources of a node. More info: https://kubernetes.
// io/docs/concepts/storage/persistent-volumes#capacity.
type IoK8sAPICoreV1NodeStatusCapacity map[string]IoK8sApimachineryPkgAPIResourceQuantity

func (s *IoK8sAPICoreV1NodeStatusCapacity) init() IoK8sAPICoreV1NodeStatusCapacity {
	m := *s
	if m == nil {
		m = map[string]IoK8sApimachineryPkgAPIResourceQuantity{}
		*s = m
	}
	return m
}

// NodeSystemInfo is a set of ids/uuids to uniquely identify the node.
// Ref: #/components/schemas/io.k8s.api.core.v1.NodeSystemInfo
type IoK8sAPICoreV1NodeSystemInfo struct {
	// The Architecture reported by the node.
	Architecture string `json:"architecture"`
	// Boot ID reported by the node.
	BootID string `json:"bootID"`
	// ContainerRuntime Version reported by the node through runtime remote API (e.g. docker://1.5.0).
	ContainerRuntimeVersion string `json:"containerRuntimeVersion"`
	// Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).
	KernelVersion string `json:"kernelVersion"`
	// KubeProxy Version reported by the node.
	KubeProxyVersion string `json:"kubeProxyVersion"`
	// Kubelet Version reported by the node.
	KubeletVersion string `json:"kubeletVersion"`
	// MachineID reported by the node. For unique machine identification in the cluster this field is
	// preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.
	// html.
	MachineID string `json:"machineID"`
	// The Operating System reported by the node.
	OperatingSystem string `json:"operatingSystem"`
	// OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).
	OsImage string `json:"osImage"`
	// SystemUUID reported by the node. For unique machine identification MachineID is preferred. This
	// field is specific to Red Hat hosts https://access.redhat.
	// com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid.
	SystemUUID string `json:"systemUUID"`
}

// GetArchitecture returns the value of Architecture.
func (s *IoK8sAPICoreV1NodeSystemInfo) GetArchitecture() string {
	return s.Architecture
}

// GetBootID returns the value of BootID.
func (s *IoK8sAPICoreV1NodeSystemInfo) GetBootID() string {
	return s.BootID
}

// GetContainerRuntimeVersion returns the value of ContainerRuntimeVersion.
func (s *IoK8sAPICoreV1NodeSystemInfo) GetContainerRuntimeVersion() string {
	return s.ContainerRuntimeVersion
}

// GetKernelVersion returns the value of KernelVersion.
func (s *IoK8sAPICoreV1NodeSystemInfo) GetKernelVersion() string {
	return s.KernelVersion
}

// GetKubeProxyVersion returns the value of KubeProxyVersion.
func (s *IoK8sAPICoreV1NodeSystemInfo) GetKubeProxyVersion() string {
	return s.KubeProxyVersion
}

// GetKubeletVersion returns the value of KubeletVersion.
func (s *IoK8sAPICoreV1NodeSystemInfo) GetKubeletVersion() string {
	return s.KubeletVersion
}

// GetMachineID returns the value of MachineID.
func (s *IoK8sAPICoreV1NodeSystemInfo) GetMachineID() string {
	return s.MachineID
}

// GetOperatingSystem returns the value of OperatingSystem.
func (s *IoK8sAPICoreV1NodeSystemInfo) GetOperatingSystem() string {
	return s.OperatingSystem
}

// GetOsImage returns the value of OsImage.
func (s *IoK8sAPICoreV1NodeSystemInfo) GetOsImage() string {
	return s.OsImage
}

// GetSystemUUID returns the value of SystemUUID.
func (s *IoK8sAPICoreV1NodeSystemInfo) GetSystemUUID() string {
	return s.SystemUUID
}

// SetArchitecture sets the value of Architecture.
func (s *IoK8sAPICoreV1NodeSystemInfo) SetArchitecture(val string) {
	s.Architecture = val
}

// SetBootID sets the value of BootID.
func (s *IoK8sAPICoreV1NodeSystemInfo) SetBootID(val string) {
	s.BootID = val
}

// SetContainerRuntimeVersion sets the value of ContainerRuntimeVersion.
func (s *IoK8sAPICoreV1NodeSystemInfo) SetContainerRuntimeVersion(val string) {
	s.ContainerRuntimeVersion = val
}

// SetKernelVersion sets the value of KernelVersion.
func (s *IoK8sAPICoreV1NodeSystemInfo) SetKernelVersion(val string) {
	s.KernelVersion = val
}

// SetKubeProxyVersion sets the value of KubeProxyVersion.
func (s *IoK8sAPICoreV1NodeSystemInfo) SetKubeProxyVersion(val string) {
	s.KubeProxyVersion = val
}

// SetKubeletVersion sets the value of KubeletVersion.
func (s *IoK8sAPICoreV1NodeSystemInfo) SetKubeletVersion(val string) {
	s.KubeletVersion = val
}

// SetMachineID sets the value of MachineID.
func (s *IoK8sAPICoreV1NodeSystemInfo) SetMachineID(val string) {
	s.MachineID = val
}

// SetOperatingSystem sets the value of OperatingSystem.
func (s *IoK8sAPICoreV1NodeSystemInfo) SetOperatingSystem(val string) {
	s.OperatingSystem = val
}

// SetOsImage sets the value of OsImage.
func (s *IoK8sAPICoreV1NodeSystemInfo) SetOsImage(val string) {
	s.OsImage = val
}

// SetSystemUUID sets the value of SystemUUID.
func (s *IoK8sAPICoreV1NodeSystemInfo) SetSystemUUID(val string) {
	s.SystemUUID = val
}

// ObjectFieldSelector selects an APIVersioned field of an object.
// Ref: #/components/schemas/io.k8s.api.core.v1.ObjectFieldSelector
type IoK8sAPICoreV1ObjectFieldSelector struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion OptString `json:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath string `json:"fieldPath"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPICoreV1ObjectFieldSelector) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetFieldPath returns the value of FieldPath.
func (s *IoK8sAPICoreV1ObjectFieldSelector) GetFieldPath() string {
	return s.FieldPath
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPICoreV1ObjectFieldSelector) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetFieldPath sets the value of FieldPath.
func (s *IoK8sAPICoreV1ObjectFieldSelector) SetFieldPath(val string) {
	s.FieldPath = val
}

// ObjectReference contains enough information to let you inspect or modify the referred object.
// Ref: #/components/schemas/io.k8s.api.core.v1.ObjectReference
type IoK8sAPICoreV1ObjectReference struct {
	// API version of the referent.
	ApiVersion OptString `json:"apiVersion"`
	// If referring to a piece of an object instead of an entire object, this string should contain a
	// valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if
	// the object reference is to a container within a pod, this would take on a value like: "spec.
	// containers{name}" (where "name" refers to the name of the container that triggered the event) or
	// if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This
	// syntax is chosen only to have some well-defined way of referencing a part of an object.
	FieldPath OptString `json:"fieldPath"`
	// Kind of the referent. More info: https://git.k8s.
	// io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind OptString `json:"kind"`
	// Name of the referent. More info: https://kubernetes.
	// io/docs/concepts/overview/working-with-objects/names/#names.
	Name OptString `json:"name"`
	// Namespace of the referent. More info: https://kubernetes.
	// io/docs/concepts/overview/working-with-objects/namespaces/.
	Namespace OptString `json:"namespace"`
	// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.
	// io/community/contributors/devel/sig-architecture/api-conventions.
	// md#concurrency-control-and-consistency.
	ResourceVersion OptString `json:"resourceVersion"`
	// UID of the referent. More info: https://kubernetes.
	// io/docs/concepts/overview/working-with-objects/names/#uids.
	UID OptString `json:"uid"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPICoreV1ObjectReference) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetFieldPath returns the value of FieldPath.
func (s *IoK8sAPICoreV1ObjectReference) GetFieldPath() OptString {
	return s.FieldPath
}

// GetKind returns the value of Kind.
func (s *IoK8sAPICoreV1ObjectReference) GetKind() OptString {
	return s.Kind
}

// GetName returns the value of Name.
func (s *IoK8sAPICoreV1ObjectReference) GetName() OptString {
	return s.Name
}

// GetNamespace returns the value of Namespace.
func (s *IoK8sAPICoreV1ObjectReference) GetNamespace() OptString {
	return s.Namespace
}

// GetResourceVersion returns the value of ResourceVersion.
func (s *IoK8sAPICoreV1ObjectReference) GetResourceVersion() OptString {
	return s.ResourceVersion
}

// GetUID returns the value of UID.
func (s *IoK8sAPICoreV1ObjectReference) GetUID() OptString {
	return s.UID
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPICoreV1ObjectReference) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetFieldPath sets the value of FieldPath.
func (s *IoK8sAPICoreV1ObjectReference) SetFieldPath(val OptString) {
	s.FieldPath = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPICoreV1ObjectReference) SetKind(val OptString) {
	s.Kind = val
}

// SetName sets the value of Name.
func (s *IoK8sAPICoreV1ObjectReference) SetName(val OptString) {
	s.Name = val
}

// SetNamespace sets the value of Namespace.
func (s *IoK8sAPICoreV1ObjectReference) SetNamespace(val OptString) {
	s.Namespace = val
}

// SetResourceVersion sets the value of ResourceVersion.
func (s *IoK8sAPICoreV1ObjectReference) SetResourceVersion(val OptString) {
	s.ResourceVersion = val
}

// SetUID sets the value of UID.
func (s *IoK8sAPICoreV1ObjectReference) SetUID(val OptString) {
	s.UID = val
}

// PersistentVolume (PV) is a storage resource provisioned by an administrator. It is analogous to a
// node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes.
// Ref: #/components/schemas/io.k8s.api.core.v1.PersistentVolume
type IoK8sAPICoreV1PersistentVolume struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                   `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata"`
	Spec     OptIoK8sAPICoreV1PersistentVolumeSpec       `json:"spec"`
	Status   OptIoK8sAPICoreV1PersistentVolumeStatus     `json:"status"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPICoreV1PersistentVolume) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sAPICoreV1PersistentVolume) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPICoreV1PersistentVolume) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetSpec returns the value of Spec.
func (s *IoK8sAPICoreV1PersistentVolume) GetSpec() OptIoK8sAPICoreV1PersistentVolumeSpec {
	return s.Spec
}

// GetStatus returns the value of Status.
func (s *IoK8sAPICoreV1PersistentVolume) GetStatus() OptIoK8sAPICoreV1PersistentVolumeStatus {
	return s.Status
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPICoreV1PersistentVolume) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPICoreV1PersistentVolume) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPICoreV1PersistentVolume) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetSpec sets the value of Spec.
func (s *IoK8sAPICoreV1PersistentVolume) SetSpec(val OptIoK8sAPICoreV1PersistentVolumeSpec) {
	s.Spec = val
}

// SetStatus sets the value of Status.
func (s *IoK8sAPICoreV1PersistentVolume) SetStatus(val OptIoK8sAPICoreV1PersistentVolumeStatus) {
	s.Status = val
}

func (*IoK8sAPICoreV1PersistentVolume) readCoreV1PersistentVolumeRes()       {}
func (*IoK8sAPICoreV1PersistentVolume) readCoreV1PersistentVolumeStatusRes() {}

// PersistentVolumeClaim is a user's request for and claim to a persistent volume.
// Ref: #/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaim
type IoK8sAPICoreV1PersistentVolumeClaim struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                    `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta  `json:"metadata"`
	Spec     OptIoK8sAPICoreV1PersistentVolumeClaimSpec   `json:"spec"`
	Status   OptIoK8sAPICoreV1PersistentVolumeClaimStatus `json:"status"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPICoreV1PersistentVolumeClaim) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sAPICoreV1PersistentVolumeClaim) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPICoreV1PersistentVolumeClaim) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetSpec returns the value of Spec.
func (s *IoK8sAPICoreV1PersistentVolumeClaim) GetSpec() OptIoK8sAPICoreV1PersistentVolumeClaimSpec {
	return s.Spec
}

// GetStatus returns the value of Status.
func (s *IoK8sAPICoreV1PersistentVolumeClaim) GetStatus() OptIoK8sAPICoreV1PersistentVolumeClaimStatus {
	return s.Status
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPICoreV1PersistentVolumeClaim) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPICoreV1PersistentVolumeClaim) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPICoreV1PersistentVolumeClaim) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetSpec sets the value of Spec.
func (s *IoK8sAPICoreV1PersistentVolumeClaim) SetSpec(val OptIoK8sAPICoreV1PersistentVolumeClaimSpec) {
	s.Spec = val
}

// SetStatus sets the value of Status.
func (s *IoK8sAPICoreV1PersistentVolumeClaim) SetStatus(val OptIoK8sAPICoreV1PersistentVolumeClaimStatus) {
	s.Status = val
}

func (*IoK8sAPICoreV1PersistentVolumeClaim) readCoreV1NamespacedPersistentVolumeClaimRes()       {}
func (*IoK8sAPICoreV1PersistentVolumeClaim) readCoreV1NamespacedPersistentVolumeClaimStatusRes() {}

// PersistentVolumeClaimCondition contails details about state of pvc.
// Ref: #/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaimCondition
type IoK8sAPICoreV1PersistentVolumeClaimCondition struct {
	LastProbeTime      OptIoK8sApimachineryPkgApisMetaV1Time `json:"lastProbeTime"`
	LastTransitionTime OptIoK8sApimachineryPkgApisMetaV1Time `json:"lastTransitionTime"`
	// Human-readable message indicating details about last transition.
	Message OptString `json:"message"`
	// Unique, this should be a short, machine understandable string that gives the reason for
	// condition's last transition. If it reports "ResizeStarted" that means the underlying persistent
	// volume is being resized.
	Reason OptString `json:"reason"`
	Status string    `json:"status"`
	Type   string    `json:"type"`
}

// GetLastProbeTime returns the value of LastProbeTime.
func (s *IoK8sAPICoreV1PersistentVolumeClaimCondition) GetLastProbeTime() OptIoK8sApimachineryPkgApisMetaV1Time {
	return s.LastProbeTime
}

// GetLastTransitionTime returns the value of LastTransitionTime.
func (s *IoK8sAPICoreV1PersistentVolumeClaimCondition) GetLastTransitionTime() OptIoK8sApimachineryPkgApisMetaV1Time {
	return s.LastTransitionTime
}

// GetMessage returns the value of Message.
func (s *IoK8sAPICoreV1PersistentVolumeClaimCondition) GetMessage() OptString {
	return s.Message
}

// GetReason returns the value of Reason.
func (s *IoK8sAPICoreV1PersistentVolumeClaimCondition) GetReason() OptString {
	return s.Reason
}

// GetStatus returns the value of Status.
func (s *IoK8sAPICoreV1PersistentVolumeClaimCondition) GetStatus() string {
	return s.Status
}

// GetType returns the value of Type.
func (s *IoK8sAPICoreV1PersistentVolumeClaimCondition) GetType() string {
	return s.Type
}

// SetLastProbeTime sets the value of LastProbeTime.
func (s *IoK8sAPICoreV1PersistentVolumeClaimCondition) SetLastProbeTime(val OptIoK8sApimachineryPkgApisMetaV1Time) {
	s.LastProbeTime = val
}

// SetLastTransitionTime sets the value of LastTransitionTime.
func (s *IoK8sAPICoreV1PersistentVolumeClaimCondition) SetLastTransitionTime(val OptIoK8sApimachineryPkgApisMetaV1Time) {
	s.LastTransitionTime = val
}

// SetMessage sets the value of Message.
func (s *IoK8sAPICoreV1PersistentVolumeClaimCondition) SetMessage(val OptString) {
	s.Message = val
}

// SetReason sets the value of Reason.
func (s *IoK8sAPICoreV1PersistentVolumeClaimCondition) SetReason(val OptString) {
	s.Reason = val
}

// SetStatus sets the value of Status.
func (s *IoK8sAPICoreV1PersistentVolumeClaimCondition) SetStatus(val string) {
	s.Status = val
}

// SetType sets the value of Type.
func (s *IoK8sAPICoreV1PersistentVolumeClaimCondition) SetType(val string) {
	s.Type = val
}

// PersistentVolumeClaimList is a list of PersistentVolumeClaim items.
// Ref: #/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaimList
type IoK8sAPICoreV1PersistentVolumeClaimList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// A list of persistent volume claims. More info: https://kubernetes.
	// io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims.
	Items []IoK8sAPICoreV1PersistentVolumeClaim `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPICoreV1PersistentVolumeClaimList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPICoreV1PersistentVolumeClaimList) GetItems() []IoK8sAPICoreV1PersistentVolumeClaim {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPICoreV1PersistentVolumeClaimList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPICoreV1PersistentVolumeClaimList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPICoreV1PersistentVolumeClaimList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPICoreV1PersistentVolumeClaimList) SetItems(val []IoK8sAPICoreV1PersistentVolumeClaim) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPICoreV1PersistentVolumeClaimList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPICoreV1PersistentVolumeClaimList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPICoreV1PersistentVolumeClaimList) listCoreV1NamespacedPersistentVolumeClaimRes() {}
func (*IoK8sAPICoreV1PersistentVolumeClaimList) listCoreV1PersistentVolumeClaimForAllNamespacesRes() {
}

// PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source
// for provider-specific attributes.
// Ref: #/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaimSpec
type IoK8sAPICoreV1PersistentVolumeClaimSpec struct {
	// AccessModes contains the desired access modes the volume should have. More info:
	// https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1.
	AccessModes   []string                                       `json:"accessModes"`
	DataSource    OptIoK8sAPICoreV1TypedLocalObjectReference     `json:"dataSource"`
	DataSourceRef OptIoK8sAPICoreV1TypedLocalObjectReference     `json:"dataSourceRef"`
	Resources     OptIoK8sAPICoreV1ResourceRequirements          `json:"resources"`
	Selector      OptIoK8sApimachineryPkgApisMetaV1LabelSelector `json:"selector"`
	// Name of the StorageClass required by the claim. More info: https://kubernetes.
	// io/docs/concepts/storage/persistent-volumes#class-1.
	StorageClassName OptString `json:"storageClassName"`
	// VolumeMode defines what type of volume is required by the claim. Value of Filesystem is implied
	// when not included in claim spec.
	VolumeMode OptString `json:"volumeMode"`
	// VolumeName is the binding reference to the PersistentVolume backing this claim.
	VolumeName OptString `json:"volumeName"`
}

// GetAccessModes returns the value of AccessModes.
func (s *IoK8sAPICoreV1PersistentVolumeClaimSpec) GetAccessModes() []string {
	return s.AccessModes
}

// GetDataSource returns the value of DataSource.
func (s *IoK8sAPICoreV1PersistentVolumeClaimSpec) GetDataSource() OptIoK8sAPICoreV1TypedLocalObjectReference {
	return s.DataSource
}

// GetDataSourceRef returns the value of DataSourceRef.
func (s *IoK8sAPICoreV1PersistentVolumeClaimSpec) GetDataSourceRef() OptIoK8sAPICoreV1TypedLocalObjectReference {
	return s.DataSourceRef
}

// GetResources returns the value of Resources.
func (s *IoK8sAPICoreV1PersistentVolumeClaimSpec) GetResources() OptIoK8sAPICoreV1ResourceRequirements {
	return s.Resources
}

// GetSelector returns the value of Selector.
func (s *IoK8sAPICoreV1PersistentVolumeClaimSpec) GetSelector() OptIoK8sApimachineryPkgApisMetaV1LabelSelector {
	return s.Selector
}

// GetStorageClassName returns the value of StorageClassName.
func (s *IoK8sAPICoreV1PersistentVolumeClaimSpec) GetStorageClassName() OptString {
	return s.StorageClassName
}

// GetVolumeMode returns the value of VolumeMode.
func (s *IoK8sAPICoreV1PersistentVolumeClaimSpec) GetVolumeMode() OptString {
	return s.VolumeMode
}

// GetVolumeName returns the value of VolumeName.
func (s *IoK8sAPICoreV1PersistentVolumeClaimSpec) GetVolumeName() OptString {
	return s.VolumeName
}

// SetAccessModes sets the value of AccessModes.
func (s *IoK8sAPICoreV1PersistentVolumeClaimSpec) SetAccessModes(val []string) {
	s.AccessModes = val
}

// SetDataSource sets the value of DataSource.
func (s *IoK8sAPICoreV1PersistentVolumeClaimSpec) SetDataSource(val OptIoK8sAPICoreV1TypedLocalObjectReference) {
	s.DataSource = val
}

// SetDataSourceRef sets the value of DataSourceRef.
func (s *IoK8sAPICoreV1PersistentVolumeClaimSpec) SetDataSourceRef(val OptIoK8sAPICoreV1TypedLocalObjectReference) {
	s.DataSourceRef = val
}

// SetResources sets the value of Resources.
func (s *IoK8sAPICoreV1PersistentVolumeClaimSpec) SetResources(val OptIoK8sAPICoreV1ResourceRequirements) {
	s.Resources = val
}

// SetSelector sets the value of Selector.
func (s *IoK8sAPICoreV1PersistentVolumeClaimSpec) SetSelector(val OptIoK8sApimachineryPkgApisMetaV1LabelSelector) {
	s.Selector = val
}

// SetStorageClassName sets the value of StorageClassName.
func (s *IoK8sAPICoreV1PersistentVolumeClaimSpec) SetStorageClassName(val OptString) {
	s.StorageClassName = val
}

// SetVolumeMode sets the value of VolumeMode.
func (s *IoK8sAPICoreV1PersistentVolumeClaimSpec) SetVolumeMode(val OptString) {
	s.VolumeMode = val
}

// SetVolumeName sets the value of VolumeName.
func (s *IoK8sAPICoreV1PersistentVolumeClaimSpec) SetVolumeName(val OptString) {
	s.VolumeName = val
}

// PersistentVolumeClaimStatus is the current status of a persistent volume claim.
// Ref: #/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaimStatus
type IoK8sAPICoreV1PersistentVolumeClaimStatus struct {
	// AccessModes contains the actual access modes the volume backing the PVC has. More info:
	// https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1.
	AccessModes []string `json:"accessModes"`
	// Represents the actual resources of the underlying volume.
	Capacity OptIoK8sAPICoreV1PersistentVolumeClaimStatusCapacity `json:"capacity"`
	// Current Condition of persistent volume claim. If underlying persistent volume is being resized
	// then the Condition will be set to 'ResizeStarted'.
	Conditions []IoK8sAPICoreV1PersistentVolumeClaimCondition `json:"conditions"`
	// Phase represents the current phase of PersistentVolumeClaim.
	Phase OptString `json:"phase"`
}

// GetAccessModes returns the value of AccessModes.
func (s *IoK8sAPICoreV1PersistentVolumeClaimStatus) GetAccessModes() []string {
	return s.AccessModes
}

// GetCapacity returns the value of Capacity.
func (s *IoK8sAPICoreV1PersistentVolumeClaimStatus) GetCapacity() OptIoK8sAPICoreV1PersistentVolumeClaimStatusCapacity {
	return s.Capacity
}

// GetConditions returns the value of Conditions.
func (s *IoK8sAPICoreV1PersistentVolumeClaimStatus) GetConditions() []IoK8sAPICoreV1PersistentVolumeClaimCondition {
	return s.Conditions
}

// GetPhase returns the value of Phase.
func (s *IoK8sAPICoreV1PersistentVolumeClaimStatus) GetPhase() OptString {
	return s.Phase
}

// SetAccessModes sets the value of AccessModes.
func (s *IoK8sAPICoreV1PersistentVolumeClaimStatus) SetAccessModes(val []string) {
	s.AccessModes = val
}

// SetCapacity sets the value of Capacity.
func (s *IoK8sAPICoreV1PersistentVolumeClaimStatus) SetCapacity(val OptIoK8sAPICoreV1PersistentVolumeClaimStatusCapacity) {
	s.Capacity = val
}

// SetConditions sets the value of Conditions.
func (s *IoK8sAPICoreV1PersistentVolumeClaimStatus) SetConditions(val []IoK8sAPICoreV1PersistentVolumeClaimCondition) {
	s.Conditions = val
}

// SetPhase sets the value of Phase.
func (s *IoK8sAPICoreV1PersistentVolumeClaimStatus) SetPhase(val OptString) {
	s.Phase = val
}

// Represents the actual resources of the underlying volume.
type IoK8sAPICoreV1PersistentVolumeClaimStatusCapacity map[string]IoK8sApimachineryPkgAPIResourceQuantity

func (s *IoK8sAPICoreV1PersistentVolumeClaimStatusCapacity) init() IoK8sAPICoreV1PersistentVolumeClaimStatusCapacity {
	m := *s
	if m == nil {
		m = map[string]IoK8sApimachineryPkgAPIResourceQuantity{}
		*s = m
	}
	return m
}

// PersistentVolumeClaimTemplate is used to produce PersistentVolumeClaim objects as part of an
// EphemeralVolumeSource.
// Ref: #/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaimTemplate
type IoK8sAPICoreV1PersistentVolumeClaimTemplate struct {
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata"`
	Spec     IoK8sAPICoreV1PersistentVolumeClaimSpec     `json:"spec"`
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPICoreV1PersistentVolumeClaimTemplate) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetSpec returns the value of Spec.
func (s *IoK8sAPICoreV1PersistentVolumeClaimTemplate) GetSpec() IoK8sAPICoreV1PersistentVolumeClaimSpec {
	return s.Spec
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPICoreV1PersistentVolumeClaimTemplate) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetSpec sets the value of Spec.
func (s *IoK8sAPICoreV1PersistentVolumeClaimTemplate) SetSpec(val IoK8sAPICoreV1PersistentVolumeClaimSpec) {
	s.Spec = val
}

// PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume
// finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is,
// essentially, a wrapper around another type of volume that is owned by someone else (the system).
// Ref: #/components/schemas/io.k8s.api.core.v1.PersistentVolumeClaimVolumeSource
type IoK8sAPICoreV1PersistentVolumeClaimVolumeSource struct {
	// ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this
	// volume. More info: https://kubernetes.
	// io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims.
	ClaimName string `json:"claimName"`
	// Will force the ReadOnly setting in VolumeMounts. Default false.
	ReadOnly OptBool `json:"readOnly"`
}

// GetClaimName returns the value of ClaimName.
func (s *IoK8sAPICoreV1PersistentVolumeClaimVolumeSource) GetClaimName() string {
	return s.ClaimName
}

// GetReadOnly returns the value of ReadOnly.
func (s *IoK8sAPICoreV1PersistentVolumeClaimVolumeSource) GetReadOnly() OptBool {
	return s.ReadOnly
}

// SetClaimName sets the value of ClaimName.
func (s *IoK8sAPICoreV1PersistentVolumeClaimVolumeSource) SetClaimName(val string) {
	s.ClaimName = val
}

// SetReadOnly sets the value of ReadOnly.
func (s *IoK8sAPICoreV1PersistentVolumeClaimVolumeSource) SetReadOnly(val OptBool) {
	s.ReadOnly = val
}

// PersistentVolumeList is a list of PersistentVolume items.
// Ref: #/components/schemas/io.k8s.api.core.v1.PersistentVolumeList
type IoK8sAPICoreV1PersistentVolumeList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// List of persistent volumes. More info: https://kubernetes.
	// io/docs/concepts/storage/persistent-volumes.
	Items []IoK8sAPICoreV1PersistentVolume `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPICoreV1PersistentVolumeList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPICoreV1PersistentVolumeList) GetItems() []IoK8sAPICoreV1PersistentVolume {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPICoreV1PersistentVolumeList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPICoreV1PersistentVolumeList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPICoreV1PersistentVolumeList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPICoreV1PersistentVolumeList) SetItems(val []IoK8sAPICoreV1PersistentVolume) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPICoreV1PersistentVolumeList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPICoreV1PersistentVolumeList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPICoreV1PersistentVolumeList) listCoreV1PersistentVolumeRes() {}

// PersistentVolumeSpec is the specification of a persistent volume.
// Ref: #/components/schemas/io.k8s.api.core.v1.PersistentVolumeSpec
type IoK8sAPICoreV1PersistentVolumeSpec struct {
	// AccessModes contains all ways the volume can be mounted. More info: https://kubernetes.
	// io/docs/concepts/storage/persistent-volumes#access-modes.
	AccessModes          []string                                          `json:"accessModes"`
	AwsElasticBlockStore OptIoK8sAPICoreV1AWSElasticBlockStoreVolumeSource `json:"awsElasticBlockStore"`
	AzureDisk            OptIoK8sAPICoreV1AzureDiskVolumeSource            `json:"azureDisk"`
	AzureFile            OptIoK8sAPICoreV1AzureFilePersistentVolumeSource  `json:"azureFile"`
	// A description of the persistent volume's resources and capacity. More info: https://kubernetes.
	// io/docs/concepts/storage/persistent-volumes#capacity.
	Capacity          OptIoK8sAPICoreV1PersistentVolumeSpecCapacity    `json:"capacity"`
	Cephfs            OptIoK8sAPICoreV1CephFSPersistentVolumeSource    `json:"cephfs"`
	Cinder            OptIoK8sAPICoreV1CinderPersistentVolumeSource    `json:"cinder"`
	ClaimRef          OptIoK8sAPICoreV1ObjectReference                 `json:"claimRef"`
	Csi               OptIoK8sAPICoreV1CSIPersistentVolumeSource       `json:"csi"`
	Fc                OptIoK8sAPICoreV1FCVolumeSource                  `json:"fc"`
	FlexVolume        OptIoK8sAPICoreV1FlexPersistentVolumeSource      `json:"flexVolume"`
	Flocker           OptIoK8sAPICoreV1FlockerVolumeSource             `json:"flocker"`
	GcePersistentDisk OptIoK8sAPICoreV1GCEPersistentDiskVolumeSource   `json:"gcePersistentDisk"`
	Glusterfs         OptIoK8sAPICoreV1GlusterfsPersistentVolumeSource `json:"glusterfs"`
	HostPath          OptIoK8sAPICoreV1HostPathVolumeSource            `json:"hostPath"`
	Iscsi             OptIoK8sAPICoreV1ISCSIPersistentVolumeSource     `json:"iscsi"`
	Local             OptIoK8sAPICoreV1LocalVolumeSource               `json:"local"`
	// A list of mount options, e.g. ["ro", "soft"]. Not validated - mount will simply fail if one is
	// invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options.
	MountOptions []string                            `json:"mountOptions"`
	Nfs          OptIoK8sAPICoreV1NFSVolumeSource    `json:"nfs"`
	NodeAffinity OptIoK8sAPICoreV1VolumeNodeAffinity `json:"nodeAffinity"`
	// What happens to a persistent volume when released from its claim. Valid options are Retain
	// (default for manually created PersistentVolumes), Delete (default for dynamically provisioned
	// PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin
	// underlying this PersistentVolume. More info: https://kubernetes.
	// io/docs/concepts/storage/persistent-volumes#reclaiming.
	PersistentVolumeReclaimPolicy OptString                                         `json:"persistentVolumeReclaimPolicy"`
	PhotonPersistentDisk          OptIoK8sAPICoreV1PhotonPersistentDiskVolumeSource `json:"photonPersistentDisk"`
	PortworxVolume                OptIoK8sAPICoreV1PortworxVolumeSource             `json:"portworxVolume"`
	Quobyte                       OptIoK8sAPICoreV1QuobyteVolumeSource              `json:"quobyte"`
	Rbd                           OptIoK8sAPICoreV1RBDPersistentVolumeSource        `json:"rbd"`
	ScaleIO                       OptIoK8sAPICoreV1ScaleIOPersistentVolumeSource    `json:"scaleIO"`
	// Name of StorageClass to which this persistent volume belongs. Empty value means that this volume
	// does not belong to any StorageClass.
	StorageClassName OptString                                        `json:"storageClassName"`
	Storageos        OptIoK8sAPICoreV1StorageOSPersistentVolumeSource `json:"storageos"`
	// VolumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in
	// raw block state. Value of Filesystem is implied when not included in spec.
	VolumeMode    OptString                                       `json:"volumeMode"`
	VsphereVolume OptIoK8sAPICoreV1VsphereVirtualDiskVolumeSource `json:"vsphereVolume"`
}

// GetAccessModes returns the value of AccessModes.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) GetAccessModes() []string {
	return s.AccessModes
}

// GetAwsElasticBlockStore returns the value of AwsElasticBlockStore.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) GetAwsElasticBlockStore() OptIoK8sAPICoreV1AWSElasticBlockStoreVolumeSource {
	return s.AwsElasticBlockStore
}

// GetAzureDisk returns the value of AzureDisk.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) GetAzureDisk() OptIoK8sAPICoreV1AzureDiskVolumeSource {
	return s.AzureDisk
}

// GetAzureFile returns the value of AzureFile.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) GetAzureFile() OptIoK8sAPICoreV1AzureFilePersistentVolumeSource {
	return s.AzureFile
}

// GetCapacity returns the value of Capacity.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) GetCapacity() OptIoK8sAPICoreV1PersistentVolumeSpecCapacity {
	return s.Capacity
}

// GetCephfs returns the value of Cephfs.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) GetCephfs() OptIoK8sAPICoreV1CephFSPersistentVolumeSource {
	return s.Cephfs
}

// GetCinder returns the value of Cinder.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) GetCinder() OptIoK8sAPICoreV1CinderPersistentVolumeSource {
	return s.Cinder
}

// GetClaimRef returns the value of ClaimRef.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) GetClaimRef() OptIoK8sAPICoreV1ObjectReference {
	return s.ClaimRef
}

// GetCsi returns the value of Csi.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) GetCsi() OptIoK8sAPICoreV1CSIPersistentVolumeSource {
	return s.Csi
}

// GetFc returns the value of Fc.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) GetFc() OptIoK8sAPICoreV1FCVolumeSource {
	return s.Fc
}

// GetFlexVolume returns the value of FlexVolume.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) GetFlexVolume() OptIoK8sAPICoreV1FlexPersistentVolumeSource {
	return s.FlexVolume
}

// GetFlocker returns the value of Flocker.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) GetFlocker() OptIoK8sAPICoreV1FlockerVolumeSource {
	return s.Flocker
}

// GetGcePersistentDisk returns the value of GcePersistentDisk.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) GetGcePersistentDisk() OptIoK8sAPICoreV1GCEPersistentDiskVolumeSource {
	return s.GcePersistentDisk
}

// GetGlusterfs returns the value of Glusterfs.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) GetGlusterfs() OptIoK8sAPICoreV1GlusterfsPersistentVolumeSource {
	return s.Glusterfs
}

// GetHostPath returns the value of HostPath.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) GetHostPath() OptIoK8sAPICoreV1HostPathVolumeSource {
	return s.HostPath
}

// GetIscsi returns the value of Iscsi.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) GetIscsi() OptIoK8sAPICoreV1ISCSIPersistentVolumeSource {
	return s.Iscsi
}

// GetLocal returns the value of Local.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) GetLocal() OptIoK8sAPICoreV1LocalVolumeSource {
	return s.Local
}

// GetMountOptions returns the value of MountOptions.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) GetMountOptions() []string {
	return s.MountOptions
}

// GetNfs returns the value of Nfs.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) GetNfs() OptIoK8sAPICoreV1NFSVolumeSource {
	return s.Nfs
}

// GetNodeAffinity returns the value of NodeAffinity.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) GetNodeAffinity() OptIoK8sAPICoreV1VolumeNodeAffinity {
	return s.NodeAffinity
}

// GetPersistentVolumeReclaimPolicy returns the value of PersistentVolumeReclaimPolicy.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) GetPersistentVolumeReclaimPolicy() OptString {
	return s.PersistentVolumeReclaimPolicy
}

// GetPhotonPersistentDisk returns the value of PhotonPersistentDisk.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) GetPhotonPersistentDisk() OptIoK8sAPICoreV1PhotonPersistentDiskVolumeSource {
	return s.PhotonPersistentDisk
}

// GetPortworxVolume returns the value of PortworxVolume.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) GetPortworxVolume() OptIoK8sAPICoreV1PortworxVolumeSource {
	return s.PortworxVolume
}

// GetQuobyte returns the value of Quobyte.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) GetQuobyte() OptIoK8sAPICoreV1QuobyteVolumeSource {
	return s.Quobyte
}

// GetRbd returns the value of Rbd.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) GetRbd() OptIoK8sAPICoreV1RBDPersistentVolumeSource {
	return s.Rbd
}

// GetScaleIO returns the value of ScaleIO.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) GetScaleIO() OptIoK8sAPICoreV1ScaleIOPersistentVolumeSource {
	return s.ScaleIO
}

// GetStorageClassName returns the value of StorageClassName.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) GetStorageClassName() OptString {
	return s.StorageClassName
}

// GetStorageos returns the value of Storageos.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) GetStorageos() OptIoK8sAPICoreV1StorageOSPersistentVolumeSource {
	return s.Storageos
}

// GetVolumeMode returns the value of VolumeMode.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) GetVolumeMode() OptString {
	return s.VolumeMode
}

// GetVsphereVolume returns the value of VsphereVolume.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) GetVsphereVolume() OptIoK8sAPICoreV1VsphereVirtualDiskVolumeSource {
	return s.VsphereVolume
}

// SetAccessModes sets the value of AccessModes.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) SetAccessModes(val []string) {
	s.AccessModes = val
}

// SetAwsElasticBlockStore sets the value of AwsElasticBlockStore.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) SetAwsElasticBlockStore(val OptIoK8sAPICoreV1AWSElasticBlockStoreVolumeSource) {
	s.AwsElasticBlockStore = val
}

// SetAzureDisk sets the value of AzureDisk.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) SetAzureDisk(val OptIoK8sAPICoreV1AzureDiskVolumeSource) {
	s.AzureDisk = val
}

// SetAzureFile sets the value of AzureFile.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) SetAzureFile(val OptIoK8sAPICoreV1AzureFilePersistentVolumeSource) {
	s.AzureFile = val
}

// SetCapacity sets the value of Capacity.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) SetCapacity(val OptIoK8sAPICoreV1PersistentVolumeSpecCapacity) {
	s.Capacity = val
}

// SetCephfs sets the value of Cephfs.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) SetCephfs(val OptIoK8sAPICoreV1CephFSPersistentVolumeSource) {
	s.Cephfs = val
}

// SetCinder sets the value of Cinder.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) SetCinder(val OptIoK8sAPICoreV1CinderPersistentVolumeSource) {
	s.Cinder = val
}

// SetClaimRef sets the value of ClaimRef.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) SetClaimRef(val OptIoK8sAPICoreV1ObjectReference) {
	s.ClaimRef = val
}

// SetCsi sets the value of Csi.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) SetCsi(val OptIoK8sAPICoreV1CSIPersistentVolumeSource) {
	s.Csi = val
}

// SetFc sets the value of Fc.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) SetFc(val OptIoK8sAPICoreV1FCVolumeSource) {
	s.Fc = val
}

// SetFlexVolume sets the value of FlexVolume.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) SetFlexVolume(val OptIoK8sAPICoreV1FlexPersistentVolumeSource) {
	s.FlexVolume = val
}

// SetFlocker sets the value of Flocker.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) SetFlocker(val OptIoK8sAPICoreV1FlockerVolumeSource) {
	s.Flocker = val
}

// SetGcePersistentDisk sets the value of GcePersistentDisk.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) SetGcePersistentDisk(val OptIoK8sAPICoreV1GCEPersistentDiskVolumeSource) {
	s.GcePersistentDisk = val
}

// SetGlusterfs sets the value of Glusterfs.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) SetGlusterfs(val OptIoK8sAPICoreV1GlusterfsPersistentVolumeSource) {
	s.Glusterfs = val
}

// SetHostPath sets the value of HostPath.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) SetHostPath(val OptIoK8sAPICoreV1HostPathVolumeSource) {
	s.HostPath = val
}

// SetIscsi sets the value of Iscsi.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) SetIscsi(val OptIoK8sAPICoreV1ISCSIPersistentVolumeSource) {
	s.Iscsi = val
}

// SetLocal sets the value of Local.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) SetLocal(val OptIoK8sAPICoreV1LocalVolumeSource) {
	s.Local = val
}

// SetMountOptions sets the value of MountOptions.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) SetMountOptions(val []string) {
	s.MountOptions = val
}

// SetNfs sets the value of Nfs.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) SetNfs(val OptIoK8sAPICoreV1NFSVolumeSource) {
	s.Nfs = val
}

// SetNodeAffinity sets the value of NodeAffinity.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) SetNodeAffinity(val OptIoK8sAPICoreV1VolumeNodeAffinity) {
	s.NodeAffinity = val
}

// SetPersistentVolumeReclaimPolicy sets the value of PersistentVolumeReclaimPolicy.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) SetPersistentVolumeReclaimPolicy(val OptString) {
	s.PersistentVolumeReclaimPolicy = val
}

// SetPhotonPersistentDisk sets the value of PhotonPersistentDisk.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) SetPhotonPersistentDisk(val OptIoK8sAPICoreV1PhotonPersistentDiskVolumeSource) {
	s.PhotonPersistentDisk = val
}

// SetPortworxVolume sets the value of PortworxVolume.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) SetPortworxVolume(val OptIoK8sAPICoreV1PortworxVolumeSource) {
	s.PortworxVolume = val
}

// SetQuobyte sets the value of Quobyte.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) SetQuobyte(val OptIoK8sAPICoreV1QuobyteVolumeSource) {
	s.Quobyte = val
}

// SetRbd sets the value of Rbd.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) SetRbd(val OptIoK8sAPICoreV1RBDPersistentVolumeSource) {
	s.Rbd = val
}

// SetScaleIO sets the value of ScaleIO.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) SetScaleIO(val OptIoK8sAPICoreV1ScaleIOPersistentVolumeSource) {
	s.ScaleIO = val
}

// SetStorageClassName sets the value of StorageClassName.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) SetStorageClassName(val OptString) {
	s.StorageClassName = val
}

// SetStorageos sets the value of Storageos.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) SetStorageos(val OptIoK8sAPICoreV1StorageOSPersistentVolumeSource) {
	s.Storageos = val
}

// SetVolumeMode sets the value of VolumeMode.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) SetVolumeMode(val OptString) {
	s.VolumeMode = val
}

// SetVsphereVolume sets the value of VsphereVolume.
func (s *IoK8sAPICoreV1PersistentVolumeSpec) SetVsphereVolume(val OptIoK8sAPICoreV1VsphereVirtualDiskVolumeSource) {
	s.VsphereVolume = val
}

// A description of the persistent volume's resources and capacity. More info: https://kubernetes.
// io/docs/concepts/storage/persistent-volumes#capacity.
type IoK8sAPICoreV1PersistentVolumeSpecCapacity map[string]IoK8sApimachineryPkgAPIResourceQuantity

func (s *IoK8sAPICoreV1PersistentVolumeSpecCapacity) init() IoK8sAPICoreV1PersistentVolumeSpecCapacity {
	m := *s
	if m == nil {
		m = map[string]IoK8sApimachineryPkgAPIResourceQuantity{}
		*s = m
	}
	return m
}

// PersistentVolumeStatus is the current status of a persistent volume.
// Ref: #/components/schemas/io.k8s.api.core.v1.PersistentVolumeStatus
type IoK8sAPICoreV1PersistentVolumeStatus struct {
	// A human-readable message indicating details about why the volume is in this state.
	Message OptString `json:"message"`
	// Phase indicates if a volume is available, bound to a claim, or released by a claim. More info:
	// https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase.
	Phase OptString `json:"phase"`
	// Reason is a brief CamelCase string that describes any failure and is meant for machine parsing and
	// tidy display in the CLI.
	Reason OptString `json:"reason"`
}

// GetMessage returns the value of Message.
func (s *IoK8sAPICoreV1PersistentVolumeStatus) GetMessage() OptString {
	return s.Message
}

// GetPhase returns the value of Phase.
func (s *IoK8sAPICoreV1PersistentVolumeStatus) GetPhase() OptString {
	return s.Phase
}

// GetReason returns the value of Reason.
func (s *IoK8sAPICoreV1PersistentVolumeStatus) GetReason() OptString {
	return s.Reason
}

// SetMessage sets the value of Message.
func (s *IoK8sAPICoreV1PersistentVolumeStatus) SetMessage(val OptString) {
	s.Message = val
}

// SetPhase sets the value of Phase.
func (s *IoK8sAPICoreV1PersistentVolumeStatus) SetPhase(val OptString) {
	s.Phase = val
}

// SetReason sets the value of Reason.
func (s *IoK8sAPICoreV1PersistentVolumeStatus) SetReason(val OptString) {
	s.Reason = val
}

// Represents a Photon Controller persistent disk resource.
// Ref: #/components/schemas/io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource
type IoK8sAPICoreV1PhotonPersistentDiskVolumeSource struct {
	// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex.
	// "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType OptString `json:"fsType"`
	// ID that identifies Photon Controller persistent disk.
	PdID string `json:"pdID"`
}

// GetFsType returns the value of FsType.
func (s *IoK8sAPICoreV1PhotonPersistentDiskVolumeSource) GetFsType() OptString {
	return s.FsType
}

// GetPdID returns the value of PdID.
func (s *IoK8sAPICoreV1PhotonPersistentDiskVolumeSource) GetPdID() string {
	return s.PdID
}

// SetFsType sets the value of FsType.
func (s *IoK8sAPICoreV1PhotonPersistentDiskVolumeSource) SetFsType(val OptString) {
	s.FsType = val
}

// SetPdID sets the value of PdID.
func (s *IoK8sAPICoreV1PhotonPersistentDiskVolumeSource) SetPdID(val string) {
	s.PdID = val
}

// Pod is a collection of containers that can run on a host. This resource is created by clients and
// scheduled onto hosts.
// Ref: #/components/schemas/io.k8s.api.core.v1.Pod
type IoK8sAPICoreV1Pod struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                   `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata"`
	Spec     OptIoK8sAPICoreV1PodSpec                    `json:"spec"`
	Status   OptIoK8sAPICoreV1PodStatus                  `json:"status"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPICoreV1Pod) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sAPICoreV1Pod) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPICoreV1Pod) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetSpec returns the value of Spec.
func (s *IoK8sAPICoreV1Pod) GetSpec() OptIoK8sAPICoreV1PodSpec {
	return s.Spec
}

// GetStatus returns the value of Status.
func (s *IoK8sAPICoreV1Pod) GetStatus() OptIoK8sAPICoreV1PodStatus {
	return s.Status
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPICoreV1Pod) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPICoreV1Pod) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPICoreV1Pod) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetSpec sets the value of Spec.
func (s *IoK8sAPICoreV1Pod) SetSpec(val OptIoK8sAPICoreV1PodSpec) {
	s.Spec = val
}

// SetStatus sets the value of Status.
func (s *IoK8sAPICoreV1Pod) SetStatus(val OptIoK8sAPICoreV1PodStatus) {
	s.Status = val
}

func (*IoK8sAPICoreV1Pod) readCoreV1NamespacedPodEphemeralcontainersRes() {}
func (*IoK8sAPICoreV1Pod) readCoreV1NamespacedPodRes()                    {}
func (*IoK8sAPICoreV1Pod) readCoreV1NamespacedPodStatusRes()              {}

// Pod affinity is a group of inter pod affinity scheduling rules.
// Ref: #/components/schemas/io.k8s.api.core.v1.PodAffinity
type IoK8sAPICoreV1PodAffinity struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions
	// specified by this field, but it may choose a node that violates one or more of the expressions.
	// The node that is most preferred is the one with the greatest sum of weights, i.e. for each node
	// that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity
	// expressions, etc.), compute a sum by iterating through the elements of this field and adding
	// "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
	// node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution []IoK8sAPICoreV1WeightedPodAffinityTerm `json:"preferredDuringSchedulingIgnoredDuringExecution"`
	// If the affinity requirements specified by this field are not met at scheduling time, the pod will
	// not be scheduled onto the node. If the affinity requirements specified by this field cease to be
	// met at some point during pod execution (e.g. due to a pod label update), the system may or may not
	// try to eventually evict the pod from its node. When there are multiple elements, the lists of
	// nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
	RequiredDuringSchedulingIgnoredDuringExecution []IoK8sAPICoreV1PodAffinityTerm `json:"requiredDuringSchedulingIgnoredDuringExecution"`
}

// GetPreferredDuringSchedulingIgnoredDuringExecution returns the value of PreferredDuringSchedulingIgnoredDuringExecution.
func (s *IoK8sAPICoreV1PodAffinity) GetPreferredDuringSchedulingIgnoredDuringExecution() []IoK8sAPICoreV1WeightedPodAffinityTerm {
	return s.PreferredDuringSchedulingIgnoredDuringExecution
}

// GetRequiredDuringSchedulingIgnoredDuringExecution returns the value of RequiredDuringSchedulingIgnoredDuringExecution.
func (s *IoK8sAPICoreV1PodAffinity) GetRequiredDuringSchedulingIgnoredDuringExecution() []IoK8sAPICoreV1PodAffinityTerm {
	return s.RequiredDuringSchedulingIgnoredDuringExecution
}

// SetPreferredDuringSchedulingIgnoredDuringExecution sets the value of PreferredDuringSchedulingIgnoredDuringExecution.
func (s *IoK8sAPICoreV1PodAffinity) SetPreferredDuringSchedulingIgnoredDuringExecution(val []IoK8sAPICoreV1WeightedPodAffinityTerm) {
	s.PreferredDuringSchedulingIgnoredDuringExecution = val
}

// SetRequiredDuringSchedulingIgnoredDuringExecution sets the value of RequiredDuringSchedulingIgnoredDuringExecution.
func (s *IoK8sAPICoreV1PodAffinity) SetRequiredDuringSchedulingIgnoredDuringExecution(val []IoK8sAPICoreV1PodAffinityTerm) {
	s.RequiredDuringSchedulingIgnoredDuringExecution = val
}

// Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s))
// that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where
// co-located is defined as running on a node whose value of the label with key <topologyKey> matches
// that of any node on which a pod of the set of pods is running.
// Ref: #/components/schemas/io.k8s.api.core.v1.PodAffinityTerm
type IoK8sAPICoreV1PodAffinityTerm struct {
	LabelSelector     OptIoK8sApimachineryPkgApisMetaV1LabelSelector `json:"labelSelector"`
	NamespaceSelector OptIoK8sApimachineryPkgApisMetaV1LabelSelector `json:"namespaceSelector"`
	// Namespaces specifies a static list of namespace names that the term applies to. The term is
	// applied to the union of the namespaces listed in this field and the ones selected by
	// namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's
	// namespace".
	Namespaces []string `json:"namespaces"`
	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
	// the labelSelector in the specified namespaces, where co-located is defined as running on a node
	// whose value of the label with key topologyKey matches that of any node on which any of the
	// selected pods is running. Empty topologyKey is not allowed.
	TopologyKey string `json:"topologyKey"`
}

// GetLabelSelector returns the value of LabelSelector.
func (s *IoK8sAPICoreV1PodAffinityTerm) GetLabelSelector() OptIoK8sApimachineryPkgApisMetaV1LabelSelector {
	return s.LabelSelector
}

// GetNamespaceSelector returns the value of NamespaceSelector.
func (s *IoK8sAPICoreV1PodAffinityTerm) GetNamespaceSelector() OptIoK8sApimachineryPkgApisMetaV1LabelSelector {
	return s.NamespaceSelector
}

// GetNamespaces returns the value of Namespaces.
func (s *IoK8sAPICoreV1PodAffinityTerm) GetNamespaces() []string {
	return s.Namespaces
}

// GetTopologyKey returns the value of TopologyKey.
func (s *IoK8sAPICoreV1PodAffinityTerm) GetTopologyKey() string {
	return s.TopologyKey
}

// SetLabelSelector sets the value of LabelSelector.
func (s *IoK8sAPICoreV1PodAffinityTerm) SetLabelSelector(val OptIoK8sApimachineryPkgApisMetaV1LabelSelector) {
	s.LabelSelector = val
}

// SetNamespaceSelector sets the value of NamespaceSelector.
func (s *IoK8sAPICoreV1PodAffinityTerm) SetNamespaceSelector(val OptIoK8sApimachineryPkgApisMetaV1LabelSelector) {
	s.NamespaceSelector = val
}

// SetNamespaces sets the value of Namespaces.
func (s *IoK8sAPICoreV1PodAffinityTerm) SetNamespaces(val []string) {
	s.Namespaces = val
}

// SetTopologyKey sets the value of TopologyKey.
func (s *IoK8sAPICoreV1PodAffinityTerm) SetTopologyKey(val string) {
	s.TopologyKey = val
}

// Pod anti affinity is a group of inter pod anti affinity scheduling rules.
// Ref: #/components/schemas/io.k8s.api.core.v1.PodAntiAffinity
type IoK8sAPICoreV1PodAntiAffinity struct {
	// The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions
	// specified by this field, but it may choose a node that violates one or more of the expressions.
	// The node that is most preferred is the one with the greatest sum of weights, i.e. for each node
	// that meets all of the scheduling requirements (resource request, requiredDuringScheduling
	// anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field
	// and adding "weight" to the sum if the node has pods which matches the corresponding
	// podAffinityTerm; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution []IoK8sAPICoreV1WeightedPodAffinityTerm `json:"preferredDuringSchedulingIgnoredDuringExecution"`
	// If the anti-affinity requirements specified by this field are not met at scheduling time, the pod
	// will not be scheduled onto the node. If the anti-affinity requirements specified by this field
	// cease to be met at some point during pod execution (e.g. due to a pod label update), the system
	// may or may not try to eventually evict the pod from its node. When there are multiple elements,
	// the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be
	// satisfied.
	RequiredDuringSchedulingIgnoredDuringExecution []IoK8sAPICoreV1PodAffinityTerm `json:"requiredDuringSchedulingIgnoredDuringExecution"`
}

// GetPreferredDuringSchedulingIgnoredDuringExecution returns the value of PreferredDuringSchedulingIgnoredDuringExecution.
func (s *IoK8sAPICoreV1PodAntiAffinity) GetPreferredDuringSchedulingIgnoredDuringExecution() []IoK8sAPICoreV1WeightedPodAffinityTerm {
	return s.PreferredDuringSchedulingIgnoredDuringExecution
}

// GetRequiredDuringSchedulingIgnoredDuringExecution returns the value of RequiredDuringSchedulingIgnoredDuringExecution.
func (s *IoK8sAPICoreV1PodAntiAffinity) GetRequiredDuringSchedulingIgnoredDuringExecution() []IoK8sAPICoreV1PodAffinityTerm {
	return s.RequiredDuringSchedulingIgnoredDuringExecution
}

// SetPreferredDuringSchedulingIgnoredDuringExecution sets the value of PreferredDuringSchedulingIgnoredDuringExecution.
func (s *IoK8sAPICoreV1PodAntiAffinity) SetPreferredDuringSchedulingIgnoredDuringExecution(val []IoK8sAPICoreV1WeightedPodAffinityTerm) {
	s.PreferredDuringSchedulingIgnoredDuringExecution = val
}

// SetRequiredDuringSchedulingIgnoredDuringExecution sets the value of RequiredDuringSchedulingIgnoredDuringExecution.
func (s *IoK8sAPICoreV1PodAntiAffinity) SetRequiredDuringSchedulingIgnoredDuringExecution(val []IoK8sAPICoreV1PodAffinityTerm) {
	s.RequiredDuringSchedulingIgnoredDuringExecution = val
}

// PodCondition contains details for the current condition of this pod.
// Ref: #/components/schemas/io.k8s.api.core.v1.PodCondition
type IoK8sAPICoreV1PodCondition struct {
	LastProbeTime      OptIoK8sApimachineryPkgApisMetaV1Time `json:"lastProbeTime"`
	LastTransitionTime OptIoK8sApimachineryPkgApisMetaV1Time `json:"lastTransitionTime"`
	// Human-readable message indicating details about last transition.
	Message OptString `json:"message"`
	// Unique, one-word, CamelCase reason for the condition's last transition.
	Reason OptString `json:"reason"`
	// Status is the status of the condition. Can be True, False, Unknown. More info: https://kubernetes.
	// io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions.
	Status string `json:"status"`
	// Type is the type of the condition. More info: https://kubernetes.
	// io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions.
	Type string `json:"type"`
}

// GetLastProbeTime returns the value of LastProbeTime.
func (s *IoK8sAPICoreV1PodCondition) GetLastProbeTime() OptIoK8sApimachineryPkgApisMetaV1Time {
	return s.LastProbeTime
}

// GetLastTransitionTime returns the value of LastTransitionTime.
func (s *IoK8sAPICoreV1PodCondition) GetLastTransitionTime() OptIoK8sApimachineryPkgApisMetaV1Time {
	return s.LastTransitionTime
}

// GetMessage returns the value of Message.
func (s *IoK8sAPICoreV1PodCondition) GetMessage() OptString {
	return s.Message
}

// GetReason returns the value of Reason.
func (s *IoK8sAPICoreV1PodCondition) GetReason() OptString {
	return s.Reason
}

// GetStatus returns the value of Status.
func (s *IoK8sAPICoreV1PodCondition) GetStatus() string {
	return s.Status
}

// GetType returns the value of Type.
func (s *IoK8sAPICoreV1PodCondition) GetType() string {
	return s.Type
}

// SetLastProbeTime sets the value of LastProbeTime.
func (s *IoK8sAPICoreV1PodCondition) SetLastProbeTime(val OptIoK8sApimachineryPkgApisMetaV1Time) {
	s.LastProbeTime = val
}

// SetLastTransitionTime sets the value of LastTransitionTime.
func (s *IoK8sAPICoreV1PodCondition) SetLastTransitionTime(val OptIoK8sApimachineryPkgApisMetaV1Time) {
	s.LastTransitionTime = val
}

// SetMessage sets the value of Message.
func (s *IoK8sAPICoreV1PodCondition) SetMessage(val OptString) {
	s.Message = val
}

// SetReason sets the value of Reason.
func (s *IoK8sAPICoreV1PodCondition) SetReason(val OptString) {
	s.Reason = val
}

// SetStatus sets the value of Status.
func (s *IoK8sAPICoreV1PodCondition) SetStatus(val string) {
	s.Status = val
}

// SetType sets the value of Type.
func (s *IoK8sAPICoreV1PodCondition) SetType(val string) {
	s.Type = val
}

// PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.
// Ref: #/components/schemas/io.k8s.api.core.v1.PodDNSConfig
type IoK8sAPICoreV1PodDNSConfig struct {
	// A list of DNS name server IP addresses. This will be appended to the base nameservers generated
	// from DNSPolicy. Duplicated nameservers will be removed.
	Nameservers []string `json:"nameservers"`
	// A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy.
	//  Duplicated entries will be removed. Resolution options given in Options will override those that
	// appear in the base DNSPolicy.
	Options []IoK8sAPICoreV1PodDNSConfigOption `json:"options"`
	// A list of DNS search domains for host-name lookup. This will be appended to the base search paths
	// generated from DNSPolicy. Duplicated search paths will be removed.
	Searches []string `json:"searches"`
}

// GetNameservers returns the value of Nameservers.
func (s *IoK8sAPICoreV1PodDNSConfig) GetNameservers() []string {
	return s.Nameservers
}

// GetOptions returns the value of Options.
func (s *IoK8sAPICoreV1PodDNSConfig) GetOptions() []IoK8sAPICoreV1PodDNSConfigOption {
	return s.Options
}

// GetSearches returns the value of Searches.
func (s *IoK8sAPICoreV1PodDNSConfig) GetSearches() []string {
	return s.Searches
}

// SetNameservers sets the value of Nameservers.
func (s *IoK8sAPICoreV1PodDNSConfig) SetNameservers(val []string) {
	s.Nameservers = val
}

// SetOptions sets the value of Options.
func (s *IoK8sAPICoreV1PodDNSConfig) SetOptions(val []IoK8sAPICoreV1PodDNSConfigOption) {
	s.Options = val
}

// SetSearches sets the value of Searches.
func (s *IoK8sAPICoreV1PodDNSConfig) SetSearches(val []string) {
	s.Searches = val
}

// PodDNSConfigOption defines DNS resolver options of a pod.
// Ref: #/components/schemas/io.k8s.api.core.v1.PodDNSConfigOption
type IoK8sAPICoreV1PodDNSConfigOption struct {
	// Required.
	Name  OptString `json:"name"`
	Value OptString `json:"value"`
}

// GetName returns the value of Name.
func (s *IoK8sAPICoreV1PodDNSConfigOption) GetName() OptString {
	return s.Name
}

// GetValue returns the value of Value.
func (s *IoK8sAPICoreV1PodDNSConfigOption) GetValue() OptString {
	return s.Value
}

// SetName sets the value of Name.
func (s *IoK8sAPICoreV1PodDNSConfigOption) SetName(val OptString) {
	s.Name = val
}

// SetValue sets the value of Value.
func (s *IoK8sAPICoreV1PodDNSConfigOption) SetValue(val OptString) {
	s.Value = val
}

// IP address information for entries in the (plural) PodIPs field. Each entry includes:
// IP: An IP address allocated to the pod. Routable at least within the cluster.
// Ref: #/components/schemas/io.k8s.api.core.v1.PodIP
type IoK8sAPICoreV1PodIP struct {
	// Ip is an IP address (IPv4 or IPv6) assigned to the pod.
	IP OptString `json:"ip"`
}

// GetIP returns the value of IP.
func (s *IoK8sAPICoreV1PodIP) GetIP() OptString {
	return s.IP
}

// SetIP sets the value of IP.
func (s *IoK8sAPICoreV1PodIP) SetIP(val OptString) {
	s.IP = val
}

// PodList is a list of Pods.
// Ref: #/components/schemas/io.k8s.api.core.v1.PodList
type IoK8sAPICoreV1PodList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// List of pods. More info: https://git.k8s.
	// io/community/contributors/devel/sig-architecture/api-conventions.md.
	Items []IoK8sAPICoreV1Pod `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPICoreV1PodList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPICoreV1PodList) GetItems() []IoK8sAPICoreV1Pod {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPICoreV1PodList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPICoreV1PodList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPICoreV1PodList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPICoreV1PodList) SetItems(val []IoK8sAPICoreV1Pod) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPICoreV1PodList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPICoreV1PodList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPICoreV1PodList) listCoreV1NamespacedPodRes()       {}
func (*IoK8sAPICoreV1PodList) listCoreV1PodForAllNamespacesRes() {}

// PodReadinessGate contains the reference to a pod condition.
// Ref: #/components/schemas/io.k8s.api.core.v1.PodReadinessGate
type IoK8sAPICoreV1PodReadinessGate struct {
	// ConditionType refers to a condition in the pod's condition list with matching type.
	ConditionType string `json:"conditionType"`
}

// GetConditionType returns the value of ConditionType.
func (s *IoK8sAPICoreV1PodReadinessGate) GetConditionType() string {
	return s.ConditionType
}

// SetConditionType sets the value of ConditionType.
func (s *IoK8sAPICoreV1PodReadinessGate) SetConditionType(val string) {
	s.ConditionType = val
}

// PodSecurityContext holds pod-level security attributes and common container settings. Some fields
// are also present in container.securityContext.  Field values of container.securityContext take
// precedence over field values of PodSecurityContext.
// Ref: #/components/schemas/io.k8s.api.core.v1.PodSecurityContext
type IoK8sAPICoreV1PodSecurityContext struct {
	// A special supplemental group that applies to all containers in a pod. Some volume types allow the
	// Kubelet to change the ownership of that volume to be owned by the pod:
	// 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume
	// will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
	// If unset, the Kubelet will not modify the ownership and permissions of any volume.
	FsGroup OptInt64 `json:"fsGroup"`
	// FsGroupChangePolicy defines behavior of changing ownership and permission of the volume before
	// being exposed inside Pod. This field will only apply to volume types which support fsGroup based
	// ownership(and permissions). It will have no effect on ephemeral volume types such as: secret,
	// configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified,
	// "Always" is used.
	FsGroupChangePolicy OptString `json:"fsGroupChangePolicy"`
	// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be
	// set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value
	// specified in SecurityContext takes precedence for that container.
	RunAsGroup OptInt64 `json:"runAsGroup"`
	// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the
	// image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if
	// it does. If unset or false, no such validation will be performed. May also be set in
	// SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in
	// SecurityContext takes precedence.
	RunAsNonRoot OptBool `json:"runAsNonRoot"`
	// The UID to run the entrypoint of the container process. Defaults to user specified in image
	// metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and
	// PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
	RunAsUser      OptInt64                        `json:"runAsUser"`
	SeLinuxOptions OptIoK8sAPICoreV1SELinuxOptions `json:"seLinuxOptions"`
	SeccompProfile OptIoK8sAPICoreV1SeccompProfile `json:"seccompProfile"`
	// A list of groups applied to the first process run in each container, in addition to the
	// container's primary GID.  If unspecified, no groups will be added to any container.
	SupplementalGroups []int64 `json:"supplementalGroups"`
	// Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the
	// container runtime) might fail to launch.
	Sysctls        []IoK8sAPICoreV1Sysctl                         `json:"sysctls"`
	WindowsOptions OptIoK8sAPICoreV1WindowsSecurityContextOptions `json:"windowsOptions"`
}

// GetFsGroup returns the value of FsGroup.
func (s *IoK8sAPICoreV1PodSecurityContext) GetFsGroup() OptInt64 {
	return s.FsGroup
}

// GetFsGroupChangePolicy returns the value of FsGroupChangePolicy.
func (s *IoK8sAPICoreV1PodSecurityContext) GetFsGroupChangePolicy() OptString {
	return s.FsGroupChangePolicy
}

// GetRunAsGroup returns the value of RunAsGroup.
func (s *IoK8sAPICoreV1PodSecurityContext) GetRunAsGroup() OptInt64 {
	return s.RunAsGroup
}

// GetRunAsNonRoot returns the value of RunAsNonRoot.
func (s *IoK8sAPICoreV1PodSecurityContext) GetRunAsNonRoot() OptBool {
	return s.RunAsNonRoot
}

// GetRunAsUser returns the value of RunAsUser.
func (s *IoK8sAPICoreV1PodSecurityContext) GetRunAsUser() OptInt64 {
	return s.RunAsUser
}

// GetSeLinuxOptions returns the value of SeLinuxOptions.
func (s *IoK8sAPICoreV1PodSecurityContext) GetSeLinuxOptions() OptIoK8sAPICoreV1SELinuxOptions {
	return s.SeLinuxOptions
}

// GetSeccompProfile returns the value of SeccompProfile.
func (s *IoK8sAPICoreV1PodSecurityContext) GetSeccompProfile() OptIoK8sAPICoreV1SeccompProfile {
	return s.SeccompProfile
}

// GetSupplementalGroups returns the value of SupplementalGroups.
func (s *IoK8sAPICoreV1PodSecurityContext) GetSupplementalGroups() []int64 {
	return s.SupplementalGroups
}

// GetSysctls returns the value of Sysctls.
func (s *IoK8sAPICoreV1PodSecurityContext) GetSysctls() []IoK8sAPICoreV1Sysctl {
	return s.Sysctls
}

// GetWindowsOptions returns the value of WindowsOptions.
func (s *IoK8sAPICoreV1PodSecurityContext) GetWindowsOptions() OptIoK8sAPICoreV1WindowsSecurityContextOptions {
	return s.WindowsOptions
}

// SetFsGroup sets the value of FsGroup.
func (s *IoK8sAPICoreV1PodSecurityContext) SetFsGroup(val OptInt64) {
	s.FsGroup = val
}

// SetFsGroupChangePolicy sets the value of FsGroupChangePolicy.
func (s *IoK8sAPICoreV1PodSecurityContext) SetFsGroupChangePolicy(val OptString) {
	s.FsGroupChangePolicy = val
}

// SetRunAsGroup sets the value of RunAsGroup.
func (s *IoK8sAPICoreV1PodSecurityContext) SetRunAsGroup(val OptInt64) {
	s.RunAsGroup = val
}

// SetRunAsNonRoot sets the value of RunAsNonRoot.
func (s *IoK8sAPICoreV1PodSecurityContext) SetRunAsNonRoot(val OptBool) {
	s.RunAsNonRoot = val
}

// SetRunAsUser sets the value of RunAsUser.
func (s *IoK8sAPICoreV1PodSecurityContext) SetRunAsUser(val OptInt64) {
	s.RunAsUser = val
}

// SetSeLinuxOptions sets the value of SeLinuxOptions.
func (s *IoK8sAPICoreV1PodSecurityContext) SetSeLinuxOptions(val OptIoK8sAPICoreV1SELinuxOptions) {
	s.SeLinuxOptions = val
}

// SetSeccompProfile sets the value of SeccompProfile.
func (s *IoK8sAPICoreV1PodSecurityContext) SetSeccompProfile(val OptIoK8sAPICoreV1SeccompProfile) {
	s.SeccompProfile = val
}

// SetSupplementalGroups sets the value of SupplementalGroups.
func (s *IoK8sAPICoreV1PodSecurityContext) SetSupplementalGroups(val []int64) {
	s.SupplementalGroups = val
}

// SetSysctls sets the value of Sysctls.
func (s *IoK8sAPICoreV1PodSecurityContext) SetSysctls(val []IoK8sAPICoreV1Sysctl) {
	s.Sysctls = val
}

// SetWindowsOptions sets the value of WindowsOptions.
func (s *IoK8sAPICoreV1PodSecurityContext) SetWindowsOptions(val OptIoK8sAPICoreV1WindowsSecurityContextOptions) {
	s.WindowsOptions = val
}

// PodSpec is a description of a pod.
// Ref: #/components/schemas/io.k8s.api.core.v1.PodSpec
type IoK8sAPICoreV1PodSpec struct {
	// Optional duration in seconds the pod may be active on the node relative to StartTime before the
	// system will actively try to mark it failed and kill associated containers. Value must be a
	// positive integer.
	ActiveDeadlineSeconds OptInt64                  `json:"activeDeadlineSeconds"`
	Affinity              OptIoK8sAPICoreV1Affinity `json:"affinity"`
	// AutomountServiceAccountToken indicates whether a service account token should be automatically
	// mounted.
	AutomountServiceAccountToken OptBool `json:"automountServiceAccountToken"`
	// List of containers belonging to the pod. Containers cannot currently be added or removed. There
	// must be at least one container in a Pod. Cannot be updated.
	Containers []IoK8sAPICoreV1Container     `json:"containers"`
	DnsConfig  OptIoK8sAPICoreV1PodDNSConfig `json:"dnsConfig"`
	// Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet',
	//  'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the
	// policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to
	// specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
	DnsPolicy OptString `json:"dnsPolicy"`
	// EnableServiceLinks indicates whether information about services should be injected into pod's
	// environment variables, matching the syntax of Docker links. Optional: Defaults to true.
	EnableServiceLinks OptBool `json:"enableServiceLinks"`
	// List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod
	// to perform user-initiated actions such as debugging. This list cannot be specified when creating a
	// pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to
	// an existing pod, use the pod's ephemeralcontainers subresource. This field is alpha-level and is
	// only honored by servers that enable the EphemeralContainers feature.
	EphemeralContainers []IoK8sAPICoreV1EphemeralContainer `json:"ephemeralContainers"`
	// HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file
	// if specified. This is only valid for non-hostNetwork pods.
	HostAliases []IoK8sAPICoreV1HostAlias `json:"hostAliases"`
	// Use the host's ipc namespace. Optional: Default to false.
	HostIPC OptBool `json:"hostIPC"`
	// Host networking requested for this pod. Use the host's network namespace. If this option is set,
	// the ports that will be used must be specified. Default to false.
	HostNetwork OptBool `json:"hostNetwork"`
	// Use the host's pid namespace. Optional: Default to false.
	HostPID OptBool `json:"hostPID"`
	// Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a
	// system-defined value.
	Hostname OptString `json:"hostname"`
	// ImagePullSecrets is an optional list of references to secrets in the same namespace to use for
	// pulling any of the images used by this PodSpec. If specified, these secrets will be passed to
	// individual puller implementations for them to use. For example, in the case of docker, only
	// DockerConfig type secrets are honored. More info: https://kubernetes.
	// io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod.
	ImagePullSecrets []IoK8sAPICoreV1LocalObjectReference `json:"imagePullSecrets"`
	// List of initialization containers belonging to the pod. Init containers are executed in order
	// prior to containers being started. If any init container fails, the pod is considered to have
	// failed and is handled according to its restartPolicy. The name for an init container or normal
	// container must be unique among all containers. Init containers may not have Lifecycle actions,
	// Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init
	// container are taken into account during scheduling by finding the highest request/limit for each
	// resource type, and then using the max of of that value or the sum of the normal containers. Limits
	// are applied to init containers in a similar fashion. Init containers cannot currently be added or
	// removed. Cannot be updated. More info: https://kubernetes.
	// io/docs/concepts/workloads/pods/init-containers/.
	InitContainers []IoK8sAPICoreV1Container `json:"initContainers"`
	// NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler
	// simply schedules this pod onto that node, assuming that it fits resource requirements.
	NodeName OptString `json:"nodeName"`
	// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must
	// match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.
	// io/docs/concepts/configuration/assign-pod-node/.
	NodeSelector OptIoK8sAPICoreV1PodSpecNodeSelector `json:"nodeSelector"`
	// Overhead represents the resource overhead associated with running a pod for a given RuntimeClass.
	// This field will be autopopulated at admission time by the RuntimeClass admission controller. If
	// the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests.
	// The RuntimeClass admission controller will reject Pod create requests which have the overhead
	// already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to
	// the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as
	// zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md This
	// field is beta-level as of Kubernetes v1.18, and is only honored by servers that enable the
	// PodOverhead feature.
	Overhead OptIoK8sAPICoreV1PodSpecOverhead `json:"overhead"`
	// PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never,
	// PreemptLowerPriority. Defaults to PreemptLowerPriority if unset. This field is beta-level, gated
	// by the NonPreemptingPriority feature-gate.
	PreemptionPolicy OptString `json:"preemptionPolicy"`
	// The priority value. Various system components use this field to find the priority of the pod. When
	// Priority Admission Controller is enabled, it prevents users from setting this field. The admission
	// controller populates this field from PriorityClassName. The higher the value, the higher the
	// priority.
	Priority OptInt32 `json:"priority"`
	// If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical"
	// are two special keywords which indicate the highest priorities with the former being the highest
	// priority. Any other name must be defined by creating a PriorityClass object with that name. If not
	// specified, the pod priority will be default or zero if there is no default.
	PriorityClassName OptString `json:"priorityClassName"`
	// If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its
	// containers are ready AND all conditions specified in the readiness gates have status equal to
	// "True" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates.
	ReadinessGates []IoK8sAPICoreV1PodReadinessGate `json:"readinessGates"`
	// Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to
	// Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy.
	RestartPolicy OptString `json:"restartPolicy"`
	// RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to
	// run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If
	// unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty
	// definition that uses the default runtime handler. More info: https://git.k8s.
	// io/enhancements/keps/sig-node/585-runtime-class This is a beta feature as of Kubernetes v1.14.
	RuntimeClassName OptString `json:"runtimeClassName"`
	// If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be
	// dispatched by default scheduler.
	SchedulerName   OptString                           `json:"schedulerName"`
	SecurityContext OptIoK8sAPICoreV1PodSecurityContext `json:"securityContext"`
	// DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use
	// serviceAccountName instead.
	ServiceAccount OptString `json:"serviceAccount"`
	// ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info:
	// https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/.
	ServiceAccountName OptString `json:"serviceAccountName"`
	// If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the
	// default). In Linux containers, this means setting the FQDN in the hostname field of the kernel
	// (the nodename field of struct utsname). In Windows containers, this means setting the registry
	// value of hostname for the registry key
	// HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters to FQDN. If a pod does not
	// have FQDN, this has no effect. Default to false.
	SetHostnameAsFQDN OptBool `json:"setHostnameAsFQDN"`
	// Share a single process namespace between all of the containers in a pod. When this is set
	// containers will be able to view and signal processes from other containers in the same pod, and
	// the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace
	// cannot both be set. Optional: Default to false.
	ShareProcessNamespace OptBool `json:"shareProcessNamespace"`
	// If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.
	// <cluster domain>". If not specified, the pod will not have a domainname at all.
	Subdomain OptString `json:"subdomain"`
	// Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete
	// request. Value must be non-negative integer. The value zero indicates stop immediately via the
	// kill signal (no opportunity to shut down). If this value is nil, the default grace period will be
	// used instead. The grace period is the duration in seconds after the processes running in the pod
	// are sent a termination signal and the time when the processes are forcibly halted with a kill
	// signal. Set this value longer than the expected cleanup time for your process. Defaults to 30
	// seconds.
	TerminationGracePeriodSeconds OptInt64 `json:"terminationGracePeriodSeconds"`
	// If specified, the pod's tolerations.
	Tolerations []IoK8sAPICoreV1Toleration `json:"tolerations"`
	// TopologySpreadConstraints describes how a group of pods ought to spread across topology domains.
	// Scheduler will schedule pods in a way which abides by the constraints. All
	// topologySpreadConstraints are ANDed.
	TopologySpreadConstraints []IoK8sAPICoreV1TopologySpreadConstraint `json:"topologySpreadConstraints"`
	// List of volumes that can be mounted by containers belonging to the pod. More info:
	// https://kubernetes.io/docs/concepts/storage/volumes.
	Volumes []IoK8sAPICoreV1Volume `json:"volumes"`
}

// GetActiveDeadlineSeconds returns the value of ActiveDeadlineSeconds.
func (s *IoK8sAPICoreV1PodSpec) GetActiveDeadlineSeconds() OptInt64 {
	return s.ActiveDeadlineSeconds
}

// GetAffinity returns the value of Affinity.
func (s *IoK8sAPICoreV1PodSpec) GetAffinity() OptIoK8sAPICoreV1Affinity {
	return s.Affinity
}

// GetAutomountServiceAccountToken returns the value of AutomountServiceAccountToken.
func (s *IoK8sAPICoreV1PodSpec) GetAutomountServiceAccountToken() OptBool {
	return s.AutomountServiceAccountToken
}

// GetContainers returns the value of Containers.
func (s *IoK8sAPICoreV1PodSpec) GetContainers() []IoK8sAPICoreV1Container {
	return s.Containers
}

// GetDnsConfig returns the value of DnsConfig.
func (s *IoK8sAPICoreV1PodSpec) GetDnsConfig() OptIoK8sAPICoreV1PodDNSConfig {
	return s.DnsConfig
}

// GetDnsPolicy returns the value of DnsPolicy.
func (s *IoK8sAPICoreV1PodSpec) GetDnsPolicy() OptString {
	return s.DnsPolicy
}

// GetEnableServiceLinks returns the value of EnableServiceLinks.
func (s *IoK8sAPICoreV1PodSpec) GetEnableServiceLinks() OptBool {
	return s.EnableServiceLinks
}

// GetEphemeralContainers returns the value of EphemeralContainers.
func (s *IoK8sAPICoreV1PodSpec) GetEphemeralContainers() []IoK8sAPICoreV1EphemeralContainer {
	return s.EphemeralContainers
}

// GetHostAliases returns the value of HostAliases.
func (s *IoK8sAPICoreV1PodSpec) GetHostAliases() []IoK8sAPICoreV1HostAlias {
	return s.HostAliases
}

// GetHostIPC returns the value of HostIPC.
func (s *IoK8sAPICoreV1PodSpec) GetHostIPC() OptBool {
	return s.HostIPC
}

// GetHostNetwork returns the value of HostNetwork.
func (s *IoK8sAPICoreV1PodSpec) GetHostNetwork() OptBool {
	return s.HostNetwork
}

// GetHostPID returns the value of HostPID.
func (s *IoK8sAPICoreV1PodSpec) GetHostPID() OptBool {
	return s.HostPID
}

// GetHostname returns the value of Hostname.
func (s *IoK8sAPICoreV1PodSpec) GetHostname() OptString {
	return s.Hostname
}

// GetImagePullSecrets returns the value of ImagePullSecrets.
func (s *IoK8sAPICoreV1PodSpec) GetImagePullSecrets() []IoK8sAPICoreV1LocalObjectReference {
	return s.ImagePullSecrets
}

// GetInitContainers returns the value of InitContainers.
func (s *IoK8sAPICoreV1PodSpec) GetInitContainers() []IoK8sAPICoreV1Container {
	return s.InitContainers
}

// GetNodeName returns the value of NodeName.
func (s *IoK8sAPICoreV1PodSpec) GetNodeName() OptString {
	return s.NodeName
}

// GetNodeSelector returns the value of NodeSelector.
func (s *IoK8sAPICoreV1PodSpec) GetNodeSelector() OptIoK8sAPICoreV1PodSpecNodeSelector {
	return s.NodeSelector
}

// GetOverhead returns the value of Overhead.
func (s *IoK8sAPICoreV1PodSpec) GetOverhead() OptIoK8sAPICoreV1PodSpecOverhead {
	return s.Overhead
}

// GetPreemptionPolicy returns the value of PreemptionPolicy.
func (s *IoK8sAPICoreV1PodSpec) GetPreemptionPolicy() OptString {
	return s.PreemptionPolicy
}

// GetPriority returns the value of Priority.
func (s *IoK8sAPICoreV1PodSpec) GetPriority() OptInt32 {
	return s.Priority
}

// GetPriorityClassName returns the value of PriorityClassName.
func (s *IoK8sAPICoreV1PodSpec) GetPriorityClassName() OptString {
	return s.PriorityClassName
}

// GetReadinessGates returns the value of ReadinessGates.
func (s *IoK8sAPICoreV1PodSpec) GetReadinessGates() []IoK8sAPICoreV1PodReadinessGate {
	return s.ReadinessGates
}

// GetRestartPolicy returns the value of RestartPolicy.
func (s *IoK8sAPICoreV1PodSpec) GetRestartPolicy() OptString {
	return s.RestartPolicy
}

// GetRuntimeClassName returns the value of RuntimeClassName.
func (s *IoK8sAPICoreV1PodSpec) GetRuntimeClassName() OptString {
	return s.RuntimeClassName
}

// GetSchedulerName returns the value of SchedulerName.
func (s *IoK8sAPICoreV1PodSpec) GetSchedulerName() OptString {
	return s.SchedulerName
}

// GetSecurityContext returns the value of SecurityContext.
func (s *IoK8sAPICoreV1PodSpec) GetSecurityContext() OptIoK8sAPICoreV1PodSecurityContext {
	return s.SecurityContext
}

// GetServiceAccount returns the value of ServiceAccount.
func (s *IoK8sAPICoreV1PodSpec) GetServiceAccount() OptString {
	return s.ServiceAccount
}

// GetServiceAccountName returns the value of ServiceAccountName.
func (s *IoK8sAPICoreV1PodSpec) GetServiceAccountName() OptString {
	return s.ServiceAccountName
}

// GetSetHostnameAsFQDN returns the value of SetHostnameAsFQDN.
func (s *IoK8sAPICoreV1PodSpec) GetSetHostnameAsFQDN() OptBool {
	return s.SetHostnameAsFQDN
}

// GetShareProcessNamespace returns the value of ShareProcessNamespace.
func (s *IoK8sAPICoreV1PodSpec) GetShareProcessNamespace() OptBool {
	return s.ShareProcessNamespace
}

// GetSubdomain returns the value of Subdomain.
func (s *IoK8sAPICoreV1PodSpec) GetSubdomain() OptString {
	return s.Subdomain
}

// GetTerminationGracePeriodSeconds returns the value of TerminationGracePeriodSeconds.
func (s *IoK8sAPICoreV1PodSpec) GetTerminationGracePeriodSeconds() OptInt64 {
	return s.TerminationGracePeriodSeconds
}

// GetTolerations returns the value of Tolerations.
func (s *IoK8sAPICoreV1PodSpec) GetTolerations() []IoK8sAPICoreV1Toleration {
	return s.Tolerations
}

// GetTopologySpreadConstraints returns the value of TopologySpreadConstraints.
func (s *IoK8sAPICoreV1PodSpec) GetTopologySpreadConstraints() []IoK8sAPICoreV1TopologySpreadConstraint {
	return s.TopologySpreadConstraints
}

// GetVolumes returns the value of Volumes.
func (s *IoK8sAPICoreV1PodSpec) GetVolumes() []IoK8sAPICoreV1Volume {
	return s.Volumes
}

// SetActiveDeadlineSeconds sets the value of ActiveDeadlineSeconds.
func (s *IoK8sAPICoreV1PodSpec) SetActiveDeadlineSeconds(val OptInt64) {
	s.ActiveDeadlineSeconds = val
}

// SetAffinity sets the value of Affinity.
func (s *IoK8sAPICoreV1PodSpec) SetAffinity(val OptIoK8sAPICoreV1Affinity) {
	s.Affinity = val
}

// SetAutomountServiceAccountToken sets the value of AutomountServiceAccountToken.
func (s *IoK8sAPICoreV1PodSpec) SetAutomountServiceAccountToken(val OptBool) {
	s.AutomountServiceAccountToken = val
}

// SetContainers sets the value of Containers.
func (s *IoK8sAPICoreV1PodSpec) SetContainers(val []IoK8sAPICoreV1Container) {
	s.Containers = val
}

// SetDnsConfig sets the value of DnsConfig.
func (s *IoK8sAPICoreV1PodSpec) SetDnsConfig(val OptIoK8sAPICoreV1PodDNSConfig) {
	s.DnsConfig = val
}

// SetDnsPolicy sets the value of DnsPolicy.
func (s *IoK8sAPICoreV1PodSpec) SetDnsPolicy(val OptString) {
	s.DnsPolicy = val
}

// SetEnableServiceLinks sets the value of EnableServiceLinks.
func (s *IoK8sAPICoreV1PodSpec) SetEnableServiceLinks(val OptBool) {
	s.EnableServiceLinks = val
}

// SetEphemeralContainers sets the value of EphemeralContainers.
func (s *IoK8sAPICoreV1PodSpec) SetEphemeralContainers(val []IoK8sAPICoreV1EphemeralContainer) {
	s.EphemeralContainers = val
}

// SetHostAliases sets the value of HostAliases.
func (s *IoK8sAPICoreV1PodSpec) SetHostAliases(val []IoK8sAPICoreV1HostAlias) {
	s.HostAliases = val
}

// SetHostIPC sets the value of HostIPC.
func (s *IoK8sAPICoreV1PodSpec) SetHostIPC(val OptBool) {
	s.HostIPC = val
}

// SetHostNetwork sets the value of HostNetwork.
func (s *IoK8sAPICoreV1PodSpec) SetHostNetwork(val OptBool) {
	s.HostNetwork = val
}

// SetHostPID sets the value of HostPID.
func (s *IoK8sAPICoreV1PodSpec) SetHostPID(val OptBool) {
	s.HostPID = val
}

// SetHostname sets the value of Hostname.
func (s *IoK8sAPICoreV1PodSpec) SetHostname(val OptString) {
	s.Hostname = val
}

// SetImagePullSecrets sets the value of ImagePullSecrets.
func (s *IoK8sAPICoreV1PodSpec) SetImagePullSecrets(val []IoK8sAPICoreV1LocalObjectReference) {
	s.ImagePullSecrets = val
}

// SetInitContainers sets the value of InitContainers.
func (s *IoK8sAPICoreV1PodSpec) SetInitContainers(val []IoK8sAPICoreV1Container) {
	s.InitContainers = val
}

// SetNodeName sets the value of NodeName.
func (s *IoK8sAPICoreV1PodSpec) SetNodeName(val OptString) {
	s.NodeName = val
}

// SetNodeSelector sets the value of NodeSelector.
func (s *IoK8sAPICoreV1PodSpec) SetNodeSelector(val OptIoK8sAPICoreV1PodSpecNodeSelector) {
	s.NodeSelector = val
}

// SetOverhead sets the value of Overhead.
func (s *IoK8sAPICoreV1PodSpec) SetOverhead(val OptIoK8sAPICoreV1PodSpecOverhead) {
	s.Overhead = val
}

// SetPreemptionPolicy sets the value of PreemptionPolicy.
func (s *IoK8sAPICoreV1PodSpec) SetPreemptionPolicy(val OptString) {
	s.PreemptionPolicy = val
}

// SetPriority sets the value of Priority.
func (s *IoK8sAPICoreV1PodSpec) SetPriority(val OptInt32) {
	s.Priority = val
}

// SetPriorityClassName sets the value of PriorityClassName.
func (s *IoK8sAPICoreV1PodSpec) SetPriorityClassName(val OptString) {
	s.PriorityClassName = val
}

// SetReadinessGates sets the value of ReadinessGates.
func (s *IoK8sAPICoreV1PodSpec) SetReadinessGates(val []IoK8sAPICoreV1PodReadinessGate) {
	s.ReadinessGates = val
}

// SetRestartPolicy sets the value of RestartPolicy.
func (s *IoK8sAPICoreV1PodSpec) SetRestartPolicy(val OptString) {
	s.RestartPolicy = val
}

// SetRuntimeClassName sets the value of RuntimeClassName.
func (s *IoK8sAPICoreV1PodSpec) SetRuntimeClassName(val OptString) {
	s.RuntimeClassName = val
}

// SetSchedulerName sets the value of SchedulerName.
func (s *IoK8sAPICoreV1PodSpec) SetSchedulerName(val OptString) {
	s.SchedulerName = val
}

// SetSecurityContext sets the value of SecurityContext.
func (s *IoK8sAPICoreV1PodSpec) SetSecurityContext(val OptIoK8sAPICoreV1PodSecurityContext) {
	s.SecurityContext = val
}

// SetServiceAccount sets the value of ServiceAccount.
func (s *IoK8sAPICoreV1PodSpec) SetServiceAccount(val OptString) {
	s.ServiceAccount = val
}

// SetServiceAccountName sets the value of ServiceAccountName.
func (s *IoK8sAPICoreV1PodSpec) SetServiceAccountName(val OptString) {
	s.ServiceAccountName = val
}

// SetSetHostnameAsFQDN sets the value of SetHostnameAsFQDN.
func (s *IoK8sAPICoreV1PodSpec) SetSetHostnameAsFQDN(val OptBool) {
	s.SetHostnameAsFQDN = val
}

// SetShareProcessNamespace sets the value of ShareProcessNamespace.
func (s *IoK8sAPICoreV1PodSpec) SetShareProcessNamespace(val OptBool) {
	s.ShareProcessNamespace = val
}

// SetSubdomain sets the value of Subdomain.
func (s *IoK8sAPICoreV1PodSpec) SetSubdomain(val OptString) {
	s.Subdomain = val
}

// SetTerminationGracePeriodSeconds sets the value of TerminationGracePeriodSeconds.
func (s *IoK8sAPICoreV1PodSpec) SetTerminationGracePeriodSeconds(val OptInt64) {
	s.TerminationGracePeriodSeconds = val
}

// SetTolerations sets the value of Tolerations.
func (s *IoK8sAPICoreV1PodSpec) SetTolerations(val []IoK8sAPICoreV1Toleration) {
	s.Tolerations = val
}

// SetTopologySpreadConstraints sets the value of TopologySpreadConstraints.
func (s *IoK8sAPICoreV1PodSpec) SetTopologySpreadConstraints(val []IoK8sAPICoreV1TopologySpreadConstraint) {
	s.TopologySpreadConstraints = val
}

// SetVolumes sets the value of Volumes.
func (s *IoK8sAPICoreV1PodSpec) SetVolumes(val []IoK8sAPICoreV1Volume) {
	s.Volumes = val
}

// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must
// match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.
// io/docs/concepts/configuration/assign-pod-node/.
type IoK8sAPICoreV1PodSpecNodeSelector map[string]string

func (s *IoK8sAPICoreV1PodSpecNodeSelector) init() IoK8sAPICoreV1PodSpecNodeSelector {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Overhead represents the resource overhead associated with running a pod for a given RuntimeClass.
// This field will be autopopulated at admission time by the RuntimeClass admission controller. If
// the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests.
// The RuntimeClass admission controller will reject Pod create requests which have the overhead
// already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to
// the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as
// zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md This
// field is beta-level as of Kubernetes v1.18, and is only honored by servers that enable the
// PodOverhead feature.
type IoK8sAPICoreV1PodSpecOverhead map[string]IoK8sApimachineryPkgAPIResourceQuantity

func (s *IoK8sAPICoreV1PodSpecOverhead) init() IoK8sAPICoreV1PodSpecOverhead {
	m := *s
	if m == nil {
		m = map[string]IoK8sApimachineryPkgAPIResourceQuantity{}
		*s = m
	}
	return m
}

// PodStatus represents information about the status of a pod. Status may trail the actual state of a
// system, especially if the node that hosts the pod cannot contact the control plane.
// Ref: #/components/schemas/io.k8s.api.core.v1.PodStatus
type IoK8sAPICoreV1PodStatus struct {
	// Current service state of pod. More info: https://kubernetes.
	// io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions.
	Conditions []IoK8sAPICoreV1PodCondition `json:"conditions"`
	// The list has one entry per container in the manifest. Each entry is currently the output of
	// `docker inspect`. More info: https://kubernetes.
	// io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status.
	ContainerStatuses []IoK8sAPICoreV1ContainerStatus `json:"containerStatuses"`
	// Status for any ephemeral containers that have run in this pod. This field is alpha-level and is
	// only populated by servers that enable the EphemeralContainers feature.
	EphemeralContainerStatuses []IoK8sAPICoreV1ContainerStatus `json:"ephemeralContainerStatuses"`
	// IP address of the host to which the pod is assigned. Empty if not yet scheduled.
	HostIP OptString `json:"hostIP"`
	// The list has one entry per init container in the manifest. The most recent successful init
	// container will have ready = true, the most recently started container will have startTime set.
	// More info: https://kubernetes.
	// io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status.
	InitContainerStatuses []IoK8sAPICoreV1ContainerStatus `json:"initContainerStatuses"`
	// A human readable message indicating details about why the pod is in this condition.
	Message OptString `json:"message"`
	// NominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be
	// scheduled right away as preemption victims receive their graceful termination periods. This field
	// does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the
	// pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the
	// resources on this node to a higher priority pod that is created after preemption. As a result,
	// this field may be different than PodSpec.nodeName when the pod is scheduled.
	NominatedNodeName OptString `json:"nominatedNodeName"`
	// The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The
	// conditions array, the reason and message fields, and the individual container status arrays
	// contain more detail about the pod's status. There are five possible phase values:
	// Pending: The pod has been accepted by the Kubernetes system, but one or more of the container
	// images has not been created. This includes time before being scheduled as well as time spent
	// downloading images over the network, which could take a while. Running: The pod has been bound to
	// a node, and all of the containers have been created. At least one container is still running, or
	// is in the process of starting or restarting. Succeeded: All containers in the pod have terminated
	// in success, and will not be restarted. Failed: All containers in the pod have terminated, and at
	// least one container has terminated in failure. The container either exited with non-zero status or
	// was terminated by the system. Unknown: For some reason the state of the pod could not be obtained,
	// typically due to an error in communicating with the host of the pod.
	// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase.
	Phase OptString `json:"phase"`
	// IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.
	PodIP OptString `json:"podIP"`
	// PodIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must
	// match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list
	// is empty if no IPs have been allocated yet.
	PodIPs []IoK8sAPICoreV1PodIP `json:"podIPs"`
	// The Quality of Service (QOS) classification assigned to the pod based on resource requirements See
	// PodQOSClass type for available QOS classes More info: https://git.k8s.
	// io/community/contributors/design-proposals/node/resource-qos.md.
	QosClass OptString `json:"qosClass"`
	// A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'.
	Reason    OptString                             `json:"reason"`
	StartTime OptIoK8sApimachineryPkgApisMetaV1Time `json:"startTime"`
}

// GetConditions returns the value of Conditions.
func (s *IoK8sAPICoreV1PodStatus) GetConditions() []IoK8sAPICoreV1PodCondition {
	return s.Conditions
}

// GetContainerStatuses returns the value of ContainerStatuses.
func (s *IoK8sAPICoreV1PodStatus) GetContainerStatuses() []IoK8sAPICoreV1ContainerStatus {
	return s.ContainerStatuses
}

// GetEphemeralContainerStatuses returns the value of EphemeralContainerStatuses.
func (s *IoK8sAPICoreV1PodStatus) GetEphemeralContainerStatuses() []IoK8sAPICoreV1ContainerStatus {
	return s.EphemeralContainerStatuses
}

// GetHostIP returns the value of HostIP.
func (s *IoK8sAPICoreV1PodStatus) GetHostIP() OptString {
	return s.HostIP
}

// GetInitContainerStatuses returns the value of InitContainerStatuses.
func (s *IoK8sAPICoreV1PodStatus) GetInitContainerStatuses() []IoK8sAPICoreV1ContainerStatus {
	return s.InitContainerStatuses
}

// GetMessage returns the value of Message.
func (s *IoK8sAPICoreV1PodStatus) GetMessage() OptString {
	return s.Message
}

// GetNominatedNodeName returns the value of NominatedNodeName.
func (s *IoK8sAPICoreV1PodStatus) GetNominatedNodeName() OptString {
	return s.NominatedNodeName
}

// GetPhase returns the value of Phase.
func (s *IoK8sAPICoreV1PodStatus) GetPhase() OptString {
	return s.Phase
}

// GetPodIP returns the value of PodIP.
func (s *IoK8sAPICoreV1PodStatus) GetPodIP() OptString {
	return s.PodIP
}

// GetPodIPs returns the value of PodIPs.
func (s *IoK8sAPICoreV1PodStatus) GetPodIPs() []IoK8sAPICoreV1PodIP {
	return s.PodIPs
}

// GetQosClass returns the value of QosClass.
func (s *IoK8sAPICoreV1PodStatus) GetQosClass() OptString {
	return s.QosClass
}

// GetReason returns the value of Reason.
func (s *IoK8sAPICoreV1PodStatus) GetReason() OptString {
	return s.Reason
}

// GetStartTime returns the value of StartTime.
func (s *IoK8sAPICoreV1PodStatus) GetStartTime() OptIoK8sApimachineryPkgApisMetaV1Time {
	return s.StartTime
}

// SetConditions sets the value of Conditions.
func (s *IoK8sAPICoreV1PodStatus) SetConditions(val []IoK8sAPICoreV1PodCondition) {
	s.Conditions = val
}

// SetContainerStatuses sets the value of ContainerStatuses.
func (s *IoK8sAPICoreV1PodStatus) SetContainerStatuses(val []IoK8sAPICoreV1ContainerStatus) {
	s.ContainerStatuses = val
}

// SetEphemeralContainerStatuses sets the value of EphemeralContainerStatuses.
func (s *IoK8sAPICoreV1PodStatus) SetEphemeralContainerStatuses(val []IoK8sAPICoreV1ContainerStatus) {
	s.EphemeralContainerStatuses = val
}

// SetHostIP sets the value of HostIP.
func (s *IoK8sAPICoreV1PodStatus) SetHostIP(val OptString) {
	s.HostIP = val
}

// SetInitContainerStatuses sets the value of InitContainerStatuses.
func (s *IoK8sAPICoreV1PodStatus) SetInitContainerStatuses(val []IoK8sAPICoreV1ContainerStatus) {
	s.InitContainerStatuses = val
}

// SetMessage sets the value of Message.
func (s *IoK8sAPICoreV1PodStatus) SetMessage(val OptString) {
	s.Message = val
}

// SetNominatedNodeName sets the value of NominatedNodeName.
func (s *IoK8sAPICoreV1PodStatus) SetNominatedNodeName(val OptString) {
	s.NominatedNodeName = val
}

// SetPhase sets the value of Phase.
func (s *IoK8sAPICoreV1PodStatus) SetPhase(val OptString) {
	s.Phase = val
}

// SetPodIP sets the value of PodIP.
func (s *IoK8sAPICoreV1PodStatus) SetPodIP(val OptString) {
	s.PodIP = val
}

// SetPodIPs sets the value of PodIPs.
func (s *IoK8sAPICoreV1PodStatus) SetPodIPs(val []IoK8sAPICoreV1PodIP) {
	s.PodIPs = val
}

// SetQosClass sets the value of QosClass.
func (s *IoK8sAPICoreV1PodStatus) SetQosClass(val OptString) {
	s.QosClass = val
}

// SetReason sets the value of Reason.
func (s *IoK8sAPICoreV1PodStatus) SetReason(val OptString) {
	s.Reason = val
}

// SetStartTime sets the value of StartTime.
func (s *IoK8sAPICoreV1PodStatus) SetStartTime(val OptIoK8sApimachineryPkgApisMetaV1Time) {
	s.StartTime = val
}

// PodTemplate describes a template for creating copies of a predefined pod.
// Ref: #/components/schemas/io.k8s.api.core.v1.PodTemplate
type IoK8sAPICoreV1PodTemplate struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                   `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata"`
	Template OptIoK8sAPICoreV1PodTemplateSpec            `json:"template"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPICoreV1PodTemplate) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sAPICoreV1PodTemplate) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPICoreV1PodTemplate) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetTemplate returns the value of Template.
func (s *IoK8sAPICoreV1PodTemplate) GetTemplate() OptIoK8sAPICoreV1PodTemplateSpec {
	return s.Template
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPICoreV1PodTemplate) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPICoreV1PodTemplate) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPICoreV1PodTemplate) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetTemplate sets the value of Template.
func (s *IoK8sAPICoreV1PodTemplate) SetTemplate(val OptIoK8sAPICoreV1PodTemplateSpec) {
	s.Template = val
}

func (*IoK8sAPICoreV1PodTemplate) readCoreV1NamespacedPodTemplateRes() {}

// PodTemplateList is a list of PodTemplates.
// Ref: #/components/schemas/io.k8s.api.core.v1.PodTemplateList
type IoK8sAPICoreV1PodTemplateList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// List of pod templates.
	Items []IoK8sAPICoreV1PodTemplate `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPICoreV1PodTemplateList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPICoreV1PodTemplateList) GetItems() []IoK8sAPICoreV1PodTemplate {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPICoreV1PodTemplateList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPICoreV1PodTemplateList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPICoreV1PodTemplateList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPICoreV1PodTemplateList) SetItems(val []IoK8sAPICoreV1PodTemplate) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPICoreV1PodTemplateList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPICoreV1PodTemplateList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPICoreV1PodTemplateList) listCoreV1NamespacedPodTemplateRes()       {}
func (*IoK8sAPICoreV1PodTemplateList) listCoreV1PodTemplateForAllNamespacesRes() {}

// PodTemplateSpec describes the data a pod should have when created from a template.
// Ref: #/components/schemas/io.k8s.api.core.v1.PodTemplateSpec
type IoK8sAPICoreV1PodTemplateSpec struct {
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata"`
	Spec     OptIoK8sAPICoreV1PodSpec                    `json:"spec"`
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPICoreV1PodTemplateSpec) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetSpec returns the value of Spec.
func (s *IoK8sAPICoreV1PodTemplateSpec) GetSpec() OptIoK8sAPICoreV1PodSpec {
	return s.Spec
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPICoreV1PodTemplateSpec) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetSpec sets the value of Spec.
func (s *IoK8sAPICoreV1PodTemplateSpec) SetSpec(val OptIoK8sAPICoreV1PodSpec) {
	s.Spec = val
}

// Ref: #/components/schemas/io.k8s.api.core.v1.PortStatus
type IoK8sAPICoreV1PortStatus struct {
	// Error is to record the problem with the service port The format of the error shall comply with the
	// following rules: - built-in error values shall be specified in this file and those shall use
	// CamelCase names
	// - cloud provider specific error values must have names that comply with the
	// format foo.example.com/CamelCase.
	Error OptString `json:"error"`
	// Port is the port number of the service port of which status is recorded here.
	Port int32 `json:"port"`
	// Protocol is the protocol of the service port of which status is recorded here The supported values
	// are: "TCP", "UDP", "SCTP".
	Protocol string `json:"protocol"`
}

// GetError returns the value of Error.
func (s *IoK8sAPICoreV1PortStatus) GetError() OptString {
	return s.Error
}

// GetPort returns the value of Port.
func (s *IoK8sAPICoreV1PortStatus) GetPort() int32 {
	return s.Port
}

// GetProtocol returns the value of Protocol.
func (s *IoK8sAPICoreV1PortStatus) GetProtocol() string {
	return s.Protocol
}

// SetError sets the value of Error.
func (s *IoK8sAPICoreV1PortStatus) SetError(val OptString) {
	s.Error = val
}

// SetPort sets the value of Port.
func (s *IoK8sAPICoreV1PortStatus) SetPort(val int32) {
	s.Port = val
}

// SetProtocol sets the value of Protocol.
func (s *IoK8sAPICoreV1PortStatus) SetProtocol(val string) {
	s.Protocol = val
}

// PortworxVolumeSource represents a Portworx volume resource.
// Ref: #/components/schemas/io.k8s.api.core.v1.PortworxVolumeSource
type IoK8sAPICoreV1PortworxVolumeSource struct {
	// FSType represents the filesystem type to mount Must be a filesystem type supported by the host
	// operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
	FsType OptString `json:"fsType"`
	// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly OptBool `json:"readOnly"`
	// VolumeID uniquely identifies a Portworx volume.
	VolumeID string `json:"volumeID"`
}

// GetFsType returns the value of FsType.
func (s *IoK8sAPICoreV1PortworxVolumeSource) GetFsType() OptString {
	return s.FsType
}

// GetReadOnly returns the value of ReadOnly.
func (s *IoK8sAPICoreV1PortworxVolumeSource) GetReadOnly() OptBool {
	return s.ReadOnly
}

// GetVolumeID returns the value of VolumeID.
func (s *IoK8sAPICoreV1PortworxVolumeSource) GetVolumeID() string {
	return s.VolumeID
}

// SetFsType sets the value of FsType.
func (s *IoK8sAPICoreV1PortworxVolumeSource) SetFsType(val OptString) {
	s.FsType = val
}

// SetReadOnly sets the value of ReadOnly.
func (s *IoK8sAPICoreV1PortworxVolumeSource) SetReadOnly(val OptBool) {
	s.ReadOnly = val
}

// SetVolumeID sets the value of VolumeID.
func (s *IoK8sAPICoreV1PortworxVolumeSource) SetVolumeID(val string) {
	s.VolumeID = val
}

// An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op).
// A null preferred scheduling term matches no objects (i.e. is also a no-op).
// Ref: #/components/schemas/io.k8s.api.core.v1.PreferredSchedulingTerm
type IoK8sAPICoreV1PreferredSchedulingTerm struct {
	Preference IoK8sAPICoreV1NodeSelectorTerm `json:"preference"`
	// Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
	Weight int32 `json:"weight"`
}

// GetPreference returns the value of Preference.
func (s *IoK8sAPICoreV1PreferredSchedulingTerm) GetPreference() IoK8sAPICoreV1NodeSelectorTerm {
	return s.Preference
}

// GetWeight returns the value of Weight.
func (s *IoK8sAPICoreV1PreferredSchedulingTerm) GetWeight() int32 {
	return s.Weight
}

// SetPreference sets the value of Preference.
func (s *IoK8sAPICoreV1PreferredSchedulingTerm) SetPreference(val IoK8sAPICoreV1NodeSelectorTerm) {
	s.Preference = val
}

// SetWeight sets the value of Weight.
func (s *IoK8sAPICoreV1PreferredSchedulingTerm) SetWeight(val int32) {
	s.Weight = val
}

// Probe describes a health check to be performed against a container to determine whether it is
// alive or ready to receive traffic.
// Ref: #/components/schemas/io.k8s.api.core.v1.Probe
type IoK8sAPICoreV1Probe struct {
	Exec OptIoK8sAPICoreV1ExecAction `json:"exec"`
	// Minimum consecutive failures for the probe to be considered failed after having succeeded.
	// Defaults to 3. Minimum value is 1.
	FailureThreshold OptInt32                       `json:"failureThreshold"`
	HttpGet          OptIoK8sAPICoreV1HTTPGetAction `json:"httpGet"`
	// Number of seconds after the container has started before liveness probes are initiated. More info:
	// https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes.
	InitialDelaySeconds OptInt32 `json:"initialDelaySeconds"`
	// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
	PeriodSeconds OptInt32 `json:"periodSeconds"`
	// Minimum consecutive successes for the probe to be considered successful after having failed.
	// Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
	SuccessThreshold OptInt32                         `json:"successThreshold"`
	TcpSocket        OptIoK8sAPICoreV1TCPSocketAction `json:"tcpSocket"`
	// Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace
	// period is the duration in seconds after the processes running in the pod are sent a termination
	// signal and the time when the processes are forcibly halted with a kill signal. Set this value
	// longer than the expected cleanup time for your process. If this value is nil, the pod's
	// terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by
	// the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via
	// the kill signal (no opportunity to shut down). This is a beta field and requires enabling
	// ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds
	// is used if unset.
	TerminationGracePeriodSeconds OptInt64 `json:"terminationGracePeriodSeconds"`
	// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More
	// info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes.
	TimeoutSeconds OptInt32 `json:"timeoutSeconds"`
}

// GetExec returns the value of Exec.
func (s *IoK8sAPICoreV1Probe) GetExec() OptIoK8sAPICoreV1ExecAction {
	return s.Exec
}

// GetFailureThreshold returns the value of FailureThreshold.
func (s *IoK8sAPICoreV1Probe) GetFailureThreshold() OptInt32 {
	return s.FailureThreshold
}

// GetHttpGet returns the value of HttpGet.
func (s *IoK8sAPICoreV1Probe) GetHttpGet() OptIoK8sAPICoreV1HTTPGetAction {
	return s.HttpGet
}

// GetInitialDelaySeconds returns the value of InitialDelaySeconds.
func (s *IoK8sAPICoreV1Probe) GetInitialDelaySeconds() OptInt32 {
	return s.InitialDelaySeconds
}

// GetPeriodSeconds returns the value of PeriodSeconds.
func (s *IoK8sAPICoreV1Probe) GetPeriodSeconds() OptInt32 {
	return s.PeriodSeconds
}

// GetSuccessThreshold returns the value of SuccessThreshold.
func (s *IoK8sAPICoreV1Probe) GetSuccessThreshold() OptInt32 {
	return s.SuccessThreshold
}

// GetTcpSocket returns the value of TcpSocket.
func (s *IoK8sAPICoreV1Probe) GetTcpSocket() OptIoK8sAPICoreV1TCPSocketAction {
	return s.TcpSocket
}

// GetTerminationGracePeriodSeconds returns the value of TerminationGracePeriodSeconds.
func (s *IoK8sAPICoreV1Probe) GetTerminationGracePeriodSeconds() OptInt64 {
	return s.TerminationGracePeriodSeconds
}

// GetTimeoutSeconds returns the value of TimeoutSeconds.
func (s *IoK8sAPICoreV1Probe) GetTimeoutSeconds() OptInt32 {
	return s.TimeoutSeconds
}

// SetExec sets the value of Exec.
func (s *IoK8sAPICoreV1Probe) SetExec(val OptIoK8sAPICoreV1ExecAction) {
	s.Exec = val
}

// SetFailureThreshold sets the value of FailureThreshold.
func (s *IoK8sAPICoreV1Probe) SetFailureThreshold(val OptInt32) {
	s.FailureThreshold = val
}

// SetHttpGet sets the value of HttpGet.
func (s *IoK8sAPICoreV1Probe) SetHttpGet(val OptIoK8sAPICoreV1HTTPGetAction) {
	s.HttpGet = val
}

// SetInitialDelaySeconds sets the value of InitialDelaySeconds.
func (s *IoK8sAPICoreV1Probe) SetInitialDelaySeconds(val OptInt32) {
	s.InitialDelaySeconds = val
}

// SetPeriodSeconds sets the value of PeriodSeconds.
func (s *IoK8sAPICoreV1Probe) SetPeriodSeconds(val OptInt32) {
	s.PeriodSeconds = val
}

// SetSuccessThreshold sets the value of SuccessThreshold.
func (s *IoK8sAPICoreV1Probe) SetSuccessThreshold(val OptInt32) {
	s.SuccessThreshold = val
}

// SetTcpSocket sets the value of TcpSocket.
func (s *IoK8sAPICoreV1Probe) SetTcpSocket(val OptIoK8sAPICoreV1TCPSocketAction) {
	s.TcpSocket = val
}

// SetTerminationGracePeriodSeconds sets the value of TerminationGracePeriodSeconds.
func (s *IoK8sAPICoreV1Probe) SetTerminationGracePeriodSeconds(val OptInt64) {
	s.TerminationGracePeriodSeconds = val
}

// SetTimeoutSeconds sets the value of TimeoutSeconds.
func (s *IoK8sAPICoreV1Probe) SetTimeoutSeconds(val OptInt32) {
	s.TimeoutSeconds = val
}

// Represents a projected volume source.
// Ref: #/components/schemas/io.k8s.api.core.v1.ProjectedVolumeSource
type IoK8sAPICoreV1ProjectedVolumeSource struct {
	// Mode bits used to set permissions on created files by default. Must be an octal value between 0000
	// and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON
	// requires decimal values for mode bits. Directories within the path are not affected by this
	// setting. This might be in conflict with other options that affect the file mode, like fsGroup, and
	// the result can be other mode bits set.
	DefaultMode OptInt32 `json:"defaultMode"`
	// List of volume projections.
	Sources []IoK8sAPICoreV1VolumeProjection `json:"sources"`
}

// GetDefaultMode returns the value of DefaultMode.
func (s *IoK8sAPICoreV1ProjectedVolumeSource) GetDefaultMode() OptInt32 {
	return s.DefaultMode
}

// GetSources returns the value of Sources.
func (s *IoK8sAPICoreV1ProjectedVolumeSource) GetSources() []IoK8sAPICoreV1VolumeProjection {
	return s.Sources
}

// SetDefaultMode sets the value of DefaultMode.
func (s *IoK8sAPICoreV1ProjectedVolumeSource) SetDefaultMode(val OptInt32) {
	s.DefaultMode = val
}

// SetSources sets the value of Sources.
func (s *IoK8sAPICoreV1ProjectedVolumeSource) SetSources(val []IoK8sAPICoreV1VolumeProjection) {
	s.Sources = val
}

// Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support
// ownership management or SELinux relabeling.
// Ref: #/components/schemas/io.k8s.api.core.v1.QuobyteVolumeSource
type IoK8sAPICoreV1QuobyteVolumeSource struct {
	// Group to map volume access to Default is no group.
	Group OptString `json:"group"`
	// ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to
	// false.
	ReadOnly OptBool `json:"readOnly"`
	// Registry represents a single or multiple Quobyte Registry services specified as a string as
	// host:port pair (multiple entries are separated with commas) which acts as the central registry for
	// volumes.
	Registry string `json:"registry"`
	// Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte
	// volumes, value is set by the plugin.
	Tenant OptString `json:"tenant"`
	// User to map volume access to Defaults to serivceaccount user.
	User OptString `json:"user"`
	// Volume is a string that references an already created Quobyte volume by name.
	Volume string `json:"volume"`
}

// GetGroup returns the value of Group.
func (s *IoK8sAPICoreV1QuobyteVolumeSource) GetGroup() OptString {
	return s.Group
}

// GetReadOnly returns the value of ReadOnly.
func (s *IoK8sAPICoreV1QuobyteVolumeSource) GetReadOnly() OptBool {
	return s.ReadOnly
}

// GetRegistry returns the value of Registry.
func (s *IoK8sAPICoreV1QuobyteVolumeSource) GetRegistry() string {
	return s.Registry
}

// GetTenant returns the value of Tenant.
func (s *IoK8sAPICoreV1QuobyteVolumeSource) GetTenant() OptString {
	return s.Tenant
}

// GetUser returns the value of User.
func (s *IoK8sAPICoreV1QuobyteVolumeSource) GetUser() OptString {
	return s.User
}

// GetVolume returns the value of Volume.
func (s *IoK8sAPICoreV1QuobyteVolumeSource) GetVolume() string {
	return s.Volume
}

// SetGroup sets the value of Group.
func (s *IoK8sAPICoreV1QuobyteVolumeSource) SetGroup(val OptString) {
	s.Group = val
}

// SetReadOnly sets the value of ReadOnly.
func (s *IoK8sAPICoreV1QuobyteVolumeSource) SetReadOnly(val OptBool) {
	s.ReadOnly = val
}

// SetRegistry sets the value of Registry.
func (s *IoK8sAPICoreV1QuobyteVolumeSource) SetRegistry(val string) {
	s.Registry = val
}

// SetTenant sets the value of Tenant.
func (s *IoK8sAPICoreV1QuobyteVolumeSource) SetTenant(val OptString) {
	s.Tenant = val
}

// SetUser sets the value of User.
func (s *IoK8sAPICoreV1QuobyteVolumeSource) SetUser(val OptString) {
	s.User = val
}

// SetVolume sets the value of Volume.
func (s *IoK8sAPICoreV1QuobyteVolumeSource) SetVolume(val string) {
	s.Volume = val
}

// Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support
// ownership management and SELinux relabeling.
// Ref: #/components/schemas/io.k8s.api.core.v1.RBDPersistentVolumeSource
type IoK8sAPICoreV1RBDPersistentVolumeSource struct {
	// Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is
	// supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be
	// "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd.
	FsType OptString `json:"fsType"`
	// The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it.
	Image string `json:"image"`
	// Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info:
	// https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it.
	Keyring OptString `json:"keyring"`
	// A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.
	// md#how-to-use-it.
	Monitors []string `json:"monitors"`
	// The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.
	// md#how-to-use-it.
	Pool OptString `json:"pool"`
	// ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info:
	// https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it.
	ReadOnly  OptBool                          `json:"readOnly"`
	SecretRef OptIoK8sAPICoreV1SecretReference `json:"secretRef"`
	// The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.
	// md#how-to-use-it.
	User OptString `json:"user"`
}

// GetFsType returns the value of FsType.
func (s *IoK8sAPICoreV1RBDPersistentVolumeSource) GetFsType() OptString {
	return s.FsType
}

// GetImage returns the value of Image.
func (s *IoK8sAPICoreV1RBDPersistentVolumeSource) GetImage() string {
	return s.Image
}

// GetKeyring returns the value of Keyring.
func (s *IoK8sAPICoreV1RBDPersistentVolumeSource) GetKeyring() OptString {
	return s.Keyring
}

// GetMonitors returns the value of Monitors.
func (s *IoK8sAPICoreV1RBDPersistentVolumeSource) GetMonitors() []string {
	return s.Monitors
}

// GetPool returns the value of Pool.
func (s *IoK8sAPICoreV1RBDPersistentVolumeSource) GetPool() OptString {
	return s.Pool
}

// GetReadOnly returns the value of ReadOnly.
func (s *IoK8sAPICoreV1RBDPersistentVolumeSource) GetReadOnly() OptBool {
	return s.ReadOnly
}

// GetSecretRef returns the value of SecretRef.
func (s *IoK8sAPICoreV1RBDPersistentVolumeSource) GetSecretRef() OptIoK8sAPICoreV1SecretReference {
	return s.SecretRef
}

// GetUser returns the value of User.
func (s *IoK8sAPICoreV1RBDPersistentVolumeSource) GetUser() OptString {
	return s.User
}

// SetFsType sets the value of FsType.
func (s *IoK8sAPICoreV1RBDPersistentVolumeSource) SetFsType(val OptString) {
	s.FsType = val
}

// SetImage sets the value of Image.
func (s *IoK8sAPICoreV1RBDPersistentVolumeSource) SetImage(val string) {
	s.Image = val
}

// SetKeyring sets the value of Keyring.
func (s *IoK8sAPICoreV1RBDPersistentVolumeSource) SetKeyring(val OptString) {
	s.Keyring = val
}

// SetMonitors sets the value of Monitors.
func (s *IoK8sAPICoreV1RBDPersistentVolumeSource) SetMonitors(val []string) {
	s.Monitors = val
}

// SetPool sets the value of Pool.
func (s *IoK8sAPICoreV1RBDPersistentVolumeSource) SetPool(val OptString) {
	s.Pool = val
}

// SetReadOnly sets the value of ReadOnly.
func (s *IoK8sAPICoreV1RBDPersistentVolumeSource) SetReadOnly(val OptBool) {
	s.ReadOnly = val
}

// SetSecretRef sets the value of SecretRef.
func (s *IoK8sAPICoreV1RBDPersistentVolumeSource) SetSecretRef(val OptIoK8sAPICoreV1SecretReference) {
	s.SecretRef = val
}

// SetUser sets the value of User.
func (s *IoK8sAPICoreV1RBDPersistentVolumeSource) SetUser(val OptString) {
	s.User = val
}

// Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support
// ownership management and SELinux relabeling.
// Ref: #/components/schemas/io.k8s.api.core.v1.RBDVolumeSource
type IoK8sAPICoreV1RBDVolumeSource struct {
	// Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is
	// supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be
	// "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd.
	FsType OptString `json:"fsType"`
	// The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it.
	Image string `json:"image"`
	// Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info:
	// https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it.
	Keyring OptString `json:"keyring"`
	// A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.
	// md#how-to-use-it.
	Monitors []string `json:"monitors"`
	// The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.
	// md#how-to-use-it.
	Pool OptString `json:"pool"`
	// ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info:
	// https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it.
	ReadOnly  OptBool                               `json:"readOnly"`
	SecretRef OptIoK8sAPICoreV1LocalObjectReference `json:"secretRef"`
	// The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.
	// md#how-to-use-it.
	User OptString `json:"user"`
}

// GetFsType returns the value of FsType.
func (s *IoK8sAPICoreV1RBDVolumeSource) GetFsType() OptString {
	return s.FsType
}

// GetImage returns the value of Image.
func (s *IoK8sAPICoreV1RBDVolumeSource) GetImage() string {
	return s.Image
}

// GetKeyring returns the value of Keyring.
func (s *IoK8sAPICoreV1RBDVolumeSource) GetKeyring() OptString {
	return s.Keyring
}

// GetMonitors returns the value of Monitors.
func (s *IoK8sAPICoreV1RBDVolumeSource) GetMonitors() []string {
	return s.Monitors
}

// GetPool returns the value of Pool.
func (s *IoK8sAPICoreV1RBDVolumeSource) GetPool() OptString {
	return s.Pool
}

// GetReadOnly returns the value of ReadOnly.
func (s *IoK8sAPICoreV1RBDVolumeSource) GetReadOnly() OptBool {
	return s.ReadOnly
}

// GetSecretRef returns the value of SecretRef.
func (s *IoK8sAPICoreV1RBDVolumeSource) GetSecretRef() OptIoK8sAPICoreV1LocalObjectReference {
	return s.SecretRef
}

// GetUser returns the value of User.
func (s *IoK8sAPICoreV1RBDVolumeSource) GetUser() OptString {
	return s.User
}

// SetFsType sets the value of FsType.
func (s *IoK8sAPICoreV1RBDVolumeSource) SetFsType(val OptString) {
	s.FsType = val
}

// SetImage sets the value of Image.
func (s *IoK8sAPICoreV1RBDVolumeSource) SetImage(val string) {
	s.Image = val
}

// SetKeyring sets the value of Keyring.
func (s *IoK8sAPICoreV1RBDVolumeSource) SetKeyring(val OptString) {
	s.Keyring = val
}

// SetMonitors sets the value of Monitors.
func (s *IoK8sAPICoreV1RBDVolumeSource) SetMonitors(val []string) {
	s.Monitors = val
}

// SetPool sets the value of Pool.
func (s *IoK8sAPICoreV1RBDVolumeSource) SetPool(val OptString) {
	s.Pool = val
}

// SetReadOnly sets the value of ReadOnly.
func (s *IoK8sAPICoreV1RBDVolumeSource) SetReadOnly(val OptBool) {
	s.ReadOnly = val
}

// SetSecretRef sets the value of SecretRef.
func (s *IoK8sAPICoreV1RBDVolumeSource) SetSecretRef(val OptIoK8sAPICoreV1LocalObjectReference) {
	s.SecretRef = val
}

// SetUser sets the value of User.
func (s *IoK8sAPICoreV1RBDVolumeSource) SetUser(val OptString) {
	s.User = val
}

// ReplicationController represents the configuration of a replication controller.
// Ref: #/components/schemas/io.k8s.api.core.v1.ReplicationController
type IoK8sAPICoreV1ReplicationController struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                    `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta  `json:"metadata"`
	Spec     OptIoK8sAPICoreV1ReplicationControllerSpec   `json:"spec"`
	Status   OptIoK8sAPICoreV1ReplicationControllerStatus `json:"status"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPICoreV1ReplicationController) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sAPICoreV1ReplicationController) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPICoreV1ReplicationController) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetSpec returns the value of Spec.
func (s *IoK8sAPICoreV1ReplicationController) GetSpec() OptIoK8sAPICoreV1ReplicationControllerSpec {
	return s.Spec
}

// GetStatus returns the value of Status.
func (s *IoK8sAPICoreV1ReplicationController) GetStatus() OptIoK8sAPICoreV1ReplicationControllerStatus {
	return s.Status
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPICoreV1ReplicationController) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPICoreV1ReplicationController) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPICoreV1ReplicationController) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetSpec sets the value of Spec.
func (s *IoK8sAPICoreV1ReplicationController) SetSpec(val OptIoK8sAPICoreV1ReplicationControllerSpec) {
	s.Spec = val
}

// SetStatus sets the value of Status.
func (s *IoK8sAPICoreV1ReplicationController) SetStatus(val OptIoK8sAPICoreV1ReplicationControllerStatus) {
	s.Status = val
}

func (*IoK8sAPICoreV1ReplicationController) readCoreV1NamespacedReplicationControllerRes()       {}
func (*IoK8sAPICoreV1ReplicationController) readCoreV1NamespacedReplicationControllerStatusRes() {}

// ReplicationControllerCondition describes the state of a replication controller at a certain point.
// Ref: #/components/schemas/io.k8s.api.core.v1.ReplicationControllerCondition
type IoK8sAPICoreV1ReplicationControllerCondition struct {
	LastTransitionTime OptIoK8sApimachineryPkgApisMetaV1Time `json:"lastTransitionTime"`
	// A human readable message indicating details about the transition.
	Message OptString `json:"message"`
	// The reason for the condition's last transition.
	Reason OptString `json:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status string `json:"status"`
	// Type of replication controller condition.
	Type string `json:"type"`
}

// GetLastTransitionTime returns the value of LastTransitionTime.
func (s *IoK8sAPICoreV1ReplicationControllerCondition) GetLastTransitionTime() OptIoK8sApimachineryPkgApisMetaV1Time {
	return s.LastTransitionTime
}

// GetMessage returns the value of Message.
func (s *IoK8sAPICoreV1ReplicationControllerCondition) GetMessage() OptString {
	return s.Message
}

// GetReason returns the value of Reason.
func (s *IoK8sAPICoreV1ReplicationControllerCondition) GetReason() OptString {
	return s.Reason
}

// GetStatus returns the value of Status.
func (s *IoK8sAPICoreV1ReplicationControllerCondition) GetStatus() string {
	return s.Status
}

// GetType returns the value of Type.
func (s *IoK8sAPICoreV1ReplicationControllerCondition) GetType() string {
	return s.Type
}

// SetLastTransitionTime sets the value of LastTransitionTime.
func (s *IoK8sAPICoreV1ReplicationControllerCondition) SetLastTransitionTime(val OptIoK8sApimachineryPkgApisMetaV1Time) {
	s.LastTransitionTime = val
}

// SetMessage sets the value of Message.
func (s *IoK8sAPICoreV1ReplicationControllerCondition) SetMessage(val OptString) {
	s.Message = val
}

// SetReason sets the value of Reason.
func (s *IoK8sAPICoreV1ReplicationControllerCondition) SetReason(val OptString) {
	s.Reason = val
}

// SetStatus sets the value of Status.
func (s *IoK8sAPICoreV1ReplicationControllerCondition) SetStatus(val string) {
	s.Status = val
}

// SetType sets the value of Type.
func (s *IoK8sAPICoreV1ReplicationControllerCondition) SetType(val string) {
	s.Type = val
}

// ReplicationControllerList is a collection of replication controllers.
// Ref: #/components/schemas/io.k8s.api.core.v1.ReplicationControllerList
type IoK8sAPICoreV1ReplicationControllerList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// List of replication controllers. More info: https://kubernetes.
	// io/docs/concepts/workloads/controllers/replicationcontroller.
	Items []IoK8sAPICoreV1ReplicationController `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPICoreV1ReplicationControllerList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPICoreV1ReplicationControllerList) GetItems() []IoK8sAPICoreV1ReplicationController {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPICoreV1ReplicationControllerList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPICoreV1ReplicationControllerList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPICoreV1ReplicationControllerList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPICoreV1ReplicationControllerList) SetItems(val []IoK8sAPICoreV1ReplicationController) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPICoreV1ReplicationControllerList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPICoreV1ReplicationControllerList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPICoreV1ReplicationControllerList) listCoreV1NamespacedReplicationControllerRes() {}
func (*IoK8sAPICoreV1ReplicationControllerList) listCoreV1ReplicationControllerForAllNamespacesRes() {
}

// ReplicationControllerSpec is the specification of a replication controller.
// Ref: #/components/schemas/io.k8s.api.core.v1.ReplicationControllerSpec
type IoK8sAPICoreV1ReplicationControllerSpec struct {
	// Minimum number of seconds for which a newly created pod should be ready without any of its
	// container crashing, for it to be considered available. Defaults to 0 (pod will be considered
	// available as soon as it is ready).
	MinReadySeconds OptInt32 `json:"minReadySeconds"`
	// Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero
	// and unspecified. Defaults to 1. More info: https://kubernetes.
	// io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller.
	Replicas OptInt32 `json:"replicas"`
	// Selector is a label query over pods that should match the Replicas count. If Selector is empty, it
	// is defaulted to the labels present on the Pod template. Label keys and values that must match in
	// order to be controlled by this replication controller, if empty defaulted to labels on Pod
	// template. More info: https://kubernetes.
	// io/docs/concepts/overview/working-with-objects/labels/#label-selectors.
	Selector OptIoK8sAPICoreV1ReplicationControllerSpecSelector `json:"selector"`
	Template OptIoK8sAPICoreV1PodTemplateSpec                   `json:"template"`
}

// GetMinReadySeconds returns the value of MinReadySeconds.
func (s *IoK8sAPICoreV1ReplicationControllerSpec) GetMinReadySeconds() OptInt32 {
	return s.MinReadySeconds
}

// GetReplicas returns the value of Replicas.
func (s *IoK8sAPICoreV1ReplicationControllerSpec) GetReplicas() OptInt32 {
	return s.Replicas
}

// GetSelector returns the value of Selector.
func (s *IoK8sAPICoreV1ReplicationControllerSpec) GetSelector() OptIoK8sAPICoreV1ReplicationControllerSpecSelector {
	return s.Selector
}

// GetTemplate returns the value of Template.
func (s *IoK8sAPICoreV1ReplicationControllerSpec) GetTemplate() OptIoK8sAPICoreV1PodTemplateSpec {
	return s.Template
}

// SetMinReadySeconds sets the value of MinReadySeconds.
func (s *IoK8sAPICoreV1ReplicationControllerSpec) SetMinReadySeconds(val OptInt32) {
	s.MinReadySeconds = val
}

// SetReplicas sets the value of Replicas.
func (s *IoK8sAPICoreV1ReplicationControllerSpec) SetReplicas(val OptInt32) {
	s.Replicas = val
}

// SetSelector sets the value of Selector.
func (s *IoK8sAPICoreV1ReplicationControllerSpec) SetSelector(val OptIoK8sAPICoreV1ReplicationControllerSpecSelector) {
	s.Selector = val
}

// SetTemplate sets the value of Template.
func (s *IoK8sAPICoreV1ReplicationControllerSpec) SetTemplate(val OptIoK8sAPICoreV1PodTemplateSpec) {
	s.Template = val
}

// Selector is a label query over pods that should match the Replicas count. If Selector is empty, it
// is defaulted to the labels present on the Pod template. Label keys and values that must match in
// order to be controlled by this replication controller, if empty defaulted to labels on Pod
// template. More info: https://kubernetes.
// io/docs/concepts/overview/working-with-objects/labels/#label-selectors.
type IoK8sAPICoreV1ReplicationControllerSpecSelector map[string]string

func (s *IoK8sAPICoreV1ReplicationControllerSpecSelector) init() IoK8sAPICoreV1ReplicationControllerSpecSelector {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// ReplicationControllerStatus represents the current status of a replication controller.
// Ref: #/components/schemas/io.k8s.api.core.v1.ReplicationControllerStatus
type IoK8sAPICoreV1ReplicationControllerStatus struct {
	// The number of available replicas (ready for at least minReadySeconds) for this replication
	// controller.
	AvailableReplicas OptInt32 `json:"availableReplicas"`
	// Represents the latest available observations of a replication controller's current state.
	Conditions []IoK8sAPICoreV1ReplicationControllerCondition `json:"conditions"`
	// The number of pods that have labels matching the labels of the pod template of the replication
	// controller.
	FullyLabeledReplicas OptInt32 `json:"fullyLabeledReplicas"`
	// ObservedGeneration reflects the generation of the most recently observed replication controller.
	ObservedGeneration OptInt64 `json:"observedGeneration"`
	// The number of ready replicas for this replication controller.
	ReadyReplicas OptInt32 `json:"readyReplicas"`
	// Replicas is the most recently oberved number of replicas. More info: https://kubernetes.
	// io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller.
	Replicas int32 `json:"replicas"`
}

// GetAvailableReplicas returns the value of AvailableReplicas.
func (s *IoK8sAPICoreV1ReplicationControllerStatus) GetAvailableReplicas() OptInt32 {
	return s.AvailableReplicas
}

// GetConditions returns the value of Conditions.
func (s *IoK8sAPICoreV1ReplicationControllerStatus) GetConditions() []IoK8sAPICoreV1ReplicationControllerCondition {
	return s.Conditions
}

// GetFullyLabeledReplicas returns the value of FullyLabeledReplicas.
func (s *IoK8sAPICoreV1ReplicationControllerStatus) GetFullyLabeledReplicas() OptInt32 {
	return s.FullyLabeledReplicas
}

// GetObservedGeneration returns the value of ObservedGeneration.
func (s *IoK8sAPICoreV1ReplicationControllerStatus) GetObservedGeneration() OptInt64 {
	return s.ObservedGeneration
}

// GetReadyReplicas returns the value of ReadyReplicas.
func (s *IoK8sAPICoreV1ReplicationControllerStatus) GetReadyReplicas() OptInt32 {
	return s.ReadyReplicas
}

// GetReplicas returns the value of Replicas.
func (s *IoK8sAPICoreV1ReplicationControllerStatus) GetReplicas() int32 {
	return s.Replicas
}

// SetAvailableReplicas sets the value of AvailableReplicas.
func (s *IoK8sAPICoreV1ReplicationControllerStatus) SetAvailableReplicas(val OptInt32) {
	s.AvailableReplicas = val
}

// SetConditions sets the value of Conditions.
func (s *IoK8sAPICoreV1ReplicationControllerStatus) SetConditions(val []IoK8sAPICoreV1ReplicationControllerCondition) {
	s.Conditions = val
}

// SetFullyLabeledReplicas sets the value of FullyLabeledReplicas.
func (s *IoK8sAPICoreV1ReplicationControllerStatus) SetFullyLabeledReplicas(val OptInt32) {
	s.FullyLabeledReplicas = val
}

// SetObservedGeneration sets the value of ObservedGeneration.
func (s *IoK8sAPICoreV1ReplicationControllerStatus) SetObservedGeneration(val OptInt64) {
	s.ObservedGeneration = val
}

// SetReadyReplicas sets the value of ReadyReplicas.
func (s *IoK8sAPICoreV1ReplicationControllerStatus) SetReadyReplicas(val OptInt32) {
	s.ReadyReplicas = val
}

// SetReplicas sets the value of Replicas.
func (s *IoK8sAPICoreV1ReplicationControllerStatus) SetReplicas(val int32) {
	s.Replicas = val
}

// ResourceFieldSelector represents container resources (cpu, memory) and their output format.
// Ref: #/components/schemas/io.k8s.api.core.v1.ResourceFieldSelector
type IoK8sAPICoreV1ResourceFieldSelector struct {
	// Container name: required for volumes, optional for env vars.
	ContainerName OptString                                  `json:"containerName"`
	Divisor       OptIoK8sApimachineryPkgAPIResourceQuantity `json:"divisor"`
	// Required: resource to select.
	Resource string `json:"resource"`
}

// GetContainerName returns the value of ContainerName.
func (s *IoK8sAPICoreV1ResourceFieldSelector) GetContainerName() OptString {
	return s.ContainerName
}

// GetDivisor returns the value of Divisor.
func (s *IoK8sAPICoreV1ResourceFieldSelector) GetDivisor() OptIoK8sApimachineryPkgAPIResourceQuantity {
	return s.Divisor
}

// GetResource returns the value of Resource.
func (s *IoK8sAPICoreV1ResourceFieldSelector) GetResource() string {
	return s.Resource
}

// SetContainerName sets the value of ContainerName.
func (s *IoK8sAPICoreV1ResourceFieldSelector) SetContainerName(val OptString) {
	s.ContainerName = val
}

// SetDivisor sets the value of Divisor.
func (s *IoK8sAPICoreV1ResourceFieldSelector) SetDivisor(val OptIoK8sApimachineryPkgAPIResourceQuantity) {
	s.Divisor = val
}

// SetResource sets the value of Resource.
func (s *IoK8sAPICoreV1ResourceFieldSelector) SetResource(val string) {
	s.Resource = val
}

// ResourceQuota sets aggregate quota restrictions enforced per namespace.
// Ref: #/components/schemas/io.k8s.api.core.v1.ResourceQuota
type IoK8sAPICoreV1ResourceQuota struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                   `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata"`
	Spec     OptIoK8sAPICoreV1ResourceQuotaSpec          `json:"spec"`
	Status   OptIoK8sAPICoreV1ResourceQuotaStatus        `json:"status"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPICoreV1ResourceQuota) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sAPICoreV1ResourceQuota) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPICoreV1ResourceQuota) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetSpec returns the value of Spec.
func (s *IoK8sAPICoreV1ResourceQuota) GetSpec() OptIoK8sAPICoreV1ResourceQuotaSpec {
	return s.Spec
}

// GetStatus returns the value of Status.
func (s *IoK8sAPICoreV1ResourceQuota) GetStatus() OptIoK8sAPICoreV1ResourceQuotaStatus {
	return s.Status
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPICoreV1ResourceQuota) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPICoreV1ResourceQuota) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPICoreV1ResourceQuota) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetSpec sets the value of Spec.
func (s *IoK8sAPICoreV1ResourceQuota) SetSpec(val OptIoK8sAPICoreV1ResourceQuotaSpec) {
	s.Spec = val
}

// SetStatus sets the value of Status.
func (s *IoK8sAPICoreV1ResourceQuota) SetStatus(val OptIoK8sAPICoreV1ResourceQuotaStatus) {
	s.Status = val
}

func (*IoK8sAPICoreV1ResourceQuota) readCoreV1NamespacedResourceQuotaRes()       {}
func (*IoK8sAPICoreV1ResourceQuota) readCoreV1NamespacedResourceQuotaStatusRes() {}

// ResourceQuotaList is a list of ResourceQuota items.
// Ref: #/components/schemas/io.k8s.api.core.v1.ResourceQuotaList
type IoK8sAPICoreV1ResourceQuotaList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Items is a list of ResourceQuota objects. More info: https://kubernetes.
	// io/docs/concepts/policy/resource-quotas/.
	Items []IoK8sAPICoreV1ResourceQuota `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPICoreV1ResourceQuotaList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPICoreV1ResourceQuotaList) GetItems() []IoK8sAPICoreV1ResourceQuota {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPICoreV1ResourceQuotaList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPICoreV1ResourceQuotaList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPICoreV1ResourceQuotaList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPICoreV1ResourceQuotaList) SetItems(val []IoK8sAPICoreV1ResourceQuota) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPICoreV1ResourceQuotaList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPICoreV1ResourceQuotaList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPICoreV1ResourceQuotaList) listCoreV1NamespacedResourceQuotaRes()       {}
func (*IoK8sAPICoreV1ResourceQuotaList) listCoreV1ResourceQuotaForAllNamespacesRes() {}

// ResourceQuotaSpec defines the desired hard limits to enforce for Quota.
// Ref: #/components/schemas/io.k8s.api.core.v1.ResourceQuotaSpec
type IoK8sAPICoreV1ResourceQuotaSpec struct {
	// Hard is the set of desired hard limits for each named resource. More info: https://kubernetes.
	// io/docs/concepts/policy/resource-quotas/.
	Hard          OptIoK8sAPICoreV1ResourceQuotaSpecHard `json:"hard"`
	ScopeSelector OptIoK8sAPICoreV1ScopeSelector         `json:"scopeSelector"`
	// A collection of filters that must match each object tracked by a quota. If not specified, the
	// quota matches all objects.
	Scopes []string `json:"scopes"`
}

// GetHard returns the value of Hard.
func (s *IoK8sAPICoreV1ResourceQuotaSpec) GetHard() OptIoK8sAPICoreV1ResourceQuotaSpecHard {
	return s.Hard
}

// GetScopeSelector returns the value of ScopeSelector.
func (s *IoK8sAPICoreV1ResourceQuotaSpec) GetScopeSelector() OptIoK8sAPICoreV1ScopeSelector {
	return s.ScopeSelector
}

// GetScopes returns the value of Scopes.
func (s *IoK8sAPICoreV1ResourceQuotaSpec) GetScopes() []string {
	return s.Scopes
}

// SetHard sets the value of Hard.
func (s *IoK8sAPICoreV1ResourceQuotaSpec) SetHard(val OptIoK8sAPICoreV1ResourceQuotaSpecHard) {
	s.Hard = val
}

// SetScopeSelector sets the value of ScopeSelector.
func (s *IoK8sAPICoreV1ResourceQuotaSpec) SetScopeSelector(val OptIoK8sAPICoreV1ScopeSelector) {
	s.ScopeSelector = val
}

// SetScopes sets the value of Scopes.
func (s *IoK8sAPICoreV1ResourceQuotaSpec) SetScopes(val []string) {
	s.Scopes = val
}

// Hard is the set of desired hard limits for each named resource. More info: https://kubernetes.
// io/docs/concepts/policy/resource-quotas/.
type IoK8sAPICoreV1ResourceQuotaSpecHard map[string]IoK8sApimachineryPkgAPIResourceQuantity

func (s *IoK8sAPICoreV1ResourceQuotaSpecHard) init() IoK8sAPICoreV1ResourceQuotaSpecHard {
	m := *s
	if m == nil {
		m = map[string]IoK8sApimachineryPkgAPIResourceQuantity{}
		*s = m
	}
	return m
}

// ResourceQuotaStatus defines the enforced hard limits and observed use.
// Ref: #/components/schemas/io.k8s.api.core.v1.ResourceQuotaStatus
type IoK8sAPICoreV1ResourceQuotaStatus struct {
	// Hard is the set of enforced hard limits for each named resource. More info: https://kubernetes.
	// io/docs/concepts/policy/resource-quotas/.
	Hard OptIoK8sAPICoreV1ResourceQuotaStatusHard `json:"hard"`
	// Used is the current observed total usage of the resource in the namespace.
	Used OptIoK8sAPICoreV1ResourceQuotaStatusUsed `json:"used"`
}

// GetHard returns the value of Hard.
func (s *IoK8sAPICoreV1ResourceQuotaStatus) GetHard() OptIoK8sAPICoreV1ResourceQuotaStatusHard {
	return s.Hard
}

// GetUsed returns the value of Used.
func (s *IoK8sAPICoreV1ResourceQuotaStatus) GetUsed() OptIoK8sAPICoreV1ResourceQuotaStatusUsed {
	return s.Used
}

// SetHard sets the value of Hard.
func (s *IoK8sAPICoreV1ResourceQuotaStatus) SetHard(val OptIoK8sAPICoreV1ResourceQuotaStatusHard) {
	s.Hard = val
}

// SetUsed sets the value of Used.
func (s *IoK8sAPICoreV1ResourceQuotaStatus) SetUsed(val OptIoK8sAPICoreV1ResourceQuotaStatusUsed) {
	s.Used = val
}

// Hard is the set of enforced hard limits for each named resource. More info: https://kubernetes.
// io/docs/concepts/policy/resource-quotas/.
type IoK8sAPICoreV1ResourceQuotaStatusHard map[string]IoK8sApimachineryPkgAPIResourceQuantity

func (s *IoK8sAPICoreV1ResourceQuotaStatusHard) init() IoK8sAPICoreV1ResourceQuotaStatusHard {
	m := *s
	if m == nil {
		m = map[string]IoK8sApimachineryPkgAPIResourceQuantity{}
		*s = m
	}
	return m
}

// Used is the current observed total usage of the resource in the namespace.
type IoK8sAPICoreV1ResourceQuotaStatusUsed map[string]IoK8sApimachineryPkgAPIResourceQuantity

func (s *IoK8sAPICoreV1ResourceQuotaStatusUsed) init() IoK8sAPICoreV1ResourceQuotaStatusUsed {
	m := *s
	if m == nil {
		m = map[string]IoK8sApimachineryPkgAPIResourceQuantity{}
		*s = m
	}
	return m
}

// ResourceRequirements describes the compute resource requirements.
// Ref: #/components/schemas/io.k8s.api.core.v1.ResourceRequirements
type IoK8sAPICoreV1ResourceRequirements struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.
	// io/docs/concepts/configuration/manage-resources-containers/.
	Limits OptIoK8sAPICoreV1ResourceRequirementsLimits `json:"limits"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a
	// container, it defaults to Limits if that is explicitly specified, otherwise to an
	// implementation-defined value. More info: https://kubernetes.
	// io/docs/concepts/configuration/manage-resources-containers/.
	Requests OptIoK8sAPICoreV1ResourceRequirementsRequests `json:"requests"`
}

// GetLimits returns the value of Limits.
func (s *IoK8sAPICoreV1ResourceRequirements) GetLimits() OptIoK8sAPICoreV1ResourceRequirementsLimits {
	return s.Limits
}

// GetRequests returns the value of Requests.
func (s *IoK8sAPICoreV1ResourceRequirements) GetRequests() OptIoK8sAPICoreV1ResourceRequirementsRequests {
	return s.Requests
}

// SetLimits sets the value of Limits.
func (s *IoK8sAPICoreV1ResourceRequirements) SetLimits(val OptIoK8sAPICoreV1ResourceRequirementsLimits) {
	s.Limits = val
}

// SetRequests sets the value of Requests.
func (s *IoK8sAPICoreV1ResourceRequirements) SetRequests(val OptIoK8sAPICoreV1ResourceRequirementsRequests) {
	s.Requests = val
}

// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.
// io/docs/concepts/configuration/manage-resources-containers/.
type IoK8sAPICoreV1ResourceRequirementsLimits map[string]IoK8sApimachineryPkgAPIResourceQuantity

func (s *IoK8sAPICoreV1ResourceRequirementsLimits) init() IoK8sAPICoreV1ResourceRequirementsLimits {
	m := *s
	if m == nil {
		m = map[string]IoK8sApimachineryPkgAPIResourceQuantity{}
		*s = m
	}
	return m
}

// Requests describes the minimum amount of compute resources required. If Requests is omitted for a
// container, it defaults to Limits if that is explicitly specified, otherwise to an
// implementation-defined value. More info: https://kubernetes.
// io/docs/concepts/configuration/manage-resources-containers/.
type IoK8sAPICoreV1ResourceRequirementsRequests map[string]IoK8sApimachineryPkgAPIResourceQuantity

func (s *IoK8sAPICoreV1ResourceRequirementsRequests) init() IoK8sAPICoreV1ResourceRequirementsRequests {
	m := *s
	if m == nil {
		m = map[string]IoK8sApimachineryPkgAPIResourceQuantity{}
		*s = m
	}
	return m
}

// SELinuxOptions are the labels to be applied to the container.
// Ref: #/components/schemas/io.k8s.api.core.v1.SELinuxOptions
type IoK8sAPICoreV1SELinuxOptions struct {
	// Level is SELinux level label that applies to the container.
	Level OptString `json:"level"`
	// Role is a SELinux role label that applies to the container.
	Role OptString `json:"role"`
	// Type is a SELinux type label that applies to the container.
	Type OptString `json:"type"`
	// User is a SELinux user label that applies to the container.
	User OptString `json:"user"`
}

// GetLevel returns the value of Level.
func (s *IoK8sAPICoreV1SELinuxOptions) GetLevel() OptString {
	return s.Level
}

// GetRole returns the value of Role.
func (s *IoK8sAPICoreV1SELinuxOptions) GetRole() OptString {
	return s.Role
}

// GetType returns the value of Type.
func (s *IoK8sAPICoreV1SELinuxOptions) GetType() OptString {
	return s.Type
}

// GetUser returns the value of User.
func (s *IoK8sAPICoreV1SELinuxOptions) GetUser() OptString {
	return s.User
}

// SetLevel sets the value of Level.
func (s *IoK8sAPICoreV1SELinuxOptions) SetLevel(val OptString) {
	s.Level = val
}

// SetRole sets the value of Role.
func (s *IoK8sAPICoreV1SELinuxOptions) SetRole(val OptString) {
	s.Role = val
}

// SetType sets the value of Type.
func (s *IoK8sAPICoreV1SELinuxOptions) SetType(val OptString) {
	s.Type = val
}

// SetUser sets the value of User.
func (s *IoK8sAPICoreV1SELinuxOptions) SetUser(val OptString) {
	s.User = val
}

// ScaleIOPersistentVolumeSource represents a persistent ScaleIO volume.
// Ref: #/components/schemas/io.k8s.api.core.v1.ScaleIOPersistentVolumeSource
type IoK8sAPICoreV1ScaleIOPersistentVolumeSource struct {
	// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex.
	// "ext4", "xfs", "ntfs". Default is "xfs".
	FsType OptString `json:"fsType"`
	// The host address of the ScaleIO API Gateway.
	Gateway string `json:"gateway"`
	// The name of the ScaleIO Protection Domain for the configured storage.
	ProtectionDomain OptString `json:"protectionDomain"`
	// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly  OptBool                       `json:"readOnly"`
	SecretRef IoK8sAPICoreV1SecretReference `json:"secretRef"`
	// Flag to enable/disable SSL communication with Gateway, default false.
	SslEnabled OptBool `json:"sslEnabled"`
	// Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default
	// is ThinProvisioned.
	StorageMode OptString `json:"storageMode"`
	// The ScaleIO Storage Pool associated with the protection domain.
	StoragePool OptString `json:"storagePool"`
	// The name of the storage system as configured in ScaleIO.
	System string `json:"system"`
	// The name of a volume already created in the ScaleIO system that is associated with this volume
	// source.
	VolumeName OptString `json:"volumeName"`
}

// GetFsType returns the value of FsType.
func (s *IoK8sAPICoreV1ScaleIOPersistentVolumeSource) GetFsType() OptString {
	return s.FsType
}

// GetGateway returns the value of Gateway.
func (s *IoK8sAPICoreV1ScaleIOPersistentVolumeSource) GetGateway() string {
	return s.Gateway
}

// GetProtectionDomain returns the value of ProtectionDomain.
func (s *IoK8sAPICoreV1ScaleIOPersistentVolumeSource) GetProtectionDomain() OptString {
	return s.ProtectionDomain
}

// GetReadOnly returns the value of ReadOnly.
func (s *IoK8sAPICoreV1ScaleIOPersistentVolumeSource) GetReadOnly() OptBool {
	return s.ReadOnly
}

// GetSecretRef returns the value of SecretRef.
func (s *IoK8sAPICoreV1ScaleIOPersistentVolumeSource) GetSecretRef() IoK8sAPICoreV1SecretReference {
	return s.SecretRef
}

// GetSslEnabled returns the value of SslEnabled.
func (s *IoK8sAPICoreV1ScaleIOPersistentVolumeSource) GetSslEnabled() OptBool {
	return s.SslEnabled
}

// GetStorageMode returns the value of StorageMode.
func (s *IoK8sAPICoreV1ScaleIOPersistentVolumeSource) GetStorageMode() OptString {
	return s.StorageMode
}

// GetStoragePool returns the value of StoragePool.
func (s *IoK8sAPICoreV1ScaleIOPersistentVolumeSource) GetStoragePool() OptString {
	return s.StoragePool
}

// GetSystem returns the value of System.
func (s *IoK8sAPICoreV1ScaleIOPersistentVolumeSource) GetSystem() string {
	return s.System
}

// GetVolumeName returns the value of VolumeName.
func (s *IoK8sAPICoreV1ScaleIOPersistentVolumeSource) GetVolumeName() OptString {
	return s.VolumeName
}

// SetFsType sets the value of FsType.
func (s *IoK8sAPICoreV1ScaleIOPersistentVolumeSource) SetFsType(val OptString) {
	s.FsType = val
}

// SetGateway sets the value of Gateway.
func (s *IoK8sAPICoreV1ScaleIOPersistentVolumeSource) SetGateway(val string) {
	s.Gateway = val
}

// SetProtectionDomain sets the value of ProtectionDomain.
func (s *IoK8sAPICoreV1ScaleIOPersistentVolumeSource) SetProtectionDomain(val OptString) {
	s.ProtectionDomain = val
}

// SetReadOnly sets the value of ReadOnly.
func (s *IoK8sAPICoreV1ScaleIOPersistentVolumeSource) SetReadOnly(val OptBool) {
	s.ReadOnly = val
}

// SetSecretRef sets the value of SecretRef.
func (s *IoK8sAPICoreV1ScaleIOPersistentVolumeSource) SetSecretRef(val IoK8sAPICoreV1SecretReference) {
	s.SecretRef = val
}

// SetSslEnabled sets the value of SslEnabled.
func (s *IoK8sAPICoreV1ScaleIOPersistentVolumeSource) SetSslEnabled(val OptBool) {
	s.SslEnabled = val
}

// SetStorageMode sets the value of StorageMode.
func (s *IoK8sAPICoreV1ScaleIOPersistentVolumeSource) SetStorageMode(val OptString) {
	s.StorageMode = val
}

// SetStoragePool sets the value of StoragePool.
func (s *IoK8sAPICoreV1ScaleIOPersistentVolumeSource) SetStoragePool(val OptString) {
	s.StoragePool = val
}

// SetSystem sets the value of System.
func (s *IoK8sAPICoreV1ScaleIOPersistentVolumeSource) SetSystem(val string) {
	s.System = val
}

// SetVolumeName sets the value of VolumeName.
func (s *IoK8sAPICoreV1ScaleIOPersistentVolumeSource) SetVolumeName(val OptString) {
	s.VolumeName = val
}

// ScaleIOVolumeSource represents a persistent ScaleIO volume.
// Ref: #/components/schemas/io.k8s.api.core.v1.ScaleIOVolumeSource
type IoK8sAPICoreV1ScaleIOVolumeSource struct {
	// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex.
	// "ext4", "xfs", "ntfs". Default is "xfs".
	FsType OptString `json:"fsType"`
	// The host address of the ScaleIO API Gateway.
	Gateway string `json:"gateway"`
	// The name of the ScaleIO Protection Domain for the configured storage.
	ProtectionDomain OptString `json:"protectionDomain"`
	// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly  OptBool                            `json:"readOnly"`
	SecretRef IoK8sAPICoreV1LocalObjectReference `json:"secretRef"`
	// Flag to enable/disable SSL communication with Gateway, default false.
	SslEnabled OptBool `json:"sslEnabled"`
	// Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default
	// is ThinProvisioned.
	StorageMode OptString `json:"storageMode"`
	// The ScaleIO Storage Pool associated with the protection domain.
	StoragePool OptString `json:"storagePool"`
	// The name of the storage system as configured in ScaleIO.
	System string `json:"system"`
	// The name of a volume already created in the ScaleIO system that is associated with this volume
	// source.
	VolumeName OptString `json:"volumeName"`
}

// GetFsType returns the value of FsType.
func (s *IoK8sAPICoreV1ScaleIOVolumeSource) GetFsType() OptString {
	return s.FsType
}

// GetGateway returns the value of Gateway.
func (s *IoK8sAPICoreV1ScaleIOVolumeSource) GetGateway() string {
	return s.Gateway
}

// GetProtectionDomain returns the value of ProtectionDomain.
func (s *IoK8sAPICoreV1ScaleIOVolumeSource) GetProtectionDomain() OptString {
	return s.ProtectionDomain
}

// GetReadOnly returns the value of ReadOnly.
func (s *IoK8sAPICoreV1ScaleIOVolumeSource) GetReadOnly() OptBool {
	return s.ReadOnly
}

// GetSecretRef returns the value of SecretRef.
func (s *IoK8sAPICoreV1ScaleIOVolumeSource) GetSecretRef() IoK8sAPICoreV1LocalObjectReference {
	return s.SecretRef
}

// GetSslEnabled returns the value of SslEnabled.
func (s *IoK8sAPICoreV1ScaleIOVolumeSource) GetSslEnabled() OptBool {
	return s.SslEnabled
}

// GetStorageMode returns the value of StorageMode.
func (s *IoK8sAPICoreV1ScaleIOVolumeSource) GetStorageMode() OptString {
	return s.StorageMode
}

// GetStoragePool returns the value of StoragePool.
func (s *IoK8sAPICoreV1ScaleIOVolumeSource) GetStoragePool() OptString {
	return s.StoragePool
}

// GetSystem returns the value of System.
func (s *IoK8sAPICoreV1ScaleIOVolumeSource) GetSystem() string {
	return s.System
}

// GetVolumeName returns the value of VolumeName.
func (s *IoK8sAPICoreV1ScaleIOVolumeSource) GetVolumeName() OptString {
	return s.VolumeName
}

// SetFsType sets the value of FsType.
func (s *IoK8sAPICoreV1ScaleIOVolumeSource) SetFsType(val OptString) {
	s.FsType = val
}

// SetGateway sets the value of Gateway.
func (s *IoK8sAPICoreV1ScaleIOVolumeSource) SetGateway(val string) {
	s.Gateway = val
}

// SetProtectionDomain sets the value of ProtectionDomain.
func (s *IoK8sAPICoreV1ScaleIOVolumeSource) SetProtectionDomain(val OptString) {
	s.ProtectionDomain = val
}

// SetReadOnly sets the value of ReadOnly.
func (s *IoK8sAPICoreV1ScaleIOVolumeSource) SetReadOnly(val OptBool) {
	s.ReadOnly = val
}

// SetSecretRef sets the value of SecretRef.
func (s *IoK8sAPICoreV1ScaleIOVolumeSource) SetSecretRef(val IoK8sAPICoreV1LocalObjectReference) {
	s.SecretRef = val
}

// SetSslEnabled sets the value of SslEnabled.
func (s *IoK8sAPICoreV1ScaleIOVolumeSource) SetSslEnabled(val OptBool) {
	s.SslEnabled = val
}

// SetStorageMode sets the value of StorageMode.
func (s *IoK8sAPICoreV1ScaleIOVolumeSource) SetStorageMode(val OptString) {
	s.StorageMode = val
}

// SetStoragePool sets the value of StoragePool.
func (s *IoK8sAPICoreV1ScaleIOVolumeSource) SetStoragePool(val OptString) {
	s.StoragePool = val
}

// SetSystem sets the value of System.
func (s *IoK8sAPICoreV1ScaleIOVolumeSource) SetSystem(val string) {
	s.System = val
}

// SetVolumeName sets the value of VolumeName.
func (s *IoK8sAPICoreV1ScaleIOVolumeSource) SetVolumeName(val OptString) {
	s.VolumeName = val
}

// A scope selector represents the AND of the selectors represented by the scoped-resource selector
// requirements.
// Ref: #/components/schemas/io.k8s.api.core.v1.ScopeSelector
type IoK8sAPICoreV1ScopeSelector struct {
	// A list of scope selector requirements by scope of the resources.
	MatchExpressions []IoK8sAPICoreV1ScopedResourceSelectorRequirement `json:"matchExpressions"`
}

// GetMatchExpressions returns the value of MatchExpressions.
func (s *IoK8sAPICoreV1ScopeSelector) GetMatchExpressions() []IoK8sAPICoreV1ScopedResourceSelectorRequirement {
	return s.MatchExpressions
}

// SetMatchExpressions sets the value of MatchExpressions.
func (s *IoK8sAPICoreV1ScopeSelector) SetMatchExpressions(val []IoK8sAPICoreV1ScopedResourceSelectorRequirement) {
	s.MatchExpressions = val
}

// A scoped-resource selector requirement is a selector that contains values, a scope name, and an
// operator that relates the scope name and values.
// Ref: #/components/schemas/io.k8s.api.core.v1.ScopedResourceSelectorRequirement
type IoK8sAPICoreV1ScopedResourceSelectorRequirement struct {
	// Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists,
	// DoesNotExist.
	Operator string `json:"operator"`
	// The name of the scope that the selector applies to.
	ScopeName string `json:"scopeName"`
	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If
	// the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced
	// during a strategic merge patch.
	Values []string `json:"values"`
}

// GetOperator returns the value of Operator.
func (s *IoK8sAPICoreV1ScopedResourceSelectorRequirement) GetOperator() string {
	return s.Operator
}

// GetScopeName returns the value of ScopeName.
func (s *IoK8sAPICoreV1ScopedResourceSelectorRequirement) GetScopeName() string {
	return s.ScopeName
}

// GetValues returns the value of Values.
func (s *IoK8sAPICoreV1ScopedResourceSelectorRequirement) GetValues() []string {
	return s.Values
}

// SetOperator sets the value of Operator.
func (s *IoK8sAPICoreV1ScopedResourceSelectorRequirement) SetOperator(val string) {
	s.Operator = val
}

// SetScopeName sets the value of ScopeName.
func (s *IoK8sAPICoreV1ScopedResourceSelectorRequirement) SetScopeName(val string) {
	s.ScopeName = val
}

// SetValues sets the value of Values.
func (s *IoK8sAPICoreV1ScopedResourceSelectorRequirement) SetValues(val []string) {
	s.Values = val
}

// SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be
// set.
// Ref: #/components/schemas/io.k8s.api.core.v1.SeccompProfile
type IoK8sAPICoreV1SeccompProfile struct {
	// LocalhostProfile indicates a profile defined in a file on the node should be used. The profile
	// must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's
	// configured seccomp profile location. Must only be set if type is "Localhost".
	LocalhostProfile OptString `json:"localhostProfile"`
	// Type indicates which kind of seccomp profile will be applied. Valid options are:
	// Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container
	// runtime default profile should be used. Unconfined - no profile should be applied.
	Type string `json:"type"`
}

// GetLocalhostProfile returns the value of LocalhostProfile.
func (s *IoK8sAPICoreV1SeccompProfile) GetLocalhostProfile() OptString {
	return s.LocalhostProfile
}

// GetType returns the value of Type.
func (s *IoK8sAPICoreV1SeccompProfile) GetType() string {
	return s.Type
}

// SetLocalhostProfile sets the value of LocalhostProfile.
func (s *IoK8sAPICoreV1SeccompProfile) SetLocalhostProfile(val OptString) {
	s.LocalhostProfile = val
}

// SetType sets the value of Type.
func (s *IoK8sAPICoreV1SeccompProfile) SetType(val string) {
	s.Type = val
}

// Secret holds secret data of a certain type. The total bytes of the values in the Data field must
// be less than MaxSecretSize bytes.
// Ref: #/components/schemas/io.k8s.api.core.v1.Secret
type IoK8sAPICoreV1Secret struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'.
	// The serialized form of the secret data is a base64 encoded string, representing the arbitrary
	// (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4.
	Data OptIoK8sAPICoreV1SecretData `json:"data"`
	// Immutable, if set to true, ensures that data stored in the Secret cannot be updated (only object
	// metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to
	// nil.
	Immutable OptBool `json:"immutable"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                   `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata"`
	// StringData allows specifying non-binary secret data in string form. It is provided as a write-only
	// input field for convenience. All keys and values are merged into the data field on write,
	// overwriting any existing values. The stringData field is never output when reading from the API.
	StringData OptIoK8sAPICoreV1SecretStringData `json:"stringData"`
	// Used to facilitate programmatic handling of secret data.
	Type OptString `json:"type"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPICoreV1Secret) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetData returns the value of Data.
func (s *IoK8sAPICoreV1Secret) GetData() OptIoK8sAPICoreV1SecretData {
	return s.Data
}

// GetImmutable returns the value of Immutable.
func (s *IoK8sAPICoreV1Secret) GetImmutable() OptBool {
	return s.Immutable
}

// GetKind returns the value of Kind.
func (s *IoK8sAPICoreV1Secret) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPICoreV1Secret) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetStringData returns the value of StringData.
func (s *IoK8sAPICoreV1Secret) GetStringData() OptIoK8sAPICoreV1SecretStringData {
	return s.StringData
}

// GetType returns the value of Type.
func (s *IoK8sAPICoreV1Secret) GetType() OptString {
	return s.Type
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPICoreV1Secret) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetData sets the value of Data.
func (s *IoK8sAPICoreV1Secret) SetData(val OptIoK8sAPICoreV1SecretData) {
	s.Data = val
}

// SetImmutable sets the value of Immutable.
func (s *IoK8sAPICoreV1Secret) SetImmutable(val OptBool) {
	s.Immutable = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPICoreV1Secret) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPICoreV1Secret) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetStringData sets the value of StringData.
func (s *IoK8sAPICoreV1Secret) SetStringData(val OptIoK8sAPICoreV1SecretStringData) {
	s.StringData = val
}

// SetType sets the value of Type.
func (s *IoK8sAPICoreV1Secret) SetType(val OptString) {
	s.Type = val
}

func (*IoK8sAPICoreV1Secret) readCoreV1NamespacedSecretRes() {}

// Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'.
// The serialized form of the secret data is a base64 encoded string, representing the arbitrary
// (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4.
type IoK8sAPICoreV1SecretData map[string][]byte

func (s *IoK8sAPICoreV1SecretData) init() IoK8sAPICoreV1SecretData {
	m := *s
	if m == nil {
		m = map[string][]byte{}
		*s = m
	}
	return m
}

// SecretEnvSource selects a Secret to populate the environment variables with.
// The contents of the target Secret's Data field will represent the key-value pairs as environment
// variables.
// Ref: #/components/schemas/io.k8s.api.core.v1.SecretEnvSource
type IoK8sAPICoreV1SecretEnvSource struct {
	// Name of the referent. More info: https://kubernetes.
	// io/docs/concepts/overview/working-with-objects/names/#names.
	Name OptString `json:"name"`
	// Specify whether the Secret must be defined.
	Optional OptBool `json:"optional"`
}

// GetName returns the value of Name.
func (s *IoK8sAPICoreV1SecretEnvSource) GetName() OptString {
	return s.Name
}

// GetOptional returns the value of Optional.
func (s *IoK8sAPICoreV1SecretEnvSource) GetOptional() OptBool {
	return s.Optional
}

// SetName sets the value of Name.
func (s *IoK8sAPICoreV1SecretEnvSource) SetName(val OptString) {
	s.Name = val
}

// SetOptional sets the value of Optional.
func (s *IoK8sAPICoreV1SecretEnvSource) SetOptional(val OptBool) {
	s.Optional = val
}

// SecretKeySelector selects a key of a Secret.
// Ref: #/components/schemas/io.k8s.api.core.v1.SecretKeySelector
type IoK8sAPICoreV1SecretKeySelector struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key string `json:"key"`
	// Name of the referent. More info: https://kubernetes.
	// io/docs/concepts/overview/working-with-objects/names/#names.
	Name OptString `json:"name"`
	// Specify whether the Secret or its key must be defined.
	Optional OptBool `json:"optional"`
}

// GetKey returns the value of Key.
func (s *IoK8sAPICoreV1SecretKeySelector) GetKey() string {
	return s.Key
}

// GetName returns the value of Name.
func (s *IoK8sAPICoreV1SecretKeySelector) GetName() OptString {
	return s.Name
}

// GetOptional returns the value of Optional.
func (s *IoK8sAPICoreV1SecretKeySelector) GetOptional() OptBool {
	return s.Optional
}

// SetKey sets the value of Key.
func (s *IoK8sAPICoreV1SecretKeySelector) SetKey(val string) {
	s.Key = val
}

// SetName sets the value of Name.
func (s *IoK8sAPICoreV1SecretKeySelector) SetName(val OptString) {
	s.Name = val
}

// SetOptional sets the value of Optional.
func (s *IoK8sAPICoreV1SecretKeySelector) SetOptional(val OptBool) {
	s.Optional = val
}

// SecretList is a list of Secret.
// Ref: #/components/schemas/io.k8s.api.core.v1.SecretList
type IoK8sAPICoreV1SecretList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Items is a list of secret objects. More info: https://kubernetes.
	// io/docs/concepts/configuration/secret.
	Items []IoK8sAPICoreV1Secret `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPICoreV1SecretList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPICoreV1SecretList) GetItems() []IoK8sAPICoreV1Secret {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPICoreV1SecretList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPICoreV1SecretList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPICoreV1SecretList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPICoreV1SecretList) SetItems(val []IoK8sAPICoreV1Secret) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPICoreV1SecretList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPICoreV1SecretList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPICoreV1SecretList) listCoreV1NamespacedSecretRes()       {}
func (*IoK8sAPICoreV1SecretList) listCoreV1SecretForAllNamespacesRes() {}

// Adapts a secret into a projected volume.
// The contents of the target Secret's Data field will be presented in a projected volume as files
// using the keys in the Data field as the file names. Note that this is identical to a secret volume
// source without the default mode.
// Ref: #/components/schemas/io.k8s.api.core.v1.SecretProjection
type IoK8sAPICoreV1SecretProjection struct {
	// If unspecified, each key-value pair in the Data field of the referenced Secret will be projected
	// into the volume as a file whose name is the key and content is the value. If specified, the listed
	// keys will be projected into the specified paths, and unlisted keys will not be present. If a key
	// is specified which is not present in the Secret, the volume setup will error unless it is marked
	// optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items []IoK8sAPICoreV1KeyToPath `json:"items"`
	// Name of the referent. More info: https://kubernetes.
	// io/docs/concepts/overview/working-with-objects/names/#names.
	Name OptString `json:"name"`
	// Specify whether the Secret or its key must be defined.
	Optional OptBool `json:"optional"`
}

// GetItems returns the value of Items.
func (s *IoK8sAPICoreV1SecretProjection) GetItems() []IoK8sAPICoreV1KeyToPath {
	return s.Items
}

// GetName returns the value of Name.
func (s *IoK8sAPICoreV1SecretProjection) GetName() OptString {
	return s.Name
}

// GetOptional returns the value of Optional.
func (s *IoK8sAPICoreV1SecretProjection) GetOptional() OptBool {
	return s.Optional
}

// SetItems sets the value of Items.
func (s *IoK8sAPICoreV1SecretProjection) SetItems(val []IoK8sAPICoreV1KeyToPath) {
	s.Items = val
}

// SetName sets the value of Name.
func (s *IoK8sAPICoreV1SecretProjection) SetName(val OptString) {
	s.Name = val
}

// SetOptional sets the value of Optional.
func (s *IoK8sAPICoreV1SecretProjection) SetOptional(val OptBool) {
	s.Optional = val
}

// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any
// namespace.
// Ref: #/components/schemas/io.k8s.api.core.v1.SecretReference
type IoK8sAPICoreV1SecretReference struct {
	// Name is unique within a namespace to reference a secret resource.
	Name OptString `json:"name"`
	// Namespace defines the space within which the secret name must be unique.
	Namespace OptString `json:"namespace"`
}

// GetName returns the value of Name.
func (s *IoK8sAPICoreV1SecretReference) GetName() OptString {
	return s.Name
}

// GetNamespace returns the value of Namespace.
func (s *IoK8sAPICoreV1SecretReference) GetNamespace() OptString {
	return s.Namespace
}

// SetName sets the value of Name.
func (s *IoK8sAPICoreV1SecretReference) SetName(val OptString) {
	s.Name = val
}

// SetNamespace sets the value of Namespace.
func (s *IoK8sAPICoreV1SecretReference) SetNamespace(val OptString) {
	s.Namespace = val
}

// StringData allows specifying non-binary secret data in string form. It is provided as a write-only
// input field for convenience. All keys and values are merged into the data field on write,
// overwriting any existing values. The stringData field is never output when reading from the API.
type IoK8sAPICoreV1SecretStringData map[string]string

func (s *IoK8sAPICoreV1SecretStringData) init() IoK8sAPICoreV1SecretStringData {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Adapts a Secret into a volume.
// The contents of the target Secret's Data field will be presented in a volume as files using the
// keys in the Data field as the file names. Secret volumes support ownership management and SELinux
// relabeling.
// Ref: #/components/schemas/io.k8s.api.core.v1.SecretVolumeSource
type IoK8sAPICoreV1SecretVolumeSource struct {
	// Optional: mode bits used to set permissions on created files by default. Must be an octal value
	// between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal
	// values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path
	// are not affected by this setting. This might be in conflict with other options that affect the
	// file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode OptInt32 `json:"defaultMode"`
	// If unspecified, each key-value pair in the Data field of the referenced Secret will be projected
	// into the volume as a file whose name is the key and content is the value. If specified, the listed
	// keys will be projected into the specified paths, and unlisted keys will not be present. If a key
	// is specified which is not present in the Secret, the volume setup will error unless it is marked
	// optional. Paths must be relative and may not contain the '..' path or start with '..'.
	Items []IoK8sAPICoreV1KeyToPath `json:"items"`
	// Specify whether the Secret or its keys must be defined.
	Optional OptBool `json:"optional"`
	// Name of the secret in the pod's namespace to use. More info: https://kubernetes.
	// io/docs/concepts/storage/volumes#secret.
	SecretName OptString `json:"secretName"`
}

// GetDefaultMode returns the value of DefaultMode.
func (s *IoK8sAPICoreV1SecretVolumeSource) GetDefaultMode() OptInt32 {
	return s.DefaultMode
}

// GetItems returns the value of Items.
func (s *IoK8sAPICoreV1SecretVolumeSource) GetItems() []IoK8sAPICoreV1KeyToPath {
	return s.Items
}

// GetOptional returns the value of Optional.
func (s *IoK8sAPICoreV1SecretVolumeSource) GetOptional() OptBool {
	return s.Optional
}

// GetSecretName returns the value of SecretName.
func (s *IoK8sAPICoreV1SecretVolumeSource) GetSecretName() OptString {
	return s.SecretName
}

// SetDefaultMode sets the value of DefaultMode.
func (s *IoK8sAPICoreV1SecretVolumeSource) SetDefaultMode(val OptInt32) {
	s.DefaultMode = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPICoreV1SecretVolumeSource) SetItems(val []IoK8sAPICoreV1KeyToPath) {
	s.Items = val
}

// SetOptional sets the value of Optional.
func (s *IoK8sAPICoreV1SecretVolumeSource) SetOptional(val OptBool) {
	s.Optional = val
}

// SetSecretName sets the value of SecretName.
func (s *IoK8sAPICoreV1SecretVolumeSource) SetSecretName(val OptString) {
	s.SecretName = val
}

// SecurityContext holds security configuration that will be applied to a container. Some fields are
// present in both SecurityContext and PodSecurityContext.  When both are set, the values in
// SecurityContext take precedence.
// Ref: #/components/schemas/io.k8s.api.core.v1.SecurityContext
type IoK8sAPICoreV1SecurityContext struct {
	// AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent
	// process. This bool directly controls if the no_new_privs flag will be set on the container process.
	//  AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has
	// CAP_SYS_ADMIN.
	AllowPrivilegeEscalation OptBool                       `json:"allowPrivilegeEscalation"`
	Capabilities             OptIoK8sAPICoreV1Capabilities `json:"capabilities"`
	// Run container in privileged mode. Processes in privileged containers are essentially equivalent to
	// root on the host. Defaults to false.
	Privileged OptBool `json:"privileged"`
	// ProcMount denotes the type of proc mount to use for the containers. The default is
	// DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths.
	// This requires the ProcMountType feature flag to be enabled.
	ProcMount OptString `json:"procMount"`
	// Whether this container has a read-only root filesystem. Default is false.
	ReadOnlyRootFilesystem OptBool `json:"readOnlyRootFilesystem"`
	// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be
	// set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value
	// specified in SecurityContext takes precedence.
	RunAsGroup OptInt64 `json:"runAsGroup"`
	// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the
	// image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if
	// it does. If unset or false, no such validation will be performed. May also be set in
	// PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in
	// SecurityContext takes precedence.
	RunAsNonRoot OptBool `json:"runAsNonRoot"`
	// The UID to run the entrypoint of the container process. Defaults to user specified in image
	// metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext
	// and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsUser      OptInt64                                       `json:"runAsUser"`
	SeLinuxOptions OptIoK8sAPICoreV1SELinuxOptions                `json:"seLinuxOptions"`
	SeccompProfile OptIoK8sAPICoreV1SeccompProfile                `json:"seccompProfile"`
	WindowsOptions OptIoK8sAPICoreV1WindowsSecurityContextOptions `json:"windowsOptions"`
}

// GetAllowPrivilegeEscalation returns the value of AllowPrivilegeEscalation.
func (s *IoK8sAPICoreV1SecurityContext) GetAllowPrivilegeEscalation() OptBool {
	return s.AllowPrivilegeEscalation
}

// GetCapabilities returns the value of Capabilities.
func (s *IoK8sAPICoreV1SecurityContext) GetCapabilities() OptIoK8sAPICoreV1Capabilities {
	return s.Capabilities
}

// GetPrivileged returns the value of Privileged.
func (s *IoK8sAPICoreV1SecurityContext) GetPrivileged() OptBool {
	return s.Privileged
}

// GetProcMount returns the value of ProcMount.
func (s *IoK8sAPICoreV1SecurityContext) GetProcMount() OptString {
	return s.ProcMount
}

// GetReadOnlyRootFilesystem returns the value of ReadOnlyRootFilesystem.
func (s *IoK8sAPICoreV1SecurityContext) GetReadOnlyRootFilesystem() OptBool {
	return s.ReadOnlyRootFilesystem
}

// GetRunAsGroup returns the value of RunAsGroup.
func (s *IoK8sAPICoreV1SecurityContext) GetRunAsGroup() OptInt64 {
	return s.RunAsGroup
}

// GetRunAsNonRoot returns the value of RunAsNonRoot.
func (s *IoK8sAPICoreV1SecurityContext) GetRunAsNonRoot() OptBool {
	return s.RunAsNonRoot
}

// GetRunAsUser returns the value of RunAsUser.
func (s *IoK8sAPICoreV1SecurityContext) GetRunAsUser() OptInt64 {
	return s.RunAsUser
}

// GetSeLinuxOptions returns the value of SeLinuxOptions.
func (s *IoK8sAPICoreV1SecurityContext) GetSeLinuxOptions() OptIoK8sAPICoreV1SELinuxOptions {
	return s.SeLinuxOptions
}

// GetSeccompProfile returns the value of SeccompProfile.
func (s *IoK8sAPICoreV1SecurityContext) GetSeccompProfile() OptIoK8sAPICoreV1SeccompProfile {
	return s.SeccompProfile
}

// GetWindowsOptions returns the value of WindowsOptions.
func (s *IoK8sAPICoreV1SecurityContext) GetWindowsOptions() OptIoK8sAPICoreV1WindowsSecurityContextOptions {
	return s.WindowsOptions
}

// SetAllowPrivilegeEscalation sets the value of AllowPrivilegeEscalation.
func (s *IoK8sAPICoreV1SecurityContext) SetAllowPrivilegeEscalation(val OptBool) {
	s.AllowPrivilegeEscalation = val
}

// SetCapabilities sets the value of Capabilities.
func (s *IoK8sAPICoreV1SecurityContext) SetCapabilities(val OptIoK8sAPICoreV1Capabilities) {
	s.Capabilities = val
}

// SetPrivileged sets the value of Privileged.
func (s *IoK8sAPICoreV1SecurityContext) SetPrivileged(val OptBool) {
	s.Privileged = val
}

// SetProcMount sets the value of ProcMount.
func (s *IoK8sAPICoreV1SecurityContext) SetProcMount(val OptString) {
	s.ProcMount = val
}

// SetReadOnlyRootFilesystem sets the value of ReadOnlyRootFilesystem.
func (s *IoK8sAPICoreV1SecurityContext) SetReadOnlyRootFilesystem(val OptBool) {
	s.ReadOnlyRootFilesystem = val
}

// SetRunAsGroup sets the value of RunAsGroup.
func (s *IoK8sAPICoreV1SecurityContext) SetRunAsGroup(val OptInt64) {
	s.RunAsGroup = val
}

// SetRunAsNonRoot sets the value of RunAsNonRoot.
func (s *IoK8sAPICoreV1SecurityContext) SetRunAsNonRoot(val OptBool) {
	s.RunAsNonRoot = val
}

// SetRunAsUser sets the value of RunAsUser.
func (s *IoK8sAPICoreV1SecurityContext) SetRunAsUser(val OptInt64) {
	s.RunAsUser = val
}

// SetSeLinuxOptions sets the value of SeLinuxOptions.
func (s *IoK8sAPICoreV1SecurityContext) SetSeLinuxOptions(val OptIoK8sAPICoreV1SELinuxOptions) {
	s.SeLinuxOptions = val
}

// SetSeccompProfile sets the value of SeccompProfile.
func (s *IoK8sAPICoreV1SecurityContext) SetSeccompProfile(val OptIoK8sAPICoreV1SeccompProfile) {
	s.SeccompProfile = val
}

// SetWindowsOptions sets the value of WindowsOptions.
func (s *IoK8sAPICoreV1SecurityContext) SetWindowsOptions(val OptIoK8sAPICoreV1WindowsSecurityContextOptions) {
	s.WindowsOptions = val
}

// Service is a named abstraction of software service (for example, mysql) consisting of local port
// (for example 3306) that the proxy listens on, and the selector that determines which pods will
// answer requests sent through the proxy.
// Ref: #/components/schemas/io.k8s.api.core.v1.Service
type IoK8sAPICoreV1Service struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                   `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata"`
	Spec     OptIoK8sAPICoreV1ServiceSpec                `json:"spec"`
	Status   OptIoK8sAPICoreV1ServiceStatus              `json:"status"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPICoreV1Service) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sAPICoreV1Service) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPICoreV1Service) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetSpec returns the value of Spec.
func (s *IoK8sAPICoreV1Service) GetSpec() OptIoK8sAPICoreV1ServiceSpec {
	return s.Spec
}

// GetStatus returns the value of Status.
func (s *IoK8sAPICoreV1Service) GetStatus() OptIoK8sAPICoreV1ServiceStatus {
	return s.Status
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPICoreV1Service) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPICoreV1Service) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPICoreV1Service) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetSpec sets the value of Spec.
func (s *IoK8sAPICoreV1Service) SetSpec(val OptIoK8sAPICoreV1ServiceSpec) {
	s.Spec = val
}

// SetStatus sets the value of Status.
func (s *IoK8sAPICoreV1Service) SetStatus(val OptIoK8sAPICoreV1ServiceStatus) {
	s.Status = val
}

func (*IoK8sAPICoreV1Service) readCoreV1NamespacedServiceRes()       {}
func (*IoK8sAPICoreV1Service) readCoreV1NamespacedServiceStatusRes() {}

// ServiceAccount binds together: * a name, understood by users, and perhaps by peripheral systems,
// for an identity * a principal that can be authenticated and authorized * a set of secrets.
// Ref: #/components/schemas/io.k8s.api.core.v1.ServiceAccount
type IoK8sAPICoreV1ServiceAccount struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// AutomountServiceAccountToken indicates whether pods running as this service account should have an
	// API token automatically mounted. Can be overridden at the pod level.
	AutomountServiceAccountToken OptBool `json:"automountServiceAccountToken"`
	// ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any
	// images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets
	// because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet.
	// More info: https://kubernetes.
	// io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod.
	ImagePullSecrets []IoK8sAPICoreV1LocalObjectReference `json:"imagePullSecrets"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                   `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata"`
	// Secrets is the list of secrets allowed to be used by pods running using this ServiceAccount. More
	// info: https://kubernetes.io/docs/concepts/configuration/secret.
	Secrets []IoK8sAPICoreV1ObjectReference `json:"secrets"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPICoreV1ServiceAccount) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetAutomountServiceAccountToken returns the value of AutomountServiceAccountToken.
func (s *IoK8sAPICoreV1ServiceAccount) GetAutomountServiceAccountToken() OptBool {
	return s.AutomountServiceAccountToken
}

// GetImagePullSecrets returns the value of ImagePullSecrets.
func (s *IoK8sAPICoreV1ServiceAccount) GetImagePullSecrets() []IoK8sAPICoreV1LocalObjectReference {
	return s.ImagePullSecrets
}

// GetKind returns the value of Kind.
func (s *IoK8sAPICoreV1ServiceAccount) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPICoreV1ServiceAccount) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetSecrets returns the value of Secrets.
func (s *IoK8sAPICoreV1ServiceAccount) GetSecrets() []IoK8sAPICoreV1ObjectReference {
	return s.Secrets
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPICoreV1ServiceAccount) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetAutomountServiceAccountToken sets the value of AutomountServiceAccountToken.
func (s *IoK8sAPICoreV1ServiceAccount) SetAutomountServiceAccountToken(val OptBool) {
	s.AutomountServiceAccountToken = val
}

// SetImagePullSecrets sets the value of ImagePullSecrets.
func (s *IoK8sAPICoreV1ServiceAccount) SetImagePullSecrets(val []IoK8sAPICoreV1LocalObjectReference) {
	s.ImagePullSecrets = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPICoreV1ServiceAccount) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPICoreV1ServiceAccount) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetSecrets sets the value of Secrets.
func (s *IoK8sAPICoreV1ServiceAccount) SetSecrets(val []IoK8sAPICoreV1ObjectReference) {
	s.Secrets = val
}

func (*IoK8sAPICoreV1ServiceAccount) readCoreV1NamespacedServiceAccountRes() {}

// ServiceAccountList is a list of ServiceAccount objects.
// Ref: #/components/schemas/io.k8s.api.core.v1.ServiceAccountList
type IoK8sAPICoreV1ServiceAccountList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// List of ServiceAccounts. More info: https://kubernetes.
	// io/docs/tasks/configure-pod-container/configure-service-account/.
	Items []IoK8sAPICoreV1ServiceAccount `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPICoreV1ServiceAccountList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPICoreV1ServiceAccountList) GetItems() []IoK8sAPICoreV1ServiceAccount {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPICoreV1ServiceAccountList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPICoreV1ServiceAccountList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPICoreV1ServiceAccountList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPICoreV1ServiceAccountList) SetItems(val []IoK8sAPICoreV1ServiceAccount) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPICoreV1ServiceAccountList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPICoreV1ServiceAccountList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPICoreV1ServiceAccountList) listCoreV1NamespacedServiceAccountRes()       {}
func (*IoK8sAPICoreV1ServiceAccountList) listCoreV1ServiceAccountForAllNamespacesRes() {}

// ServiceAccountTokenProjection represents a projected service account token volume. This projection
// can be used to insert a service account token into the pods runtime filesystem for use against
// APIs (Kubernetes API Server or otherwise).
// Ref: #/components/schemas/io.k8s.api.core.v1.ServiceAccountTokenProjection
type IoK8sAPICoreV1ServiceAccountTokenProjection struct {
	// Audience is the intended audience of the token. A recipient of a token must identify itself with
	// an identifier specified in the audience of the token, and otherwise should reject the token. The
	// audience defaults to the identifier of the apiserver.
	Audience OptString `json:"audience"`
	// ExpirationSeconds is the requested duration of validity of the service account token. As the token
	// approaches expiration, the kubelet volume plugin will proactively rotate the service account token.
	//  The kubelet will start trying to rotate the token if the token is older than 80 percent of its
	// time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10
	// minutes.
	ExpirationSeconds OptInt64 `json:"expirationSeconds"`
	// Path is the path relative to the mount point of the file to project the token into.
	Path string `json:"path"`
}

// GetAudience returns the value of Audience.
func (s *IoK8sAPICoreV1ServiceAccountTokenProjection) GetAudience() OptString {
	return s.Audience
}

// GetExpirationSeconds returns the value of ExpirationSeconds.
func (s *IoK8sAPICoreV1ServiceAccountTokenProjection) GetExpirationSeconds() OptInt64 {
	return s.ExpirationSeconds
}

// GetPath returns the value of Path.
func (s *IoK8sAPICoreV1ServiceAccountTokenProjection) GetPath() string {
	return s.Path
}

// SetAudience sets the value of Audience.
func (s *IoK8sAPICoreV1ServiceAccountTokenProjection) SetAudience(val OptString) {
	s.Audience = val
}

// SetExpirationSeconds sets the value of ExpirationSeconds.
func (s *IoK8sAPICoreV1ServiceAccountTokenProjection) SetExpirationSeconds(val OptInt64) {
	s.ExpirationSeconds = val
}

// SetPath sets the value of Path.
func (s *IoK8sAPICoreV1ServiceAccountTokenProjection) SetPath(val string) {
	s.Path = val
}

// ServiceList holds a list of services.
// Ref: #/components/schemas/io.k8s.api.core.v1.ServiceList
type IoK8sAPICoreV1ServiceList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// List of services.
	Items []IoK8sAPICoreV1Service `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPICoreV1ServiceList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPICoreV1ServiceList) GetItems() []IoK8sAPICoreV1Service {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPICoreV1ServiceList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPICoreV1ServiceList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPICoreV1ServiceList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPICoreV1ServiceList) SetItems(val []IoK8sAPICoreV1Service) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPICoreV1ServiceList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPICoreV1ServiceList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPICoreV1ServiceList) listCoreV1NamespacedServiceRes()       {}
func (*IoK8sAPICoreV1ServiceList) listCoreV1ServiceForAllNamespacesRes() {}

// ServicePort contains information on service's port.
// Ref: #/components/schemas/io.k8s.api.core.v1.ServicePort
type IoK8sAPICoreV1ServicePort struct {
	// The application protocol for this port. This field follows standard Kubernetes label syntax.
	// Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.
	// iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as
	// mycompany.com/my-custom-protocol.
	AppProtocol OptString `json:"appProtocol"`
	// The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec
	// must have unique names. When considering the endpoints for a Service, this must match the 'name'
	// field in the EndpointPort. Optional if only one ServicePort is defined on this service.
	Name OptString `json:"name"`
	// The port on each node on which this service is exposed when type is NodePort or LoadBalancer.
	// Usually assigned by the system. If a value is specified, in-range, and not in use it will be used,
	// otherwise the operation will fail.  If not specified, a port will be allocated if this Service
	// requires one.  If this field is specified when creating a Service which does not need it, creation
	// will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing
	// type from NodePort to ClusterIP). More info: https://kubernetes.
	// io/docs/concepts/services-networking/service/#type-nodeport.
	NodePort OptInt32 `json:"nodePort"`
	// The port that will be exposed by this service.
	Port int32 `json:"port"`
	// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
	Protocol   OptString                                    `json:"protocol"`
	TargetPort OptIoK8sApimachineryPkgUtilIntstrIntOrString `json:"targetPort"`
}

// GetAppProtocol returns the value of AppProtocol.
func (s *IoK8sAPICoreV1ServicePort) GetAppProtocol() OptString {
	return s.AppProtocol
}

// GetName returns the value of Name.
func (s *IoK8sAPICoreV1ServicePort) GetName() OptString {
	return s.Name
}

// GetNodePort returns the value of NodePort.
func (s *IoK8sAPICoreV1ServicePort) GetNodePort() OptInt32 {
	return s.NodePort
}

// GetPort returns the value of Port.
func (s *IoK8sAPICoreV1ServicePort) GetPort() int32 {
	return s.Port
}

// GetProtocol returns the value of Protocol.
func (s *IoK8sAPICoreV1ServicePort) GetProtocol() OptString {
	return s.Protocol
}

// GetTargetPort returns the value of TargetPort.
func (s *IoK8sAPICoreV1ServicePort) GetTargetPort() OptIoK8sApimachineryPkgUtilIntstrIntOrString {
	return s.TargetPort
}

// SetAppProtocol sets the value of AppProtocol.
func (s *IoK8sAPICoreV1ServicePort) SetAppProtocol(val OptString) {
	s.AppProtocol = val
}

// SetName sets the value of Name.
func (s *IoK8sAPICoreV1ServicePort) SetName(val OptString) {
	s.Name = val
}

// SetNodePort sets the value of NodePort.
func (s *IoK8sAPICoreV1ServicePort) SetNodePort(val OptInt32) {
	s.NodePort = val
}

// SetPort sets the value of Port.
func (s *IoK8sAPICoreV1ServicePort) SetPort(val int32) {
	s.Port = val
}

// SetProtocol sets the value of Protocol.
func (s *IoK8sAPICoreV1ServicePort) SetProtocol(val OptString) {
	s.Protocol = val
}

// SetTargetPort sets the value of TargetPort.
func (s *IoK8sAPICoreV1ServicePort) SetTargetPort(val OptIoK8sApimachineryPkgUtilIntstrIntOrString) {
	s.TargetPort = val
}

// ServiceSpec describes the attributes that a user creates on a service.
// Ref: #/components/schemas/io.k8s.api.core.v1.ServiceSpec
type IoK8sAPICoreV1ServiceSpec struct {
	// AllocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services
	// with type LoadBalancer.  Default is "true". It may be set to "false" if the cluster load-balancer
	// does not rely on NodePorts.  If the caller requests specific NodePorts (by specifying a value),
	// those requests will be respected, regardless of this field. This field may only be set for
	// services with type LoadBalancer and will be cleared if the type is changed to any other type. This
	// field is beta-level and is only honored by servers that enable the ServiceLBNodePortControl
	// feature.
	AllocateLoadBalancerNodePorts OptBool `json:"allocateLoadBalancerNodePorts"`
	// ClusterIP is the IP address of the service and is usually assigned randomly. If an address is
	// specified manually, is in-range (as per system configuration), and is not in use, it will be
	// allocated to the service; otherwise creation of the service will fail. This field may not be
	// changed through updates unless the type field is also being changed to ExternalName (which
	// requires this field to be blank) or the type field is being changed from ExternalName (in which
	// case this field may optionally be specified, as describe above).  Valid values are "None", empty
	// string (""), or a valid IP address. Setting this to "None" makes a "headless service" (no virtual
	// IP), which is useful when direct endpoint connections are preferred and proxying is not required.
	// Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when
	// creating a Service of type ExternalName, creation will fail. This field will be wiped when
	// updating a Service to type ExternalName. More info: https://kubernetes.
	// io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies.
	ClusterIP OptString `json:"clusterIP"`
	// ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.
	// If an address is specified manually, is in-range (as per system configuration), and is not in use,
	// it will be allocated to the service; otherwise creation of the service will fail. This field may
	// not be changed through updates unless the type field is also being changed to ExternalName (which
	// requires this field to be empty) or the type field is being changed from ExternalName (in which
	// case this field may optionally be specified, as describe above).  Valid values are "None", empty
	// string (""), or a valid IP address.  Setting this to "None" makes a "headless service" (no virtual
	// IP), which is useful when direct endpoint connections are preferred and proxying is not required.
	// Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when
	// creating a Service of type ExternalName, creation will fail. This field will be wiped when
	// updating a Service to type ExternalName.  If this field is not specified, it will be initialized
	// from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and
	// clusterIP have the same value.
	// This field may hold a maximum of two entries (dual-stack IPs, in either order). These IPs must
	// correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by
	// the ipFamilyPolicy field. More info: https://kubernetes.
	// io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies.
	ClusterIPs []string `json:"clusterIPs"`
	// ExternalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for
	// this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that
	// traffic arrives at a node with this IP.  A common example is external load-balancers that are not
	// part of the Kubernetes system.
	ExternalIPs []string `json:"externalIPs"`
	// ExternalName is the external reference that discovery mechanisms will return as an alias for this
	// service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123
	// hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
	ExternalName OptString `json:"externalName"`
	// ExternalTrafficPolicy denotes if this Service desires to route external traffic to node-local or
	// cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for
	// LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading.
	// "Cluster" obscures the client source IP and may cause a second hop to another node, but should
	// have good overall load-spreading.
	ExternalTrafficPolicy OptString `json:"externalTrafficPolicy"`
	// HealthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when
	// type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is
	// in-range, and is not in use, it will be used.  If not specified, a value will be automatically
	// allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node
	// holds endpoints for this service or not.  If this field is specified when creating a Service which
	// does not need it, creation will fail. This field will be wiped when updating a Service to no
	// longer need it (e.g. changing type).
	HealthCheckNodePort OptInt32 `json:"healthCheckNodePort"`
	// InternalTrafficPolicy specifies if the cluster internal traffic should be routed to all endpoints
	// or node-local endpoints only. "Cluster" routes internal traffic to a Service to all endpoints.
	// "Local" routes traffic to node-local endpoints only, traffic is dropped if no node-local endpoints
	// are ready. The default value is "Cluster".
	InternalTrafficPolicy OptString `json:"internalTrafficPolicy"`
	// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service. This field is
	// usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If
	// this field is specified manually, the requested family is available in the cluster, and
	// ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail. This field
	// is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not
	// allow changing the primary IP family of the Service. Valid values are "IPv4" and "IPv6".  This
	// field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to
	// "headless" services. This field will be wiped when updating a Service to type ExternalName.
	// This field may hold a maximum of two entries (dual-stack families, in either order).  These
	// families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and
	// ipFamilies are governed by the ipFamilyPolicy field.
	IpFamilies []string `json:"ipFamilies"`
	// IPFamilyPolicy represents the dual-stack-ness requested or required by this Service. If there is
	// no value provided, then this field will be set to SingleStack. Services can be "SingleStack" (a
	// single IP family), "PreferDualStack" (two IP families on dual-stack configured clusters or a
	// single IP family on single-stack clusters), or "RequireDualStack" (two IP families on dual-stack
	// configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of
	// this field. This field will be wiped when updating a service to type ExternalName.
	IpFamilyPolicy OptString `json:"ipFamilyPolicy"`
	// LoadBalancerClass is the class of the load balancer implementation this Service belongs to. If
	// specified, the value of this field must be a label-style identifier, with an optional prefix, e.g.
	// "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users. This
	// field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
	// balancer implementation is used, today this is typically done through the cloud provider
	// integration, but should apply for any default implementation. If set, it is assumed that a load
	// balancer implementation is watching for Services with a matching class. Any default load balancer
	// implementation (e.g. cloud providers) should ignore Services that set this field. This field can
	// only be set when creating or updating a Service to type 'LoadBalancer'. Once set, it can not be
	// changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
	LoadBalancerClass OptString `json:"loadBalancerClass"`
	// Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in
	// this field. This feature depends on whether the underlying cloud-provider supports specifying the
	// loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider
	// does not support the feature.
	LoadBalancerIP OptString `json:"loadBalancerIP"`
	// If specified and supported by the platform, this will restrict traffic through the cloud-provider
	// load-balancer will be restricted to the specified client IPs. This field will be ignored if the
	// cloud-provider does not support the feature." More info: https://kubernetes.
	// io/docs/tasks/access-application-cluster/create-external-load-balancer/.
	LoadBalancerSourceRanges []string `json:"loadBalancerSourceRanges"`
	// The list of ports that are exposed by this service. More info: https://kubernetes.
	// io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies.
	Ports []IoK8sAPICoreV1ServicePort `json:"ports"`
	// PublishNotReadyAddresses indicates that any agent which deals with endpoints for this Service
	// should disregard any indications of ready/not-ready. The primary use case for setting this field
	// is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose
	// of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources
	// for Services interpret this to mean that all endpoints are considered "ready" even if the Pods
	// themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints
	// or EndpointSlice resources can safely assume this behavior.
	PublishNotReadyAddresses OptBool `json:"publishNotReadyAddresses"`
	// Route service traffic to pods with label keys and values matching this selector. If empty or not
	// present, the service is assumed to have an external process managing its endpoints, which
	// Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored
	// if type is ExternalName. More info: https://kubernetes.
	// io/docs/concepts/services-networking/service/.
	Selector OptIoK8sAPICoreV1ServiceSpecSelector `json:"selector"`
	// Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session
	// affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.
	// io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies.
	SessionAffinity       OptString                              `json:"sessionAffinity"`
	SessionAffinityConfig OptIoK8sAPICoreV1SessionAffinityConfig `json:"sessionAffinityConfig"`
	// Type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName,
	// ClusterIP, NodePort, and LoadBalancer. "ClusterIP" allocates a cluster-internal IP address for
	// load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified,
	// by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is "None", no
	// virtual IP is allocated and the endpoints are published as a set of endpoints rather than a
	// virtual IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the
	// same endpoints as the clusterIP. "LoadBalancer" builds on NodePort and creates an external
	// load-balancer (if supported in the current cloud) which routes to the same endpoints as the
	// clusterIP. "ExternalName" aliases this service to the specified externalName. Several other fields
	// do not apply to ExternalName services. More info: https://kubernetes.
	// io/docs/concepts/services-networking/service/#publishing-services-service-types.
	Type OptString `json:"type"`
}

// GetAllocateLoadBalancerNodePorts returns the value of AllocateLoadBalancerNodePorts.
func (s *IoK8sAPICoreV1ServiceSpec) GetAllocateLoadBalancerNodePorts() OptBool {
	return s.AllocateLoadBalancerNodePorts
}

// GetClusterIP returns the value of ClusterIP.
func (s *IoK8sAPICoreV1ServiceSpec) GetClusterIP() OptString {
	return s.ClusterIP
}

// GetClusterIPs returns the value of ClusterIPs.
func (s *IoK8sAPICoreV1ServiceSpec) GetClusterIPs() []string {
	return s.ClusterIPs
}

// GetExternalIPs returns the value of ExternalIPs.
func (s *IoK8sAPICoreV1ServiceSpec) GetExternalIPs() []string {
	return s.ExternalIPs
}

// GetExternalName returns the value of ExternalName.
func (s *IoK8sAPICoreV1ServiceSpec) GetExternalName() OptString {
	return s.ExternalName
}

// GetExternalTrafficPolicy returns the value of ExternalTrafficPolicy.
func (s *IoK8sAPICoreV1ServiceSpec) GetExternalTrafficPolicy() OptString {
	return s.ExternalTrafficPolicy
}

// GetHealthCheckNodePort returns the value of HealthCheckNodePort.
func (s *IoK8sAPICoreV1ServiceSpec) GetHealthCheckNodePort() OptInt32 {
	return s.HealthCheckNodePort
}

// GetInternalTrafficPolicy returns the value of InternalTrafficPolicy.
func (s *IoK8sAPICoreV1ServiceSpec) GetInternalTrafficPolicy() OptString {
	return s.InternalTrafficPolicy
}

// GetIpFamilies returns the value of IpFamilies.
func (s *IoK8sAPICoreV1ServiceSpec) GetIpFamilies() []string {
	return s.IpFamilies
}

// GetIpFamilyPolicy returns the value of IpFamilyPolicy.
func (s *IoK8sAPICoreV1ServiceSpec) GetIpFamilyPolicy() OptString {
	return s.IpFamilyPolicy
}

// GetLoadBalancerClass returns the value of LoadBalancerClass.
func (s *IoK8sAPICoreV1ServiceSpec) GetLoadBalancerClass() OptString {
	return s.LoadBalancerClass
}

// GetLoadBalancerIP returns the value of LoadBalancerIP.
func (s *IoK8sAPICoreV1ServiceSpec) GetLoadBalancerIP() OptString {
	return s.LoadBalancerIP
}

// GetLoadBalancerSourceRanges returns the value of LoadBalancerSourceRanges.
func (s *IoK8sAPICoreV1ServiceSpec) GetLoadBalancerSourceRanges() []string {
	return s.LoadBalancerSourceRanges
}

// GetPorts returns the value of Ports.
func (s *IoK8sAPICoreV1ServiceSpec) GetPorts() []IoK8sAPICoreV1ServicePort {
	return s.Ports
}

// GetPublishNotReadyAddresses returns the value of PublishNotReadyAddresses.
func (s *IoK8sAPICoreV1ServiceSpec) GetPublishNotReadyAddresses() OptBool {
	return s.PublishNotReadyAddresses
}

// GetSelector returns the value of Selector.
func (s *IoK8sAPICoreV1ServiceSpec) GetSelector() OptIoK8sAPICoreV1ServiceSpecSelector {
	return s.Selector
}

// GetSessionAffinity returns the value of SessionAffinity.
func (s *IoK8sAPICoreV1ServiceSpec) GetSessionAffinity() OptString {
	return s.SessionAffinity
}

// GetSessionAffinityConfig returns the value of SessionAffinityConfig.
func (s *IoK8sAPICoreV1ServiceSpec) GetSessionAffinityConfig() OptIoK8sAPICoreV1SessionAffinityConfig {
	return s.SessionAffinityConfig
}

// GetType returns the value of Type.
func (s *IoK8sAPICoreV1ServiceSpec) GetType() OptString {
	return s.Type
}

// SetAllocateLoadBalancerNodePorts sets the value of AllocateLoadBalancerNodePorts.
func (s *IoK8sAPICoreV1ServiceSpec) SetAllocateLoadBalancerNodePorts(val OptBool) {
	s.AllocateLoadBalancerNodePorts = val
}

// SetClusterIP sets the value of ClusterIP.
func (s *IoK8sAPICoreV1ServiceSpec) SetClusterIP(val OptString) {
	s.ClusterIP = val
}

// SetClusterIPs sets the value of ClusterIPs.
func (s *IoK8sAPICoreV1ServiceSpec) SetClusterIPs(val []string) {
	s.ClusterIPs = val
}

// SetExternalIPs sets the value of ExternalIPs.
func (s *IoK8sAPICoreV1ServiceSpec) SetExternalIPs(val []string) {
	s.ExternalIPs = val
}

// SetExternalName sets the value of ExternalName.
func (s *IoK8sAPICoreV1ServiceSpec) SetExternalName(val OptString) {
	s.ExternalName = val
}

// SetExternalTrafficPolicy sets the value of ExternalTrafficPolicy.
func (s *IoK8sAPICoreV1ServiceSpec) SetExternalTrafficPolicy(val OptString) {
	s.ExternalTrafficPolicy = val
}

// SetHealthCheckNodePort sets the value of HealthCheckNodePort.
func (s *IoK8sAPICoreV1ServiceSpec) SetHealthCheckNodePort(val OptInt32) {
	s.HealthCheckNodePort = val
}

// SetInternalTrafficPolicy sets the value of InternalTrafficPolicy.
func (s *IoK8sAPICoreV1ServiceSpec) SetInternalTrafficPolicy(val OptString) {
	s.InternalTrafficPolicy = val
}

// SetIpFamilies sets the value of IpFamilies.
func (s *IoK8sAPICoreV1ServiceSpec) SetIpFamilies(val []string) {
	s.IpFamilies = val
}

// SetIpFamilyPolicy sets the value of IpFamilyPolicy.
func (s *IoK8sAPICoreV1ServiceSpec) SetIpFamilyPolicy(val OptString) {
	s.IpFamilyPolicy = val
}

// SetLoadBalancerClass sets the value of LoadBalancerClass.
func (s *IoK8sAPICoreV1ServiceSpec) SetLoadBalancerClass(val OptString) {
	s.LoadBalancerClass = val
}

// SetLoadBalancerIP sets the value of LoadBalancerIP.
func (s *IoK8sAPICoreV1ServiceSpec) SetLoadBalancerIP(val OptString) {
	s.LoadBalancerIP = val
}

// SetLoadBalancerSourceRanges sets the value of LoadBalancerSourceRanges.
func (s *IoK8sAPICoreV1ServiceSpec) SetLoadBalancerSourceRanges(val []string) {
	s.LoadBalancerSourceRanges = val
}

// SetPorts sets the value of Ports.
func (s *IoK8sAPICoreV1ServiceSpec) SetPorts(val []IoK8sAPICoreV1ServicePort) {
	s.Ports = val
}

// SetPublishNotReadyAddresses sets the value of PublishNotReadyAddresses.
func (s *IoK8sAPICoreV1ServiceSpec) SetPublishNotReadyAddresses(val OptBool) {
	s.PublishNotReadyAddresses = val
}

// SetSelector sets the value of Selector.
func (s *IoK8sAPICoreV1ServiceSpec) SetSelector(val OptIoK8sAPICoreV1ServiceSpecSelector) {
	s.Selector = val
}

// SetSessionAffinity sets the value of SessionAffinity.
func (s *IoK8sAPICoreV1ServiceSpec) SetSessionAffinity(val OptString) {
	s.SessionAffinity = val
}

// SetSessionAffinityConfig sets the value of SessionAffinityConfig.
func (s *IoK8sAPICoreV1ServiceSpec) SetSessionAffinityConfig(val OptIoK8sAPICoreV1SessionAffinityConfig) {
	s.SessionAffinityConfig = val
}

// SetType sets the value of Type.
func (s *IoK8sAPICoreV1ServiceSpec) SetType(val OptString) {
	s.Type = val
}

// Route service traffic to pods with label keys and values matching this selector. If empty or not
// present, the service is assumed to have an external process managing its endpoints, which
// Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored
// if type is ExternalName. More info: https://kubernetes.
// io/docs/concepts/services-networking/service/.
type IoK8sAPICoreV1ServiceSpecSelector map[string]string

func (s *IoK8sAPICoreV1ServiceSpecSelector) init() IoK8sAPICoreV1ServiceSpecSelector {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// ServiceStatus represents the current status of a service.
// Ref: #/components/schemas/io.k8s.api.core.v1.ServiceStatus
type IoK8sAPICoreV1ServiceStatus struct {
	// Current service state.
	Conditions   []IoK8sApimachineryPkgApisMetaV1Condition `json:"conditions"`
	LoadBalancer OptIoK8sAPICoreV1LoadBalancerStatus       `json:"loadBalancer"`
}

// GetConditions returns the value of Conditions.
func (s *IoK8sAPICoreV1ServiceStatus) GetConditions() []IoK8sApimachineryPkgApisMetaV1Condition {
	return s.Conditions
}

// GetLoadBalancer returns the value of LoadBalancer.
func (s *IoK8sAPICoreV1ServiceStatus) GetLoadBalancer() OptIoK8sAPICoreV1LoadBalancerStatus {
	return s.LoadBalancer
}

// SetConditions sets the value of Conditions.
func (s *IoK8sAPICoreV1ServiceStatus) SetConditions(val []IoK8sApimachineryPkgApisMetaV1Condition) {
	s.Conditions = val
}

// SetLoadBalancer sets the value of LoadBalancer.
func (s *IoK8sAPICoreV1ServiceStatus) SetLoadBalancer(val OptIoK8sAPICoreV1LoadBalancerStatus) {
	s.LoadBalancer = val
}

// SessionAffinityConfig represents the configurations of session affinity.
// Ref: #/components/schemas/io.k8s.api.core.v1.SessionAffinityConfig
type IoK8sAPICoreV1SessionAffinityConfig struct {
	ClientIP OptIoK8sAPICoreV1ClientIPConfig `json:"clientIP"`
}

// GetClientIP returns the value of ClientIP.
func (s *IoK8sAPICoreV1SessionAffinityConfig) GetClientIP() OptIoK8sAPICoreV1ClientIPConfig {
	return s.ClientIP
}

// SetClientIP sets the value of ClientIP.
func (s *IoK8sAPICoreV1SessionAffinityConfig) SetClientIP(val OptIoK8sAPICoreV1ClientIPConfig) {
	s.ClientIP = val
}

// Represents a StorageOS persistent volume resource.
// Ref: #/components/schemas/io.k8s.api.core.v1.StorageOSPersistentVolumeSource
type IoK8sAPICoreV1StorageOSPersistentVolumeSource struct {
	// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex.
	// "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType OptString `json:"fsType"`
	// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly  OptBool                          `json:"readOnly"`
	SecretRef OptIoK8sAPICoreV1ObjectReference `json:"secretRef"`
	// VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique
	// within a namespace.
	VolumeName OptString `json:"volumeName"`
	// VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified
	// then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored
	// within StorageOS for tighter integration. Set VolumeName to any name to override the default
	// behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do
	// not pre-exist within StorageOS will be created.
	VolumeNamespace OptString `json:"volumeNamespace"`
}

// GetFsType returns the value of FsType.
func (s *IoK8sAPICoreV1StorageOSPersistentVolumeSource) GetFsType() OptString {
	return s.FsType
}

// GetReadOnly returns the value of ReadOnly.
func (s *IoK8sAPICoreV1StorageOSPersistentVolumeSource) GetReadOnly() OptBool {
	return s.ReadOnly
}

// GetSecretRef returns the value of SecretRef.
func (s *IoK8sAPICoreV1StorageOSPersistentVolumeSource) GetSecretRef() OptIoK8sAPICoreV1ObjectReference {
	return s.SecretRef
}

// GetVolumeName returns the value of VolumeName.
func (s *IoK8sAPICoreV1StorageOSPersistentVolumeSource) GetVolumeName() OptString {
	return s.VolumeName
}

// GetVolumeNamespace returns the value of VolumeNamespace.
func (s *IoK8sAPICoreV1StorageOSPersistentVolumeSource) GetVolumeNamespace() OptString {
	return s.VolumeNamespace
}

// SetFsType sets the value of FsType.
func (s *IoK8sAPICoreV1StorageOSPersistentVolumeSource) SetFsType(val OptString) {
	s.FsType = val
}

// SetReadOnly sets the value of ReadOnly.
func (s *IoK8sAPICoreV1StorageOSPersistentVolumeSource) SetReadOnly(val OptBool) {
	s.ReadOnly = val
}

// SetSecretRef sets the value of SecretRef.
func (s *IoK8sAPICoreV1StorageOSPersistentVolumeSource) SetSecretRef(val OptIoK8sAPICoreV1ObjectReference) {
	s.SecretRef = val
}

// SetVolumeName sets the value of VolumeName.
func (s *IoK8sAPICoreV1StorageOSPersistentVolumeSource) SetVolumeName(val OptString) {
	s.VolumeName = val
}

// SetVolumeNamespace sets the value of VolumeNamespace.
func (s *IoK8sAPICoreV1StorageOSPersistentVolumeSource) SetVolumeNamespace(val OptString) {
	s.VolumeNamespace = val
}

// Represents a StorageOS persistent volume resource.
// Ref: #/components/schemas/io.k8s.api.core.v1.StorageOSVolumeSource
type IoK8sAPICoreV1StorageOSVolumeSource struct {
	// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex.
	// "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType OptString `json:"fsType"`
	// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly  OptBool                               `json:"readOnly"`
	SecretRef OptIoK8sAPICoreV1LocalObjectReference `json:"secretRef"`
	// VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique
	// within a namespace.
	VolumeName OptString `json:"volumeName"`
	// VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified
	// then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored
	// within StorageOS for tighter integration. Set VolumeName to any name to override the default
	// behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do
	// not pre-exist within StorageOS will be created.
	VolumeNamespace OptString `json:"volumeNamespace"`
}

// GetFsType returns the value of FsType.
func (s *IoK8sAPICoreV1StorageOSVolumeSource) GetFsType() OptString {
	return s.FsType
}

// GetReadOnly returns the value of ReadOnly.
func (s *IoK8sAPICoreV1StorageOSVolumeSource) GetReadOnly() OptBool {
	return s.ReadOnly
}

// GetSecretRef returns the value of SecretRef.
func (s *IoK8sAPICoreV1StorageOSVolumeSource) GetSecretRef() OptIoK8sAPICoreV1LocalObjectReference {
	return s.SecretRef
}

// GetVolumeName returns the value of VolumeName.
func (s *IoK8sAPICoreV1StorageOSVolumeSource) GetVolumeName() OptString {
	return s.VolumeName
}

// GetVolumeNamespace returns the value of VolumeNamespace.
func (s *IoK8sAPICoreV1StorageOSVolumeSource) GetVolumeNamespace() OptString {
	return s.VolumeNamespace
}

// SetFsType sets the value of FsType.
func (s *IoK8sAPICoreV1StorageOSVolumeSource) SetFsType(val OptString) {
	s.FsType = val
}

// SetReadOnly sets the value of ReadOnly.
func (s *IoK8sAPICoreV1StorageOSVolumeSource) SetReadOnly(val OptBool) {
	s.ReadOnly = val
}

// SetSecretRef sets the value of SecretRef.
func (s *IoK8sAPICoreV1StorageOSVolumeSource) SetSecretRef(val OptIoK8sAPICoreV1LocalObjectReference) {
	s.SecretRef = val
}

// SetVolumeName sets the value of VolumeName.
func (s *IoK8sAPICoreV1StorageOSVolumeSource) SetVolumeName(val OptString) {
	s.VolumeName = val
}

// SetVolumeNamespace sets the value of VolumeNamespace.
func (s *IoK8sAPICoreV1StorageOSVolumeSource) SetVolumeNamespace(val OptString) {
	s.VolumeNamespace = val
}

// Sysctl defines a kernel parameter to be set.
// Ref: #/components/schemas/io.k8s.api.core.v1.Sysctl
type IoK8sAPICoreV1Sysctl struct {
	// Name of a property to set.
	Name string `json:"name"`
	// Value of a property to set.
	Value string `json:"value"`
}

// GetName returns the value of Name.
func (s *IoK8sAPICoreV1Sysctl) GetName() string {
	return s.Name
}

// GetValue returns the value of Value.
func (s *IoK8sAPICoreV1Sysctl) GetValue() string {
	return s.Value
}

// SetName sets the value of Name.
func (s *IoK8sAPICoreV1Sysctl) SetName(val string) {
	s.Name = val
}

// SetValue sets the value of Value.
func (s *IoK8sAPICoreV1Sysctl) SetValue(val string) {
	s.Value = val
}

// TCPSocketAction describes an action based on opening a socket.
// Ref: #/components/schemas/io.k8s.api.core.v1.TCPSocketAction
type IoK8sAPICoreV1TCPSocketAction struct {
	// Optional: Host name to connect to, defaults to the pod IP.
	Host OptString                                 `json:"host"`
	Port IoK8sApimachineryPkgUtilIntstrIntOrString `json:"port"`
}

// GetHost returns the value of Host.
func (s *IoK8sAPICoreV1TCPSocketAction) GetHost() OptString {
	return s.Host
}

// GetPort returns the value of Port.
func (s *IoK8sAPICoreV1TCPSocketAction) GetPort() IoK8sApimachineryPkgUtilIntstrIntOrString {
	return s.Port
}

// SetHost sets the value of Host.
func (s *IoK8sAPICoreV1TCPSocketAction) SetHost(val OptString) {
	s.Host = val
}

// SetPort sets the value of Port.
func (s *IoK8sAPICoreV1TCPSocketAction) SetPort(val IoK8sApimachineryPkgUtilIntstrIntOrString) {
	s.Port = val
}

// The node this Taint is attached to has the "effect" on any pod that does not tolerate the Taint.
// Ref: #/components/schemas/io.k8s.api.core.v1.Taint
type IoK8sAPICoreV1Taint struct {
	// Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are
	// NoSchedule, PreferNoSchedule and NoExecute.
	Effect string `json:"effect"`
	// Required. The taint key to be applied to a node.
	Key       string                                `json:"key"`
	TimeAdded OptIoK8sApimachineryPkgApisMetaV1Time `json:"timeAdded"`
	// The taint value corresponding to the taint key.
	Value OptString `json:"value"`
}

// GetEffect returns the value of Effect.
func (s *IoK8sAPICoreV1Taint) GetEffect() string {
	return s.Effect
}

// GetKey returns the value of Key.
func (s *IoK8sAPICoreV1Taint) GetKey() string {
	return s.Key
}

// GetTimeAdded returns the value of TimeAdded.
func (s *IoK8sAPICoreV1Taint) GetTimeAdded() OptIoK8sApimachineryPkgApisMetaV1Time {
	return s.TimeAdded
}

// GetValue returns the value of Value.
func (s *IoK8sAPICoreV1Taint) GetValue() OptString {
	return s.Value
}

// SetEffect sets the value of Effect.
func (s *IoK8sAPICoreV1Taint) SetEffect(val string) {
	s.Effect = val
}

// SetKey sets the value of Key.
func (s *IoK8sAPICoreV1Taint) SetKey(val string) {
	s.Key = val
}

// SetTimeAdded sets the value of TimeAdded.
func (s *IoK8sAPICoreV1Taint) SetTimeAdded(val OptIoK8sApimachineryPkgApisMetaV1Time) {
	s.TimeAdded = val
}

// SetValue sets the value of Value.
func (s *IoK8sAPICoreV1Taint) SetValue(val OptString) {
	s.Value = val
}

// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,
// effect> using the matching operator <operator>.
// Ref: #/components/schemas/io.k8s.api.core.v1.Toleration
type IoK8sAPICoreV1Toleration struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects. When specified,
	// allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect OptString `json:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key
	// is empty, operator must be Exists; this combination means to match all values and all keys.
	Key OptString `json:"key"`
	// Operator represents a key's relationship to the value. Valid operators are Exists and Equal.
	// Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all
	// taints of a particular category.
	Operator OptString `json:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute,
	// otherwise this field is ignored) tolerates the taint. By default, it is not set, which means
	// tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict
	// immediately) by the system.
	TolerationSeconds OptInt64 `json:"tolerationSeconds"`
	// Value is the taint value the toleration matches to. If the operator is Exists, the value should be
	// empty, otherwise just a regular string.
	Value OptString `json:"value"`
}

// GetEffect returns the value of Effect.
func (s *IoK8sAPICoreV1Toleration) GetEffect() OptString {
	return s.Effect
}

// GetKey returns the value of Key.
func (s *IoK8sAPICoreV1Toleration) GetKey() OptString {
	return s.Key
}

// GetOperator returns the value of Operator.
func (s *IoK8sAPICoreV1Toleration) GetOperator() OptString {
	return s.Operator
}

// GetTolerationSeconds returns the value of TolerationSeconds.
func (s *IoK8sAPICoreV1Toleration) GetTolerationSeconds() OptInt64 {
	return s.TolerationSeconds
}

// GetValue returns the value of Value.
func (s *IoK8sAPICoreV1Toleration) GetValue() OptString {
	return s.Value
}

// SetEffect sets the value of Effect.
func (s *IoK8sAPICoreV1Toleration) SetEffect(val OptString) {
	s.Effect = val
}

// SetKey sets the value of Key.
func (s *IoK8sAPICoreV1Toleration) SetKey(val OptString) {
	s.Key = val
}

// SetOperator sets the value of Operator.
func (s *IoK8sAPICoreV1Toleration) SetOperator(val OptString) {
	s.Operator = val
}

// SetTolerationSeconds sets the value of TolerationSeconds.
func (s *IoK8sAPICoreV1Toleration) SetTolerationSeconds(val OptInt64) {
	s.TolerationSeconds = val
}

// SetValue sets the value of Value.
func (s *IoK8sAPICoreV1Toleration) SetValue(val OptString) {
	s.Value = val
}

// A topology selector requirement is a selector that matches given label. This is an alpha feature
// and may change in the future.
// Ref: #/components/schemas/io.k8s.api.core.v1.TopologySelectorLabelRequirement
type IoK8sAPICoreV1TopologySelectorLabelRequirement struct {
	// The label key that the selector applies to.
	Key string `json:"key"`
	// An array of string values. One value must match the label to be selected. Each entry in Values is
	// ORed.
	Values []string `json:"values"`
}

// GetKey returns the value of Key.
func (s *IoK8sAPICoreV1TopologySelectorLabelRequirement) GetKey() string {
	return s.Key
}

// GetValues returns the value of Values.
func (s *IoK8sAPICoreV1TopologySelectorLabelRequirement) GetValues() []string {
	return s.Values
}

// SetKey sets the value of Key.
func (s *IoK8sAPICoreV1TopologySelectorLabelRequirement) SetKey(val string) {
	s.Key = val
}

// SetValues sets the value of Values.
func (s *IoK8sAPICoreV1TopologySelectorLabelRequirement) SetValues(val []string) {
	s.Values = val
}

// A topology selector term represents the result of label queries. A null or empty topology selector
// term matches no objects. The requirements of them are ANDed. It provides a subset of functionality
// as NodeSelectorTerm. This is an alpha feature and may change in the future.
// Ref: #/components/schemas/io.k8s.api.core.v1.TopologySelectorTerm
type IoK8sAPICoreV1TopologySelectorTerm struct {
	// A list of topology selector requirements by labels.
	MatchLabelExpressions []IoK8sAPICoreV1TopologySelectorLabelRequirement `json:"matchLabelExpressions"`
}

// GetMatchLabelExpressions returns the value of MatchLabelExpressions.
func (s *IoK8sAPICoreV1TopologySelectorTerm) GetMatchLabelExpressions() []IoK8sAPICoreV1TopologySelectorLabelRequirement {
	return s.MatchLabelExpressions
}

// SetMatchLabelExpressions sets the value of MatchLabelExpressions.
func (s *IoK8sAPICoreV1TopologySelectorTerm) SetMatchLabelExpressions(val []IoK8sAPICoreV1TopologySelectorLabelRequirement) {
	s.MatchLabelExpressions = val
}

// TopologySpreadConstraint specifies how to spread matching pods among the given topology.
// Ref: #/components/schemas/io.k8s.api.core.v1.TopologySpreadConstraint
type IoK8sAPICoreV1TopologySpreadConstraint struct {
	LabelSelector OptIoK8sApimachineryPkgApisMetaV1LabelSelector `json:"labelSelector"`
	// MaxSkew describes the degree to which pods may be unevenly distributed. When
	// `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of
	// matching pods in the target topology and the global minimum. For example, in a 3-zone cluster,
	// MaxSkew is set to 1, and pods with the same labelSelector spread as 1/1/0: | zone1 | zone2 | zone3
	// | |   P   |   P   |       | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to
	// become 1/1/1; scheduling it onto zone1(zone2) would make the ActualSkew(2-0) on zone1(zone2)
	// violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When
	// `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that
	// satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
	MaxSkew int32 `json:"maxSkew"`
	// TopologyKey is the key of node labels. Nodes that have a label with this key and identical values
	// are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to
	// put balanced number of pods into each bucket. It's a required field.
	TopologyKey string `json:"topologyKey"`
	// WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. -
	// DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the
	// scheduler to schedule the pod in any location,
	// but giving higher precedence to topologies that would help reduce the
	// skew.
	// A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node
	// assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster,
	//  MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 |
	// zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can
	// only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3)
	// satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't
	// make it *more* imbalanced. It's a required field.
	WhenUnsatisfiable string `json:"whenUnsatisfiable"`
}

// GetLabelSelector returns the value of LabelSelector.
func (s *IoK8sAPICoreV1TopologySpreadConstraint) GetLabelSelector() OptIoK8sApimachineryPkgApisMetaV1LabelSelector {
	return s.LabelSelector
}

// GetMaxSkew returns the value of MaxSkew.
func (s *IoK8sAPICoreV1TopologySpreadConstraint) GetMaxSkew() int32 {
	return s.MaxSkew
}

// GetTopologyKey returns the value of TopologyKey.
func (s *IoK8sAPICoreV1TopologySpreadConstraint) GetTopologyKey() string {
	return s.TopologyKey
}

// GetWhenUnsatisfiable returns the value of WhenUnsatisfiable.
func (s *IoK8sAPICoreV1TopologySpreadConstraint) GetWhenUnsatisfiable() string {
	return s.WhenUnsatisfiable
}

// SetLabelSelector sets the value of LabelSelector.
func (s *IoK8sAPICoreV1TopologySpreadConstraint) SetLabelSelector(val OptIoK8sApimachineryPkgApisMetaV1LabelSelector) {
	s.LabelSelector = val
}

// SetMaxSkew sets the value of MaxSkew.
func (s *IoK8sAPICoreV1TopologySpreadConstraint) SetMaxSkew(val int32) {
	s.MaxSkew = val
}

// SetTopologyKey sets the value of TopologyKey.
func (s *IoK8sAPICoreV1TopologySpreadConstraint) SetTopologyKey(val string) {
	s.TopologyKey = val
}

// SetWhenUnsatisfiable sets the value of WhenUnsatisfiable.
func (s *IoK8sAPICoreV1TopologySpreadConstraint) SetWhenUnsatisfiable(val string) {
	s.WhenUnsatisfiable = val
}

// TypedLocalObjectReference contains enough information to let you locate the typed referenced
// object inside the same namespace.
// Ref: #/components/schemas/io.k8s.api.core.v1.TypedLocalObjectReference
type IoK8sAPICoreV1TypedLocalObjectReference struct {
	// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the
	// specified Kind must be in the core API group. For any other third-party types, APIGroup is
	// required.
	ApiGroup OptString `json:"apiGroup"`
	// Kind is the type of resource being referenced.
	Kind string `json:"kind"`
	// Name is the name of resource being referenced.
	Name string `json:"name"`
}

// GetApiGroup returns the value of ApiGroup.
func (s *IoK8sAPICoreV1TypedLocalObjectReference) GetApiGroup() OptString {
	return s.ApiGroup
}

// GetKind returns the value of Kind.
func (s *IoK8sAPICoreV1TypedLocalObjectReference) GetKind() string {
	return s.Kind
}

// GetName returns the value of Name.
func (s *IoK8sAPICoreV1TypedLocalObjectReference) GetName() string {
	return s.Name
}

// SetApiGroup sets the value of ApiGroup.
func (s *IoK8sAPICoreV1TypedLocalObjectReference) SetApiGroup(val OptString) {
	s.ApiGroup = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPICoreV1TypedLocalObjectReference) SetKind(val string) {
	s.Kind = val
}

// SetName sets the value of Name.
func (s *IoK8sAPICoreV1TypedLocalObjectReference) SetName(val string) {
	s.Name = val
}

// Volume represents a named volume in a pod that may be accessed by any container in the pod.
// Ref: #/components/schemas/io.k8s.api.core.v1.Volume
type IoK8sAPICoreV1Volume struct {
	AwsElasticBlockStore OptIoK8sAPICoreV1AWSElasticBlockStoreVolumeSource `json:"awsElasticBlockStore"`
	AzureDisk            OptIoK8sAPICoreV1AzureDiskVolumeSource            `json:"azureDisk"`
	AzureFile            OptIoK8sAPICoreV1AzureFileVolumeSource            `json:"azureFile"`
	Cephfs               OptIoK8sAPICoreV1CephFSVolumeSource               `json:"cephfs"`
	Cinder               OptIoK8sAPICoreV1CinderVolumeSource               `json:"cinder"`
	ConfigMap            OptIoK8sAPICoreV1ConfigMapVolumeSource            `json:"configMap"`
	Csi                  OptIoK8sAPICoreV1CSIVolumeSource                  `json:"csi"`
	DownwardAPI          OptIoK8sAPICoreV1DownwardAPIVolumeSource          `json:"downwardAPI"`
	EmptyDir             OptIoK8sAPICoreV1EmptyDirVolumeSource             `json:"emptyDir"`
	Ephemeral            OptIoK8sAPICoreV1EphemeralVolumeSource            `json:"ephemeral"`
	Fc                   OptIoK8sAPICoreV1FCVolumeSource                   `json:"fc"`
	FlexVolume           OptIoK8sAPICoreV1FlexVolumeSource                 `json:"flexVolume"`
	Flocker              OptIoK8sAPICoreV1FlockerVolumeSource              `json:"flocker"`
	GcePersistentDisk    OptIoK8sAPICoreV1GCEPersistentDiskVolumeSource    `json:"gcePersistentDisk"`
	GitRepo              OptIoK8sAPICoreV1GitRepoVolumeSource              `json:"gitRepo"`
	Glusterfs            OptIoK8sAPICoreV1GlusterfsVolumeSource            `json:"glusterfs"`
	HostPath             OptIoK8sAPICoreV1HostPathVolumeSource             `json:"hostPath"`
	Iscsi                OptIoK8sAPICoreV1ISCSIVolumeSource                `json:"iscsi"`
	// Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.
	// io/docs/concepts/overview/working-with-objects/names/#names.
	Name                  string                                             `json:"name"`
	Nfs                   OptIoK8sAPICoreV1NFSVolumeSource                   `json:"nfs"`
	PersistentVolumeClaim OptIoK8sAPICoreV1PersistentVolumeClaimVolumeSource `json:"persistentVolumeClaim"`
	PhotonPersistentDisk  OptIoK8sAPICoreV1PhotonPersistentDiskVolumeSource  `json:"photonPersistentDisk"`
	PortworxVolume        OptIoK8sAPICoreV1PortworxVolumeSource              `json:"portworxVolume"`
	Projected             OptIoK8sAPICoreV1ProjectedVolumeSource             `json:"projected"`
	Quobyte               OptIoK8sAPICoreV1QuobyteVolumeSource               `json:"quobyte"`
	Rbd                   OptIoK8sAPICoreV1RBDVolumeSource                   `json:"rbd"`
	ScaleIO               OptIoK8sAPICoreV1ScaleIOVolumeSource               `json:"scaleIO"`
	Secret                OptIoK8sAPICoreV1SecretVolumeSource                `json:"secret"`
	Storageos             OptIoK8sAPICoreV1StorageOSVolumeSource             `json:"storageos"`
	VsphereVolume         OptIoK8sAPICoreV1VsphereVirtualDiskVolumeSource    `json:"vsphereVolume"`
}

// GetAwsElasticBlockStore returns the value of AwsElasticBlockStore.
func (s *IoK8sAPICoreV1Volume) GetAwsElasticBlockStore() OptIoK8sAPICoreV1AWSElasticBlockStoreVolumeSource {
	return s.AwsElasticBlockStore
}

// GetAzureDisk returns the value of AzureDisk.
func (s *IoK8sAPICoreV1Volume) GetAzureDisk() OptIoK8sAPICoreV1AzureDiskVolumeSource {
	return s.AzureDisk
}

// GetAzureFile returns the value of AzureFile.
func (s *IoK8sAPICoreV1Volume) GetAzureFile() OptIoK8sAPICoreV1AzureFileVolumeSource {
	return s.AzureFile
}

// GetCephfs returns the value of Cephfs.
func (s *IoK8sAPICoreV1Volume) GetCephfs() OptIoK8sAPICoreV1CephFSVolumeSource {
	return s.Cephfs
}

// GetCinder returns the value of Cinder.
func (s *IoK8sAPICoreV1Volume) GetCinder() OptIoK8sAPICoreV1CinderVolumeSource {
	return s.Cinder
}

// GetConfigMap returns the value of ConfigMap.
func (s *IoK8sAPICoreV1Volume) GetConfigMap() OptIoK8sAPICoreV1ConfigMapVolumeSource {
	return s.ConfigMap
}

// GetCsi returns the value of Csi.
func (s *IoK8sAPICoreV1Volume) GetCsi() OptIoK8sAPICoreV1CSIVolumeSource {
	return s.Csi
}

// GetDownwardAPI returns the value of DownwardAPI.
func (s *IoK8sAPICoreV1Volume) GetDownwardAPI() OptIoK8sAPICoreV1DownwardAPIVolumeSource {
	return s.DownwardAPI
}

// GetEmptyDir returns the value of EmptyDir.
func (s *IoK8sAPICoreV1Volume) GetEmptyDir() OptIoK8sAPICoreV1EmptyDirVolumeSource {
	return s.EmptyDir
}

// GetEphemeral returns the value of Ephemeral.
func (s *IoK8sAPICoreV1Volume) GetEphemeral() OptIoK8sAPICoreV1EphemeralVolumeSource {
	return s.Ephemeral
}

// GetFc returns the value of Fc.
func (s *IoK8sAPICoreV1Volume) GetFc() OptIoK8sAPICoreV1FCVolumeSource {
	return s.Fc
}

// GetFlexVolume returns the value of FlexVolume.
func (s *IoK8sAPICoreV1Volume) GetFlexVolume() OptIoK8sAPICoreV1FlexVolumeSource {
	return s.FlexVolume
}

// GetFlocker returns the value of Flocker.
func (s *IoK8sAPICoreV1Volume) GetFlocker() OptIoK8sAPICoreV1FlockerVolumeSource {
	return s.Flocker
}

// GetGcePersistentDisk returns the value of GcePersistentDisk.
func (s *IoK8sAPICoreV1Volume) GetGcePersistentDisk() OptIoK8sAPICoreV1GCEPersistentDiskVolumeSource {
	return s.GcePersistentDisk
}

// GetGitRepo returns the value of GitRepo.
func (s *IoK8sAPICoreV1Volume) GetGitRepo() OptIoK8sAPICoreV1GitRepoVolumeSource {
	return s.GitRepo
}

// GetGlusterfs returns the value of Glusterfs.
func (s *IoK8sAPICoreV1Volume) GetGlusterfs() OptIoK8sAPICoreV1GlusterfsVolumeSource {
	return s.Glusterfs
}

// GetHostPath returns the value of HostPath.
func (s *IoK8sAPICoreV1Volume) GetHostPath() OptIoK8sAPICoreV1HostPathVolumeSource {
	return s.HostPath
}

// GetIscsi returns the value of Iscsi.
func (s *IoK8sAPICoreV1Volume) GetIscsi() OptIoK8sAPICoreV1ISCSIVolumeSource {
	return s.Iscsi
}

// GetName returns the value of Name.
func (s *IoK8sAPICoreV1Volume) GetName() string {
	return s.Name
}

// GetNfs returns the value of Nfs.
func (s *IoK8sAPICoreV1Volume) GetNfs() OptIoK8sAPICoreV1NFSVolumeSource {
	return s.Nfs
}

// GetPersistentVolumeClaim returns the value of PersistentVolumeClaim.
func (s *IoK8sAPICoreV1Volume) GetPersistentVolumeClaim() OptIoK8sAPICoreV1PersistentVolumeClaimVolumeSource {
	return s.PersistentVolumeClaim
}

// GetPhotonPersistentDisk returns the value of PhotonPersistentDisk.
func (s *IoK8sAPICoreV1Volume) GetPhotonPersistentDisk() OptIoK8sAPICoreV1PhotonPersistentDiskVolumeSource {
	return s.PhotonPersistentDisk
}

// GetPortworxVolume returns the value of PortworxVolume.
func (s *IoK8sAPICoreV1Volume) GetPortworxVolume() OptIoK8sAPICoreV1PortworxVolumeSource {
	return s.PortworxVolume
}

// GetProjected returns the value of Projected.
func (s *IoK8sAPICoreV1Volume) GetProjected() OptIoK8sAPICoreV1ProjectedVolumeSource {
	return s.Projected
}

// GetQuobyte returns the value of Quobyte.
func (s *IoK8sAPICoreV1Volume) GetQuobyte() OptIoK8sAPICoreV1QuobyteVolumeSource {
	return s.Quobyte
}

// GetRbd returns the value of Rbd.
func (s *IoK8sAPICoreV1Volume) GetRbd() OptIoK8sAPICoreV1RBDVolumeSource {
	return s.Rbd
}

// GetScaleIO returns the value of ScaleIO.
func (s *IoK8sAPICoreV1Volume) GetScaleIO() OptIoK8sAPICoreV1ScaleIOVolumeSource {
	return s.ScaleIO
}

// GetSecret returns the value of Secret.
func (s *IoK8sAPICoreV1Volume) GetSecret() OptIoK8sAPICoreV1SecretVolumeSource {
	return s.Secret
}

// GetStorageos returns the value of Storageos.
func (s *IoK8sAPICoreV1Volume) GetStorageos() OptIoK8sAPICoreV1StorageOSVolumeSource {
	return s.Storageos
}

// GetVsphereVolume returns the value of VsphereVolume.
func (s *IoK8sAPICoreV1Volume) GetVsphereVolume() OptIoK8sAPICoreV1VsphereVirtualDiskVolumeSource {
	return s.VsphereVolume
}

// SetAwsElasticBlockStore sets the value of AwsElasticBlockStore.
func (s *IoK8sAPICoreV1Volume) SetAwsElasticBlockStore(val OptIoK8sAPICoreV1AWSElasticBlockStoreVolumeSource) {
	s.AwsElasticBlockStore = val
}

// SetAzureDisk sets the value of AzureDisk.
func (s *IoK8sAPICoreV1Volume) SetAzureDisk(val OptIoK8sAPICoreV1AzureDiskVolumeSource) {
	s.AzureDisk = val
}

// SetAzureFile sets the value of AzureFile.
func (s *IoK8sAPICoreV1Volume) SetAzureFile(val OptIoK8sAPICoreV1AzureFileVolumeSource) {
	s.AzureFile = val
}

// SetCephfs sets the value of Cephfs.
func (s *IoK8sAPICoreV1Volume) SetCephfs(val OptIoK8sAPICoreV1CephFSVolumeSource) {
	s.Cephfs = val
}

// SetCinder sets the value of Cinder.
func (s *IoK8sAPICoreV1Volume) SetCinder(val OptIoK8sAPICoreV1CinderVolumeSource) {
	s.Cinder = val
}

// SetConfigMap sets the value of ConfigMap.
func (s *IoK8sAPICoreV1Volume) SetConfigMap(val OptIoK8sAPICoreV1ConfigMapVolumeSource) {
	s.ConfigMap = val
}

// SetCsi sets the value of Csi.
func (s *IoK8sAPICoreV1Volume) SetCsi(val OptIoK8sAPICoreV1CSIVolumeSource) {
	s.Csi = val
}

// SetDownwardAPI sets the value of DownwardAPI.
func (s *IoK8sAPICoreV1Volume) SetDownwardAPI(val OptIoK8sAPICoreV1DownwardAPIVolumeSource) {
	s.DownwardAPI = val
}

// SetEmptyDir sets the value of EmptyDir.
func (s *IoK8sAPICoreV1Volume) SetEmptyDir(val OptIoK8sAPICoreV1EmptyDirVolumeSource) {
	s.EmptyDir = val
}

// SetEphemeral sets the value of Ephemeral.
func (s *IoK8sAPICoreV1Volume) SetEphemeral(val OptIoK8sAPICoreV1EphemeralVolumeSource) {
	s.Ephemeral = val
}

// SetFc sets the value of Fc.
func (s *IoK8sAPICoreV1Volume) SetFc(val OptIoK8sAPICoreV1FCVolumeSource) {
	s.Fc = val
}

// SetFlexVolume sets the value of FlexVolume.
func (s *IoK8sAPICoreV1Volume) SetFlexVolume(val OptIoK8sAPICoreV1FlexVolumeSource) {
	s.FlexVolume = val
}

// SetFlocker sets the value of Flocker.
func (s *IoK8sAPICoreV1Volume) SetFlocker(val OptIoK8sAPICoreV1FlockerVolumeSource) {
	s.Flocker = val
}

// SetGcePersistentDisk sets the value of GcePersistentDisk.
func (s *IoK8sAPICoreV1Volume) SetGcePersistentDisk(val OptIoK8sAPICoreV1GCEPersistentDiskVolumeSource) {
	s.GcePersistentDisk = val
}

// SetGitRepo sets the value of GitRepo.
func (s *IoK8sAPICoreV1Volume) SetGitRepo(val OptIoK8sAPICoreV1GitRepoVolumeSource) {
	s.GitRepo = val
}

// SetGlusterfs sets the value of Glusterfs.
func (s *IoK8sAPICoreV1Volume) SetGlusterfs(val OptIoK8sAPICoreV1GlusterfsVolumeSource) {
	s.Glusterfs = val
}

// SetHostPath sets the value of HostPath.
func (s *IoK8sAPICoreV1Volume) SetHostPath(val OptIoK8sAPICoreV1HostPathVolumeSource) {
	s.HostPath = val
}

// SetIscsi sets the value of Iscsi.
func (s *IoK8sAPICoreV1Volume) SetIscsi(val OptIoK8sAPICoreV1ISCSIVolumeSource) {
	s.Iscsi = val
}

// SetName sets the value of Name.
func (s *IoK8sAPICoreV1Volume) SetName(val string) {
	s.Name = val
}

// SetNfs sets the value of Nfs.
func (s *IoK8sAPICoreV1Volume) SetNfs(val OptIoK8sAPICoreV1NFSVolumeSource) {
	s.Nfs = val
}

// SetPersistentVolumeClaim sets the value of PersistentVolumeClaim.
func (s *IoK8sAPICoreV1Volume) SetPersistentVolumeClaim(val OptIoK8sAPICoreV1PersistentVolumeClaimVolumeSource) {
	s.PersistentVolumeClaim = val
}

// SetPhotonPersistentDisk sets the value of PhotonPersistentDisk.
func (s *IoK8sAPICoreV1Volume) SetPhotonPersistentDisk(val OptIoK8sAPICoreV1PhotonPersistentDiskVolumeSource) {
	s.PhotonPersistentDisk = val
}

// SetPortworxVolume sets the value of PortworxVolume.
func (s *IoK8sAPICoreV1Volume) SetPortworxVolume(val OptIoK8sAPICoreV1PortworxVolumeSource) {
	s.PortworxVolume = val
}

// SetProjected sets the value of Projected.
func (s *IoK8sAPICoreV1Volume) SetProjected(val OptIoK8sAPICoreV1ProjectedVolumeSource) {
	s.Projected = val
}

// SetQuobyte sets the value of Quobyte.
func (s *IoK8sAPICoreV1Volume) SetQuobyte(val OptIoK8sAPICoreV1QuobyteVolumeSource) {
	s.Quobyte = val
}

// SetRbd sets the value of Rbd.
func (s *IoK8sAPICoreV1Volume) SetRbd(val OptIoK8sAPICoreV1RBDVolumeSource) {
	s.Rbd = val
}

// SetScaleIO sets the value of ScaleIO.
func (s *IoK8sAPICoreV1Volume) SetScaleIO(val OptIoK8sAPICoreV1ScaleIOVolumeSource) {
	s.ScaleIO = val
}

// SetSecret sets the value of Secret.
func (s *IoK8sAPICoreV1Volume) SetSecret(val OptIoK8sAPICoreV1SecretVolumeSource) {
	s.Secret = val
}

// SetStorageos sets the value of Storageos.
func (s *IoK8sAPICoreV1Volume) SetStorageos(val OptIoK8sAPICoreV1StorageOSVolumeSource) {
	s.Storageos = val
}

// SetVsphereVolume sets the value of VsphereVolume.
func (s *IoK8sAPICoreV1Volume) SetVsphereVolume(val OptIoK8sAPICoreV1VsphereVirtualDiskVolumeSource) {
	s.VsphereVolume = val
}

// VolumeDevice describes a mapping of a raw block device within a container.
// Ref: #/components/schemas/io.k8s.api.core.v1.VolumeDevice
type IoK8sAPICoreV1VolumeDevice struct {
	// DevicePath is the path inside of the container that the device will be mapped to.
	DevicePath string `json:"devicePath"`
	// Name must match the name of a persistentVolumeClaim in the pod.
	Name string `json:"name"`
}

// GetDevicePath returns the value of DevicePath.
func (s *IoK8sAPICoreV1VolumeDevice) GetDevicePath() string {
	return s.DevicePath
}

// GetName returns the value of Name.
func (s *IoK8sAPICoreV1VolumeDevice) GetName() string {
	return s.Name
}

// SetDevicePath sets the value of DevicePath.
func (s *IoK8sAPICoreV1VolumeDevice) SetDevicePath(val string) {
	s.DevicePath = val
}

// SetName sets the value of Name.
func (s *IoK8sAPICoreV1VolumeDevice) SetName(val string) {
	s.Name = val
}

// VolumeMount describes a mounting of a Volume within a container.
// Ref: #/components/schemas/io.k8s.api.core.v1.VolumeMount
type IoK8sAPICoreV1VolumeMount struct {
	// Path within the container at which the volume should be mounted.  Must not contain ':'.
	MountPath string `json:"mountPath"`
	// MountPropagation determines how mounts are propagated from the host to container and the other way
	// around. When not set, MountPropagationNone is used. This field is beta in 1.10.
	MountPropagation OptString `json:"mountPropagation"`
	// This must match the Name of a Volume.
	Name string `json:"name"`
	// Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
	ReadOnly OptBool `json:"readOnly"`
	// Path within the volume from which the container's volume should be mounted. Defaults to ""
	// (volume's root).
	SubPath OptString `json:"subPath"`
	// Expanded path within the volume from which the container's volume should be mounted. Behaves
	// similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the
	// container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually
	// exclusive.
	SubPathExpr OptString `json:"subPathExpr"`
}

// GetMountPath returns the value of MountPath.
func (s *IoK8sAPICoreV1VolumeMount) GetMountPath() string {
	return s.MountPath
}

// GetMountPropagation returns the value of MountPropagation.
func (s *IoK8sAPICoreV1VolumeMount) GetMountPropagation() OptString {
	return s.MountPropagation
}

// GetName returns the value of Name.
func (s *IoK8sAPICoreV1VolumeMount) GetName() string {
	return s.Name
}

// GetReadOnly returns the value of ReadOnly.
func (s *IoK8sAPICoreV1VolumeMount) GetReadOnly() OptBool {
	return s.ReadOnly
}

// GetSubPath returns the value of SubPath.
func (s *IoK8sAPICoreV1VolumeMount) GetSubPath() OptString {
	return s.SubPath
}

// GetSubPathExpr returns the value of SubPathExpr.
func (s *IoK8sAPICoreV1VolumeMount) GetSubPathExpr() OptString {
	return s.SubPathExpr
}

// SetMountPath sets the value of MountPath.
func (s *IoK8sAPICoreV1VolumeMount) SetMountPath(val string) {
	s.MountPath = val
}

// SetMountPropagation sets the value of MountPropagation.
func (s *IoK8sAPICoreV1VolumeMount) SetMountPropagation(val OptString) {
	s.MountPropagation = val
}

// SetName sets the value of Name.
func (s *IoK8sAPICoreV1VolumeMount) SetName(val string) {
	s.Name = val
}

// SetReadOnly sets the value of ReadOnly.
func (s *IoK8sAPICoreV1VolumeMount) SetReadOnly(val OptBool) {
	s.ReadOnly = val
}

// SetSubPath sets the value of SubPath.
func (s *IoK8sAPICoreV1VolumeMount) SetSubPath(val OptString) {
	s.SubPath = val
}

// SetSubPathExpr sets the value of SubPathExpr.
func (s *IoK8sAPICoreV1VolumeMount) SetSubPathExpr(val OptString) {
	s.SubPathExpr = val
}

// VolumeNodeAffinity defines constraints that limit what nodes this volume can be accessed from.
// Ref: #/components/schemas/io.k8s.api.core.v1.VolumeNodeAffinity
type IoK8sAPICoreV1VolumeNodeAffinity struct {
	Required OptIoK8sAPICoreV1NodeSelector `json:"required"`
}

// GetRequired returns the value of Required.
func (s *IoK8sAPICoreV1VolumeNodeAffinity) GetRequired() OptIoK8sAPICoreV1NodeSelector {
	return s.Required
}

// SetRequired sets the value of Required.
func (s *IoK8sAPICoreV1VolumeNodeAffinity) SetRequired(val OptIoK8sAPICoreV1NodeSelector) {
	s.Required = val
}

// Projection that may be projected along with other supported volume types.
// Ref: #/components/schemas/io.k8s.api.core.v1.VolumeProjection
type IoK8sAPICoreV1VolumeProjection struct {
	ConfigMap           OptIoK8sAPICoreV1ConfigMapProjection           `json:"configMap"`
	DownwardAPI         OptIoK8sAPICoreV1DownwardAPIProjection         `json:"downwardAPI"`
	Secret              OptIoK8sAPICoreV1SecretProjection              `json:"secret"`
	ServiceAccountToken OptIoK8sAPICoreV1ServiceAccountTokenProjection `json:"serviceAccountToken"`
}

// GetConfigMap returns the value of ConfigMap.
func (s *IoK8sAPICoreV1VolumeProjection) GetConfigMap() OptIoK8sAPICoreV1ConfigMapProjection {
	return s.ConfigMap
}

// GetDownwardAPI returns the value of DownwardAPI.
func (s *IoK8sAPICoreV1VolumeProjection) GetDownwardAPI() OptIoK8sAPICoreV1DownwardAPIProjection {
	return s.DownwardAPI
}

// GetSecret returns the value of Secret.
func (s *IoK8sAPICoreV1VolumeProjection) GetSecret() OptIoK8sAPICoreV1SecretProjection {
	return s.Secret
}

// GetServiceAccountToken returns the value of ServiceAccountToken.
func (s *IoK8sAPICoreV1VolumeProjection) GetServiceAccountToken() OptIoK8sAPICoreV1ServiceAccountTokenProjection {
	return s.ServiceAccountToken
}

// SetConfigMap sets the value of ConfigMap.
func (s *IoK8sAPICoreV1VolumeProjection) SetConfigMap(val OptIoK8sAPICoreV1ConfigMapProjection) {
	s.ConfigMap = val
}

// SetDownwardAPI sets the value of DownwardAPI.
func (s *IoK8sAPICoreV1VolumeProjection) SetDownwardAPI(val OptIoK8sAPICoreV1DownwardAPIProjection) {
	s.DownwardAPI = val
}

// SetSecret sets the value of Secret.
func (s *IoK8sAPICoreV1VolumeProjection) SetSecret(val OptIoK8sAPICoreV1SecretProjection) {
	s.Secret = val
}

// SetServiceAccountToken sets the value of ServiceAccountToken.
func (s *IoK8sAPICoreV1VolumeProjection) SetServiceAccountToken(val OptIoK8sAPICoreV1ServiceAccountTokenProjection) {
	s.ServiceAccountToken = val
}

// Represents a vSphere volume resource.
// Ref: #/components/schemas/io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource
type IoK8sAPICoreV1VsphereVirtualDiskVolumeSource struct {
	// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex.
	// "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType OptString `json:"fsType"`
	// Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
	StoragePolicyID OptString `json:"storagePolicyID"`
	// Storage Policy Based Management (SPBM) profile name.
	StoragePolicyName OptString `json:"storagePolicyName"`
	// Path that identifies vSphere volume vmdk.
	VolumePath string `json:"volumePath"`
}

// GetFsType returns the value of FsType.
func (s *IoK8sAPICoreV1VsphereVirtualDiskVolumeSource) GetFsType() OptString {
	return s.FsType
}

// GetStoragePolicyID returns the value of StoragePolicyID.
func (s *IoK8sAPICoreV1VsphereVirtualDiskVolumeSource) GetStoragePolicyID() OptString {
	return s.StoragePolicyID
}

// GetStoragePolicyName returns the value of StoragePolicyName.
func (s *IoK8sAPICoreV1VsphereVirtualDiskVolumeSource) GetStoragePolicyName() OptString {
	return s.StoragePolicyName
}

// GetVolumePath returns the value of VolumePath.
func (s *IoK8sAPICoreV1VsphereVirtualDiskVolumeSource) GetVolumePath() string {
	return s.VolumePath
}

// SetFsType sets the value of FsType.
func (s *IoK8sAPICoreV1VsphereVirtualDiskVolumeSource) SetFsType(val OptString) {
	s.FsType = val
}

// SetStoragePolicyID sets the value of StoragePolicyID.
func (s *IoK8sAPICoreV1VsphereVirtualDiskVolumeSource) SetStoragePolicyID(val OptString) {
	s.StoragePolicyID = val
}

// SetStoragePolicyName sets the value of StoragePolicyName.
func (s *IoK8sAPICoreV1VsphereVirtualDiskVolumeSource) SetStoragePolicyName(val OptString) {
	s.StoragePolicyName = val
}

// SetVolumePath sets the value of VolumePath.
func (s *IoK8sAPICoreV1VsphereVirtualDiskVolumeSource) SetVolumePath(val string) {
	s.VolumePath = val
}

// The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the
// most preferred node(s).
// Ref: #/components/schemas/io.k8s.api.core.v1.WeightedPodAffinityTerm
type IoK8sAPICoreV1WeightedPodAffinityTerm struct {
	PodAffinityTerm IoK8sAPICoreV1PodAffinityTerm `json:"podAffinityTerm"`
	// Weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
	Weight int32 `json:"weight"`
}

// GetPodAffinityTerm returns the value of PodAffinityTerm.
func (s *IoK8sAPICoreV1WeightedPodAffinityTerm) GetPodAffinityTerm() IoK8sAPICoreV1PodAffinityTerm {
	return s.PodAffinityTerm
}

// GetWeight returns the value of Weight.
func (s *IoK8sAPICoreV1WeightedPodAffinityTerm) GetWeight() int32 {
	return s.Weight
}

// SetPodAffinityTerm sets the value of PodAffinityTerm.
func (s *IoK8sAPICoreV1WeightedPodAffinityTerm) SetPodAffinityTerm(val IoK8sAPICoreV1PodAffinityTerm) {
	s.PodAffinityTerm = val
}

// SetWeight sets the value of Weight.
func (s *IoK8sAPICoreV1WeightedPodAffinityTerm) SetWeight(val int32) {
	s.Weight = val
}

// WindowsSecurityContextOptions contain Windows-specific options and credentials.
// Ref: #/components/schemas/io.k8s.api.core.v1.WindowsSecurityContextOptions
type IoK8sAPICoreV1WindowsSecurityContextOptions struct {
	// GMSACredentialSpec is where the GMSA admission webhook (https://github.
	// com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the
	// GMSACredentialSpecName field.
	GmsaCredentialSpec OptString `json:"gmsaCredentialSpec"`
	// GMSACredentialSpecName is the name of the GMSA credential spec to use.
	GmsaCredentialSpecName OptString `json:"gmsaCredentialSpecName"`
	// HostProcess determines if a container should be run as a 'Host Process' container. This field is
	// alpha-level and will only be honored by components that enable the WindowsHostProcessContainers
	// feature flag. Setting this field without the feature flag will result in errors when validating
	// the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not
	// allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if
	// HostProcess is true then HostNetwork must also be set to true.
	HostProcess OptBool `json:"hostProcess"`
	// The UserName in Windows to run the entrypoint of the container process. Defaults to the user
	// specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both
	// SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsUserName OptString `json:"runAsUserName"`
}

// GetGmsaCredentialSpec returns the value of GmsaCredentialSpec.
func (s *IoK8sAPICoreV1WindowsSecurityContextOptions) GetGmsaCredentialSpec() OptString {
	return s.GmsaCredentialSpec
}

// GetGmsaCredentialSpecName returns the value of GmsaCredentialSpecName.
func (s *IoK8sAPICoreV1WindowsSecurityContextOptions) GetGmsaCredentialSpecName() OptString {
	return s.GmsaCredentialSpecName
}

// GetHostProcess returns the value of HostProcess.
func (s *IoK8sAPICoreV1WindowsSecurityContextOptions) GetHostProcess() OptBool {
	return s.HostProcess
}

// GetRunAsUserName returns the value of RunAsUserName.
func (s *IoK8sAPICoreV1WindowsSecurityContextOptions) GetRunAsUserName() OptString {
	return s.RunAsUserName
}

// SetGmsaCredentialSpec sets the value of GmsaCredentialSpec.
func (s *IoK8sAPICoreV1WindowsSecurityContextOptions) SetGmsaCredentialSpec(val OptString) {
	s.GmsaCredentialSpec = val
}

// SetGmsaCredentialSpecName sets the value of GmsaCredentialSpecName.
func (s *IoK8sAPICoreV1WindowsSecurityContextOptions) SetGmsaCredentialSpecName(val OptString) {
	s.GmsaCredentialSpecName = val
}

// SetHostProcess sets the value of HostProcess.
func (s *IoK8sAPICoreV1WindowsSecurityContextOptions) SetHostProcess(val OptBool) {
	s.HostProcess = val
}

// SetRunAsUserName sets the value of RunAsUserName.
func (s *IoK8sAPICoreV1WindowsSecurityContextOptions) SetRunAsUserName(val OptString) {
	s.RunAsUserName = val
}

// Endpoint represents a single logical "backend" implementing a service.
// Ref: #/components/schemas/io.k8s.api.discovery.v1.Endpoint
type IoK8sAPIDiscoveryV1Endpoint struct {
	// Addresses of this endpoint. The contents of this field are interpreted according to the
	// corresponding EndpointSlice addressType field. Consumers must handle different types of addresses
	// in the context of their own capabilities. This must contain at least one address but no more than
	// 100.
	Addresses  []string                                 `json:"addresses"`
	Conditions OptIoK8sAPIDiscoveryV1EndpointConditions `json:"conditions"`
	// DeprecatedTopology contains topology information part of the v1beta1 API. This field is deprecated,
	//  and will be removed when the v1beta1 API is removed (no sooner than kubernetes v1.24).  While
	// this field can hold values, it is not writable through the v1 API, and any attempts to write to it
	// will be silently ignored. Topology information can be found in the zone and nodeName fields
	// instead.
	DeprecatedTopology OptIoK8sAPIDiscoveryV1EndpointDeprecatedTopology `json:"deprecatedTopology"`
	Hints              OptIoK8sAPIDiscoveryV1EndpointHints              `json:"hints"`
	// Hostname of this endpoint. This field may be used by consumers of endpoints to distinguish
	// endpoints from each other (e.g. in DNS names). Multiple endpoints which use the same hostname
	// should be considered fungible (e.g. multiple A values in DNS). Must be lowercase and pass DNS
	// Label (RFC 1123) validation.
	Hostname OptString `json:"hostname"`
	// NodeName represents the name of the Node hosting this endpoint. This can be used to determine
	// endpoints local to a Node. This field can be enabled with the EndpointSliceNodeName feature gate.
	NodeName  OptString                        `json:"nodeName"`
	TargetRef OptIoK8sAPICoreV1ObjectReference `json:"targetRef"`
	// Zone is the name of the Zone this endpoint exists in.
	Zone OptString `json:"zone"`
}

// GetAddresses returns the value of Addresses.
func (s *IoK8sAPIDiscoveryV1Endpoint) GetAddresses() []string {
	return s.Addresses
}

// GetConditions returns the value of Conditions.
func (s *IoK8sAPIDiscoveryV1Endpoint) GetConditions() OptIoK8sAPIDiscoveryV1EndpointConditions {
	return s.Conditions
}

// GetDeprecatedTopology returns the value of DeprecatedTopology.
func (s *IoK8sAPIDiscoveryV1Endpoint) GetDeprecatedTopology() OptIoK8sAPIDiscoveryV1EndpointDeprecatedTopology {
	return s.DeprecatedTopology
}

// GetHints returns the value of Hints.
func (s *IoK8sAPIDiscoveryV1Endpoint) GetHints() OptIoK8sAPIDiscoveryV1EndpointHints {
	return s.Hints
}

// GetHostname returns the value of Hostname.
func (s *IoK8sAPIDiscoveryV1Endpoint) GetHostname() OptString {
	return s.Hostname
}

// GetNodeName returns the value of NodeName.
func (s *IoK8sAPIDiscoveryV1Endpoint) GetNodeName() OptString {
	return s.NodeName
}

// GetTargetRef returns the value of TargetRef.
func (s *IoK8sAPIDiscoveryV1Endpoint) GetTargetRef() OptIoK8sAPICoreV1ObjectReference {
	return s.TargetRef
}

// GetZone returns the value of Zone.
func (s *IoK8sAPIDiscoveryV1Endpoint) GetZone() OptString {
	return s.Zone
}

// SetAddresses sets the value of Addresses.
func (s *IoK8sAPIDiscoveryV1Endpoint) SetAddresses(val []string) {
	s.Addresses = val
}

// SetConditions sets the value of Conditions.
func (s *IoK8sAPIDiscoveryV1Endpoint) SetConditions(val OptIoK8sAPIDiscoveryV1EndpointConditions) {
	s.Conditions = val
}

// SetDeprecatedTopology sets the value of DeprecatedTopology.
func (s *IoK8sAPIDiscoveryV1Endpoint) SetDeprecatedTopology(val OptIoK8sAPIDiscoveryV1EndpointDeprecatedTopology) {
	s.DeprecatedTopology = val
}

// SetHints sets the value of Hints.
func (s *IoK8sAPIDiscoveryV1Endpoint) SetHints(val OptIoK8sAPIDiscoveryV1EndpointHints) {
	s.Hints = val
}

// SetHostname sets the value of Hostname.
func (s *IoK8sAPIDiscoveryV1Endpoint) SetHostname(val OptString) {
	s.Hostname = val
}

// SetNodeName sets the value of NodeName.
func (s *IoK8sAPIDiscoveryV1Endpoint) SetNodeName(val OptString) {
	s.NodeName = val
}

// SetTargetRef sets the value of TargetRef.
func (s *IoK8sAPIDiscoveryV1Endpoint) SetTargetRef(val OptIoK8sAPICoreV1ObjectReference) {
	s.TargetRef = val
}

// SetZone sets the value of Zone.
func (s *IoK8sAPIDiscoveryV1Endpoint) SetZone(val OptString) {
	s.Zone = val
}

// EndpointConditions represents the current condition of an endpoint.
// Ref: #/components/schemas/io.k8s.api.discovery.v1.EndpointConditions
type IoK8sAPIDiscoveryV1EndpointConditions struct {
	// Ready indicates that this endpoint is prepared to receive traffic, according to whatever system is
	// managing the endpoint. A nil value indicates an unknown state. In most cases consumers should
	// interpret this unknown state as ready. For compatibility reasons, ready should never be "true" for
	// terminating endpoints.
	Ready OptBool `json:"ready"`
	// Serving is identical to ready except that it is set regardless of the terminating state of
	// endpoints. This condition should be set to true for a ready endpoint that is terminating. If nil,
	// consumers should defer to the ready condition. This field can be enabled with the
	// EndpointSliceTerminatingCondition feature gate.
	Serving OptBool `json:"serving"`
	// Terminating indicates that this endpoint is terminating. A nil value indicates an unknown state.
	// Consumers should interpret this unknown state to mean that the endpoint is not terminating. This
	// field can be enabled with the EndpointSliceTerminatingCondition feature gate.
	Terminating OptBool `json:"terminating"`
}

// GetReady returns the value of Ready.
func (s *IoK8sAPIDiscoveryV1EndpointConditions) GetReady() OptBool {
	return s.Ready
}

// GetServing returns the value of Serving.
func (s *IoK8sAPIDiscoveryV1EndpointConditions) GetServing() OptBool {
	return s.Serving
}

// GetTerminating returns the value of Terminating.
func (s *IoK8sAPIDiscoveryV1EndpointConditions) GetTerminating() OptBool {
	return s.Terminating
}

// SetReady sets the value of Ready.
func (s *IoK8sAPIDiscoveryV1EndpointConditions) SetReady(val OptBool) {
	s.Ready = val
}

// SetServing sets the value of Serving.
func (s *IoK8sAPIDiscoveryV1EndpointConditions) SetServing(val OptBool) {
	s.Serving = val
}

// SetTerminating sets the value of Terminating.
func (s *IoK8sAPIDiscoveryV1EndpointConditions) SetTerminating(val OptBool) {
	s.Terminating = val
}

// DeprecatedTopology contains topology information part of the v1beta1 API. This field is deprecated,
//
//	and will be removed when the v1beta1 API is removed (no sooner than kubernetes v1.24).  While
//
// this field can hold values, it is not writable through the v1 API, and any attempts to write to it
// will be silently ignored. Topology information can be found in the zone and nodeName fields
// instead.
type IoK8sAPIDiscoveryV1EndpointDeprecatedTopology map[string]string

func (s *IoK8sAPIDiscoveryV1EndpointDeprecatedTopology) init() IoK8sAPIDiscoveryV1EndpointDeprecatedTopology {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// EndpointHints provides hints describing how an endpoint should be consumed.
// Ref: #/components/schemas/io.k8s.api.discovery.v1.EndpointHints
type IoK8sAPIDiscoveryV1EndpointHints struct {
	// ForZones indicates the zone(s) this endpoint should be consumed by to enable topology aware
	// routing.
	ForZones []IoK8sAPIDiscoveryV1ForZone `json:"forZones"`
}

// GetForZones returns the value of ForZones.
func (s *IoK8sAPIDiscoveryV1EndpointHints) GetForZones() []IoK8sAPIDiscoveryV1ForZone {
	return s.ForZones
}

// SetForZones sets the value of ForZones.
func (s *IoK8sAPIDiscoveryV1EndpointHints) SetForZones(val []IoK8sAPIDiscoveryV1ForZone) {
	s.ForZones = val
}

// EndpointPort represents a Port used by an EndpointSlice.
// Ref: #/components/schemas/io.k8s.api.discovery.v1.EndpointPort
type IoK8sAPIDiscoveryV1EndpointPort struct {
	// The application protocol for this port. This field follows standard Kubernetes label syntax.
	// Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.
	// iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as
	// mycompany.com/my-custom-protocol.
	AppProtocol OptString `json:"appProtocol"`
	// The name of this port. All ports in an EndpointSlice must have a unique name. If the EndpointSlice
	// is dervied from a Kubernetes service, this corresponds to the Service.ports[].name. Name must
	// either be an empty string or pass DNS_LABEL validation: * must be no more than 63 characters long.
	// * must consist of lower case alphanumeric characters or '-'. * must start and end with an
	// alphanumeric character. Default is empty string.
	Name OptString `json:"name"`
	// The port number of the endpoint. If this is not specified, ports are not restricted and must be
	// interpreted in the context of the specific consumer.
	Port OptInt32 `json:"port"`
	// The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.
	Protocol OptString `json:"protocol"`
}

// GetAppProtocol returns the value of AppProtocol.
func (s *IoK8sAPIDiscoveryV1EndpointPort) GetAppProtocol() OptString {
	return s.AppProtocol
}

// GetName returns the value of Name.
func (s *IoK8sAPIDiscoveryV1EndpointPort) GetName() OptString {
	return s.Name
}

// GetPort returns the value of Port.
func (s *IoK8sAPIDiscoveryV1EndpointPort) GetPort() OptInt32 {
	return s.Port
}

// GetProtocol returns the value of Protocol.
func (s *IoK8sAPIDiscoveryV1EndpointPort) GetProtocol() OptString {
	return s.Protocol
}

// SetAppProtocol sets the value of AppProtocol.
func (s *IoK8sAPIDiscoveryV1EndpointPort) SetAppProtocol(val OptString) {
	s.AppProtocol = val
}

// SetName sets the value of Name.
func (s *IoK8sAPIDiscoveryV1EndpointPort) SetName(val OptString) {
	s.Name = val
}

// SetPort sets the value of Port.
func (s *IoK8sAPIDiscoveryV1EndpointPort) SetPort(val OptInt32) {
	s.Port = val
}

// SetProtocol sets the value of Protocol.
func (s *IoK8sAPIDiscoveryV1EndpointPort) SetProtocol(val OptString) {
	s.Protocol = val
}

// EndpointSlice represents a subset of the endpoints that implement a service. For a given service
// there may be multiple EndpointSlice objects, selected by labels, which must be joined to produce
// the full set of endpoints.
// Ref: #/components/schemas/io.k8s.api.discovery.v1.EndpointSlice
type IoK8sAPIDiscoveryV1EndpointSlice struct {
	// AddressType specifies the type of address carried by this EndpointSlice. All addresses in this
	// slice must be the same type. This field is immutable after creation. The following address types
	// are currently supported: * IPv4: Represents an IPv4 Address. * IPv6: Represents an IPv6 Address. *
	// FQDN: Represents a Fully Qualified Domain Name.
	AddressType string `json:"addressType"`
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Endpoints is a list of unique endpoints in this slice. Each slice may include a maximum of 1000
	// endpoints.
	Endpoints []IoK8sAPIDiscoveryV1Endpoint `json:"endpoints"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                   `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata"`
	// Ports specifies the list of network ports exposed by each endpoint in this slice. Each port must
	// have a unique name. When ports is empty, it indicates that there are no defined ports. When a port
	// is defined with a nil port value, it indicates "all ports". Each slice may include a maximum of
	// 100 ports.
	Ports []IoK8sAPIDiscoveryV1EndpointPort `json:"ports"`
}

// GetAddressType returns the value of AddressType.
func (s *IoK8sAPIDiscoveryV1EndpointSlice) GetAddressType() string {
	return s.AddressType
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIDiscoveryV1EndpointSlice) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetEndpoints returns the value of Endpoints.
func (s *IoK8sAPIDiscoveryV1EndpointSlice) GetEndpoints() []IoK8sAPIDiscoveryV1Endpoint {
	return s.Endpoints
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIDiscoveryV1EndpointSlice) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIDiscoveryV1EndpointSlice) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetPorts returns the value of Ports.
func (s *IoK8sAPIDiscoveryV1EndpointSlice) GetPorts() []IoK8sAPIDiscoveryV1EndpointPort {
	return s.Ports
}

// SetAddressType sets the value of AddressType.
func (s *IoK8sAPIDiscoveryV1EndpointSlice) SetAddressType(val string) {
	s.AddressType = val
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIDiscoveryV1EndpointSlice) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetEndpoints sets the value of Endpoints.
func (s *IoK8sAPIDiscoveryV1EndpointSlice) SetEndpoints(val []IoK8sAPIDiscoveryV1Endpoint) {
	s.Endpoints = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIDiscoveryV1EndpointSlice) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIDiscoveryV1EndpointSlice) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetPorts sets the value of Ports.
func (s *IoK8sAPIDiscoveryV1EndpointSlice) SetPorts(val []IoK8sAPIDiscoveryV1EndpointPort) {
	s.Ports = val
}

func (*IoK8sAPIDiscoveryV1EndpointSlice) readDiscoveryV1NamespacedEndpointSliceRes() {}

// EndpointSliceList represents a list of endpoint slices.
// Ref: #/components/schemas/io.k8s.api.discovery.v1.EndpointSliceList
type IoK8sAPIDiscoveryV1EndpointSliceList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// List of endpoint slices.
	Items []IoK8sAPIDiscoveryV1EndpointSlice `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIDiscoveryV1EndpointSliceList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPIDiscoveryV1EndpointSliceList) GetItems() []IoK8sAPIDiscoveryV1EndpointSlice {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIDiscoveryV1EndpointSliceList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIDiscoveryV1EndpointSliceList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIDiscoveryV1EndpointSliceList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPIDiscoveryV1EndpointSliceList) SetItems(val []IoK8sAPIDiscoveryV1EndpointSlice) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIDiscoveryV1EndpointSliceList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIDiscoveryV1EndpointSliceList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPIDiscoveryV1EndpointSliceList) listDiscoveryV1EndpointSliceForAllNamespacesRes() {}
func (*IoK8sAPIDiscoveryV1EndpointSliceList) listDiscoveryV1NamespacedEndpointSliceRes()       {}

// ForZone provides information about which zones should consume this endpoint.
// Ref: #/components/schemas/io.k8s.api.discovery.v1.ForZone
type IoK8sAPIDiscoveryV1ForZone struct {
	// Name represents the name of the zone.
	Name string `json:"name"`
}

// GetName returns the value of Name.
func (s *IoK8sAPIDiscoveryV1ForZone) GetName() string {
	return s.Name
}

// SetName sets the value of Name.
func (s *IoK8sAPIDiscoveryV1ForZone) SetName(val string) {
	s.Name = val
}

// Endpoint represents a single logical "backend" implementing a service.
// Ref: #/components/schemas/io.k8s.api.discovery.v1beta1.Endpoint
type IoK8sAPIDiscoveryV1beta1Endpoint struct {
	// Addresses of this endpoint. The contents of this field are interpreted according to the
	// corresponding EndpointSlice addressType field. Consumers must handle different types of addresses
	// in the context of their own capabilities. This must contain at least one address but no more than
	// 100.
	Addresses  []string                                      `json:"addresses"`
	Conditions OptIoK8sAPIDiscoveryV1beta1EndpointConditions `json:"conditions"`
	Hints      OptIoK8sAPIDiscoveryV1beta1EndpointHints      `json:"hints"`
	// Hostname of this endpoint. This field may be used by consumers of endpoints to distinguish
	// endpoints from each other (e.g. in DNS names). Multiple endpoints which use the same hostname
	// should be considered fungible (e.g. multiple A values in DNS). Must be lowercase and pass DNS
	// Label (RFC 1123) validation.
	Hostname OptString `json:"hostname"`
	// NodeName represents the name of the Node hosting this endpoint. This can be used to determine
	// endpoints local to a Node. This field can be enabled with the EndpointSliceNodeName feature gate.
	NodeName  OptString                        `json:"nodeName"`
	TargetRef OptIoK8sAPICoreV1ObjectReference `json:"targetRef"`
	// Topology contains arbitrary topology information associated with the endpoint. These key/value
	// pairs must conform with the label format. https://kubernetes.
	// io/docs/concepts/overview/working-with-objects/labels Topology may include a maximum of 16
	// key/value pairs. This includes, but is not limited to the following well known keys: * kubernetes.
	// io/hostname: the value indicates the hostname of the node
	// where the endpoint is located. This should match the corresponding
	// node label.
	// * topology.kubernetes.io/zone: the value indicates the zone where the
	// endpoint is located. This should match the corresponding node label.
	// * topology.kubernetes.io/region: the value indicates the region where the
	// endpoint is located. This should match the corresponding node label.
	// This field is deprecated and will be removed in future api versions.
	Topology OptIoK8sAPIDiscoveryV1beta1EndpointTopology `json:"topology"`
}

// GetAddresses returns the value of Addresses.
func (s *IoK8sAPIDiscoveryV1beta1Endpoint) GetAddresses() []string {
	return s.Addresses
}

// GetConditions returns the value of Conditions.
func (s *IoK8sAPIDiscoveryV1beta1Endpoint) GetConditions() OptIoK8sAPIDiscoveryV1beta1EndpointConditions {
	return s.Conditions
}

// GetHints returns the value of Hints.
func (s *IoK8sAPIDiscoveryV1beta1Endpoint) GetHints() OptIoK8sAPIDiscoveryV1beta1EndpointHints {
	return s.Hints
}

// GetHostname returns the value of Hostname.
func (s *IoK8sAPIDiscoveryV1beta1Endpoint) GetHostname() OptString {
	return s.Hostname
}

// GetNodeName returns the value of NodeName.
func (s *IoK8sAPIDiscoveryV1beta1Endpoint) GetNodeName() OptString {
	return s.NodeName
}

// GetTargetRef returns the value of TargetRef.
func (s *IoK8sAPIDiscoveryV1beta1Endpoint) GetTargetRef() OptIoK8sAPICoreV1ObjectReference {
	return s.TargetRef
}

// GetTopology returns the value of Topology.
func (s *IoK8sAPIDiscoveryV1beta1Endpoint) GetTopology() OptIoK8sAPIDiscoveryV1beta1EndpointTopology {
	return s.Topology
}

// SetAddresses sets the value of Addresses.
func (s *IoK8sAPIDiscoveryV1beta1Endpoint) SetAddresses(val []string) {
	s.Addresses = val
}

// SetConditions sets the value of Conditions.
func (s *IoK8sAPIDiscoveryV1beta1Endpoint) SetConditions(val OptIoK8sAPIDiscoveryV1beta1EndpointConditions) {
	s.Conditions = val
}

// SetHints sets the value of Hints.
func (s *IoK8sAPIDiscoveryV1beta1Endpoint) SetHints(val OptIoK8sAPIDiscoveryV1beta1EndpointHints) {
	s.Hints = val
}

// SetHostname sets the value of Hostname.
func (s *IoK8sAPIDiscoveryV1beta1Endpoint) SetHostname(val OptString) {
	s.Hostname = val
}

// SetNodeName sets the value of NodeName.
func (s *IoK8sAPIDiscoveryV1beta1Endpoint) SetNodeName(val OptString) {
	s.NodeName = val
}

// SetTargetRef sets the value of TargetRef.
func (s *IoK8sAPIDiscoveryV1beta1Endpoint) SetTargetRef(val OptIoK8sAPICoreV1ObjectReference) {
	s.TargetRef = val
}

// SetTopology sets the value of Topology.
func (s *IoK8sAPIDiscoveryV1beta1Endpoint) SetTopology(val OptIoK8sAPIDiscoveryV1beta1EndpointTopology) {
	s.Topology = val
}

// EndpointConditions represents the current condition of an endpoint.
// Ref: #/components/schemas/io.k8s.api.discovery.v1beta1.EndpointConditions
type IoK8sAPIDiscoveryV1beta1EndpointConditions struct {
	// Ready indicates that this endpoint is prepared to receive traffic, according to whatever system is
	// managing the endpoint. A nil value indicates an unknown state. In most cases consumers should
	// interpret this unknown state as ready. For compatibility reasons, ready should never be "true" for
	// terminating endpoints.
	Ready OptBool `json:"ready"`
	// Serving is identical to ready except that it is set regardless of the terminating state of
	// endpoints. This condition should be set to true for a ready endpoint that is terminating. If nil,
	// consumers should defer to the ready condition. This field can be enabled with the
	// EndpointSliceTerminatingCondition feature gate.
	Serving OptBool `json:"serving"`
	// Terminating indicates that this endpoint is terminating. A nil value indicates an unknown state.
	// Consumers should interpret this unknown state to mean that the endpoint is not terminating. This
	// field can be enabled with the EndpointSliceTerminatingCondition feature gate.
	Terminating OptBool `json:"terminating"`
}

// GetReady returns the value of Ready.
func (s *IoK8sAPIDiscoveryV1beta1EndpointConditions) GetReady() OptBool {
	return s.Ready
}

// GetServing returns the value of Serving.
func (s *IoK8sAPIDiscoveryV1beta1EndpointConditions) GetServing() OptBool {
	return s.Serving
}

// GetTerminating returns the value of Terminating.
func (s *IoK8sAPIDiscoveryV1beta1EndpointConditions) GetTerminating() OptBool {
	return s.Terminating
}

// SetReady sets the value of Ready.
func (s *IoK8sAPIDiscoveryV1beta1EndpointConditions) SetReady(val OptBool) {
	s.Ready = val
}

// SetServing sets the value of Serving.
func (s *IoK8sAPIDiscoveryV1beta1EndpointConditions) SetServing(val OptBool) {
	s.Serving = val
}

// SetTerminating sets the value of Terminating.
func (s *IoK8sAPIDiscoveryV1beta1EndpointConditions) SetTerminating(val OptBool) {
	s.Terminating = val
}

// EndpointHints provides hints describing how an endpoint should be consumed.
// Ref: #/components/schemas/io.k8s.api.discovery.v1beta1.EndpointHints
type IoK8sAPIDiscoveryV1beta1EndpointHints struct {
	// ForZones indicates the zone(s) this endpoint should be consumed by to enable topology aware
	// routing. May contain a maximum of 8 entries.
	ForZones []IoK8sAPIDiscoveryV1beta1ForZone `json:"forZones"`
}

// GetForZones returns the value of ForZones.
func (s *IoK8sAPIDiscoveryV1beta1EndpointHints) GetForZones() []IoK8sAPIDiscoveryV1beta1ForZone {
	return s.ForZones
}

// SetForZones sets the value of ForZones.
func (s *IoK8sAPIDiscoveryV1beta1EndpointHints) SetForZones(val []IoK8sAPIDiscoveryV1beta1ForZone) {
	s.ForZones = val
}

// EndpointPort represents a Port used by an EndpointSlice.
// Ref: #/components/schemas/io.k8s.api.discovery.v1beta1.EndpointPort
type IoK8sAPIDiscoveryV1beta1EndpointPort struct {
	// The application protocol for this port. This field follows standard Kubernetes label syntax.
	// Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.
	// iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as
	// mycompany.com/my-custom-protocol.
	AppProtocol OptString `json:"appProtocol"`
	// The name of this port. All ports in an EndpointSlice must have a unique name. If the EndpointSlice
	// is dervied from a Kubernetes service, this corresponds to the Service.ports[].name. Name must
	// either be an empty string or pass DNS_LABEL validation: * must be no more than 63 characters long.
	// * must consist of lower case alphanumeric characters or '-'. * must start and end with an
	// alphanumeric character. Default is empty string.
	Name OptString `json:"name"`
	// The port number of the endpoint. If this is not specified, ports are not restricted and must be
	// interpreted in the context of the specific consumer.
	Port OptInt32 `json:"port"`
	// The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.
	Protocol OptString `json:"protocol"`
}

// GetAppProtocol returns the value of AppProtocol.
func (s *IoK8sAPIDiscoveryV1beta1EndpointPort) GetAppProtocol() OptString {
	return s.AppProtocol
}

// GetName returns the value of Name.
func (s *IoK8sAPIDiscoveryV1beta1EndpointPort) GetName() OptString {
	return s.Name
}

// GetPort returns the value of Port.
func (s *IoK8sAPIDiscoveryV1beta1EndpointPort) GetPort() OptInt32 {
	return s.Port
}

// GetProtocol returns the value of Protocol.
func (s *IoK8sAPIDiscoveryV1beta1EndpointPort) GetProtocol() OptString {
	return s.Protocol
}

// SetAppProtocol sets the value of AppProtocol.
func (s *IoK8sAPIDiscoveryV1beta1EndpointPort) SetAppProtocol(val OptString) {
	s.AppProtocol = val
}

// SetName sets the value of Name.
func (s *IoK8sAPIDiscoveryV1beta1EndpointPort) SetName(val OptString) {
	s.Name = val
}

// SetPort sets the value of Port.
func (s *IoK8sAPIDiscoveryV1beta1EndpointPort) SetPort(val OptInt32) {
	s.Port = val
}

// SetProtocol sets the value of Protocol.
func (s *IoK8sAPIDiscoveryV1beta1EndpointPort) SetProtocol(val OptString) {
	s.Protocol = val
}

// EndpointSlice represents a subset of the endpoints that implement a service. For a given service
// there may be multiple EndpointSlice objects, selected by labels, which must be joined to produce
// the full set of endpoints.
// Ref: #/components/schemas/io.k8s.api.discovery.v1beta1.EndpointSlice
type IoK8sAPIDiscoveryV1beta1EndpointSlice struct {
	// AddressType specifies the type of address carried by this EndpointSlice. All addresses in this
	// slice must be the same type. This field is immutable after creation. The following address types
	// are currently supported: * IPv4: Represents an IPv4 Address. * IPv6: Represents an IPv6 Address. *
	// FQDN: Represents a Fully Qualified Domain Name.
	AddressType string `json:"addressType"`
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Endpoints is a list of unique endpoints in this slice. Each slice may include a maximum of 1000
	// endpoints.
	Endpoints []IoK8sAPIDiscoveryV1beta1Endpoint `json:"endpoints"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                   `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata"`
	// Ports specifies the list of network ports exposed by each endpoint in this slice. Each port must
	// have a unique name. When ports is empty, it indicates that there are no defined ports. When a port
	// is defined with a nil port value, it indicates "all ports". Each slice may include a maximum of
	// 100 ports.
	Ports []IoK8sAPIDiscoveryV1beta1EndpointPort `json:"ports"`
}

// GetAddressType returns the value of AddressType.
func (s *IoK8sAPIDiscoveryV1beta1EndpointSlice) GetAddressType() string {
	return s.AddressType
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIDiscoveryV1beta1EndpointSlice) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetEndpoints returns the value of Endpoints.
func (s *IoK8sAPIDiscoveryV1beta1EndpointSlice) GetEndpoints() []IoK8sAPIDiscoveryV1beta1Endpoint {
	return s.Endpoints
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIDiscoveryV1beta1EndpointSlice) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIDiscoveryV1beta1EndpointSlice) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetPorts returns the value of Ports.
func (s *IoK8sAPIDiscoveryV1beta1EndpointSlice) GetPorts() []IoK8sAPIDiscoveryV1beta1EndpointPort {
	return s.Ports
}

// SetAddressType sets the value of AddressType.
func (s *IoK8sAPIDiscoveryV1beta1EndpointSlice) SetAddressType(val string) {
	s.AddressType = val
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIDiscoveryV1beta1EndpointSlice) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetEndpoints sets the value of Endpoints.
func (s *IoK8sAPIDiscoveryV1beta1EndpointSlice) SetEndpoints(val []IoK8sAPIDiscoveryV1beta1Endpoint) {
	s.Endpoints = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIDiscoveryV1beta1EndpointSlice) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIDiscoveryV1beta1EndpointSlice) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetPorts sets the value of Ports.
func (s *IoK8sAPIDiscoveryV1beta1EndpointSlice) SetPorts(val []IoK8sAPIDiscoveryV1beta1EndpointPort) {
	s.Ports = val
}

func (*IoK8sAPIDiscoveryV1beta1EndpointSlice) readDiscoveryV1beta1NamespacedEndpointSliceRes() {}

// EndpointSliceList represents a list of endpoint slices.
// Ref: #/components/schemas/io.k8s.api.discovery.v1beta1.EndpointSliceList
type IoK8sAPIDiscoveryV1beta1EndpointSliceList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// List of endpoint slices.
	Items []IoK8sAPIDiscoveryV1beta1EndpointSlice `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIDiscoveryV1beta1EndpointSliceList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPIDiscoveryV1beta1EndpointSliceList) GetItems() []IoK8sAPIDiscoveryV1beta1EndpointSlice {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIDiscoveryV1beta1EndpointSliceList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIDiscoveryV1beta1EndpointSliceList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIDiscoveryV1beta1EndpointSliceList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPIDiscoveryV1beta1EndpointSliceList) SetItems(val []IoK8sAPIDiscoveryV1beta1EndpointSlice) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIDiscoveryV1beta1EndpointSliceList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIDiscoveryV1beta1EndpointSliceList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPIDiscoveryV1beta1EndpointSliceList) listDiscoveryV1beta1EndpointSliceForAllNamespacesRes() {
}
func (*IoK8sAPIDiscoveryV1beta1EndpointSliceList) listDiscoveryV1beta1NamespacedEndpointSliceRes() {}

// Topology contains arbitrary topology information associated with the endpoint. These key/value
// pairs must conform with the label format. https://kubernetes.
// io/docs/concepts/overview/working-with-objects/labels Topology may include a maximum of 16
// key/value pairs. This includes, but is not limited to the following well known keys: * kubernetes.
// io/hostname: the value indicates the hostname of the node
// where the endpoint is located. This should match the corresponding
// node label.
// * topology.kubernetes.io/zone: the value indicates the zone where the
// endpoint is located. This should match the corresponding node label.
// * topology.kubernetes.io/region: the value indicates the region where the
// endpoint is located. This should match the corresponding node label.
// This field is deprecated and will be removed in future api versions.
type IoK8sAPIDiscoveryV1beta1EndpointTopology map[string]string

func (s *IoK8sAPIDiscoveryV1beta1EndpointTopology) init() IoK8sAPIDiscoveryV1beta1EndpointTopology {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// ForZone provides information about which zones should consume this endpoint.
// Ref: #/components/schemas/io.k8s.api.discovery.v1beta1.ForZone
type IoK8sAPIDiscoveryV1beta1ForZone struct {
	// Name represents the name of the zone.
	Name string `json:"name"`
}

// GetName returns the value of Name.
func (s *IoK8sAPIDiscoveryV1beta1ForZone) GetName() string {
	return s.Name
}

// SetName sets the value of Name.
func (s *IoK8sAPIDiscoveryV1beta1ForZone) SetName(val string) {
	s.Name = val
}

// Event is a report of an event somewhere in the cluster. It generally denotes some state change in
// the system. Events have a limited retention time and triggers and messages may evolve with time.
// Event consumers should not rely on the timing of an event with a given Reason reflecting a
// consistent underlying trigger, or the continued existence of events with that Reason.  Events
// should be treated as informative, best-effort, supplemental data.
// Ref: #/components/schemas/io.k8s.api.events.v1.Event
type IoK8sAPIEventsV1Event struct {
	// Action is what action was taken/failed regarding to the regarding object. It is machine-readable.
	// This field cannot be empty for new Events and it can have at most 128 characters.
	Action OptString `json:"action"`
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// DeprecatedCount is the deprecated field assuring backward compatibility with core.v1 Event type.
	DeprecatedCount          OptInt32                                `json:"deprecatedCount"`
	DeprecatedFirstTimestamp OptIoK8sApimachineryPkgApisMetaV1Time   `json:"deprecatedFirstTimestamp"`
	DeprecatedLastTimestamp  OptIoK8sApimachineryPkgApisMetaV1Time   `json:"deprecatedLastTimestamp"`
	DeprecatedSource         OptIoK8sAPICoreV1EventSource            `json:"deprecatedSource"`
	EventTime                IoK8sApimachineryPkgApisMetaV1MicroTime `json:"eventTime"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                   `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata"`
	// Note is a human-readable description of the status of this operation. Maximal length of the note
	// is 1kB, but libraries should be prepared to handle values up to 64kB.
	Note OptString `json:"note"`
	// Reason is why the action was taken. It is human-readable. This field cannot be empty for new
	// Events and it can have at most 128 characters.
	Reason    OptString                        `json:"reason"`
	Regarding OptIoK8sAPICoreV1ObjectReference `json:"regarding"`
	Related   OptIoK8sAPICoreV1ObjectReference `json:"related"`
	// ReportingController is the name of the controller that emitted this Event, e.g. `kubernetes.
	// io/kubelet`. This field cannot be empty for new Events.
	ReportingController OptString `json:"reportingController"`
	// ReportingInstance is the ID of the controller instance, e.g. `kubelet-xyzf`. This field cannot be
	// empty for new Events and it can have at most 128 characters.
	ReportingInstance OptString                      `json:"reportingInstance"`
	Series            OptIoK8sAPIEventsV1EventSeries `json:"series"`
	// Type is the type of this event (Normal, Warning), new types could be added in the future. It is
	// machine-readable. This field cannot be empty for new Events.
	Type OptString `json:"type"`
}

// GetAction returns the value of Action.
func (s *IoK8sAPIEventsV1Event) GetAction() OptString {
	return s.Action
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIEventsV1Event) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetDeprecatedCount returns the value of DeprecatedCount.
func (s *IoK8sAPIEventsV1Event) GetDeprecatedCount() OptInt32 {
	return s.DeprecatedCount
}

// GetDeprecatedFirstTimestamp returns the value of DeprecatedFirstTimestamp.
func (s *IoK8sAPIEventsV1Event) GetDeprecatedFirstTimestamp() OptIoK8sApimachineryPkgApisMetaV1Time {
	return s.DeprecatedFirstTimestamp
}

// GetDeprecatedLastTimestamp returns the value of DeprecatedLastTimestamp.
func (s *IoK8sAPIEventsV1Event) GetDeprecatedLastTimestamp() OptIoK8sApimachineryPkgApisMetaV1Time {
	return s.DeprecatedLastTimestamp
}

// GetDeprecatedSource returns the value of DeprecatedSource.
func (s *IoK8sAPIEventsV1Event) GetDeprecatedSource() OptIoK8sAPICoreV1EventSource {
	return s.DeprecatedSource
}

// GetEventTime returns the value of EventTime.
func (s *IoK8sAPIEventsV1Event) GetEventTime() IoK8sApimachineryPkgApisMetaV1MicroTime {
	return s.EventTime
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIEventsV1Event) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIEventsV1Event) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetNote returns the value of Note.
func (s *IoK8sAPIEventsV1Event) GetNote() OptString {
	return s.Note
}

// GetReason returns the value of Reason.
func (s *IoK8sAPIEventsV1Event) GetReason() OptString {
	return s.Reason
}

// GetRegarding returns the value of Regarding.
func (s *IoK8sAPIEventsV1Event) GetRegarding() OptIoK8sAPICoreV1ObjectReference {
	return s.Regarding
}

// GetRelated returns the value of Related.
func (s *IoK8sAPIEventsV1Event) GetRelated() OptIoK8sAPICoreV1ObjectReference {
	return s.Related
}

// GetReportingController returns the value of ReportingController.
func (s *IoK8sAPIEventsV1Event) GetReportingController() OptString {
	return s.ReportingController
}

// GetReportingInstance returns the value of ReportingInstance.
func (s *IoK8sAPIEventsV1Event) GetReportingInstance() OptString {
	return s.ReportingInstance
}

// GetSeries returns the value of Series.
func (s *IoK8sAPIEventsV1Event) GetSeries() OptIoK8sAPIEventsV1EventSeries {
	return s.Series
}

// GetType returns the value of Type.
func (s *IoK8sAPIEventsV1Event) GetType() OptString {
	return s.Type
}

// SetAction sets the value of Action.
func (s *IoK8sAPIEventsV1Event) SetAction(val OptString) {
	s.Action = val
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIEventsV1Event) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetDeprecatedCount sets the value of DeprecatedCount.
func (s *IoK8sAPIEventsV1Event) SetDeprecatedCount(val OptInt32) {
	s.DeprecatedCount = val
}

// SetDeprecatedFirstTimestamp sets the value of DeprecatedFirstTimestamp.
func (s *IoK8sAPIEventsV1Event) SetDeprecatedFirstTimestamp(val OptIoK8sApimachineryPkgApisMetaV1Time) {
	s.DeprecatedFirstTimestamp = val
}

// SetDeprecatedLastTimestamp sets the value of DeprecatedLastTimestamp.
func (s *IoK8sAPIEventsV1Event) SetDeprecatedLastTimestamp(val OptIoK8sApimachineryPkgApisMetaV1Time) {
	s.DeprecatedLastTimestamp = val
}

// SetDeprecatedSource sets the value of DeprecatedSource.
func (s *IoK8sAPIEventsV1Event) SetDeprecatedSource(val OptIoK8sAPICoreV1EventSource) {
	s.DeprecatedSource = val
}

// SetEventTime sets the value of EventTime.
func (s *IoK8sAPIEventsV1Event) SetEventTime(val IoK8sApimachineryPkgApisMetaV1MicroTime) {
	s.EventTime = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIEventsV1Event) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIEventsV1Event) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetNote sets the value of Note.
func (s *IoK8sAPIEventsV1Event) SetNote(val OptString) {
	s.Note = val
}

// SetReason sets the value of Reason.
func (s *IoK8sAPIEventsV1Event) SetReason(val OptString) {
	s.Reason = val
}

// SetRegarding sets the value of Regarding.
func (s *IoK8sAPIEventsV1Event) SetRegarding(val OptIoK8sAPICoreV1ObjectReference) {
	s.Regarding = val
}

// SetRelated sets the value of Related.
func (s *IoK8sAPIEventsV1Event) SetRelated(val OptIoK8sAPICoreV1ObjectReference) {
	s.Related = val
}

// SetReportingController sets the value of ReportingController.
func (s *IoK8sAPIEventsV1Event) SetReportingController(val OptString) {
	s.ReportingController = val
}

// SetReportingInstance sets the value of ReportingInstance.
func (s *IoK8sAPIEventsV1Event) SetReportingInstance(val OptString) {
	s.ReportingInstance = val
}

// SetSeries sets the value of Series.
func (s *IoK8sAPIEventsV1Event) SetSeries(val OptIoK8sAPIEventsV1EventSeries) {
	s.Series = val
}

// SetType sets the value of Type.
func (s *IoK8sAPIEventsV1Event) SetType(val OptString) {
	s.Type = val
}

func (*IoK8sAPIEventsV1Event) readEventsV1NamespacedEventRes() {}

// EventList is a list of Event objects.
// Ref: #/components/schemas/io.k8s.api.events.v1.EventList
type IoK8sAPIEventsV1EventList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Items is a list of schema objects.
	Items []IoK8sAPIEventsV1Event `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIEventsV1EventList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPIEventsV1EventList) GetItems() []IoK8sAPIEventsV1Event {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIEventsV1EventList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIEventsV1EventList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIEventsV1EventList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPIEventsV1EventList) SetItems(val []IoK8sAPIEventsV1Event) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIEventsV1EventList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIEventsV1EventList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPIEventsV1EventList) listEventsV1EventForAllNamespacesRes() {}
func (*IoK8sAPIEventsV1EventList) listEventsV1NamespacedEventRes()       {}

// EventSeries contain information on series of events, i.e. thing that was/is happening continuously
// for some time. How often to update the EventSeries is up to the event reporters. The default event
// reporter in "k8s.io/client-go/tools/events/event_broadcaster.go" shows how this struct is updated
// on heartbeats and can guide customized reporter implementations.
// Ref: #/components/schemas/io.k8s.api.events.v1.EventSeries
type IoK8sAPIEventsV1EventSeries struct {
	// Count is the number of occurrences in this series up to the last heartbeat time.
	Count            int32                                   `json:"count"`
	LastObservedTime IoK8sApimachineryPkgApisMetaV1MicroTime `json:"lastObservedTime"`
}

// GetCount returns the value of Count.
func (s *IoK8sAPIEventsV1EventSeries) GetCount() int32 {
	return s.Count
}

// GetLastObservedTime returns the value of LastObservedTime.
func (s *IoK8sAPIEventsV1EventSeries) GetLastObservedTime() IoK8sApimachineryPkgApisMetaV1MicroTime {
	return s.LastObservedTime
}

// SetCount sets the value of Count.
func (s *IoK8sAPIEventsV1EventSeries) SetCount(val int32) {
	s.Count = val
}

// SetLastObservedTime sets the value of LastObservedTime.
func (s *IoK8sAPIEventsV1EventSeries) SetLastObservedTime(val IoK8sApimachineryPkgApisMetaV1MicroTime) {
	s.LastObservedTime = val
}

// Event is a report of an event somewhere in the cluster. It generally denotes some state change in
// the system. Events have a limited retention time and triggers and messages may evolve with time.
// Event consumers should not rely on the timing of an event with a given Reason reflecting a
// consistent underlying trigger, or the continued existence of events with that Reason.  Events
// should be treated as informative, best-effort, supplemental data.
// Ref: #/components/schemas/io.k8s.api.events.v1beta1.Event
type IoK8sAPIEventsV1beta1Event struct {
	// Action is what action was taken/failed regarding to the regarding object. It is machine-readable.
	// This field can have at most 128 characters.
	Action OptString `json:"action"`
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// DeprecatedCount is the deprecated field assuring backward compatibility with core.v1 Event type.
	DeprecatedCount          OptInt32                                `json:"deprecatedCount"`
	DeprecatedFirstTimestamp OptIoK8sApimachineryPkgApisMetaV1Time   `json:"deprecatedFirstTimestamp"`
	DeprecatedLastTimestamp  OptIoK8sApimachineryPkgApisMetaV1Time   `json:"deprecatedLastTimestamp"`
	DeprecatedSource         OptIoK8sAPICoreV1EventSource            `json:"deprecatedSource"`
	EventTime                IoK8sApimachineryPkgApisMetaV1MicroTime `json:"eventTime"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                   `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata"`
	// Note is a human-readable description of the status of this operation. Maximal length of the note
	// is 1kB, but libraries should be prepared to handle values up to 64kB.
	Note OptString `json:"note"`
	// Reason is why the action was taken. It is human-readable. This field can have at most 128
	// characters.
	Reason    OptString                        `json:"reason"`
	Regarding OptIoK8sAPICoreV1ObjectReference `json:"regarding"`
	Related   OptIoK8sAPICoreV1ObjectReference `json:"related"`
	// ReportingController is the name of the controller that emitted this Event, e.g. `kubernetes.
	// io/kubelet`. This field cannot be empty for new Events.
	ReportingController OptString `json:"reportingController"`
	// ReportingInstance is the ID of the controller instance, e.g. `kubelet-xyzf`. This field cannot be
	// empty for new Events and it can have at most 128 characters.
	ReportingInstance OptString                           `json:"reportingInstance"`
	Series            OptIoK8sAPIEventsV1beta1EventSeries `json:"series"`
	// Type is the type of this event (Normal, Warning), new types could be added in the future. It is
	// machine-readable.
	Type OptString `json:"type"`
}

// GetAction returns the value of Action.
func (s *IoK8sAPIEventsV1beta1Event) GetAction() OptString {
	return s.Action
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIEventsV1beta1Event) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetDeprecatedCount returns the value of DeprecatedCount.
func (s *IoK8sAPIEventsV1beta1Event) GetDeprecatedCount() OptInt32 {
	return s.DeprecatedCount
}

// GetDeprecatedFirstTimestamp returns the value of DeprecatedFirstTimestamp.
func (s *IoK8sAPIEventsV1beta1Event) GetDeprecatedFirstTimestamp() OptIoK8sApimachineryPkgApisMetaV1Time {
	return s.DeprecatedFirstTimestamp
}

// GetDeprecatedLastTimestamp returns the value of DeprecatedLastTimestamp.
func (s *IoK8sAPIEventsV1beta1Event) GetDeprecatedLastTimestamp() OptIoK8sApimachineryPkgApisMetaV1Time {
	return s.DeprecatedLastTimestamp
}

// GetDeprecatedSource returns the value of DeprecatedSource.
func (s *IoK8sAPIEventsV1beta1Event) GetDeprecatedSource() OptIoK8sAPICoreV1EventSource {
	return s.DeprecatedSource
}

// GetEventTime returns the value of EventTime.
func (s *IoK8sAPIEventsV1beta1Event) GetEventTime() IoK8sApimachineryPkgApisMetaV1MicroTime {
	return s.EventTime
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIEventsV1beta1Event) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIEventsV1beta1Event) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetNote returns the value of Note.
func (s *IoK8sAPIEventsV1beta1Event) GetNote() OptString {
	return s.Note
}

// GetReason returns the value of Reason.
func (s *IoK8sAPIEventsV1beta1Event) GetReason() OptString {
	return s.Reason
}

// GetRegarding returns the value of Regarding.
func (s *IoK8sAPIEventsV1beta1Event) GetRegarding() OptIoK8sAPICoreV1ObjectReference {
	return s.Regarding
}

// GetRelated returns the value of Related.
func (s *IoK8sAPIEventsV1beta1Event) GetRelated() OptIoK8sAPICoreV1ObjectReference {
	return s.Related
}

// GetReportingController returns the value of ReportingController.
func (s *IoK8sAPIEventsV1beta1Event) GetReportingController() OptString {
	return s.ReportingController
}

// GetReportingInstance returns the value of ReportingInstance.
func (s *IoK8sAPIEventsV1beta1Event) GetReportingInstance() OptString {
	return s.ReportingInstance
}

// GetSeries returns the value of Series.
func (s *IoK8sAPIEventsV1beta1Event) GetSeries() OptIoK8sAPIEventsV1beta1EventSeries {
	return s.Series
}

// GetType returns the value of Type.
func (s *IoK8sAPIEventsV1beta1Event) GetType() OptString {
	return s.Type
}

// SetAction sets the value of Action.
func (s *IoK8sAPIEventsV1beta1Event) SetAction(val OptString) {
	s.Action = val
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIEventsV1beta1Event) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetDeprecatedCount sets the value of DeprecatedCount.
func (s *IoK8sAPIEventsV1beta1Event) SetDeprecatedCount(val OptInt32) {
	s.DeprecatedCount = val
}

// SetDeprecatedFirstTimestamp sets the value of DeprecatedFirstTimestamp.
func (s *IoK8sAPIEventsV1beta1Event) SetDeprecatedFirstTimestamp(val OptIoK8sApimachineryPkgApisMetaV1Time) {
	s.DeprecatedFirstTimestamp = val
}

// SetDeprecatedLastTimestamp sets the value of DeprecatedLastTimestamp.
func (s *IoK8sAPIEventsV1beta1Event) SetDeprecatedLastTimestamp(val OptIoK8sApimachineryPkgApisMetaV1Time) {
	s.DeprecatedLastTimestamp = val
}

// SetDeprecatedSource sets the value of DeprecatedSource.
func (s *IoK8sAPIEventsV1beta1Event) SetDeprecatedSource(val OptIoK8sAPICoreV1EventSource) {
	s.DeprecatedSource = val
}

// SetEventTime sets the value of EventTime.
func (s *IoK8sAPIEventsV1beta1Event) SetEventTime(val IoK8sApimachineryPkgApisMetaV1MicroTime) {
	s.EventTime = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIEventsV1beta1Event) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIEventsV1beta1Event) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetNote sets the value of Note.
func (s *IoK8sAPIEventsV1beta1Event) SetNote(val OptString) {
	s.Note = val
}

// SetReason sets the value of Reason.
func (s *IoK8sAPIEventsV1beta1Event) SetReason(val OptString) {
	s.Reason = val
}

// SetRegarding sets the value of Regarding.
func (s *IoK8sAPIEventsV1beta1Event) SetRegarding(val OptIoK8sAPICoreV1ObjectReference) {
	s.Regarding = val
}

// SetRelated sets the value of Related.
func (s *IoK8sAPIEventsV1beta1Event) SetRelated(val OptIoK8sAPICoreV1ObjectReference) {
	s.Related = val
}

// SetReportingController sets the value of ReportingController.
func (s *IoK8sAPIEventsV1beta1Event) SetReportingController(val OptString) {
	s.ReportingController = val
}

// SetReportingInstance sets the value of ReportingInstance.
func (s *IoK8sAPIEventsV1beta1Event) SetReportingInstance(val OptString) {
	s.ReportingInstance = val
}

// SetSeries sets the value of Series.
func (s *IoK8sAPIEventsV1beta1Event) SetSeries(val OptIoK8sAPIEventsV1beta1EventSeries) {
	s.Series = val
}

// SetType sets the value of Type.
func (s *IoK8sAPIEventsV1beta1Event) SetType(val OptString) {
	s.Type = val
}

func (*IoK8sAPIEventsV1beta1Event) readEventsV1beta1NamespacedEventRes() {}

// EventList is a list of Event objects.
// Ref: #/components/schemas/io.k8s.api.events.v1beta1.EventList
type IoK8sAPIEventsV1beta1EventList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Items is a list of schema objects.
	Items []IoK8sAPIEventsV1beta1Event `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIEventsV1beta1EventList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPIEventsV1beta1EventList) GetItems() []IoK8sAPIEventsV1beta1Event {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIEventsV1beta1EventList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIEventsV1beta1EventList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIEventsV1beta1EventList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPIEventsV1beta1EventList) SetItems(val []IoK8sAPIEventsV1beta1Event) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIEventsV1beta1EventList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIEventsV1beta1EventList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPIEventsV1beta1EventList) listEventsV1beta1EventForAllNamespacesRes() {}
func (*IoK8sAPIEventsV1beta1EventList) listEventsV1beta1NamespacedEventRes()       {}

// EventSeries contain information on series of events, i.e. thing that was/is happening continuously
// for some time.
// Ref: #/components/schemas/io.k8s.api.events.v1beta1.EventSeries
type IoK8sAPIEventsV1beta1EventSeries struct {
	// Count is the number of occurrences in this series up to the last heartbeat time.
	Count            int32                                   `json:"count"`
	LastObservedTime IoK8sApimachineryPkgApisMetaV1MicroTime `json:"lastObservedTime"`
}

// GetCount returns the value of Count.
func (s *IoK8sAPIEventsV1beta1EventSeries) GetCount() int32 {
	return s.Count
}

// GetLastObservedTime returns the value of LastObservedTime.
func (s *IoK8sAPIEventsV1beta1EventSeries) GetLastObservedTime() IoK8sApimachineryPkgApisMetaV1MicroTime {
	return s.LastObservedTime
}

// SetCount sets the value of Count.
func (s *IoK8sAPIEventsV1beta1EventSeries) SetCount(val int32) {
	s.Count = val
}

// SetLastObservedTime sets the value of LastObservedTime.
func (s *IoK8sAPIEventsV1beta1EventSeries) SetLastObservedTime(val IoK8sApimachineryPkgApisMetaV1MicroTime) {
	s.LastObservedTime = val
}

// FlowDistinguisherMethod specifies the method of a flow distinguisher.
// Ref: #/components/schemas/io.k8s.api.flowcontrol.v1beta1.FlowDistinguisherMethod
type IoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod struct {
	// `type` is the type of flow distinguisher method The supported types are "ByUser" and "ByNamespace".
	//  Required.
	Type string `json:"type"`
}

// GetType returns the value of Type.
func (s *IoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod) GetType() string {
	return s.Type
}

// SetType sets the value of Type.
func (s *IoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod) SetType(val string) {
	s.Type = val
}

// FlowSchema defines the schema of a group of flows. Note that a flow is made up of a set of inbound
// API requests with similar attributes and is identified by a pair of strings: the name of the
// FlowSchema and a "flow distinguisher".
// Ref: #/components/schemas/io.k8s.api.flowcontrol.v1beta1.FlowSchema
type IoK8sAPIFlowcontrolV1beta1FlowSchema struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                     `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta   `json:"metadata"`
	Spec     OptIoK8sAPIFlowcontrolV1beta1FlowSchemaSpec   `json:"spec"`
	Status   OptIoK8sAPIFlowcontrolV1beta1FlowSchemaStatus `json:"status"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchema) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchema) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchema) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetSpec returns the value of Spec.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchema) GetSpec() OptIoK8sAPIFlowcontrolV1beta1FlowSchemaSpec {
	return s.Spec
}

// GetStatus returns the value of Status.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchema) GetStatus() OptIoK8sAPIFlowcontrolV1beta1FlowSchemaStatus {
	return s.Status
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchema) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchema) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchema) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetSpec sets the value of Spec.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchema) SetSpec(val OptIoK8sAPIFlowcontrolV1beta1FlowSchemaSpec) {
	s.Spec = val
}

// SetStatus sets the value of Status.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchema) SetStatus(val OptIoK8sAPIFlowcontrolV1beta1FlowSchemaStatus) {
	s.Status = val
}

func (*IoK8sAPIFlowcontrolV1beta1FlowSchema) readFlowcontrolApiserverV1beta1FlowSchemaRes()       {}
func (*IoK8sAPIFlowcontrolV1beta1FlowSchema) readFlowcontrolApiserverV1beta1FlowSchemaStatusRes() {}

// FlowSchemaCondition describes conditions for a FlowSchema.
// Ref: #/components/schemas/io.k8s.api.flowcontrol.v1beta1.FlowSchemaCondition
type IoK8sAPIFlowcontrolV1beta1FlowSchemaCondition struct {
	LastTransitionTime OptIoK8sApimachineryPkgApisMetaV1Time `json:"lastTransitionTime"`
	// `message` is a human-readable message indicating details about last transition.
	Message OptString `json:"message"`
	// `reason` is a unique, one-word, CamelCase reason for the condition's last transition.
	Reason OptString `json:"reason"`
	// `status` is the status of the condition. Can be True, False, Unknown. Required.
	Status OptString `json:"status"`
	// `type` is the type of the condition. Required.
	Type OptString `json:"type"`
}

// GetLastTransitionTime returns the value of LastTransitionTime.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaCondition) GetLastTransitionTime() OptIoK8sApimachineryPkgApisMetaV1Time {
	return s.LastTransitionTime
}

// GetMessage returns the value of Message.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaCondition) GetMessage() OptString {
	return s.Message
}

// GetReason returns the value of Reason.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaCondition) GetReason() OptString {
	return s.Reason
}

// GetStatus returns the value of Status.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaCondition) GetStatus() OptString {
	return s.Status
}

// GetType returns the value of Type.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaCondition) GetType() OptString {
	return s.Type
}

// SetLastTransitionTime sets the value of LastTransitionTime.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaCondition) SetLastTransitionTime(val OptIoK8sApimachineryPkgApisMetaV1Time) {
	s.LastTransitionTime = val
}

// SetMessage sets the value of Message.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaCondition) SetMessage(val OptString) {
	s.Message = val
}

// SetReason sets the value of Reason.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaCondition) SetReason(val OptString) {
	s.Reason = val
}

// SetStatus sets the value of Status.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaCondition) SetStatus(val OptString) {
	s.Status = val
}

// SetType sets the value of Type.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaCondition) SetType(val OptString) {
	s.Type = val
}

// FlowSchemaList is a list of FlowSchema objects.
// Ref: #/components/schemas/io.k8s.api.flowcontrol.v1beta1.FlowSchemaList
type IoK8sAPIFlowcontrolV1beta1FlowSchemaList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// `items` is a list of FlowSchemas.
	Items []IoK8sAPIFlowcontrolV1beta1FlowSchema `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaList) GetItems() []IoK8sAPIFlowcontrolV1beta1FlowSchema {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaList) SetItems(val []IoK8sAPIFlowcontrolV1beta1FlowSchema) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPIFlowcontrolV1beta1FlowSchemaList) listFlowcontrolApiserverV1beta1FlowSchemaRes() {}

// FlowSchemaSpec describes how the FlowSchema's specification looks like.
// Ref: #/components/schemas/io.k8s.api.flowcontrol.v1beta1.FlowSchemaSpec
type IoK8sAPIFlowcontrolV1beta1FlowSchemaSpec struct {
	DistinguisherMethod OptIoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod `json:"distinguisherMethod"`
	// `matchingPrecedence` is used to choose among the FlowSchemas that match a given request. The
	// chosen FlowSchema is among those with the numerically lowest (which we take to be logically
	// highest) MatchingPrecedence.  Each MatchingPrecedence value must be ranged in [1,10000]. Note that
	// if the precedence is not specified, it will be set to 1000 as default.
	MatchingPrecedence         OptInt32                                                      `json:"matchingPrecedence"`
	PriorityLevelConfiguration IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationReference `json:"priorityLevelConfiguration"`
	// `rules` describes which requests will match this flow schema. This FlowSchema matches a request if
	// and only if at least one member of rules matches the request. if it is an empty slice, there will
	// be no requests matching the FlowSchema.
	Rules []IoK8sAPIFlowcontrolV1beta1PolicyRulesWithSubjects `json:"rules"`
}

// GetDistinguisherMethod returns the value of DistinguisherMethod.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaSpec) GetDistinguisherMethod() OptIoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod {
	return s.DistinguisherMethod
}

// GetMatchingPrecedence returns the value of MatchingPrecedence.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaSpec) GetMatchingPrecedence() OptInt32 {
	return s.MatchingPrecedence
}

// GetPriorityLevelConfiguration returns the value of PriorityLevelConfiguration.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaSpec) GetPriorityLevelConfiguration() IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationReference {
	return s.PriorityLevelConfiguration
}

// GetRules returns the value of Rules.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaSpec) GetRules() []IoK8sAPIFlowcontrolV1beta1PolicyRulesWithSubjects {
	return s.Rules
}

// SetDistinguisherMethod sets the value of DistinguisherMethod.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaSpec) SetDistinguisherMethod(val OptIoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod) {
	s.DistinguisherMethod = val
}

// SetMatchingPrecedence sets the value of MatchingPrecedence.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaSpec) SetMatchingPrecedence(val OptInt32) {
	s.MatchingPrecedence = val
}

// SetPriorityLevelConfiguration sets the value of PriorityLevelConfiguration.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaSpec) SetPriorityLevelConfiguration(val IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationReference) {
	s.PriorityLevelConfiguration = val
}

// SetRules sets the value of Rules.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaSpec) SetRules(val []IoK8sAPIFlowcontrolV1beta1PolicyRulesWithSubjects) {
	s.Rules = val
}

// FlowSchemaStatus represents the current state of a FlowSchema.
// Ref: #/components/schemas/io.k8s.api.flowcontrol.v1beta1.FlowSchemaStatus
type IoK8sAPIFlowcontrolV1beta1FlowSchemaStatus struct {
	// `conditions` is a list of the current states of FlowSchema.
	Conditions []IoK8sAPIFlowcontrolV1beta1FlowSchemaCondition `json:"conditions"`
}

// GetConditions returns the value of Conditions.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaStatus) GetConditions() []IoK8sAPIFlowcontrolV1beta1FlowSchemaCondition {
	return s.Conditions
}

// SetConditions sets the value of Conditions.
func (s *IoK8sAPIFlowcontrolV1beta1FlowSchemaStatus) SetConditions(val []IoK8sAPIFlowcontrolV1beta1FlowSchemaCondition) {
	s.Conditions = val
}

// GroupSubject holds detailed information for group-kind subject.
// Ref: #/components/schemas/io.k8s.api.flowcontrol.v1beta1.GroupSubject
type IoK8sAPIFlowcontrolV1beta1GroupSubject struct {
	// Name is the user group that matches, or "*" to match all user groups. See https://github.
	// com/kubernetes/apiserver/blob/master/pkg/authentication/user/user.go for some well-known group
	// names. Required.
	Name string `json:"name"`
}

// GetName returns the value of Name.
func (s *IoK8sAPIFlowcontrolV1beta1GroupSubject) GetName() string {
	return s.Name
}

// SetName sets the value of Name.
func (s *IoK8sAPIFlowcontrolV1beta1GroupSubject) SetName(val string) {
	s.Name = val
}

// LimitResponse defines how to handle requests that can not be executed right now.
// Ref: #/components/schemas/io.k8s.api.flowcontrol.v1beta1.LimitResponse
type IoK8sAPIFlowcontrolV1beta1LimitResponse struct {
	Queuing OptIoK8sAPIFlowcontrolV1beta1QueuingConfiguration `json:"queuing"`
	// `type` is "Queue" or "Reject". "Queue" means that requests that can not be executed upon arrival
	// are held in a queue until they can be executed or a queuing limit is reached. "Reject" means that
	// requests that can not be executed upon arrival are rejected. Required.
	Type string `json:"type"`
}

// GetQueuing returns the value of Queuing.
func (s *IoK8sAPIFlowcontrolV1beta1LimitResponse) GetQueuing() OptIoK8sAPIFlowcontrolV1beta1QueuingConfiguration {
	return s.Queuing
}

// GetType returns the value of Type.
func (s *IoK8sAPIFlowcontrolV1beta1LimitResponse) GetType() string {
	return s.Type
}

// SetQueuing sets the value of Queuing.
func (s *IoK8sAPIFlowcontrolV1beta1LimitResponse) SetQueuing(val OptIoK8sAPIFlowcontrolV1beta1QueuingConfiguration) {
	s.Queuing = val
}

// SetType sets the value of Type.
func (s *IoK8sAPIFlowcontrolV1beta1LimitResponse) SetType(val string) {
	s.Type = val
}

// LimitedPriorityLevelConfiguration specifies how to handle requests that are subject to limits. It
// addresses two issues:
// * How are requests for this priority level limited?
// * What should be done with requests that exceed the limit?.
// Ref: #/components/schemas/io.k8s.api.flowcontrol.v1beta1.LimitedPriorityLevelConfiguration
type IoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration struct {
	// `assuredConcurrencyShares` (ACS) configures the execution limit, which is a limit on the number of
	// requests of this priority level that may be exeucting at a given time.  ACS must be a positive
	// number. The server's concurrency limit (SCL) is divided among the concurrency-controlled priority
	// levels in proportion to their assured concurrency shares. This produces the assured concurrency
	// value (ACV) --- the number of requests that may be executing at a time --- for each such priority
	// level:
	// ACV(l) = ceil( SCL * ACS(l) / ( sum[priority levels k] ACS(k) ) )
	// bigger numbers of ACS mean more reserved concurrent requests (at the expense of every other PL).
	// This field has a default value of 30.
	AssuredConcurrencyShares OptInt32                                   `json:"assuredConcurrencyShares"`
	LimitResponse            OptIoK8sAPIFlowcontrolV1beta1LimitResponse `json:"limitResponse"`
}

// GetAssuredConcurrencyShares returns the value of AssuredConcurrencyShares.
func (s *IoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration) GetAssuredConcurrencyShares() OptInt32 {
	return s.AssuredConcurrencyShares
}

// GetLimitResponse returns the value of LimitResponse.
func (s *IoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration) GetLimitResponse() OptIoK8sAPIFlowcontrolV1beta1LimitResponse {
	return s.LimitResponse
}

// SetAssuredConcurrencyShares sets the value of AssuredConcurrencyShares.
func (s *IoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration) SetAssuredConcurrencyShares(val OptInt32) {
	s.AssuredConcurrencyShares = val
}

// SetLimitResponse sets the value of LimitResponse.
func (s *IoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration) SetLimitResponse(val OptIoK8sAPIFlowcontrolV1beta1LimitResponse) {
	s.LimitResponse = val
}

// NonResourcePolicyRule is a predicate that matches non-resource requests according to their verb
// and the target non-resource URL. A NonResourcePolicyRule matches a request if and only if both (a)
// at least one member of verbs matches the request and (b) at least one member of nonResourceURLs
// matches the request.
// Ref: #/components/schemas/io.k8s.api.flowcontrol.v1beta1.NonResourcePolicyRule
type IoK8sAPIFlowcontrolV1beta1NonResourcePolicyRule struct {
	// `nonResourceURLs` is a set of url prefixes that a user should have access to and may not be empty.
	// For example:
	// - "/healthz" is legal
	// - "/hea*" is illegal
	// - "/hea" is legal but matches nothing
	// - "/hea/*" also matches nothing
	// - "/healthz/*" matches all per-component health checks.
	// "*" matches all non-resource urls. if it is present, it must be the only entry. Required.
	NonResourceURLs []string `json:"nonResourceURLs"`
	// `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs. If it is present,
	// it must be the only entry. Required.
	Verbs []string `json:"verbs"`
}

// GetNonResourceURLs returns the value of NonResourceURLs.
func (s *IoK8sAPIFlowcontrolV1beta1NonResourcePolicyRule) GetNonResourceURLs() []string {
	return s.NonResourceURLs
}

// GetVerbs returns the value of Verbs.
func (s *IoK8sAPIFlowcontrolV1beta1NonResourcePolicyRule) GetVerbs() []string {
	return s.Verbs
}

// SetNonResourceURLs sets the value of NonResourceURLs.
func (s *IoK8sAPIFlowcontrolV1beta1NonResourcePolicyRule) SetNonResourceURLs(val []string) {
	s.NonResourceURLs = val
}

// SetVerbs sets the value of Verbs.
func (s *IoK8sAPIFlowcontrolV1beta1NonResourcePolicyRule) SetVerbs(val []string) {
	s.Verbs = val
}

// PolicyRulesWithSubjects prescribes a test that applies to a request to an apiserver. The test
// considers the subject making the request, the verb being requested, and the resource to be acted
// upon. This PolicyRulesWithSubjects matches a request if and only if both (a) at least one member
// of subjects matches the request and (b) at least one member of resourceRules or nonResourceRules
// matches the request.
// Ref: #/components/schemas/io.k8s.api.flowcontrol.v1beta1.PolicyRulesWithSubjects
type IoK8sAPIFlowcontrolV1beta1PolicyRulesWithSubjects struct {
	// `nonResourceRules` is a list of NonResourcePolicyRules that identify matching requests according
	// to their verb and the target non-resource URL.
	NonResourceRules []IoK8sAPIFlowcontrolV1beta1NonResourcePolicyRule `json:"nonResourceRules"`
	// `resourceRules` is a slice of ResourcePolicyRules that identify matching requests according to
	// their verb and the target resource. At least one of `resourceRules` and `nonResourceRules` has to
	// be non-empty.
	ResourceRules []IoK8sAPIFlowcontrolV1beta1ResourcePolicyRule `json:"resourceRules"`
	// Subjects is the list of normal user, serviceaccount, or group that this rule cares about. There
	// must be at least one member in this slice. A slice that includes both the system:authenticated and
	// system:unauthenticated user groups matches every request. Required.
	Subjects []IoK8sAPIFlowcontrolV1beta1Subject `json:"subjects"`
}

// GetNonResourceRules returns the value of NonResourceRules.
func (s *IoK8sAPIFlowcontrolV1beta1PolicyRulesWithSubjects) GetNonResourceRules() []IoK8sAPIFlowcontrolV1beta1NonResourcePolicyRule {
	return s.NonResourceRules
}

// GetResourceRules returns the value of ResourceRules.
func (s *IoK8sAPIFlowcontrolV1beta1PolicyRulesWithSubjects) GetResourceRules() []IoK8sAPIFlowcontrolV1beta1ResourcePolicyRule {
	return s.ResourceRules
}

// GetSubjects returns the value of Subjects.
func (s *IoK8sAPIFlowcontrolV1beta1PolicyRulesWithSubjects) GetSubjects() []IoK8sAPIFlowcontrolV1beta1Subject {
	return s.Subjects
}

// SetNonResourceRules sets the value of NonResourceRules.
func (s *IoK8sAPIFlowcontrolV1beta1PolicyRulesWithSubjects) SetNonResourceRules(val []IoK8sAPIFlowcontrolV1beta1NonResourcePolicyRule) {
	s.NonResourceRules = val
}

// SetResourceRules sets the value of ResourceRules.
func (s *IoK8sAPIFlowcontrolV1beta1PolicyRulesWithSubjects) SetResourceRules(val []IoK8sAPIFlowcontrolV1beta1ResourcePolicyRule) {
	s.ResourceRules = val
}

// SetSubjects sets the value of Subjects.
func (s *IoK8sAPIFlowcontrolV1beta1PolicyRulesWithSubjects) SetSubjects(val []IoK8sAPIFlowcontrolV1beta1Subject) {
	s.Subjects = val
}

// PriorityLevelConfiguration represents the configuration of a priority level.
// Ref: #/components/schemas/io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfiguration
type IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                                     `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta                   `json:"metadata"`
	Spec     OptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec   `json:"spec"`
	Status   OptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus `json:"status"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetSpec returns the value of Spec.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration) GetSpec() OptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec {
	return s.Spec
}

// GetStatus returns the value of Status.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration) GetStatus() OptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus {
	return s.Status
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetSpec sets the value of Spec.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration) SetSpec(val OptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec) {
	s.Spec = val
}

// SetStatus sets the value of Status.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration) SetStatus(val OptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus) {
	s.Status = val
}

func (*IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration) readFlowcontrolApiserverV1beta1PriorityLevelConfigurationRes() {
}
func (*IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration) readFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusRes() {
}

// PriorityLevelConfigurationCondition defines the condition of priority level.
// Ref: #/components/schemas/io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfigurationCondition
type IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationCondition struct {
	LastTransitionTime OptIoK8sApimachineryPkgApisMetaV1Time `json:"lastTransitionTime"`
	// `message` is a human-readable message indicating details about last transition.
	Message OptString `json:"message"`
	// `reason` is a unique, one-word, CamelCase reason for the condition's last transition.
	Reason OptString `json:"reason"`
	// `status` is the status of the condition. Can be True, False, Unknown. Required.
	Status OptString `json:"status"`
	// `type` is the type of the condition. Required.
	Type OptString `json:"type"`
}

// GetLastTransitionTime returns the value of LastTransitionTime.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationCondition) GetLastTransitionTime() OptIoK8sApimachineryPkgApisMetaV1Time {
	return s.LastTransitionTime
}

// GetMessage returns the value of Message.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationCondition) GetMessage() OptString {
	return s.Message
}

// GetReason returns the value of Reason.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationCondition) GetReason() OptString {
	return s.Reason
}

// GetStatus returns the value of Status.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationCondition) GetStatus() OptString {
	return s.Status
}

// GetType returns the value of Type.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationCondition) GetType() OptString {
	return s.Type
}

// SetLastTransitionTime sets the value of LastTransitionTime.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationCondition) SetLastTransitionTime(val OptIoK8sApimachineryPkgApisMetaV1Time) {
	s.LastTransitionTime = val
}

// SetMessage sets the value of Message.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationCondition) SetMessage(val OptString) {
	s.Message = val
}

// SetReason sets the value of Reason.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationCondition) SetReason(val OptString) {
	s.Reason = val
}

// SetStatus sets the value of Status.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationCondition) SetStatus(val OptString) {
	s.Status = val
}

// SetType sets the value of Type.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationCondition) SetType(val OptString) {
	s.Type = val
}

// PriorityLevelConfigurationList is a list of PriorityLevelConfiguration objects.
// Ref: #/components/schemas/io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfigurationList
type IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// `items` is a list of request-priorities.
	Items []IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationList) GetItems() []IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationList) SetItems(val []IoK8sAPIFlowcontrolV1beta1PriorityLevelConfiguration) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationList) listFlowcontrolApiserverV1beta1PriorityLevelConfigurationRes() {
}

// PriorityLevelConfigurationReference contains information that points to the "request-priority"
// being used.
// Ref: #/components/schemas/io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfigurationReference
type IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationReference struct {
	// `name` is the name of the priority level configuration being referenced Required.
	Name string `json:"name"`
}

// GetName returns the value of Name.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationReference) GetName() string {
	return s.Name
}

// SetName sets the value of Name.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationReference) SetName(val string) {
	s.Name = val
}

// PriorityLevelConfigurationSpec specifies the configuration of a priority level.
// Ref: #/components/schemas/io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfigurationSpec
type IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec struct {
	Limited OptIoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration `json:"limited"`
	// `type` indicates whether this priority level is subject to limitation on request execution.  A
	// value of `"Exempt"` means that requests of this priority level are not subject to a limit (and
	// thus are never queued) and do not detract from the capacity made available to other priority
	// levels.  A value of `"Limited"` means that (a) requests of this priority level _are_ subject to
	// limits and (b) some of the server's limited capacity is made available exclusively to this
	// priority level. Required.
	Type string `json:"type"`
}

// GetLimited returns the value of Limited.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec) GetLimited() OptIoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration {
	return s.Limited
}

// GetType returns the value of Type.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec) GetType() string {
	return s.Type
}

// SetLimited sets the value of Limited.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec) SetLimited(val OptIoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration) {
	s.Limited = val
}

// SetType sets the value of Type.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec) SetType(val string) {
	s.Type = val
}

// PriorityLevelConfigurationStatus represents the current state of a "request-priority".
// Ref: #/components/schemas/io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfigurationStatus
type IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus struct {
	// `conditions` is the current state of "request-priority".
	Conditions []IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationCondition `json:"conditions"`
}

// GetConditions returns the value of Conditions.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus) GetConditions() []IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationCondition {
	return s.Conditions
}

// SetConditions sets the value of Conditions.
func (s *IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus) SetConditions(val []IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationCondition) {
	s.Conditions = val
}

// QueuingConfiguration holds the configuration parameters for queuing.
// Ref: #/components/schemas/io.k8s.api.flowcontrol.v1beta1.QueuingConfiguration
type IoK8sAPIFlowcontrolV1beta1QueuingConfiguration struct {
	// `handSize` is a small positive number that configures the shuffle sharding of requests into queues.
	//   When enqueuing a request at this priority level the request's flow identifier (a string pair) is
	// hashed and the hash value is used to shuffle the list of queues and deal a hand of the size
	// specified here.  The request is put into one of the shortest queues in that hand. `handSize` must
	// be no larger than `queues`, and should be significantly smaller (so that a few heavy flows do not
	// saturate most of the queues).  See the user-facing documentation for more extensive guidance on
	// setting this field.  This field has a default value of 8.
	HandSize OptInt32 `json:"handSize"`
	// `queueLengthLimit` is the maximum number of requests allowed to be waiting in a given queue of
	// this priority level at a time; excess requests are rejected.  This value must be positive.  If not
	// specified, it will be defaulted to 50.
	QueueLengthLimit OptInt32 `json:"queueLengthLimit"`
	// `queues` is the number of queues for this priority level. The queues exist independently at each
	// apiserver. The value must be positive.  Setting it to 1 effectively precludes shufflesharding and
	// thus makes the distinguisher method of associated flow schemas irrelevant.  This field has a
	// default value of 64.
	Queues OptInt32 `json:"queues"`
}

// GetHandSize returns the value of HandSize.
func (s *IoK8sAPIFlowcontrolV1beta1QueuingConfiguration) GetHandSize() OptInt32 {
	return s.HandSize
}

// GetQueueLengthLimit returns the value of QueueLengthLimit.
func (s *IoK8sAPIFlowcontrolV1beta1QueuingConfiguration) GetQueueLengthLimit() OptInt32 {
	return s.QueueLengthLimit
}

// GetQueues returns the value of Queues.
func (s *IoK8sAPIFlowcontrolV1beta1QueuingConfiguration) GetQueues() OptInt32 {
	return s.Queues
}

// SetHandSize sets the value of HandSize.
func (s *IoK8sAPIFlowcontrolV1beta1QueuingConfiguration) SetHandSize(val OptInt32) {
	s.HandSize = val
}

// SetQueueLengthLimit sets the value of QueueLengthLimit.
func (s *IoK8sAPIFlowcontrolV1beta1QueuingConfiguration) SetQueueLengthLimit(val OptInt32) {
	s.QueueLengthLimit = val
}

// SetQueues sets the value of Queues.
func (s *IoK8sAPIFlowcontrolV1beta1QueuingConfiguration) SetQueues(val OptInt32) {
	s.Queues = val
}

// ResourcePolicyRule is a predicate that matches some resource requests, testing the request's verb
// and the target resource. A ResourcePolicyRule matches a resource request if and only if: (a) at
// least one member of verbs matches the request, (b) at least one member of apiGroups matches the
// request, (c) at least one member of resources matches the request, and (d) least one member of
// namespaces matches the request.
// Ref: #/components/schemas/io.k8s.api.flowcontrol.v1beta1.ResourcePolicyRule
type IoK8sAPIFlowcontrolV1beta1ResourcePolicyRule struct {
	// `apiGroups` is a list of matching API groups and may not be empty. "*" matches all API groups and,
	// if present, must be the only entry. Required.
	ApiGroups []string `json:"apiGroups"`
	// `clusterScope` indicates whether to match requests that do not specify a namespace (which happens
	// either because the resource is not namespaced or the request targets all namespaces). If this
	// field is omitted or false then the `namespaces` field must contain a non-empty list.
	ClusterScope OptBool `json:"clusterScope"`
	// `namespaces` is a list of target namespaces that restricts matches.  A request that specifies a
	// target namespace matches only if either (a) this list contains that target namespace or (b) this
	// list contains "*".  Note that "*" matches any specified namespace but does not match a request
	// that _does not specify_ a namespace (see the `clusterScope` field for that). This list may be
	// empty, but only if `clusterScope` is true.
	Namespaces []string `json:"namespaces"`
	// `resources` is a list of matching resources (i.e., lowercase and plural) with, if desired,
	// subresource.  For example, [ "services", "nodes/status" ].  This list may not be empty. "*"
	// matches all resources and, if present, must be the only entry. Required.
	Resources []string `json:"resources"`
	// `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs and, if present,
	// must be the only entry. Required.
	Verbs []string `json:"verbs"`
}

// GetApiGroups returns the value of ApiGroups.
func (s *IoK8sAPIFlowcontrolV1beta1ResourcePolicyRule) GetApiGroups() []string {
	return s.ApiGroups
}

// GetClusterScope returns the value of ClusterScope.
func (s *IoK8sAPIFlowcontrolV1beta1ResourcePolicyRule) GetClusterScope() OptBool {
	return s.ClusterScope
}

// GetNamespaces returns the value of Namespaces.
func (s *IoK8sAPIFlowcontrolV1beta1ResourcePolicyRule) GetNamespaces() []string {
	return s.Namespaces
}

// GetResources returns the value of Resources.
func (s *IoK8sAPIFlowcontrolV1beta1ResourcePolicyRule) GetResources() []string {
	return s.Resources
}

// GetVerbs returns the value of Verbs.
func (s *IoK8sAPIFlowcontrolV1beta1ResourcePolicyRule) GetVerbs() []string {
	return s.Verbs
}

// SetApiGroups sets the value of ApiGroups.
func (s *IoK8sAPIFlowcontrolV1beta1ResourcePolicyRule) SetApiGroups(val []string) {
	s.ApiGroups = val
}

// SetClusterScope sets the value of ClusterScope.
func (s *IoK8sAPIFlowcontrolV1beta1ResourcePolicyRule) SetClusterScope(val OptBool) {
	s.ClusterScope = val
}

// SetNamespaces sets the value of Namespaces.
func (s *IoK8sAPIFlowcontrolV1beta1ResourcePolicyRule) SetNamespaces(val []string) {
	s.Namespaces = val
}

// SetResources sets the value of Resources.
func (s *IoK8sAPIFlowcontrolV1beta1ResourcePolicyRule) SetResources(val []string) {
	s.Resources = val
}

// SetVerbs sets the value of Verbs.
func (s *IoK8sAPIFlowcontrolV1beta1ResourcePolicyRule) SetVerbs(val []string) {
	s.Verbs = val
}

// ServiceAccountSubject holds detailed information for service-account-kind subject.
// Ref: #/components/schemas/io.k8s.api.flowcontrol.v1beta1.ServiceAccountSubject
type IoK8sAPIFlowcontrolV1beta1ServiceAccountSubject struct {
	// `name` is the name of matching ServiceAccount objects, or "*" to match regardless of name.
	// Required.
	Name string `json:"name"`
	// `namespace` is the namespace of matching ServiceAccount objects. Required.
	Namespace string `json:"namespace"`
}

// GetName returns the value of Name.
func (s *IoK8sAPIFlowcontrolV1beta1ServiceAccountSubject) GetName() string {
	return s.Name
}

// GetNamespace returns the value of Namespace.
func (s *IoK8sAPIFlowcontrolV1beta1ServiceAccountSubject) GetNamespace() string {
	return s.Namespace
}

// SetName sets the value of Name.
func (s *IoK8sAPIFlowcontrolV1beta1ServiceAccountSubject) SetName(val string) {
	s.Name = val
}

// SetNamespace sets the value of Namespace.
func (s *IoK8sAPIFlowcontrolV1beta1ServiceAccountSubject) SetNamespace(val string) {
	s.Namespace = val
}

// Subject matches the originator of a request, as identified by the request authentication system.
// There are three ways of matching an originator; by user, group, or service account.
// Ref: #/components/schemas/io.k8s.api.flowcontrol.v1beta1.Subject
type IoK8sAPIFlowcontrolV1beta1Subject struct {
	Group OptIoK8sAPIFlowcontrolV1beta1GroupSubject `json:"group"`
	// `kind` indicates which one of the other fields is non-empty. Required.
	Kind           string                                             `json:"kind"`
	ServiceAccount OptIoK8sAPIFlowcontrolV1beta1ServiceAccountSubject `json:"serviceAccount"`
	User           OptIoK8sAPIFlowcontrolV1beta1UserSubject           `json:"user"`
}

// GetGroup returns the value of Group.
func (s *IoK8sAPIFlowcontrolV1beta1Subject) GetGroup() OptIoK8sAPIFlowcontrolV1beta1GroupSubject {
	return s.Group
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIFlowcontrolV1beta1Subject) GetKind() string {
	return s.Kind
}

// GetServiceAccount returns the value of ServiceAccount.
func (s *IoK8sAPIFlowcontrolV1beta1Subject) GetServiceAccount() OptIoK8sAPIFlowcontrolV1beta1ServiceAccountSubject {
	return s.ServiceAccount
}

// GetUser returns the value of User.
func (s *IoK8sAPIFlowcontrolV1beta1Subject) GetUser() OptIoK8sAPIFlowcontrolV1beta1UserSubject {
	return s.User
}

// SetGroup sets the value of Group.
func (s *IoK8sAPIFlowcontrolV1beta1Subject) SetGroup(val OptIoK8sAPIFlowcontrolV1beta1GroupSubject) {
	s.Group = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIFlowcontrolV1beta1Subject) SetKind(val string) {
	s.Kind = val
}

// SetServiceAccount sets the value of ServiceAccount.
func (s *IoK8sAPIFlowcontrolV1beta1Subject) SetServiceAccount(val OptIoK8sAPIFlowcontrolV1beta1ServiceAccountSubject) {
	s.ServiceAccount = val
}

// SetUser sets the value of User.
func (s *IoK8sAPIFlowcontrolV1beta1Subject) SetUser(val OptIoK8sAPIFlowcontrolV1beta1UserSubject) {
	s.User = val
}

// UserSubject holds detailed information for user-kind subject.
// Ref: #/components/schemas/io.k8s.api.flowcontrol.v1beta1.UserSubject
type IoK8sAPIFlowcontrolV1beta1UserSubject struct {
	// `name` is the username that matches, or "*" to match all usernames. Required.
	Name string `json:"name"`
}

// GetName returns the value of Name.
func (s *IoK8sAPIFlowcontrolV1beta1UserSubject) GetName() string {
	return s.Name
}

// SetName sets the value of Name.
func (s *IoK8sAPIFlowcontrolV1beta1UserSubject) SetName(val string) {
	s.Name = val
}

// FlowDistinguisherMethod specifies the method of a flow distinguisher.
// Ref: #/components/schemas/io.k8s.api.flowcontrol.v1beta2.FlowDistinguisherMethod
type IoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod struct {
	// `type` is the type of flow distinguisher method The supported types are "ByUser" and "ByNamespace".
	//  Required.
	Type string `json:"type"`
}

// GetType returns the value of Type.
func (s *IoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod) GetType() string {
	return s.Type
}

// SetType sets the value of Type.
func (s *IoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod) SetType(val string) {
	s.Type = val
}

// FlowSchema defines the schema of a group of flows. Note that a flow is made up of a set of inbound
// API requests with similar attributes and is identified by a pair of strings: the name of the
// FlowSchema and a "flow distinguisher".
// Ref: #/components/schemas/io.k8s.api.flowcontrol.v1beta2.FlowSchema
type IoK8sAPIFlowcontrolV1beta2FlowSchema struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                     `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta   `json:"metadata"`
	Spec     OptIoK8sAPIFlowcontrolV1beta2FlowSchemaSpec   `json:"spec"`
	Status   OptIoK8sAPIFlowcontrolV1beta2FlowSchemaStatus `json:"status"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchema) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchema) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchema) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetSpec returns the value of Spec.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchema) GetSpec() OptIoK8sAPIFlowcontrolV1beta2FlowSchemaSpec {
	return s.Spec
}

// GetStatus returns the value of Status.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchema) GetStatus() OptIoK8sAPIFlowcontrolV1beta2FlowSchemaStatus {
	return s.Status
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchema) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchema) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchema) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetSpec sets the value of Spec.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchema) SetSpec(val OptIoK8sAPIFlowcontrolV1beta2FlowSchemaSpec) {
	s.Spec = val
}

// SetStatus sets the value of Status.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchema) SetStatus(val OptIoK8sAPIFlowcontrolV1beta2FlowSchemaStatus) {
	s.Status = val
}

func (*IoK8sAPIFlowcontrolV1beta2FlowSchema) readFlowcontrolApiserverV1beta2FlowSchemaRes()       {}
func (*IoK8sAPIFlowcontrolV1beta2FlowSchema) readFlowcontrolApiserverV1beta2FlowSchemaStatusRes() {}

// FlowSchemaCondition describes conditions for a FlowSchema.
// Ref: #/components/schemas/io.k8s.api.flowcontrol.v1beta2.FlowSchemaCondition
type IoK8sAPIFlowcontrolV1beta2FlowSchemaCondition struct {
	LastTransitionTime OptIoK8sApimachineryPkgApisMetaV1Time `json:"lastTransitionTime"`
	// `message` is a human-readable message indicating details about last transition.
	Message OptString `json:"message"`
	// `reason` is a unique, one-word, CamelCase reason for the condition's last transition.
	Reason OptString `json:"reason"`
	// `status` is the status of the condition. Can be True, False, Unknown. Required.
	Status OptString `json:"status"`
	// `type` is the type of the condition. Required.
	Type OptString `json:"type"`
}

// GetLastTransitionTime returns the value of LastTransitionTime.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaCondition) GetLastTransitionTime() OptIoK8sApimachineryPkgApisMetaV1Time {
	return s.LastTransitionTime
}

// GetMessage returns the value of Message.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaCondition) GetMessage() OptString {
	return s.Message
}

// GetReason returns the value of Reason.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaCondition) GetReason() OptString {
	return s.Reason
}

// GetStatus returns the value of Status.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaCondition) GetStatus() OptString {
	return s.Status
}

// GetType returns the value of Type.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaCondition) GetType() OptString {
	return s.Type
}

// SetLastTransitionTime sets the value of LastTransitionTime.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaCondition) SetLastTransitionTime(val OptIoK8sApimachineryPkgApisMetaV1Time) {
	s.LastTransitionTime = val
}

// SetMessage sets the value of Message.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaCondition) SetMessage(val OptString) {
	s.Message = val
}

// SetReason sets the value of Reason.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaCondition) SetReason(val OptString) {
	s.Reason = val
}

// SetStatus sets the value of Status.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaCondition) SetStatus(val OptString) {
	s.Status = val
}

// SetType sets the value of Type.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaCondition) SetType(val OptString) {
	s.Type = val
}

// FlowSchemaList is a list of FlowSchema objects.
// Ref: #/components/schemas/io.k8s.api.flowcontrol.v1beta2.FlowSchemaList
type IoK8sAPIFlowcontrolV1beta2FlowSchemaList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// `items` is a list of FlowSchemas.
	Items []IoK8sAPIFlowcontrolV1beta2FlowSchema `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaList) GetItems() []IoK8sAPIFlowcontrolV1beta2FlowSchema {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaList) SetItems(val []IoK8sAPIFlowcontrolV1beta2FlowSchema) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPIFlowcontrolV1beta2FlowSchemaList) listFlowcontrolApiserverV1beta2FlowSchemaRes() {}

// FlowSchemaSpec describes how the FlowSchema's specification looks like.
// Ref: #/components/schemas/io.k8s.api.flowcontrol.v1beta2.FlowSchemaSpec
type IoK8sAPIFlowcontrolV1beta2FlowSchemaSpec struct {
	DistinguisherMethod OptIoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod `json:"distinguisherMethod"`
	// `matchingPrecedence` is used to choose among the FlowSchemas that match a given request. The
	// chosen FlowSchema is among those with the numerically lowest (which we take to be logically
	// highest) MatchingPrecedence.  Each MatchingPrecedence value must be ranged in [1,10000]. Note that
	// if the precedence is not specified, it will be set to 1000 as default.
	MatchingPrecedence         OptInt32                                                      `json:"matchingPrecedence"`
	PriorityLevelConfiguration IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationReference `json:"priorityLevelConfiguration"`
	// `rules` describes which requests will match this flow schema. This FlowSchema matches a request if
	// and only if at least one member of rules matches the request. if it is an empty slice, there will
	// be no requests matching the FlowSchema.
	Rules []IoK8sAPIFlowcontrolV1beta2PolicyRulesWithSubjects `json:"rules"`
}

// GetDistinguisherMethod returns the value of DistinguisherMethod.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaSpec) GetDistinguisherMethod() OptIoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod {
	return s.DistinguisherMethod
}

// GetMatchingPrecedence returns the value of MatchingPrecedence.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaSpec) GetMatchingPrecedence() OptInt32 {
	return s.MatchingPrecedence
}

// GetPriorityLevelConfiguration returns the value of PriorityLevelConfiguration.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaSpec) GetPriorityLevelConfiguration() IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationReference {
	return s.PriorityLevelConfiguration
}

// GetRules returns the value of Rules.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaSpec) GetRules() []IoK8sAPIFlowcontrolV1beta2PolicyRulesWithSubjects {
	return s.Rules
}

// SetDistinguisherMethod sets the value of DistinguisherMethod.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaSpec) SetDistinguisherMethod(val OptIoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod) {
	s.DistinguisherMethod = val
}

// SetMatchingPrecedence sets the value of MatchingPrecedence.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaSpec) SetMatchingPrecedence(val OptInt32) {
	s.MatchingPrecedence = val
}

// SetPriorityLevelConfiguration sets the value of PriorityLevelConfiguration.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaSpec) SetPriorityLevelConfiguration(val IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationReference) {
	s.PriorityLevelConfiguration = val
}

// SetRules sets the value of Rules.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaSpec) SetRules(val []IoK8sAPIFlowcontrolV1beta2PolicyRulesWithSubjects) {
	s.Rules = val
}

// FlowSchemaStatus represents the current state of a FlowSchema.
// Ref: #/components/schemas/io.k8s.api.flowcontrol.v1beta2.FlowSchemaStatus
type IoK8sAPIFlowcontrolV1beta2FlowSchemaStatus struct {
	// `conditions` is a list of the current states of FlowSchema.
	Conditions []IoK8sAPIFlowcontrolV1beta2FlowSchemaCondition `json:"conditions"`
}

// GetConditions returns the value of Conditions.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaStatus) GetConditions() []IoK8sAPIFlowcontrolV1beta2FlowSchemaCondition {
	return s.Conditions
}

// SetConditions sets the value of Conditions.
func (s *IoK8sAPIFlowcontrolV1beta2FlowSchemaStatus) SetConditions(val []IoK8sAPIFlowcontrolV1beta2FlowSchemaCondition) {
	s.Conditions = val
}

// GroupSubject holds detailed information for group-kind subject.
// Ref: #/components/schemas/io.k8s.api.flowcontrol.v1beta2.GroupSubject
type IoK8sAPIFlowcontrolV1beta2GroupSubject struct {
	// Name is the user group that matches, or "*" to match all user groups. See https://github.
	// com/kubernetes/apiserver/blob/master/pkg/authentication/user/user.go for some well-known group
	// names. Required.
	Name string `json:"name"`
}

// GetName returns the value of Name.
func (s *IoK8sAPIFlowcontrolV1beta2GroupSubject) GetName() string {
	return s.Name
}

// SetName sets the value of Name.
func (s *IoK8sAPIFlowcontrolV1beta2GroupSubject) SetName(val string) {
	s.Name = val
}

// LimitResponse defines how to handle requests that can not be executed right now.
// Ref: #/components/schemas/io.k8s.api.flowcontrol.v1beta2.LimitResponse
type IoK8sAPIFlowcontrolV1beta2LimitResponse struct {
	Queuing OptIoK8sAPIFlowcontrolV1beta2QueuingConfiguration `json:"queuing"`
	// `type` is "Queue" or "Reject". "Queue" means that requests that can not be executed upon arrival
	// are held in a queue until they can be executed or a queuing limit is reached. "Reject" means that
	// requests that can not be executed upon arrival are rejected. Required.
	Type string `json:"type"`
}

// GetQueuing returns the value of Queuing.
func (s *IoK8sAPIFlowcontrolV1beta2LimitResponse) GetQueuing() OptIoK8sAPIFlowcontrolV1beta2QueuingConfiguration {
	return s.Queuing
}

// GetType returns the value of Type.
func (s *IoK8sAPIFlowcontrolV1beta2LimitResponse) GetType() string {
	return s.Type
}

// SetQueuing sets the value of Queuing.
func (s *IoK8sAPIFlowcontrolV1beta2LimitResponse) SetQueuing(val OptIoK8sAPIFlowcontrolV1beta2QueuingConfiguration) {
	s.Queuing = val
}

// SetType sets the value of Type.
func (s *IoK8sAPIFlowcontrolV1beta2LimitResponse) SetType(val string) {
	s.Type = val
}

// LimitedPriorityLevelConfiguration specifies how to handle requests that are subject to limits. It
// addresses two issues:
// * How are requests for this priority level limited?
// * What should be done with requests that exceed the limit?.
// Ref: #/components/schemas/io.k8s.api.flowcontrol.v1beta2.LimitedPriorityLevelConfiguration
type IoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration struct {
	// `assuredConcurrencyShares` (ACS) configures the execution limit, which is a limit on the number of
	// requests of this priority level that may be exeucting at a given time.  ACS must be a positive
	// number. The server's concurrency limit (SCL) is divided among the concurrency-controlled priority
	// levels in proportion to their assured concurrency shares. This produces the assured concurrency
	// value (ACV) --- the number of requests that may be executing at a time --- for each such priority
	// level:
	// ACV(l) = ceil( SCL * ACS(l) / ( sum[priority levels k] ACS(k) ) )
	// bigger numbers of ACS mean more reserved concurrent requests (at the expense of every other PL).
	// This field has a default value of 30.
	AssuredConcurrencyShares OptInt32                                   `json:"assuredConcurrencyShares"`
	LimitResponse            OptIoK8sAPIFlowcontrolV1beta2LimitResponse `json:"limitResponse"`
}

// GetAssuredConcurrencyShares returns the value of AssuredConcurrencyShares.
func (s *IoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration) GetAssuredConcurrencyShares() OptInt32 {
	return s.AssuredConcurrencyShares
}

// GetLimitResponse returns the value of LimitResponse.
func (s *IoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration) GetLimitResponse() OptIoK8sAPIFlowcontrolV1beta2LimitResponse {
	return s.LimitResponse
}

// SetAssuredConcurrencyShares sets the value of AssuredConcurrencyShares.
func (s *IoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration) SetAssuredConcurrencyShares(val OptInt32) {
	s.AssuredConcurrencyShares = val
}

// SetLimitResponse sets the value of LimitResponse.
func (s *IoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration) SetLimitResponse(val OptIoK8sAPIFlowcontrolV1beta2LimitResponse) {
	s.LimitResponse = val
}

// NonResourcePolicyRule is a predicate that matches non-resource requests according to their verb
// and the target non-resource URL. A NonResourcePolicyRule matches a request if and only if both (a)
// at least one member of verbs matches the request and (b) at least one member of nonResourceURLs
// matches the request.
// Ref: #/components/schemas/io.k8s.api.flowcontrol.v1beta2.NonResourcePolicyRule
type IoK8sAPIFlowcontrolV1beta2NonResourcePolicyRule struct {
	// `nonResourceURLs` is a set of url prefixes that a user should have access to and may not be empty.
	// For example:
	// - "/healthz" is legal
	// - "/hea*" is illegal
	// - "/hea" is legal but matches nothing
	// - "/hea/*" also matches nothing
	// - "/healthz/*" matches all per-component health checks.
	// "*" matches all non-resource urls. if it is present, it must be the only entry. Required.
	NonResourceURLs []string `json:"nonResourceURLs"`
	// `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs. If it is present,
	// it must be the only entry. Required.
	Verbs []string `json:"verbs"`
}

// GetNonResourceURLs returns the value of NonResourceURLs.
func (s *IoK8sAPIFlowcontrolV1beta2NonResourcePolicyRule) GetNonResourceURLs() []string {
	return s.NonResourceURLs
}

// GetVerbs returns the value of Verbs.
func (s *IoK8sAPIFlowcontrolV1beta2NonResourcePolicyRule) GetVerbs() []string {
	return s.Verbs
}

// SetNonResourceURLs sets the value of NonResourceURLs.
func (s *IoK8sAPIFlowcontrolV1beta2NonResourcePolicyRule) SetNonResourceURLs(val []string) {
	s.NonResourceURLs = val
}

// SetVerbs sets the value of Verbs.
func (s *IoK8sAPIFlowcontrolV1beta2NonResourcePolicyRule) SetVerbs(val []string) {
	s.Verbs = val
}

// PolicyRulesWithSubjects prescribes a test that applies to a request to an apiserver. The test
// considers the subject making the request, the verb being requested, and the resource to be acted
// upon. This PolicyRulesWithSubjects matches a request if and only if both (a) at least one member
// of subjects matches the request and (b) at least one member of resourceRules or nonResourceRules
// matches the request.
// Ref: #/components/schemas/io.k8s.api.flowcontrol.v1beta2.PolicyRulesWithSubjects
type IoK8sAPIFlowcontrolV1beta2PolicyRulesWithSubjects struct {
	// `nonResourceRules` is a list of NonResourcePolicyRules that identify matching requests according
	// to their verb and the target non-resource URL.
	NonResourceRules []IoK8sAPIFlowcontrolV1beta2NonResourcePolicyRule `json:"nonResourceRules"`
	// `resourceRules` is a slice of ResourcePolicyRules that identify matching requests according to
	// their verb and the target resource. At least one of `resourceRules` and `nonResourceRules` has to
	// be non-empty.
	ResourceRules []IoK8sAPIFlowcontrolV1beta2ResourcePolicyRule `json:"resourceRules"`
	// Subjects is the list of normal user, serviceaccount, or group that this rule cares about. There
	// must be at least one member in this slice. A slice that includes both the system:authenticated and
	// system:unauthenticated user groups matches every request. Required.
	Subjects []IoK8sAPIFlowcontrolV1beta2Subject `json:"subjects"`
}

// GetNonResourceRules returns the value of NonResourceRules.
func (s *IoK8sAPIFlowcontrolV1beta2PolicyRulesWithSubjects) GetNonResourceRules() []IoK8sAPIFlowcontrolV1beta2NonResourcePolicyRule {
	return s.NonResourceRules
}

// GetResourceRules returns the value of ResourceRules.
func (s *IoK8sAPIFlowcontrolV1beta2PolicyRulesWithSubjects) GetResourceRules() []IoK8sAPIFlowcontrolV1beta2ResourcePolicyRule {
	return s.ResourceRules
}

// GetSubjects returns the value of Subjects.
func (s *IoK8sAPIFlowcontrolV1beta2PolicyRulesWithSubjects) GetSubjects() []IoK8sAPIFlowcontrolV1beta2Subject {
	return s.Subjects
}

// SetNonResourceRules sets the value of NonResourceRules.
func (s *IoK8sAPIFlowcontrolV1beta2PolicyRulesWithSubjects) SetNonResourceRules(val []IoK8sAPIFlowcontrolV1beta2NonResourcePolicyRule) {
	s.NonResourceRules = val
}

// SetResourceRules sets the value of ResourceRules.
func (s *IoK8sAPIFlowcontrolV1beta2PolicyRulesWithSubjects) SetResourceRules(val []IoK8sAPIFlowcontrolV1beta2ResourcePolicyRule) {
	s.ResourceRules = val
}

// SetSubjects sets the value of Subjects.
func (s *IoK8sAPIFlowcontrolV1beta2PolicyRulesWithSubjects) SetSubjects(val []IoK8sAPIFlowcontrolV1beta2Subject) {
	s.Subjects = val
}

// PriorityLevelConfiguration represents the configuration of a priority level.
// Ref: #/components/schemas/io.k8s.api.flowcontrol.v1beta2.PriorityLevelConfiguration
type IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                                     `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta                   `json:"metadata"`
	Spec     OptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec   `json:"spec"`
	Status   OptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus `json:"status"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetSpec returns the value of Spec.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration) GetSpec() OptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec {
	return s.Spec
}

// GetStatus returns the value of Status.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration) GetStatus() OptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus {
	return s.Status
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetSpec sets the value of Spec.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration) SetSpec(val OptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec) {
	s.Spec = val
}

// SetStatus sets the value of Status.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration) SetStatus(val OptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus) {
	s.Status = val
}

func (*IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration) readFlowcontrolApiserverV1beta2PriorityLevelConfigurationRes() {
}
func (*IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration) readFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusRes() {
}

// PriorityLevelConfigurationCondition defines the condition of priority level.
// Ref: #/components/schemas/io.k8s.api.flowcontrol.v1beta2.PriorityLevelConfigurationCondition
type IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationCondition struct {
	LastTransitionTime OptIoK8sApimachineryPkgApisMetaV1Time `json:"lastTransitionTime"`
	// `message` is a human-readable message indicating details about last transition.
	Message OptString `json:"message"`
	// `reason` is a unique, one-word, CamelCase reason for the condition's last transition.
	Reason OptString `json:"reason"`
	// `status` is the status of the condition. Can be True, False, Unknown. Required.
	Status OptString `json:"status"`
	// `type` is the type of the condition. Required.
	Type OptString `json:"type"`
}

// GetLastTransitionTime returns the value of LastTransitionTime.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationCondition) GetLastTransitionTime() OptIoK8sApimachineryPkgApisMetaV1Time {
	return s.LastTransitionTime
}

// GetMessage returns the value of Message.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationCondition) GetMessage() OptString {
	return s.Message
}

// GetReason returns the value of Reason.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationCondition) GetReason() OptString {
	return s.Reason
}

// GetStatus returns the value of Status.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationCondition) GetStatus() OptString {
	return s.Status
}

// GetType returns the value of Type.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationCondition) GetType() OptString {
	return s.Type
}

// SetLastTransitionTime sets the value of LastTransitionTime.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationCondition) SetLastTransitionTime(val OptIoK8sApimachineryPkgApisMetaV1Time) {
	s.LastTransitionTime = val
}

// SetMessage sets the value of Message.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationCondition) SetMessage(val OptString) {
	s.Message = val
}

// SetReason sets the value of Reason.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationCondition) SetReason(val OptString) {
	s.Reason = val
}

// SetStatus sets the value of Status.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationCondition) SetStatus(val OptString) {
	s.Status = val
}

// SetType sets the value of Type.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationCondition) SetType(val OptString) {
	s.Type = val
}

// PriorityLevelConfigurationList is a list of PriorityLevelConfiguration objects.
// Ref: #/components/schemas/io.k8s.api.flowcontrol.v1beta2.PriorityLevelConfigurationList
type IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// `items` is a list of request-priorities.
	Items []IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationList) GetItems() []IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationList) SetItems(val []IoK8sAPIFlowcontrolV1beta2PriorityLevelConfiguration) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationList) listFlowcontrolApiserverV1beta2PriorityLevelConfigurationRes() {
}

// PriorityLevelConfigurationReference contains information that points to the "request-priority"
// being used.
// Ref: #/components/schemas/io.k8s.api.flowcontrol.v1beta2.PriorityLevelConfigurationReference
type IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationReference struct {
	// `name` is the name of the priority level configuration being referenced Required.
	Name string `json:"name"`
}

// GetName returns the value of Name.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationReference) GetName() string {
	return s.Name
}

// SetName sets the value of Name.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationReference) SetName(val string) {
	s.Name = val
}

// PriorityLevelConfigurationSpec specifies the configuration of a priority level.
// Ref: #/components/schemas/io.k8s.api.flowcontrol.v1beta2.PriorityLevelConfigurationSpec
type IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec struct {
	Limited OptIoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration `json:"limited"`
	// `type` indicates whether this priority level is subject to limitation on request execution.  A
	// value of `"Exempt"` means that requests of this priority level are not subject to a limit (and
	// thus are never queued) and do not detract from the capacity made available to other priority
	// levels.  A value of `"Limited"` means that (a) requests of this priority level _are_ subject to
	// limits and (b) some of the server's limited capacity is made available exclusively to this
	// priority level. Required.
	Type string `json:"type"`
}

// GetLimited returns the value of Limited.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec) GetLimited() OptIoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration {
	return s.Limited
}

// GetType returns the value of Type.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec) GetType() string {
	return s.Type
}

// SetLimited sets the value of Limited.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec) SetLimited(val OptIoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration) {
	s.Limited = val
}

// SetType sets the value of Type.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec) SetType(val string) {
	s.Type = val
}

// PriorityLevelConfigurationStatus represents the current state of a "request-priority".
// Ref: #/components/schemas/io.k8s.api.flowcontrol.v1beta2.PriorityLevelConfigurationStatus
type IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus struct {
	// `conditions` is the current state of "request-priority".
	Conditions []IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationCondition `json:"conditions"`
}

// GetConditions returns the value of Conditions.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus) GetConditions() []IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationCondition {
	return s.Conditions
}

// SetConditions sets the value of Conditions.
func (s *IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus) SetConditions(val []IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationCondition) {
	s.Conditions = val
}

// QueuingConfiguration holds the configuration parameters for queuing.
// Ref: #/components/schemas/io.k8s.api.flowcontrol.v1beta2.QueuingConfiguration
type IoK8sAPIFlowcontrolV1beta2QueuingConfiguration struct {
	// `handSize` is a small positive number that configures the shuffle sharding of requests into queues.
	//   When enqueuing a request at this priority level the request's flow identifier (a string pair) is
	// hashed and the hash value is used to shuffle the list of queues and deal a hand of the size
	// specified here.  The request is put into one of the shortest queues in that hand. `handSize` must
	// be no larger than `queues`, and should be significantly smaller (so that a few heavy flows do not
	// saturate most of the queues).  See the user-facing documentation for more extensive guidance on
	// setting this field.  This field has a default value of 8.
	HandSize OptInt32 `json:"handSize"`
	// `queueLengthLimit` is the maximum number of requests allowed to be waiting in a given queue of
	// this priority level at a time; excess requests are rejected.  This value must be positive.  If not
	// specified, it will be defaulted to 50.
	QueueLengthLimit OptInt32 `json:"queueLengthLimit"`
	// `queues` is the number of queues for this priority level. The queues exist independently at each
	// apiserver. The value must be positive.  Setting it to 1 effectively precludes shufflesharding and
	// thus makes the distinguisher method of associated flow schemas irrelevant.  This field has a
	// default value of 64.
	Queues OptInt32 `json:"queues"`
}

// GetHandSize returns the value of HandSize.
func (s *IoK8sAPIFlowcontrolV1beta2QueuingConfiguration) GetHandSize() OptInt32 {
	return s.HandSize
}

// GetQueueLengthLimit returns the value of QueueLengthLimit.
func (s *IoK8sAPIFlowcontrolV1beta2QueuingConfiguration) GetQueueLengthLimit() OptInt32 {
	return s.QueueLengthLimit
}

// GetQueues returns the value of Queues.
func (s *IoK8sAPIFlowcontrolV1beta2QueuingConfiguration) GetQueues() OptInt32 {
	return s.Queues
}

// SetHandSize sets the value of HandSize.
func (s *IoK8sAPIFlowcontrolV1beta2QueuingConfiguration) SetHandSize(val OptInt32) {
	s.HandSize = val
}

// SetQueueLengthLimit sets the value of QueueLengthLimit.
func (s *IoK8sAPIFlowcontrolV1beta2QueuingConfiguration) SetQueueLengthLimit(val OptInt32) {
	s.QueueLengthLimit = val
}

// SetQueues sets the value of Queues.
func (s *IoK8sAPIFlowcontrolV1beta2QueuingConfiguration) SetQueues(val OptInt32) {
	s.Queues = val
}

// ResourcePolicyRule is a predicate that matches some resource requests, testing the request's verb
// and the target resource. A ResourcePolicyRule matches a resource request if and only if: (a) at
// least one member of verbs matches the request, (b) at least one member of apiGroups matches the
// request, (c) at least one member of resources matches the request, and (d) least one member of
// namespaces matches the request.
// Ref: #/components/schemas/io.k8s.api.flowcontrol.v1beta2.ResourcePolicyRule
type IoK8sAPIFlowcontrolV1beta2ResourcePolicyRule struct {
	// `apiGroups` is a list of matching API groups and may not be empty. "*" matches all API groups and,
	// if present, must be the only entry. Required.
	ApiGroups []string `json:"apiGroups"`
	// `clusterScope` indicates whether to match requests that do not specify a namespace (which happens
	// either because the resource is not namespaced or the request targets all namespaces). If this
	// field is omitted or false then the `namespaces` field must contain a non-empty list.
	ClusterScope OptBool `json:"clusterScope"`
	// `namespaces` is a list of target namespaces that restricts matches.  A request that specifies a
	// target namespace matches only if either (a) this list contains that target namespace or (b) this
	// list contains "*".  Note that "*" matches any specified namespace but does not match a request
	// that _does not specify_ a namespace (see the `clusterScope` field for that). This list may be
	// empty, but only if `clusterScope` is true.
	Namespaces []string `json:"namespaces"`
	// `resources` is a list of matching resources (i.e., lowercase and plural) with, if desired,
	// subresource.  For example, [ "services", "nodes/status" ].  This list may not be empty. "*"
	// matches all resources and, if present, must be the only entry. Required.
	Resources []string `json:"resources"`
	// `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs and, if present,
	// must be the only entry. Required.
	Verbs []string `json:"verbs"`
}

// GetApiGroups returns the value of ApiGroups.
func (s *IoK8sAPIFlowcontrolV1beta2ResourcePolicyRule) GetApiGroups() []string {
	return s.ApiGroups
}

// GetClusterScope returns the value of ClusterScope.
func (s *IoK8sAPIFlowcontrolV1beta2ResourcePolicyRule) GetClusterScope() OptBool {
	return s.ClusterScope
}

// GetNamespaces returns the value of Namespaces.
func (s *IoK8sAPIFlowcontrolV1beta2ResourcePolicyRule) GetNamespaces() []string {
	return s.Namespaces
}

// GetResources returns the value of Resources.
func (s *IoK8sAPIFlowcontrolV1beta2ResourcePolicyRule) GetResources() []string {
	return s.Resources
}

// GetVerbs returns the value of Verbs.
func (s *IoK8sAPIFlowcontrolV1beta2ResourcePolicyRule) GetVerbs() []string {
	return s.Verbs
}

// SetApiGroups sets the value of ApiGroups.
func (s *IoK8sAPIFlowcontrolV1beta2ResourcePolicyRule) SetApiGroups(val []string) {
	s.ApiGroups = val
}

// SetClusterScope sets the value of ClusterScope.
func (s *IoK8sAPIFlowcontrolV1beta2ResourcePolicyRule) SetClusterScope(val OptBool) {
	s.ClusterScope = val
}

// SetNamespaces sets the value of Namespaces.
func (s *IoK8sAPIFlowcontrolV1beta2ResourcePolicyRule) SetNamespaces(val []string) {
	s.Namespaces = val
}

// SetResources sets the value of Resources.
func (s *IoK8sAPIFlowcontrolV1beta2ResourcePolicyRule) SetResources(val []string) {
	s.Resources = val
}

// SetVerbs sets the value of Verbs.
func (s *IoK8sAPIFlowcontrolV1beta2ResourcePolicyRule) SetVerbs(val []string) {
	s.Verbs = val
}

// ServiceAccountSubject holds detailed information for service-account-kind subject.
// Ref: #/components/schemas/io.k8s.api.flowcontrol.v1beta2.ServiceAccountSubject
type IoK8sAPIFlowcontrolV1beta2ServiceAccountSubject struct {
	// `name` is the name of matching ServiceAccount objects, or "*" to match regardless of name.
	// Required.
	Name string `json:"name"`
	// `namespace` is the namespace of matching ServiceAccount objects. Required.
	Namespace string `json:"namespace"`
}

// GetName returns the value of Name.
func (s *IoK8sAPIFlowcontrolV1beta2ServiceAccountSubject) GetName() string {
	return s.Name
}

// GetNamespace returns the value of Namespace.
func (s *IoK8sAPIFlowcontrolV1beta2ServiceAccountSubject) GetNamespace() string {
	return s.Namespace
}

// SetName sets the value of Name.
func (s *IoK8sAPIFlowcontrolV1beta2ServiceAccountSubject) SetName(val string) {
	s.Name = val
}

// SetNamespace sets the value of Namespace.
func (s *IoK8sAPIFlowcontrolV1beta2ServiceAccountSubject) SetNamespace(val string) {
	s.Namespace = val
}

// Subject matches the originator of a request, as identified by the request authentication system.
// There are three ways of matching an originator; by user, group, or service account.
// Ref: #/components/schemas/io.k8s.api.flowcontrol.v1beta2.Subject
type IoK8sAPIFlowcontrolV1beta2Subject struct {
	Group OptIoK8sAPIFlowcontrolV1beta2GroupSubject `json:"group"`
	// `kind` indicates which one of the other fields is non-empty. Required.
	Kind           string                                             `json:"kind"`
	ServiceAccount OptIoK8sAPIFlowcontrolV1beta2ServiceAccountSubject `json:"serviceAccount"`
	User           OptIoK8sAPIFlowcontrolV1beta2UserSubject           `json:"user"`
}

// GetGroup returns the value of Group.
func (s *IoK8sAPIFlowcontrolV1beta2Subject) GetGroup() OptIoK8sAPIFlowcontrolV1beta2GroupSubject {
	return s.Group
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIFlowcontrolV1beta2Subject) GetKind() string {
	return s.Kind
}

// GetServiceAccount returns the value of ServiceAccount.
func (s *IoK8sAPIFlowcontrolV1beta2Subject) GetServiceAccount() OptIoK8sAPIFlowcontrolV1beta2ServiceAccountSubject {
	return s.ServiceAccount
}

// GetUser returns the value of User.
func (s *IoK8sAPIFlowcontrolV1beta2Subject) GetUser() OptIoK8sAPIFlowcontrolV1beta2UserSubject {
	return s.User
}

// SetGroup sets the value of Group.
func (s *IoK8sAPIFlowcontrolV1beta2Subject) SetGroup(val OptIoK8sAPIFlowcontrolV1beta2GroupSubject) {
	s.Group = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIFlowcontrolV1beta2Subject) SetKind(val string) {
	s.Kind = val
}

// SetServiceAccount sets the value of ServiceAccount.
func (s *IoK8sAPIFlowcontrolV1beta2Subject) SetServiceAccount(val OptIoK8sAPIFlowcontrolV1beta2ServiceAccountSubject) {
	s.ServiceAccount = val
}

// SetUser sets the value of User.
func (s *IoK8sAPIFlowcontrolV1beta2Subject) SetUser(val OptIoK8sAPIFlowcontrolV1beta2UserSubject) {
	s.User = val
}

// UserSubject holds detailed information for user-kind subject.
// Ref: #/components/schemas/io.k8s.api.flowcontrol.v1beta2.UserSubject
type IoK8sAPIFlowcontrolV1beta2UserSubject struct {
	// `name` is the username that matches, or "*" to match all usernames. Required.
	Name string `json:"name"`
}

// GetName returns the value of Name.
func (s *IoK8sAPIFlowcontrolV1beta2UserSubject) GetName() string {
	return s.Name
}

// SetName sets the value of Name.
func (s *IoK8sAPIFlowcontrolV1beta2UserSubject) SetName(val string) {
	s.Name = val
}

// HTTPIngressPath associates a path with a backend. Incoming urls matching the path are forwarded to
// the backend.
// Ref: #/components/schemas/io.k8s.api.networking.v1.HTTPIngressPath
type IoK8sAPINetworkingV1HTTPIngressPath struct {
	Backend IoK8sAPINetworkingV1IngressBackend `json:"backend"`
	// Path is matched against the path of an incoming request. Currently it can contain characters
	// disallowed from the conventional "path" part of a URL as defined by RFC 3986. Paths must begin
	// with a '/' and must be present when using PathType with value "Exact" or "Prefix".
	Path OptString `json:"path"`
	// PathType determines the interpretation of the Path matching. PathType can be one of the following
	// values: * Exact: Matches the URL path exactly. * Prefix: Matches based on a URL path prefix split
	// by '/'. Matching is
	// done on a path element by element basis. A path element refers is the
	// list of labels in the path split by the '/' separator. A request is a
	// match for path p if every p is an element-wise prefix of p of the
	// request path. Note that if the last element of the path is a substring
	// of the last element in request path, it is not a match (e.g. /foo/bar
	// matches /foo/bar/baz, but does not match /foo/barbaz).
	// * ImplementationSpecific: Interpretation of the Path matching is up to
	// the IngressClass. Implementations can treat this as a separate PathType
	// or treat it identically to Prefix or Exact path types.
	// Implementations are required to support all path types.
	PathType string `json:"pathType"`
}

// GetBackend returns the value of Backend.
func (s *IoK8sAPINetworkingV1HTTPIngressPath) GetBackend() IoK8sAPINetworkingV1IngressBackend {
	return s.Backend
}

// GetPath returns the value of Path.
func (s *IoK8sAPINetworkingV1HTTPIngressPath) GetPath() OptString {
	return s.Path
}

// GetPathType returns the value of PathType.
func (s *IoK8sAPINetworkingV1HTTPIngressPath) GetPathType() string {
	return s.PathType
}

// SetBackend sets the value of Backend.
func (s *IoK8sAPINetworkingV1HTTPIngressPath) SetBackend(val IoK8sAPINetworkingV1IngressBackend) {
	s.Backend = val
}

// SetPath sets the value of Path.
func (s *IoK8sAPINetworkingV1HTTPIngressPath) SetPath(val OptString) {
	s.Path = val
}

// SetPathType sets the value of PathType.
func (s *IoK8sAPINetworkingV1HTTPIngressPath) SetPathType(val string) {
	s.PathType = val
}

// HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example:
// http://<host>/<path>?<searchpart> -> backend where where parts of the url correspond to RFC 3986,
// this resource will be used to match against everything after the last '/' and before the first '?'
// or '#'.
// Ref: #/components/schemas/io.k8s.api.networking.v1.HTTPIngressRuleValue
type IoK8sAPINetworkingV1HTTPIngressRuleValue struct {
	// A collection of paths that map requests to backends.
	Paths []IoK8sAPINetworkingV1HTTPIngressPath `json:"paths"`
}

// GetPaths returns the value of Paths.
func (s *IoK8sAPINetworkingV1HTTPIngressRuleValue) GetPaths() []IoK8sAPINetworkingV1HTTPIngressPath {
	return s.Paths
}

// SetPaths sets the value of Paths.
func (s *IoK8sAPINetworkingV1HTTPIngressRuleValue) SetPaths(val []IoK8sAPINetworkingV1HTTPIngressPath) {
	s.Paths = val
}

// IPBlock describes a particular CIDR (Ex. "192.168.1.1/24","2001:db9::/64") that is allowed to the
// pods matched by a NetworkPolicySpec's podSelector. The except entry describes CIDRs that should
// not be included within this rule.
// Ref: #/components/schemas/io.k8s.api.networking.v1.IPBlock
type IoK8sAPINetworkingV1IPBlock struct {
	// CIDR is a string representing the IP Block Valid examples are "192.168.1.1/24" or "2001:db9::/64".
	Cidr string `json:"cidr"`
	// Except is a slice of CIDRs that should not be included within an IP Block Valid examples are "192.
	// 168.1.1/24" or "2001:db9::/64" Except values will be rejected if they are outside the CIDR range.
	Except []string `json:"except"`
}

// GetCidr returns the value of Cidr.
func (s *IoK8sAPINetworkingV1IPBlock) GetCidr() string {
	return s.Cidr
}

// GetExcept returns the value of Except.
func (s *IoK8sAPINetworkingV1IPBlock) GetExcept() []string {
	return s.Except
}

// SetCidr sets the value of Cidr.
func (s *IoK8sAPINetworkingV1IPBlock) SetCidr(val string) {
	s.Cidr = val
}

// SetExcept sets the value of Except.
func (s *IoK8sAPINetworkingV1IPBlock) SetExcept(val []string) {
	s.Except = val
}

// Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by
// a backend. An Ingress can be configured to give services externally-reachable urls, load balance
// traffic, terminate SSL, offer name based virtual hosting etc.
// Ref: #/components/schemas/io.k8s.api.networking.v1.Ingress
type IoK8sAPINetworkingV1Ingress struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                   `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata"`
	Spec     OptIoK8sAPINetworkingV1IngressSpec          `json:"spec"`
	Status   OptIoK8sAPINetworkingV1IngressStatus        `json:"status"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPINetworkingV1Ingress) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sAPINetworkingV1Ingress) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPINetworkingV1Ingress) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetSpec returns the value of Spec.
func (s *IoK8sAPINetworkingV1Ingress) GetSpec() OptIoK8sAPINetworkingV1IngressSpec {
	return s.Spec
}

// GetStatus returns the value of Status.
func (s *IoK8sAPINetworkingV1Ingress) GetStatus() OptIoK8sAPINetworkingV1IngressStatus {
	return s.Status
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPINetworkingV1Ingress) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPINetworkingV1Ingress) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPINetworkingV1Ingress) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetSpec sets the value of Spec.
func (s *IoK8sAPINetworkingV1Ingress) SetSpec(val OptIoK8sAPINetworkingV1IngressSpec) {
	s.Spec = val
}

// SetStatus sets the value of Status.
func (s *IoK8sAPINetworkingV1Ingress) SetStatus(val OptIoK8sAPINetworkingV1IngressStatus) {
	s.Status = val
}

func (*IoK8sAPINetworkingV1Ingress) readNetworkingV1NamespacedIngressRes()       {}
func (*IoK8sAPINetworkingV1Ingress) readNetworkingV1NamespacedIngressStatusRes() {}

// IngressBackend describes all endpoints for a given service and port.
// Ref: #/components/schemas/io.k8s.api.networking.v1.IngressBackend
type IoK8sAPINetworkingV1IngressBackend struct {
	Resource OptIoK8sAPICoreV1TypedLocalObjectReference   `json:"resource"`
	Service  OptIoK8sAPINetworkingV1IngressServiceBackend `json:"service"`
}

// GetResource returns the value of Resource.
func (s *IoK8sAPINetworkingV1IngressBackend) GetResource() OptIoK8sAPICoreV1TypedLocalObjectReference {
	return s.Resource
}

// GetService returns the value of Service.
func (s *IoK8sAPINetworkingV1IngressBackend) GetService() OptIoK8sAPINetworkingV1IngressServiceBackend {
	return s.Service
}

// SetResource sets the value of Resource.
func (s *IoK8sAPINetworkingV1IngressBackend) SetResource(val OptIoK8sAPICoreV1TypedLocalObjectReference) {
	s.Resource = val
}

// SetService sets the value of Service.
func (s *IoK8sAPINetworkingV1IngressBackend) SetService(val OptIoK8sAPINetworkingV1IngressServiceBackend) {
	s.Service = val
}

// IngressClass represents the class of the Ingress, referenced by the Ingress Spec. The
// `ingressclass.kubernetes.io/is-default-class` annotation can be used to indicate that an
// IngressClass should be considered default. When a single IngressClass resource has this annotation
// set to true, new Ingress resources without a class specified will be assigned this default class.
// Ref: #/components/schemas/io.k8s.api.networking.v1.IngressClass
type IoK8sAPINetworkingV1IngressClass struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                   `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata"`
	Spec     OptIoK8sAPINetworkingV1IngressClassSpec     `json:"spec"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPINetworkingV1IngressClass) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sAPINetworkingV1IngressClass) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPINetworkingV1IngressClass) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetSpec returns the value of Spec.
func (s *IoK8sAPINetworkingV1IngressClass) GetSpec() OptIoK8sAPINetworkingV1IngressClassSpec {
	return s.Spec
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPINetworkingV1IngressClass) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPINetworkingV1IngressClass) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPINetworkingV1IngressClass) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetSpec sets the value of Spec.
func (s *IoK8sAPINetworkingV1IngressClass) SetSpec(val OptIoK8sAPINetworkingV1IngressClassSpec) {
	s.Spec = val
}

func (*IoK8sAPINetworkingV1IngressClass) readNetworkingV1IngressClassRes() {}

// IngressClassList is a collection of IngressClasses.
// Ref: #/components/schemas/io.k8s.api.networking.v1.IngressClassList
type IoK8sAPINetworkingV1IngressClassList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Items is the list of IngressClasses.
	Items []IoK8sAPINetworkingV1IngressClass `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPINetworkingV1IngressClassList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPINetworkingV1IngressClassList) GetItems() []IoK8sAPINetworkingV1IngressClass {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPINetworkingV1IngressClassList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPINetworkingV1IngressClassList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPINetworkingV1IngressClassList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPINetworkingV1IngressClassList) SetItems(val []IoK8sAPINetworkingV1IngressClass) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPINetworkingV1IngressClassList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPINetworkingV1IngressClassList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPINetworkingV1IngressClassList) listNetworkingV1IngressClassRes() {}

// IngressClassParametersReference identifies an API object. This can be used to specify a cluster or
// namespace-scoped resource.
// Ref: #/components/schemas/io.k8s.api.networking.v1.IngressClassParametersReference
type IoK8sAPINetworkingV1IngressClassParametersReference struct {
	// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the
	// specified Kind must be in the core API group. For any other third-party types, APIGroup is
	// required.
	ApiGroup OptString `json:"apiGroup"`
	// Kind is the type of resource being referenced.
	Kind string `json:"kind"`
	// Name is the name of resource being referenced.
	Name string `json:"name"`
	// Namespace is the namespace of the resource being referenced. This field is required when scope is
	// set to "Namespace" and must be unset when scope is set to "Cluster".
	Namespace OptString `json:"namespace"`
	// Scope represents if this refers to a cluster or namespace scoped resource. This may be set to
	// "Cluster" (default) or "Namespace". Field can be enabled with IngressClassNamespacedParams feature
	// gate.
	Scope OptString `json:"scope"`
}

// GetApiGroup returns the value of ApiGroup.
func (s *IoK8sAPINetworkingV1IngressClassParametersReference) GetApiGroup() OptString {
	return s.ApiGroup
}

// GetKind returns the value of Kind.
func (s *IoK8sAPINetworkingV1IngressClassParametersReference) GetKind() string {
	return s.Kind
}

// GetName returns the value of Name.
func (s *IoK8sAPINetworkingV1IngressClassParametersReference) GetName() string {
	return s.Name
}

// GetNamespace returns the value of Namespace.
func (s *IoK8sAPINetworkingV1IngressClassParametersReference) GetNamespace() OptString {
	return s.Namespace
}

// GetScope returns the value of Scope.
func (s *IoK8sAPINetworkingV1IngressClassParametersReference) GetScope() OptString {
	return s.Scope
}

// SetApiGroup sets the value of ApiGroup.
func (s *IoK8sAPINetworkingV1IngressClassParametersReference) SetApiGroup(val OptString) {
	s.ApiGroup = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPINetworkingV1IngressClassParametersReference) SetKind(val string) {
	s.Kind = val
}

// SetName sets the value of Name.
func (s *IoK8sAPINetworkingV1IngressClassParametersReference) SetName(val string) {
	s.Name = val
}

// SetNamespace sets the value of Namespace.
func (s *IoK8sAPINetworkingV1IngressClassParametersReference) SetNamespace(val OptString) {
	s.Namespace = val
}

// SetScope sets the value of Scope.
func (s *IoK8sAPINetworkingV1IngressClassParametersReference) SetScope(val OptString) {
	s.Scope = val
}

// IngressClassSpec provides information about the class of an Ingress.
// Ref: #/components/schemas/io.k8s.api.networking.v1.IngressClassSpec
type IoK8sAPINetworkingV1IngressClassSpec struct {
	// Controller refers to the name of the controller that should handle this class. This allows for
	// different "flavors" that are controlled by the same controller. For example, you may have
	// different Parameters for the same implementing controller. This should be specified as a
	// domain-prefixed path no more than 250 characters in length, e.g. "acme.io/ingress-controller".
	// This field is immutable.
	Controller OptString                                              `json:"controller"`
	Parameters OptIoK8sAPINetworkingV1IngressClassParametersReference `json:"parameters"`
}

// GetController returns the value of Controller.
func (s *IoK8sAPINetworkingV1IngressClassSpec) GetController() OptString {
	return s.Controller
}

// GetParameters returns the value of Parameters.
func (s *IoK8sAPINetworkingV1IngressClassSpec) GetParameters() OptIoK8sAPINetworkingV1IngressClassParametersReference {
	return s.Parameters
}

// SetController sets the value of Controller.
func (s *IoK8sAPINetworkingV1IngressClassSpec) SetController(val OptString) {
	s.Controller = val
}

// SetParameters sets the value of Parameters.
func (s *IoK8sAPINetworkingV1IngressClassSpec) SetParameters(val OptIoK8sAPINetworkingV1IngressClassParametersReference) {
	s.Parameters = val
}

// IngressList is a collection of Ingress.
// Ref: #/components/schemas/io.k8s.api.networking.v1.IngressList
type IoK8sAPINetworkingV1IngressList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Items is the list of Ingress.
	Items []IoK8sAPINetworkingV1Ingress `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPINetworkingV1IngressList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPINetworkingV1IngressList) GetItems() []IoK8sAPINetworkingV1Ingress {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPINetworkingV1IngressList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPINetworkingV1IngressList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPINetworkingV1IngressList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPINetworkingV1IngressList) SetItems(val []IoK8sAPINetworkingV1Ingress) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPINetworkingV1IngressList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPINetworkingV1IngressList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPINetworkingV1IngressList) listNetworkingV1IngressForAllNamespacesRes() {}
func (*IoK8sAPINetworkingV1IngressList) listNetworkingV1NamespacedIngressRes()       {}

// IngressRule represents the rules mapping the paths under a specified host to the related backend
// services. Incoming requests are first evaluated for a host match, then routed to the backend
// associated with the matching IngressRuleValue.
// Ref: #/components/schemas/io.k8s.api.networking.v1.IngressRule
type IoK8sAPINetworkingV1IngressRule struct {
	// Host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the
	// following deviations from the "host" part of the URI as defined in RFC 3986: 1. IPs are not
	// allowed. Currently an IngressRuleValue can only apply to
	// the IP in the Spec of the parent Ingress.
	// 2. The `:` delimiter is not respected because ports are not allowed.
	// Currently the port of an Ingress is implicitly :80 for http and
	// :443 for https.
	// Both these may change in the future. Incoming requests are matched against the host before the
	// IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the
	// specified IngressRuleValue.
	// Host can be "precise" which is a domain name without the terminating dot of a network host (e.g.
	// "foo.bar.com") or "wildcard", which is a domain name prefixed with a single wildcard label (e.g.
	// "*.foo.com"). The wildcard character '*' must appear by itself as the first DNS label and matches
	// only a single label. You cannot have a wildcard label by itself (e.g. Host == "*"). Requests will
	// be matched against the Host field in the following way: 1. If Host is precise, the request matches
	// this rule if the http host header is equal to Host. 2. If Host is a wildcard, then the request
	// matches this rule if the http host header is to equal to the suffix (removing the first label) of
	// the wildcard rule.
	Host OptString                                   `json:"host"`
	HTTP OptIoK8sAPINetworkingV1HTTPIngressRuleValue `json:"http"`
}

// GetHost returns the value of Host.
func (s *IoK8sAPINetworkingV1IngressRule) GetHost() OptString {
	return s.Host
}

// GetHTTP returns the value of HTTP.
func (s *IoK8sAPINetworkingV1IngressRule) GetHTTP() OptIoK8sAPINetworkingV1HTTPIngressRuleValue {
	return s.HTTP
}

// SetHost sets the value of Host.
func (s *IoK8sAPINetworkingV1IngressRule) SetHost(val OptString) {
	s.Host = val
}

// SetHTTP sets the value of HTTP.
func (s *IoK8sAPINetworkingV1IngressRule) SetHTTP(val OptIoK8sAPINetworkingV1HTTPIngressRuleValue) {
	s.HTTP = val
}

// IngressServiceBackend references a Kubernetes Service as a Backend.
// Ref: #/components/schemas/io.k8s.api.networking.v1.IngressServiceBackend
type IoK8sAPINetworkingV1IngressServiceBackend struct {
	// Name is the referenced service. The service must exist in the same namespace as the Ingress object.
	Name string                                    `json:"name"`
	Port OptIoK8sAPINetworkingV1ServiceBackendPort `json:"port"`
}

// GetName returns the value of Name.
func (s *IoK8sAPINetworkingV1IngressServiceBackend) GetName() string {
	return s.Name
}

// GetPort returns the value of Port.
func (s *IoK8sAPINetworkingV1IngressServiceBackend) GetPort() OptIoK8sAPINetworkingV1ServiceBackendPort {
	return s.Port
}

// SetName sets the value of Name.
func (s *IoK8sAPINetworkingV1IngressServiceBackend) SetName(val string) {
	s.Name = val
}

// SetPort sets the value of Port.
func (s *IoK8sAPINetworkingV1IngressServiceBackend) SetPort(val OptIoK8sAPINetworkingV1ServiceBackendPort) {
	s.Port = val
}

// IngressSpec describes the Ingress the user wishes to exist.
// Ref: #/components/schemas/io.k8s.api.networking.v1.IngressSpec
type IoK8sAPINetworkingV1IngressSpec struct {
	DefaultBackend OptIoK8sAPINetworkingV1IngressBackend `json:"defaultBackend"`
	// IngressClassName is the name of the IngressClass cluster resource. The associated IngressClass
	// defines which controller will implement the resource. This replaces the deprecated `kubernetes.
	// io/ingress.class` annotation. For backwards compatibility, when that annotation is set, it must be
	// given precedence over this field. The controller may emit a warning if the field and annotation
	// have different values. Implementations of this API should ignore Ingresses without a class
	// specified. An IngressClass resource may be marked as default, which can be used to set a default
	// value for this field. For more information, refer to the IngressClass documentation.
	IngressClassName OptString `json:"ingressClassName"`
	// A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all
	// traffic is sent to the default backend.
	Rules []IoK8sAPINetworkingV1IngressRule `json:"rules"`
	// TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members
	// of this list specify different hosts, they will be multiplexed on the same port according to the
	// hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress
	// supports SNI.
	TLS []IoK8sAPINetworkingV1IngressTLS `json:"tls"`
}

// GetDefaultBackend returns the value of DefaultBackend.
func (s *IoK8sAPINetworkingV1IngressSpec) GetDefaultBackend() OptIoK8sAPINetworkingV1IngressBackend {
	return s.DefaultBackend
}

// GetIngressClassName returns the value of IngressClassName.
func (s *IoK8sAPINetworkingV1IngressSpec) GetIngressClassName() OptString {
	return s.IngressClassName
}

// GetRules returns the value of Rules.
func (s *IoK8sAPINetworkingV1IngressSpec) GetRules() []IoK8sAPINetworkingV1IngressRule {
	return s.Rules
}

// GetTLS returns the value of TLS.
func (s *IoK8sAPINetworkingV1IngressSpec) GetTLS() []IoK8sAPINetworkingV1IngressTLS {
	return s.TLS
}

// SetDefaultBackend sets the value of DefaultBackend.
func (s *IoK8sAPINetworkingV1IngressSpec) SetDefaultBackend(val OptIoK8sAPINetworkingV1IngressBackend) {
	s.DefaultBackend = val
}

// SetIngressClassName sets the value of IngressClassName.
func (s *IoK8sAPINetworkingV1IngressSpec) SetIngressClassName(val OptString) {
	s.IngressClassName = val
}

// SetRules sets the value of Rules.
func (s *IoK8sAPINetworkingV1IngressSpec) SetRules(val []IoK8sAPINetworkingV1IngressRule) {
	s.Rules = val
}

// SetTLS sets the value of TLS.
func (s *IoK8sAPINetworkingV1IngressSpec) SetTLS(val []IoK8sAPINetworkingV1IngressTLS) {
	s.TLS = val
}

// IngressStatus describe the current state of the Ingress.
// Ref: #/components/schemas/io.k8s.api.networking.v1.IngressStatus
type IoK8sAPINetworkingV1IngressStatus struct {
	LoadBalancer OptIoK8sAPICoreV1LoadBalancerStatus `json:"loadBalancer"`
}

// GetLoadBalancer returns the value of LoadBalancer.
func (s *IoK8sAPINetworkingV1IngressStatus) GetLoadBalancer() OptIoK8sAPICoreV1LoadBalancerStatus {
	return s.LoadBalancer
}

// SetLoadBalancer sets the value of LoadBalancer.
func (s *IoK8sAPINetworkingV1IngressStatus) SetLoadBalancer(val OptIoK8sAPICoreV1LoadBalancerStatus) {
	s.LoadBalancer = val
}

// IngressTLS describes the transport layer security associated with an Ingress.
// Ref: #/components/schemas/io.k8s.api.networking.v1.IngressTLS
type IoK8sAPINetworkingV1IngressTLS struct {
	// Hosts are a list of hosts included in the TLS certificate. The values in this list must match the
	// name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer
	// controller fulfilling this Ingress, if left unspecified.
	Hosts []string `json:"hosts"`
	// SecretName is the name of the secret used to terminate TLS traffic on port 443. Field is left
	// optional to allow TLS routing based on SNI hostname alone. If the SNI host in a listener conflicts
	// with the "Host" header field used by an IngressRule, the SNI host is used for termination and
	// value of the Host header is used for routing.
	SecretName OptString `json:"secretName"`
}

// GetHosts returns the value of Hosts.
func (s *IoK8sAPINetworkingV1IngressTLS) GetHosts() []string {
	return s.Hosts
}

// GetSecretName returns the value of SecretName.
func (s *IoK8sAPINetworkingV1IngressTLS) GetSecretName() OptString {
	return s.SecretName
}

// SetHosts sets the value of Hosts.
func (s *IoK8sAPINetworkingV1IngressTLS) SetHosts(val []string) {
	s.Hosts = val
}

// SetSecretName sets the value of SecretName.
func (s *IoK8sAPINetworkingV1IngressTLS) SetSecretName(val OptString) {
	s.SecretName = val
}

// NetworkPolicy describes what network traffic is allowed for a set of Pods.
// Ref: #/components/schemas/io.k8s.api.networking.v1.NetworkPolicy
type IoK8sAPINetworkingV1NetworkPolicy struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                   `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata"`
	Spec     OptIoK8sAPINetworkingV1NetworkPolicySpec    `json:"spec"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPINetworkingV1NetworkPolicy) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sAPINetworkingV1NetworkPolicy) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPINetworkingV1NetworkPolicy) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetSpec returns the value of Spec.
func (s *IoK8sAPINetworkingV1NetworkPolicy) GetSpec() OptIoK8sAPINetworkingV1NetworkPolicySpec {
	return s.Spec
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPINetworkingV1NetworkPolicy) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPINetworkingV1NetworkPolicy) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPINetworkingV1NetworkPolicy) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetSpec sets the value of Spec.
func (s *IoK8sAPINetworkingV1NetworkPolicy) SetSpec(val OptIoK8sAPINetworkingV1NetworkPolicySpec) {
	s.Spec = val
}

func (*IoK8sAPINetworkingV1NetworkPolicy) readNetworkingV1NamespacedNetworkPolicyRes() {}

// NetworkPolicyEgressRule describes a particular set of traffic that is allowed out of pods matched
// by a NetworkPolicySpec's podSelector. The traffic must match both ports and to. This type is
// beta-level in 1.8.
// Ref: #/components/schemas/io.k8s.api.networking.v1.NetworkPolicyEgressRule
type IoK8sAPINetworkingV1NetworkPolicyEgressRule struct {
	// List of destination ports for outgoing traffic. Each item in this list is combined using a logical
	// OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by
	// port). If this field is present and contains at least one item, then this rule allows traffic only
	// if the traffic matches at least one port in the list.
	Ports []IoK8sAPINetworkingV1NetworkPolicyPort `json:"ports"`
	// List of destinations for outgoing traffic of pods selected for this rule. Items in this list are
	// combined using a logical OR operation. If this field is empty or missing, this rule matches all
	// destinations (traffic not restricted by destination). If this field is present and contains at
	// least one item, this rule allows traffic only if the traffic matches at least one item in the to
	// list.
	To []IoK8sAPINetworkingV1NetworkPolicyPeer `json:"to"`
}

// GetPorts returns the value of Ports.
func (s *IoK8sAPINetworkingV1NetworkPolicyEgressRule) GetPorts() []IoK8sAPINetworkingV1NetworkPolicyPort {
	return s.Ports
}

// GetTo returns the value of To.
func (s *IoK8sAPINetworkingV1NetworkPolicyEgressRule) GetTo() []IoK8sAPINetworkingV1NetworkPolicyPeer {
	return s.To
}

// SetPorts sets the value of Ports.
func (s *IoK8sAPINetworkingV1NetworkPolicyEgressRule) SetPorts(val []IoK8sAPINetworkingV1NetworkPolicyPort) {
	s.Ports = val
}

// SetTo sets the value of To.
func (s *IoK8sAPINetworkingV1NetworkPolicyEgressRule) SetTo(val []IoK8sAPINetworkingV1NetworkPolicyPeer) {
	s.To = val
}

// NetworkPolicyIngressRule describes a particular set of traffic that is allowed to the pods matched
// by a NetworkPolicySpec's podSelector. The traffic must match both ports and from.
// Ref: #/components/schemas/io.k8s.api.networking.v1.NetworkPolicyIngressRule
type IoK8sAPINetworkingV1NetworkPolicyIngressRule struct {
	// List of sources which should be able to access the pods selected for this rule. Items in this list
	// are combined using a logical OR operation. If this field is empty or missing, this rule matches
	// all sources (traffic not restricted by source). If this field is present and contains at least one
	// item, this rule allows traffic only if the traffic matches at least one item in the from list.
	From []IoK8sAPINetworkingV1NetworkPolicyPeer `json:"from"`
	// List of ports which should be made accessible on the pods selected for this rule. Each item in
	// this list is combined using a logical OR. If this field is empty or missing, this rule matches all
	// ports (traffic not restricted by port). If this field is present and contains at least one item,
	// then this rule allows traffic only if the traffic matches at least one port in the list.
	Ports []IoK8sAPINetworkingV1NetworkPolicyPort `json:"ports"`
}

// GetFrom returns the value of From.
func (s *IoK8sAPINetworkingV1NetworkPolicyIngressRule) GetFrom() []IoK8sAPINetworkingV1NetworkPolicyPeer {
	return s.From
}

// GetPorts returns the value of Ports.
func (s *IoK8sAPINetworkingV1NetworkPolicyIngressRule) GetPorts() []IoK8sAPINetworkingV1NetworkPolicyPort {
	return s.Ports
}

// SetFrom sets the value of From.
func (s *IoK8sAPINetworkingV1NetworkPolicyIngressRule) SetFrom(val []IoK8sAPINetworkingV1NetworkPolicyPeer) {
	s.From = val
}

// SetPorts sets the value of Ports.
func (s *IoK8sAPINetworkingV1NetworkPolicyIngressRule) SetPorts(val []IoK8sAPINetworkingV1NetworkPolicyPort) {
	s.Ports = val
}

// NetworkPolicyList is a list of NetworkPolicy objects.
// Ref: #/components/schemas/io.k8s.api.networking.v1.NetworkPolicyList
type IoK8sAPINetworkingV1NetworkPolicyList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Items is a list of schema objects.
	Items []IoK8sAPINetworkingV1NetworkPolicy `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPINetworkingV1NetworkPolicyList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPINetworkingV1NetworkPolicyList) GetItems() []IoK8sAPINetworkingV1NetworkPolicy {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPINetworkingV1NetworkPolicyList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPINetworkingV1NetworkPolicyList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPINetworkingV1NetworkPolicyList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPINetworkingV1NetworkPolicyList) SetItems(val []IoK8sAPINetworkingV1NetworkPolicy) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPINetworkingV1NetworkPolicyList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPINetworkingV1NetworkPolicyList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPINetworkingV1NetworkPolicyList) listNetworkingV1NamespacedNetworkPolicyRes()       {}
func (*IoK8sAPINetworkingV1NetworkPolicyList) listNetworkingV1NetworkPolicyForAllNamespacesRes() {}

// NetworkPolicyPeer describes a peer to allow traffic to/from. Only certain combinations of fields
// are allowed.
// Ref: #/components/schemas/io.k8s.api.networking.v1.NetworkPolicyPeer
type IoK8sAPINetworkingV1NetworkPolicyPeer struct {
	IpBlock           OptIoK8sAPINetworkingV1IPBlock                 `json:"ipBlock"`
	NamespaceSelector OptIoK8sApimachineryPkgApisMetaV1LabelSelector `json:"namespaceSelector"`
	PodSelector       OptIoK8sApimachineryPkgApisMetaV1LabelSelector `json:"podSelector"`
}

// GetIpBlock returns the value of IpBlock.
func (s *IoK8sAPINetworkingV1NetworkPolicyPeer) GetIpBlock() OptIoK8sAPINetworkingV1IPBlock {
	return s.IpBlock
}

// GetNamespaceSelector returns the value of NamespaceSelector.
func (s *IoK8sAPINetworkingV1NetworkPolicyPeer) GetNamespaceSelector() OptIoK8sApimachineryPkgApisMetaV1LabelSelector {
	return s.NamespaceSelector
}

// GetPodSelector returns the value of PodSelector.
func (s *IoK8sAPINetworkingV1NetworkPolicyPeer) GetPodSelector() OptIoK8sApimachineryPkgApisMetaV1LabelSelector {
	return s.PodSelector
}

// SetIpBlock sets the value of IpBlock.
func (s *IoK8sAPINetworkingV1NetworkPolicyPeer) SetIpBlock(val OptIoK8sAPINetworkingV1IPBlock) {
	s.IpBlock = val
}

// SetNamespaceSelector sets the value of NamespaceSelector.
func (s *IoK8sAPINetworkingV1NetworkPolicyPeer) SetNamespaceSelector(val OptIoK8sApimachineryPkgApisMetaV1LabelSelector) {
	s.NamespaceSelector = val
}

// SetPodSelector sets the value of PodSelector.
func (s *IoK8sAPINetworkingV1NetworkPolicyPeer) SetPodSelector(val OptIoK8sApimachineryPkgApisMetaV1LabelSelector) {
	s.PodSelector = val
}

// NetworkPolicyPort describes a port to allow traffic on.
// Ref: #/components/schemas/io.k8s.api.networking.v1.NetworkPolicyPort
type IoK8sAPINetworkingV1NetworkPolicyPort struct {
	// If set, indicates that the range of ports from port to endPort, inclusive, should be allowed by
	// the policy. This field cannot be defined if the port field is not defined or if the port field is
	// defined as a named (string) port. The endPort must be equal or greater than port. This feature is
	// in Beta state and is enabled by default. It can be disabled using the Feature Gate
	// "NetworkPolicyEndPort".
	EndPort OptInt32                                     `json:"endPort"`
	Port    OptIoK8sApimachineryPkgUtilIntstrIntOrString `json:"port"`
	// The protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults
	// to TCP.
	Protocol OptString `json:"protocol"`
}

// GetEndPort returns the value of EndPort.
func (s *IoK8sAPINetworkingV1NetworkPolicyPort) GetEndPort() OptInt32 {
	return s.EndPort
}

// GetPort returns the value of Port.
func (s *IoK8sAPINetworkingV1NetworkPolicyPort) GetPort() OptIoK8sApimachineryPkgUtilIntstrIntOrString {
	return s.Port
}

// GetProtocol returns the value of Protocol.
func (s *IoK8sAPINetworkingV1NetworkPolicyPort) GetProtocol() OptString {
	return s.Protocol
}

// SetEndPort sets the value of EndPort.
func (s *IoK8sAPINetworkingV1NetworkPolicyPort) SetEndPort(val OptInt32) {
	s.EndPort = val
}

// SetPort sets the value of Port.
func (s *IoK8sAPINetworkingV1NetworkPolicyPort) SetPort(val OptIoK8sApimachineryPkgUtilIntstrIntOrString) {
	s.Port = val
}

// SetProtocol sets the value of Protocol.
func (s *IoK8sAPINetworkingV1NetworkPolicyPort) SetProtocol(val OptString) {
	s.Protocol = val
}

// NetworkPolicySpec provides the specification of a NetworkPolicy.
// Ref: #/components/schemas/io.k8s.api.networking.v1.NetworkPolicySpec
type IoK8sAPINetworkingV1NetworkPolicySpec struct {
	// List of egress rules to be applied to the selected pods. Outgoing traffic is allowed if there are
	// no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the
	// traffic matches at least one egress rule across all of the NetworkPolicy objects whose podSelector
	// matches the pod. If this field is empty then this NetworkPolicy limits all outgoing traffic (and
	// serves solely to ensure that the pods it selects are isolated by default). This field is
	// beta-level in 1.8.
	Egress []IoK8sAPINetworkingV1NetworkPolicyEgressRule `json:"egress"`
	// List of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are
	// no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the
	// traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across
	// all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then
	// this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it
	// selects are isolated by default).
	Ingress     []IoK8sAPINetworkingV1NetworkPolicyIngressRule `json:"ingress"`
	PodSelector IoK8sApimachineryPkgApisMetaV1LabelSelector    `json:"podSelector"`
	// List of rule types that the NetworkPolicy relates to. Valid options are ["Ingress"], ["Egress"],
	// or ["Ingress", "Egress"]. If this field is not specified, it will default based on the existence
	// of Ingress or Egress rules; policies that contain an Egress section are assumed to affect Egress,
	// and all policies (whether or not they contain an Ingress section) are assumed to affect Ingress.
	// If you want to write an egress-only policy, you must explicitly specify policyTypes [ "Egress" ].
	// Likewise, if you want to write a policy that specifies that no egress is allowed, you must specify
	// a policyTypes value that include "Egress" (since such a policy would not include an Egress section
	// and would otherwise default to just [ "Ingress" ]). This field is beta-level in 1.8.
	PolicyTypes []string `json:"policyTypes"`
}

// GetEgress returns the value of Egress.
func (s *IoK8sAPINetworkingV1NetworkPolicySpec) GetEgress() []IoK8sAPINetworkingV1NetworkPolicyEgressRule {
	return s.Egress
}

// GetIngress returns the value of Ingress.
func (s *IoK8sAPINetworkingV1NetworkPolicySpec) GetIngress() []IoK8sAPINetworkingV1NetworkPolicyIngressRule {
	return s.Ingress
}

// GetPodSelector returns the value of PodSelector.
func (s *IoK8sAPINetworkingV1NetworkPolicySpec) GetPodSelector() IoK8sApimachineryPkgApisMetaV1LabelSelector {
	return s.PodSelector
}

// GetPolicyTypes returns the value of PolicyTypes.
func (s *IoK8sAPINetworkingV1NetworkPolicySpec) GetPolicyTypes() []string {
	return s.PolicyTypes
}

// SetEgress sets the value of Egress.
func (s *IoK8sAPINetworkingV1NetworkPolicySpec) SetEgress(val []IoK8sAPINetworkingV1NetworkPolicyEgressRule) {
	s.Egress = val
}

// SetIngress sets the value of Ingress.
func (s *IoK8sAPINetworkingV1NetworkPolicySpec) SetIngress(val []IoK8sAPINetworkingV1NetworkPolicyIngressRule) {
	s.Ingress = val
}

// SetPodSelector sets the value of PodSelector.
func (s *IoK8sAPINetworkingV1NetworkPolicySpec) SetPodSelector(val IoK8sApimachineryPkgApisMetaV1LabelSelector) {
	s.PodSelector = val
}

// SetPolicyTypes sets the value of PolicyTypes.
func (s *IoK8sAPINetworkingV1NetworkPolicySpec) SetPolicyTypes(val []string) {
	s.PolicyTypes = val
}

// ServiceBackendPort is the service port being referenced.
// Ref: #/components/schemas/io.k8s.api.networking.v1.ServiceBackendPort
type IoK8sAPINetworkingV1ServiceBackendPort struct {
	// Name is the name of the port on the Service. This is a mutually exclusive setting with "Number".
	Name OptString `json:"name"`
	// Number is the numerical port number (e.g. 80) on the Service. This is a mutually exclusive setting
	// with "Name".
	Number OptInt32 `json:"number"`
}

// GetName returns the value of Name.
func (s *IoK8sAPINetworkingV1ServiceBackendPort) GetName() OptString {
	return s.Name
}

// GetNumber returns the value of Number.
func (s *IoK8sAPINetworkingV1ServiceBackendPort) GetNumber() OptInt32 {
	return s.Number
}

// SetName sets the value of Name.
func (s *IoK8sAPINetworkingV1ServiceBackendPort) SetName(val OptString) {
	s.Name = val
}

// SetNumber sets the value of Number.
func (s *IoK8sAPINetworkingV1ServiceBackendPort) SetNumber(val OptInt32) {
	s.Number = val
}

// Overhead structure represents the resource overhead associated with running a pod.
// Ref: #/components/schemas/io.k8s.api.node.v1.Overhead
type IoK8sAPINodeV1Overhead struct {
	// PodFixed represents the fixed resource overhead associated with running a pod.
	PodFixed OptIoK8sAPINodeV1OverheadPodFixed `json:"podFixed"`
}

// GetPodFixed returns the value of PodFixed.
func (s *IoK8sAPINodeV1Overhead) GetPodFixed() OptIoK8sAPINodeV1OverheadPodFixed {
	return s.PodFixed
}

// SetPodFixed sets the value of PodFixed.
func (s *IoK8sAPINodeV1Overhead) SetPodFixed(val OptIoK8sAPINodeV1OverheadPodFixed) {
	s.PodFixed = val
}

// PodFixed represents the fixed resource overhead associated with running a pod.
type IoK8sAPINodeV1OverheadPodFixed map[string]IoK8sApimachineryPkgAPIResourceQuantity

func (s *IoK8sAPINodeV1OverheadPodFixed) init() IoK8sAPINodeV1OverheadPodFixed {
	m := *s
	if m == nil {
		m = map[string]IoK8sApimachineryPkgAPIResourceQuantity{}
		*s = m
	}
	return m
}

// RuntimeClass defines a class of container runtime supported in the cluster. The RuntimeClass is
// used to determine which container runtime is used to run all containers in a pod. RuntimeClasses
// are manually defined by a user or cluster provisioner, and referenced in the PodSpec. The Kubelet
// is responsible for resolving the RuntimeClassName reference before running the pod.  For more
// details, see https://kubernetes.io/docs/concepts/containers/runtime-class/.
// Ref: #/components/schemas/io.k8s.api.node.v1.RuntimeClass
type IoK8sAPINodeV1RuntimeClass struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Handler specifies the underlying runtime and configuration that the CRI implementation will use to
	// handle pods of this class. The possible values are specific to the node & CRI configuration.  It
	// is assumed that all handlers are available on every node, and handlers of the same name are
	// equivalent on every node. For example, a handler called "runc" might specify that the runc OCI
	// runtime (using native Linux containers) will be used to run the containers in a pod. The Handler
	// must be lowercase, conform to the DNS Label (RFC 1123) requirements, and is immutable.
	Handler string `json:"handler"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind       OptString                                   `json:"kind"`
	Metadata   OptIoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata"`
	Overhead   OptIoK8sAPINodeV1Overhead                   `json:"overhead"`
	Scheduling OptIoK8sAPINodeV1Scheduling                 `json:"scheduling"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPINodeV1RuntimeClass) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetHandler returns the value of Handler.
func (s *IoK8sAPINodeV1RuntimeClass) GetHandler() string {
	return s.Handler
}

// GetKind returns the value of Kind.
func (s *IoK8sAPINodeV1RuntimeClass) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPINodeV1RuntimeClass) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetOverhead returns the value of Overhead.
func (s *IoK8sAPINodeV1RuntimeClass) GetOverhead() OptIoK8sAPINodeV1Overhead {
	return s.Overhead
}

// GetScheduling returns the value of Scheduling.
func (s *IoK8sAPINodeV1RuntimeClass) GetScheduling() OptIoK8sAPINodeV1Scheduling {
	return s.Scheduling
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPINodeV1RuntimeClass) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetHandler sets the value of Handler.
func (s *IoK8sAPINodeV1RuntimeClass) SetHandler(val string) {
	s.Handler = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPINodeV1RuntimeClass) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPINodeV1RuntimeClass) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetOverhead sets the value of Overhead.
func (s *IoK8sAPINodeV1RuntimeClass) SetOverhead(val OptIoK8sAPINodeV1Overhead) {
	s.Overhead = val
}

// SetScheduling sets the value of Scheduling.
func (s *IoK8sAPINodeV1RuntimeClass) SetScheduling(val OptIoK8sAPINodeV1Scheduling) {
	s.Scheduling = val
}

func (*IoK8sAPINodeV1RuntimeClass) readNodeV1RuntimeClassRes() {}

// RuntimeClassList is a list of RuntimeClass objects.
// Ref: #/components/schemas/io.k8s.api.node.v1.RuntimeClassList
type IoK8sAPINodeV1RuntimeClassList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Items is a list of schema objects.
	Items []IoK8sAPINodeV1RuntimeClass `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPINodeV1RuntimeClassList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPINodeV1RuntimeClassList) GetItems() []IoK8sAPINodeV1RuntimeClass {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPINodeV1RuntimeClassList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPINodeV1RuntimeClassList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPINodeV1RuntimeClassList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPINodeV1RuntimeClassList) SetItems(val []IoK8sAPINodeV1RuntimeClass) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPINodeV1RuntimeClassList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPINodeV1RuntimeClassList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPINodeV1RuntimeClassList) listNodeV1RuntimeClassRes() {}

// Scheduling specifies the scheduling constraints for nodes supporting a RuntimeClass.
// Ref: #/components/schemas/io.k8s.api.node.v1.Scheduling
type IoK8sAPINodeV1Scheduling struct {
	// NodeSelector lists labels that must be present on nodes that support this RuntimeClass. Pods using
	// this RuntimeClass can only be scheduled to a node matched by this selector. The RuntimeClass
	// nodeSelector is merged with a pod's existing nodeSelector. Any conflicts will cause the pod to be
	// rejected in admission.
	NodeSelector OptIoK8sAPINodeV1SchedulingNodeSelector `json:"nodeSelector"`
	// Tolerations are appended (excluding duplicates) to pods running with this RuntimeClass during
	// admission, effectively unioning the set of nodes tolerated by the pod and the RuntimeClass.
	Tolerations []IoK8sAPICoreV1Toleration `json:"tolerations"`
}

// GetNodeSelector returns the value of NodeSelector.
func (s *IoK8sAPINodeV1Scheduling) GetNodeSelector() OptIoK8sAPINodeV1SchedulingNodeSelector {
	return s.NodeSelector
}

// GetTolerations returns the value of Tolerations.
func (s *IoK8sAPINodeV1Scheduling) GetTolerations() []IoK8sAPICoreV1Toleration {
	return s.Tolerations
}

// SetNodeSelector sets the value of NodeSelector.
func (s *IoK8sAPINodeV1Scheduling) SetNodeSelector(val OptIoK8sAPINodeV1SchedulingNodeSelector) {
	s.NodeSelector = val
}

// SetTolerations sets the value of Tolerations.
func (s *IoK8sAPINodeV1Scheduling) SetTolerations(val []IoK8sAPICoreV1Toleration) {
	s.Tolerations = val
}

// NodeSelector lists labels that must be present on nodes that support this RuntimeClass. Pods using
// this RuntimeClass can only be scheduled to a node matched by this selector. The RuntimeClass
// nodeSelector is merged with a pod's existing nodeSelector. Any conflicts will cause the pod to be
// rejected in admission.
type IoK8sAPINodeV1SchedulingNodeSelector map[string]string

func (s *IoK8sAPINodeV1SchedulingNodeSelector) init() IoK8sAPINodeV1SchedulingNodeSelector {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Overhead structure represents the resource overhead associated with running a pod.
// Ref: #/components/schemas/io.k8s.api.node.v1alpha1.Overhead
type IoK8sAPINodeV1alpha1Overhead struct {
	// PodFixed represents the fixed resource overhead associated with running a pod.
	PodFixed OptIoK8sAPINodeV1alpha1OverheadPodFixed `json:"podFixed"`
}

// GetPodFixed returns the value of PodFixed.
func (s *IoK8sAPINodeV1alpha1Overhead) GetPodFixed() OptIoK8sAPINodeV1alpha1OverheadPodFixed {
	return s.PodFixed
}

// SetPodFixed sets the value of PodFixed.
func (s *IoK8sAPINodeV1alpha1Overhead) SetPodFixed(val OptIoK8sAPINodeV1alpha1OverheadPodFixed) {
	s.PodFixed = val
}

// PodFixed represents the fixed resource overhead associated with running a pod.
type IoK8sAPINodeV1alpha1OverheadPodFixed map[string]IoK8sApimachineryPkgAPIResourceQuantity

func (s *IoK8sAPINodeV1alpha1OverheadPodFixed) init() IoK8sAPINodeV1alpha1OverheadPodFixed {
	m := *s
	if m == nil {
		m = map[string]IoK8sApimachineryPkgAPIResourceQuantity{}
		*s = m
	}
	return m
}

// RuntimeClass defines a class of container runtime supported in the cluster. The RuntimeClass is
// used to determine which container runtime is used to run all containers in a pod. RuntimeClasses
// are (currently) manually defined by a user or cluster provisioner, and referenced in the PodSpec.
// The Kubelet is responsible for resolving the RuntimeClassName reference before running the pod.
// For more details, see https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class.
// Ref: #/components/schemas/io.k8s.api.node.v1alpha1.RuntimeClass
type IoK8sAPINodeV1alpha1RuntimeClass struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                   `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata"`
	Spec     IoK8sAPINodeV1alpha1RuntimeClassSpec        `json:"spec"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPINodeV1alpha1RuntimeClass) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sAPINodeV1alpha1RuntimeClass) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPINodeV1alpha1RuntimeClass) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetSpec returns the value of Spec.
func (s *IoK8sAPINodeV1alpha1RuntimeClass) GetSpec() IoK8sAPINodeV1alpha1RuntimeClassSpec {
	return s.Spec
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPINodeV1alpha1RuntimeClass) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPINodeV1alpha1RuntimeClass) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPINodeV1alpha1RuntimeClass) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetSpec sets the value of Spec.
func (s *IoK8sAPINodeV1alpha1RuntimeClass) SetSpec(val IoK8sAPINodeV1alpha1RuntimeClassSpec) {
	s.Spec = val
}

func (*IoK8sAPINodeV1alpha1RuntimeClass) readNodeV1alpha1RuntimeClassRes() {}

// RuntimeClassList is a list of RuntimeClass objects.
// Ref: #/components/schemas/io.k8s.api.node.v1alpha1.RuntimeClassList
type IoK8sAPINodeV1alpha1RuntimeClassList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Items is a list of schema objects.
	Items []IoK8sAPINodeV1alpha1RuntimeClass `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPINodeV1alpha1RuntimeClassList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPINodeV1alpha1RuntimeClassList) GetItems() []IoK8sAPINodeV1alpha1RuntimeClass {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPINodeV1alpha1RuntimeClassList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPINodeV1alpha1RuntimeClassList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPINodeV1alpha1RuntimeClassList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPINodeV1alpha1RuntimeClassList) SetItems(val []IoK8sAPINodeV1alpha1RuntimeClass) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPINodeV1alpha1RuntimeClassList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPINodeV1alpha1RuntimeClassList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPINodeV1alpha1RuntimeClassList) listNodeV1alpha1RuntimeClassRes() {}

// RuntimeClassSpec is a specification of a RuntimeClass. It contains parameters that are required to
// describe the RuntimeClass to the Container Runtime Interface (CRI) implementation, as well as any
// other components that need to understand how the pod will be run. The RuntimeClassSpec is
// immutable.
// Ref: #/components/schemas/io.k8s.api.node.v1alpha1.RuntimeClassSpec
type IoK8sAPINodeV1alpha1RuntimeClassSpec struct {
	Overhead OptIoK8sAPINodeV1alpha1Overhead `json:"overhead"`
	// RuntimeHandler specifies the underlying runtime and configuration that the CRI implementation will
	// use to handle pods of this class. The possible values are specific to the node & CRI configuration.
	//   It is assumed that all handlers are available on every node, and handlers of the same name are
	// equivalent on every node. For example, a handler called "runc" might specify that the runc OCI
	// runtime (using native Linux containers) will be used to run the containers in a pod. The
	// RuntimeHandler must be lowercase, conform to the DNS Label (RFC 1123) requirements, and is
	// immutable.
	RuntimeHandler string                            `json:"runtimeHandler"`
	Scheduling     OptIoK8sAPINodeV1alpha1Scheduling `json:"scheduling"`
}

// GetOverhead returns the value of Overhead.
func (s *IoK8sAPINodeV1alpha1RuntimeClassSpec) GetOverhead() OptIoK8sAPINodeV1alpha1Overhead {
	return s.Overhead
}

// GetRuntimeHandler returns the value of RuntimeHandler.
func (s *IoK8sAPINodeV1alpha1RuntimeClassSpec) GetRuntimeHandler() string {
	return s.RuntimeHandler
}

// GetScheduling returns the value of Scheduling.
func (s *IoK8sAPINodeV1alpha1RuntimeClassSpec) GetScheduling() OptIoK8sAPINodeV1alpha1Scheduling {
	return s.Scheduling
}

// SetOverhead sets the value of Overhead.
func (s *IoK8sAPINodeV1alpha1RuntimeClassSpec) SetOverhead(val OptIoK8sAPINodeV1alpha1Overhead) {
	s.Overhead = val
}

// SetRuntimeHandler sets the value of RuntimeHandler.
func (s *IoK8sAPINodeV1alpha1RuntimeClassSpec) SetRuntimeHandler(val string) {
	s.RuntimeHandler = val
}

// SetScheduling sets the value of Scheduling.
func (s *IoK8sAPINodeV1alpha1RuntimeClassSpec) SetScheduling(val OptIoK8sAPINodeV1alpha1Scheduling) {
	s.Scheduling = val
}

// Scheduling specifies the scheduling constraints for nodes supporting a RuntimeClass.
// Ref: #/components/schemas/io.k8s.api.node.v1alpha1.Scheduling
type IoK8sAPINodeV1alpha1Scheduling struct {
	// NodeSelector lists labels that must be present on nodes that support this RuntimeClass. Pods using
	// this RuntimeClass can only be scheduled to a node matched by this selector. The RuntimeClass
	// nodeSelector is merged with a pod's existing nodeSelector. Any conflicts will cause the pod to be
	// rejected in admission.
	NodeSelector OptIoK8sAPINodeV1alpha1SchedulingNodeSelector `json:"nodeSelector"`
	// Tolerations are appended (excluding duplicates) to pods running with this RuntimeClass during
	// admission, effectively unioning the set of nodes tolerated by the pod and the RuntimeClass.
	Tolerations []IoK8sAPICoreV1Toleration `json:"tolerations"`
}

// GetNodeSelector returns the value of NodeSelector.
func (s *IoK8sAPINodeV1alpha1Scheduling) GetNodeSelector() OptIoK8sAPINodeV1alpha1SchedulingNodeSelector {
	return s.NodeSelector
}

// GetTolerations returns the value of Tolerations.
func (s *IoK8sAPINodeV1alpha1Scheduling) GetTolerations() []IoK8sAPICoreV1Toleration {
	return s.Tolerations
}

// SetNodeSelector sets the value of NodeSelector.
func (s *IoK8sAPINodeV1alpha1Scheduling) SetNodeSelector(val OptIoK8sAPINodeV1alpha1SchedulingNodeSelector) {
	s.NodeSelector = val
}

// SetTolerations sets the value of Tolerations.
func (s *IoK8sAPINodeV1alpha1Scheduling) SetTolerations(val []IoK8sAPICoreV1Toleration) {
	s.Tolerations = val
}

// NodeSelector lists labels that must be present on nodes that support this RuntimeClass. Pods using
// this RuntimeClass can only be scheduled to a node matched by this selector. The RuntimeClass
// nodeSelector is merged with a pod's existing nodeSelector. Any conflicts will cause the pod to be
// rejected in admission.
type IoK8sAPINodeV1alpha1SchedulingNodeSelector map[string]string

func (s *IoK8sAPINodeV1alpha1SchedulingNodeSelector) init() IoK8sAPINodeV1alpha1SchedulingNodeSelector {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Overhead structure represents the resource overhead associated with running a pod.
// Ref: #/components/schemas/io.k8s.api.node.v1beta1.Overhead
type IoK8sAPINodeV1beta1Overhead struct {
	// PodFixed represents the fixed resource overhead associated with running a pod.
	PodFixed OptIoK8sAPINodeV1beta1OverheadPodFixed `json:"podFixed"`
}

// GetPodFixed returns the value of PodFixed.
func (s *IoK8sAPINodeV1beta1Overhead) GetPodFixed() OptIoK8sAPINodeV1beta1OverheadPodFixed {
	return s.PodFixed
}

// SetPodFixed sets the value of PodFixed.
func (s *IoK8sAPINodeV1beta1Overhead) SetPodFixed(val OptIoK8sAPINodeV1beta1OverheadPodFixed) {
	s.PodFixed = val
}

// PodFixed represents the fixed resource overhead associated with running a pod.
type IoK8sAPINodeV1beta1OverheadPodFixed map[string]IoK8sApimachineryPkgAPIResourceQuantity

func (s *IoK8sAPINodeV1beta1OverheadPodFixed) init() IoK8sAPINodeV1beta1OverheadPodFixed {
	m := *s
	if m == nil {
		m = map[string]IoK8sApimachineryPkgAPIResourceQuantity{}
		*s = m
	}
	return m
}

// RuntimeClass defines a class of container runtime supported in the cluster. The RuntimeClass is
// used to determine which container runtime is used to run all containers in a pod. RuntimeClasses
// are (currently) manually defined by a user or cluster provisioner, and referenced in the PodSpec.
// The Kubelet is responsible for resolving the RuntimeClassName reference before running the pod.
// For more details, see https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class.
// Ref: #/components/schemas/io.k8s.api.node.v1beta1.RuntimeClass
type IoK8sAPINodeV1beta1RuntimeClass struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Handler specifies the underlying runtime and configuration that the CRI implementation will use to
	// handle pods of this class. The possible values are specific to the node & CRI configuration.  It
	// is assumed that all handlers are available on every node, and handlers of the same name are
	// equivalent on every node. For example, a handler called "runc" might specify that the runc OCI
	// runtime (using native Linux containers) will be used to run the containers in a pod. The Handler
	// must be lowercase, conform to the DNS Label (RFC 1123) requirements, and is immutable.
	Handler string `json:"handler"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind       OptString                                   `json:"kind"`
	Metadata   OptIoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata"`
	Overhead   OptIoK8sAPINodeV1beta1Overhead              `json:"overhead"`
	Scheduling OptIoK8sAPINodeV1beta1Scheduling            `json:"scheduling"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPINodeV1beta1RuntimeClass) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetHandler returns the value of Handler.
func (s *IoK8sAPINodeV1beta1RuntimeClass) GetHandler() string {
	return s.Handler
}

// GetKind returns the value of Kind.
func (s *IoK8sAPINodeV1beta1RuntimeClass) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPINodeV1beta1RuntimeClass) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetOverhead returns the value of Overhead.
func (s *IoK8sAPINodeV1beta1RuntimeClass) GetOverhead() OptIoK8sAPINodeV1beta1Overhead {
	return s.Overhead
}

// GetScheduling returns the value of Scheduling.
func (s *IoK8sAPINodeV1beta1RuntimeClass) GetScheduling() OptIoK8sAPINodeV1beta1Scheduling {
	return s.Scheduling
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPINodeV1beta1RuntimeClass) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetHandler sets the value of Handler.
func (s *IoK8sAPINodeV1beta1RuntimeClass) SetHandler(val string) {
	s.Handler = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPINodeV1beta1RuntimeClass) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPINodeV1beta1RuntimeClass) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetOverhead sets the value of Overhead.
func (s *IoK8sAPINodeV1beta1RuntimeClass) SetOverhead(val OptIoK8sAPINodeV1beta1Overhead) {
	s.Overhead = val
}

// SetScheduling sets the value of Scheduling.
func (s *IoK8sAPINodeV1beta1RuntimeClass) SetScheduling(val OptIoK8sAPINodeV1beta1Scheduling) {
	s.Scheduling = val
}

func (*IoK8sAPINodeV1beta1RuntimeClass) readNodeV1beta1RuntimeClassRes() {}

// RuntimeClassList is a list of RuntimeClass objects.
// Ref: #/components/schemas/io.k8s.api.node.v1beta1.RuntimeClassList
type IoK8sAPINodeV1beta1RuntimeClassList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Items is a list of schema objects.
	Items []IoK8sAPINodeV1beta1RuntimeClass `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPINodeV1beta1RuntimeClassList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPINodeV1beta1RuntimeClassList) GetItems() []IoK8sAPINodeV1beta1RuntimeClass {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPINodeV1beta1RuntimeClassList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPINodeV1beta1RuntimeClassList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPINodeV1beta1RuntimeClassList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPINodeV1beta1RuntimeClassList) SetItems(val []IoK8sAPINodeV1beta1RuntimeClass) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPINodeV1beta1RuntimeClassList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPINodeV1beta1RuntimeClassList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPINodeV1beta1RuntimeClassList) listNodeV1beta1RuntimeClassRes() {}

// Scheduling specifies the scheduling constraints for nodes supporting a RuntimeClass.
// Ref: #/components/schemas/io.k8s.api.node.v1beta1.Scheduling
type IoK8sAPINodeV1beta1Scheduling struct {
	// NodeSelector lists labels that must be present on nodes that support this RuntimeClass. Pods using
	// this RuntimeClass can only be scheduled to a node matched by this selector. The RuntimeClass
	// nodeSelector is merged with a pod's existing nodeSelector. Any conflicts will cause the pod to be
	// rejected in admission.
	NodeSelector OptIoK8sAPINodeV1beta1SchedulingNodeSelector `json:"nodeSelector"`
	// Tolerations are appended (excluding duplicates) to pods running with this RuntimeClass during
	// admission, effectively unioning the set of nodes tolerated by the pod and the RuntimeClass.
	Tolerations []IoK8sAPICoreV1Toleration `json:"tolerations"`
}

// GetNodeSelector returns the value of NodeSelector.
func (s *IoK8sAPINodeV1beta1Scheduling) GetNodeSelector() OptIoK8sAPINodeV1beta1SchedulingNodeSelector {
	return s.NodeSelector
}

// GetTolerations returns the value of Tolerations.
func (s *IoK8sAPINodeV1beta1Scheduling) GetTolerations() []IoK8sAPICoreV1Toleration {
	return s.Tolerations
}

// SetNodeSelector sets the value of NodeSelector.
func (s *IoK8sAPINodeV1beta1Scheduling) SetNodeSelector(val OptIoK8sAPINodeV1beta1SchedulingNodeSelector) {
	s.NodeSelector = val
}

// SetTolerations sets the value of Tolerations.
func (s *IoK8sAPINodeV1beta1Scheduling) SetTolerations(val []IoK8sAPICoreV1Toleration) {
	s.Tolerations = val
}

// NodeSelector lists labels that must be present on nodes that support this RuntimeClass. Pods using
// this RuntimeClass can only be scheduled to a node matched by this selector. The RuntimeClass
// nodeSelector is merged with a pod's existing nodeSelector. Any conflicts will cause the pod to be
// rejected in admission.
type IoK8sAPINodeV1beta1SchedulingNodeSelector map[string]string

func (s *IoK8sAPINodeV1beta1SchedulingNodeSelector) init() IoK8sAPINodeV1beta1SchedulingNodeSelector {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// PodDisruptionBudget is an object to define the max disruption that can be caused to a collection
// of pods.
// Ref: #/components/schemas/io.k8s.api.policy.v1.PodDisruptionBudget
type IoK8sAPIPolicyV1PodDisruptionBudget struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                    `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta  `json:"metadata"`
	Spec     OptIoK8sAPIPolicyV1PodDisruptionBudgetSpec   `json:"spec"`
	Status   OptIoK8sAPIPolicyV1PodDisruptionBudgetStatus `json:"status"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIPolicyV1PodDisruptionBudget) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIPolicyV1PodDisruptionBudget) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIPolicyV1PodDisruptionBudget) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetSpec returns the value of Spec.
func (s *IoK8sAPIPolicyV1PodDisruptionBudget) GetSpec() OptIoK8sAPIPolicyV1PodDisruptionBudgetSpec {
	return s.Spec
}

// GetStatus returns the value of Status.
func (s *IoK8sAPIPolicyV1PodDisruptionBudget) GetStatus() OptIoK8sAPIPolicyV1PodDisruptionBudgetStatus {
	return s.Status
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIPolicyV1PodDisruptionBudget) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIPolicyV1PodDisruptionBudget) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIPolicyV1PodDisruptionBudget) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetSpec sets the value of Spec.
func (s *IoK8sAPIPolicyV1PodDisruptionBudget) SetSpec(val OptIoK8sAPIPolicyV1PodDisruptionBudgetSpec) {
	s.Spec = val
}

// SetStatus sets the value of Status.
func (s *IoK8sAPIPolicyV1PodDisruptionBudget) SetStatus(val OptIoK8sAPIPolicyV1PodDisruptionBudgetStatus) {
	s.Status = val
}

func (*IoK8sAPIPolicyV1PodDisruptionBudget) readPolicyV1NamespacedPodDisruptionBudgetRes()       {}
func (*IoK8sAPIPolicyV1PodDisruptionBudget) readPolicyV1NamespacedPodDisruptionBudgetStatusRes() {}

// PodDisruptionBudgetList is a collection of PodDisruptionBudgets.
// Ref: #/components/schemas/io.k8s.api.policy.v1.PodDisruptionBudgetList
type IoK8sAPIPolicyV1PodDisruptionBudgetList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Items is a list of PodDisruptionBudgets.
	Items []IoK8sAPIPolicyV1PodDisruptionBudget `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIPolicyV1PodDisruptionBudgetList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPIPolicyV1PodDisruptionBudgetList) GetItems() []IoK8sAPIPolicyV1PodDisruptionBudget {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIPolicyV1PodDisruptionBudgetList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIPolicyV1PodDisruptionBudgetList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIPolicyV1PodDisruptionBudgetList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPIPolicyV1PodDisruptionBudgetList) SetItems(val []IoK8sAPIPolicyV1PodDisruptionBudget) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIPolicyV1PodDisruptionBudgetList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIPolicyV1PodDisruptionBudgetList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPIPolicyV1PodDisruptionBudgetList) listPolicyV1NamespacedPodDisruptionBudgetRes() {}
func (*IoK8sAPIPolicyV1PodDisruptionBudgetList) listPolicyV1PodDisruptionBudgetForAllNamespacesRes() {
}

// PodDisruptionBudgetSpec is a description of a PodDisruptionBudget.
// Ref: #/components/schemas/io.k8s.api.policy.v1.PodDisruptionBudgetSpec
type IoK8sAPIPolicyV1PodDisruptionBudgetSpec struct {
	MaxUnavailable OptIoK8sApimachineryPkgUtilIntstrIntOrString   `json:"maxUnavailable"`
	MinAvailable   OptIoK8sApimachineryPkgUtilIntstrIntOrString   `json:"minAvailable"`
	Selector       OptIoK8sApimachineryPkgApisMetaV1LabelSelector `json:"selector"`
}

// GetMaxUnavailable returns the value of MaxUnavailable.
func (s *IoK8sAPIPolicyV1PodDisruptionBudgetSpec) GetMaxUnavailable() OptIoK8sApimachineryPkgUtilIntstrIntOrString {
	return s.MaxUnavailable
}

// GetMinAvailable returns the value of MinAvailable.
func (s *IoK8sAPIPolicyV1PodDisruptionBudgetSpec) GetMinAvailable() OptIoK8sApimachineryPkgUtilIntstrIntOrString {
	return s.MinAvailable
}

// GetSelector returns the value of Selector.
func (s *IoK8sAPIPolicyV1PodDisruptionBudgetSpec) GetSelector() OptIoK8sApimachineryPkgApisMetaV1LabelSelector {
	return s.Selector
}

// SetMaxUnavailable sets the value of MaxUnavailable.
func (s *IoK8sAPIPolicyV1PodDisruptionBudgetSpec) SetMaxUnavailable(val OptIoK8sApimachineryPkgUtilIntstrIntOrString) {
	s.MaxUnavailable = val
}

// SetMinAvailable sets the value of MinAvailable.
func (s *IoK8sAPIPolicyV1PodDisruptionBudgetSpec) SetMinAvailable(val OptIoK8sApimachineryPkgUtilIntstrIntOrString) {
	s.MinAvailable = val
}

// SetSelector sets the value of Selector.
func (s *IoK8sAPIPolicyV1PodDisruptionBudgetSpec) SetSelector(val OptIoK8sApimachineryPkgApisMetaV1LabelSelector) {
	s.Selector = val
}

// PodDisruptionBudgetStatus represents information about the status of a PodDisruptionBudget. Status
// may trail the actual state of a system.
// Ref: #/components/schemas/io.k8s.api.policy.v1.PodDisruptionBudgetStatus
type IoK8sAPIPolicyV1PodDisruptionBudgetStatus struct {
	// Conditions contain conditions for PDB. The disruption controller sets the DisruptionAllowed
	// condition. The following are known values for the reason field (additional reasons could be added
	// in the future): - SyncFailed: The controller encountered an error and wasn't able to compute
	// the number of allowed disruptions. Therefore no disruptions are
	// allowed and the status of the condition will be False.
	// - InsufficientPods: The number of pods are either at or below the number
	// required by the PodDisruptionBudget. No disruptions are
	// allowed and the status of the condition will be False.
	// - SufficientPods: There are more pods than required by the PodDisruptionBudget.
	// The condition will be True, and the number of allowed
	// disruptions are provided by the disruptionsAllowed property.
	Conditions []IoK8sApimachineryPkgApisMetaV1Condition `json:"conditions"`
	// Current number of healthy pods.
	CurrentHealthy int32 `json:"currentHealthy"`
	// Minimum desired number of healthy pods.
	DesiredHealthy int32 `json:"desiredHealthy"`
	// DisruptedPods contains information about pods whose eviction was processed by the API server
	// eviction subresource handler but has not yet been observed by the PodDisruptionBudget controller.
	// A pod will be in this map from the time when the API server processed the eviction request to the
	// time when the pod is seen by PDB controller as having been marked for deletion (or after a
	// timeout). The key in the map is the name of the pod and the value is the time when the API server
	// processed the eviction request. If the deletion didn't occur and a pod is still there it will be
	// removed from the list automatically by PodDisruptionBudget controller after some time. If
	// everything goes smooth this map should be empty for the most of the time. Large number of entries
	// in the map may indicate problems with pod deletions.
	DisruptedPods OptIoK8sAPIPolicyV1PodDisruptionBudgetStatusDisruptedPods `json:"disruptedPods"`
	// Number of pod disruptions that are currently allowed.
	DisruptionsAllowed int32 `json:"disruptionsAllowed"`
	// Total number of pods counted by this disruption budget.
	ExpectedPods int32 `json:"expectedPods"`
	// Most recent generation observed when updating this PDB status. DisruptionsAllowed and other status
	// information is valid only if observedGeneration equals to PDB's object generation.
	ObservedGeneration OptInt64 `json:"observedGeneration"`
}

// GetConditions returns the value of Conditions.
func (s *IoK8sAPIPolicyV1PodDisruptionBudgetStatus) GetConditions() []IoK8sApimachineryPkgApisMetaV1Condition {
	return s.Conditions
}

// GetCurrentHealthy returns the value of CurrentHealthy.
func (s *IoK8sAPIPolicyV1PodDisruptionBudgetStatus) GetCurrentHealthy() int32 {
	return s.CurrentHealthy
}

// GetDesiredHealthy returns the value of DesiredHealthy.
func (s *IoK8sAPIPolicyV1PodDisruptionBudgetStatus) GetDesiredHealthy() int32 {
	return s.DesiredHealthy
}

// GetDisruptedPods returns the value of DisruptedPods.
func (s *IoK8sAPIPolicyV1PodDisruptionBudgetStatus) GetDisruptedPods() OptIoK8sAPIPolicyV1PodDisruptionBudgetStatusDisruptedPods {
	return s.DisruptedPods
}

// GetDisruptionsAllowed returns the value of DisruptionsAllowed.
func (s *IoK8sAPIPolicyV1PodDisruptionBudgetStatus) GetDisruptionsAllowed() int32 {
	return s.DisruptionsAllowed
}

// GetExpectedPods returns the value of ExpectedPods.
func (s *IoK8sAPIPolicyV1PodDisruptionBudgetStatus) GetExpectedPods() int32 {
	return s.ExpectedPods
}

// GetObservedGeneration returns the value of ObservedGeneration.
func (s *IoK8sAPIPolicyV1PodDisruptionBudgetStatus) GetObservedGeneration() OptInt64 {
	return s.ObservedGeneration
}

// SetConditions sets the value of Conditions.
func (s *IoK8sAPIPolicyV1PodDisruptionBudgetStatus) SetConditions(val []IoK8sApimachineryPkgApisMetaV1Condition) {
	s.Conditions = val
}

// SetCurrentHealthy sets the value of CurrentHealthy.
func (s *IoK8sAPIPolicyV1PodDisruptionBudgetStatus) SetCurrentHealthy(val int32) {
	s.CurrentHealthy = val
}

// SetDesiredHealthy sets the value of DesiredHealthy.
func (s *IoK8sAPIPolicyV1PodDisruptionBudgetStatus) SetDesiredHealthy(val int32) {
	s.DesiredHealthy = val
}

// SetDisruptedPods sets the value of DisruptedPods.
func (s *IoK8sAPIPolicyV1PodDisruptionBudgetStatus) SetDisruptedPods(val OptIoK8sAPIPolicyV1PodDisruptionBudgetStatusDisruptedPods) {
	s.DisruptedPods = val
}

// SetDisruptionsAllowed sets the value of DisruptionsAllowed.
func (s *IoK8sAPIPolicyV1PodDisruptionBudgetStatus) SetDisruptionsAllowed(val int32) {
	s.DisruptionsAllowed = val
}

// SetExpectedPods sets the value of ExpectedPods.
func (s *IoK8sAPIPolicyV1PodDisruptionBudgetStatus) SetExpectedPods(val int32) {
	s.ExpectedPods = val
}

// SetObservedGeneration sets the value of ObservedGeneration.
func (s *IoK8sAPIPolicyV1PodDisruptionBudgetStatus) SetObservedGeneration(val OptInt64) {
	s.ObservedGeneration = val
}

// DisruptedPods contains information about pods whose eviction was processed by the API server
// eviction subresource handler but has not yet been observed by the PodDisruptionBudget controller.
// A pod will be in this map from the time when the API server processed the eviction request to the
// time when the pod is seen by PDB controller as having been marked for deletion (or after a
// timeout). The key in the map is the name of the pod and the value is the time when the API server
// processed the eviction request. If the deletion didn't occur and a pod is still there it will be
// removed from the list automatically by PodDisruptionBudget controller after some time. If
// everything goes smooth this map should be empty for the most of the time. Large number of entries
// in the map may indicate problems with pod deletions.
type IoK8sAPIPolicyV1PodDisruptionBudgetStatusDisruptedPods map[string]IoK8sApimachineryPkgApisMetaV1Time

func (s *IoK8sAPIPolicyV1PodDisruptionBudgetStatusDisruptedPods) init() IoK8sAPIPolicyV1PodDisruptionBudgetStatusDisruptedPods {
	m := *s
	if m == nil {
		m = map[string]IoK8sApimachineryPkgApisMetaV1Time{}
		*s = m
	}
	return m
}

// AllowedCSIDriver represents a single inline CSI Driver that is allowed to be used.
// Ref: #/components/schemas/io.k8s.api.policy.v1beta1.AllowedCSIDriver
type IoK8sAPIPolicyV1beta1AllowedCSIDriver struct {
	// Name is the registered name of the CSI driver.
	Name string `json:"name"`
}

// GetName returns the value of Name.
func (s *IoK8sAPIPolicyV1beta1AllowedCSIDriver) GetName() string {
	return s.Name
}

// SetName sets the value of Name.
func (s *IoK8sAPIPolicyV1beta1AllowedCSIDriver) SetName(val string) {
	s.Name = val
}

// AllowedFlexVolume represents a single Flexvolume that is allowed to be used.
// Ref: #/components/schemas/io.k8s.api.policy.v1beta1.AllowedFlexVolume
type IoK8sAPIPolicyV1beta1AllowedFlexVolume struct {
	// Driver is the name of the Flexvolume driver.
	Driver string `json:"driver"`
}

// GetDriver returns the value of Driver.
func (s *IoK8sAPIPolicyV1beta1AllowedFlexVolume) GetDriver() string {
	return s.Driver
}

// SetDriver sets the value of Driver.
func (s *IoK8sAPIPolicyV1beta1AllowedFlexVolume) SetDriver(val string) {
	s.Driver = val
}

// AllowedHostPath defines the host volume conditions that will be enabled by a policy for pods to
// use. It requires the path prefix to be defined.
// Ref: #/components/schemas/io.k8s.api.policy.v1beta1.AllowedHostPath
type IoK8sAPIPolicyV1beta1AllowedHostPath struct {
	// PathPrefix is the path prefix that the host volume must match. It does not support `*`. Trailing
	// slashes are trimmed when validating the path prefix with a host path.
	// Examples: `/foo` would allow `/foo`, `/foo/` and `/foo/bar` `/foo` would not allow `/food` or
	// `/etc/foo`.
	PathPrefix OptString `json:"pathPrefix"`
	// When set to true, will allow host volumes matching the pathPrefix only if all volume mounts are
	// readOnly.
	ReadOnly OptBool `json:"readOnly"`
}

// GetPathPrefix returns the value of PathPrefix.
func (s *IoK8sAPIPolicyV1beta1AllowedHostPath) GetPathPrefix() OptString {
	return s.PathPrefix
}

// GetReadOnly returns the value of ReadOnly.
func (s *IoK8sAPIPolicyV1beta1AllowedHostPath) GetReadOnly() OptBool {
	return s.ReadOnly
}

// SetPathPrefix sets the value of PathPrefix.
func (s *IoK8sAPIPolicyV1beta1AllowedHostPath) SetPathPrefix(val OptString) {
	s.PathPrefix = val
}

// SetReadOnly sets the value of ReadOnly.
func (s *IoK8sAPIPolicyV1beta1AllowedHostPath) SetReadOnly(val OptBool) {
	s.ReadOnly = val
}

// FSGroupStrategyOptions defines the strategy type and options used to create the strategy.
// Ref: #/components/schemas/io.k8s.api.policy.v1beta1.FSGroupStrategyOptions
type IoK8sAPIPolicyV1beta1FSGroupStrategyOptions struct {
	// Ranges are the allowed ranges of fs groups.  If you would like to force a single fs group then
	// supply a single range with the same start and end. Required for MustRunAs.
	Ranges []IoK8sAPIPolicyV1beta1IDRange `json:"ranges"`
	// Rule is the strategy that will dictate what FSGroup is used in the SecurityContext.
	Rule OptString `json:"rule"`
}

// GetRanges returns the value of Ranges.
func (s *IoK8sAPIPolicyV1beta1FSGroupStrategyOptions) GetRanges() []IoK8sAPIPolicyV1beta1IDRange {
	return s.Ranges
}

// GetRule returns the value of Rule.
func (s *IoK8sAPIPolicyV1beta1FSGroupStrategyOptions) GetRule() OptString {
	return s.Rule
}

// SetRanges sets the value of Ranges.
func (s *IoK8sAPIPolicyV1beta1FSGroupStrategyOptions) SetRanges(val []IoK8sAPIPolicyV1beta1IDRange) {
	s.Ranges = val
}

// SetRule sets the value of Rule.
func (s *IoK8sAPIPolicyV1beta1FSGroupStrategyOptions) SetRule(val OptString) {
	s.Rule = val
}

// HostPortRange defines a range of host ports that will be enabled by a policy for pods to use.  It
// requires both the start and end to be defined.
// Ref: #/components/schemas/io.k8s.api.policy.v1beta1.HostPortRange
type IoK8sAPIPolicyV1beta1HostPortRange struct {
	// Max is the end of the range, inclusive.
	Max int32 `json:"max"`
	// Min is the start of the range, inclusive.
	Min int32 `json:"min"`
}

// GetMax returns the value of Max.
func (s *IoK8sAPIPolicyV1beta1HostPortRange) GetMax() int32 {
	return s.Max
}

// GetMin returns the value of Min.
func (s *IoK8sAPIPolicyV1beta1HostPortRange) GetMin() int32 {
	return s.Min
}

// SetMax sets the value of Max.
func (s *IoK8sAPIPolicyV1beta1HostPortRange) SetMax(val int32) {
	s.Max = val
}

// SetMin sets the value of Min.
func (s *IoK8sAPIPolicyV1beta1HostPortRange) SetMin(val int32) {
	s.Min = val
}

// IDRange provides a min/max of an allowed range of IDs.
// Ref: #/components/schemas/io.k8s.api.policy.v1beta1.IDRange
type IoK8sAPIPolicyV1beta1IDRange struct {
	// Max is the end of the range, inclusive.
	Max int64 `json:"max"`
	// Min is the start of the range, inclusive.
	Min int64 `json:"min"`
}

// GetMax returns the value of Max.
func (s *IoK8sAPIPolicyV1beta1IDRange) GetMax() int64 {
	return s.Max
}

// GetMin returns the value of Min.
func (s *IoK8sAPIPolicyV1beta1IDRange) GetMin() int64 {
	return s.Min
}

// SetMax sets the value of Max.
func (s *IoK8sAPIPolicyV1beta1IDRange) SetMax(val int64) {
	s.Max = val
}

// SetMin sets the value of Min.
func (s *IoK8sAPIPolicyV1beta1IDRange) SetMin(val int64) {
	s.Min = val
}

// PodDisruptionBudget is an object to define the max disruption that can be caused to a collection
// of pods.
// Ref: #/components/schemas/io.k8s.api.policy.v1beta1.PodDisruptionBudget
type IoK8sAPIPolicyV1beta1PodDisruptionBudget struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                         `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta       `json:"metadata"`
	Spec     OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec   `json:"spec"`
	Status   OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus `json:"status"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudget) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudget) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudget) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetSpec returns the value of Spec.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudget) GetSpec() OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec {
	return s.Spec
}

// GetStatus returns the value of Status.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudget) GetStatus() OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus {
	return s.Status
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudget) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudget) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudget) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetSpec sets the value of Spec.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudget) SetSpec(val OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec) {
	s.Spec = val
}

// SetStatus sets the value of Status.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudget) SetStatus(val OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus) {
	s.Status = val
}

func (*IoK8sAPIPolicyV1beta1PodDisruptionBudget) readPolicyV1beta1NamespacedPodDisruptionBudgetRes() {
}
func (*IoK8sAPIPolicyV1beta1PodDisruptionBudget) readPolicyV1beta1NamespacedPodDisruptionBudgetStatusRes() {
}

// PodDisruptionBudgetList is a collection of PodDisruptionBudgets.
// Ref: #/components/schemas/io.k8s.api.policy.v1beta1.PodDisruptionBudgetList
type IoK8sAPIPolicyV1beta1PodDisruptionBudgetList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Items list individual PodDisruptionBudget objects.
	Items []IoK8sAPIPolicyV1beta1PodDisruptionBudget `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudgetList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudgetList) GetItems() []IoK8sAPIPolicyV1beta1PodDisruptionBudget {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudgetList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudgetList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudgetList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudgetList) SetItems(val []IoK8sAPIPolicyV1beta1PodDisruptionBudget) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudgetList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudgetList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPIPolicyV1beta1PodDisruptionBudgetList) listPolicyV1beta1NamespacedPodDisruptionBudgetRes() {
}
func (*IoK8sAPIPolicyV1beta1PodDisruptionBudgetList) listPolicyV1beta1PodDisruptionBudgetForAllNamespacesRes() {
}

// PodDisruptionBudgetSpec is a description of a PodDisruptionBudget.
// Ref: #/components/schemas/io.k8s.api.policy.v1beta1.PodDisruptionBudgetSpec
type IoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec struct {
	MaxUnavailable OptIoK8sApimachineryPkgUtilIntstrIntOrString   `json:"maxUnavailable"`
	MinAvailable   OptIoK8sApimachineryPkgUtilIntstrIntOrString   `json:"minAvailable"`
	Selector       OptIoK8sApimachineryPkgApisMetaV1LabelSelector `json:"selector"`
}

// GetMaxUnavailable returns the value of MaxUnavailable.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec) GetMaxUnavailable() OptIoK8sApimachineryPkgUtilIntstrIntOrString {
	return s.MaxUnavailable
}

// GetMinAvailable returns the value of MinAvailable.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec) GetMinAvailable() OptIoK8sApimachineryPkgUtilIntstrIntOrString {
	return s.MinAvailable
}

// GetSelector returns the value of Selector.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec) GetSelector() OptIoK8sApimachineryPkgApisMetaV1LabelSelector {
	return s.Selector
}

// SetMaxUnavailable sets the value of MaxUnavailable.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec) SetMaxUnavailable(val OptIoK8sApimachineryPkgUtilIntstrIntOrString) {
	s.MaxUnavailable = val
}

// SetMinAvailable sets the value of MinAvailable.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec) SetMinAvailable(val OptIoK8sApimachineryPkgUtilIntstrIntOrString) {
	s.MinAvailable = val
}

// SetSelector sets the value of Selector.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec) SetSelector(val OptIoK8sApimachineryPkgApisMetaV1LabelSelector) {
	s.Selector = val
}

// PodDisruptionBudgetStatus represents information about the status of a PodDisruptionBudget. Status
// may trail the actual state of a system.
// Ref: #/components/schemas/io.k8s.api.policy.v1beta1.PodDisruptionBudgetStatus
type IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus struct {
	// Conditions contain conditions for PDB. The disruption controller sets the DisruptionAllowed
	// condition. The following are known values for the reason field (additional reasons could be added
	// in the future): - SyncFailed: The controller encountered an error and wasn't able to compute
	// the number of allowed disruptions. Therefore no disruptions are
	// allowed and the status of the condition will be False.
	// - InsufficientPods: The number of pods are either at or below the number
	// required by the PodDisruptionBudget. No disruptions are
	// allowed and the status of the condition will be False.
	// - SufficientPods: There are more pods than required by the PodDisruptionBudget.
	// The condition will be True, and the number of allowed
	// disruptions are provided by the disruptionsAllowed property.
	Conditions []IoK8sApimachineryPkgApisMetaV1Condition `json:"conditions"`
	// Current number of healthy pods.
	CurrentHealthy int32 `json:"currentHealthy"`
	// Minimum desired number of healthy pods.
	DesiredHealthy int32 `json:"desiredHealthy"`
	// DisruptedPods contains information about pods whose eviction was processed by the API server
	// eviction subresource handler but has not yet been observed by the PodDisruptionBudget controller.
	// A pod will be in this map from the time when the API server processed the eviction request to the
	// time when the pod is seen by PDB controller as having been marked for deletion (or after a
	// timeout). The key in the map is the name of the pod and the value is the time when the API server
	// processed the eviction request. If the deletion didn't occur and a pod is still there it will be
	// removed from the list automatically by PodDisruptionBudget controller after some time. If
	// everything goes smooth this map should be empty for the most of the time. Large number of entries
	// in the map may indicate problems with pod deletions.
	DisruptedPods OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetStatusDisruptedPods `json:"disruptedPods"`
	// Number of pod disruptions that are currently allowed.
	DisruptionsAllowed int32 `json:"disruptionsAllowed"`
	// Total number of pods counted by this disruption budget.
	ExpectedPods int32 `json:"expectedPods"`
	// Most recent generation observed when updating this PDB status. DisruptionsAllowed and other status
	// information is valid only if observedGeneration equals to PDB's object generation.
	ObservedGeneration OptInt64 `json:"observedGeneration"`
}

// GetConditions returns the value of Conditions.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus) GetConditions() []IoK8sApimachineryPkgApisMetaV1Condition {
	return s.Conditions
}

// GetCurrentHealthy returns the value of CurrentHealthy.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus) GetCurrentHealthy() int32 {
	return s.CurrentHealthy
}

// GetDesiredHealthy returns the value of DesiredHealthy.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus) GetDesiredHealthy() int32 {
	return s.DesiredHealthy
}

// GetDisruptedPods returns the value of DisruptedPods.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus) GetDisruptedPods() OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetStatusDisruptedPods {
	return s.DisruptedPods
}

// GetDisruptionsAllowed returns the value of DisruptionsAllowed.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus) GetDisruptionsAllowed() int32 {
	return s.DisruptionsAllowed
}

// GetExpectedPods returns the value of ExpectedPods.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus) GetExpectedPods() int32 {
	return s.ExpectedPods
}

// GetObservedGeneration returns the value of ObservedGeneration.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus) GetObservedGeneration() OptInt64 {
	return s.ObservedGeneration
}

// SetConditions sets the value of Conditions.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus) SetConditions(val []IoK8sApimachineryPkgApisMetaV1Condition) {
	s.Conditions = val
}

// SetCurrentHealthy sets the value of CurrentHealthy.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus) SetCurrentHealthy(val int32) {
	s.CurrentHealthy = val
}

// SetDesiredHealthy sets the value of DesiredHealthy.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus) SetDesiredHealthy(val int32) {
	s.DesiredHealthy = val
}

// SetDisruptedPods sets the value of DisruptedPods.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus) SetDisruptedPods(val OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetStatusDisruptedPods) {
	s.DisruptedPods = val
}

// SetDisruptionsAllowed sets the value of DisruptionsAllowed.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus) SetDisruptionsAllowed(val int32) {
	s.DisruptionsAllowed = val
}

// SetExpectedPods sets the value of ExpectedPods.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus) SetExpectedPods(val int32) {
	s.ExpectedPods = val
}

// SetObservedGeneration sets the value of ObservedGeneration.
func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus) SetObservedGeneration(val OptInt64) {
	s.ObservedGeneration = val
}

// DisruptedPods contains information about pods whose eviction was processed by the API server
// eviction subresource handler but has not yet been observed by the PodDisruptionBudget controller.
// A pod will be in this map from the time when the API server processed the eviction request to the
// time when the pod is seen by PDB controller as having been marked for deletion (or after a
// timeout). The key in the map is the name of the pod and the value is the time when the API server
// processed the eviction request. If the deletion didn't occur and a pod is still there it will be
// removed from the list automatically by PodDisruptionBudget controller after some time. If
// everything goes smooth this map should be empty for the most of the time. Large number of entries
// in the map may indicate problems with pod deletions.
type IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatusDisruptedPods map[string]IoK8sApimachineryPkgApisMetaV1Time

func (s *IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatusDisruptedPods) init() IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatusDisruptedPods {
	m := *s
	if m == nil {
		m = map[string]IoK8sApimachineryPkgApisMetaV1Time{}
		*s = m
	}
	return m
}

// PodSecurityPolicy governs the ability to make requests that affect the Security Context that will
// be applied to a pod and container. Deprecated in 1.21.
// Ref: #/components/schemas/io.k8s.api.policy.v1beta1.PodSecurityPolicy
type IoK8sAPIPolicyV1beta1PodSecurityPolicy struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                     `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta   `json:"metadata"`
	Spec     OptIoK8sAPIPolicyV1beta1PodSecurityPolicySpec `json:"spec"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicy) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicy) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicy) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetSpec returns the value of Spec.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicy) GetSpec() OptIoK8sAPIPolicyV1beta1PodSecurityPolicySpec {
	return s.Spec
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicy) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicy) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicy) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetSpec sets the value of Spec.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicy) SetSpec(val OptIoK8sAPIPolicyV1beta1PodSecurityPolicySpec) {
	s.Spec = val
}

func (*IoK8sAPIPolicyV1beta1PodSecurityPolicy) readPolicyV1beta1PodSecurityPolicyRes() {}

// PodSecurityPolicyList is a list of PodSecurityPolicy objects.
// Ref: #/components/schemas/io.k8s.api.policy.v1beta1.PodSecurityPolicyList
type IoK8sAPIPolicyV1beta1PodSecurityPolicyList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Items is a list of schema objects.
	Items []IoK8sAPIPolicyV1beta1PodSecurityPolicy `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicyList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicyList) GetItems() []IoK8sAPIPolicyV1beta1PodSecurityPolicy {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicyList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicyList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicyList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicyList) SetItems(val []IoK8sAPIPolicyV1beta1PodSecurityPolicy) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicyList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicyList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPIPolicyV1beta1PodSecurityPolicyList) listPolicyV1beta1PodSecurityPolicyRes() {}

// PodSecurityPolicySpec defines the policy enforced.
// Ref: #/components/schemas/io.k8s.api.policy.v1beta1.PodSecurityPolicySpec
type IoK8sAPIPolicyV1beta1PodSecurityPolicySpec struct {
	// AllowPrivilegeEscalation determines if a pod can request to allow privilege escalation. If
	// unspecified, defaults to true.
	AllowPrivilegeEscalation OptBool `json:"allowPrivilegeEscalation"`
	// AllowedCSIDrivers is an allowlist of inline CSI drivers that must be explicitly set to be embedded
	// within a pod spec. An empty value indicates that any CSI driver can be used for inline ephemeral
	// volumes. This is a beta field, and is only honored if the API server enables the CSIInlineVolume
	// feature gate.
	AllowedCSIDrivers []IoK8sAPIPolicyV1beta1AllowedCSIDriver `json:"allowedCSIDrivers"`
	// AllowedCapabilities is a list of capabilities that can be requested to add to the container.
	// Capabilities in this field may be added at the pod author's discretion. You must not list a
	// capability in both allowedCapabilities and requiredDropCapabilities.
	AllowedCapabilities []string `json:"allowedCapabilities"`
	// AllowedFlexVolumes is an allowlist of Flexvolumes.  Empty or nil indicates that all Flexvolumes
	// may be used.  This parameter is effective only when the usage of the Flexvolumes is allowed in the
	// "volumes" field.
	AllowedFlexVolumes []IoK8sAPIPolicyV1beta1AllowedFlexVolume `json:"allowedFlexVolumes"`
	// AllowedHostPaths is an allowlist of host paths. Empty indicates that all host paths may be used.
	AllowedHostPaths []IoK8sAPIPolicyV1beta1AllowedHostPath `json:"allowedHostPaths"`
	// AllowedProcMountTypes is an allowlist of allowed ProcMountTypes. Empty or nil indicates that only
	// the DefaultProcMountType may be used. This requires the ProcMountType feature flag to be enabled.
	AllowedProcMountTypes []string `json:"allowedProcMountTypes"`
	// AllowedUnsafeSysctls is a list of explicitly allowed unsafe sysctls, defaults to none. Each entry
	// is either a plain sysctl name or ends in "*" in which case it is considered as a prefix of allowed
	// sysctls. Single * means all unsafe sysctls are allowed. Kubelet has to allowlist all allowed
	// unsafe sysctls explicitly to avoid rejection.
	// Examples: e.g. "foo/*" allows "foo/bar", "foo/baz", etc. e.g. "foo.*" allows "foo.bar", "foo.baz",
	// etc.
	AllowedUnsafeSysctls []string `json:"allowedUnsafeSysctls"`
	// DefaultAddCapabilities is the default set of capabilities that will be added to the container
	// unless the pod spec specifically drops the capability.  You may not list a capability in both
	// defaultAddCapabilities and requiredDropCapabilities. Capabilities added here are implicitly
	// allowed, and need not be included in the allowedCapabilities list.
	DefaultAddCapabilities []string `json:"defaultAddCapabilities"`
	// DefaultAllowPrivilegeEscalation controls the default setting for whether a process can gain more
	// privileges than its parent process.
	DefaultAllowPrivilegeEscalation OptBool `json:"defaultAllowPrivilegeEscalation"`
	// ForbiddenSysctls is a list of explicitly forbidden sysctls, defaults to none. Each entry is either
	// a plain sysctl name or ends in "*" in which case it is considered as a prefix of forbidden sysctls.
	//  Single * means all sysctls are forbidden.
	// Examples: e.g. "foo/*" forbids "foo/bar", "foo/baz", etc. e.g. "foo.*" forbids "foo.bar", "foo.
	// baz", etc.
	ForbiddenSysctls []string                                    `json:"forbiddenSysctls"`
	FsGroup          IoK8sAPIPolicyV1beta1FSGroupStrategyOptions `json:"fsGroup"`
	// HostIPC determines if the policy allows the use of HostIPC in the pod spec.
	HostIPC OptBool `json:"hostIPC"`
	// HostNetwork determines if the policy allows the use of HostNetwork in the pod spec.
	HostNetwork OptBool `json:"hostNetwork"`
	// HostPID determines if the policy allows the use of HostPID in the pod spec.
	HostPID OptBool `json:"hostPID"`
	// HostPorts determines which host port ranges are allowed to be exposed.
	HostPorts []IoK8sAPIPolicyV1beta1HostPortRange `json:"hostPorts"`
	// Privileged determines if a pod can request to be run as privileged.
	Privileged OptBool `json:"privileged"`
	// ReadOnlyRootFilesystem when set to true will force containers to run with a read only root file
	// system.  If the container specifically requests to run with a non-read only root file system the
	// PSP should deny the pod. If set to false the container may run with a read only root file system
	// if it wishes but it will not be forced to.
	ReadOnlyRootFilesystem OptBool `json:"readOnlyRootFilesystem"`
	// RequiredDropCapabilities are the capabilities that will be dropped from the container.  These are
	// required to be dropped and cannot be added.
	RequiredDropCapabilities []string                                               `json:"requiredDropCapabilities"`
	RunAsGroup               OptIoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions      `json:"runAsGroup"`
	RunAsUser                IoK8sAPIPolicyV1beta1RunAsUserStrategyOptions          `json:"runAsUser"`
	RuntimeClass             OptIoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions    `json:"runtimeClass"`
	SeLinux                  IoK8sAPIPolicyV1beta1SELinuxStrategyOptions            `json:"seLinux"`
	SupplementalGroups       IoK8sAPIPolicyV1beta1SupplementalGroupsStrategyOptions `json:"supplementalGroups"`
	// Volumes is an allowlist of volume plugins. Empty indicates that no volumes may be used. To allow
	// all volumes you may use '*'.
	Volumes []string `json:"volumes"`
}

// GetAllowPrivilegeEscalation returns the value of AllowPrivilegeEscalation.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) GetAllowPrivilegeEscalation() OptBool {
	return s.AllowPrivilegeEscalation
}

// GetAllowedCSIDrivers returns the value of AllowedCSIDrivers.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) GetAllowedCSIDrivers() []IoK8sAPIPolicyV1beta1AllowedCSIDriver {
	return s.AllowedCSIDrivers
}

// GetAllowedCapabilities returns the value of AllowedCapabilities.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) GetAllowedCapabilities() []string {
	return s.AllowedCapabilities
}

// GetAllowedFlexVolumes returns the value of AllowedFlexVolumes.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) GetAllowedFlexVolumes() []IoK8sAPIPolicyV1beta1AllowedFlexVolume {
	return s.AllowedFlexVolumes
}

// GetAllowedHostPaths returns the value of AllowedHostPaths.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) GetAllowedHostPaths() []IoK8sAPIPolicyV1beta1AllowedHostPath {
	return s.AllowedHostPaths
}

// GetAllowedProcMountTypes returns the value of AllowedProcMountTypes.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) GetAllowedProcMountTypes() []string {
	return s.AllowedProcMountTypes
}

// GetAllowedUnsafeSysctls returns the value of AllowedUnsafeSysctls.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) GetAllowedUnsafeSysctls() []string {
	return s.AllowedUnsafeSysctls
}

// GetDefaultAddCapabilities returns the value of DefaultAddCapabilities.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) GetDefaultAddCapabilities() []string {
	return s.DefaultAddCapabilities
}

// GetDefaultAllowPrivilegeEscalation returns the value of DefaultAllowPrivilegeEscalation.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) GetDefaultAllowPrivilegeEscalation() OptBool {
	return s.DefaultAllowPrivilegeEscalation
}

// GetForbiddenSysctls returns the value of ForbiddenSysctls.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) GetForbiddenSysctls() []string {
	return s.ForbiddenSysctls
}

// GetFsGroup returns the value of FsGroup.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) GetFsGroup() IoK8sAPIPolicyV1beta1FSGroupStrategyOptions {
	return s.FsGroup
}

// GetHostIPC returns the value of HostIPC.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) GetHostIPC() OptBool {
	return s.HostIPC
}

// GetHostNetwork returns the value of HostNetwork.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) GetHostNetwork() OptBool {
	return s.HostNetwork
}

// GetHostPID returns the value of HostPID.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) GetHostPID() OptBool {
	return s.HostPID
}

// GetHostPorts returns the value of HostPorts.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) GetHostPorts() []IoK8sAPIPolicyV1beta1HostPortRange {
	return s.HostPorts
}

// GetPrivileged returns the value of Privileged.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) GetPrivileged() OptBool {
	return s.Privileged
}

// GetReadOnlyRootFilesystem returns the value of ReadOnlyRootFilesystem.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) GetReadOnlyRootFilesystem() OptBool {
	return s.ReadOnlyRootFilesystem
}

// GetRequiredDropCapabilities returns the value of RequiredDropCapabilities.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) GetRequiredDropCapabilities() []string {
	return s.RequiredDropCapabilities
}

// GetRunAsGroup returns the value of RunAsGroup.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) GetRunAsGroup() OptIoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions {
	return s.RunAsGroup
}

// GetRunAsUser returns the value of RunAsUser.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) GetRunAsUser() IoK8sAPIPolicyV1beta1RunAsUserStrategyOptions {
	return s.RunAsUser
}

// GetRuntimeClass returns the value of RuntimeClass.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) GetRuntimeClass() OptIoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions {
	return s.RuntimeClass
}

// GetSeLinux returns the value of SeLinux.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) GetSeLinux() IoK8sAPIPolicyV1beta1SELinuxStrategyOptions {
	return s.SeLinux
}

// GetSupplementalGroups returns the value of SupplementalGroups.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) GetSupplementalGroups() IoK8sAPIPolicyV1beta1SupplementalGroupsStrategyOptions {
	return s.SupplementalGroups
}

// GetVolumes returns the value of Volumes.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) GetVolumes() []string {
	return s.Volumes
}

// SetAllowPrivilegeEscalation sets the value of AllowPrivilegeEscalation.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) SetAllowPrivilegeEscalation(val OptBool) {
	s.AllowPrivilegeEscalation = val
}

// SetAllowedCSIDrivers sets the value of AllowedCSIDrivers.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) SetAllowedCSIDrivers(val []IoK8sAPIPolicyV1beta1AllowedCSIDriver) {
	s.AllowedCSIDrivers = val
}

// SetAllowedCapabilities sets the value of AllowedCapabilities.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) SetAllowedCapabilities(val []string) {
	s.AllowedCapabilities = val
}

// SetAllowedFlexVolumes sets the value of AllowedFlexVolumes.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) SetAllowedFlexVolumes(val []IoK8sAPIPolicyV1beta1AllowedFlexVolume) {
	s.AllowedFlexVolumes = val
}

// SetAllowedHostPaths sets the value of AllowedHostPaths.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) SetAllowedHostPaths(val []IoK8sAPIPolicyV1beta1AllowedHostPath) {
	s.AllowedHostPaths = val
}

// SetAllowedProcMountTypes sets the value of AllowedProcMountTypes.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) SetAllowedProcMountTypes(val []string) {
	s.AllowedProcMountTypes = val
}

// SetAllowedUnsafeSysctls sets the value of AllowedUnsafeSysctls.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) SetAllowedUnsafeSysctls(val []string) {
	s.AllowedUnsafeSysctls = val
}

// SetDefaultAddCapabilities sets the value of DefaultAddCapabilities.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) SetDefaultAddCapabilities(val []string) {
	s.DefaultAddCapabilities = val
}

// SetDefaultAllowPrivilegeEscalation sets the value of DefaultAllowPrivilegeEscalation.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) SetDefaultAllowPrivilegeEscalation(val OptBool) {
	s.DefaultAllowPrivilegeEscalation = val
}

// SetForbiddenSysctls sets the value of ForbiddenSysctls.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) SetForbiddenSysctls(val []string) {
	s.ForbiddenSysctls = val
}

// SetFsGroup sets the value of FsGroup.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) SetFsGroup(val IoK8sAPIPolicyV1beta1FSGroupStrategyOptions) {
	s.FsGroup = val
}

// SetHostIPC sets the value of HostIPC.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) SetHostIPC(val OptBool) {
	s.HostIPC = val
}

// SetHostNetwork sets the value of HostNetwork.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) SetHostNetwork(val OptBool) {
	s.HostNetwork = val
}

// SetHostPID sets the value of HostPID.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) SetHostPID(val OptBool) {
	s.HostPID = val
}

// SetHostPorts sets the value of HostPorts.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) SetHostPorts(val []IoK8sAPIPolicyV1beta1HostPortRange) {
	s.HostPorts = val
}

// SetPrivileged sets the value of Privileged.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) SetPrivileged(val OptBool) {
	s.Privileged = val
}

// SetReadOnlyRootFilesystem sets the value of ReadOnlyRootFilesystem.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) SetReadOnlyRootFilesystem(val OptBool) {
	s.ReadOnlyRootFilesystem = val
}

// SetRequiredDropCapabilities sets the value of RequiredDropCapabilities.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) SetRequiredDropCapabilities(val []string) {
	s.RequiredDropCapabilities = val
}

// SetRunAsGroup sets the value of RunAsGroup.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) SetRunAsGroup(val OptIoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions) {
	s.RunAsGroup = val
}

// SetRunAsUser sets the value of RunAsUser.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) SetRunAsUser(val IoK8sAPIPolicyV1beta1RunAsUserStrategyOptions) {
	s.RunAsUser = val
}

// SetRuntimeClass sets the value of RuntimeClass.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) SetRuntimeClass(val OptIoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions) {
	s.RuntimeClass = val
}

// SetSeLinux sets the value of SeLinux.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) SetSeLinux(val IoK8sAPIPolicyV1beta1SELinuxStrategyOptions) {
	s.SeLinux = val
}

// SetSupplementalGroups sets the value of SupplementalGroups.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) SetSupplementalGroups(val IoK8sAPIPolicyV1beta1SupplementalGroupsStrategyOptions) {
	s.SupplementalGroups = val
}

// SetVolumes sets the value of Volumes.
func (s *IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) SetVolumes(val []string) {
	s.Volumes = val
}

// RunAsGroupStrategyOptions defines the strategy type and any options used to create the strategy.
// Ref: #/components/schemas/io.k8s.api.policy.v1beta1.RunAsGroupStrategyOptions
type IoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions struct {
	// Ranges are the allowed ranges of gids that may be used. If you would like to force a single gid
	// then supply a single range with the same start and end. Required for MustRunAs.
	Ranges []IoK8sAPIPolicyV1beta1IDRange `json:"ranges"`
	// Rule is the strategy that will dictate the allowable RunAsGroup values that may be set.
	Rule string `json:"rule"`
}

// GetRanges returns the value of Ranges.
func (s *IoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions) GetRanges() []IoK8sAPIPolicyV1beta1IDRange {
	return s.Ranges
}

// GetRule returns the value of Rule.
func (s *IoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions) GetRule() string {
	return s.Rule
}

// SetRanges sets the value of Ranges.
func (s *IoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions) SetRanges(val []IoK8sAPIPolicyV1beta1IDRange) {
	s.Ranges = val
}

// SetRule sets the value of Rule.
func (s *IoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions) SetRule(val string) {
	s.Rule = val
}

// RunAsUserStrategyOptions defines the strategy type and any options used to create the strategy.
// Ref: #/components/schemas/io.k8s.api.policy.v1beta1.RunAsUserStrategyOptions
type IoK8sAPIPolicyV1beta1RunAsUserStrategyOptions struct {
	// Ranges are the allowed ranges of uids that may be used. If you would like to force a single uid
	// then supply a single range with the same start and end. Required for MustRunAs.
	Ranges []IoK8sAPIPolicyV1beta1IDRange `json:"ranges"`
	// Rule is the strategy that will dictate the allowable RunAsUser values that may be set.
	Rule string `json:"rule"`
}

// GetRanges returns the value of Ranges.
func (s *IoK8sAPIPolicyV1beta1RunAsUserStrategyOptions) GetRanges() []IoK8sAPIPolicyV1beta1IDRange {
	return s.Ranges
}

// GetRule returns the value of Rule.
func (s *IoK8sAPIPolicyV1beta1RunAsUserStrategyOptions) GetRule() string {
	return s.Rule
}

// SetRanges sets the value of Ranges.
func (s *IoK8sAPIPolicyV1beta1RunAsUserStrategyOptions) SetRanges(val []IoK8sAPIPolicyV1beta1IDRange) {
	s.Ranges = val
}

// SetRule sets the value of Rule.
func (s *IoK8sAPIPolicyV1beta1RunAsUserStrategyOptions) SetRule(val string) {
	s.Rule = val
}

// RuntimeClassStrategyOptions define the strategy that will dictate the allowable RuntimeClasses for
// a pod.
// Ref: #/components/schemas/io.k8s.api.policy.v1beta1.RuntimeClassStrategyOptions
type IoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions struct {
	// AllowedRuntimeClassNames is an allowlist of RuntimeClass names that may be specified on a pod. A
	// value of "*" means that any RuntimeClass name is allowed, and must be the only item in the list.
	// An empty list requires the RuntimeClassName field to be unset.
	AllowedRuntimeClassNames []string `json:"allowedRuntimeClassNames"`
	// DefaultRuntimeClassName is the default RuntimeClassName to set on the pod. The default MUST be
	// allowed by the allowedRuntimeClassNames list. A value of nil does not mutate the Pod.
	DefaultRuntimeClassName OptString `json:"defaultRuntimeClassName"`
}

// GetAllowedRuntimeClassNames returns the value of AllowedRuntimeClassNames.
func (s *IoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions) GetAllowedRuntimeClassNames() []string {
	return s.AllowedRuntimeClassNames
}

// GetDefaultRuntimeClassName returns the value of DefaultRuntimeClassName.
func (s *IoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions) GetDefaultRuntimeClassName() OptString {
	return s.DefaultRuntimeClassName
}

// SetAllowedRuntimeClassNames sets the value of AllowedRuntimeClassNames.
func (s *IoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions) SetAllowedRuntimeClassNames(val []string) {
	s.AllowedRuntimeClassNames = val
}

// SetDefaultRuntimeClassName sets the value of DefaultRuntimeClassName.
func (s *IoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions) SetDefaultRuntimeClassName(val OptString) {
	s.DefaultRuntimeClassName = val
}

// SELinuxStrategyOptions defines the strategy type and any options used to create the strategy.
// Ref: #/components/schemas/io.k8s.api.policy.v1beta1.SELinuxStrategyOptions
type IoK8sAPIPolicyV1beta1SELinuxStrategyOptions struct {
	// Rule is the strategy that will dictate the allowable labels that may be set.
	Rule           string                          `json:"rule"`
	SeLinuxOptions OptIoK8sAPICoreV1SELinuxOptions `json:"seLinuxOptions"`
}

// GetRule returns the value of Rule.
func (s *IoK8sAPIPolicyV1beta1SELinuxStrategyOptions) GetRule() string {
	return s.Rule
}

// GetSeLinuxOptions returns the value of SeLinuxOptions.
func (s *IoK8sAPIPolicyV1beta1SELinuxStrategyOptions) GetSeLinuxOptions() OptIoK8sAPICoreV1SELinuxOptions {
	return s.SeLinuxOptions
}

// SetRule sets the value of Rule.
func (s *IoK8sAPIPolicyV1beta1SELinuxStrategyOptions) SetRule(val string) {
	s.Rule = val
}

// SetSeLinuxOptions sets the value of SeLinuxOptions.
func (s *IoK8sAPIPolicyV1beta1SELinuxStrategyOptions) SetSeLinuxOptions(val OptIoK8sAPICoreV1SELinuxOptions) {
	s.SeLinuxOptions = val
}

// SupplementalGroupsStrategyOptions defines the strategy type and options used to create the
// strategy.
// Ref: #/components/schemas/io.k8s.api.policy.v1beta1.SupplementalGroupsStrategyOptions
type IoK8sAPIPolicyV1beta1SupplementalGroupsStrategyOptions struct {
	// Ranges are the allowed ranges of supplemental groups.  If you would like to force a single
	// supplemental group then supply a single range with the same start and end. Required for MustRunAs.
	Ranges []IoK8sAPIPolicyV1beta1IDRange `json:"ranges"`
	// Rule is the strategy that will dictate what supplemental groups is used in the SecurityContext.
	Rule OptString `json:"rule"`
}

// GetRanges returns the value of Ranges.
func (s *IoK8sAPIPolicyV1beta1SupplementalGroupsStrategyOptions) GetRanges() []IoK8sAPIPolicyV1beta1IDRange {
	return s.Ranges
}

// GetRule returns the value of Rule.
func (s *IoK8sAPIPolicyV1beta1SupplementalGroupsStrategyOptions) GetRule() OptString {
	return s.Rule
}

// SetRanges sets the value of Ranges.
func (s *IoK8sAPIPolicyV1beta1SupplementalGroupsStrategyOptions) SetRanges(val []IoK8sAPIPolicyV1beta1IDRange) {
	s.Ranges = val
}

// SetRule sets the value of Rule.
func (s *IoK8sAPIPolicyV1beta1SupplementalGroupsStrategyOptions) SetRule(val OptString) {
	s.Rule = val
}

// AggregationRule describes how to locate ClusterRoles to aggregate into the ClusterRole.
// Ref: #/components/schemas/io.k8s.api.rbac.v1.AggregationRule
type IoK8sAPIRbacV1AggregationRule struct {
	// ClusterRoleSelectors holds a list of selectors which will be used to find ClusterRoles and create
	// the rules. If any of the selectors match, then the ClusterRole's permissions will be added.
	ClusterRoleSelectors []IoK8sApimachineryPkgApisMetaV1LabelSelector `json:"clusterRoleSelectors"`
}

// GetClusterRoleSelectors returns the value of ClusterRoleSelectors.
func (s *IoK8sAPIRbacV1AggregationRule) GetClusterRoleSelectors() []IoK8sApimachineryPkgApisMetaV1LabelSelector {
	return s.ClusterRoleSelectors
}

// SetClusterRoleSelectors sets the value of ClusterRoleSelectors.
func (s *IoK8sAPIRbacV1AggregationRule) SetClusterRoleSelectors(val []IoK8sApimachineryPkgApisMetaV1LabelSelector) {
	s.ClusterRoleSelectors = val
}

// ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit
// by a RoleBinding or ClusterRoleBinding.
// Ref: #/components/schemas/io.k8s.api.rbac.v1.ClusterRole
type IoK8sAPIRbacV1ClusterRole struct {
	AggregationRule OptIoK8sAPIRbacV1AggregationRule `json:"aggregationRule"`
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                   `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata"`
	// Rules holds all the PolicyRules for this ClusterRole.
	Rules []IoK8sAPIRbacV1PolicyRule `json:"rules"`
}

// GetAggregationRule returns the value of AggregationRule.
func (s *IoK8sAPIRbacV1ClusterRole) GetAggregationRule() OptIoK8sAPIRbacV1AggregationRule {
	return s.AggregationRule
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIRbacV1ClusterRole) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIRbacV1ClusterRole) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIRbacV1ClusterRole) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetRules returns the value of Rules.
func (s *IoK8sAPIRbacV1ClusterRole) GetRules() []IoK8sAPIRbacV1PolicyRule {
	return s.Rules
}

// SetAggregationRule sets the value of AggregationRule.
func (s *IoK8sAPIRbacV1ClusterRole) SetAggregationRule(val OptIoK8sAPIRbacV1AggregationRule) {
	s.AggregationRule = val
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIRbacV1ClusterRole) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIRbacV1ClusterRole) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIRbacV1ClusterRole) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetRules sets the value of Rules.
func (s *IoK8sAPIRbacV1ClusterRole) SetRules(val []IoK8sAPIRbacV1PolicyRule) {
	s.Rules = val
}

func (*IoK8sAPIRbacV1ClusterRole) readRbacAuthorizationV1ClusterRoleRes() {}

// ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference a ClusterRole
// in the global namespace, and adds who information via Subject.
// Ref: #/components/schemas/io.k8s.api.rbac.v1.ClusterRoleBinding
type IoK8sAPIRbacV1ClusterRoleBinding struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                   `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata"`
	RoleRef  IoK8sAPIRbacV1RoleRef                       `json:"roleRef"`
	// Subjects holds references to the objects the role applies to.
	Subjects []IoK8sAPIRbacV1Subject `json:"subjects"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIRbacV1ClusterRoleBinding) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIRbacV1ClusterRoleBinding) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIRbacV1ClusterRoleBinding) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetRoleRef returns the value of RoleRef.
func (s *IoK8sAPIRbacV1ClusterRoleBinding) GetRoleRef() IoK8sAPIRbacV1RoleRef {
	return s.RoleRef
}

// GetSubjects returns the value of Subjects.
func (s *IoK8sAPIRbacV1ClusterRoleBinding) GetSubjects() []IoK8sAPIRbacV1Subject {
	return s.Subjects
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIRbacV1ClusterRoleBinding) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIRbacV1ClusterRoleBinding) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIRbacV1ClusterRoleBinding) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetRoleRef sets the value of RoleRef.
func (s *IoK8sAPIRbacV1ClusterRoleBinding) SetRoleRef(val IoK8sAPIRbacV1RoleRef) {
	s.RoleRef = val
}

// SetSubjects sets the value of Subjects.
func (s *IoK8sAPIRbacV1ClusterRoleBinding) SetSubjects(val []IoK8sAPIRbacV1Subject) {
	s.Subjects = val
}

func (*IoK8sAPIRbacV1ClusterRoleBinding) readRbacAuthorizationV1ClusterRoleBindingRes() {}

// ClusterRoleBindingList is a collection of ClusterRoleBindings.
// Ref: #/components/schemas/io.k8s.api.rbac.v1.ClusterRoleBindingList
type IoK8sAPIRbacV1ClusterRoleBindingList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Items is a list of ClusterRoleBindings.
	Items []IoK8sAPIRbacV1ClusterRoleBinding `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIRbacV1ClusterRoleBindingList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPIRbacV1ClusterRoleBindingList) GetItems() []IoK8sAPIRbacV1ClusterRoleBinding {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIRbacV1ClusterRoleBindingList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIRbacV1ClusterRoleBindingList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIRbacV1ClusterRoleBindingList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPIRbacV1ClusterRoleBindingList) SetItems(val []IoK8sAPIRbacV1ClusterRoleBinding) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIRbacV1ClusterRoleBindingList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIRbacV1ClusterRoleBindingList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPIRbacV1ClusterRoleBindingList) listRbacAuthorizationV1ClusterRoleBindingRes() {}

// ClusterRoleList is a collection of ClusterRoles.
// Ref: #/components/schemas/io.k8s.api.rbac.v1.ClusterRoleList
type IoK8sAPIRbacV1ClusterRoleList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Items is a list of ClusterRoles.
	Items []IoK8sAPIRbacV1ClusterRole `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIRbacV1ClusterRoleList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPIRbacV1ClusterRoleList) GetItems() []IoK8sAPIRbacV1ClusterRole {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIRbacV1ClusterRoleList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIRbacV1ClusterRoleList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIRbacV1ClusterRoleList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPIRbacV1ClusterRoleList) SetItems(val []IoK8sAPIRbacV1ClusterRole) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIRbacV1ClusterRoleList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIRbacV1ClusterRoleList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPIRbacV1ClusterRoleList) listRbacAuthorizationV1ClusterRoleRes() {}

// PolicyRule holds information that describes a policy rule, but does not contain information about
// who the rule applies to or which namespace the rule applies to.
// Ref: #/components/schemas/io.k8s.api.rbac.v1.PolicyRule
type IoK8sAPIRbacV1PolicyRule struct {
	// APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are
	// specified, any action requested against one of the enumerated resources in any API group will be
	// allowed.
	ApiGroups []string `json:"apiGroups"`
	// NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but
	// only as the full, final step in the path Since non-resource URLs are not namespaced, this field is
	// only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to
	// API resources (such as "pods" or "secrets") or non-resource URL paths (such as "/api"),  but not
	// both.
	NonResourceURLs []string `json:"nonResourceURLs"`
	// ResourceNames is an optional white list of names that the rule applies to.  An empty set means
	// that everything is allowed.
	ResourceNames []string `json:"resourceNames"`
	// Resources is a list of resources this rule applies to. '*' represents all resources.
	Resources []string `json:"resources"`
	// Verbs is a list of Verbs that apply to ALL the ResourceKinds contained in this rule. '*'
	// represents all verbs.
	Verbs []string `json:"verbs"`
}

// GetApiGroups returns the value of ApiGroups.
func (s *IoK8sAPIRbacV1PolicyRule) GetApiGroups() []string {
	return s.ApiGroups
}

// GetNonResourceURLs returns the value of NonResourceURLs.
func (s *IoK8sAPIRbacV1PolicyRule) GetNonResourceURLs() []string {
	return s.NonResourceURLs
}

// GetResourceNames returns the value of ResourceNames.
func (s *IoK8sAPIRbacV1PolicyRule) GetResourceNames() []string {
	return s.ResourceNames
}

// GetResources returns the value of Resources.
func (s *IoK8sAPIRbacV1PolicyRule) GetResources() []string {
	return s.Resources
}

// GetVerbs returns the value of Verbs.
func (s *IoK8sAPIRbacV1PolicyRule) GetVerbs() []string {
	return s.Verbs
}

// SetApiGroups sets the value of ApiGroups.
func (s *IoK8sAPIRbacV1PolicyRule) SetApiGroups(val []string) {
	s.ApiGroups = val
}

// SetNonResourceURLs sets the value of NonResourceURLs.
func (s *IoK8sAPIRbacV1PolicyRule) SetNonResourceURLs(val []string) {
	s.NonResourceURLs = val
}

// SetResourceNames sets the value of ResourceNames.
func (s *IoK8sAPIRbacV1PolicyRule) SetResourceNames(val []string) {
	s.ResourceNames = val
}

// SetResources sets the value of Resources.
func (s *IoK8sAPIRbacV1PolicyRule) SetResources(val []string) {
	s.Resources = val
}

// SetVerbs sets the value of Verbs.
func (s *IoK8sAPIRbacV1PolicyRule) SetVerbs(val []string) {
	s.Verbs = val
}

// Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a
// RoleBinding.
// Ref: #/components/schemas/io.k8s.api.rbac.v1.Role
type IoK8sAPIRbacV1Role struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                   `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata"`
	// Rules holds all the PolicyRules for this Role.
	Rules []IoK8sAPIRbacV1PolicyRule `json:"rules"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIRbacV1Role) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIRbacV1Role) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIRbacV1Role) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetRules returns the value of Rules.
func (s *IoK8sAPIRbacV1Role) GetRules() []IoK8sAPIRbacV1PolicyRule {
	return s.Rules
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIRbacV1Role) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIRbacV1Role) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIRbacV1Role) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetRules sets the value of Rules.
func (s *IoK8sAPIRbacV1Role) SetRules(val []IoK8sAPIRbacV1PolicyRule) {
	s.Rules = val
}

func (*IoK8sAPIRbacV1Role) readRbacAuthorizationV1NamespacedRoleRes() {}

// RoleBinding references a role, but does not contain it.  It can reference a Role in the same
// namespace or a ClusterRole in the global namespace. It adds who information via Subjects and
// namespace information by which namespace it exists in.  RoleBindings in a given namespace only
// have effect in that namespace.
// Ref: #/components/schemas/io.k8s.api.rbac.v1.RoleBinding
type IoK8sAPIRbacV1RoleBinding struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                   `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata"`
	RoleRef  IoK8sAPIRbacV1RoleRef                       `json:"roleRef"`
	// Subjects holds references to the objects the role applies to.
	Subjects []IoK8sAPIRbacV1Subject `json:"subjects"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIRbacV1RoleBinding) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIRbacV1RoleBinding) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIRbacV1RoleBinding) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetRoleRef returns the value of RoleRef.
func (s *IoK8sAPIRbacV1RoleBinding) GetRoleRef() IoK8sAPIRbacV1RoleRef {
	return s.RoleRef
}

// GetSubjects returns the value of Subjects.
func (s *IoK8sAPIRbacV1RoleBinding) GetSubjects() []IoK8sAPIRbacV1Subject {
	return s.Subjects
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIRbacV1RoleBinding) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIRbacV1RoleBinding) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIRbacV1RoleBinding) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetRoleRef sets the value of RoleRef.
func (s *IoK8sAPIRbacV1RoleBinding) SetRoleRef(val IoK8sAPIRbacV1RoleRef) {
	s.RoleRef = val
}

// SetSubjects sets the value of Subjects.
func (s *IoK8sAPIRbacV1RoleBinding) SetSubjects(val []IoK8sAPIRbacV1Subject) {
	s.Subjects = val
}

func (*IoK8sAPIRbacV1RoleBinding) readRbacAuthorizationV1NamespacedRoleBindingRes() {}

// RoleBindingList is a collection of RoleBindings.
// Ref: #/components/schemas/io.k8s.api.rbac.v1.RoleBindingList
type IoK8sAPIRbacV1RoleBindingList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Items is a list of RoleBindings.
	Items []IoK8sAPIRbacV1RoleBinding `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIRbacV1RoleBindingList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPIRbacV1RoleBindingList) GetItems() []IoK8sAPIRbacV1RoleBinding {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIRbacV1RoleBindingList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIRbacV1RoleBindingList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIRbacV1RoleBindingList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPIRbacV1RoleBindingList) SetItems(val []IoK8sAPIRbacV1RoleBinding) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIRbacV1RoleBindingList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIRbacV1RoleBindingList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPIRbacV1RoleBindingList) listRbacAuthorizationV1NamespacedRoleBindingRes()       {}
func (*IoK8sAPIRbacV1RoleBindingList) listRbacAuthorizationV1RoleBindingForAllNamespacesRes() {}

// RoleList is a collection of Roles.
// Ref: #/components/schemas/io.k8s.api.rbac.v1.RoleList
type IoK8sAPIRbacV1RoleList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Items is a list of Roles.
	Items []IoK8sAPIRbacV1Role `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIRbacV1RoleList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPIRbacV1RoleList) GetItems() []IoK8sAPIRbacV1Role {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIRbacV1RoleList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIRbacV1RoleList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIRbacV1RoleList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPIRbacV1RoleList) SetItems(val []IoK8sAPIRbacV1Role) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIRbacV1RoleList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIRbacV1RoleList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPIRbacV1RoleList) listRbacAuthorizationV1NamespacedRoleRes()       {}
func (*IoK8sAPIRbacV1RoleList) listRbacAuthorizationV1RoleForAllNamespacesRes() {}

// RoleRef contains information that points to the role being used.
// Ref: #/components/schemas/io.k8s.api.rbac.v1.RoleRef
type IoK8sAPIRbacV1RoleRef struct {
	// APIGroup is the group for the resource being referenced.
	ApiGroup string `json:"apiGroup"`
	// Kind is the type of resource being referenced.
	Kind string `json:"kind"`
	// Name is the name of resource being referenced.
	Name string `json:"name"`
}

// GetApiGroup returns the value of ApiGroup.
func (s *IoK8sAPIRbacV1RoleRef) GetApiGroup() string {
	return s.ApiGroup
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIRbacV1RoleRef) GetKind() string {
	return s.Kind
}

// GetName returns the value of Name.
func (s *IoK8sAPIRbacV1RoleRef) GetName() string {
	return s.Name
}

// SetApiGroup sets the value of ApiGroup.
func (s *IoK8sAPIRbacV1RoleRef) SetApiGroup(val string) {
	s.ApiGroup = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIRbacV1RoleRef) SetKind(val string) {
	s.Kind = val
}

// SetName sets the value of Name.
func (s *IoK8sAPIRbacV1RoleRef) SetName(val string) {
	s.Name = val
}

// Subject contains a reference to the object or user identities a role binding applies to.  This can
// either hold a direct API object reference, or a value for non-objects such as user and group names.
// Ref: #/components/schemas/io.k8s.api.rbac.v1.Subject
type IoK8sAPIRbacV1Subject struct {
	// APIGroup holds the API group of the referenced subject. Defaults to "" for ServiceAccount subjects.
	//  Defaults to "rbac.authorization.k8s.io" for User and Group subjects.
	ApiGroup OptString `json:"apiGroup"`
	// Kind of object being referenced. Values defined by this API group are "User", "Group", and
	// "ServiceAccount". If the Authorizer does not recognized the kind value, the Authorizer should
	// report an error.
	Kind string `json:"kind"`
	// Name of the object being referenced.
	Name string `json:"name"`
	// Namespace of the referenced object.  If the object kind is non-namespace, such as "User" or
	// "Group", and this value is not empty the Authorizer should report an error.
	Namespace OptString `json:"namespace"`
}

// GetApiGroup returns the value of ApiGroup.
func (s *IoK8sAPIRbacV1Subject) GetApiGroup() OptString {
	return s.ApiGroup
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIRbacV1Subject) GetKind() string {
	return s.Kind
}

// GetName returns the value of Name.
func (s *IoK8sAPIRbacV1Subject) GetName() string {
	return s.Name
}

// GetNamespace returns the value of Namespace.
func (s *IoK8sAPIRbacV1Subject) GetNamespace() OptString {
	return s.Namespace
}

// SetApiGroup sets the value of ApiGroup.
func (s *IoK8sAPIRbacV1Subject) SetApiGroup(val OptString) {
	s.ApiGroup = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIRbacV1Subject) SetKind(val string) {
	s.Kind = val
}

// SetName sets the value of Name.
func (s *IoK8sAPIRbacV1Subject) SetName(val string) {
	s.Name = val
}

// SetNamespace sets the value of Namespace.
func (s *IoK8sAPIRbacV1Subject) SetNamespace(val OptString) {
	s.Namespace = val
}

// PriorityClass defines mapping from a priority class name to the priority integer value. The value
// can be any valid integer.
// Ref: #/components/schemas/io.k8s.api.scheduling.v1.PriorityClass
type IoK8sAPISchedulingV1PriorityClass struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Description is an arbitrary string that usually provides guidelines on when this priority class
	// should be used.
	Description OptString `json:"description"`
	// GlobalDefault specifies whether this PriorityClass should be considered as the default priority
	// for pods that do not have any priority class. Only one PriorityClass can be marked as
	// `globalDefault`. However, if more than one PriorityClasses exists with their `globalDefault` field
	// set to true, the smallest value of such global default PriorityClasses will be used as the default
	// priority.
	GlobalDefault OptBool `json:"globalDefault"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                   `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata"`
	// PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never,
	// PreemptLowerPriority. Defaults to PreemptLowerPriority if unset. This field is beta-level, gated
	// by the NonPreemptingPriority feature-gate.
	PreemptionPolicy OptString `json:"preemptionPolicy"`
	// The value of this priority class. This is the actual priority that pods receive when they have the
	// name of this class in their pod spec.
	Value int32 `json:"value"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPISchedulingV1PriorityClass) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetDescription returns the value of Description.
func (s *IoK8sAPISchedulingV1PriorityClass) GetDescription() OptString {
	return s.Description
}

// GetGlobalDefault returns the value of GlobalDefault.
func (s *IoK8sAPISchedulingV1PriorityClass) GetGlobalDefault() OptBool {
	return s.GlobalDefault
}

// GetKind returns the value of Kind.
func (s *IoK8sAPISchedulingV1PriorityClass) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPISchedulingV1PriorityClass) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetPreemptionPolicy returns the value of PreemptionPolicy.
func (s *IoK8sAPISchedulingV1PriorityClass) GetPreemptionPolicy() OptString {
	return s.PreemptionPolicy
}

// GetValue returns the value of Value.
func (s *IoK8sAPISchedulingV1PriorityClass) GetValue() int32 {
	return s.Value
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPISchedulingV1PriorityClass) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetDescription sets the value of Description.
func (s *IoK8sAPISchedulingV1PriorityClass) SetDescription(val OptString) {
	s.Description = val
}

// SetGlobalDefault sets the value of GlobalDefault.
func (s *IoK8sAPISchedulingV1PriorityClass) SetGlobalDefault(val OptBool) {
	s.GlobalDefault = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPISchedulingV1PriorityClass) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPISchedulingV1PriorityClass) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetPreemptionPolicy sets the value of PreemptionPolicy.
func (s *IoK8sAPISchedulingV1PriorityClass) SetPreemptionPolicy(val OptString) {
	s.PreemptionPolicy = val
}

// SetValue sets the value of Value.
func (s *IoK8sAPISchedulingV1PriorityClass) SetValue(val int32) {
	s.Value = val
}

func (*IoK8sAPISchedulingV1PriorityClass) readSchedulingV1PriorityClassRes() {}

// PriorityClassList is a collection of priority classes.
// Ref: #/components/schemas/io.k8s.api.scheduling.v1.PriorityClassList
type IoK8sAPISchedulingV1PriorityClassList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Items is the list of PriorityClasses.
	Items []IoK8sAPISchedulingV1PriorityClass `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPISchedulingV1PriorityClassList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPISchedulingV1PriorityClassList) GetItems() []IoK8sAPISchedulingV1PriorityClass {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPISchedulingV1PriorityClassList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPISchedulingV1PriorityClassList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPISchedulingV1PriorityClassList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPISchedulingV1PriorityClassList) SetItems(val []IoK8sAPISchedulingV1PriorityClass) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPISchedulingV1PriorityClassList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPISchedulingV1PriorityClassList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPISchedulingV1PriorityClassList) listSchedulingV1PriorityClassRes() {}

// CSIDriver captures information about a Container Storage Interface (CSI) volume driver deployed on
// the cluster. Kubernetes attach detach controller uses this object to determine whether attach is
// required. Kubelet uses this object to determine whether pod information needs to be passed on
// mount. CSIDriver objects are non-namespaced.
// Ref: #/components/schemas/io.k8s.api.storage.v1.CSIDriver
type IoK8sAPIStorageV1CSIDriver struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                   `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata"`
	Spec     IoK8sAPIStorageV1CSIDriverSpec              `json:"spec"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIStorageV1CSIDriver) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIStorageV1CSIDriver) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIStorageV1CSIDriver) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetSpec returns the value of Spec.
func (s *IoK8sAPIStorageV1CSIDriver) GetSpec() IoK8sAPIStorageV1CSIDriverSpec {
	return s.Spec
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIStorageV1CSIDriver) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIStorageV1CSIDriver) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIStorageV1CSIDriver) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetSpec sets the value of Spec.
func (s *IoK8sAPIStorageV1CSIDriver) SetSpec(val IoK8sAPIStorageV1CSIDriverSpec) {
	s.Spec = val
}

func (*IoK8sAPIStorageV1CSIDriver) readStorageV1CSIDriverRes() {}

// CSIDriverList is a collection of CSIDriver objects.
// Ref: #/components/schemas/io.k8s.api.storage.v1.CSIDriverList
type IoK8sAPIStorageV1CSIDriverList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Items is the list of CSIDriver.
	Items []IoK8sAPIStorageV1CSIDriver `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIStorageV1CSIDriverList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPIStorageV1CSIDriverList) GetItems() []IoK8sAPIStorageV1CSIDriver {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIStorageV1CSIDriverList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIStorageV1CSIDriverList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIStorageV1CSIDriverList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPIStorageV1CSIDriverList) SetItems(val []IoK8sAPIStorageV1CSIDriver) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIStorageV1CSIDriverList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIStorageV1CSIDriverList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPIStorageV1CSIDriverList) listStorageV1CSIDriverRes() {}

// CSIDriverSpec is the specification of a CSIDriver.
// Ref: #/components/schemas/io.k8s.api.storage.v1.CSIDriverSpec
type IoK8sAPIStorageV1CSIDriverSpec struct {
	// AttachRequired indicates this CSI volume driver requires an attach operation (because it
	// implements the CSI ControllerPublishVolume() method), and that the Kubernetes attach detach
	// controller should call the attach volume interface which checks the volumeattachment status and
	// waits until the volume is attached before proceeding to mounting. The CSI external-attacher
	// coordinates with CSI volume driver and updates the volumeattachment status when the attach
	// operation is complete. If the CSIDriverRegistry feature gate is enabled and the value is specified
	// to false, the attach operation will be skipped. Otherwise the attach operation will be called.
	// This field is immutable.
	AttachRequired OptBool `json:"attachRequired"`
	// Defines if the underlying volume supports changing ownership and permission of the volume before
	// being mounted. Refer to the specific FSGroupPolicy values for additional details. This field is
	// beta, and is only honored by servers that enable the CSIVolumeFSGroupPolicy feature gate.
	// This field is immutable.
	// Defaults to ReadWriteOnceWithFSType, which will examine each volume to determine if Kubernetes
	// should modify ownership and permissions of the volume. With the default policy the defined fsGroup
	// will only be applied if a fstype is defined and the volume's access mode contains ReadWriteOnce.
	FsGroupPolicy OptString `json:"fsGroupPolicy"`
	// If set to true, podInfoOnMount indicates this CSI volume driver requires additional pod
	// information (like podName, podUID, etc.) during mount operations. If set to false, pod information
	// will not be passed on mount. Default is false. The CSI driver specifies podInfoOnMount as part of
	// driver deployment. If true, Kubelet will pass pod information as VolumeContext in the CSI
	// NodePublishVolume() calls. The CSI driver is responsible for parsing and validating the
	// information passed in as VolumeContext. The following VolumeConext will be passed if
	// podInfoOnMount is set to true. This list might grow, but the prefix will be used. "csi.storage.k8s.
	// io/pod.name": pod.Name "csi.storage.k8s.io/pod.namespace": pod.Namespace "csi.storage.k8s.io/pod.
	// uid": string(pod.UID) "csi.storage.k8s.io/ephemeral": "true" if the volume is an ephemeral inline
	// volume
	// defined by a CSIVolumeSource, otherwise "false"
	// "csi.storage.k8s.io/ephemeral" is a new feature in Kubernetes 1.16. It is only required for
	// drivers which support both the "Persistent" and "Ephemeral" VolumeLifecycleMode. Other drivers can
	// leave pod info disabled and/or ignore this field. As Kubernetes 1.15 doesn't support this field,
	// drivers can only support one mode when deployed on such a cluster and the deployment determines
	// which mode that is, for example via a command line parameter of the driver.
	// This field is immutable.
	PodInfoOnMount OptBool `json:"podInfoOnMount"`
	// RequiresRepublish indicates the CSI driver wants `NodePublishVolume` being periodically called to
	// reflect any possible change in the mounted volume. This field defaults to false.
	// Note: After a successful initial NodePublishVolume call, subsequent calls to NodePublishVolume
	// should only update the contents of the volume. New mount points will not be seen by a running
	// container.
	RequiresRepublish OptBool `json:"requiresRepublish"`
	// If set to true, storageCapacity indicates that the CSI volume driver wants pod scheduling to
	// consider the storage capacity that the driver deployment will report by creating
	// CSIStorageCapacity objects with capacity information.
	// The check can be enabled immediately when deploying a driver. In that case, provisioning new
	// volumes with late binding will pause until the driver deployment has published some suitable
	// CSIStorageCapacity object.
	// Alternatively, the driver can be deployed with the field unset or false and it can be flipped
	// later when storage capacity information has been published.
	// This field was immutable in Kubernetes <= 1.22 and now is mutable.
	// This is a beta field and only available when the CSIStorageCapacity feature is enabled. The
	// default is false.
	StorageCapacity OptBool `json:"storageCapacity"`
	// TokenRequests indicates the CSI driver needs pods' service account tokens it is mounting volume
	// for to do necessary authentication. Kubelet will pass the tokens in VolumeContext in the CSI
	// NodePublishVolume calls. The CSI driver should parse and validate the following VolumeContext:
	// "csi.storage.k8s.io/serviceAccount.tokens": {
	// "<audience>": {
	// "token": <token>,
	// "expirationTimestamp": <expiration timestamp in RFC3339>,
	// },
	// ...
	// }
	// Note: Audience in each TokenRequest should be different and at most one token is empty string. To
	// receive a new token after expiry, RequiresRepublish can be used to trigger NodePublishVolume
	// periodically.
	TokenRequests []IoK8sAPIStorageV1TokenRequest `json:"tokenRequests"`
	// VolumeLifecycleModes defines what kind of volumes this CSI volume driver supports. The default if
	// the list is empty is "Persistent", which is the usage defined by the CSI specification and
	// implemented in Kubernetes via the usual PV/PVC mechanism. The other mode is "Ephemeral". In this
	// mode, volumes are defined inline inside the pod spec with CSIVolumeSource and their lifecycle is
	// tied to the lifecycle of that pod. A driver has to be aware of this because it is only going to
	// get a NodePublishVolume call for such a volume. For more information about implementing this mode,
	// see https://kubernetes-csi.github.io/docs/ephemeral-local-volumes.html A driver can support one or
	// more of these modes and more modes may be added in the future. This field is beta.
	// This field is immutable.
	VolumeLifecycleModes []string `json:"volumeLifecycleModes"`
}

// GetAttachRequired returns the value of AttachRequired.
func (s *IoK8sAPIStorageV1CSIDriverSpec) GetAttachRequired() OptBool {
	return s.AttachRequired
}

// GetFsGroupPolicy returns the value of FsGroupPolicy.
func (s *IoK8sAPIStorageV1CSIDriverSpec) GetFsGroupPolicy() OptString {
	return s.FsGroupPolicy
}

// GetPodInfoOnMount returns the value of PodInfoOnMount.
func (s *IoK8sAPIStorageV1CSIDriverSpec) GetPodInfoOnMount() OptBool {
	return s.PodInfoOnMount
}

// GetRequiresRepublish returns the value of RequiresRepublish.
func (s *IoK8sAPIStorageV1CSIDriverSpec) GetRequiresRepublish() OptBool {
	return s.RequiresRepublish
}

// GetStorageCapacity returns the value of StorageCapacity.
func (s *IoK8sAPIStorageV1CSIDriverSpec) GetStorageCapacity() OptBool {
	return s.StorageCapacity
}

// GetTokenRequests returns the value of TokenRequests.
func (s *IoK8sAPIStorageV1CSIDriverSpec) GetTokenRequests() []IoK8sAPIStorageV1TokenRequest {
	return s.TokenRequests
}

// GetVolumeLifecycleModes returns the value of VolumeLifecycleModes.
func (s *IoK8sAPIStorageV1CSIDriverSpec) GetVolumeLifecycleModes() []string {
	return s.VolumeLifecycleModes
}

// SetAttachRequired sets the value of AttachRequired.
func (s *IoK8sAPIStorageV1CSIDriverSpec) SetAttachRequired(val OptBool) {
	s.AttachRequired = val
}

// SetFsGroupPolicy sets the value of FsGroupPolicy.
func (s *IoK8sAPIStorageV1CSIDriverSpec) SetFsGroupPolicy(val OptString) {
	s.FsGroupPolicy = val
}

// SetPodInfoOnMount sets the value of PodInfoOnMount.
func (s *IoK8sAPIStorageV1CSIDriverSpec) SetPodInfoOnMount(val OptBool) {
	s.PodInfoOnMount = val
}

// SetRequiresRepublish sets the value of RequiresRepublish.
func (s *IoK8sAPIStorageV1CSIDriverSpec) SetRequiresRepublish(val OptBool) {
	s.RequiresRepublish = val
}

// SetStorageCapacity sets the value of StorageCapacity.
func (s *IoK8sAPIStorageV1CSIDriverSpec) SetStorageCapacity(val OptBool) {
	s.StorageCapacity = val
}

// SetTokenRequests sets the value of TokenRequests.
func (s *IoK8sAPIStorageV1CSIDriverSpec) SetTokenRequests(val []IoK8sAPIStorageV1TokenRequest) {
	s.TokenRequests = val
}

// SetVolumeLifecycleModes sets the value of VolumeLifecycleModes.
func (s *IoK8sAPIStorageV1CSIDriverSpec) SetVolumeLifecycleModes(val []string) {
	s.VolumeLifecycleModes = val
}

// CSINode holds information about all CSI drivers installed on a node. CSI drivers do not need to
// create the CSINode object directly. As long as they use the node-driver-registrar sidecar
// container, the kubelet will automatically populate the CSINode object for the CSI driver as part
// of kubelet plugin registration. CSINode has the same name as a node. If the object is missing, it
// means either there are no CSI Drivers available on the node, or the Kubelet version is low enough
// that it doesn't create this object. CSINode has an OwnerReference that points to the corresponding
// node object.
// Ref: #/components/schemas/io.k8s.api.storage.v1.CSINode
type IoK8sAPIStorageV1CSINode struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                   `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata"`
	Spec     IoK8sAPIStorageV1CSINodeSpec                `json:"spec"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIStorageV1CSINode) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIStorageV1CSINode) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIStorageV1CSINode) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetSpec returns the value of Spec.
func (s *IoK8sAPIStorageV1CSINode) GetSpec() IoK8sAPIStorageV1CSINodeSpec {
	return s.Spec
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIStorageV1CSINode) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIStorageV1CSINode) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIStorageV1CSINode) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetSpec sets the value of Spec.
func (s *IoK8sAPIStorageV1CSINode) SetSpec(val IoK8sAPIStorageV1CSINodeSpec) {
	s.Spec = val
}

func (*IoK8sAPIStorageV1CSINode) readStorageV1CSINodeRes() {}

// CSINodeDriver holds information about the specification of one CSI driver installed on a node.
// Ref: #/components/schemas/io.k8s.api.storage.v1.CSINodeDriver
type IoK8sAPIStorageV1CSINodeDriver struct {
	Allocatable OptIoK8sAPIStorageV1VolumeNodeResources `json:"allocatable"`
	// This is the name of the CSI driver that this object refers to. This MUST be the same name returned
	// by the CSI GetPluginName() call for that driver.
	Name string `json:"name"`
	// NodeID of the node from the driver point of view. This field enables Kubernetes to communicate
	// with storage systems that do not share the same nomenclature for nodes. For example, Kubernetes
	// may refer to a given node as "node1", but the storage system may refer to the same node as "nodeA".
	//  When Kubernetes issues a command to the storage system to attach a volume to a specific node, it
	// can use this field to refer to the node name using the ID that the storage system will understand,
	// e.g. "nodeA" instead of "node1". This field is required.
	NodeID string `json:"nodeID"`
	// TopologyKeys is the list of keys supported by the driver. When a driver is initialized on a
	// cluster, it provides a set of topology keys that it understands (e.g. "company.com/zone", "company.
	// com/region"). When a driver is initialized on a node, it provides the same topology keys along
	// with values. Kubelet will expose these topology keys as labels on its own node object. When
	// Kubernetes does topology aware provisioning, it can use this list to determine which labels it
	// should retrieve from the node object and pass back to the driver. It is possible for different
	// nodes to use different topology keys. This can be empty if driver does not support topology.
	TopologyKeys []string `json:"topologyKeys"`
}

// GetAllocatable returns the value of Allocatable.
func (s *IoK8sAPIStorageV1CSINodeDriver) GetAllocatable() OptIoK8sAPIStorageV1VolumeNodeResources {
	return s.Allocatable
}

// GetName returns the value of Name.
func (s *IoK8sAPIStorageV1CSINodeDriver) GetName() string {
	return s.Name
}

// GetNodeID returns the value of NodeID.
func (s *IoK8sAPIStorageV1CSINodeDriver) GetNodeID() string {
	return s.NodeID
}

// GetTopologyKeys returns the value of TopologyKeys.
func (s *IoK8sAPIStorageV1CSINodeDriver) GetTopologyKeys() []string {
	return s.TopologyKeys
}

// SetAllocatable sets the value of Allocatable.
func (s *IoK8sAPIStorageV1CSINodeDriver) SetAllocatable(val OptIoK8sAPIStorageV1VolumeNodeResources) {
	s.Allocatable = val
}

// SetName sets the value of Name.
func (s *IoK8sAPIStorageV1CSINodeDriver) SetName(val string) {
	s.Name = val
}

// SetNodeID sets the value of NodeID.
func (s *IoK8sAPIStorageV1CSINodeDriver) SetNodeID(val string) {
	s.NodeID = val
}

// SetTopologyKeys sets the value of TopologyKeys.
func (s *IoK8sAPIStorageV1CSINodeDriver) SetTopologyKeys(val []string) {
	s.TopologyKeys = val
}

// CSINodeList is a collection of CSINode objects.
// Ref: #/components/schemas/io.k8s.api.storage.v1.CSINodeList
type IoK8sAPIStorageV1CSINodeList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Items is the list of CSINode.
	Items []IoK8sAPIStorageV1CSINode `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIStorageV1CSINodeList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPIStorageV1CSINodeList) GetItems() []IoK8sAPIStorageV1CSINode {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIStorageV1CSINodeList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIStorageV1CSINodeList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIStorageV1CSINodeList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPIStorageV1CSINodeList) SetItems(val []IoK8sAPIStorageV1CSINode) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIStorageV1CSINodeList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIStorageV1CSINodeList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPIStorageV1CSINodeList) listStorageV1CSINodeRes() {}

// CSINodeSpec holds information about the specification of all CSI drivers installed on a node.
// Ref: #/components/schemas/io.k8s.api.storage.v1.CSINodeSpec
type IoK8sAPIStorageV1CSINodeSpec struct {
	// Drivers is a list of information of all CSI Drivers existing on a node. If all drivers in the list
	// are uninstalled, this can become empty.
	Drivers []IoK8sAPIStorageV1CSINodeDriver `json:"drivers"`
}

// GetDrivers returns the value of Drivers.
func (s *IoK8sAPIStorageV1CSINodeSpec) GetDrivers() []IoK8sAPIStorageV1CSINodeDriver {
	return s.Drivers
}

// SetDrivers sets the value of Drivers.
func (s *IoK8sAPIStorageV1CSINodeSpec) SetDrivers(val []IoK8sAPIStorageV1CSINodeDriver) {
	s.Drivers = val
}

// StorageClass describes the parameters for a class of storage for which PersistentVolumes can be
// dynamically provisioned.
// StorageClasses are non-namespaced; the name of the storage class according to etcd is in
// ObjectMeta.Name.
// Ref: #/components/schemas/io.k8s.api.storage.v1.StorageClass
type IoK8sAPIStorageV1StorageClass struct {
	// AllowVolumeExpansion shows whether the storage class allow volume expand.
	AllowVolumeExpansion OptBool `json:"allowVolumeExpansion"`
	// Restrict the node topologies where volumes can be dynamically provisioned. Each volume plugin
	// defines its own supported topology specifications. An empty TopologySelectorTerm list means there
	// is no topology restriction. This field is only honored by servers that enable the VolumeScheduling
	// feature.
	AllowedTopologies []IoK8sAPICoreV1TopologySelectorTerm `json:"allowedTopologies"`
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                   `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata"`
	// Dynamically provisioned PersistentVolumes of this storage class are created with these
	// mountOptions, e.g. ["ro", "soft"]. Not validated - mount of the PVs will simply fail if one is
	// invalid.
	MountOptions []string `json:"mountOptions"`
	// Parameters holds the parameters for the provisioner that should create volumes of this storage
	// class.
	Parameters OptIoK8sAPIStorageV1StorageClassParameters `json:"parameters"`
	// Provisioner indicates the type of the provisioner.
	Provisioner string `json:"provisioner"`
	// Dynamically provisioned PersistentVolumes of this storage class are created with this
	// reclaimPolicy. Defaults to Delete.
	ReclaimPolicy OptString `json:"reclaimPolicy"`
	// VolumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound.  When
	// unset, VolumeBindingImmediate is used. This field is only honored by servers that enable the
	// VolumeScheduling feature.
	VolumeBindingMode OptString `json:"volumeBindingMode"`
}

// GetAllowVolumeExpansion returns the value of AllowVolumeExpansion.
func (s *IoK8sAPIStorageV1StorageClass) GetAllowVolumeExpansion() OptBool {
	return s.AllowVolumeExpansion
}

// GetAllowedTopologies returns the value of AllowedTopologies.
func (s *IoK8sAPIStorageV1StorageClass) GetAllowedTopologies() []IoK8sAPICoreV1TopologySelectorTerm {
	return s.AllowedTopologies
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIStorageV1StorageClass) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIStorageV1StorageClass) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIStorageV1StorageClass) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetMountOptions returns the value of MountOptions.
func (s *IoK8sAPIStorageV1StorageClass) GetMountOptions() []string {
	return s.MountOptions
}

// GetParameters returns the value of Parameters.
func (s *IoK8sAPIStorageV1StorageClass) GetParameters() OptIoK8sAPIStorageV1StorageClassParameters {
	return s.Parameters
}

// GetProvisioner returns the value of Provisioner.
func (s *IoK8sAPIStorageV1StorageClass) GetProvisioner() string {
	return s.Provisioner
}

// GetReclaimPolicy returns the value of ReclaimPolicy.
func (s *IoK8sAPIStorageV1StorageClass) GetReclaimPolicy() OptString {
	return s.ReclaimPolicy
}

// GetVolumeBindingMode returns the value of VolumeBindingMode.
func (s *IoK8sAPIStorageV1StorageClass) GetVolumeBindingMode() OptString {
	return s.VolumeBindingMode
}

// SetAllowVolumeExpansion sets the value of AllowVolumeExpansion.
func (s *IoK8sAPIStorageV1StorageClass) SetAllowVolumeExpansion(val OptBool) {
	s.AllowVolumeExpansion = val
}

// SetAllowedTopologies sets the value of AllowedTopologies.
func (s *IoK8sAPIStorageV1StorageClass) SetAllowedTopologies(val []IoK8sAPICoreV1TopologySelectorTerm) {
	s.AllowedTopologies = val
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIStorageV1StorageClass) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIStorageV1StorageClass) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIStorageV1StorageClass) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetMountOptions sets the value of MountOptions.
func (s *IoK8sAPIStorageV1StorageClass) SetMountOptions(val []string) {
	s.MountOptions = val
}

// SetParameters sets the value of Parameters.
func (s *IoK8sAPIStorageV1StorageClass) SetParameters(val OptIoK8sAPIStorageV1StorageClassParameters) {
	s.Parameters = val
}

// SetProvisioner sets the value of Provisioner.
func (s *IoK8sAPIStorageV1StorageClass) SetProvisioner(val string) {
	s.Provisioner = val
}

// SetReclaimPolicy sets the value of ReclaimPolicy.
func (s *IoK8sAPIStorageV1StorageClass) SetReclaimPolicy(val OptString) {
	s.ReclaimPolicy = val
}

// SetVolumeBindingMode sets the value of VolumeBindingMode.
func (s *IoK8sAPIStorageV1StorageClass) SetVolumeBindingMode(val OptString) {
	s.VolumeBindingMode = val
}

func (*IoK8sAPIStorageV1StorageClass) readStorageV1StorageClassRes() {}

// StorageClassList is a collection of storage classes.
// Ref: #/components/schemas/io.k8s.api.storage.v1.StorageClassList
type IoK8sAPIStorageV1StorageClassList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Items is the list of StorageClasses.
	Items []IoK8sAPIStorageV1StorageClass `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIStorageV1StorageClassList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPIStorageV1StorageClassList) GetItems() []IoK8sAPIStorageV1StorageClass {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIStorageV1StorageClassList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIStorageV1StorageClassList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIStorageV1StorageClassList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPIStorageV1StorageClassList) SetItems(val []IoK8sAPIStorageV1StorageClass) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIStorageV1StorageClassList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIStorageV1StorageClassList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPIStorageV1StorageClassList) listStorageV1StorageClassRes() {}

// Parameters holds the parameters for the provisioner that should create volumes of this storage
// class.
type IoK8sAPIStorageV1StorageClassParameters map[string]string

func (s *IoK8sAPIStorageV1StorageClassParameters) init() IoK8sAPIStorageV1StorageClassParameters {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// TokenRequest contains parameters of a service account token.
// Ref: #/components/schemas/io.k8s.api.storage.v1.TokenRequest
type IoK8sAPIStorageV1TokenRequest struct {
	// Audience is the intended audience of the token in "TokenRequestSpec". It will default to the
	// audiences of kube apiserver.
	Audience string `json:"audience"`
	// ExpirationSeconds is the duration of validity of the token in "TokenRequestSpec". It has the same
	// default value of "ExpirationSeconds" in "TokenRequestSpec".
	ExpirationSeconds OptInt64 `json:"expirationSeconds"`
}

// GetAudience returns the value of Audience.
func (s *IoK8sAPIStorageV1TokenRequest) GetAudience() string {
	return s.Audience
}

// GetExpirationSeconds returns the value of ExpirationSeconds.
func (s *IoK8sAPIStorageV1TokenRequest) GetExpirationSeconds() OptInt64 {
	return s.ExpirationSeconds
}

// SetAudience sets the value of Audience.
func (s *IoK8sAPIStorageV1TokenRequest) SetAudience(val string) {
	s.Audience = val
}

// SetExpirationSeconds sets the value of ExpirationSeconds.
func (s *IoK8sAPIStorageV1TokenRequest) SetExpirationSeconds(val OptInt64) {
	s.ExpirationSeconds = val
}

// VolumeAttachment captures the intent to attach or detach the specified volume to/from the
// specified node.
// VolumeAttachment objects are non-namespaced.
// Ref: #/components/schemas/io.k8s.api.storage.v1.VolumeAttachment
type IoK8sAPIStorageV1VolumeAttachment struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                   `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta `json:"metadata"`
	Spec     IoK8sAPIStorageV1VolumeAttachmentSpec       `json:"spec"`
	Status   OptIoK8sAPIStorageV1VolumeAttachmentStatus  `json:"status"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIStorageV1VolumeAttachment) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIStorageV1VolumeAttachment) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIStorageV1VolumeAttachment) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetSpec returns the value of Spec.
func (s *IoK8sAPIStorageV1VolumeAttachment) GetSpec() IoK8sAPIStorageV1VolumeAttachmentSpec {
	return s.Spec
}

// GetStatus returns the value of Status.
func (s *IoK8sAPIStorageV1VolumeAttachment) GetStatus() OptIoK8sAPIStorageV1VolumeAttachmentStatus {
	return s.Status
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIStorageV1VolumeAttachment) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIStorageV1VolumeAttachment) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIStorageV1VolumeAttachment) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetSpec sets the value of Spec.
func (s *IoK8sAPIStorageV1VolumeAttachment) SetSpec(val IoK8sAPIStorageV1VolumeAttachmentSpec) {
	s.Spec = val
}

// SetStatus sets the value of Status.
func (s *IoK8sAPIStorageV1VolumeAttachment) SetStatus(val OptIoK8sAPIStorageV1VolumeAttachmentStatus) {
	s.Status = val
}

func (*IoK8sAPIStorageV1VolumeAttachment) readStorageV1VolumeAttachmentRes()       {}
func (*IoK8sAPIStorageV1VolumeAttachment) readStorageV1VolumeAttachmentStatusRes() {}

// VolumeAttachmentList is a collection of VolumeAttachment objects.
// Ref: #/components/schemas/io.k8s.api.storage.v1.VolumeAttachmentList
type IoK8sAPIStorageV1VolumeAttachmentList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Items is the list of VolumeAttachments.
	Items []IoK8sAPIStorageV1VolumeAttachment `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIStorageV1VolumeAttachmentList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPIStorageV1VolumeAttachmentList) GetItems() []IoK8sAPIStorageV1VolumeAttachment {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIStorageV1VolumeAttachmentList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIStorageV1VolumeAttachmentList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIStorageV1VolumeAttachmentList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPIStorageV1VolumeAttachmentList) SetItems(val []IoK8sAPIStorageV1VolumeAttachment) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIStorageV1VolumeAttachmentList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIStorageV1VolumeAttachmentList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPIStorageV1VolumeAttachmentList) listStorageV1VolumeAttachmentRes() {}

// VolumeAttachmentSource represents a volume that should be attached. Right now only
// PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes
// in pods. Exactly one member can be set.
// Ref: #/components/schemas/io.k8s.api.storage.v1.VolumeAttachmentSource
type IoK8sAPIStorageV1VolumeAttachmentSource struct {
	InlineVolumeSpec OptIoK8sAPICoreV1PersistentVolumeSpec `json:"inlineVolumeSpec"`
	// Name of the persistent volume to attach.
	PersistentVolumeName OptString `json:"persistentVolumeName"`
}

// GetInlineVolumeSpec returns the value of InlineVolumeSpec.
func (s *IoK8sAPIStorageV1VolumeAttachmentSource) GetInlineVolumeSpec() OptIoK8sAPICoreV1PersistentVolumeSpec {
	return s.InlineVolumeSpec
}

// GetPersistentVolumeName returns the value of PersistentVolumeName.
func (s *IoK8sAPIStorageV1VolumeAttachmentSource) GetPersistentVolumeName() OptString {
	return s.PersistentVolumeName
}

// SetInlineVolumeSpec sets the value of InlineVolumeSpec.
func (s *IoK8sAPIStorageV1VolumeAttachmentSource) SetInlineVolumeSpec(val OptIoK8sAPICoreV1PersistentVolumeSpec) {
	s.InlineVolumeSpec = val
}

// SetPersistentVolumeName sets the value of PersistentVolumeName.
func (s *IoK8sAPIStorageV1VolumeAttachmentSource) SetPersistentVolumeName(val OptString) {
	s.PersistentVolumeName = val
}

// VolumeAttachmentSpec is the specification of a VolumeAttachment request.
// Ref: #/components/schemas/io.k8s.api.storage.v1.VolumeAttachmentSpec
type IoK8sAPIStorageV1VolumeAttachmentSpec struct {
	// Attacher indicates the name of the volume driver that MUST handle this request. This is the name
	// returned by GetPluginName().
	Attacher string `json:"attacher"`
	// The node that the volume should be attached to.
	NodeName string                                  `json:"nodeName"`
	Source   IoK8sAPIStorageV1VolumeAttachmentSource `json:"source"`
}

// GetAttacher returns the value of Attacher.
func (s *IoK8sAPIStorageV1VolumeAttachmentSpec) GetAttacher() string {
	return s.Attacher
}

// GetNodeName returns the value of NodeName.
func (s *IoK8sAPIStorageV1VolumeAttachmentSpec) GetNodeName() string {
	return s.NodeName
}

// GetSource returns the value of Source.
func (s *IoK8sAPIStorageV1VolumeAttachmentSpec) GetSource() IoK8sAPIStorageV1VolumeAttachmentSource {
	return s.Source
}

// SetAttacher sets the value of Attacher.
func (s *IoK8sAPIStorageV1VolumeAttachmentSpec) SetAttacher(val string) {
	s.Attacher = val
}

// SetNodeName sets the value of NodeName.
func (s *IoK8sAPIStorageV1VolumeAttachmentSpec) SetNodeName(val string) {
	s.NodeName = val
}

// SetSource sets the value of Source.
func (s *IoK8sAPIStorageV1VolumeAttachmentSpec) SetSource(val IoK8sAPIStorageV1VolumeAttachmentSource) {
	s.Source = val
}

// VolumeAttachmentStatus is the status of a VolumeAttachment request.
// Ref: #/components/schemas/io.k8s.api.storage.v1.VolumeAttachmentStatus
type IoK8sAPIStorageV1VolumeAttachmentStatus struct {
	AttachError OptIoK8sAPIStorageV1VolumeError `json:"attachError"`
	// Indicates the volume is successfully attached. This field must only be set by the entity
	// completing the attach operation, i.e. the external-attacher.
	Attached bool `json:"attached"`
	// Upon successful attach, this field is populated with any information returned by the attach
	// operation that must be passed into subsequent WaitForAttach or Mount calls. This field must only
	// be set by the entity completing the attach operation, i.e. the external-attacher.
	AttachmentMetadata OptIoK8sAPIStorageV1VolumeAttachmentStatusAttachmentMetadata `json:"attachmentMetadata"`
	DetachError        OptIoK8sAPIStorageV1VolumeError                              `json:"detachError"`
}

// GetAttachError returns the value of AttachError.
func (s *IoK8sAPIStorageV1VolumeAttachmentStatus) GetAttachError() OptIoK8sAPIStorageV1VolumeError {
	return s.AttachError
}

// GetAttached returns the value of Attached.
func (s *IoK8sAPIStorageV1VolumeAttachmentStatus) GetAttached() bool {
	return s.Attached
}

// GetAttachmentMetadata returns the value of AttachmentMetadata.
func (s *IoK8sAPIStorageV1VolumeAttachmentStatus) GetAttachmentMetadata() OptIoK8sAPIStorageV1VolumeAttachmentStatusAttachmentMetadata {
	return s.AttachmentMetadata
}

// GetDetachError returns the value of DetachError.
func (s *IoK8sAPIStorageV1VolumeAttachmentStatus) GetDetachError() OptIoK8sAPIStorageV1VolumeError {
	return s.DetachError
}

// SetAttachError sets the value of AttachError.
func (s *IoK8sAPIStorageV1VolumeAttachmentStatus) SetAttachError(val OptIoK8sAPIStorageV1VolumeError) {
	s.AttachError = val
}

// SetAttached sets the value of Attached.
func (s *IoK8sAPIStorageV1VolumeAttachmentStatus) SetAttached(val bool) {
	s.Attached = val
}

// SetAttachmentMetadata sets the value of AttachmentMetadata.
func (s *IoK8sAPIStorageV1VolumeAttachmentStatus) SetAttachmentMetadata(val OptIoK8sAPIStorageV1VolumeAttachmentStatusAttachmentMetadata) {
	s.AttachmentMetadata = val
}

// SetDetachError sets the value of DetachError.
func (s *IoK8sAPIStorageV1VolumeAttachmentStatus) SetDetachError(val OptIoK8sAPIStorageV1VolumeError) {
	s.DetachError = val
}

// Upon successful attach, this field is populated with any information returned by the attach
// operation that must be passed into subsequent WaitForAttach or Mount calls. This field must only
// be set by the entity completing the attach operation, i.e. the external-attacher.
type IoK8sAPIStorageV1VolumeAttachmentStatusAttachmentMetadata map[string]string

func (s *IoK8sAPIStorageV1VolumeAttachmentStatusAttachmentMetadata) init() IoK8sAPIStorageV1VolumeAttachmentStatusAttachmentMetadata {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// VolumeError captures an error encountered during a volume operation.
// Ref: #/components/schemas/io.k8s.api.storage.v1.VolumeError
type IoK8sAPIStorageV1VolumeError struct {
	// String detailing the error encountered during Attach or Detach operation. This string may be
	// logged, so it should not contain sensitive information.
	Message OptString                             `json:"message"`
	Time    OptIoK8sApimachineryPkgApisMetaV1Time `json:"time"`
}

// GetMessage returns the value of Message.
func (s *IoK8sAPIStorageV1VolumeError) GetMessage() OptString {
	return s.Message
}

// GetTime returns the value of Time.
func (s *IoK8sAPIStorageV1VolumeError) GetTime() OptIoK8sApimachineryPkgApisMetaV1Time {
	return s.Time
}

// SetMessage sets the value of Message.
func (s *IoK8sAPIStorageV1VolumeError) SetMessage(val OptString) {
	s.Message = val
}

// SetTime sets the value of Time.
func (s *IoK8sAPIStorageV1VolumeError) SetTime(val OptIoK8sApimachineryPkgApisMetaV1Time) {
	s.Time = val
}

// VolumeNodeResources is a set of resource limits for scheduling of volumes.
// Ref: #/components/schemas/io.k8s.api.storage.v1.VolumeNodeResources
type IoK8sAPIStorageV1VolumeNodeResources struct {
	// Maximum number of unique volumes managed by the CSI driver that can be used on a node. A volume
	// that is both attached and mounted on a node is considered to be used once, not twice. The same
	// rule applies for a unique volume that is shared among multiple pods on the same node. If this
	// field is not specified, then the supported number of volumes on this node is unbounded.
	Count OptInt32 `json:"count"`
}

// GetCount returns the value of Count.
func (s *IoK8sAPIStorageV1VolumeNodeResources) GetCount() OptInt32 {
	return s.Count
}

// SetCount sets the value of Count.
func (s *IoK8sAPIStorageV1VolumeNodeResources) SetCount(val OptInt32) {
	s.Count = val
}

// CSIStorageCapacity stores the result of one CSI GetCapacity call. For a given StorageClass, this
// describes the available capacity in a particular topology segment.  This can be used when
// considering where to instantiate new PersistentVolumes.
// For example this can express things like: - StorageClass "standard" has "1234 GiB" available in
// "topology.kubernetes.io/zone=us-east1" - StorageClass "localssd" has "10 GiB" available in
// "kubernetes.io/hostname=knode-abc123"
// The following three cases all imply that no capacity is available for a certain combination: - no
// object exists with suitable topology and storage class name - such an object exists, but the
// capacity is unset - such an object exists, but the capacity is zero
// The producer of these objects can decide which approach is more suitable.
// They are consumed by the kube-scheduler if the CSIStorageCapacity beta feature gate is enabled
// there and a CSI driver opts into capacity-aware scheduling with CSIDriver.StorageCapacity.
// Ref: #/components/schemas/io.k8s.api.storage.v1alpha1.CSIStorageCapacity
type IoK8sAPIStorageV1alpha1CSIStorageCapacity struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString                                  `json:"apiVersion"`
	Capacity   OptIoK8sApimachineryPkgAPIResourceQuantity `json:"capacity"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind              OptString                                      `json:"kind"`
	MaximumVolumeSize OptIoK8sApimachineryPkgAPIResourceQuantity     `json:"maximumVolumeSize"`
	Metadata          OptIoK8sApimachineryPkgApisMetaV1ObjectMeta    `json:"metadata"`
	NodeTopology      OptIoK8sApimachineryPkgApisMetaV1LabelSelector `json:"nodeTopology"`
	// The name of the StorageClass that the reported capacity applies to. It must meet the same
	// requirements as the name of a StorageClass object (non-empty, DNS subdomain). If that object no
	// longer exists, the CSIStorageCapacity object is obsolete and should be removed by its creator.
	// This field is immutable.
	StorageClassName string `json:"storageClassName"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIStorageV1alpha1CSIStorageCapacity) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetCapacity returns the value of Capacity.
func (s *IoK8sAPIStorageV1alpha1CSIStorageCapacity) GetCapacity() OptIoK8sApimachineryPkgAPIResourceQuantity {
	return s.Capacity
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIStorageV1alpha1CSIStorageCapacity) GetKind() OptString {
	return s.Kind
}

// GetMaximumVolumeSize returns the value of MaximumVolumeSize.
func (s *IoK8sAPIStorageV1alpha1CSIStorageCapacity) GetMaximumVolumeSize() OptIoK8sApimachineryPkgAPIResourceQuantity {
	return s.MaximumVolumeSize
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIStorageV1alpha1CSIStorageCapacity) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetNodeTopology returns the value of NodeTopology.
func (s *IoK8sAPIStorageV1alpha1CSIStorageCapacity) GetNodeTopology() OptIoK8sApimachineryPkgApisMetaV1LabelSelector {
	return s.NodeTopology
}

// GetStorageClassName returns the value of StorageClassName.
func (s *IoK8sAPIStorageV1alpha1CSIStorageCapacity) GetStorageClassName() string {
	return s.StorageClassName
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIStorageV1alpha1CSIStorageCapacity) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetCapacity sets the value of Capacity.
func (s *IoK8sAPIStorageV1alpha1CSIStorageCapacity) SetCapacity(val OptIoK8sApimachineryPkgAPIResourceQuantity) {
	s.Capacity = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIStorageV1alpha1CSIStorageCapacity) SetKind(val OptString) {
	s.Kind = val
}

// SetMaximumVolumeSize sets the value of MaximumVolumeSize.
func (s *IoK8sAPIStorageV1alpha1CSIStorageCapacity) SetMaximumVolumeSize(val OptIoK8sApimachineryPkgAPIResourceQuantity) {
	s.MaximumVolumeSize = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIStorageV1alpha1CSIStorageCapacity) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetNodeTopology sets the value of NodeTopology.
func (s *IoK8sAPIStorageV1alpha1CSIStorageCapacity) SetNodeTopology(val OptIoK8sApimachineryPkgApisMetaV1LabelSelector) {
	s.NodeTopology = val
}

// SetStorageClassName sets the value of StorageClassName.
func (s *IoK8sAPIStorageV1alpha1CSIStorageCapacity) SetStorageClassName(val string) {
	s.StorageClassName = val
}

func (*IoK8sAPIStorageV1alpha1CSIStorageCapacity) readStorageV1alpha1NamespacedCSIStorageCapacityRes() {
}

// CSIStorageCapacityList is a collection of CSIStorageCapacity objects.
// Ref: #/components/schemas/io.k8s.api.storage.v1alpha1.CSIStorageCapacityList
type IoK8sAPIStorageV1alpha1CSIStorageCapacityList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Items is the list of CSIStorageCapacity objects.
	Items []IoK8sAPIStorageV1alpha1CSIStorageCapacity `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIStorageV1alpha1CSIStorageCapacityList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPIStorageV1alpha1CSIStorageCapacityList) GetItems() []IoK8sAPIStorageV1alpha1CSIStorageCapacity {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIStorageV1alpha1CSIStorageCapacityList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIStorageV1alpha1CSIStorageCapacityList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIStorageV1alpha1CSIStorageCapacityList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPIStorageV1alpha1CSIStorageCapacityList) SetItems(val []IoK8sAPIStorageV1alpha1CSIStorageCapacity) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIStorageV1alpha1CSIStorageCapacityList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIStorageV1alpha1CSIStorageCapacityList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPIStorageV1alpha1CSIStorageCapacityList) listStorageV1alpha1CSIStorageCapacityForAllNamespacesRes() {
}
func (*IoK8sAPIStorageV1alpha1CSIStorageCapacityList) listStorageV1alpha1NamespacedCSIStorageCapacityRes() {
}

// CSIStorageCapacity stores the result of one CSI GetCapacity call. For a given StorageClass, this
// describes the available capacity in a particular topology segment.  This can be used when
// considering where to instantiate new PersistentVolumes.
// For example this can express things like: - StorageClass "standard" has "1234 GiB" available in
// "topology.kubernetes.io/zone=us-east1" - StorageClass "localssd" has "10 GiB" available in
// "kubernetes.io/hostname=knode-abc123"
// The following three cases all imply that no capacity is available for a certain combination: - no
// object exists with suitable topology and storage class name - such an object exists, but the
// capacity is unset - such an object exists, but the capacity is zero
// The producer of these objects can decide which approach is more suitable.
// They are consumed by the kube-scheduler if the CSIStorageCapacity beta feature gate is enabled
// there and a CSI driver opts into capacity-aware scheduling with CSIDriver.StorageCapacity.
// Ref: #/components/schemas/io.k8s.api.storage.v1beta1.CSIStorageCapacity
type IoK8sAPIStorageV1beta1CSIStorageCapacity struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString                                  `json:"apiVersion"`
	Capacity   OptIoK8sApimachineryPkgAPIResourceQuantity `json:"capacity"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind              OptString                                      `json:"kind"`
	MaximumVolumeSize OptIoK8sApimachineryPkgAPIResourceQuantity     `json:"maximumVolumeSize"`
	Metadata          OptIoK8sApimachineryPkgApisMetaV1ObjectMeta    `json:"metadata"`
	NodeTopology      OptIoK8sApimachineryPkgApisMetaV1LabelSelector `json:"nodeTopology"`
	// The name of the StorageClass that the reported capacity applies to. It must meet the same
	// requirements as the name of a StorageClass object (non-empty, DNS subdomain). If that object no
	// longer exists, the CSIStorageCapacity object is obsolete and should be removed by its creator.
	// This field is immutable.
	StorageClassName string `json:"storageClassName"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIStorageV1beta1CSIStorageCapacity) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetCapacity returns the value of Capacity.
func (s *IoK8sAPIStorageV1beta1CSIStorageCapacity) GetCapacity() OptIoK8sApimachineryPkgAPIResourceQuantity {
	return s.Capacity
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIStorageV1beta1CSIStorageCapacity) GetKind() OptString {
	return s.Kind
}

// GetMaximumVolumeSize returns the value of MaximumVolumeSize.
func (s *IoK8sAPIStorageV1beta1CSIStorageCapacity) GetMaximumVolumeSize() OptIoK8sApimachineryPkgAPIResourceQuantity {
	return s.MaximumVolumeSize
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIStorageV1beta1CSIStorageCapacity) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetNodeTopology returns the value of NodeTopology.
func (s *IoK8sAPIStorageV1beta1CSIStorageCapacity) GetNodeTopology() OptIoK8sApimachineryPkgApisMetaV1LabelSelector {
	return s.NodeTopology
}

// GetStorageClassName returns the value of StorageClassName.
func (s *IoK8sAPIStorageV1beta1CSIStorageCapacity) GetStorageClassName() string {
	return s.StorageClassName
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIStorageV1beta1CSIStorageCapacity) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetCapacity sets the value of Capacity.
func (s *IoK8sAPIStorageV1beta1CSIStorageCapacity) SetCapacity(val OptIoK8sApimachineryPkgAPIResourceQuantity) {
	s.Capacity = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIStorageV1beta1CSIStorageCapacity) SetKind(val OptString) {
	s.Kind = val
}

// SetMaximumVolumeSize sets the value of MaximumVolumeSize.
func (s *IoK8sAPIStorageV1beta1CSIStorageCapacity) SetMaximumVolumeSize(val OptIoK8sApimachineryPkgAPIResourceQuantity) {
	s.MaximumVolumeSize = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIStorageV1beta1CSIStorageCapacity) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetNodeTopology sets the value of NodeTopology.
func (s *IoK8sAPIStorageV1beta1CSIStorageCapacity) SetNodeTopology(val OptIoK8sApimachineryPkgApisMetaV1LabelSelector) {
	s.NodeTopology = val
}

// SetStorageClassName sets the value of StorageClassName.
func (s *IoK8sAPIStorageV1beta1CSIStorageCapacity) SetStorageClassName(val string) {
	s.StorageClassName = val
}

func (*IoK8sAPIStorageV1beta1CSIStorageCapacity) readStorageV1beta1NamespacedCSIStorageCapacityRes() {
}

// CSIStorageCapacityList is a collection of CSIStorageCapacity objects.
// Ref: #/components/schemas/io.k8s.api.storage.v1beta1.CSIStorageCapacityList
type IoK8sAPIStorageV1beta1CSIStorageCapacityList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Items is the list of CSIStorageCapacity objects.
	Items []IoK8sAPIStorageV1beta1CSIStorageCapacity `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sAPIStorageV1beta1CSIStorageCapacityList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sAPIStorageV1beta1CSIStorageCapacityList) GetItems() []IoK8sAPIStorageV1beta1CSIStorageCapacity {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sAPIStorageV1beta1CSIStorageCapacityList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sAPIStorageV1beta1CSIStorageCapacityList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sAPIStorageV1beta1CSIStorageCapacityList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sAPIStorageV1beta1CSIStorageCapacityList) SetItems(val []IoK8sAPIStorageV1beta1CSIStorageCapacity) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sAPIStorageV1beta1CSIStorageCapacityList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sAPIStorageV1beta1CSIStorageCapacityList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sAPIStorageV1beta1CSIStorageCapacityList) listStorageV1beta1CSIStorageCapacityForAllNamespacesRes() {
}
func (*IoK8sAPIStorageV1beta1CSIStorageCapacityList) listStorageV1beta1NamespacedCSIStorageCapacityRes() {
}

// CustomResourceColumnDefinition specifies a column for server side printing.
// Ref: #/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceColumnDefinition
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceColumnDefinition struct {
	// Description is a human readable description of this column.
	Description OptString `json:"description"`
	// Format is an optional OpenAPI type definition for this column. The 'name' format is applied to the
	// primary identifier column to assist in clients identifying column is the resource name. See
	// https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.
	Format OptString `json:"format"`
	// JsonPath is a simple JSON path (i.e. with array notation) which is evaluated against each custom
	// resource to produce the value for this column.
	JsonPath string `json:"jsonPath"`
	// Name is a human readable name for the column.
	Name string `json:"name"`
	// Priority is an integer defining the relative importance of this column compared to others. Lower
	// numbers are considered higher priority. Columns that may be omitted in limited space scenarios
	// should be given a priority greater than 0.
	Priority OptInt32 `json:"priority"`
	// Type is an OpenAPI type definition for this column. See https://github.
	// com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.
	Type string `json:"type"`
}

// GetDescription returns the value of Description.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceColumnDefinition) GetDescription() OptString {
	return s.Description
}

// GetFormat returns the value of Format.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceColumnDefinition) GetFormat() OptString {
	return s.Format
}

// GetJsonPath returns the value of JsonPath.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceColumnDefinition) GetJsonPath() string {
	return s.JsonPath
}

// GetName returns the value of Name.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceColumnDefinition) GetName() string {
	return s.Name
}

// GetPriority returns the value of Priority.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceColumnDefinition) GetPriority() OptInt32 {
	return s.Priority
}

// GetType returns the value of Type.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceColumnDefinition) GetType() string {
	return s.Type
}

// SetDescription sets the value of Description.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceColumnDefinition) SetDescription(val OptString) {
	s.Description = val
}

// SetFormat sets the value of Format.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceColumnDefinition) SetFormat(val OptString) {
	s.Format = val
}

// SetJsonPath sets the value of JsonPath.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceColumnDefinition) SetJsonPath(val string) {
	s.JsonPath = val
}

// SetName sets the value of Name.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceColumnDefinition) SetName(val string) {
	s.Name = val
}

// SetPriority sets the value of Priority.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceColumnDefinition) SetPriority(val OptInt32) {
	s.Priority = val
}

// SetType sets the value of Type.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceColumnDefinition) SetType(val string) {
	s.Type = val
}

// CustomResourceConversion describes how to convert different versions of a CR.
// Ref: #/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceConversion
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion struct {
	// Strategy specifies how custom resources are converted between versions. Allowed values are: -
	// `None`: The converter only change the apiVersion and would not touch any other field in the custom
	// resource. - `Webhook`: API Server will call to an external webhook to do the conversion.
	// Additional information
	// is needed for this option. This requires spec.preserveUnknownFields to be false, and spec.
	// conversion.webhook to be set.
	Strategy string                                                                `json:"strategy"`
	Webhook  OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion `json:"webhook"`
}

// GetStrategy returns the value of Strategy.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion) GetStrategy() string {
	return s.Strategy
}

// GetWebhook returns the value of Webhook.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion) GetWebhook() OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion {
	return s.Webhook
}

// SetStrategy sets the value of Strategy.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion) SetStrategy(val string) {
	s.Strategy = val
}

// SetWebhook sets the value of Webhook.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion) SetWebhook(val OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion) {
	s.Webhook = val
}

// CustomResourceDefinition represents a resource that should be exposed on the API server.  Its name
// MUST be in the format <.spec.name>.<.spec.group>.
// Ref: #/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                                                          `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta                                        `json:"metadata"`
	Spec     IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec      `json:"spec"`
	Status   OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus `json:"status"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetSpec returns the value of Spec.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition) GetSpec() IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec {
	return s.Spec
}

// GetStatus returns the value of Status.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition) GetStatus() OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus {
	return s.Status
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetSpec sets the value of Spec.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition) SetSpec(val IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec) {
	s.Spec = val
}

// SetStatus sets the value of Status.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition) SetStatus(val OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus) {
	s.Status = val
}

func (*IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition) readApiextensionsV1CustomResourceDefinitionRes() {
}
func (*IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition) readApiextensionsV1CustomResourceDefinitionStatusRes() {
}

// CustomResourceDefinitionCondition contains details for the current condition of this pod.
// Ref: #/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionCondition
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionCondition struct {
	LastTransitionTime OptIoK8sApimachineryPkgApisMetaV1Time `json:"lastTransitionTime"`
	// Message is a human-readable message indicating details about last transition.
	Message OptString `json:"message"`
	// Reason is a unique, one-word, CamelCase reason for the condition's last transition.
	Reason OptString `json:"reason"`
	// Status is the status of the condition. Can be True, False, Unknown.
	Status string `json:"status"`
	// Type is the type of the condition. Types include Established, NamesAccepted and Terminating.
	Type string `json:"type"`
}

// GetLastTransitionTime returns the value of LastTransitionTime.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionCondition) GetLastTransitionTime() OptIoK8sApimachineryPkgApisMetaV1Time {
	return s.LastTransitionTime
}

// GetMessage returns the value of Message.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionCondition) GetMessage() OptString {
	return s.Message
}

// GetReason returns the value of Reason.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionCondition) GetReason() OptString {
	return s.Reason
}

// GetStatus returns the value of Status.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionCondition) GetStatus() string {
	return s.Status
}

// GetType returns the value of Type.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionCondition) GetType() string {
	return s.Type
}

// SetLastTransitionTime sets the value of LastTransitionTime.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionCondition) SetLastTransitionTime(val OptIoK8sApimachineryPkgApisMetaV1Time) {
	s.LastTransitionTime = val
}

// SetMessage sets the value of Message.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionCondition) SetMessage(val OptString) {
	s.Message = val
}

// SetReason sets the value of Reason.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionCondition) SetReason(val OptString) {
	s.Reason = val
}

// SetStatus sets the value of Status.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionCondition) SetStatus(val string) {
	s.Status = val
}

// SetType sets the value of Type.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionCondition) SetType(val string) {
	s.Type = val
}

// CustomResourceDefinitionList is a list of CustomResourceDefinition objects.
// Ref: #/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionList
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Items list individual CustomResourceDefinition objects.
	Items []IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList) GetItems() []IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList) SetItems(val []IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList) listApiextensionsV1CustomResourceDefinitionRes() {
}

// CustomResourceDefinitionNames indicates the names to serve this CustomResourceDefinition.
// Ref: #/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionNames
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames struct {
	// Categories is a list of grouped resources this custom resource belongs to (e.g. 'all'). This is
	// published in API discovery documents, and used by clients to support invocations like `kubectl get
	// all`.
	Categories []string `json:"categories"`
	// Kind is the serialized kind of the resource. It is normally CamelCase and singular. Custom
	// resource instances will use this value as the `kind` attribute in API calls.
	Kind string `json:"kind"`
	// ListKind is the serialized kind of the list for this resource. Defaults to "`kind`List".
	ListKind OptString `json:"listKind"`
	// Plural is the plural name of the resource to serve. The custom resources are served under
	// `/apis/<group>/<version>/.../<plural>`. Must match the name of the CustomResourceDefinition (in
	// the form `<names.plural>.<group>`). Must be all lowercase.
	Plural string `json:"plural"`
	// ShortNames are short names for the resource, exposed in API discovery documents, and used by
	// clients to support invocations like `kubectl get <shortname>`. It must be all lowercase.
	ShortNames []string `json:"shortNames"`
	// Singular is the singular name of the resource. It must be all lowercase. Defaults to lowercased
	// `kind`.
	Singular OptString `json:"singular"`
}

// GetCategories returns the value of Categories.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames) GetCategories() []string {
	return s.Categories
}

// GetKind returns the value of Kind.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames) GetKind() string {
	return s.Kind
}

// GetListKind returns the value of ListKind.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames) GetListKind() OptString {
	return s.ListKind
}

// GetPlural returns the value of Plural.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames) GetPlural() string {
	return s.Plural
}

// GetShortNames returns the value of ShortNames.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames) GetShortNames() []string {
	return s.ShortNames
}

// GetSingular returns the value of Singular.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames) GetSingular() OptString {
	return s.Singular
}

// SetCategories sets the value of Categories.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames) SetCategories(val []string) {
	s.Categories = val
}

// SetKind sets the value of Kind.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames) SetKind(val string) {
	s.Kind = val
}

// SetListKind sets the value of ListKind.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames) SetListKind(val OptString) {
	s.ListKind = val
}

// SetPlural sets the value of Plural.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames) SetPlural(val string) {
	s.Plural = val
}

// SetShortNames sets the value of ShortNames.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames) SetShortNames(val []string) {
	s.ShortNames = val
}

// SetSingular sets the value of Singular.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames) SetSingular(val OptString) {
	s.Singular = val
}

// CustomResourceDefinitionSpec describes how a user wants their resource to appear.
// Ref: #/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionSpec
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec struct {
	Conversion OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion `json:"conversion"`
	// Group is the API group of the defined custom resource. The custom resources are served under
	// `/apis/<group>/...`. Must match the name of the CustomResourceDefinition (in the form `<names.
	// plural>.<group>`).
	Group string                                                                         `json:"group"`
	Names IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames `json:"names"`
	// PreserveUnknownFields indicates that object fields which are not specified in the OpenAPI schema
	// should be preserved when persisting to storage. apiVersion, kind, metadata and known fields inside
	// metadata are always preserved. This field is deprecated in favor of setting
	// `x-preserve-unknown-fields` to true in `spec.versions[*].schema.openAPIV3Schema`. See
	// https://kubernetes.
	// io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/#pruning-versus-preserving-unknown-fields for details.
	PreserveUnknownFields OptBool `json:"preserveUnknownFields"`
	// Scope indicates whether the defined custom resource is cluster- or namespace-scoped. Allowed
	// values are `Cluster` and `Namespaced`.
	Scope string `json:"scope"`
	// Versions is the list of all API versions of the defined custom resource. Version names are used to
	// compute the order in which served versions are listed in API discovery. If the version string is
	// "kube-like", it will sort above non "kube-like" version strings, which are ordered
	// lexicographically. "Kube-like" versions start with a "v", then are followed by a number (the major
	// version), then optionally the string "alpha" or "beta" and another number (the minor version).
	// These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or
	// alpha), and then by comparing major version, then minor version. An example sorted list of
	// versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.
	Versions []IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion `json:"versions"`
}

// GetConversion returns the value of Conversion.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec) GetConversion() OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion {
	return s.Conversion
}

// GetGroup returns the value of Group.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec) GetGroup() string {
	return s.Group
}

// GetNames returns the value of Names.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec) GetNames() IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames {
	return s.Names
}

// GetPreserveUnknownFields returns the value of PreserveUnknownFields.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec) GetPreserveUnknownFields() OptBool {
	return s.PreserveUnknownFields
}

// GetScope returns the value of Scope.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec) GetScope() string {
	return s.Scope
}

// GetVersions returns the value of Versions.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec) GetVersions() []IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion {
	return s.Versions
}

// SetConversion sets the value of Conversion.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec) SetConversion(val OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion) {
	s.Conversion = val
}

// SetGroup sets the value of Group.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec) SetGroup(val string) {
	s.Group = val
}

// SetNames sets the value of Names.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec) SetNames(val IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames) {
	s.Names = val
}

// SetPreserveUnknownFields sets the value of PreserveUnknownFields.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec) SetPreserveUnknownFields(val OptBool) {
	s.PreserveUnknownFields = val
}

// SetScope sets the value of Scope.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec) SetScope(val string) {
	s.Scope = val
}

// SetVersions sets the value of Versions.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec) SetVersions(val []IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion) {
	s.Versions = val
}

// CustomResourceDefinitionStatus indicates the state of the CustomResourceDefinition.
// Ref: #/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionStatus
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus struct {
	AcceptedNames OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames `json:"acceptedNames"`
	// Conditions indicate state for particular aspects of a CustomResourceDefinition.
	Conditions []IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionCondition `json:"conditions"`
	// StoredVersions lists all versions of CustomResources that were ever persisted. Tracking these
	// versions allows a migration path for stored versions in etcd. The field is mutable so a migration
	// controller can finish a migration to another version (ensuring no old objects are left in storage),
	//  and then remove the rest of the versions from this list. Versions may not be removed from `spec.
	// versions` while they exist in this list.
	StoredVersions []string `json:"storedVersions"`
}

// GetAcceptedNames returns the value of AcceptedNames.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus) GetAcceptedNames() OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames {
	return s.AcceptedNames
}

// GetConditions returns the value of Conditions.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus) GetConditions() []IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionCondition {
	return s.Conditions
}

// GetStoredVersions returns the value of StoredVersions.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus) GetStoredVersions() []string {
	return s.StoredVersions
}

// SetAcceptedNames sets the value of AcceptedNames.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus) SetAcceptedNames(val OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames) {
	s.AcceptedNames = val
}

// SetConditions sets the value of Conditions.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus) SetConditions(val []IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionCondition) {
	s.Conditions = val
}

// SetStoredVersions sets the value of StoredVersions.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus) SetStoredVersions(val []string) {
	s.StoredVersions = val
}

// CustomResourceDefinitionVersion describes a version for CRD.
// Ref: #/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionVersion
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion struct {
	// AdditionalPrinterColumns specifies additional columns returned in Table output. See
	// https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables for
	// details. If no columns are specified, a single column displaying the age of the custom resource is
	// used.
	AdditionalPrinterColumns []IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceColumnDefinition `json:"additionalPrinterColumns"`
	// Deprecated indicates this version of the custom resource API is deprecated. When set to true, API
	// requests to this version receive a warning header in the server response. Defaults to false.
	Deprecated OptBool `json:"deprecated"`
	// DeprecationWarning overrides the default warning returned to API clients. May only be set when
	// `deprecated` is true. The default warning indicates this version is deprecated and recommends use
	// of the newest served version of equal or greater stability, if one exists.
	DeprecationWarning OptString `json:"deprecationWarning"`
	// Name is the version name, e.g. “v1”, “v2beta1”, etc. The custom resources are served under
	// this version at `/apis/<group>/<version>/...` if `served` is true.
	Name   string                                                                       `json:"name"`
	Schema OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation `json:"schema"`
	// Served is a flag enabling/disabling this version from being served via REST APIs.
	Served bool `json:"served"`
	// Storage indicates this version should be used when persisting custom resources to storage. There
	// must be exactly one version with storage=true.
	Storage      bool                                                                           `json:"storage"`
	Subresources OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources `json:"subresources"`
}

// GetAdditionalPrinterColumns returns the value of AdditionalPrinterColumns.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion) GetAdditionalPrinterColumns() []IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceColumnDefinition {
	return s.AdditionalPrinterColumns
}

// GetDeprecated returns the value of Deprecated.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion) GetDeprecated() OptBool {
	return s.Deprecated
}

// GetDeprecationWarning returns the value of DeprecationWarning.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion) GetDeprecationWarning() OptString {
	return s.DeprecationWarning
}

// GetName returns the value of Name.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion) GetName() string {
	return s.Name
}

// GetSchema returns the value of Schema.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion) GetSchema() OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation {
	return s.Schema
}

// GetServed returns the value of Served.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion) GetServed() bool {
	return s.Served
}

// GetStorage returns the value of Storage.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion) GetStorage() bool {
	return s.Storage
}

// GetSubresources returns the value of Subresources.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion) GetSubresources() OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources {
	return s.Subresources
}

// SetAdditionalPrinterColumns sets the value of AdditionalPrinterColumns.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion) SetAdditionalPrinterColumns(val []IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceColumnDefinition) {
	s.AdditionalPrinterColumns = val
}

// SetDeprecated sets the value of Deprecated.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion) SetDeprecated(val OptBool) {
	s.Deprecated = val
}

// SetDeprecationWarning sets the value of DeprecationWarning.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion) SetDeprecationWarning(val OptString) {
	s.DeprecationWarning = val
}

// SetName sets the value of Name.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion) SetName(val string) {
	s.Name = val
}

// SetSchema sets the value of Schema.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion) SetSchema(val OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation) {
	s.Schema = val
}

// SetServed sets the value of Served.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion) SetServed(val bool) {
	s.Served = val
}

// SetStorage sets the value of Storage.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion) SetStorage(val bool) {
	s.Storage = val
}

// SetSubresources sets the value of Subresources.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion) SetSubresources(val OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources) {
	s.Subresources = val
}

// CustomResourceSubresourceScale defines how to serve the scale subresource for CustomResources.
// Ref: #/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresourceScale
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale struct {
	// LabelSelectorPath defines the JSON path inside of a custom resource that corresponds to Scale
	// `status.selector`. Only JSON paths without the array notation are allowed. Must be a JSON Path
	// under `.status` or `.spec`. Must be set to work with HorizontalPodAutoscaler. The field pointed by
	// this JSON path must be a string field (not a complex selector struct) which contains a serialized
	// label selector in string form. More info: https://kubernetes.
	// io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions#scale-subresource
	// If there is no value under the given path in the custom resource, the `status.selector` value in
	// the `/scale` subresource will default to the empty string.
	LabelSelectorPath OptString `json:"labelSelectorPath"`
	// SpecReplicasPath defines the JSON path inside of a custom resource that corresponds to Scale `spec.
	// replicas`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.
	// spec`. If there is no value under the given path in the custom resource, the `/scale` subresource
	// will return an error on GET.
	SpecReplicasPath string `json:"specReplicasPath"`
	// StatusReplicasPath defines the JSON path inside of a custom resource that corresponds to Scale
	// `status.replicas`. Only JSON paths without the array notation are allowed. Must be a JSON Path
	// under `.status`. If there is no value under the given path in the custom resource, the `status.
	// replicas` value in the `/scale` subresource will default to 0.
	StatusReplicasPath string `json:"statusReplicasPath"`
}

// GetLabelSelectorPath returns the value of LabelSelectorPath.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale) GetLabelSelectorPath() OptString {
	return s.LabelSelectorPath
}

// GetSpecReplicasPath returns the value of SpecReplicasPath.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale) GetSpecReplicasPath() string {
	return s.SpecReplicasPath
}

// GetStatusReplicasPath returns the value of StatusReplicasPath.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale) GetStatusReplicasPath() string {
	return s.StatusReplicasPath
}

// SetLabelSelectorPath sets the value of LabelSelectorPath.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale) SetLabelSelectorPath(val OptString) {
	s.LabelSelectorPath = val
}

// SetSpecReplicasPath sets the value of SpecReplicasPath.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale) SetSpecReplicasPath(val string) {
	s.SpecReplicasPath = val
}

// SetStatusReplicasPath sets the value of StatusReplicasPath.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale) SetStatusReplicasPath(val string) {
	s.StatusReplicasPath = val
}

// CustomResourceSubresourceStatus defines how to serve the status subresource for CustomResources.
// Status is represented by the `.status` JSON path inside of a CustomResource. When set, * exposes a
// /status subresource for the custom resource * PUT requests to the /status subresource take a
// custom resource object, and ignore changes to anything except the status stanza * PUT/POST/PATCH
// requests to the custom resource ignore changes to the status stanza.
// Ref: #/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresourceStatus
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceStatus struct{}

// CustomResourceSubresources defines the status and scale subresources for CustomResources.
// Ref: #/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresources
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources struct {
	Scale  OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale `json:"scale"`
	Status *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceStatus  `json:"status"`
}

// GetScale returns the value of Scale.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources) GetScale() OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale {
	return s.Scale
}

// GetStatus returns the value of Status.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources) GetStatus() *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceStatus {
	return s.Status
}

// SetScale sets the value of Scale.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources) SetScale(val OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale) {
	s.Scale = val
}

// SetStatus sets the value of Status.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources) SetStatus(val *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceStatus) {
	s.Status = val
}

// CustomResourceValidation is a list of validation methods for CustomResources.
// Ref: #/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceValidation
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation struct {
	OpenAPIV3Schema OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps `json:"openAPIV3Schema"`
}

// GetOpenAPIV3Schema returns the value of OpenAPIV3Schema.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation) GetOpenAPIV3Schema() OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps {
	return s.OpenAPIV3Schema
}

// SetOpenAPIV3Schema sets the value of OpenAPIV3Schema.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation) SetOpenAPIV3Schema(val OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) {
	s.OpenAPIV3Schema = val
}

// ExternalDocumentation allows referencing an external resource for extended documentation.
// Ref: #/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ExternalDocumentation
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation struct {
	Description OptString `json:"description"`
	URL         OptString `json:"url"`
}

// GetDescription returns the value of Description.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation) GetDescription() OptString {
	return s.Description
}

// GetURL returns the value of URL.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation) GetURL() OptString {
	return s.URL
}

// SetDescription sets the value of Description.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation) SetDescription(val OptString) {
	s.Description = val
}

// SetURL sets the value of URL.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation) SetURL(val OptString) {
	s.URL = val
}

// JSON represents any valid JSON value. These types are supported: bool, int64, float64, string,
// []interface{}, map[string]interface{} and nil.
// Ref: #/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSON struct{}

// JSONSchemaProps is a JSON-Schema following Specification Draft 4 (http://json-schema.org/).
// Ref: #/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps struct {
	Ref                  OptString                                                                       `json:"$ref"`
	Schema               OptString                                                                       `json:"$schema"`
	AdditionalItems      *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsOrBool         `json:"additionalItems"`
	AdditionalProperties *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsOrBool         `json:"additionalProperties"`
	AllOf                []IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps              `json:"allOf"`
	AnyOf                []IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps              `json:"anyOf"`
	Default              *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSON                          `json:"default"`
	Definitions          OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDefinitions  `json:"definitions"`
	Dependencies         OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDependencies `json:"dependencies"`
	Description          OptString                                                                       `json:"description"`
	Enum                 []IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSON                         `json:"enum"`
	Example              *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSON                          `json:"example"`
	ExclusiveMaximum     OptBool                                                                         `json:"exclusiveMaximum"`
	ExclusiveMinimum     OptBool                                                                         `json:"exclusiveMinimum"`
	ExternalDocs         OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation       `json:"externalDocs"`
	// Format is an OpenAPI v3 format string. Unknown formats are ignored. The following formats are
	// validated:
	// - bsonobjectid: a bson object ID, i.e. a 24 characters hex string - uri: an URI as parsed by
	// Golang net/url.ParseRequestURI - email: an email address as parsed by Golang net/mail.ParseAddress
	// - hostname: a valid representation for an Internet host name, as defined by RFC 1034, section 3.1
	// [RFC1034]. - ipv4: an IPv4 IP as parsed by Golang net.ParseIP - ipv6: an IPv6 IP as parsed by
	// Golang net.ParseIP - cidr: a CIDR as parsed by Golang net.ParseCIDR - mac: a MAC address as parsed
	// by Golang net.ParseMAC - uuid: an UUID that allows uppercase defined by the regex
	// (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid3: an UUID3 that
	// allows uppercase defined by the regex
	// (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?3[0-9a-f]{3}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid4: an UUID4 that
	// allows uppercase defined by the regex
	// (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?4[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - uuid5: an UUID5
	// that allows uppercase defined by the regex
	// (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?5[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - isbn: an ISBN10 or
	// ISBN13 number string like "0321751043" or "978-0321751041" - isbn10: an ISBN10 number string like
	// "0321751043" - isbn13: an ISBN13 number string like "978-0321751041" - creditcard: a credit card
	// number defined by the regex
	// ^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11})$ with any non digit characters mixed in - ssn: a U.S. social security number following the regex ^\d{3}[- ]?\d{2}[- ]?\d{4}$ - hexcolor: an hexadecimal color code like "#FFFFFF: following the regex ^#?([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$ - rgbcolor: an RGB color code like rgb like "rgb(255,255,2559" - byte: base64 encoded binary data - password: any kind of string - date: a date string like "2006-01-02" as defined by full-date in RFC3339 - duration: a duration string like "22 ns" as parsed by Golang time.ParseDuration or compatible with Scala duration format - datetime: a date time string like "2014-12-15T19:30:20.000Z" as defined by date-time in RFC3339.
	Format            OptString                                                                            `json:"format"`
	ID                OptString                                                                            `json:"id"`
	Items             *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsOrArray             `json:"items"`
	MaxItems          OptInt64                                                                             `json:"maxItems"`
	MaxLength         OptInt64                                                                             `json:"maxLength"`
	MaxProperties     OptInt64                                                                             `json:"maxProperties"`
	Maximum           OptFloat64                                                                           `json:"maximum"`
	MinItems          OptInt64                                                                             `json:"minItems"`
	MinLength         OptInt64                                                                             `json:"minLength"`
	MinProperties     OptInt64                                                                             `json:"minProperties"`
	Minimum           OptFloat64                                                                           `json:"minimum"`
	MultipleOf        OptFloat64                                                                           `json:"multipleOf"`
	Not               *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps                    `json:"not"`
	Nullable          OptBool                                                                              `json:"nullable"`
	OneOf             []IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps                   `json:"oneOf"`
	Pattern           OptString                                                                            `json:"pattern"`
	PatternProperties OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsPatternProperties `json:"patternProperties"`
	Properties        OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsProperties        `json:"properties"`
	Required          []string                                                                             `json:"required"`
	Title             OptString                                                                            `json:"title"`
	Type              OptString                                                                            `json:"type"`
	UniqueItems       OptBool                                                                              `json:"uniqueItems"`
	// X-kubernetes-embedded-resource defines that the value is an embedded Kubernetes runtime.Object,
	// with TypeMeta and ObjectMeta. The type must be object. It is allowed to further restrict the
	// embedded object. kind, apiVersion and metadata are validated automatically.
	// x-kubernetes-preserve-unknown-fields is allowed to be true, but does not have to be if the object
	// is fully specified (up to kind, apiVersion, metadata).
	XMinusKubernetesMinusEmbeddedMinusResource OptBool `json:"x-kubernetes-embedded-resource"`
	// X-kubernetes-int-or-string specifies that this value is either an integer or a string. If this is
	// true, an empty type is allowed and type as child of anyOf is permitted if following one of the
	// following patterns:
	// 1) anyOf:
	// - type: integer
	// - type: string
	// 2) allOf:
	// - anyOf:
	// - type: integer
	// - type: string
	// - ... zero or more.
	XMinusKubernetesMinusIntMinusOrMinusString OptBool `json:"x-kubernetes-int-or-string"`
	// X-kubernetes-list-map-keys annotates an array with the x-kubernetes-list-type `map` by specifying
	// the keys used as the index of the map.
	// This tag MUST only be used on lists that have the "x-kubernetes-list-type" extension set to "map".
	// Also, the values specified for this attribute must be a scalar typed field of the child structure
	// (no nesting is supported).
	// The properties specified must either be required or have a default value, to ensure those
	// properties are present for all list items.
	XMinusKubernetesMinusListMinusMapMinusKeys []string `json:"x-kubernetes-list-map-keys"`
	// X-kubernetes-list-type annotates an array to further describe its topology. This extension must
	// only be used on lists and may have 3 possible values:
	// 1) `atomic`: the list is treated as a single entity, like a scalar.
	// Atomic lists will be entirely replaced when updated. This extension
	// may be used on any type of list (struct, scalar, ...).
	// 2) `set`:
	// Sets are lists that must not have multiple items with the same value. Each
	// value must be a scalar, an object with x-kubernetes-map-type `atomic` or an
	// array with x-kubernetes-list-type `atomic`.
	// 3) `map`:
	// These lists are like maps in that their elements have a non-index key
	// used to identify them. Order is preserved upon merge. The map tag
	// must only be used on a list with elements of type object.
	// Defaults to atomic for arrays.
	XMinusKubernetesMinusListMinusType OptString `json:"x-kubernetes-list-type"`
	// X-kubernetes-map-type annotates an object to further describe its topology. This extension must
	// only be used when type is object and may have 2 possible values:
	// 1) `granular`:
	// These maps are actual maps (key-value pairs) and each fields are independent
	// from each other (they can each be manipulated by separate actors). This is
	// the default behaviour for all maps.
	// 2) `atomic`: the list is treated as a single entity, like a scalar.
	// Atomic maps will be entirely replaced when updated.
	XMinusKubernetesMinusMapMinusType OptString `json:"x-kubernetes-map-type"`
	// X-kubernetes-preserve-unknown-fields stops the API server decoding step from pruning fields which
	// are not specified in the validation schema. This affects fields recursively, but switches back to
	// normal pruning behaviour if nested properties or additionalProperties are specified in the schema.
	// This can either be true or undefined. False is forbidden.
	XMinusKubernetesMinusPreserveMinusUnknownMinusFields OptBool `json:"x-kubernetes-preserve-unknown-fields"`
}

// GetRef returns the value of Ref.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) GetRef() OptString {
	return s.Ref
}

// GetSchema returns the value of Schema.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) GetSchema() OptString {
	return s.Schema
}

// GetAdditionalItems returns the value of AdditionalItems.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) GetAdditionalItems() *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsOrBool {
	return s.AdditionalItems
}

// GetAdditionalProperties returns the value of AdditionalProperties.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) GetAdditionalProperties() *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsOrBool {
	return s.AdditionalProperties
}

// GetAllOf returns the value of AllOf.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) GetAllOf() []IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps {
	return s.AllOf
}

// GetAnyOf returns the value of AnyOf.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) GetAnyOf() []IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps {
	return s.AnyOf
}

// GetDefault returns the value of Default.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) GetDefault() *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSON {
	return s.Default
}

// GetDefinitions returns the value of Definitions.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) GetDefinitions() OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDefinitions {
	return s.Definitions
}

// GetDependencies returns the value of Dependencies.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) GetDependencies() OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDependencies {
	return s.Dependencies
}

// GetDescription returns the value of Description.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) GetDescription() OptString {
	return s.Description
}

// GetEnum returns the value of Enum.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) GetEnum() []IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSON {
	return s.Enum
}

// GetExample returns the value of Example.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) GetExample() *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSON {
	return s.Example
}

// GetExclusiveMaximum returns the value of ExclusiveMaximum.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) GetExclusiveMaximum() OptBool {
	return s.ExclusiveMaximum
}

// GetExclusiveMinimum returns the value of ExclusiveMinimum.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) GetExclusiveMinimum() OptBool {
	return s.ExclusiveMinimum
}

// GetExternalDocs returns the value of ExternalDocs.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) GetExternalDocs() OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation {
	return s.ExternalDocs
}

// GetFormat returns the value of Format.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) GetFormat() OptString {
	return s.Format
}

// GetID returns the value of ID.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) GetID() OptString {
	return s.ID
}

// GetItems returns the value of Items.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) GetItems() *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsOrArray {
	return s.Items
}

// GetMaxItems returns the value of MaxItems.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) GetMaxItems() OptInt64 {
	return s.MaxItems
}

// GetMaxLength returns the value of MaxLength.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) GetMaxLength() OptInt64 {
	return s.MaxLength
}

// GetMaxProperties returns the value of MaxProperties.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) GetMaxProperties() OptInt64 {
	return s.MaxProperties
}

// GetMaximum returns the value of Maximum.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) GetMaximum() OptFloat64 {
	return s.Maximum
}

// GetMinItems returns the value of MinItems.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) GetMinItems() OptInt64 {
	return s.MinItems
}

// GetMinLength returns the value of MinLength.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) GetMinLength() OptInt64 {
	return s.MinLength
}

// GetMinProperties returns the value of MinProperties.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) GetMinProperties() OptInt64 {
	return s.MinProperties
}

// GetMinimum returns the value of Minimum.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) GetMinimum() OptFloat64 {
	return s.Minimum
}

// GetMultipleOf returns the value of MultipleOf.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) GetMultipleOf() OptFloat64 {
	return s.MultipleOf
}

// GetNot returns the value of Not.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) GetNot() *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps {
	return s.Not
}

// GetNullable returns the value of Nullable.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) GetNullable() OptBool {
	return s.Nullable
}

// GetOneOf returns the value of OneOf.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) GetOneOf() []IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps {
	return s.OneOf
}

// GetPattern returns the value of Pattern.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) GetPattern() OptString {
	return s.Pattern
}

// GetPatternProperties returns the value of PatternProperties.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) GetPatternProperties() OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsPatternProperties {
	return s.PatternProperties
}

// GetProperties returns the value of Properties.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) GetProperties() OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsProperties {
	return s.Properties
}

// GetRequired returns the value of Required.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) GetRequired() []string {
	return s.Required
}

// GetTitle returns the value of Title.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) GetTitle() OptString {
	return s.Title
}

// GetType returns the value of Type.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) GetType() OptString {
	return s.Type
}

// GetUniqueItems returns the value of UniqueItems.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) GetUniqueItems() OptBool {
	return s.UniqueItems
}

// GetXMinusKubernetesMinusEmbeddedMinusResource returns the value of XMinusKubernetesMinusEmbeddedMinusResource.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) GetXMinusKubernetesMinusEmbeddedMinusResource() OptBool {
	return s.XMinusKubernetesMinusEmbeddedMinusResource
}

// GetXMinusKubernetesMinusIntMinusOrMinusString returns the value of XMinusKubernetesMinusIntMinusOrMinusString.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) GetXMinusKubernetesMinusIntMinusOrMinusString() OptBool {
	return s.XMinusKubernetesMinusIntMinusOrMinusString
}

// GetXMinusKubernetesMinusListMinusMapMinusKeys returns the value of XMinusKubernetesMinusListMinusMapMinusKeys.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) GetXMinusKubernetesMinusListMinusMapMinusKeys() []string {
	return s.XMinusKubernetesMinusListMinusMapMinusKeys
}

// GetXMinusKubernetesMinusListMinusType returns the value of XMinusKubernetesMinusListMinusType.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) GetXMinusKubernetesMinusListMinusType() OptString {
	return s.XMinusKubernetesMinusListMinusType
}

// GetXMinusKubernetesMinusMapMinusType returns the value of XMinusKubernetesMinusMapMinusType.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) GetXMinusKubernetesMinusMapMinusType() OptString {
	return s.XMinusKubernetesMinusMapMinusType
}

// GetXMinusKubernetesMinusPreserveMinusUnknownMinusFields returns the value of XMinusKubernetesMinusPreserveMinusUnknownMinusFields.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) GetXMinusKubernetesMinusPreserveMinusUnknownMinusFields() OptBool {
	return s.XMinusKubernetesMinusPreserveMinusUnknownMinusFields
}

// SetRef sets the value of Ref.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) SetRef(val OptString) {
	s.Ref = val
}

// SetSchema sets the value of Schema.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) SetSchema(val OptString) {
	s.Schema = val
}

// SetAdditionalItems sets the value of AdditionalItems.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) SetAdditionalItems(val *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsOrBool) {
	s.AdditionalItems = val
}

// SetAdditionalProperties sets the value of AdditionalProperties.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) SetAdditionalProperties(val *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsOrBool) {
	s.AdditionalProperties = val
}

// SetAllOf sets the value of AllOf.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) SetAllOf(val []IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) {
	s.AllOf = val
}

// SetAnyOf sets the value of AnyOf.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) SetAnyOf(val []IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) {
	s.AnyOf = val
}

// SetDefault sets the value of Default.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) SetDefault(val *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSON) {
	s.Default = val
}

// SetDefinitions sets the value of Definitions.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) SetDefinitions(val OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDefinitions) {
	s.Definitions = val
}

// SetDependencies sets the value of Dependencies.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) SetDependencies(val OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDependencies) {
	s.Dependencies = val
}

// SetDescription sets the value of Description.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) SetDescription(val OptString) {
	s.Description = val
}

// SetEnum sets the value of Enum.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) SetEnum(val []IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSON) {
	s.Enum = val
}

// SetExample sets the value of Example.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) SetExample(val *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSON) {
	s.Example = val
}

// SetExclusiveMaximum sets the value of ExclusiveMaximum.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) SetExclusiveMaximum(val OptBool) {
	s.ExclusiveMaximum = val
}

// SetExclusiveMinimum sets the value of ExclusiveMinimum.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) SetExclusiveMinimum(val OptBool) {
	s.ExclusiveMinimum = val
}

// SetExternalDocs sets the value of ExternalDocs.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) SetExternalDocs(val OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation) {
	s.ExternalDocs = val
}

// SetFormat sets the value of Format.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) SetFormat(val OptString) {
	s.Format = val
}

// SetID sets the value of ID.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) SetID(val OptString) {
	s.ID = val
}

// SetItems sets the value of Items.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) SetItems(val *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsOrArray) {
	s.Items = val
}

// SetMaxItems sets the value of MaxItems.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) SetMaxItems(val OptInt64) {
	s.MaxItems = val
}

// SetMaxLength sets the value of MaxLength.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) SetMaxLength(val OptInt64) {
	s.MaxLength = val
}

// SetMaxProperties sets the value of MaxProperties.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) SetMaxProperties(val OptInt64) {
	s.MaxProperties = val
}

// SetMaximum sets the value of Maximum.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) SetMaximum(val OptFloat64) {
	s.Maximum = val
}

// SetMinItems sets the value of MinItems.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) SetMinItems(val OptInt64) {
	s.MinItems = val
}

// SetMinLength sets the value of MinLength.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) SetMinLength(val OptInt64) {
	s.MinLength = val
}

// SetMinProperties sets the value of MinProperties.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) SetMinProperties(val OptInt64) {
	s.MinProperties = val
}

// SetMinimum sets the value of Minimum.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) SetMinimum(val OptFloat64) {
	s.Minimum = val
}

// SetMultipleOf sets the value of MultipleOf.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) SetMultipleOf(val OptFloat64) {
	s.MultipleOf = val
}

// SetNot sets the value of Not.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) SetNot(val *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) {
	s.Not = val
}

// SetNullable sets the value of Nullable.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) SetNullable(val OptBool) {
	s.Nullable = val
}

// SetOneOf sets the value of OneOf.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) SetOneOf(val []IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) {
	s.OneOf = val
}

// SetPattern sets the value of Pattern.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) SetPattern(val OptString) {
	s.Pattern = val
}

// SetPatternProperties sets the value of PatternProperties.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) SetPatternProperties(val OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsPatternProperties) {
	s.PatternProperties = val
}

// SetProperties sets the value of Properties.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) SetProperties(val OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsProperties) {
	s.Properties = val
}

// SetRequired sets the value of Required.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) SetRequired(val []string) {
	s.Required = val
}

// SetTitle sets the value of Title.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) SetTitle(val OptString) {
	s.Title = val
}

// SetType sets the value of Type.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) SetType(val OptString) {
	s.Type = val
}

// SetUniqueItems sets the value of UniqueItems.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) SetUniqueItems(val OptBool) {
	s.UniqueItems = val
}

// SetXMinusKubernetesMinusEmbeddedMinusResource sets the value of XMinusKubernetesMinusEmbeddedMinusResource.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) SetXMinusKubernetesMinusEmbeddedMinusResource(val OptBool) {
	s.XMinusKubernetesMinusEmbeddedMinusResource = val
}

// SetXMinusKubernetesMinusIntMinusOrMinusString sets the value of XMinusKubernetesMinusIntMinusOrMinusString.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) SetXMinusKubernetesMinusIntMinusOrMinusString(val OptBool) {
	s.XMinusKubernetesMinusIntMinusOrMinusString = val
}

// SetXMinusKubernetesMinusListMinusMapMinusKeys sets the value of XMinusKubernetesMinusListMinusMapMinusKeys.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) SetXMinusKubernetesMinusListMinusMapMinusKeys(val []string) {
	s.XMinusKubernetesMinusListMinusMapMinusKeys = val
}

// SetXMinusKubernetesMinusListMinusType sets the value of XMinusKubernetesMinusListMinusType.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) SetXMinusKubernetesMinusListMinusType(val OptString) {
	s.XMinusKubernetesMinusListMinusType = val
}

// SetXMinusKubernetesMinusMapMinusType sets the value of XMinusKubernetesMinusMapMinusType.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) SetXMinusKubernetesMinusMapMinusType(val OptString) {
	s.XMinusKubernetesMinusMapMinusType = val
}

// SetXMinusKubernetesMinusPreserveMinusUnknownMinusFields sets the value of XMinusKubernetesMinusPreserveMinusUnknownMinusFields.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) SetXMinusKubernetesMinusPreserveMinusUnknownMinusFields(val OptBool) {
	s.XMinusKubernetesMinusPreserveMinusUnknownMinusFields = val
}

type IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDefinitions map[string]IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps

func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDefinitions) init() IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDefinitions {
	m := *s
	if m == nil {
		m = map[string]IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps{}
		*s = m
	}
	return m
}

type IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDependencies map[string]IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsOrStringArray

func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDependencies) init() IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDependencies {
	m := *s
	if m == nil {
		m = map[string]IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsOrStringArray{}
		*s = m
	}
	return m
}

// JSONSchemaPropsOrArray represents a value that can either be a JSONSchemaProps or an array of
// JSONSchemaProps. Mainly here for serialization purposes.
// Ref: #/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrArray
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsOrArray struct{}

// JSONSchemaPropsOrBool represents JSONSchemaProps or a boolean value. Defaults to true for the
// boolean property.
// Ref: #/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrBool
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsOrBool struct{}

// JSONSchemaPropsOrStringArray represents a JSONSchemaProps or a string array.
// Ref: #/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrStringArray
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsOrStringArray struct{}

type IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsPatternProperties map[string]IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps

func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsPatternProperties) init() IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsPatternProperties {
	m := *s
	if m == nil {
		m = map[string]IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps{}
		*s = m
	}
	return m
}

type IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsProperties map[string]IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps

func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsProperties) init() IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsProperties {
	m := *s
	if m == nil {
		m = map[string]IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps{}
		*s = m
	}
	return m
}

// ServiceReference holds a reference to Service.legacy.k8s.io.
// Ref: #/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ServiceReference
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference struct {
	// Name is the name of the service. Required.
	Name string `json:"name"`
	// Namespace is the namespace of the service. Required.
	Namespace string `json:"namespace"`
	// Path is an optional URL path at which the webhook will be contacted.
	Path OptString `json:"path"`
	// Port is an optional service port at which the webhook will be contacted. `port` should be a valid
	// port number (1-65535, inclusive). Defaults to 443 for backward compatibility.
	Port OptInt32 `json:"port"`
}

// GetName returns the value of Name.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference) GetName() string {
	return s.Name
}

// GetNamespace returns the value of Namespace.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference) GetNamespace() string {
	return s.Namespace
}

// GetPath returns the value of Path.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference) GetPath() OptString {
	return s.Path
}

// GetPort returns the value of Port.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference) GetPort() OptInt32 {
	return s.Port
}

// SetName sets the value of Name.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference) SetName(val string) {
	s.Name = val
}

// SetNamespace sets the value of Namespace.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference) SetNamespace(val string) {
	s.Namespace = val
}

// SetPath sets the value of Path.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference) SetPath(val OptString) {
	s.Path = val
}

// SetPort sets the value of Port.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference) SetPort(val OptInt32) {
	s.Port = val
}

// WebhookClientConfig contains the information to make a TLS connection with the webhook.
// Ref: #/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.WebhookClientConfig
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig struct {
	// CaBundle is a PEM encoded CA bundle which will be used to validate the webhook's server
	// certificate. If unspecified, system trust roots on the apiserver are used.
	CaBundle []byte                                                               `json:"caBundle"`
	Service  OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference `json:"service"`
	// Url gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly
	// one of `url` or `service` must be specified.
	// The `host` should not refer to a service running in the cluster; use the `service` field instead.
	// The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot
	// resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address.
	// Please note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care
	// to run this webhook on all hosts which run an apiserver which might need to make calls to this
	// webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.
	// The scheme must be "https"; the URL must begin with "https://".
	// A path is optional, and if present may be any string permissible in a URL. You may use the path to
	// pass an arbitrary string to the webhook, for example, a cluster identifier.
	// Attempting to use a user or basic auth e.g. "user:password@" is not allowed. Fragments ("#...")
	// and query parameters ("?...") are not allowed, either.
	URL OptString `json:"url"`
}

// GetCaBundle returns the value of CaBundle.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig) GetCaBundle() []byte {
	return s.CaBundle
}

// GetService returns the value of Service.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig) GetService() OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference {
	return s.Service
}

// GetURL returns the value of URL.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig) GetURL() OptString {
	return s.URL
}

// SetCaBundle sets the value of CaBundle.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig) SetCaBundle(val []byte) {
	s.CaBundle = val
}

// SetService sets the value of Service.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig) SetService(val OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference) {
	s.Service = val
}

// SetURL sets the value of URL.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig) SetURL(val OptString) {
	s.URL = val
}

// WebhookConversion describes how to call a conversion webhook.
// Ref: #/components/schemas/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.WebhookConversion
type IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion struct {
	ClientConfig OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig `json:"clientConfig"`
	// ConversionReviewVersions is an ordered list of preferred `ConversionReview` versions the Webhook
	// expects. The API server will use the first version in the list which it supports. If none of the
	// versions specified in this list are supported by API server, conversion will fail for the custom
	// resource. If a persisted Webhook configuration specifies allowed versions and does not include any
	// versions known to the API Server, calls to the webhook will fail.
	ConversionReviewVersions []string `json:"conversionReviewVersions"`
}

// GetClientConfig returns the value of ClientConfig.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion) GetClientConfig() OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig {
	return s.ClientConfig
}

// GetConversionReviewVersions returns the value of ConversionReviewVersions.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion) GetConversionReviewVersions() []string {
	return s.ConversionReviewVersions
}

// SetClientConfig sets the value of ClientConfig.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion) SetClientConfig(val OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig) {
	s.ClientConfig = val
}

// SetConversionReviewVersions sets the value of ConversionReviewVersions.
func (s *IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion) SetConversionReviewVersions(val []string) {
	s.ConversionReviewVersions = val
}

type IoK8sApimachineryPkgAPIResourceQuantity string

// APIGroup contains the name, the supported versions, and the preferred version of a group.
// Ref: #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup
type IoK8sApimachineryPkgApisMetaV1APIGroup struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind OptString `json:"kind"`
	// Name is the name of the group.
	Name             string                                                    `json:"name"`
	PreferredVersion OptIoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery `json:"preferredVersion"`
	// A map of client CIDR to server address that is serving this group. This is to help clients reach
	// servers in the most network-efficient way possible. Clients can use the appropriate server address
	// as per the CIDR that they match. In case of multiple matches, clients should use the longest
	// matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For
	// example: the master will return an internal IP CIDR only, if the client reaches the server using
	// an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr
	// (in that order) to get the client IP.
	ServerAddressByClientCIDRs []IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR `json:"serverAddressByClientCIDRs"`
	// Versions are the versions supported in this group.
	Versions []IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery `json:"versions"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sApimachineryPkgApisMetaV1APIGroup) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sApimachineryPkgApisMetaV1APIGroup) GetKind() OptString {
	return s.Kind
}

// GetName returns the value of Name.
func (s *IoK8sApimachineryPkgApisMetaV1APIGroup) GetName() string {
	return s.Name
}

// GetPreferredVersion returns the value of PreferredVersion.
func (s *IoK8sApimachineryPkgApisMetaV1APIGroup) GetPreferredVersion() OptIoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery {
	return s.PreferredVersion
}

// GetServerAddressByClientCIDRs returns the value of ServerAddressByClientCIDRs.
func (s *IoK8sApimachineryPkgApisMetaV1APIGroup) GetServerAddressByClientCIDRs() []IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR {
	return s.ServerAddressByClientCIDRs
}

// GetVersions returns the value of Versions.
func (s *IoK8sApimachineryPkgApisMetaV1APIGroup) GetVersions() []IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery {
	return s.Versions
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sApimachineryPkgApisMetaV1APIGroup) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sApimachineryPkgApisMetaV1APIGroup) SetKind(val OptString) {
	s.Kind = val
}

// SetName sets the value of Name.
func (s *IoK8sApimachineryPkgApisMetaV1APIGroup) SetName(val string) {
	s.Name = val
}

// SetPreferredVersion sets the value of PreferredVersion.
func (s *IoK8sApimachineryPkgApisMetaV1APIGroup) SetPreferredVersion(val OptIoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery) {
	s.PreferredVersion = val
}

// SetServerAddressByClientCIDRs sets the value of ServerAddressByClientCIDRs.
func (s *IoK8sApimachineryPkgApisMetaV1APIGroup) SetServerAddressByClientCIDRs(val []IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR) {
	s.ServerAddressByClientCIDRs = val
}

// SetVersions sets the value of Versions.
func (s *IoK8sApimachineryPkgApisMetaV1APIGroup) SetVersions(val []IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery) {
	s.Versions = val
}

func (*IoK8sApimachineryPkgApisMetaV1APIGroup) getAdmissionregistrationAPIGroupRes() {}
func (*IoK8sApimachineryPkgApisMetaV1APIGroup) getApiextensionsAPIGroupRes()         {}
func (*IoK8sApimachineryPkgApisMetaV1APIGroup) getApiregistrationAPIGroupRes()       {}
func (*IoK8sApimachineryPkgApisMetaV1APIGroup) getAppsAPIGroupRes()                  {}
func (*IoK8sApimachineryPkgApisMetaV1APIGroup) getAuthenticationAPIGroupRes()        {}
func (*IoK8sApimachineryPkgApisMetaV1APIGroup) getAuthorizationAPIGroupRes()         {}
func (*IoK8sApimachineryPkgApisMetaV1APIGroup) getAutoscalingAPIGroupRes()           {}
func (*IoK8sApimachineryPkgApisMetaV1APIGroup) getBatchAPIGroupRes()                 {}
func (*IoK8sApimachineryPkgApisMetaV1APIGroup) getCertificatesAPIGroupRes()          {}
func (*IoK8sApimachineryPkgApisMetaV1APIGroup) getCoordinationAPIGroupRes()          {}
func (*IoK8sApimachineryPkgApisMetaV1APIGroup) getDiscoveryAPIGroupRes()             {}
func (*IoK8sApimachineryPkgApisMetaV1APIGroup) getEventsAPIGroupRes()                {}
func (*IoK8sApimachineryPkgApisMetaV1APIGroup) getFlowcontrolApiserverAPIGroupRes()  {}
func (*IoK8sApimachineryPkgApisMetaV1APIGroup) getInternalApiserverAPIGroupRes()     {}
func (*IoK8sApimachineryPkgApisMetaV1APIGroup) getNetworkingAPIGroupRes()            {}
func (*IoK8sApimachineryPkgApisMetaV1APIGroup) getNodeAPIGroupRes()                  {}
func (*IoK8sApimachineryPkgApisMetaV1APIGroup) getPolicyAPIGroupRes()                {}
func (*IoK8sApimachineryPkgApisMetaV1APIGroup) getRbacAuthorizationAPIGroupRes()     {}
func (*IoK8sApimachineryPkgApisMetaV1APIGroup) getSchedulingAPIGroupRes()            {}
func (*IoK8sApimachineryPkgApisMetaV1APIGroup) getStorageAPIGroupRes()               {}

// APIGroupList is a list of APIGroup, to allow clients to discover the API at /apis.
// Ref: #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroupList
type IoK8sApimachineryPkgApisMetaV1APIGroupList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Groups is a list of APIGroup.
	Groups []IoK8sApimachineryPkgApisMetaV1APIGroup `json:"groups"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind OptString `json:"kind"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sApimachineryPkgApisMetaV1APIGroupList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetGroups returns the value of Groups.
func (s *IoK8sApimachineryPkgApisMetaV1APIGroupList) GetGroups() []IoK8sApimachineryPkgApisMetaV1APIGroup {
	return s.Groups
}

// GetKind returns the value of Kind.
func (s *IoK8sApimachineryPkgApisMetaV1APIGroupList) GetKind() OptString {
	return s.Kind
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sApimachineryPkgApisMetaV1APIGroupList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetGroups sets the value of Groups.
func (s *IoK8sApimachineryPkgApisMetaV1APIGroupList) SetGroups(val []IoK8sApimachineryPkgApisMetaV1APIGroup) {
	s.Groups = val
}

// SetKind sets the value of Kind.
func (s *IoK8sApimachineryPkgApisMetaV1APIGroupList) SetKind(val OptString) {
	s.Kind = val
}

func (*IoK8sApimachineryPkgApisMetaV1APIGroupList) getAPIVersionsRes() {}

// APIResource specifies the name of a resource and whether it is namespaced.
// Ref: #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIResource
type IoK8sApimachineryPkgApisMetaV1APIResource struct {
	// Categories is a list of the grouped resources this resource belongs to (e.g. 'all').
	Categories []string `json:"categories"`
	// Group is the preferred group of the resource.  Empty implies the group of the containing resource
	// list. For subresources, this may have a different value, for example: Scale".
	Group OptString `json:"group"`
	// Kind is the kind for the resource (e.g. 'Foo' is the kind for a resource 'foo').
	Kind string `json:"kind"`
	// Name is the plural name of the resource.
	Name string `json:"name"`
	// Namespaced indicates if a resource is namespaced or not.
	Namespaced bool `json:"namespaced"`
	// ShortNames is a list of suggested short names of the resource.
	ShortNames []string `json:"shortNames"`
	// SingularName is the singular name of the resource.  This allows clients to handle plural and
	// singular opaquely. The singularName is more correct for reporting status on a single item and both
	// singular and plural are allowed from the kubectl CLI interface.
	SingularName string `json:"singularName"`
	// The hash value of the storage version, the version this resource is converted to when written to
	// the data store. Value must be treated as opaque by clients. Only equality comparison on the value
	// is valid. This is an alpha feature and may change or be removed in the future. The field is
	// populated by the apiserver only if the StorageVersionHash feature gate is enabled. This field will
	// remain optional even if it graduates.
	StorageVersionHash OptString `json:"storageVersionHash"`
	// Verbs is a list of supported kube verbs (this includes get, list, watch, create, update, patch,
	// delete, deletecollection, and proxy).
	Verbs []string `json:"verbs"`
	// Version is the preferred version of the resource.  Empty implies the version of the containing
	// resource list For subresources, this may have a different value, for example: v1 (while inside a
	// v1beta1 version of the core resource's group)".
	Version OptString `json:"version"`
}

// GetCategories returns the value of Categories.
func (s *IoK8sApimachineryPkgApisMetaV1APIResource) GetCategories() []string {
	return s.Categories
}

// GetGroup returns the value of Group.
func (s *IoK8sApimachineryPkgApisMetaV1APIResource) GetGroup() OptString {
	return s.Group
}

// GetKind returns the value of Kind.
func (s *IoK8sApimachineryPkgApisMetaV1APIResource) GetKind() string {
	return s.Kind
}

// GetName returns the value of Name.
func (s *IoK8sApimachineryPkgApisMetaV1APIResource) GetName() string {
	return s.Name
}

// GetNamespaced returns the value of Namespaced.
func (s *IoK8sApimachineryPkgApisMetaV1APIResource) GetNamespaced() bool {
	return s.Namespaced
}

// GetShortNames returns the value of ShortNames.
func (s *IoK8sApimachineryPkgApisMetaV1APIResource) GetShortNames() []string {
	return s.ShortNames
}

// GetSingularName returns the value of SingularName.
func (s *IoK8sApimachineryPkgApisMetaV1APIResource) GetSingularName() string {
	return s.SingularName
}

// GetStorageVersionHash returns the value of StorageVersionHash.
func (s *IoK8sApimachineryPkgApisMetaV1APIResource) GetStorageVersionHash() OptString {
	return s.StorageVersionHash
}

// GetVerbs returns the value of Verbs.
func (s *IoK8sApimachineryPkgApisMetaV1APIResource) GetVerbs() []string {
	return s.Verbs
}

// GetVersion returns the value of Version.
func (s *IoK8sApimachineryPkgApisMetaV1APIResource) GetVersion() OptString {
	return s.Version
}

// SetCategories sets the value of Categories.
func (s *IoK8sApimachineryPkgApisMetaV1APIResource) SetCategories(val []string) {
	s.Categories = val
}

// SetGroup sets the value of Group.
func (s *IoK8sApimachineryPkgApisMetaV1APIResource) SetGroup(val OptString) {
	s.Group = val
}

// SetKind sets the value of Kind.
func (s *IoK8sApimachineryPkgApisMetaV1APIResource) SetKind(val string) {
	s.Kind = val
}

// SetName sets the value of Name.
func (s *IoK8sApimachineryPkgApisMetaV1APIResource) SetName(val string) {
	s.Name = val
}

// SetNamespaced sets the value of Namespaced.
func (s *IoK8sApimachineryPkgApisMetaV1APIResource) SetNamespaced(val bool) {
	s.Namespaced = val
}

// SetShortNames sets the value of ShortNames.
func (s *IoK8sApimachineryPkgApisMetaV1APIResource) SetShortNames(val []string) {
	s.ShortNames = val
}

// SetSingularName sets the value of SingularName.
func (s *IoK8sApimachineryPkgApisMetaV1APIResource) SetSingularName(val string) {
	s.SingularName = val
}

// SetStorageVersionHash sets the value of StorageVersionHash.
func (s *IoK8sApimachineryPkgApisMetaV1APIResource) SetStorageVersionHash(val OptString) {
	s.StorageVersionHash = val
}

// SetVerbs sets the value of Verbs.
func (s *IoK8sApimachineryPkgApisMetaV1APIResource) SetVerbs(val []string) {
	s.Verbs = val
}

// SetVersion sets the value of Version.
func (s *IoK8sApimachineryPkgApisMetaV1APIResource) SetVersion(val OptString) {
	s.Version = val
}

// APIResourceList is a list of APIResource, it is used to expose the name of the resources supported
// in a specific group and version, and if the resource is namespaced.
// Ref: #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList
type IoK8sApimachineryPkgApisMetaV1APIResourceList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// GroupVersion is the group and version this APIResourceList is for.
	GroupVersion string `json:"groupVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind OptString `json:"kind"`
	// Resources contains the name of the resources and if they are namespaced.
	Resources []IoK8sApimachineryPkgApisMetaV1APIResource `json:"resources"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sApimachineryPkgApisMetaV1APIResourceList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetGroupVersion returns the value of GroupVersion.
func (s *IoK8sApimachineryPkgApisMetaV1APIResourceList) GetGroupVersion() string {
	return s.GroupVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sApimachineryPkgApisMetaV1APIResourceList) GetKind() OptString {
	return s.Kind
}

// GetResources returns the value of Resources.
func (s *IoK8sApimachineryPkgApisMetaV1APIResourceList) GetResources() []IoK8sApimachineryPkgApisMetaV1APIResource {
	return s.Resources
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sApimachineryPkgApisMetaV1APIResourceList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetGroupVersion sets the value of GroupVersion.
func (s *IoK8sApimachineryPkgApisMetaV1APIResourceList) SetGroupVersion(val string) {
	s.GroupVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sApimachineryPkgApisMetaV1APIResourceList) SetKind(val OptString) {
	s.Kind = val
}

// SetResources sets the value of Resources.
func (s *IoK8sApimachineryPkgApisMetaV1APIResourceList) SetResources(val []IoK8sApimachineryPkgApisMetaV1APIResource) {
	s.Resources = val
}

func (*IoK8sApimachineryPkgApisMetaV1APIResourceList) getAdmissionregistrationV1APIResourcesRes() {}
func (*IoK8sApimachineryPkgApisMetaV1APIResourceList) getApiextensionsV1APIResourcesRes()         {}
func (*IoK8sApimachineryPkgApisMetaV1APIResourceList) getApiregistrationV1APIResourcesRes()       {}
func (*IoK8sApimachineryPkgApisMetaV1APIResourceList) getAppsV1APIResourcesRes()                  {}
func (*IoK8sApimachineryPkgApisMetaV1APIResourceList) getAuthenticationV1APIResourcesRes()        {}
func (*IoK8sApimachineryPkgApisMetaV1APIResourceList) getAuthorizationV1APIResourcesRes()         {}
func (*IoK8sApimachineryPkgApisMetaV1APIResourceList) getAutoscalingV1APIResourcesRes()           {}
func (*IoK8sApimachineryPkgApisMetaV1APIResourceList) getAutoscalingV2beta1APIResourcesRes()      {}
func (*IoK8sApimachineryPkgApisMetaV1APIResourceList) getAutoscalingV2beta2APIResourcesRes()      {}
func (*IoK8sApimachineryPkgApisMetaV1APIResourceList) getBatchV1APIResourcesRes()                 {}
func (*IoK8sApimachineryPkgApisMetaV1APIResourceList) getBatchV1beta1APIResourcesRes()            {}
func (*IoK8sApimachineryPkgApisMetaV1APIResourceList) getCertificatesV1APIResourcesRes()          {}
func (*IoK8sApimachineryPkgApisMetaV1APIResourceList) getCoordinationV1APIResourcesRes()          {}
func (*IoK8sApimachineryPkgApisMetaV1APIResourceList) getCoreV1APIResourcesRes()                  {}
func (*IoK8sApimachineryPkgApisMetaV1APIResourceList) getDiscoveryV1APIResourcesRes()             {}
func (*IoK8sApimachineryPkgApisMetaV1APIResourceList) getDiscoveryV1beta1APIResourcesRes()        {}
func (*IoK8sApimachineryPkgApisMetaV1APIResourceList) getEventsV1APIResourcesRes()                {}
func (*IoK8sApimachineryPkgApisMetaV1APIResourceList) getEventsV1beta1APIResourcesRes()           {}
func (*IoK8sApimachineryPkgApisMetaV1APIResourceList) getFlowcontrolApiserverV1beta1APIResourcesRes() {
}
func (*IoK8sApimachineryPkgApisMetaV1APIResourceList) getFlowcontrolApiserverV1beta2APIResourcesRes() {
}
func (*IoK8sApimachineryPkgApisMetaV1APIResourceList) getInternalApiserverV1alpha1APIResourcesRes() {}
func (*IoK8sApimachineryPkgApisMetaV1APIResourceList) getNetworkingV1APIResourcesRes()              {}
func (*IoK8sApimachineryPkgApisMetaV1APIResourceList) getNodeV1APIResourcesRes()                    {}
func (*IoK8sApimachineryPkgApisMetaV1APIResourceList) getNodeV1alpha1APIResourcesRes()              {}
func (*IoK8sApimachineryPkgApisMetaV1APIResourceList) getNodeV1beta1APIResourcesRes()               {}
func (*IoK8sApimachineryPkgApisMetaV1APIResourceList) getPolicyV1APIResourcesRes()                  {}
func (*IoK8sApimachineryPkgApisMetaV1APIResourceList) getPolicyV1beta1APIResourcesRes()             {}
func (*IoK8sApimachineryPkgApisMetaV1APIResourceList) getRbacAuthorizationV1APIResourcesRes()       {}
func (*IoK8sApimachineryPkgApisMetaV1APIResourceList) getSchedulingV1APIResourcesRes()              {}
func (*IoK8sApimachineryPkgApisMetaV1APIResourceList) getStorageV1APIResourcesRes()                 {}
func (*IoK8sApimachineryPkgApisMetaV1APIResourceList) getStorageV1alpha1APIResourcesRes()           {}
func (*IoK8sApimachineryPkgApisMetaV1APIResourceList) getStorageV1beta1APIResourcesRes()            {}

// APIVersions lists the versions that are available, to allow clients to discover the API at /api,
// which is the root path of the legacy v1 API.
// Ref: #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.APIVersions
type IoK8sApimachineryPkgApisMetaV1APIVersions struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind OptString `json:"kind"`
	// A map of client CIDR to server address that is serving this group. This is to help clients reach
	// servers in the most network-efficient way possible. Clients can use the appropriate server address
	// as per the CIDR that they match. In case of multiple matches, clients should use the longest
	// matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For
	// example: the master will return an internal IP CIDR only, if the client reaches the server using
	// an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr
	// (in that order) to get the client IP.
	ServerAddressByClientCIDRs []IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR `json:"serverAddressByClientCIDRs"`
	// Versions are the api versions that are available.
	Versions []string `json:"versions"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sApimachineryPkgApisMetaV1APIVersions) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sApimachineryPkgApisMetaV1APIVersions) GetKind() OptString {
	return s.Kind
}

// GetServerAddressByClientCIDRs returns the value of ServerAddressByClientCIDRs.
func (s *IoK8sApimachineryPkgApisMetaV1APIVersions) GetServerAddressByClientCIDRs() []IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR {
	return s.ServerAddressByClientCIDRs
}

// GetVersions returns the value of Versions.
func (s *IoK8sApimachineryPkgApisMetaV1APIVersions) GetVersions() []string {
	return s.Versions
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sApimachineryPkgApisMetaV1APIVersions) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sApimachineryPkgApisMetaV1APIVersions) SetKind(val OptString) {
	s.Kind = val
}

// SetServerAddressByClientCIDRs sets the value of ServerAddressByClientCIDRs.
func (s *IoK8sApimachineryPkgApisMetaV1APIVersions) SetServerAddressByClientCIDRs(val []IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR) {
	s.ServerAddressByClientCIDRs = val
}

// SetVersions sets the value of Versions.
func (s *IoK8sApimachineryPkgApisMetaV1APIVersions) SetVersions(val []string) {
	s.Versions = val
}

func (*IoK8sApimachineryPkgApisMetaV1APIVersions) getCoreAPIVersionsRes() {}

// Condition contains details for one aspect of the current state of this API Resource.
// Ref: #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Condition
type IoK8sApimachineryPkgApisMetaV1Condition struct {
	LastTransitionTime IoK8sApimachineryPkgApisMetaV1Time `json:"lastTransitionTime"`
	// Message is a human readable message indicating details about the transition. This may be an empty
	// string.
	Message string `json:"message"`
	// ObservedGeneration represents the .metadata.generation that the condition was set based upon. For
	// instance, if .metadata.generation is currently 12, but the .status.conditions[x].
	// observedGeneration is 9, the condition is out of date with respect to the current state of the
	// instance.
	ObservedGeneration OptInt64 `json:"observedGeneration"`
	// Reason contains a programmatic identifier indicating the reason for the condition's last
	// transition. Producers of specific condition types may define expected values and meanings for this
	// field, and whether the values are considered a guaranteed API. The value should be a CamelCase
	// string. This field may not be empty.
	Reason string `json:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status string `json:"status"`
	// Type of condition in CamelCase or in foo.example.com/CamelCase.
	Type string `json:"type"`
}

// GetLastTransitionTime returns the value of LastTransitionTime.
func (s *IoK8sApimachineryPkgApisMetaV1Condition) GetLastTransitionTime() IoK8sApimachineryPkgApisMetaV1Time {
	return s.LastTransitionTime
}

// GetMessage returns the value of Message.
func (s *IoK8sApimachineryPkgApisMetaV1Condition) GetMessage() string {
	return s.Message
}

// GetObservedGeneration returns the value of ObservedGeneration.
func (s *IoK8sApimachineryPkgApisMetaV1Condition) GetObservedGeneration() OptInt64 {
	return s.ObservedGeneration
}

// GetReason returns the value of Reason.
func (s *IoK8sApimachineryPkgApisMetaV1Condition) GetReason() string {
	return s.Reason
}

// GetStatus returns the value of Status.
func (s *IoK8sApimachineryPkgApisMetaV1Condition) GetStatus() string {
	return s.Status
}

// GetType returns the value of Type.
func (s *IoK8sApimachineryPkgApisMetaV1Condition) GetType() string {
	return s.Type
}

// SetLastTransitionTime sets the value of LastTransitionTime.
func (s *IoK8sApimachineryPkgApisMetaV1Condition) SetLastTransitionTime(val IoK8sApimachineryPkgApisMetaV1Time) {
	s.LastTransitionTime = val
}

// SetMessage sets the value of Message.
func (s *IoK8sApimachineryPkgApisMetaV1Condition) SetMessage(val string) {
	s.Message = val
}

// SetObservedGeneration sets the value of ObservedGeneration.
func (s *IoK8sApimachineryPkgApisMetaV1Condition) SetObservedGeneration(val OptInt64) {
	s.ObservedGeneration = val
}

// SetReason sets the value of Reason.
func (s *IoK8sApimachineryPkgApisMetaV1Condition) SetReason(val string) {
	s.Reason = val
}

// SetStatus sets the value of Status.
func (s *IoK8sApimachineryPkgApisMetaV1Condition) SetStatus(val string) {
	s.Status = val
}

// SetType sets the value of Type.
func (s *IoK8sApimachineryPkgApisMetaV1Condition) SetType(val string) {
	s.Type = val
}

// FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.
// Each key is either a '.' representing the field itself, and will always map to an empty set, or a
// string representing a sub-field or item. The string will follow one of these four formats:
// 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where
// <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of
// a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique
// values If a key maps to an empty Fields value, the field that key represents is part of the set.
// The exact format is defined in sigs.k8s.io/structured-merge-diff.
// Ref: #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1
type IoK8sApimachineryPkgApisMetaV1FieldsV1 struct{}

// GroupVersion contains the "group/version" and "version" string of a version. It is made a struct
// to keep extensibility.
// Ref: #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery
type IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery struct {
	// GroupVersion specifies the API group and version in the form "group/version".
	GroupVersion string `json:"groupVersion"`
	// Version specifies the version in the form of "version". This is to save the clients the trouble of
	// splitting the GroupVersion.
	Version string `json:"version"`
}

// GetGroupVersion returns the value of GroupVersion.
func (s *IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery) GetGroupVersion() string {
	return s.GroupVersion
}

// GetVersion returns the value of Version.
func (s *IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery) GetVersion() string {
	return s.Version
}

// SetGroupVersion sets the value of GroupVersion.
func (s *IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery) SetGroupVersion(val string) {
	s.GroupVersion = val
}

// SetVersion sets the value of Version.
func (s *IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery) SetVersion(val string) {
	s.Version = val
}

// A label selector is a label query over a set of resources. The result of matchLabels and
// matchExpressions are ANDed. An empty label selector matches all objects. A null label selector
// matches no objects.
// Ref: #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector
type IoK8sApimachineryPkgApisMetaV1LabelSelector struct {
	// MatchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement `json:"matchExpressions"`
	// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is
	// equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and
	// the values array contains only "value". The requirements are ANDed.
	MatchLabels OptIoK8sApimachineryPkgApisMetaV1LabelSelectorMatchLabels `json:"matchLabels"`
}

// GetMatchExpressions returns the value of MatchExpressions.
func (s *IoK8sApimachineryPkgApisMetaV1LabelSelector) GetMatchExpressions() []IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement {
	return s.MatchExpressions
}

// GetMatchLabels returns the value of MatchLabels.
func (s *IoK8sApimachineryPkgApisMetaV1LabelSelector) GetMatchLabels() OptIoK8sApimachineryPkgApisMetaV1LabelSelectorMatchLabels {
	return s.MatchLabels
}

// SetMatchExpressions sets the value of MatchExpressions.
func (s *IoK8sApimachineryPkgApisMetaV1LabelSelector) SetMatchExpressions(val []IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement) {
	s.MatchExpressions = val
}

// SetMatchLabels sets the value of MatchLabels.
func (s *IoK8sApimachineryPkgApisMetaV1LabelSelector) SetMatchLabels(val OptIoK8sApimachineryPkgApisMetaV1LabelSelectorMatchLabels) {
	s.MatchLabels = val
}

// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is
// equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and
// the values array contains only "value". The requirements are ANDed.
type IoK8sApimachineryPkgApisMetaV1LabelSelectorMatchLabels map[string]string

func (s *IoK8sApimachineryPkgApisMetaV1LabelSelectorMatchLabels) init() IoK8sApimachineryPkgApisMetaV1LabelSelectorMatchLabels {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
// Ref: #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement
type IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement struct {
	// Key is the label key that the selector applies to.
	Key string `json:"key"`
	// Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists
	// and DoesNotExist.
	Operator string `json:"operator"`
	// Values is an array of string values. If the operator is In or NotIn, the values array must be
	// non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array
	// is replaced during a strategic merge patch.
	Values []string `json:"values"`
}

// GetKey returns the value of Key.
func (s *IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement) GetKey() string {
	return s.Key
}

// GetOperator returns the value of Operator.
func (s *IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement) GetOperator() string {
	return s.Operator
}

// GetValues returns the value of Values.
func (s *IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement) GetValues() []string {
	return s.Values
}

// SetKey sets the value of Key.
func (s *IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement) SetKey(val string) {
	s.Key = val
}

// SetOperator sets the value of Operator.
func (s *IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement) SetOperator(val string) {
	s.Operator = val
}

// SetValues sets the value of Values.
func (s *IoK8sApimachineryPkgApisMetaV1LabelSelectorRequirement) SetValues(val []string) {
	s.Values = val
}

// ListMeta describes metadata that synthetic resources must have, including lists and various status
// objects. A resource may have only one of {ObjectMeta, ListMeta}.
// Ref: #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta
type IoK8sApimachineryPkgApisMetaV1ListMeta struct {
	// Continue may be set if the user set a limit on the number of items returned, and indicates that
	// the server has more data available. The value is opaque and may be used to issue another request
	// to the endpoint that served this list to retrieve the next set of available objects. Continuing a
	// consistent list may not be possible if the server configuration has changed or more than a few
	// minutes have passed. The resourceVersion field returned when using this continue value will be
	// identical to the value in the first response, unless you have received this token from an error
	// message.
	Continue OptString `json:"continue"`
	// RemainingItemCount is the number of subsequent items in the list which are not included in this
	// list response. If the list request contained label or field selectors, then the number of
	// remaining items is unknown and the field will be left unset and omitted during serialization. If
	// the list is complete (either because it is not chunking or because this is the last chunk), then
	// there are no more remaining items and this field will be left unset and omitted during
	// serialization. Servers older than v1.15 do not set this field. The intended use of the
	// remainingItemCount is *estimating* the size of a collection. Clients should not rely on the
	// remainingItemCount to be set or to be exact.
	RemainingItemCount OptInt64 `json:"remainingItemCount"`
	// String that identifies the server's internal version of this object that can be used by clients to
	// determine when objects have changed. Value must be treated as opaque by clients and passed
	// unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.
	// io/community/contributors/devel/sig-architecture/api-conventions.
	// md#concurrency-control-and-consistency.
	ResourceVersion OptString `json:"resourceVersion"`
	// SelfLink is a URL representing this object. Populated by the system. Read-only.
	// DEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to
	// be removed in 1.21 release.
	SelfLink OptString `json:"selfLink"`
}

// GetContinue returns the value of Continue.
func (s *IoK8sApimachineryPkgApisMetaV1ListMeta) GetContinue() OptString {
	return s.Continue
}

// GetRemainingItemCount returns the value of RemainingItemCount.
func (s *IoK8sApimachineryPkgApisMetaV1ListMeta) GetRemainingItemCount() OptInt64 {
	return s.RemainingItemCount
}

// GetResourceVersion returns the value of ResourceVersion.
func (s *IoK8sApimachineryPkgApisMetaV1ListMeta) GetResourceVersion() OptString {
	return s.ResourceVersion
}

// GetSelfLink returns the value of SelfLink.
func (s *IoK8sApimachineryPkgApisMetaV1ListMeta) GetSelfLink() OptString {
	return s.SelfLink
}

// SetContinue sets the value of Continue.
func (s *IoK8sApimachineryPkgApisMetaV1ListMeta) SetContinue(val OptString) {
	s.Continue = val
}

// SetRemainingItemCount sets the value of RemainingItemCount.
func (s *IoK8sApimachineryPkgApisMetaV1ListMeta) SetRemainingItemCount(val OptInt64) {
	s.RemainingItemCount = val
}

// SetResourceVersion sets the value of ResourceVersion.
func (s *IoK8sApimachineryPkgApisMetaV1ListMeta) SetResourceVersion(val OptString) {
	s.ResourceVersion = val
}

// SetSelfLink sets the value of SelfLink.
func (s *IoK8sApimachineryPkgApisMetaV1ListMeta) SetSelfLink(val OptString) {
	s.SelfLink = val
}

// ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the
// fieldset applies to.
// Ref: #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry
type IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry struct {
	// APIVersion defines the version of this resource that this field set applies to. The format is
	// "group/version" just like the top-level APIVersion field. It is necessary to track the version of
	// a field set because it cannot be automatically converted.
	ApiVersion OptString `json:"apiVersion"`
	// FieldsType is the discriminator for the different fields format and version. There is currently
	// only one possible value: "FieldsV1".
	FieldsType OptString                               `json:"fieldsType"`
	FieldsV1   *IoK8sApimachineryPkgApisMetaV1FieldsV1 `json:"fieldsV1"`
	// Manager is an identifier of the workflow managing these fields.
	Manager OptString `json:"manager"`
	// Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only
	// valid values for this field are 'Apply' and 'Update'.
	Operation OptString `json:"operation"`
	// Subresource is the name of the subresource used to update that object, or empty string if the
	// object was updated through the main resource. The value of this field is used to distinguish
	// between managers, even if they share the same name. For example, a status update will be distinct
	// from a regular update using the same manager name. Note that the APIVersion field is not related
	// to the Subresource field and it always corresponds to the version of the main resource.
	Subresource OptString                             `json:"subresource"`
	Time        OptIoK8sApimachineryPkgApisMetaV1Time `json:"time"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetFieldsType returns the value of FieldsType.
func (s *IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry) GetFieldsType() OptString {
	return s.FieldsType
}

// GetFieldsV1 returns the value of FieldsV1.
func (s *IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry) GetFieldsV1() *IoK8sApimachineryPkgApisMetaV1FieldsV1 {
	return s.FieldsV1
}

// GetManager returns the value of Manager.
func (s *IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry) GetManager() OptString {
	return s.Manager
}

// GetOperation returns the value of Operation.
func (s *IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry) GetOperation() OptString {
	return s.Operation
}

// GetSubresource returns the value of Subresource.
func (s *IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry) GetSubresource() OptString {
	return s.Subresource
}

// GetTime returns the value of Time.
func (s *IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry) GetTime() OptIoK8sApimachineryPkgApisMetaV1Time {
	return s.Time
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetFieldsType sets the value of FieldsType.
func (s *IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry) SetFieldsType(val OptString) {
	s.FieldsType = val
}

// SetFieldsV1 sets the value of FieldsV1.
func (s *IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry) SetFieldsV1(val *IoK8sApimachineryPkgApisMetaV1FieldsV1) {
	s.FieldsV1 = val
}

// SetManager sets the value of Manager.
func (s *IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry) SetManager(val OptString) {
	s.Manager = val
}

// SetOperation sets the value of Operation.
func (s *IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry) SetOperation(val OptString) {
	s.Operation = val
}

// SetSubresource sets the value of Subresource.
func (s *IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry) SetSubresource(val OptString) {
	s.Subresource = val
}

// SetTime sets the value of Time.
func (s *IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry) SetTime(val OptIoK8sApimachineryPkgApisMetaV1Time) {
	s.Time = val
}

type IoK8sApimachineryPkgApisMetaV1MicroTime time.Time

// ObjectMeta is metadata that all persisted resources must have, which includes all objects users
// must create.
// Ref: #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta
type IoK8sApimachineryPkgApisMetaV1ObjectMeta struct {
	// Annotations is an unstructured key value map stored with a resource that may be set by external
	// tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved
	// when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations.
	Annotations OptIoK8sApimachineryPkgApisMetaV1ObjectMetaAnnotations `json:"annotations"`
	// The name of the cluster which the object belongs to. This is used to distinguish resources with
	// same name and namespace in different clusters. This field is not set anywhere right now and
	// apiserver is going to ignore it if set in create or update request.
	ClusterName       OptString                             `json:"clusterName"`
	CreationTimestamp OptIoK8sApimachineryPkgApisMetaV1Time `json:"creationTimestamp"`
	// Number of seconds allowed for this object to gracefully terminate before it will be removed from
	// the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
	DeletionGracePeriodSeconds OptInt64                              `json:"deletionGracePeriodSeconds"`
	DeletionTimestamp          OptIoK8sApimachineryPkgApisMetaV1Time `json:"deletionTimestamp"`
	// Must be empty before the object is deleted from the registry. Each entry is an identifier for the
	// responsible component that will remove the entry from the list. If the deletionTimestamp of the
	// object is non-nil, entries in this list can only be removed. Finalizers may be processed and
	// removed in any order.  Order is NOT enforced because it introduces significant risk of stuck
	// finalizers. finalizers is a shared field, any actor with permission can reorder it. If the
	// finalizer list is processed in order, then this can lead to a situation in which the component
	// responsible for the first finalizer in the list is waiting for a signal (field value, external
	// system, or other) produced by a component responsible for a finalizer later in the list, resulting
	// in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are
	// not vulnerable to ordering changes in the list.
	Finalizers []string `json:"finalizers"`
	// GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name
	// field has not been provided. If this field is used, the name returned to the client will be
	// different than the name passed. This value will also be combined with a unique suffix. The
	// provided value has the same validation rules as the Name field, and may be truncated by the length
	// of the suffix required to make the value unique on the server.
	// If this field is specified and the generated name exists, the server will NOT return a 409 -
	// instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique
	// name could not be found in the time allotted, and the client should retry (optionally after the
	// time indicated in the Retry-After header).
	// Applied only if Name is not specified. More info: https://git.k8s.
	// io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency.
	GenerateName OptString `json:"generateName"`
	// A sequence number representing a specific generation of the desired state. Populated by the system.
	//  Read-only.
	Generation OptInt64 `json:"generation"`
	// Map of string keys and values that can be used to organize and categorize (scope and select)
	// objects. May match selectors of replication controllers and services. More info: http://kubernetes.
	// io/docs/user-guide/labels.
	Labels OptIoK8sApimachineryPkgApisMetaV1ObjectMetaLabels `json:"labels"`
	// ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow.
	// This is mostly for internal housekeeping, and users typically shouldn't need to set or understand
	// this field. A workflow can be the user's name, a controller's name, or the name of a specific
	// apply path like "ci-cd". The set of fields is always in the version that the workflow used when
	// modifying the object.
	ManagedFields []IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry `json:"managedFields"`
	// Name must be unique within a namespace. Is required when creating resources, although some
	// resources may allow a client to request the generation of an appropriate name automatically. Name
	// is primarily intended for creation idempotence and configuration definition. Cannot be updated.
	// More info: http://kubernetes.io/docs/user-guide/identifiers#names.
	Name OptString `json:"name"`
	// Namespace defines the space within which each name must be unique. An empty namespace is
	// equivalent to the "default" namespace, but "default" is the canonical representation. Not all
	// objects are required to be scoped to a namespace - the value of this field for those objects will
	// be empty.
	// Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces.
	Namespace OptString `json:"namespace"`
	// List of objects depended by this object. If ALL objects in the list have been deleted, this object
	// will be garbage collected. If this object is managed by a controller, then an entry in this list
	// will point to this controller, with the controller field set to true. There cannot be more than
	// one managing controller.
	OwnerReferences []IoK8sApimachineryPkgApisMetaV1OwnerReference `json:"ownerReferences"`
	// An opaque value that represents the internal version of this object that can be used by clients to
	// determine when objects have changed. May be used for optimistic concurrency, change detection, and
	// the watch operation on a resource or set of resources. Clients must treat these values as opaque
	// and passed unmodified back to the server. They may only be valid for a particular resource or set
	// of resources.
	// Populated by the system. Read-only. Value must be treated as opaque by clients and . More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.
	// md#concurrency-control-and-consistency.
	ResourceVersion OptString `json:"resourceVersion"`
	// SelfLink is a URL representing this object. Populated by the system. Read-only.
	// DEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to
	// be removed in 1.21 release.
	SelfLink OptString `json:"selfLink"`
	// UID is the unique in time and space value for this object. It is typically generated by the server
	// on successful creation of a resource and is not allowed to change on PUT operations.
	// Populated by the system. Read-only. More info: http://kubernetes.
	// io/docs/user-guide/identifiers#uids.
	UID OptString `json:"uid"`
}

// GetAnnotations returns the value of Annotations.
func (s *IoK8sApimachineryPkgApisMetaV1ObjectMeta) GetAnnotations() OptIoK8sApimachineryPkgApisMetaV1ObjectMetaAnnotations {
	return s.Annotations
}

// GetClusterName returns the value of ClusterName.
func (s *IoK8sApimachineryPkgApisMetaV1ObjectMeta) GetClusterName() OptString {
	return s.ClusterName
}

// GetCreationTimestamp returns the value of CreationTimestamp.
func (s *IoK8sApimachineryPkgApisMetaV1ObjectMeta) GetCreationTimestamp() OptIoK8sApimachineryPkgApisMetaV1Time {
	return s.CreationTimestamp
}

// GetDeletionGracePeriodSeconds returns the value of DeletionGracePeriodSeconds.
func (s *IoK8sApimachineryPkgApisMetaV1ObjectMeta) GetDeletionGracePeriodSeconds() OptInt64 {
	return s.DeletionGracePeriodSeconds
}

// GetDeletionTimestamp returns the value of DeletionTimestamp.
func (s *IoK8sApimachineryPkgApisMetaV1ObjectMeta) GetDeletionTimestamp() OptIoK8sApimachineryPkgApisMetaV1Time {
	return s.DeletionTimestamp
}

// GetFinalizers returns the value of Finalizers.
func (s *IoK8sApimachineryPkgApisMetaV1ObjectMeta) GetFinalizers() []string {
	return s.Finalizers
}

// GetGenerateName returns the value of GenerateName.
func (s *IoK8sApimachineryPkgApisMetaV1ObjectMeta) GetGenerateName() OptString {
	return s.GenerateName
}

// GetGeneration returns the value of Generation.
func (s *IoK8sApimachineryPkgApisMetaV1ObjectMeta) GetGeneration() OptInt64 {
	return s.Generation
}

// GetLabels returns the value of Labels.
func (s *IoK8sApimachineryPkgApisMetaV1ObjectMeta) GetLabels() OptIoK8sApimachineryPkgApisMetaV1ObjectMetaLabels {
	return s.Labels
}

// GetManagedFields returns the value of ManagedFields.
func (s *IoK8sApimachineryPkgApisMetaV1ObjectMeta) GetManagedFields() []IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry {
	return s.ManagedFields
}

// GetName returns the value of Name.
func (s *IoK8sApimachineryPkgApisMetaV1ObjectMeta) GetName() OptString {
	return s.Name
}

// GetNamespace returns the value of Namespace.
func (s *IoK8sApimachineryPkgApisMetaV1ObjectMeta) GetNamespace() OptString {
	return s.Namespace
}

// GetOwnerReferences returns the value of OwnerReferences.
func (s *IoK8sApimachineryPkgApisMetaV1ObjectMeta) GetOwnerReferences() []IoK8sApimachineryPkgApisMetaV1OwnerReference {
	return s.OwnerReferences
}

// GetResourceVersion returns the value of ResourceVersion.
func (s *IoK8sApimachineryPkgApisMetaV1ObjectMeta) GetResourceVersion() OptString {
	return s.ResourceVersion
}

// GetSelfLink returns the value of SelfLink.
func (s *IoK8sApimachineryPkgApisMetaV1ObjectMeta) GetSelfLink() OptString {
	return s.SelfLink
}

// GetUID returns the value of UID.
func (s *IoK8sApimachineryPkgApisMetaV1ObjectMeta) GetUID() OptString {
	return s.UID
}

// SetAnnotations sets the value of Annotations.
func (s *IoK8sApimachineryPkgApisMetaV1ObjectMeta) SetAnnotations(val OptIoK8sApimachineryPkgApisMetaV1ObjectMetaAnnotations) {
	s.Annotations = val
}

// SetClusterName sets the value of ClusterName.
func (s *IoK8sApimachineryPkgApisMetaV1ObjectMeta) SetClusterName(val OptString) {
	s.ClusterName = val
}

// SetCreationTimestamp sets the value of CreationTimestamp.
func (s *IoK8sApimachineryPkgApisMetaV1ObjectMeta) SetCreationTimestamp(val OptIoK8sApimachineryPkgApisMetaV1Time) {
	s.CreationTimestamp = val
}

// SetDeletionGracePeriodSeconds sets the value of DeletionGracePeriodSeconds.
func (s *IoK8sApimachineryPkgApisMetaV1ObjectMeta) SetDeletionGracePeriodSeconds(val OptInt64) {
	s.DeletionGracePeriodSeconds = val
}

// SetDeletionTimestamp sets the value of DeletionTimestamp.
func (s *IoK8sApimachineryPkgApisMetaV1ObjectMeta) SetDeletionTimestamp(val OptIoK8sApimachineryPkgApisMetaV1Time) {
	s.DeletionTimestamp = val
}

// SetFinalizers sets the value of Finalizers.
func (s *IoK8sApimachineryPkgApisMetaV1ObjectMeta) SetFinalizers(val []string) {
	s.Finalizers = val
}

// SetGenerateName sets the value of GenerateName.
func (s *IoK8sApimachineryPkgApisMetaV1ObjectMeta) SetGenerateName(val OptString) {
	s.GenerateName = val
}

// SetGeneration sets the value of Generation.
func (s *IoK8sApimachineryPkgApisMetaV1ObjectMeta) SetGeneration(val OptInt64) {
	s.Generation = val
}

// SetLabels sets the value of Labels.
func (s *IoK8sApimachineryPkgApisMetaV1ObjectMeta) SetLabels(val OptIoK8sApimachineryPkgApisMetaV1ObjectMetaLabels) {
	s.Labels = val
}

// SetManagedFields sets the value of ManagedFields.
func (s *IoK8sApimachineryPkgApisMetaV1ObjectMeta) SetManagedFields(val []IoK8sApimachineryPkgApisMetaV1ManagedFieldsEntry) {
	s.ManagedFields = val
}

// SetName sets the value of Name.
func (s *IoK8sApimachineryPkgApisMetaV1ObjectMeta) SetName(val OptString) {
	s.Name = val
}

// SetNamespace sets the value of Namespace.
func (s *IoK8sApimachineryPkgApisMetaV1ObjectMeta) SetNamespace(val OptString) {
	s.Namespace = val
}

// SetOwnerReferences sets the value of OwnerReferences.
func (s *IoK8sApimachineryPkgApisMetaV1ObjectMeta) SetOwnerReferences(val []IoK8sApimachineryPkgApisMetaV1OwnerReference) {
	s.OwnerReferences = val
}

// SetResourceVersion sets the value of ResourceVersion.
func (s *IoK8sApimachineryPkgApisMetaV1ObjectMeta) SetResourceVersion(val OptString) {
	s.ResourceVersion = val
}

// SetSelfLink sets the value of SelfLink.
func (s *IoK8sApimachineryPkgApisMetaV1ObjectMeta) SetSelfLink(val OptString) {
	s.SelfLink = val
}

// SetUID sets the value of UID.
func (s *IoK8sApimachineryPkgApisMetaV1ObjectMeta) SetUID(val OptString) {
	s.UID = val
}

// Annotations is an unstructured key value map stored with a resource that may be set by external
// tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved
// when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations.
type IoK8sApimachineryPkgApisMetaV1ObjectMetaAnnotations map[string]string

func (s *IoK8sApimachineryPkgApisMetaV1ObjectMetaAnnotations) init() IoK8sApimachineryPkgApisMetaV1ObjectMetaAnnotations {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Map of string keys and values that can be used to organize and categorize (scope and select)
// objects. May match selectors of replication controllers and services. More info: http://kubernetes.
// io/docs/user-guide/labels.
type IoK8sApimachineryPkgApisMetaV1ObjectMetaLabels map[string]string

func (s *IoK8sApimachineryPkgApisMetaV1ObjectMetaLabels) init() IoK8sApimachineryPkgApisMetaV1ObjectMetaLabels {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// OwnerReference contains enough information to let you identify an owning object. An owning object
// must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace
// field.
// Ref: #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference
type IoK8sApimachineryPkgApisMetaV1OwnerReference struct {
	// API version of the referent.
	ApiVersion string `json:"apiVersion"`
	// If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted
	// from the key-value store until this reference is removed. Defaults to false. To set this field, a
	// user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
	BlockOwnerDeletion OptBool `json:"blockOwnerDeletion"`
	// If true, this reference points to the managing controller.
	Controller OptBool `json:"controller"`
	// Kind of the referent. More info: https://git.k8s.
	// io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind string `json:"kind"`
	// Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names.
	Name string `json:"name"`
	// UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids.
	UID string `json:"uid"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sApimachineryPkgApisMetaV1OwnerReference) GetApiVersion() string {
	return s.ApiVersion
}

// GetBlockOwnerDeletion returns the value of BlockOwnerDeletion.
func (s *IoK8sApimachineryPkgApisMetaV1OwnerReference) GetBlockOwnerDeletion() OptBool {
	return s.BlockOwnerDeletion
}

// GetController returns the value of Controller.
func (s *IoK8sApimachineryPkgApisMetaV1OwnerReference) GetController() OptBool {
	return s.Controller
}

// GetKind returns the value of Kind.
func (s *IoK8sApimachineryPkgApisMetaV1OwnerReference) GetKind() string {
	return s.Kind
}

// GetName returns the value of Name.
func (s *IoK8sApimachineryPkgApisMetaV1OwnerReference) GetName() string {
	return s.Name
}

// GetUID returns the value of UID.
func (s *IoK8sApimachineryPkgApisMetaV1OwnerReference) GetUID() string {
	return s.UID
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sApimachineryPkgApisMetaV1OwnerReference) SetApiVersion(val string) {
	s.ApiVersion = val
}

// SetBlockOwnerDeletion sets the value of BlockOwnerDeletion.
func (s *IoK8sApimachineryPkgApisMetaV1OwnerReference) SetBlockOwnerDeletion(val OptBool) {
	s.BlockOwnerDeletion = val
}

// SetController sets the value of Controller.
func (s *IoK8sApimachineryPkgApisMetaV1OwnerReference) SetController(val OptBool) {
	s.Controller = val
}

// SetKind sets the value of Kind.
func (s *IoK8sApimachineryPkgApisMetaV1OwnerReference) SetKind(val string) {
	s.Kind = val
}

// SetName sets the value of Name.
func (s *IoK8sApimachineryPkgApisMetaV1OwnerReference) SetName(val string) {
	s.Name = val
}

// SetUID sets the value of UID.
func (s *IoK8sApimachineryPkgApisMetaV1OwnerReference) SetUID(val string) {
	s.UID = val
}

// ServerAddressByClientCIDR helps the client to determine the server address that they should use,
// depending on the clientCIDR that they match.
// Ref: #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR
type IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR struct {
	// The CIDR with which clients can match their IP to figure out the server address that they should
	// use.
	ClientCIDR string `json:"clientCIDR"`
	// Address of this server, suitable for a client that matches the above CIDR. This can be a hostname,
	// hostname:port, IP or IP:port.
	ServerAddress string `json:"serverAddress"`
}

// GetClientCIDR returns the value of ClientCIDR.
func (s *IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR) GetClientCIDR() string {
	return s.ClientCIDR
}

// GetServerAddress returns the value of ServerAddress.
func (s *IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR) GetServerAddress() string {
	return s.ServerAddress
}

// SetClientCIDR sets the value of ClientCIDR.
func (s *IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR) SetClientCIDR(val string) {
	s.ClientCIDR = val
}

// SetServerAddress sets the value of ServerAddress.
func (s *IoK8sApimachineryPkgApisMetaV1ServerAddressByClientCIDR) SetServerAddress(val string) {
	s.ServerAddress = val
}

type IoK8sApimachineryPkgApisMetaV1Time time.Time

// Event represents a single event to a watched resource.
// Ref: #/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent
type IoK8sApimachineryPkgApisMetaV1WatchEvent struct {
	Object IoK8sApimachineryPkgRuntimeRawExtension `json:"object"`
	Type   string                                  `json:"type"`
}

// GetObject returns the value of Object.
func (s *IoK8sApimachineryPkgApisMetaV1WatchEvent) GetObject() IoK8sApimachineryPkgRuntimeRawExtension {
	return s.Object
}

// GetType returns the value of Type.
func (s *IoK8sApimachineryPkgApisMetaV1WatchEvent) GetType() string {
	return s.Type
}

// SetObject sets the value of Object.
func (s *IoK8sApimachineryPkgApisMetaV1WatchEvent) SetObject(val IoK8sApimachineryPkgRuntimeRawExtension) {
	s.Object = val
}

// SetType sets the value of Type.
func (s *IoK8sApimachineryPkgApisMetaV1WatchEvent) SetType(val string) {
	s.Type = val
}

func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchAdmissionregistrationV1MutatingWebhookConfigurationListRes() {
}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchAdmissionregistrationV1MutatingWebhookConfigurationRes() {
}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchAdmissionregistrationV1ValidatingWebhookConfigurationListRes() {
}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchAdmissionregistrationV1ValidatingWebhookConfigurationRes() {
}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchApiextensionsV1CustomResourceDefinitionListRes() {
}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchApiextensionsV1CustomResourceDefinitionRes() {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchApiregistrationV1APIServiceListRes()         {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchApiregistrationV1APIServiceRes()             {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchAppsV1ControllerRevisionListForAllNamespacesRes() {
}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchAppsV1DaemonSetListForAllNamespacesRes()    {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchAppsV1DeploymentListForAllNamespacesRes()   {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchAppsV1NamespacedControllerRevisionListRes() {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchAppsV1NamespacedControllerRevisionRes()     {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchAppsV1NamespacedDaemonSetListRes()          {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchAppsV1NamespacedDaemonSetRes()              {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchAppsV1NamespacedDeploymentListRes()         {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchAppsV1NamespacedDeploymentRes()             {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchAppsV1NamespacedReplicaSetListRes()         {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchAppsV1NamespacedReplicaSetRes()             {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchAppsV1NamespacedStatefulSetListRes()        {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchAppsV1NamespacedStatefulSetRes()            {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchAppsV1ReplicaSetListForAllNamespacesRes()   {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchAppsV1StatefulSetListForAllNamespacesRes()  {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesRes() {
}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchAutoscalingV1NamespacedHorizontalPodAutoscalerListRes() {
}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchAutoscalingV1NamespacedHorizontalPodAutoscalerRes() {
}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesRes() {
}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListRes() {
}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRes() {
}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesRes() {
}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListRes() {
}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRes() {
}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchBatchV1CronJobListForAllNamespacesRes()      {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchBatchV1JobListForAllNamespacesRes()          {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchBatchV1NamespacedCronJobListRes()            {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchBatchV1NamespacedCronJobRes()                {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchBatchV1NamespacedJobListRes()                {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchBatchV1NamespacedJobRes()                    {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchBatchV1beta1CronJobListForAllNamespacesRes() {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchBatchV1beta1NamespacedCronJobListRes()       {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchBatchV1beta1NamespacedCronJobRes()           {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchCertificatesV1CertificateSigningRequestListRes() {
}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchCertificatesV1CertificateSigningRequestRes() {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchCoordinationV1LeaseListForAllNamespacesRes() {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchCoordinationV1NamespacedLeaseListRes()       {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchCoordinationV1NamespacedLeaseRes()           {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchCoreV1ConfigMapListForAllNamespacesRes()     {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchCoreV1EndpointsListForAllNamespacesRes()     {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchCoreV1EventListForAllNamespacesRes()         {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchCoreV1LimitRangeListForAllNamespacesRes()    {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchCoreV1NamespaceListRes()                     {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchCoreV1NamespaceRes()                         {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchCoreV1NamespacedConfigMapListRes()           {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchCoreV1NamespacedConfigMapRes()               {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchCoreV1NamespacedEndpointsListRes()           {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchCoreV1NamespacedEndpointsRes()               {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchCoreV1NamespacedEventListRes()               {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchCoreV1NamespacedEventRes()                   {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchCoreV1NamespacedLimitRangeListRes()          {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchCoreV1NamespacedLimitRangeRes()              {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchCoreV1NamespacedPersistentVolumeClaimListRes() {
}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchCoreV1NamespacedPersistentVolumeClaimRes() {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchCoreV1NamespacedPodListRes()               {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchCoreV1NamespacedPodRes()                   {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchCoreV1NamespacedPodTemplateListRes()       {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchCoreV1NamespacedPodTemplateRes()           {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchCoreV1NamespacedReplicationControllerListRes() {
}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchCoreV1NamespacedReplicationControllerRes() {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchCoreV1NamespacedResourceQuotaListRes()     {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchCoreV1NamespacedResourceQuotaRes()         {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchCoreV1NamespacedSecretListRes()            {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchCoreV1NamespacedSecretRes()                {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchCoreV1NamespacedServiceAccountListRes()    {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchCoreV1NamespacedServiceAccountRes()        {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchCoreV1NamespacedServiceListRes()           {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchCoreV1NamespacedServiceRes()               {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchCoreV1NodeListRes()                        {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchCoreV1NodeRes()                            {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchCoreV1PersistentVolumeClaimListForAllNamespacesRes() {
}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchCoreV1PersistentVolumeListRes()            {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchCoreV1PersistentVolumeRes()                {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchCoreV1PodListForAllNamespacesRes()         {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchCoreV1PodTemplateListForAllNamespacesRes() {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchCoreV1ReplicationControllerListForAllNamespacesRes() {
}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchCoreV1ResourceQuotaListForAllNamespacesRes()  {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchCoreV1SecretListForAllNamespacesRes()         {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchCoreV1ServiceAccountListForAllNamespacesRes() {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchCoreV1ServiceListForAllNamespacesRes()        {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchDiscoveryV1EndpointSliceListForAllNamespacesRes() {
}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchDiscoveryV1NamespacedEndpointSliceListRes() {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchDiscoveryV1NamespacedEndpointSliceRes()     {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchDiscoveryV1beta1EndpointSliceListForAllNamespacesRes() {
}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchDiscoveryV1beta1NamespacedEndpointSliceListRes() {
}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchDiscoveryV1beta1NamespacedEndpointSliceRes() {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchEventsV1EventListForAllNamespacesRes()       {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchEventsV1NamespacedEventListRes()             {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchEventsV1NamespacedEventRes()                 {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchEventsV1beta1EventListForAllNamespacesRes()  {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchEventsV1beta1NamespacedEventListRes()        {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchEventsV1beta1NamespacedEventRes()            {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchFlowcontrolApiserverV1beta1FlowSchemaListRes() {
}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchFlowcontrolApiserverV1beta1FlowSchemaRes() {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListRes() {
}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchFlowcontrolApiserverV1beta1PriorityLevelConfigurationRes() {
}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchFlowcontrolApiserverV1beta2FlowSchemaListRes() {
}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchFlowcontrolApiserverV1beta2FlowSchemaRes() {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListRes() {
}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchFlowcontrolApiserverV1beta2PriorityLevelConfigurationRes() {
}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchInternalApiserverV1alpha1StorageVersionListRes() {
}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchInternalApiserverV1alpha1StorageVersionRes() {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchNetworkingV1IngressClassListRes()            {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchNetworkingV1IngressClassRes()                {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchNetworkingV1IngressListForAllNamespacesRes() {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchNetworkingV1NamespacedIngressListRes()       {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchNetworkingV1NamespacedIngressRes()           {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchNetworkingV1NamespacedNetworkPolicyListRes() {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchNetworkingV1NamespacedNetworkPolicyRes()     {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchNetworkingV1NetworkPolicyListForAllNamespacesRes() {
}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchNodeV1RuntimeClassListRes()       {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchNodeV1RuntimeClassRes()           {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchNodeV1alpha1RuntimeClassListRes() {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchNodeV1alpha1RuntimeClassRes()     {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchNodeV1beta1RuntimeClassListRes()  {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchNodeV1beta1RuntimeClassRes()      {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchPolicyV1NamespacedPodDisruptionBudgetListRes() {
}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchPolicyV1NamespacedPodDisruptionBudgetRes() {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchPolicyV1PodDisruptionBudgetListForAllNamespacesRes() {
}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchPolicyV1beta1NamespacedPodDisruptionBudgetListRes() {
}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchPolicyV1beta1NamespacedPodDisruptionBudgetRes() {
}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesRes() {
}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchPolicyV1beta1PodSecurityPolicyListRes() {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchPolicyV1beta1PodSecurityPolicyRes()     {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchRbacAuthorizationV1ClusterRoleBindingListRes() {
}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchRbacAuthorizationV1ClusterRoleBindingRes() {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchRbacAuthorizationV1ClusterRoleListRes()    {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchRbacAuthorizationV1ClusterRoleRes()        {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchRbacAuthorizationV1NamespacedRoleBindingListRes() {
}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchRbacAuthorizationV1NamespacedRoleBindingRes() {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchRbacAuthorizationV1NamespacedRoleListRes()    {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchRbacAuthorizationV1NamespacedRoleRes()        {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchRbacAuthorizationV1RoleBindingListForAllNamespacesRes() {
}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchRbacAuthorizationV1RoleListForAllNamespacesRes() {
}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchSchedulingV1PriorityClassListRes() {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchSchedulingV1PriorityClassRes()     {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchStorageV1CSIDriverListRes()        {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchStorageV1CSIDriverRes()            {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchStorageV1CSINodeListRes()          {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchStorageV1CSINodeRes()              {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchStorageV1StorageClassListRes()     {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchStorageV1StorageClassRes()         {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchStorageV1VolumeAttachmentListRes() {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchStorageV1VolumeAttachmentRes()     {}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchStorageV1alpha1CSIStorageCapacityListForAllNamespacesRes() {
}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchStorageV1alpha1NamespacedCSIStorageCapacityListRes() {
}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchStorageV1alpha1NamespacedCSIStorageCapacityRes() {
}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchStorageV1beta1CSIStorageCapacityListForAllNamespacesRes() {
}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchStorageV1beta1NamespacedCSIStorageCapacityListRes() {
}
func (*IoK8sApimachineryPkgApisMetaV1WatchEvent) watchStorageV1beta1NamespacedCSIStorageCapacityRes() {
}

// RawExtension is used to hold extensions in external versions.
// To use this, make a field which has RawExtension as its type in your external, versioned struct,
// and Object in your internal struct. You also need to register your various plugin types.
// // Internal package: type MyAPIObject struct {
// runtime.TypeMeta `json:",inline"`
// MyPlugin runtime.Object `json:"myPlugin"`
// } type PluginA struct {
// AOption string `json:"aOption"`
// }
// // External package: type MyAPIObject struct {
// runtime.TypeMeta `json:",inline"`
// MyPlugin runtime.RawExtension `json:"myPlugin"`
// } type PluginA struct {
// AOption string `json:"aOption"`
// }
// // On the wire, the JSON will look something like this: {
// "kind":"MyAPIObject",
// "apiVersion":"v1",
// "myPlugin": {
// "kind":"PluginA",
// "aOption":"foo",
// },
// }
// So what happens? Decode first uses json or yaml to unmarshal the serialized data into your
// external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to
// copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has
// conversion functions installed which will unpack the JSON stored in RawExtension, turning it into
// the correct object type, and storing it in the Object. (TODO: In the case where the object is of
// an unknown type, a runtime.Unknown object will be created and stored.).
// Ref: #/components/schemas/io.k8s.apimachinery.pkg.runtime.RawExtension
type IoK8sApimachineryPkgRuntimeRawExtension struct{}

type IoK8sApimachineryPkgUtilIntstrIntOrString string

// Info contains versioning information. how we'll want to distribute that information.
// Ref: #/components/schemas/io.k8s.apimachinery.pkg.version.Info
type IoK8sApimachineryPkgVersionInfo struct {
	BuildDate    string `json:"buildDate"`
	Compiler     string `json:"compiler"`
	GitCommit    string `json:"gitCommit"`
	GitTreeState string `json:"gitTreeState"`
	GitVersion   string `json:"gitVersion"`
	GoVersion    string `json:"goVersion"`
	Major        string `json:"major"`
	Minor        string `json:"minor"`
	Platform     string `json:"platform"`
}

// GetBuildDate returns the value of BuildDate.
func (s *IoK8sApimachineryPkgVersionInfo) GetBuildDate() string {
	return s.BuildDate
}

// GetCompiler returns the value of Compiler.
func (s *IoK8sApimachineryPkgVersionInfo) GetCompiler() string {
	return s.Compiler
}

// GetGitCommit returns the value of GitCommit.
func (s *IoK8sApimachineryPkgVersionInfo) GetGitCommit() string {
	return s.GitCommit
}

// GetGitTreeState returns the value of GitTreeState.
func (s *IoK8sApimachineryPkgVersionInfo) GetGitTreeState() string {
	return s.GitTreeState
}

// GetGitVersion returns the value of GitVersion.
func (s *IoK8sApimachineryPkgVersionInfo) GetGitVersion() string {
	return s.GitVersion
}

// GetGoVersion returns the value of GoVersion.
func (s *IoK8sApimachineryPkgVersionInfo) GetGoVersion() string {
	return s.GoVersion
}

// GetMajor returns the value of Major.
func (s *IoK8sApimachineryPkgVersionInfo) GetMajor() string {
	return s.Major
}

// GetMinor returns the value of Minor.
func (s *IoK8sApimachineryPkgVersionInfo) GetMinor() string {
	return s.Minor
}

// GetPlatform returns the value of Platform.
func (s *IoK8sApimachineryPkgVersionInfo) GetPlatform() string {
	return s.Platform
}

// SetBuildDate sets the value of BuildDate.
func (s *IoK8sApimachineryPkgVersionInfo) SetBuildDate(val string) {
	s.BuildDate = val
}

// SetCompiler sets the value of Compiler.
func (s *IoK8sApimachineryPkgVersionInfo) SetCompiler(val string) {
	s.Compiler = val
}

// SetGitCommit sets the value of GitCommit.
func (s *IoK8sApimachineryPkgVersionInfo) SetGitCommit(val string) {
	s.GitCommit = val
}

// SetGitTreeState sets the value of GitTreeState.
func (s *IoK8sApimachineryPkgVersionInfo) SetGitTreeState(val string) {
	s.GitTreeState = val
}

// SetGitVersion sets the value of GitVersion.
func (s *IoK8sApimachineryPkgVersionInfo) SetGitVersion(val string) {
	s.GitVersion = val
}

// SetGoVersion sets the value of GoVersion.
func (s *IoK8sApimachineryPkgVersionInfo) SetGoVersion(val string) {
	s.GoVersion = val
}

// SetMajor sets the value of Major.
func (s *IoK8sApimachineryPkgVersionInfo) SetMajor(val string) {
	s.Major = val
}

// SetMinor sets the value of Minor.
func (s *IoK8sApimachineryPkgVersionInfo) SetMinor(val string) {
	s.Minor = val
}

// SetPlatform sets the value of Platform.
func (s *IoK8sApimachineryPkgVersionInfo) SetPlatform(val string) {
	s.Platform = val
}

func (*IoK8sApimachineryPkgVersionInfo) getCodeVersionRes() {}

// APIService represents a server for a particular GroupVersion. Name must be "version.group".
// Ref: #/components/schemas/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService
type IoK8sKubeAggregatorPkgApisApiregistrationV1APIService struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                                      `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ObjectMeta                    `json:"metadata"`
	Spec     OptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec   `json:"spec"`
	Status   OptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus `json:"status"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIService) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIService) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIService) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return s.Metadata
}

// GetSpec returns the value of Spec.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIService) GetSpec() OptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec {
	return s.Spec
}

// GetStatus returns the value of Status.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIService) GetStatus() OptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus {
	return s.Status
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIService) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIService) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIService) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	s.Metadata = val
}

// SetSpec sets the value of Spec.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIService) SetSpec(val OptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec) {
	s.Spec = val
}

// SetStatus sets the value of Status.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIService) SetStatus(val OptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus) {
	s.Status = val
}

func (*IoK8sKubeAggregatorPkgApisApiregistrationV1APIService) readApiregistrationV1APIServiceRes() {}
func (*IoK8sKubeAggregatorPkgApisApiregistrationV1APIService) readApiregistrationV1APIServiceStatusRes() {
}

// APIServiceCondition describes the state of an APIService at a particular point.
// Ref: #/components/schemas/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceCondition
type IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceCondition struct {
	LastTransitionTime OptIoK8sApimachineryPkgApisMetaV1Time `json:"lastTransitionTime"`
	// Human-readable message indicating details about last transition.
	Message OptString `json:"message"`
	// Unique, one-word, CamelCase reason for the condition's last transition.
	Reason OptString `json:"reason"`
	// Status is the status of the condition. Can be True, False, Unknown.
	Status string `json:"status"`
	// Type is the type of the condition.
	Type string `json:"type"`
}

// GetLastTransitionTime returns the value of LastTransitionTime.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceCondition) GetLastTransitionTime() OptIoK8sApimachineryPkgApisMetaV1Time {
	return s.LastTransitionTime
}

// GetMessage returns the value of Message.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceCondition) GetMessage() OptString {
	return s.Message
}

// GetReason returns the value of Reason.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceCondition) GetReason() OptString {
	return s.Reason
}

// GetStatus returns the value of Status.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceCondition) GetStatus() string {
	return s.Status
}

// GetType returns the value of Type.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceCondition) GetType() string {
	return s.Type
}

// SetLastTransitionTime sets the value of LastTransitionTime.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceCondition) SetLastTransitionTime(val OptIoK8sApimachineryPkgApisMetaV1Time) {
	s.LastTransitionTime = val
}

// SetMessage sets the value of Message.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceCondition) SetMessage(val OptString) {
	s.Message = val
}

// SetReason sets the value of Reason.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceCondition) SetReason(val OptString) {
	s.Reason = val
}

// SetStatus sets the value of Status.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceCondition) SetStatus(val string) {
	s.Status = val
}

// SetType sets the value of Type.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceCondition) SetType(val string) {
	s.Type = val
}

// APIServiceList is a list of APIService objects.
// Ref: #/components/schemas/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceList
type IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceList struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should
	// convert recognized schemas to the latest internal value, and may reject unrecognized values. More
	// info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources.
	ApiVersion OptString `json:"apiVersion"`
	// Items is the list of APIService.
	Items []IoK8sKubeAggregatorPkgApisApiregistrationV1APIService `json:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer
	// this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds.
	Kind     OptString                                 `json:"kind"`
	Metadata OptIoK8sApimachineryPkgApisMetaV1ListMeta `json:"metadata"`
}

// GetApiVersion returns the value of ApiVersion.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceList) GetApiVersion() OptString {
	return s.ApiVersion
}

// GetItems returns the value of Items.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceList) GetItems() []IoK8sKubeAggregatorPkgApisApiregistrationV1APIService {
	return s.Items
}

// GetKind returns the value of Kind.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceList) GetKind() OptString {
	return s.Kind
}

// GetMetadata returns the value of Metadata.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceList) GetMetadata() OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return s.Metadata
}

// SetApiVersion sets the value of ApiVersion.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceList) SetApiVersion(val OptString) {
	s.ApiVersion = val
}

// SetItems sets the value of Items.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceList) SetItems(val []IoK8sKubeAggregatorPkgApisApiregistrationV1APIService) {
	s.Items = val
}

// SetKind sets the value of Kind.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceList) SetKind(val OptString) {
	s.Kind = val
}

// SetMetadata sets the value of Metadata.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceList) SetMetadata(val OptIoK8sApimachineryPkgApisMetaV1ListMeta) {
	s.Metadata = val
}

func (*IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceList) listApiregistrationV1APIServiceRes() {
}

// APIServiceSpec contains information for locating and communicating with a server. Only https is
// supported, though you are able to disable certificate verification.
// Ref: #/components/schemas/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceSpec
type IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec struct {
	// CABundle is a PEM encoded CA bundle which will be used to validate an API server's serving
	// certificate. If unspecified, system trust roots on the apiserver are used.
	CaBundle []byte `json:"caBundle"`
	// Group is the API group name this server hosts.
	Group OptString `json:"group"`
	// GroupPriorityMininum is the priority this group should have at least. Higher priority means that
	// the group is preferred by clients over lower priority ones. Note that other versions of this group
	// might specify even higher GroupPriorityMininum values such that the whole group gets a higher
	// priority. The primary sort is based on GroupPriorityMinimum, ordered highest number to lowest (20
	// before 10). The secondary sort is based on the alphabetical comparison of the name of the object.
	// (v1.bar before v1.foo) We'd recommend something like: *.k8s.io (except extensions) at 18000 and
	// PaaSes (OpenShift, Deis) are recommended to be in the 2000s.
	GroupPriorityMinimum int32 `json:"groupPriorityMinimum"`
	// InsecureSkipTLSVerify disables TLS certificate verification when communicating with this server.
	// This is strongly discouraged.  You should use the CABundle instead.
	InsecureSkipTLSVerify OptBool                                                        `json:"insecureSkipTLSVerify"`
	Service               OptIoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference `json:"service"`
	// Version is the API version this server hosts.  For example, "v1".
	Version OptString `json:"version"`
	// VersionPriority controls the ordering of this API version inside of its group.  Must be greater
	// than zero. The primary sort is based on VersionPriority, ordered highest to lowest (20 before 10).
	// Since it's inside of a group, the number can be small, probably in the 10s. In case of equal
	// version priorities, the version string will be used to compute the order inside a group. If the
	// version string is "kube-like", it will sort above non "kube-like" version strings, which are
	// ordered lexicographically. "Kube-like" versions start with a "v", then are followed by a number
	// (the major version), then optionally the string "alpha" or "beta" and another number (the minor
	// version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such
	// as beta or alpha), and then by comparing major version, then minor version. An example sorted list
	// of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.
	VersionPriority int32 `json:"versionPriority"`
}

// GetCaBundle returns the value of CaBundle.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec) GetCaBundle() []byte {
	return s.CaBundle
}

// GetGroup returns the value of Group.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec) GetGroup() OptString {
	return s.Group
}

// GetGroupPriorityMinimum returns the value of GroupPriorityMinimum.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec) GetGroupPriorityMinimum() int32 {
	return s.GroupPriorityMinimum
}

// GetInsecureSkipTLSVerify returns the value of InsecureSkipTLSVerify.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec) GetInsecureSkipTLSVerify() OptBool {
	return s.InsecureSkipTLSVerify
}

// GetService returns the value of Service.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec) GetService() OptIoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference {
	return s.Service
}

// GetVersion returns the value of Version.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec) GetVersion() OptString {
	return s.Version
}

// GetVersionPriority returns the value of VersionPriority.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec) GetVersionPriority() int32 {
	return s.VersionPriority
}

// SetCaBundle sets the value of CaBundle.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec) SetCaBundle(val []byte) {
	s.CaBundle = val
}

// SetGroup sets the value of Group.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec) SetGroup(val OptString) {
	s.Group = val
}

// SetGroupPriorityMinimum sets the value of GroupPriorityMinimum.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec) SetGroupPriorityMinimum(val int32) {
	s.GroupPriorityMinimum = val
}

// SetInsecureSkipTLSVerify sets the value of InsecureSkipTLSVerify.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec) SetInsecureSkipTLSVerify(val OptBool) {
	s.InsecureSkipTLSVerify = val
}

// SetService sets the value of Service.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec) SetService(val OptIoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference) {
	s.Service = val
}

// SetVersion sets the value of Version.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec) SetVersion(val OptString) {
	s.Version = val
}

// SetVersionPriority sets the value of VersionPriority.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec) SetVersionPriority(val int32) {
	s.VersionPriority = val
}

// APIServiceStatus contains derived information about an API server.
// Ref: #/components/schemas/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceStatus
type IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus struct {
	// Current service state of apiService.
	Conditions []IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceCondition `json:"conditions"`
}

// GetConditions returns the value of Conditions.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus) GetConditions() []IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceCondition {
	return s.Conditions
}

// SetConditions sets the value of Conditions.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus) SetConditions(val []IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceCondition) {
	s.Conditions = val
}

// ServiceReference holds a reference to Service.legacy.k8s.io.
// Ref: #/components/schemas/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.ServiceReference
type IoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference struct {
	// Name is the name of the service.
	Name OptString `json:"name"`
	// Namespace is the namespace of the service.
	Namespace OptString `json:"namespace"`
	// If specified, the port on the service that hosting webhook. Default to 443 for backward
	// compatibility. `port` should be a valid port number (1-65535, inclusive).
	Port OptInt32 `json:"port"`
}

// GetName returns the value of Name.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference) GetName() OptString {
	return s.Name
}

// GetNamespace returns the value of Namespace.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference) GetNamespace() OptString {
	return s.Namespace
}

// GetPort returns the value of Port.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference) GetPort() OptInt32 {
	return s.Port
}

// SetName sets the value of Name.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference) SetName(val OptString) {
	s.Name = val
}

// SetNamespace sets the value of Namespace.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference) SetNamespace(val OptString) {
	s.Namespace = val
}

// SetPort sets the value of Port.
func (s *IoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference) SetPort(val OptInt32) {
	s.Port = val
}

// ListAdmissionregistrationV1MutatingWebhookConfigurationUnauthorized is response for ListAdmissionregistrationV1MutatingWebhookConfiguration operation.
type ListAdmissionregistrationV1MutatingWebhookConfigurationUnauthorized struct{}

func (*ListAdmissionregistrationV1MutatingWebhookConfigurationUnauthorized) listAdmissionregistrationV1MutatingWebhookConfigurationRes() {
}

// ListAdmissionregistrationV1ValidatingWebhookConfigurationUnauthorized is response for ListAdmissionregistrationV1ValidatingWebhookConfiguration operation.
type ListAdmissionregistrationV1ValidatingWebhookConfigurationUnauthorized struct{}

func (*ListAdmissionregistrationV1ValidatingWebhookConfigurationUnauthorized) listAdmissionregistrationV1ValidatingWebhookConfigurationRes() {
}

// ListApiextensionsV1CustomResourceDefinitionUnauthorized is response for ListApiextensionsV1CustomResourceDefinition operation.
type ListApiextensionsV1CustomResourceDefinitionUnauthorized struct{}

func (*ListApiextensionsV1CustomResourceDefinitionUnauthorized) listApiextensionsV1CustomResourceDefinitionRes() {
}

// ListApiregistrationV1APIServiceUnauthorized is response for ListApiregistrationV1APIService operation.
type ListApiregistrationV1APIServiceUnauthorized struct{}

func (*ListApiregistrationV1APIServiceUnauthorized) listApiregistrationV1APIServiceRes() {}

// ListAppsV1ControllerRevisionForAllNamespacesUnauthorized is response for ListAppsV1ControllerRevisionForAllNamespaces operation.
type ListAppsV1ControllerRevisionForAllNamespacesUnauthorized struct{}

func (*ListAppsV1ControllerRevisionForAllNamespacesUnauthorized) listAppsV1ControllerRevisionForAllNamespacesRes() {
}

// ListAppsV1DaemonSetForAllNamespacesUnauthorized is response for ListAppsV1DaemonSetForAllNamespaces operation.
type ListAppsV1DaemonSetForAllNamespacesUnauthorized struct{}

func (*ListAppsV1DaemonSetForAllNamespacesUnauthorized) listAppsV1DaemonSetForAllNamespacesRes() {}

// ListAppsV1DeploymentForAllNamespacesUnauthorized is response for ListAppsV1DeploymentForAllNamespaces operation.
type ListAppsV1DeploymentForAllNamespacesUnauthorized struct{}

func (*ListAppsV1DeploymentForAllNamespacesUnauthorized) listAppsV1DeploymentForAllNamespacesRes() {}

// ListAppsV1NamespacedControllerRevisionUnauthorized is response for ListAppsV1NamespacedControllerRevision operation.
type ListAppsV1NamespacedControllerRevisionUnauthorized struct{}

func (*ListAppsV1NamespacedControllerRevisionUnauthorized) listAppsV1NamespacedControllerRevisionRes() {
}

// ListAppsV1NamespacedDaemonSetUnauthorized is response for ListAppsV1NamespacedDaemonSet operation.
type ListAppsV1NamespacedDaemonSetUnauthorized struct{}

func (*ListAppsV1NamespacedDaemonSetUnauthorized) listAppsV1NamespacedDaemonSetRes() {}

// ListAppsV1NamespacedDeploymentUnauthorized is response for ListAppsV1NamespacedDeployment operation.
type ListAppsV1NamespacedDeploymentUnauthorized struct{}

func (*ListAppsV1NamespacedDeploymentUnauthorized) listAppsV1NamespacedDeploymentRes() {}

// ListAppsV1NamespacedReplicaSetUnauthorized is response for ListAppsV1NamespacedReplicaSet operation.
type ListAppsV1NamespacedReplicaSetUnauthorized struct{}

func (*ListAppsV1NamespacedReplicaSetUnauthorized) listAppsV1NamespacedReplicaSetRes() {}

// ListAppsV1NamespacedStatefulSetUnauthorized is response for ListAppsV1NamespacedStatefulSet operation.
type ListAppsV1NamespacedStatefulSetUnauthorized struct{}

func (*ListAppsV1NamespacedStatefulSetUnauthorized) listAppsV1NamespacedStatefulSetRes() {}

// ListAppsV1ReplicaSetForAllNamespacesUnauthorized is response for ListAppsV1ReplicaSetForAllNamespaces operation.
type ListAppsV1ReplicaSetForAllNamespacesUnauthorized struct{}

func (*ListAppsV1ReplicaSetForAllNamespacesUnauthorized) listAppsV1ReplicaSetForAllNamespacesRes() {}

// ListAppsV1StatefulSetForAllNamespacesUnauthorized is response for ListAppsV1StatefulSetForAllNamespaces operation.
type ListAppsV1StatefulSetForAllNamespacesUnauthorized struct{}

func (*ListAppsV1StatefulSetForAllNamespacesUnauthorized) listAppsV1StatefulSetForAllNamespacesRes() {
}

// ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesUnauthorized is response for ListAutoscalingV1HorizontalPodAutoscalerForAllNamespaces operation.
type ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesUnauthorized struct{}

func (*ListAutoscalingV1HorizontalPodAutoscalerForAllNamespacesUnauthorized) listAutoscalingV1HorizontalPodAutoscalerForAllNamespacesRes() {
}

// ListAutoscalingV1NamespacedHorizontalPodAutoscalerUnauthorized is response for ListAutoscalingV1NamespacedHorizontalPodAutoscaler operation.
type ListAutoscalingV1NamespacedHorizontalPodAutoscalerUnauthorized struct{}

func (*ListAutoscalingV1NamespacedHorizontalPodAutoscalerUnauthorized) listAutoscalingV1NamespacedHorizontalPodAutoscalerRes() {
}

// ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesUnauthorized is response for ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespaces operation.
type ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesUnauthorized struct{}

func (*ListAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesUnauthorized) listAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespacesRes() {
}

// ListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerUnauthorized is response for ListAutoscalingV2beta1NamespacedHorizontalPodAutoscaler operation.
type ListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerUnauthorized struct{}

func (*ListAutoscalingV2beta1NamespacedHorizontalPodAutoscalerUnauthorized) listAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRes() {
}

// ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesUnauthorized is response for ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespaces operation.
type ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesUnauthorized struct{}

func (*ListAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesUnauthorized) listAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespacesRes() {
}

// ListAutoscalingV2beta2NamespacedHorizontalPodAutoscalerUnauthorized is response for ListAutoscalingV2beta2NamespacedHorizontalPodAutoscaler operation.
type ListAutoscalingV2beta2NamespacedHorizontalPodAutoscalerUnauthorized struct{}

func (*ListAutoscalingV2beta2NamespacedHorizontalPodAutoscalerUnauthorized) listAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRes() {
}

// ListBatchV1CronJobForAllNamespacesUnauthorized is response for ListBatchV1CronJobForAllNamespaces operation.
type ListBatchV1CronJobForAllNamespacesUnauthorized struct{}

func (*ListBatchV1CronJobForAllNamespacesUnauthorized) listBatchV1CronJobForAllNamespacesRes() {}

// ListBatchV1JobForAllNamespacesUnauthorized is response for ListBatchV1JobForAllNamespaces operation.
type ListBatchV1JobForAllNamespacesUnauthorized struct{}

func (*ListBatchV1JobForAllNamespacesUnauthorized) listBatchV1JobForAllNamespacesRes() {}

// ListBatchV1NamespacedCronJobUnauthorized is response for ListBatchV1NamespacedCronJob operation.
type ListBatchV1NamespacedCronJobUnauthorized struct{}

func (*ListBatchV1NamespacedCronJobUnauthorized) listBatchV1NamespacedCronJobRes() {}

// ListBatchV1NamespacedJobUnauthorized is response for ListBatchV1NamespacedJob operation.
type ListBatchV1NamespacedJobUnauthorized struct{}

func (*ListBatchV1NamespacedJobUnauthorized) listBatchV1NamespacedJobRes() {}

// ListBatchV1beta1CronJobForAllNamespacesUnauthorized is response for ListBatchV1beta1CronJobForAllNamespaces operation.
type ListBatchV1beta1CronJobForAllNamespacesUnauthorized struct{}

func (*ListBatchV1beta1CronJobForAllNamespacesUnauthorized) listBatchV1beta1CronJobForAllNamespacesRes() {
}

// ListBatchV1beta1NamespacedCronJobUnauthorized is response for ListBatchV1beta1NamespacedCronJob operation.
type ListBatchV1beta1NamespacedCronJobUnauthorized struct{}

func (*ListBatchV1beta1NamespacedCronJobUnauthorized) listBatchV1beta1NamespacedCronJobRes() {}

// ListCertificatesV1CertificateSigningRequestUnauthorized is response for ListCertificatesV1CertificateSigningRequest operation.
type ListCertificatesV1CertificateSigningRequestUnauthorized struct{}

func (*ListCertificatesV1CertificateSigningRequestUnauthorized) listCertificatesV1CertificateSigningRequestRes() {
}

// ListCoordinationV1LeaseForAllNamespacesUnauthorized is response for ListCoordinationV1LeaseForAllNamespaces operation.
type ListCoordinationV1LeaseForAllNamespacesUnauthorized struct{}

func (*ListCoordinationV1LeaseForAllNamespacesUnauthorized) listCoordinationV1LeaseForAllNamespacesRes() {
}

// ListCoordinationV1NamespacedLeaseUnauthorized is response for ListCoordinationV1NamespacedLease operation.
type ListCoordinationV1NamespacedLeaseUnauthorized struct{}

func (*ListCoordinationV1NamespacedLeaseUnauthorized) listCoordinationV1NamespacedLeaseRes() {}

// ListCoreV1ComponentStatusUnauthorized is response for ListCoreV1ComponentStatus operation.
type ListCoreV1ComponentStatusUnauthorized struct{}

func (*ListCoreV1ComponentStatusUnauthorized) listCoreV1ComponentStatusRes() {}

// ListCoreV1ConfigMapForAllNamespacesUnauthorized is response for ListCoreV1ConfigMapForAllNamespaces operation.
type ListCoreV1ConfigMapForAllNamespacesUnauthorized struct{}

func (*ListCoreV1ConfigMapForAllNamespacesUnauthorized) listCoreV1ConfigMapForAllNamespacesRes() {}

// ListCoreV1EndpointsForAllNamespacesUnauthorized is response for ListCoreV1EndpointsForAllNamespaces operation.
type ListCoreV1EndpointsForAllNamespacesUnauthorized struct{}

func (*ListCoreV1EndpointsForAllNamespacesUnauthorized) listCoreV1EndpointsForAllNamespacesRes() {}

// ListCoreV1EventForAllNamespacesUnauthorized is response for ListCoreV1EventForAllNamespaces operation.
type ListCoreV1EventForAllNamespacesUnauthorized struct{}

func (*ListCoreV1EventForAllNamespacesUnauthorized) listCoreV1EventForAllNamespacesRes() {}

// ListCoreV1LimitRangeForAllNamespacesUnauthorized is response for ListCoreV1LimitRangeForAllNamespaces operation.
type ListCoreV1LimitRangeForAllNamespacesUnauthorized struct{}

func (*ListCoreV1LimitRangeForAllNamespacesUnauthorized) listCoreV1LimitRangeForAllNamespacesRes() {}

// ListCoreV1NamespaceUnauthorized is response for ListCoreV1Namespace operation.
type ListCoreV1NamespaceUnauthorized struct{}

func (*ListCoreV1NamespaceUnauthorized) listCoreV1NamespaceRes() {}

// ListCoreV1NamespacedConfigMapUnauthorized is response for ListCoreV1NamespacedConfigMap operation.
type ListCoreV1NamespacedConfigMapUnauthorized struct{}

func (*ListCoreV1NamespacedConfigMapUnauthorized) listCoreV1NamespacedConfigMapRes() {}

// ListCoreV1NamespacedEndpointsUnauthorized is response for ListCoreV1NamespacedEndpoints operation.
type ListCoreV1NamespacedEndpointsUnauthorized struct{}

func (*ListCoreV1NamespacedEndpointsUnauthorized) listCoreV1NamespacedEndpointsRes() {}

// ListCoreV1NamespacedEventUnauthorized is response for ListCoreV1NamespacedEvent operation.
type ListCoreV1NamespacedEventUnauthorized struct{}

func (*ListCoreV1NamespacedEventUnauthorized) listCoreV1NamespacedEventRes() {}

// ListCoreV1NamespacedLimitRangeUnauthorized is response for ListCoreV1NamespacedLimitRange operation.
type ListCoreV1NamespacedLimitRangeUnauthorized struct{}

func (*ListCoreV1NamespacedLimitRangeUnauthorized) listCoreV1NamespacedLimitRangeRes() {}

// ListCoreV1NamespacedPersistentVolumeClaimUnauthorized is response for ListCoreV1NamespacedPersistentVolumeClaim operation.
type ListCoreV1NamespacedPersistentVolumeClaimUnauthorized struct{}

func (*ListCoreV1NamespacedPersistentVolumeClaimUnauthorized) listCoreV1NamespacedPersistentVolumeClaimRes() {
}

// ListCoreV1NamespacedPodTemplateUnauthorized is response for ListCoreV1NamespacedPodTemplate operation.
type ListCoreV1NamespacedPodTemplateUnauthorized struct{}

func (*ListCoreV1NamespacedPodTemplateUnauthorized) listCoreV1NamespacedPodTemplateRes() {}

// ListCoreV1NamespacedPodUnauthorized is response for ListCoreV1NamespacedPod operation.
type ListCoreV1NamespacedPodUnauthorized struct{}

func (*ListCoreV1NamespacedPodUnauthorized) listCoreV1NamespacedPodRes() {}

// ListCoreV1NamespacedReplicationControllerUnauthorized is response for ListCoreV1NamespacedReplicationController operation.
type ListCoreV1NamespacedReplicationControllerUnauthorized struct{}

func (*ListCoreV1NamespacedReplicationControllerUnauthorized) listCoreV1NamespacedReplicationControllerRes() {
}

// ListCoreV1NamespacedResourceQuotaUnauthorized is response for ListCoreV1NamespacedResourceQuota operation.
type ListCoreV1NamespacedResourceQuotaUnauthorized struct{}

func (*ListCoreV1NamespacedResourceQuotaUnauthorized) listCoreV1NamespacedResourceQuotaRes() {}

// ListCoreV1NamespacedSecretUnauthorized is response for ListCoreV1NamespacedSecret operation.
type ListCoreV1NamespacedSecretUnauthorized struct{}

func (*ListCoreV1NamespacedSecretUnauthorized) listCoreV1NamespacedSecretRes() {}

// ListCoreV1NamespacedServiceAccountUnauthorized is response for ListCoreV1NamespacedServiceAccount operation.
type ListCoreV1NamespacedServiceAccountUnauthorized struct{}

func (*ListCoreV1NamespacedServiceAccountUnauthorized) listCoreV1NamespacedServiceAccountRes() {}

// ListCoreV1NamespacedServiceUnauthorized is response for ListCoreV1NamespacedService operation.
type ListCoreV1NamespacedServiceUnauthorized struct{}

func (*ListCoreV1NamespacedServiceUnauthorized) listCoreV1NamespacedServiceRes() {}

// ListCoreV1NodeUnauthorized is response for ListCoreV1Node operation.
type ListCoreV1NodeUnauthorized struct{}

func (*ListCoreV1NodeUnauthorized) listCoreV1NodeRes() {}

// ListCoreV1PersistentVolumeClaimForAllNamespacesUnauthorized is response for ListCoreV1PersistentVolumeClaimForAllNamespaces operation.
type ListCoreV1PersistentVolumeClaimForAllNamespacesUnauthorized struct{}

func (*ListCoreV1PersistentVolumeClaimForAllNamespacesUnauthorized) listCoreV1PersistentVolumeClaimForAllNamespacesRes() {
}

// ListCoreV1PersistentVolumeUnauthorized is response for ListCoreV1PersistentVolume operation.
type ListCoreV1PersistentVolumeUnauthorized struct{}

func (*ListCoreV1PersistentVolumeUnauthorized) listCoreV1PersistentVolumeRes() {}

// ListCoreV1PodForAllNamespacesUnauthorized is response for ListCoreV1PodForAllNamespaces operation.
type ListCoreV1PodForAllNamespacesUnauthorized struct{}

func (*ListCoreV1PodForAllNamespacesUnauthorized) listCoreV1PodForAllNamespacesRes() {}

// ListCoreV1PodTemplateForAllNamespacesUnauthorized is response for ListCoreV1PodTemplateForAllNamespaces operation.
type ListCoreV1PodTemplateForAllNamespacesUnauthorized struct{}

func (*ListCoreV1PodTemplateForAllNamespacesUnauthorized) listCoreV1PodTemplateForAllNamespacesRes() {
}

// ListCoreV1ReplicationControllerForAllNamespacesUnauthorized is response for ListCoreV1ReplicationControllerForAllNamespaces operation.
type ListCoreV1ReplicationControllerForAllNamespacesUnauthorized struct{}

func (*ListCoreV1ReplicationControllerForAllNamespacesUnauthorized) listCoreV1ReplicationControllerForAllNamespacesRes() {
}

// ListCoreV1ResourceQuotaForAllNamespacesUnauthorized is response for ListCoreV1ResourceQuotaForAllNamespaces operation.
type ListCoreV1ResourceQuotaForAllNamespacesUnauthorized struct{}

func (*ListCoreV1ResourceQuotaForAllNamespacesUnauthorized) listCoreV1ResourceQuotaForAllNamespacesRes() {
}

// ListCoreV1SecretForAllNamespacesUnauthorized is response for ListCoreV1SecretForAllNamespaces operation.
type ListCoreV1SecretForAllNamespacesUnauthorized struct{}

func (*ListCoreV1SecretForAllNamespacesUnauthorized) listCoreV1SecretForAllNamespacesRes() {}

// ListCoreV1ServiceAccountForAllNamespacesUnauthorized is response for ListCoreV1ServiceAccountForAllNamespaces operation.
type ListCoreV1ServiceAccountForAllNamespacesUnauthorized struct{}

func (*ListCoreV1ServiceAccountForAllNamespacesUnauthorized) listCoreV1ServiceAccountForAllNamespacesRes() {
}

// ListCoreV1ServiceForAllNamespacesUnauthorized is response for ListCoreV1ServiceForAllNamespaces operation.
type ListCoreV1ServiceForAllNamespacesUnauthorized struct{}

func (*ListCoreV1ServiceForAllNamespacesUnauthorized) listCoreV1ServiceForAllNamespacesRes() {}

// ListDiscoveryV1EndpointSliceForAllNamespacesUnauthorized is response for ListDiscoveryV1EndpointSliceForAllNamespaces operation.
type ListDiscoveryV1EndpointSliceForAllNamespacesUnauthorized struct{}

func (*ListDiscoveryV1EndpointSliceForAllNamespacesUnauthorized) listDiscoveryV1EndpointSliceForAllNamespacesRes() {
}

// ListDiscoveryV1NamespacedEndpointSliceUnauthorized is response for ListDiscoveryV1NamespacedEndpointSlice operation.
type ListDiscoveryV1NamespacedEndpointSliceUnauthorized struct{}

func (*ListDiscoveryV1NamespacedEndpointSliceUnauthorized) listDiscoveryV1NamespacedEndpointSliceRes() {
}

// ListDiscoveryV1beta1EndpointSliceForAllNamespacesUnauthorized is response for ListDiscoveryV1beta1EndpointSliceForAllNamespaces operation.
type ListDiscoveryV1beta1EndpointSliceForAllNamespacesUnauthorized struct{}

func (*ListDiscoveryV1beta1EndpointSliceForAllNamespacesUnauthorized) listDiscoveryV1beta1EndpointSliceForAllNamespacesRes() {
}

// ListDiscoveryV1beta1NamespacedEndpointSliceUnauthorized is response for ListDiscoveryV1beta1NamespacedEndpointSlice operation.
type ListDiscoveryV1beta1NamespacedEndpointSliceUnauthorized struct{}

func (*ListDiscoveryV1beta1NamespacedEndpointSliceUnauthorized) listDiscoveryV1beta1NamespacedEndpointSliceRes() {
}

// ListEventsV1EventForAllNamespacesUnauthorized is response for ListEventsV1EventForAllNamespaces operation.
type ListEventsV1EventForAllNamespacesUnauthorized struct{}

func (*ListEventsV1EventForAllNamespacesUnauthorized) listEventsV1EventForAllNamespacesRes() {}

// ListEventsV1NamespacedEventUnauthorized is response for ListEventsV1NamespacedEvent operation.
type ListEventsV1NamespacedEventUnauthorized struct{}

func (*ListEventsV1NamespacedEventUnauthorized) listEventsV1NamespacedEventRes() {}

// ListEventsV1beta1EventForAllNamespacesUnauthorized is response for ListEventsV1beta1EventForAllNamespaces operation.
type ListEventsV1beta1EventForAllNamespacesUnauthorized struct{}

func (*ListEventsV1beta1EventForAllNamespacesUnauthorized) listEventsV1beta1EventForAllNamespacesRes() {
}

// ListEventsV1beta1NamespacedEventUnauthorized is response for ListEventsV1beta1NamespacedEvent operation.
type ListEventsV1beta1NamespacedEventUnauthorized struct{}

func (*ListEventsV1beta1NamespacedEventUnauthorized) listEventsV1beta1NamespacedEventRes() {}

// ListFlowcontrolApiserverV1beta1FlowSchemaUnauthorized is response for ListFlowcontrolApiserverV1beta1FlowSchema operation.
type ListFlowcontrolApiserverV1beta1FlowSchemaUnauthorized struct{}

func (*ListFlowcontrolApiserverV1beta1FlowSchemaUnauthorized) listFlowcontrolApiserverV1beta1FlowSchemaRes() {
}

// ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationUnauthorized is response for ListFlowcontrolApiserverV1beta1PriorityLevelConfiguration operation.
type ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationUnauthorized struct{}

func (*ListFlowcontrolApiserverV1beta1PriorityLevelConfigurationUnauthorized) listFlowcontrolApiserverV1beta1PriorityLevelConfigurationRes() {
}

// ListFlowcontrolApiserverV1beta2FlowSchemaUnauthorized is response for ListFlowcontrolApiserverV1beta2FlowSchema operation.
type ListFlowcontrolApiserverV1beta2FlowSchemaUnauthorized struct{}

func (*ListFlowcontrolApiserverV1beta2FlowSchemaUnauthorized) listFlowcontrolApiserverV1beta2FlowSchemaRes() {
}

// ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationUnauthorized is response for ListFlowcontrolApiserverV1beta2PriorityLevelConfiguration operation.
type ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationUnauthorized struct{}

func (*ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationUnauthorized) listFlowcontrolApiserverV1beta2PriorityLevelConfigurationRes() {
}

// ListInternalApiserverV1alpha1StorageVersionUnauthorized is response for ListInternalApiserverV1alpha1StorageVersion operation.
type ListInternalApiserverV1alpha1StorageVersionUnauthorized struct{}

func (*ListInternalApiserverV1alpha1StorageVersionUnauthorized) listInternalApiserverV1alpha1StorageVersionRes() {
}

// ListNetworkingV1IngressClassUnauthorized is response for ListNetworkingV1IngressClass operation.
type ListNetworkingV1IngressClassUnauthorized struct{}

func (*ListNetworkingV1IngressClassUnauthorized) listNetworkingV1IngressClassRes() {}

// ListNetworkingV1IngressForAllNamespacesUnauthorized is response for ListNetworkingV1IngressForAllNamespaces operation.
type ListNetworkingV1IngressForAllNamespacesUnauthorized struct{}

func (*ListNetworkingV1IngressForAllNamespacesUnauthorized) listNetworkingV1IngressForAllNamespacesRes() {
}

// ListNetworkingV1NamespacedIngressUnauthorized is response for ListNetworkingV1NamespacedIngress operation.
type ListNetworkingV1NamespacedIngressUnauthorized struct{}

func (*ListNetworkingV1NamespacedIngressUnauthorized) listNetworkingV1NamespacedIngressRes() {}

// ListNetworkingV1NamespacedNetworkPolicyUnauthorized is response for ListNetworkingV1NamespacedNetworkPolicy operation.
type ListNetworkingV1NamespacedNetworkPolicyUnauthorized struct{}

func (*ListNetworkingV1NamespacedNetworkPolicyUnauthorized) listNetworkingV1NamespacedNetworkPolicyRes() {
}

// ListNetworkingV1NetworkPolicyForAllNamespacesUnauthorized is response for ListNetworkingV1NetworkPolicyForAllNamespaces operation.
type ListNetworkingV1NetworkPolicyForAllNamespacesUnauthorized struct{}

func (*ListNetworkingV1NetworkPolicyForAllNamespacesUnauthorized) listNetworkingV1NetworkPolicyForAllNamespacesRes() {
}

// ListNodeV1RuntimeClassUnauthorized is response for ListNodeV1RuntimeClass operation.
type ListNodeV1RuntimeClassUnauthorized struct{}

func (*ListNodeV1RuntimeClassUnauthorized) listNodeV1RuntimeClassRes() {}

// ListNodeV1alpha1RuntimeClassUnauthorized is response for ListNodeV1alpha1RuntimeClass operation.
type ListNodeV1alpha1RuntimeClassUnauthorized struct{}

func (*ListNodeV1alpha1RuntimeClassUnauthorized) listNodeV1alpha1RuntimeClassRes() {}

// ListNodeV1beta1RuntimeClassUnauthorized is response for ListNodeV1beta1RuntimeClass operation.
type ListNodeV1beta1RuntimeClassUnauthorized struct{}

func (*ListNodeV1beta1RuntimeClassUnauthorized) listNodeV1beta1RuntimeClassRes() {}

// ListPolicyV1NamespacedPodDisruptionBudgetUnauthorized is response for ListPolicyV1NamespacedPodDisruptionBudget operation.
type ListPolicyV1NamespacedPodDisruptionBudgetUnauthorized struct{}

func (*ListPolicyV1NamespacedPodDisruptionBudgetUnauthorized) listPolicyV1NamespacedPodDisruptionBudgetRes() {
}

// ListPolicyV1PodDisruptionBudgetForAllNamespacesUnauthorized is response for ListPolicyV1PodDisruptionBudgetForAllNamespaces operation.
type ListPolicyV1PodDisruptionBudgetForAllNamespacesUnauthorized struct{}

func (*ListPolicyV1PodDisruptionBudgetForAllNamespacesUnauthorized) listPolicyV1PodDisruptionBudgetForAllNamespacesRes() {
}

// ListPolicyV1beta1NamespacedPodDisruptionBudgetUnauthorized is response for ListPolicyV1beta1NamespacedPodDisruptionBudget operation.
type ListPolicyV1beta1NamespacedPodDisruptionBudgetUnauthorized struct{}

func (*ListPolicyV1beta1NamespacedPodDisruptionBudgetUnauthorized) listPolicyV1beta1NamespacedPodDisruptionBudgetRes() {
}

// ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesUnauthorized is response for ListPolicyV1beta1PodDisruptionBudgetForAllNamespaces operation.
type ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesUnauthorized struct{}

func (*ListPolicyV1beta1PodDisruptionBudgetForAllNamespacesUnauthorized) listPolicyV1beta1PodDisruptionBudgetForAllNamespacesRes() {
}

// ListPolicyV1beta1PodSecurityPolicyUnauthorized is response for ListPolicyV1beta1PodSecurityPolicy operation.
type ListPolicyV1beta1PodSecurityPolicyUnauthorized struct{}

func (*ListPolicyV1beta1PodSecurityPolicyUnauthorized) listPolicyV1beta1PodSecurityPolicyRes() {}

// ListRbacAuthorizationV1ClusterRoleBindingUnauthorized is response for ListRbacAuthorizationV1ClusterRoleBinding operation.
type ListRbacAuthorizationV1ClusterRoleBindingUnauthorized struct{}

func (*ListRbacAuthorizationV1ClusterRoleBindingUnauthorized) listRbacAuthorizationV1ClusterRoleBindingRes() {
}

// ListRbacAuthorizationV1ClusterRoleUnauthorized is response for ListRbacAuthorizationV1ClusterRole operation.
type ListRbacAuthorizationV1ClusterRoleUnauthorized struct{}

func (*ListRbacAuthorizationV1ClusterRoleUnauthorized) listRbacAuthorizationV1ClusterRoleRes() {}

// ListRbacAuthorizationV1NamespacedRoleBindingUnauthorized is response for ListRbacAuthorizationV1NamespacedRoleBinding operation.
type ListRbacAuthorizationV1NamespacedRoleBindingUnauthorized struct{}

func (*ListRbacAuthorizationV1NamespacedRoleBindingUnauthorized) listRbacAuthorizationV1NamespacedRoleBindingRes() {
}

// ListRbacAuthorizationV1NamespacedRoleUnauthorized is response for ListRbacAuthorizationV1NamespacedRole operation.
type ListRbacAuthorizationV1NamespacedRoleUnauthorized struct{}

func (*ListRbacAuthorizationV1NamespacedRoleUnauthorized) listRbacAuthorizationV1NamespacedRoleRes() {
}

// ListRbacAuthorizationV1RoleBindingForAllNamespacesUnauthorized is response for ListRbacAuthorizationV1RoleBindingForAllNamespaces operation.
type ListRbacAuthorizationV1RoleBindingForAllNamespacesUnauthorized struct{}

func (*ListRbacAuthorizationV1RoleBindingForAllNamespacesUnauthorized) listRbacAuthorizationV1RoleBindingForAllNamespacesRes() {
}

// ListRbacAuthorizationV1RoleForAllNamespacesUnauthorized is response for ListRbacAuthorizationV1RoleForAllNamespaces operation.
type ListRbacAuthorizationV1RoleForAllNamespacesUnauthorized struct{}

func (*ListRbacAuthorizationV1RoleForAllNamespacesUnauthorized) listRbacAuthorizationV1RoleForAllNamespacesRes() {
}

// ListSchedulingV1PriorityClassUnauthorized is response for ListSchedulingV1PriorityClass operation.
type ListSchedulingV1PriorityClassUnauthorized struct{}

func (*ListSchedulingV1PriorityClassUnauthorized) listSchedulingV1PriorityClassRes() {}

// ListStorageV1CSIDriverUnauthorized is response for ListStorageV1CSIDriver operation.
type ListStorageV1CSIDriverUnauthorized struct{}

func (*ListStorageV1CSIDriverUnauthorized) listStorageV1CSIDriverRes() {}

// ListStorageV1CSINodeUnauthorized is response for ListStorageV1CSINode operation.
type ListStorageV1CSINodeUnauthorized struct{}

func (*ListStorageV1CSINodeUnauthorized) listStorageV1CSINodeRes() {}

// ListStorageV1StorageClassUnauthorized is response for ListStorageV1StorageClass operation.
type ListStorageV1StorageClassUnauthorized struct{}

func (*ListStorageV1StorageClassUnauthorized) listStorageV1StorageClassRes() {}

// ListStorageV1VolumeAttachmentUnauthorized is response for ListStorageV1VolumeAttachment operation.
type ListStorageV1VolumeAttachmentUnauthorized struct{}

func (*ListStorageV1VolumeAttachmentUnauthorized) listStorageV1VolumeAttachmentRes() {}

// ListStorageV1alpha1CSIStorageCapacityForAllNamespacesUnauthorized is response for ListStorageV1alpha1CSIStorageCapacityForAllNamespaces operation.
type ListStorageV1alpha1CSIStorageCapacityForAllNamespacesUnauthorized struct{}

func (*ListStorageV1alpha1CSIStorageCapacityForAllNamespacesUnauthorized) listStorageV1alpha1CSIStorageCapacityForAllNamespacesRes() {
}

// ListStorageV1alpha1NamespacedCSIStorageCapacityUnauthorized is response for ListStorageV1alpha1NamespacedCSIStorageCapacity operation.
type ListStorageV1alpha1NamespacedCSIStorageCapacityUnauthorized struct{}

func (*ListStorageV1alpha1NamespacedCSIStorageCapacityUnauthorized) listStorageV1alpha1NamespacedCSIStorageCapacityRes() {
}

// ListStorageV1beta1CSIStorageCapacityForAllNamespacesUnauthorized is response for ListStorageV1beta1CSIStorageCapacityForAllNamespaces operation.
type ListStorageV1beta1CSIStorageCapacityForAllNamespacesUnauthorized struct{}

func (*ListStorageV1beta1CSIStorageCapacityForAllNamespacesUnauthorized) listStorageV1beta1CSIStorageCapacityForAllNamespacesRes() {
}

// ListStorageV1beta1NamespacedCSIStorageCapacityUnauthorized is response for ListStorageV1beta1NamespacedCSIStorageCapacity operation.
type ListStorageV1beta1NamespacedCSIStorageCapacityUnauthorized struct{}

func (*ListStorageV1beta1NamespacedCSIStorageCapacityUnauthorized) listStorageV1beta1NamespacedCSIStorageCapacityRes() {
}

// LogFileHandlerUnauthorized is response for LogFileHandler operation.
type LogFileHandlerUnauthorized struct{}

// LogFileListHandlerUnauthorized is response for LogFileListHandler operation.
type LogFileListHandlerUnauthorized struct{}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt32 returns new OptInt32 with value set to v.
func NewOptInt32(v int32) OptInt32 {
	return OptInt32{
		Value: v,
		Set:   true,
	}
}

// OptInt32 is optional int32.
type OptInt32 struct {
	Value int32
	Set   bool
}

// IsSet returns true if OptInt32 was set.
func (o OptInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt32) SetTo(v int32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt32) Get() (v int32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIAdmissionregistrationV1ServiceReference returns new OptIoK8sAPIAdmissionregistrationV1ServiceReference with value set to v.
func NewOptIoK8sAPIAdmissionregistrationV1ServiceReference(v IoK8sAPIAdmissionregistrationV1ServiceReference) OptIoK8sAPIAdmissionregistrationV1ServiceReference {
	return OptIoK8sAPIAdmissionregistrationV1ServiceReference{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIAdmissionregistrationV1ServiceReference is optional IoK8sAPIAdmissionregistrationV1ServiceReference.
type OptIoK8sAPIAdmissionregistrationV1ServiceReference struct {
	Value IoK8sAPIAdmissionregistrationV1ServiceReference
	Set   bool
}

// IsSet returns true if OptIoK8sAPIAdmissionregistrationV1ServiceReference was set.
func (o OptIoK8sAPIAdmissionregistrationV1ServiceReference) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIAdmissionregistrationV1ServiceReference) Reset() {
	var v IoK8sAPIAdmissionregistrationV1ServiceReference
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIAdmissionregistrationV1ServiceReference) SetTo(v IoK8sAPIAdmissionregistrationV1ServiceReference) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIAdmissionregistrationV1ServiceReference) Get() (v IoK8sAPIAdmissionregistrationV1ServiceReference, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIAdmissionregistrationV1ServiceReference) Or(d IoK8sAPIAdmissionregistrationV1ServiceReference) IoK8sAPIAdmissionregistrationV1ServiceReference {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIAppsV1DaemonSetSpec returns new OptIoK8sAPIAppsV1DaemonSetSpec with value set to v.
func NewOptIoK8sAPIAppsV1DaemonSetSpec(v IoK8sAPIAppsV1DaemonSetSpec) OptIoK8sAPIAppsV1DaemonSetSpec {
	return OptIoK8sAPIAppsV1DaemonSetSpec{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIAppsV1DaemonSetSpec is optional IoK8sAPIAppsV1DaemonSetSpec.
type OptIoK8sAPIAppsV1DaemonSetSpec struct {
	Value IoK8sAPIAppsV1DaemonSetSpec
	Set   bool
}

// IsSet returns true if OptIoK8sAPIAppsV1DaemonSetSpec was set.
func (o OptIoK8sAPIAppsV1DaemonSetSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIAppsV1DaemonSetSpec) Reset() {
	var v IoK8sAPIAppsV1DaemonSetSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIAppsV1DaemonSetSpec) SetTo(v IoK8sAPIAppsV1DaemonSetSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIAppsV1DaemonSetSpec) Get() (v IoK8sAPIAppsV1DaemonSetSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIAppsV1DaemonSetSpec) Or(d IoK8sAPIAppsV1DaemonSetSpec) IoK8sAPIAppsV1DaemonSetSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIAppsV1DaemonSetStatus returns new OptIoK8sAPIAppsV1DaemonSetStatus with value set to v.
func NewOptIoK8sAPIAppsV1DaemonSetStatus(v IoK8sAPIAppsV1DaemonSetStatus) OptIoK8sAPIAppsV1DaemonSetStatus {
	return OptIoK8sAPIAppsV1DaemonSetStatus{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIAppsV1DaemonSetStatus is optional IoK8sAPIAppsV1DaemonSetStatus.
type OptIoK8sAPIAppsV1DaemonSetStatus struct {
	Value IoK8sAPIAppsV1DaemonSetStatus
	Set   bool
}

// IsSet returns true if OptIoK8sAPIAppsV1DaemonSetStatus was set.
func (o OptIoK8sAPIAppsV1DaemonSetStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIAppsV1DaemonSetStatus) Reset() {
	var v IoK8sAPIAppsV1DaemonSetStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIAppsV1DaemonSetStatus) SetTo(v IoK8sAPIAppsV1DaemonSetStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIAppsV1DaemonSetStatus) Get() (v IoK8sAPIAppsV1DaemonSetStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIAppsV1DaemonSetStatus) Or(d IoK8sAPIAppsV1DaemonSetStatus) IoK8sAPIAppsV1DaemonSetStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIAppsV1DaemonSetUpdateStrategy returns new OptIoK8sAPIAppsV1DaemonSetUpdateStrategy with value set to v.
func NewOptIoK8sAPIAppsV1DaemonSetUpdateStrategy(v IoK8sAPIAppsV1DaemonSetUpdateStrategy) OptIoK8sAPIAppsV1DaemonSetUpdateStrategy {
	return OptIoK8sAPIAppsV1DaemonSetUpdateStrategy{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIAppsV1DaemonSetUpdateStrategy is optional IoK8sAPIAppsV1DaemonSetUpdateStrategy.
type OptIoK8sAPIAppsV1DaemonSetUpdateStrategy struct {
	Value IoK8sAPIAppsV1DaemonSetUpdateStrategy
	Set   bool
}

// IsSet returns true if OptIoK8sAPIAppsV1DaemonSetUpdateStrategy was set.
func (o OptIoK8sAPIAppsV1DaemonSetUpdateStrategy) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIAppsV1DaemonSetUpdateStrategy) Reset() {
	var v IoK8sAPIAppsV1DaemonSetUpdateStrategy
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIAppsV1DaemonSetUpdateStrategy) SetTo(v IoK8sAPIAppsV1DaemonSetUpdateStrategy) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIAppsV1DaemonSetUpdateStrategy) Get() (v IoK8sAPIAppsV1DaemonSetUpdateStrategy, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIAppsV1DaemonSetUpdateStrategy) Or(d IoK8sAPIAppsV1DaemonSetUpdateStrategy) IoK8sAPIAppsV1DaemonSetUpdateStrategy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIAppsV1DeploymentSpec returns new OptIoK8sAPIAppsV1DeploymentSpec with value set to v.
func NewOptIoK8sAPIAppsV1DeploymentSpec(v IoK8sAPIAppsV1DeploymentSpec) OptIoK8sAPIAppsV1DeploymentSpec {
	return OptIoK8sAPIAppsV1DeploymentSpec{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIAppsV1DeploymentSpec is optional IoK8sAPIAppsV1DeploymentSpec.
type OptIoK8sAPIAppsV1DeploymentSpec struct {
	Value IoK8sAPIAppsV1DeploymentSpec
	Set   bool
}

// IsSet returns true if OptIoK8sAPIAppsV1DeploymentSpec was set.
func (o OptIoK8sAPIAppsV1DeploymentSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIAppsV1DeploymentSpec) Reset() {
	var v IoK8sAPIAppsV1DeploymentSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIAppsV1DeploymentSpec) SetTo(v IoK8sAPIAppsV1DeploymentSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIAppsV1DeploymentSpec) Get() (v IoK8sAPIAppsV1DeploymentSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIAppsV1DeploymentSpec) Or(d IoK8sAPIAppsV1DeploymentSpec) IoK8sAPIAppsV1DeploymentSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIAppsV1DeploymentStatus returns new OptIoK8sAPIAppsV1DeploymentStatus with value set to v.
func NewOptIoK8sAPIAppsV1DeploymentStatus(v IoK8sAPIAppsV1DeploymentStatus) OptIoK8sAPIAppsV1DeploymentStatus {
	return OptIoK8sAPIAppsV1DeploymentStatus{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIAppsV1DeploymentStatus is optional IoK8sAPIAppsV1DeploymentStatus.
type OptIoK8sAPIAppsV1DeploymentStatus struct {
	Value IoK8sAPIAppsV1DeploymentStatus
	Set   bool
}

// IsSet returns true if OptIoK8sAPIAppsV1DeploymentStatus was set.
func (o OptIoK8sAPIAppsV1DeploymentStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIAppsV1DeploymentStatus) Reset() {
	var v IoK8sAPIAppsV1DeploymentStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIAppsV1DeploymentStatus) SetTo(v IoK8sAPIAppsV1DeploymentStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIAppsV1DeploymentStatus) Get() (v IoK8sAPIAppsV1DeploymentStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIAppsV1DeploymentStatus) Or(d IoK8sAPIAppsV1DeploymentStatus) IoK8sAPIAppsV1DeploymentStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIAppsV1DeploymentStrategy returns new OptIoK8sAPIAppsV1DeploymentStrategy with value set to v.
func NewOptIoK8sAPIAppsV1DeploymentStrategy(v IoK8sAPIAppsV1DeploymentStrategy) OptIoK8sAPIAppsV1DeploymentStrategy {
	return OptIoK8sAPIAppsV1DeploymentStrategy{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIAppsV1DeploymentStrategy is optional IoK8sAPIAppsV1DeploymentStrategy.
type OptIoK8sAPIAppsV1DeploymentStrategy struct {
	Value IoK8sAPIAppsV1DeploymentStrategy
	Set   bool
}

// IsSet returns true if OptIoK8sAPIAppsV1DeploymentStrategy was set.
func (o OptIoK8sAPIAppsV1DeploymentStrategy) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIAppsV1DeploymentStrategy) Reset() {
	var v IoK8sAPIAppsV1DeploymentStrategy
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIAppsV1DeploymentStrategy) SetTo(v IoK8sAPIAppsV1DeploymentStrategy) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIAppsV1DeploymentStrategy) Get() (v IoK8sAPIAppsV1DeploymentStrategy, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIAppsV1DeploymentStrategy) Or(d IoK8sAPIAppsV1DeploymentStrategy) IoK8sAPIAppsV1DeploymentStrategy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIAppsV1ReplicaSetSpec returns new OptIoK8sAPIAppsV1ReplicaSetSpec with value set to v.
func NewOptIoK8sAPIAppsV1ReplicaSetSpec(v IoK8sAPIAppsV1ReplicaSetSpec) OptIoK8sAPIAppsV1ReplicaSetSpec {
	return OptIoK8sAPIAppsV1ReplicaSetSpec{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIAppsV1ReplicaSetSpec is optional IoK8sAPIAppsV1ReplicaSetSpec.
type OptIoK8sAPIAppsV1ReplicaSetSpec struct {
	Value IoK8sAPIAppsV1ReplicaSetSpec
	Set   bool
}

// IsSet returns true if OptIoK8sAPIAppsV1ReplicaSetSpec was set.
func (o OptIoK8sAPIAppsV1ReplicaSetSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIAppsV1ReplicaSetSpec) Reset() {
	var v IoK8sAPIAppsV1ReplicaSetSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIAppsV1ReplicaSetSpec) SetTo(v IoK8sAPIAppsV1ReplicaSetSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIAppsV1ReplicaSetSpec) Get() (v IoK8sAPIAppsV1ReplicaSetSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIAppsV1ReplicaSetSpec) Or(d IoK8sAPIAppsV1ReplicaSetSpec) IoK8sAPIAppsV1ReplicaSetSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIAppsV1ReplicaSetStatus returns new OptIoK8sAPIAppsV1ReplicaSetStatus with value set to v.
func NewOptIoK8sAPIAppsV1ReplicaSetStatus(v IoK8sAPIAppsV1ReplicaSetStatus) OptIoK8sAPIAppsV1ReplicaSetStatus {
	return OptIoK8sAPIAppsV1ReplicaSetStatus{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIAppsV1ReplicaSetStatus is optional IoK8sAPIAppsV1ReplicaSetStatus.
type OptIoK8sAPIAppsV1ReplicaSetStatus struct {
	Value IoK8sAPIAppsV1ReplicaSetStatus
	Set   bool
}

// IsSet returns true if OptIoK8sAPIAppsV1ReplicaSetStatus was set.
func (o OptIoK8sAPIAppsV1ReplicaSetStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIAppsV1ReplicaSetStatus) Reset() {
	var v IoK8sAPIAppsV1ReplicaSetStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIAppsV1ReplicaSetStatus) SetTo(v IoK8sAPIAppsV1ReplicaSetStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIAppsV1ReplicaSetStatus) Get() (v IoK8sAPIAppsV1ReplicaSetStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIAppsV1ReplicaSetStatus) Or(d IoK8sAPIAppsV1ReplicaSetStatus) IoK8sAPIAppsV1ReplicaSetStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIAppsV1RollingUpdateDaemonSet returns new OptIoK8sAPIAppsV1RollingUpdateDaemonSet with value set to v.
func NewOptIoK8sAPIAppsV1RollingUpdateDaemonSet(v IoK8sAPIAppsV1RollingUpdateDaemonSet) OptIoK8sAPIAppsV1RollingUpdateDaemonSet {
	return OptIoK8sAPIAppsV1RollingUpdateDaemonSet{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIAppsV1RollingUpdateDaemonSet is optional IoK8sAPIAppsV1RollingUpdateDaemonSet.
type OptIoK8sAPIAppsV1RollingUpdateDaemonSet struct {
	Value IoK8sAPIAppsV1RollingUpdateDaemonSet
	Set   bool
}

// IsSet returns true if OptIoK8sAPIAppsV1RollingUpdateDaemonSet was set.
func (o OptIoK8sAPIAppsV1RollingUpdateDaemonSet) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIAppsV1RollingUpdateDaemonSet) Reset() {
	var v IoK8sAPIAppsV1RollingUpdateDaemonSet
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIAppsV1RollingUpdateDaemonSet) SetTo(v IoK8sAPIAppsV1RollingUpdateDaemonSet) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIAppsV1RollingUpdateDaemonSet) Get() (v IoK8sAPIAppsV1RollingUpdateDaemonSet, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIAppsV1RollingUpdateDaemonSet) Or(d IoK8sAPIAppsV1RollingUpdateDaemonSet) IoK8sAPIAppsV1RollingUpdateDaemonSet {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIAppsV1RollingUpdateDeployment returns new OptIoK8sAPIAppsV1RollingUpdateDeployment with value set to v.
func NewOptIoK8sAPIAppsV1RollingUpdateDeployment(v IoK8sAPIAppsV1RollingUpdateDeployment) OptIoK8sAPIAppsV1RollingUpdateDeployment {
	return OptIoK8sAPIAppsV1RollingUpdateDeployment{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIAppsV1RollingUpdateDeployment is optional IoK8sAPIAppsV1RollingUpdateDeployment.
type OptIoK8sAPIAppsV1RollingUpdateDeployment struct {
	Value IoK8sAPIAppsV1RollingUpdateDeployment
	Set   bool
}

// IsSet returns true if OptIoK8sAPIAppsV1RollingUpdateDeployment was set.
func (o OptIoK8sAPIAppsV1RollingUpdateDeployment) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIAppsV1RollingUpdateDeployment) Reset() {
	var v IoK8sAPIAppsV1RollingUpdateDeployment
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIAppsV1RollingUpdateDeployment) SetTo(v IoK8sAPIAppsV1RollingUpdateDeployment) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIAppsV1RollingUpdateDeployment) Get() (v IoK8sAPIAppsV1RollingUpdateDeployment, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIAppsV1RollingUpdateDeployment) Or(d IoK8sAPIAppsV1RollingUpdateDeployment) IoK8sAPIAppsV1RollingUpdateDeployment {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIAppsV1RollingUpdateStatefulSetStrategy returns new OptIoK8sAPIAppsV1RollingUpdateStatefulSetStrategy with value set to v.
func NewOptIoK8sAPIAppsV1RollingUpdateStatefulSetStrategy(v IoK8sAPIAppsV1RollingUpdateStatefulSetStrategy) OptIoK8sAPIAppsV1RollingUpdateStatefulSetStrategy {
	return OptIoK8sAPIAppsV1RollingUpdateStatefulSetStrategy{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIAppsV1RollingUpdateStatefulSetStrategy is optional IoK8sAPIAppsV1RollingUpdateStatefulSetStrategy.
type OptIoK8sAPIAppsV1RollingUpdateStatefulSetStrategy struct {
	Value IoK8sAPIAppsV1RollingUpdateStatefulSetStrategy
	Set   bool
}

// IsSet returns true if OptIoK8sAPIAppsV1RollingUpdateStatefulSetStrategy was set.
func (o OptIoK8sAPIAppsV1RollingUpdateStatefulSetStrategy) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIAppsV1RollingUpdateStatefulSetStrategy) Reset() {
	var v IoK8sAPIAppsV1RollingUpdateStatefulSetStrategy
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIAppsV1RollingUpdateStatefulSetStrategy) SetTo(v IoK8sAPIAppsV1RollingUpdateStatefulSetStrategy) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIAppsV1RollingUpdateStatefulSetStrategy) Get() (v IoK8sAPIAppsV1RollingUpdateStatefulSetStrategy, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIAppsV1RollingUpdateStatefulSetStrategy) Or(d IoK8sAPIAppsV1RollingUpdateStatefulSetStrategy) IoK8sAPIAppsV1RollingUpdateStatefulSetStrategy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIAppsV1StatefulSetSpec returns new OptIoK8sAPIAppsV1StatefulSetSpec with value set to v.
func NewOptIoK8sAPIAppsV1StatefulSetSpec(v IoK8sAPIAppsV1StatefulSetSpec) OptIoK8sAPIAppsV1StatefulSetSpec {
	return OptIoK8sAPIAppsV1StatefulSetSpec{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIAppsV1StatefulSetSpec is optional IoK8sAPIAppsV1StatefulSetSpec.
type OptIoK8sAPIAppsV1StatefulSetSpec struct {
	Value IoK8sAPIAppsV1StatefulSetSpec
	Set   bool
}

// IsSet returns true if OptIoK8sAPIAppsV1StatefulSetSpec was set.
func (o OptIoK8sAPIAppsV1StatefulSetSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIAppsV1StatefulSetSpec) Reset() {
	var v IoK8sAPIAppsV1StatefulSetSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIAppsV1StatefulSetSpec) SetTo(v IoK8sAPIAppsV1StatefulSetSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIAppsV1StatefulSetSpec) Get() (v IoK8sAPIAppsV1StatefulSetSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIAppsV1StatefulSetSpec) Or(d IoK8sAPIAppsV1StatefulSetSpec) IoK8sAPIAppsV1StatefulSetSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIAppsV1StatefulSetStatus returns new OptIoK8sAPIAppsV1StatefulSetStatus with value set to v.
func NewOptIoK8sAPIAppsV1StatefulSetStatus(v IoK8sAPIAppsV1StatefulSetStatus) OptIoK8sAPIAppsV1StatefulSetStatus {
	return OptIoK8sAPIAppsV1StatefulSetStatus{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIAppsV1StatefulSetStatus is optional IoK8sAPIAppsV1StatefulSetStatus.
type OptIoK8sAPIAppsV1StatefulSetStatus struct {
	Value IoK8sAPIAppsV1StatefulSetStatus
	Set   bool
}

// IsSet returns true if OptIoK8sAPIAppsV1StatefulSetStatus was set.
func (o OptIoK8sAPIAppsV1StatefulSetStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIAppsV1StatefulSetStatus) Reset() {
	var v IoK8sAPIAppsV1StatefulSetStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIAppsV1StatefulSetStatus) SetTo(v IoK8sAPIAppsV1StatefulSetStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIAppsV1StatefulSetStatus) Get() (v IoK8sAPIAppsV1StatefulSetStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIAppsV1StatefulSetStatus) Or(d IoK8sAPIAppsV1StatefulSetStatus) IoK8sAPIAppsV1StatefulSetStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIAppsV1StatefulSetUpdateStrategy returns new OptIoK8sAPIAppsV1StatefulSetUpdateStrategy with value set to v.
func NewOptIoK8sAPIAppsV1StatefulSetUpdateStrategy(v IoK8sAPIAppsV1StatefulSetUpdateStrategy) OptIoK8sAPIAppsV1StatefulSetUpdateStrategy {
	return OptIoK8sAPIAppsV1StatefulSetUpdateStrategy{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIAppsV1StatefulSetUpdateStrategy is optional IoK8sAPIAppsV1StatefulSetUpdateStrategy.
type OptIoK8sAPIAppsV1StatefulSetUpdateStrategy struct {
	Value IoK8sAPIAppsV1StatefulSetUpdateStrategy
	Set   bool
}

// IsSet returns true if OptIoK8sAPIAppsV1StatefulSetUpdateStrategy was set.
func (o OptIoK8sAPIAppsV1StatefulSetUpdateStrategy) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIAppsV1StatefulSetUpdateStrategy) Reset() {
	var v IoK8sAPIAppsV1StatefulSetUpdateStrategy
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIAppsV1StatefulSetUpdateStrategy) SetTo(v IoK8sAPIAppsV1StatefulSetUpdateStrategy) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIAppsV1StatefulSetUpdateStrategy) Get() (v IoK8sAPIAppsV1StatefulSetUpdateStrategy, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIAppsV1StatefulSetUpdateStrategy) Or(d IoK8sAPIAppsV1StatefulSetUpdateStrategy) IoK8sAPIAppsV1StatefulSetUpdateStrategy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec returns new OptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec with value set to v.
func NewOptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec(v IoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec) OptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec {
	return OptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec is optional IoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec.
type OptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec struct {
	Value IoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec
	Set   bool
}

// IsSet returns true if OptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec was set.
func (o OptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec) Reset() {
	var v IoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec) SetTo(v IoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec) Get() (v IoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec) Or(d IoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec) IoK8sAPIAutoscalingV1HorizontalPodAutoscalerSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus returns new OptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus with value set to v.
func NewOptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus(v IoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus) OptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus {
	return OptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus is optional IoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus.
type OptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus struct {
	Value IoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus
	Set   bool
}

// IsSet returns true if OptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus was set.
func (o OptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus) Reset() {
	var v IoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus) SetTo(v IoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus) Get() (v IoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus) Or(d IoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus) IoK8sAPIAutoscalingV1HorizontalPodAutoscalerStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIAutoscalingV1ScaleSpec returns new OptIoK8sAPIAutoscalingV1ScaleSpec with value set to v.
func NewOptIoK8sAPIAutoscalingV1ScaleSpec(v IoK8sAPIAutoscalingV1ScaleSpec) OptIoK8sAPIAutoscalingV1ScaleSpec {
	return OptIoK8sAPIAutoscalingV1ScaleSpec{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIAutoscalingV1ScaleSpec is optional IoK8sAPIAutoscalingV1ScaleSpec.
type OptIoK8sAPIAutoscalingV1ScaleSpec struct {
	Value IoK8sAPIAutoscalingV1ScaleSpec
	Set   bool
}

// IsSet returns true if OptIoK8sAPIAutoscalingV1ScaleSpec was set.
func (o OptIoK8sAPIAutoscalingV1ScaleSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIAutoscalingV1ScaleSpec) Reset() {
	var v IoK8sAPIAutoscalingV1ScaleSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIAutoscalingV1ScaleSpec) SetTo(v IoK8sAPIAutoscalingV1ScaleSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIAutoscalingV1ScaleSpec) Get() (v IoK8sAPIAutoscalingV1ScaleSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIAutoscalingV1ScaleSpec) Or(d IoK8sAPIAutoscalingV1ScaleSpec) IoK8sAPIAutoscalingV1ScaleSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIAutoscalingV1ScaleStatus returns new OptIoK8sAPIAutoscalingV1ScaleStatus with value set to v.
func NewOptIoK8sAPIAutoscalingV1ScaleStatus(v IoK8sAPIAutoscalingV1ScaleStatus) OptIoK8sAPIAutoscalingV1ScaleStatus {
	return OptIoK8sAPIAutoscalingV1ScaleStatus{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIAutoscalingV1ScaleStatus is optional IoK8sAPIAutoscalingV1ScaleStatus.
type OptIoK8sAPIAutoscalingV1ScaleStatus struct {
	Value IoK8sAPIAutoscalingV1ScaleStatus
	Set   bool
}

// IsSet returns true if OptIoK8sAPIAutoscalingV1ScaleStatus was set.
func (o OptIoK8sAPIAutoscalingV1ScaleStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIAutoscalingV1ScaleStatus) Reset() {
	var v IoK8sAPIAutoscalingV1ScaleStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIAutoscalingV1ScaleStatus) SetTo(v IoK8sAPIAutoscalingV1ScaleStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIAutoscalingV1ScaleStatus) Get() (v IoK8sAPIAutoscalingV1ScaleStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIAutoscalingV1ScaleStatus) Or(d IoK8sAPIAutoscalingV1ScaleStatus) IoK8sAPIAutoscalingV1ScaleStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource returns new OptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource with value set to v.
func NewOptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource(v IoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource) OptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource {
	return OptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource is optional IoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource.
type OptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource struct {
	Value IoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource was set.
func (o OptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource) Reset() {
	var v IoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource) SetTo(v IoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource) Get() (v IoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource) Or(d IoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource) IoK8sAPIAutoscalingV2beta1ContainerResourceMetricSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus returns new OptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus with value set to v.
func NewOptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus(v IoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus) OptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus {
	return OptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus is optional IoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus.
type OptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus struct {
	Value IoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus
	Set   bool
}

// IsSet returns true if OptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus was set.
func (o OptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus) Reset() {
	var v IoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus) SetTo(v IoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus) Get() (v IoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus) Or(d IoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus) IoK8sAPIAutoscalingV2beta1ContainerResourceMetricStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIAutoscalingV2beta1ExternalMetricSource returns new OptIoK8sAPIAutoscalingV2beta1ExternalMetricSource with value set to v.
func NewOptIoK8sAPIAutoscalingV2beta1ExternalMetricSource(v IoK8sAPIAutoscalingV2beta1ExternalMetricSource) OptIoK8sAPIAutoscalingV2beta1ExternalMetricSource {
	return OptIoK8sAPIAutoscalingV2beta1ExternalMetricSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIAutoscalingV2beta1ExternalMetricSource is optional IoK8sAPIAutoscalingV2beta1ExternalMetricSource.
type OptIoK8sAPIAutoscalingV2beta1ExternalMetricSource struct {
	Value IoK8sAPIAutoscalingV2beta1ExternalMetricSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPIAutoscalingV2beta1ExternalMetricSource was set.
func (o OptIoK8sAPIAutoscalingV2beta1ExternalMetricSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIAutoscalingV2beta1ExternalMetricSource) Reset() {
	var v IoK8sAPIAutoscalingV2beta1ExternalMetricSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIAutoscalingV2beta1ExternalMetricSource) SetTo(v IoK8sAPIAutoscalingV2beta1ExternalMetricSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIAutoscalingV2beta1ExternalMetricSource) Get() (v IoK8sAPIAutoscalingV2beta1ExternalMetricSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIAutoscalingV2beta1ExternalMetricSource) Or(d IoK8sAPIAutoscalingV2beta1ExternalMetricSource) IoK8sAPIAutoscalingV2beta1ExternalMetricSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIAutoscalingV2beta1ExternalMetricStatus returns new OptIoK8sAPIAutoscalingV2beta1ExternalMetricStatus with value set to v.
func NewOptIoK8sAPIAutoscalingV2beta1ExternalMetricStatus(v IoK8sAPIAutoscalingV2beta1ExternalMetricStatus) OptIoK8sAPIAutoscalingV2beta1ExternalMetricStatus {
	return OptIoK8sAPIAutoscalingV2beta1ExternalMetricStatus{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIAutoscalingV2beta1ExternalMetricStatus is optional IoK8sAPIAutoscalingV2beta1ExternalMetricStatus.
type OptIoK8sAPIAutoscalingV2beta1ExternalMetricStatus struct {
	Value IoK8sAPIAutoscalingV2beta1ExternalMetricStatus
	Set   bool
}

// IsSet returns true if OptIoK8sAPIAutoscalingV2beta1ExternalMetricStatus was set.
func (o OptIoK8sAPIAutoscalingV2beta1ExternalMetricStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIAutoscalingV2beta1ExternalMetricStatus) Reset() {
	var v IoK8sAPIAutoscalingV2beta1ExternalMetricStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIAutoscalingV2beta1ExternalMetricStatus) SetTo(v IoK8sAPIAutoscalingV2beta1ExternalMetricStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIAutoscalingV2beta1ExternalMetricStatus) Get() (v IoK8sAPIAutoscalingV2beta1ExternalMetricStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIAutoscalingV2beta1ExternalMetricStatus) Or(d IoK8sAPIAutoscalingV2beta1ExternalMetricStatus) IoK8sAPIAutoscalingV2beta1ExternalMetricStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec returns new OptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec with value set to v.
func NewOptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec(v IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec) OptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec {
	return OptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec is optional IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec.
type OptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec struct {
	Value IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec
	Set   bool
}

// IsSet returns true if OptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec was set.
func (o OptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec) Reset() {
	var v IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec) SetTo(v IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec) Get() (v IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec) Or(d IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec) IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus returns new OptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus with value set to v.
func NewOptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus(v IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus) OptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus {
	return OptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus is optional IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus.
type OptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus struct {
	Value IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus
	Set   bool
}

// IsSet returns true if OptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus was set.
func (o OptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus) Reset() {
	var v IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus) SetTo(v IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus) Get() (v IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus) Or(d IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus) IoK8sAPIAutoscalingV2beta1HorizontalPodAutoscalerStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIAutoscalingV2beta1ObjectMetricSource returns new OptIoK8sAPIAutoscalingV2beta1ObjectMetricSource with value set to v.
func NewOptIoK8sAPIAutoscalingV2beta1ObjectMetricSource(v IoK8sAPIAutoscalingV2beta1ObjectMetricSource) OptIoK8sAPIAutoscalingV2beta1ObjectMetricSource {
	return OptIoK8sAPIAutoscalingV2beta1ObjectMetricSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIAutoscalingV2beta1ObjectMetricSource is optional IoK8sAPIAutoscalingV2beta1ObjectMetricSource.
type OptIoK8sAPIAutoscalingV2beta1ObjectMetricSource struct {
	Value IoK8sAPIAutoscalingV2beta1ObjectMetricSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPIAutoscalingV2beta1ObjectMetricSource was set.
func (o OptIoK8sAPIAutoscalingV2beta1ObjectMetricSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIAutoscalingV2beta1ObjectMetricSource) Reset() {
	var v IoK8sAPIAutoscalingV2beta1ObjectMetricSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIAutoscalingV2beta1ObjectMetricSource) SetTo(v IoK8sAPIAutoscalingV2beta1ObjectMetricSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIAutoscalingV2beta1ObjectMetricSource) Get() (v IoK8sAPIAutoscalingV2beta1ObjectMetricSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIAutoscalingV2beta1ObjectMetricSource) Or(d IoK8sAPIAutoscalingV2beta1ObjectMetricSource) IoK8sAPIAutoscalingV2beta1ObjectMetricSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIAutoscalingV2beta1ObjectMetricStatus returns new OptIoK8sAPIAutoscalingV2beta1ObjectMetricStatus with value set to v.
func NewOptIoK8sAPIAutoscalingV2beta1ObjectMetricStatus(v IoK8sAPIAutoscalingV2beta1ObjectMetricStatus) OptIoK8sAPIAutoscalingV2beta1ObjectMetricStatus {
	return OptIoK8sAPIAutoscalingV2beta1ObjectMetricStatus{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIAutoscalingV2beta1ObjectMetricStatus is optional IoK8sAPIAutoscalingV2beta1ObjectMetricStatus.
type OptIoK8sAPIAutoscalingV2beta1ObjectMetricStatus struct {
	Value IoK8sAPIAutoscalingV2beta1ObjectMetricStatus
	Set   bool
}

// IsSet returns true if OptIoK8sAPIAutoscalingV2beta1ObjectMetricStatus was set.
func (o OptIoK8sAPIAutoscalingV2beta1ObjectMetricStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIAutoscalingV2beta1ObjectMetricStatus) Reset() {
	var v IoK8sAPIAutoscalingV2beta1ObjectMetricStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIAutoscalingV2beta1ObjectMetricStatus) SetTo(v IoK8sAPIAutoscalingV2beta1ObjectMetricStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIAutoscalingV2beta1ObjectMetricStatus) Get() (v IoK8sAPIAutoscalingV2beta1ObjectMetricStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIAutoscalingV2beta1ObjectMetricStatus) Or(d IoK8sAPIAutoscalingV2beta1ObjectMetricStatus) IoK8sAPIAutoscalingV2beta1ObjectMetricStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIAutoscalingV2beta1PodsMetricSource returns new OptIoK8sAPIAutoscalingV2beta1PodsMetricSource with value set to v.
func NewOptIoK8sAPIAutoscalingV2beta1PodsMetricSource(v IoK8sAPIAutoscalingV2beta1PodsMetricSource) OptIoK8sAPIAutoscalingV2beta1PodsMetricSource {
	return OptIoK8sAPIAutoscalingV2beta1PodsMetricSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIAutoscalingV2beta1PodsMetricSource is optional IoK8sAPIAutoscalingV2beta1PodsMetricSource.
type OptIoK8sAPIAutoscalingV2beta1PodsMetricSource struct {
	Value IoK8sAPIAutoscalingV2beta1PodsMetricSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPIAutoscalingV2beta1PodsMetricSource was set.
func (o OptIoK8sAPIAutoscalingV2beta1PodsMetricSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIAutoscalingV2beta1PodsMetricSource) Reset() {
	var v IoK8sAPIAutoscalingV2beta1PodsMetricSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIAutoscalingV2beta1PodsMetricSource) SetTo(v IoK8sAPIAutoscalingV2beta1PodsMetricSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIAutoscalingV2beta1PodsMetricSource) Get() (v IoK8sAPIAutoscalingV2beta1PodsMetricSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIAutoscalingV2beta1PodsMetricSource) Or(d IoK8sAPIAutoscalingV2beta1PodsMetricSource) IoK8sAPIAutoscalingV2beta1PodsMetricSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIAutoscalingV2beta1PodsMetricStatus returns new OptIoK8sAPIAutoscalingV2beta1PodsMetricStatus with value set to v.
func NewOptIoK8sAPIAutoscalingV2beta1PodsMetricStatus(v IoK8sAPIAutoscalingV2beta1PodsMetricStatus) OptIoK8sAPIAutoscalingV2beta1PodsMetricStatus {
	return OptIoK8sAPIAutoscalingV2beta1PodsMetricStatus{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIAutoscalingV2beta1PodsMetricStatus is optional IoK8sAPIAutoscalingV2beta1PodsMetricStatus.
type OptIoK8sAPIAutoscalingV2beta1PodsMetricStatus struct {
	Value IoK8sAPIAutoscalingV2beta1PodsMetricStatus
	Set   bool
}

// IsSet returns true if OptIoK8sAPIAutoscalingV2beta1PodsMetricStatus was set.
func (o OptIoK8sAPIAutoscalingV2beta1PodsMetricStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIAutoscalingV2beta1PodsMetricStatus) Reset() {
	var v IoK8sAPIAutoscalingV2beta1PodsMetricStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIAutoscalingV2beta1PodsMetricStatus) SetTo(v IoK8sAPIAutoscalingV2beta1PodsMetricStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIAutoscalingV2beta1PodsMetricStatus) Get() (v IoK8sAPIAutoscalingV2beta1PodsMetricStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIAutoscalingV2beta1PodsMetricStatus) Or(d IoK8sAPIAutoscalingV2beta1PodsMetricStatus) IoK8sAPIAutoscalingV2beta1PodsMetricStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIAutoscalingV2beta1ResourceMetricSource returns new OptIoK8sAPIAutoscalingV2beta1ResourceMetricSource with value set to v.
func NewOptIoK8sAPIAutoscalingV2beta1ResourceMetricSource(v IoK8sAPIAutoscalingV2beta1ResourceMetricSource) OptIoK8sAPIAutoscalingV2beta1ResourceMetricSource {
	return OptIoK8sAPIAutoscalingV2beta1ResourceMetricSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIAutoscalingV2beta1ResourceMetricSource is optional IoK8sAPIAutoscalingV2beta1ResourceMetricSource.
type OptIoK8sAPIAutoscalingV2beta1ResourceMetricSource struct {
	Value IoK8sAPIAutoscalingV2beta1ResourceMetricSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPIAutoscalingV2beta1ResourceMetricSource was set.
func (o OptIoK8sAPIAutoscalingV2beta1ResourceMetricSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIAutoscalingV2beta1ResourceMetricSource) Reset() {
	var v IoK8sAPIAutoscalingV2beta1ResourceMetricSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIAutoscalingV2beta1ResourceMetricSource) SetTo(v IoK8sAPIAutoscalingV2beta1ResourceMetricSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIAutoscalingV2beta1ResourceMetricSource) Get() (v IoK8sAPIAutoscalingV2beta1ResourceMetricSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIAutoscalingV2beta1ResourceMetricSource) Or(d IoK8sAPIAutoscalingV2beta1ResourceMetricSource) IoK8sAPIAutoscalingV2beta1ResourceMetricSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIAutoscalingV2beta1ResourceMetricStatus returns new OptIoK8sAPIAutoscalingV2beta1ResourceMetricStatus with value set to v.
func NewOptIoK8sAPIAutoscalingV2beta1ResourceMetricStatus(v IoK8sAPIAutoscalingV2beta1ResourceMetricStatus) OptIoK8sAPIAutoscalingV2beta1ResourceMetricStatus {
	return OptIoK8sAPIAutoscalingV2beta1ResourceMetricStatus{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIAutoscalingV2beta1ResourceMetricStatus is optional IoK8sAPIAutoscalingV2beta1ResourceMetricStatus.
type OptIoK8sAPIAutoscalingV2beta1ResourceMetricStatus struct {
	Value IoK8sAPIAutoscalingV2beta1ResourceMetricStatus
	Set   bool
}

// IsSet returns true if OptIoK8sAPIAutoscalingV2beta1ResourceMetricStatus was set.
func (o OptIoK8sAPIAutoscalingV2beta1ResourceMetricStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIAutoscalingV2beta1ResourceMetricStatus) Reset() {
	var v IoK8sAPIAutoscalingV2beta1ResourceMetricStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIAutoscalingV2beta1ResourceMetricStatus) SetTo(v IoK8sAPIAutoscalingV2beta1ResourceMetricStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIAutoscalingV2beta1ResourceMetricStatus) Get() (v IoK8sAPIAutoscalingV2beta1ResourceMetricStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIAutoscalingV2beta1ResourceMetricStatus) Or(d IoK8sAPIAutoscalingV2beta1ResourceMetricStatus) IoK8sAPIAutoscalingV2beta1ResourceMetricStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource returns new OptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource with value set to v.
func NewOptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource(v IoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource) OptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource {
	return OptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource is optional IoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource.
type OptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource struct {
	Value IoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource was set.
func (o OptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource) Reset() {
	var v IoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource) SetTo(v IoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource) Get() (v IoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource) Or(d IoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource) IoK8sAPIAutoscalingV2beta2ContainerResourceMetricSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus returns new OptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus with value set to v.
func NewOptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus(v IoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus) OptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus {
	return OptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus is optional IoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus.
type OptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus struct {
	Value IoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus
	Set   bool
}

// IsSet returns true if OptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus was set.
func (o OptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus) Reset() {
	var v IoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus) SetTo(v IoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus) Get() (v IoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus) Or(d IoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus) IoK8sAPIAutoscalingV2beta2ContainerResourceMetricStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIAutoscalingV2beta2ExternalMetricSource returns new OptIoK8sAPIAutoscalingV2beta2ExternalMetricSource with value set to v.
func NewOptIoK8sAPIAutoscalingV2beta2ExternalMetricSource(v IoK8sAPIAutoscalingV2beta2ExternalMetricSource) OptIoK8sAPIAutoscalingV2beta2ExternalMetricSource {
	return OptIoK8sAPIAutoscalingV2beta2ExternalMetricSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIAutoscalingV2beta2ExternalMetricSource is optional IoK8sAPIAutoscalingV2beta2ExternalMetricSource.
type OptIoK8sAPIAutoscalingV2beta2ExternalMetricSource struct {
	Value IoK8sAPIAutoscalingV2beta2ExternalMetricSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPIAutoscalingV2beta2ExternalMetricSource was set.
func (o OptIoK8sAPIAutoscalingV2beta2ExternalMetricSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIAutoscalingV2beta2ExternalMetricSource) Reset() {
	var v IoK8sAPIAutoscalingV2beta2ExternalMetricSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIAutoscalingV2beta2ExternalMetricSource) SetTo(v IoK8sAPIAutoscalingV2beta2ExternalMetricSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIAutoscalingV2beta2ExternalMetricSource) Get() (v IoK8sAPIAutoscalingV2beta2ExternalMetricSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIAutoscalingV2beta2ExternalMetricSource) Or(d IoK8sAPIAutoscalingV2beta2ExternalMetricSource) IoK8sAPIAutoscalingV2beta2ExternalMetricSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIAutoscalingV2beta2ExternalMetricStatus returns new OptIoK8sAPIAutoscalingV2beta2ExternalMetricStatus with value set to v.
func NewOptIoK8sAPIAutoscalingV2beta2ExternalMetricStatus(v IoK8sAPIAutoscalingV2beta2ExternalMetricStatus) OptIoK8sAPIAutoscalingV2beta2ExternalMetricStatus {
	return OptIoK8sAPIAutoscalingV2beta2ExternalMetricStatus{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIAutoscalingV2beta2ExternalMetricStatus is optional IoK8sAPIAutoscalingV2beta2ExternalMetricStatus.
type OptIoK8sAPIAutoscalingV2beta2ExternalMetricStatus struct {
	Value IoK8sAPIAutoscalingV2beta2ExternalMetricStatus
	Set   bool
}

// IsSet returns true if OptIoK8sAPIAutoscalingV2beta2ExternalMetricStatus was set.
func (o OptIoK8sAPIAutoscalingV2beta2ExternalMetricStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIAutoscalingV2beta2ExternalMetricStatus) Reset() {
	var v IoK8sAPIAutoscalingV2beta2ExternalMetricStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIAutoscalingV2beta2ExternalMetricStatus) SetTo(v IoK8sAPIAutoscalingV2beta2ExternalMetricStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIAutoscalingV2beta2ExternalMetricStatus) Get() (v IoK8sAPIAutoscalingV2beta2ExternalMetricStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIAutoscalingV2beta2ExternalMetricStatus) Or(d IoK8sAPIAutoscalingV2beta2ExternalMetricStatus) IoK8sAPIAutoscalingV2beta2ExternalMetricStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIAutoscalingV2beta2HPAScalingRules returns new OptIoK8sAPIAutoscalingV2beta2HPAScalingRules with value set to v.
func NewOptIoK8sAPIAutoscalingV2beta2HPAScalingRules(v IoK8sAPIAutoscalingV2beta2HPAScalingRules) OptIoK8sAPIAutoscalingV2beta2HPAScalingRules {
	return OptIoK8sAPIAutoscalingV2beta2HPAScalingRules{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIAutoscalingV2beta2HPAScalingRules is optional IoK8sAPIAutoscalingV2beta2HPAScalingRules.
type OptIoK8sAPIAutoscalingV2beta2HPAScalingRules struct {
	Value IoK8sAPIAutoscalingV2beta2HPAScalingRules
	Set   bool
}

// IsSet returns true if OptIoK8sAPIAutoscalingV2beta2HPAScalingRules was set.
func (o OptIoK8sAPIAutoscalingV2beta2HPAScalingRules) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIAutoscalingV2beta2HPAScalingRules) Reset() {
	var v IoK8sAPIAutoscalingV2beta2HPAScalingRules
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIAutoscalingV2beta2HPAScalingRules) SetTo(v IoK8sAPIAutoscalingV2beta2HPAScalingRules) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIAutoscalingV2beta2HPAScalingRules) Get() (v IoK8sAPIAutoscalingV2beta2HPAScalingRules, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIAutoscalingV2beta2HPAScalingRules) Or(d IoK8sAPIAutoscalingV2beta2HPAScalingRules) IoK8sAPIAutoscalingV2beta2HPAScalingRules {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior returns new OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior with value set to v.
func NewOptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior(v IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior) OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior {
	return OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior is optional IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior.
type OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior struct {
	Value IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior
	Set   bool
}

// IsSet returns true if OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior was set.
func (o OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior) Reset() {
	var v IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior) SetTo(v IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior) Get() (v IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior) Or(d IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior) IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerBehavior {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec returns new OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec with value set to v.
func NewOptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec(v IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec) OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec {
	return OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec is optional IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec.
type OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec struct {
	Value IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec
	Set   bool
}

// IsSet returns true if OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec was set.
func (o OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec) Reset() {
	var v IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec) SetTo(v IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec) Get() (v IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec) Or(d IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec) IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus returns new OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus with value set to v.
func NewOptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus(v IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus) OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus {
	return OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus is optional IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus.
type OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus struct {
	Value IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus
	Set   bool
}

// IsSet returns true if OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus was set.
func (o OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus) Reset() {
	var v IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus) SetTo(v IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus) Get() (v IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus) Or(d IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus) IoK8sAPIAutoscalingV2beta2HorizontalPodAutoscalerStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIAutoscalingV2beta2ObjectMetricSource returns new OptIoK8sAPIAutoscalingV2beta2ObjectMetricSource with value set to v.
func NewOptIoK8sAPIAutoscalingV2beta2ObjectMetricSource(v IoK8sAPIAutoscalingV2beta2ObjectMetricSource) OptIoK8sAPIAutoscalingV2beta2ObjectMetricSource {
	return OptIoK8sAPIAutoscalingV2beta2ObjectMetricSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIAutoscalingV2beta2ObjectMetricSource is optional IoK8sAPIAutoscalingV2beta2ObjectMetricSource.
type OptIoK8sAPIAutoscalingV2beta2ObjectMetricSource struct {
	Value IoK8sAPIAutoscalingV2beta2ObjectMetricSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPIAutoscalingV2beta2ObjectMetricSource was set.
func (o OptIoK8sAPIAutoscalingV2beta2ObjectMetricSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIAutoscalingV2beta2ObjectMetricSource) Reset() {
	var v IoK8sAPIAutoscalingV2beta2ObjectMetricSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIAutoscalingV2beta2ObjectMetricSource) SetTo(v IoK8sAPIAutoscalingV2beta2ObjectMetricSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIAutoscalingV2beta2ObjectMetricSource) Get() (v IoK8sAPIAutoscalingV2beta2ObjectMetricSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIAutoscalingV2beta2ObjectMetricSource) Or(d IoK8sAPIAutoscalingV2beta2ObjectMetricSource) IoK8sAPIAutoscalingV2beta2ObjectMetricSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIAutoscalingV2beta2ObjectMetricStatus returns new OptIoK8sAPIAutoscalingV2beta2ObjectMetricStatus with value set to v.
func NewOptIoK8sAPIAutoscalingV2beta2ObjectMetricStatus(v IoK8sAPIAutoscalingV2beta2ObjectMetricStatus) OptIoK8sAPIAutoscalingV2beta2ObjectMetricStatus {
	return OptIoK8sAPIAutoscalingV2beta2ObjectMetricStatus{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIAutoscalingV2beta2ObjectMetricStatus is optional IoK8sAPIAutoscalingV2beta2ObjectMetricStatus.
type OptIoK8sAPIAutoscalingV2beta2ObjectMetricStatus struct {
	Value IoK8sAPIAutoscalingV2beta2ObjectMetricStatus
	Set   bool
}

// IsSet returns true if OptIoK8sAPIAutoscalingV2beta2ObjectMetricStatus was set.
func (o OptIoK8sAPIAutoscalingV2beta2ObjectMetricStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIAutoscalingV2beta2ObjectMetricStatus) Reset() {
	var v IoK8sAPIAutoscalingV2beta2ObjectMetricStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIAutoscalingV2beta2ObjectMetricStatus) SetTo(v IoK8sAPIAutoscalingV2beta2ObjectMetricStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIAutoscalingV2beta2ObjectMetricStatus) Get() (v IoK8sAPIAutoscalingV2beta2ObjectMetricStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIAutoscalingV2beta2ObjectMetricStatus) Or(d IoK8sAPIAutoscalingV2beta2ObjectMetricStatus) IoK8sAPIAutoscalingV2beta2ObjectMetricStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIAutoscalingV2beta2PodsMetricSource returns new OptIoK8sAPIAutoscalingV2beta2PodsMetricSource with value set to v.
func NewOptIoK8sAPIAutoscalingV2beta2PodsMetricSource(v IoK8sAPIAutoscalingV2beta2PodsMetricSource) OptIoK8sAPIAutoscalingV2beta2PodsMetricSource {
	return OptIoK8sAPIAutoscalingV2beta2PodsMetricSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIAutoscalingV2beta2PodsMetricSource is optional IoK8sAPIAutoscalingV2beta2PodsMetricSource.
type OptIoK8sAPIAutoscalingV2beta2PodsMetricSource struct {
	Value IoK8sAPIAutoscalingV2beta2PodsMetricSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPIAutoscalingV2beta2PodsMetricSource was set.
func (o OptIoK8sAPIAutoscalingV2beta2PodsMetricSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIAutoscalingV2beta2PodsMetricSource) Reset() {
	var v IoK8sAPIAutoscalingV2beta2PodsMetricSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIAutoscalingV2beta2PodsMetricSource) SetTo(v IoK8sAPIAutoscalingV2beta2PodsMetricSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIAutoscalingV2beta2PodsMetricSource) Get() (v IoK8sAPIAutoscalingV2beta2PodsMetricSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIAutoscalingV2beta2PodsMetricSource) Or(d IoK8sAPIAutoscalingV2beta2PodsMetricSource) IoK8sAPIAutoscalingV2beta2PodsMetricSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIAutoscalingV2beta2PodsMetricStatus returns new OptIoK8sAPIAutoscalingV2beta2PodsMetricStatus with value set to v.
func NewOptIoK8sAPIAutoscalingV2beta2PodsMetricStatus(v IoK8sAPIAutoscalingV2beta2PodsMetricStatus) OptIoK8sAPIAutoscalingV2beta2PodsMetricStatus {
	return OptIoK8sAPIAutoscalingV2beta2PodsMetricStatus{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIAutoscalingV2beta2PodsMetricStatus is optional IoK8sAPIAutoscalingV2beta2PodsMetricStatus.
type OptIoK8sAPIAutoscalingV2beta2PodsMetricStatus struct {
	Value IoK8sAPIAutoscalingV2beta2PodsMetricStatus
	Set   bool
}

// IsSet returns true if OptIoK8sAPIAutoscalingV2beta2PodsMetricStatus was set.
func (o OptIoK8sAPIAutoscalingV2beta2PodsMetricStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIAutoscalingV2beta2PodsMetricStatus) Reset() {
	var v IoK8sAPIAutoscalingV2beta2PodsMetricStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIAutoscalingV2beta2PodsMetricStatus) SetTo(v IoK8sAPIAutoscalingV2beta2PodsMetricStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIAutoscalingV2beta2PodsMetricStatus) Get() (v IoK8sAPIAutoscalingV2beta2PodsMetricStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIAutoscalingV2beta2PodsMetricStatus) Or(d IoK8sAPIAutoscalingV2beta2PodsMetricStatus) IoK8sAPIAutoscalingV2beta2PodsMetricStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIAutoscalingV2beta2ResourceMetricSource returns new OptIoK8sAPIAutoscalingV2beta2ResourceMetricSource with value set to v.
func NewOptIoK8sAPIAutoscalingV2beta2ResourceMetricSource(v IoK8sAPIAutoscalingV2beta2ResourceMetricSource) OptIoK8sAPIAutoscalingV2beta2ResourceMetricSource {
	return OptIoK8sAPIAutoscalingV2beta2ResourceMetricSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIAutoscalingV2beta2ResourceMetricSource is optional IoK8sAPIAutoscalingV2beta2ResourceMetricSource.
type OptIoK8sAPIAutoscalingV2beta2ResourceMetricSource struct {
	Value IoK8sAPIAutoscalingV2beta2ResourceMetricSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPIAutoscalingV2beta2ResourceMetricSource was set.
func (o OptIoK8sAPIAutoscalingV2beta2ResourceMetricSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIAutoscalingV2beta2ResourceMetricSource) Reset() {
	var v IoK8sAPIAutoscalingV2beta2ResourceMetricSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIAutoscalingV2beta2ResourceMetricSource) SetTo(v IoK8sAPIAutoscalingV2beta2ResourceMetricSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIAutoscalingV2beta2ResourceMetricSource) Get() (v IoK8sAPIAutoscalingV2beta2ResourceMetricSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIAutoscalingV2beta2ResourceMetricSource) Or(d IoK8sAPIAutoscalingV2beta2ResourceMetricSource) IoK8sAPIAutoscalingV2beta2ResourceMetricSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIAutoscalingV2beta2ResourceMetricStatus returns new OptIoK8sAPIAutoscalingV2beta2ResourceMetricStatus with value set to v.
func NewOptIoK8sAPIAutoscalingV2beta2ResourceMetricStatus(v IoK8sAPIAutoscalingV2beta2ResourceMetricStatus) OptIoK8sAPIAutoscalingV2beta2ResourceMetricStatus {
	return OptIoK8sAPIAutoscalingV2beta2ResourceMetricStatus{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIAutoscalingV2beta2ResourceMetricStatus is optional IoK8sAPIAutoscalingV2beta2ResourceMetricStatus.
type OptIoK8sAPIAutoscalingV2beta2ResourceMetricStatus struct {
	Value IoK8sAPIAutoscalingV2beta2ResourceMetricStatus
	Set   bool
}

// IsSet returns true if OptIoK8sAPIAutoscalingV2beta2ResourceMetricStatus was set.
func (o OptIoK8sAPIAutoscalingV2beta2ResourceMetricStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIAutoscalingV2beta2ResourceMetricStatus) Reset() {
	var v IoK8sAPIAutoscalingV2beta2ResourceMetricStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIAutoscalingV2beta2ResourceMetricStatus) SetTo(v IoK8sAPIAutoscalingV2beta2ResourceMetricStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIAutoscalingV2beta2ResourceMetricStatus) Get() (v IoK8sAPIAutoscalingV2beta2ResourceMetricStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIAutoscalingV2beta2ResourceMetricStatus) Or(d IoK8sAPIAutoscalingV2beta2ResourceMetricStatus) IoK8sAPIAutoscalingV2beta2ResourceMetricStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIBatchV1CronJobSpec returns new OptIoK8sAPIBatchV1CronJobSpec with value set to v.
func NewOptIoK8sAPIBatchV1CronJobSpec(v IoK8sAPIBatchV1CronJobSpec) OptIoK8sAPIBatchV1CronJobSpec {
	return OptIoK8sAPIBatchV1CronJobSpec{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIBatchV1CronJobSpec is optional IoK8sAPIBatchV1CronJobSpec.
type OptIoK8sAPIBatchV1CronJobSpec struct {
	Value IoK8sAPIBatchV1CronJobSpec
	Set   bool
}

// IsSet returns true if OptIoK8sAPIBatchV1CronJobSpec was set.
func (o OptIoK8sAPIBatchV1CronJobSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIBatchV1CronJobSpec) Reset() {
	var v IoK8sAPIBatchV1CronJobSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIBatchV1CronJobSpec) SetTo(v IoK8sAPIBatchV1CronJobSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIBatchV1CronJobSpec) Get() (v IoK8sAPIBatchV1CronJobSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIBatchV1CronJobSpec) Or(d IoK8sAPIBatchV1CronJobSpec) IoK8sAPIBatchV1CronJobSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIBatchV1CronJobStatus returns new OptIoK8sAPIBatchV1CronJobStatus with value set to v.
func NewOptIoK8sAPIBatchV1CronJobStatus(v IoK8sAPIBatchV1CronJobStatus) OptIoK8sAPIBatchV1CronJobStatus {
	return OptIoK8sAPIBatchV1CronJobStatus{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIBatchV1CronJobStatus is optional IoK8sAPIBatchV1CronJobStatus.
type OptIoK8sAPIBatchV1CronJobStatus struct {
	Value IoK8sAPIBatchV1CronJobStatus
	Set   bool
}

// IsSet returns true if OptIoK8sAPIBatchV1CronJobStatus was set.
func (o OptIoK8sAPIBatchV1CronJobStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIBatchV1CronJobStatus) Reset() {
	var v IoK8sAPIBatchV1CronJobStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIBatchV1CronJobStatus) SetTo(v IoK8sAPIBatchV1CronJobStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIBatchV1CronJobStatus) Get() (v IoK8sAPIBatchV1CronJobStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIBatchV1CronJobStatus) Or(d IoK8sAPIBatchV1CronJobStatus) IoK8sAPIBatchV1CronJobStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIBatchV1JobSpec returns new OptIoK8sAPIBatchV1JobSpec with value set to v.
func NewOptIoK8sAPIBatchV1JobSpec(v IoK8sAPIBatchV1JobSpec) OptIoK8sAPIBatchV1JobSpec {
	return OptIoK8sAPIBatchV1JobSpec{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIBatchV1JobSpec is optional IoK8sAPIBatchV1JobSpec.
type OptIoK8sAPIBatchV1JobSpec struct {
	Value IoK8sAPIBatchV1JobSpec
	Set   bool
}

// IsSet returns true if OptIoK8sAPIBatchV1JobSpec was set.
func (o OptIoK8sAPIBatchV1JobSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIBatchV1JobSpec) Reset() {
	var v IoK8sAPIBatchV1JobSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIBatchV1JobSpec) SetTo(v IoK8sAPIBatchV1JobSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIBatchV1JobSpec) Get() (v IoK8sAPIBatchV1JobSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIBatchV1JobSpec) Or(d IoK8sAPIBatchV1JobSpec) IoK8sAPIBatchV1JobSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIBatchV1JobStatus returns new OptIoK8sAPIBatchV1JobStatus with value set to v.
func NewOptIoK8sAPIBatchV1JobStatus(v IoK8sAPIBatchV1JobStatus) OptIoK8sAPIBatchV1JobStatus {
	return OptIoK8sAPIBatchV1JobStatus{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIBatchV1JobStatus is optional IoK8sAPIBatchV1JobStatus.
type OptIoK8sAPIBatchV1JobStatus struct {
	Value IoK8sAPIBatchV1JobStatus
	Set   bool
}

// IsSet returns true if OptIoK8sAPIBatchV1JobStatus was set.
func (o OptIoK8sAPIBatchV1JobStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIBatchV1JobStatus) Reset() {
	var v IoK8sAPIBatchV1JobStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIBatchV1JobStatus) SetTo(v IoK8sAPIBatchV1JobStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIBatchV1JobStatus) Get() (v IoK8sAPIBatchV1JobStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIBatchV1JobStatus) Or(d IoK8sAPIBatchV1JobStatus) IoK8sAPIBatchV1JobStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIBatchV1UncountedTerminatedPods returns new OptIoK8sAPIBatchV1UncountedTerminatedPods with value set to v.
func NewOptIoK8sAPIBatchV1UncountedTerminatedPods(v IoK8sAPIBatchV1UncountedTerminatedPods) OptIoK8sAPIBatchV1UncountedTerminatedPods {
	return OptIoK8sAPIBatchV1UncountedTerminatedPods{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIBatchV1UncountedTerminatedPods is optional IoK8sAPIBatchV1UncountedTerminatedPods.
type OptIoK8sAPIBatchV1UncountedTerminatedPods struct {
	Value IoK8sAPIBatchV1UncountedTerminatedPods
	Set   bool
}

// IsSet returns true if OptIoK8sAPIBatchV1UncountedTerminatedPods was set.
func (o OptIoK8sAPIBatchV1UncountedTerminatedPods) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIBatchV1UncountedTerminatedPods) Reset() {
	var v IoK8sAPIBatchV1UncountedTerminatedPods
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIBatchV1UncountedTerminatedPods) SetTo(v IoK8sAPIBatchV1UncountedTerminatedPods) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIBatchV1UncountedTerminatedPods) Get() (v IoK8sAPIBatchV1UncountedTerminatedPods, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIBatchV1UncountedTerminatedPods) Or(d IoK8sAPIBatchV1UncountedTerminatedPods) IoK8sAPIBatchV1UncountedTerminatedPods {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIBatchV1beta1CronJobSpec returns new OptIoK8sAPIBatchV1beta1CronJobSpec with value set to v.
func NewOptIoK8sAPIBatchV1beta1CronJobSpec(v IoK8sAPIBatchV1beta1CronJobSpec) OptIoK8sAPIBatchV1beta1CronJobSpec {
	return OptIoK8sAPIBatchV1beta1CronJobSpec{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIBatchV1beta1CronJobSpec is optional IoK8sAPIBatchV1beta1CronJobSpec.
type OptIoK8sAPIBatchV1beta1CronJobSpec struct {
	Value IoK8sAPIBatchV1beta1CronJobSpec
	Set   bool
}

// IsSet returns true if OptIoK8sAPIBatchV1beta1CronJobSpec was set.
func (o OptIoK8sAPIBatchV1beta1CronJobSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIBatchV1beta1CronJobSpec) Reset() {
	var v IoK8sAPIBatchV1beta1CronJobSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIBatchV1beta1CronJobSpec) SetTo(v IoK8sAPIBatchV1beta1CronJobSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIBatchV1beta1CronJobSpec) Get() (v IoK8sAPIBatchV1beta1CronJobSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIBatchV1beta1CronJobSpec) Or(d IoK8sAPIBatchV1beta1CronJobSpec) IoK8sAPIBatchV1beta1CronJobSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIBatchV1beta1CronJobStatus returns new OptIoK8sAPIBatchV1beta1CronJobStatus with value set to v.
func NewOptIoK8sAPIBatchV1beta1CronJobStatus(v IoK8sAPIBatchV1beta1CronJobStatus) OptIoK8sAPIBatchV1beta1CronJobStatus {
	return OptIoK8sAPIBatchV1beta1CronJobStatus{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIBatchV1beta1CronJobStatus is optional IoK8sAPIBatchV1beta1CronJobStatus.
type OptIoK8sAPIBatchV1beta1CronJobStatus struct {
	Value IoK8sAPIBatchV1beta1CronJobStatus
	Set   bool
}

// IsSet returns true if OptIoK8sAPIBatchV1beta1CronJobStatus was set.
func (o OptIoK8sAPIBatchV1beta1CronJobStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIBatchV1beta1CronJobStatus) Reset() {
	var v IoK8sAPIBatchV1beta1CronJobStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIBatchV1beta1CronJobStatus) SetTo(v IoK8sAPIBatchV1beta1CronJobStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIBatchV1beta1CronJobStatus) Get() (v IoK8sAPIBatchV1beta1CronJobStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIBatchV1beta1CronJobStatus) Or(d IoK8sAPIBatchV1beta1CronJobStatus) IoK8sAPIBatchV1beta1CronJobStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICertificatesV1CertificateSigningRequestSpecExtra returns new OptIoK8sAPICertificatesV1CertificateSigningRequestSpecExtra with value set to v.
func NewOptIoK8sAPICertificatesV1CertificateSigningRequestSpecExtra(v IoK8sAPICertificatesV1CertificateSigningRequestSpecExtra) OptIoK8sAPICertificatesV1CertificateSigningRequestSpecExtra {
	return OptIoK8sAPICertificatesV1CertificateSigningRequestSpecExtra{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICertificatesV1CertificateSigningRequestSpecExtra is optional IoK8sAPICertificatesV1CertificateSigningRequestSpecExtra.
type OptIoK8sAPICertificatesV1CertificateSigningRequestSpecExtra struct {
	Value IoK8sAPICertificatesV1CertificateSigningRequestSpecExtra
	Set   bool
}

// IsSet returns true if OptIoK8sAPICertificatesV1CertificateSigningRequestSpecExtra was set.
func (o OptIoK8sAPICertificatesV1CertificateSigningRequestSpecExtra) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICertificatesV1CertificateSigningRequestSpecExtra) Reset() {
	var v IoK8sAPICertificatesV1CertificateSigningRequestSpecExtra
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICertificatesV1CertificateSigningRequestSpecExtra) SetTo(v IoK8sAPICertificatesV1CertificateSigningRequestSpecExtra) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICertificatesV1CertificateSigningRequestSpecExtra) Get() (v IoK8sAPICertificatesV1CertificateSigningRequestSpecExtra, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICertificatesV1CertificateSigningRequestSpecExtra) Or(d IoK8sAPICertificatesV1CertificateSigningRequestSpecExtra) IoK8sAPICertificatesV1CertificateSigningRequestSpecExtra {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICertificatesV1CertificateSigningRequestStatus returns new OptIoK8sAPICertificatesV1CertificateSigningRequestStatus with value set to v.
func NewOptIoK8sAPICertificatesV1CertificateSigningRequestStatus(v IoK8sAPICertificatesV1CertificateSigningRequestStatus) OptIoK8sAPICertificatesV1CertificateSigningRequestStatus {
	return OptIoK8sAPICertificatesV1CertificateSigningRequestStatus{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICertificatesV1CertificateSigningRequestStatus is optional IoK8sAPICertificatesV1CertificateSigningRequestStatus.
type OptIoK8sAPICertificatesV1CertificateSigningRequestStatus struct {
	Value IoK8sAPICertificatesV1CertificateSigningRequestStatus
	Set   bool
}

// IsSet returns true if OptIoK8sAPICertificatesV1CertificateSigningRequestStatus was set.
func (o OptIoK8sAPICertificatesV1CertificateSigningRequestStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICertificatesV1CertificateSigningRequestStatus) Reset() {
	var v IoK8sAPICertificatesV1CertificateSigningRequestStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICertificatesV1CertificateSigningRequestStatus) SetTo(v IoK8sAPICertificatesV1CertificateSigningRequestStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICertificatesV1CertificateSigningRequestStatus) Get() (v IoK8sAPICertificatesV1CertificateSigningRequestStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICertificatesV1CertificateSigningRequestStatus) Or(d IoK8sAPICertificatesV1CertificateSigningRequestStatus) IoK8sAPICertificatesV1CertificateSigningRequestStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoordinationV1LeaseSpec returns new OptIoK8sAPICoordinationV1LeaseSpec with value set to v.
func NewOptIoK8sAPICoordinationV1LeaseSpec(v IoK8sAPICoordinationV1LeaseSpec) OptIoK8sAPICoordinationV1LeaseSpec {
	return OptIoK8sAPICoordinationV1LeaseSpec{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoordinationV1LeaseSpec is optional IoK8sAPICoordinationV1LeaseSpec.
type OptIoK8sAPICoordinationV1LeaseSpec struct {
	Value IoK8sAPICoordinationV1LeaseSpec
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoordinationV1LeaseSpec was set.
func (o OptIoK8sAPICoordinationV1LeaseSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoordinationV1LeaseSpec) Reset() {
	var v IoK8sAPICoordinationV1LeaseSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoordinationV1LeaseSpec) SetTo(v IoK8sAPICoordinationV1LeaseSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoordinationV1LeaseSpec) Get() (v IoK8sAPICoordinationV1LeaseSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoordinationV1LeaseSpec) Or(d IoK8sAPICoordinationV1LeaseSpec) IoK8sAPICoordinationV1LeaseSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1AWSElasticBlockStoreVolumeSource returns new OptIoK8sAPICoreV1AWSElasticBlockStoreVolumeSource with value set to v.
func NewOptIoK8sAPICoreV1AWSElasticBlockStoreVolumeSource(v IoK8sAPICoreV1AWSElasticBlockStoreVolumeSource) OptIoK8sAPICoreV1AWSElasticBlockStoreVolumeSource {
	return OptIoK8sAPICoreV1AWSElasticBlockStoreVolumeSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1AWSElasticBlockStoreVolumeSource is optional IoK8sAPICoreV1AWSElasticBlockStoreVolumeSource.
type OptIoK8sAPICoreV1AWSElasticBlockStoreVolumeSource struct {
	Value IoK8sAPICoreV1AWSElasticBlockStoreVolumeSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1AWSElasticBlockStoreVolumeSource was set.
func (o OptIoK8sAPICoreV1AWSElasticBlockStoreVolumeSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1AWSElasticBlockStoreVolumeSource) Reset() {
	var v IoK8sAPICoreV1AWSElasticBlockStoreVolumeSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1AWSElasticBlockStoreVolumeSource) SetTo(v IoK8sAPICoreV1AWSElasticBlockStoreVolumeSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1AWSElasticBlockStoreVolumeSource) Get() (v IoK8sAPICoreV1AWSElasticBlockStoreVolumeSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1AWSElasticBlockStoreVolumeSource) Or(d IoK8sAPICoreV1AWSElasticBlockStoreVolumeSource) IoK8sAPICoreV1AWSElasticBlockStoreVolumeSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1Affinity returns new OptIoK8sAPICoreV1Affinity with value set to v.
func NewOptIoK8sAPICoreV1Affinity(v IoK8sAPICoreV1Affinity) OptIoK8sAPICoreV1Affinity {
	return OptIoK8sAPICoreV1Affinity{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1Affinity is optional IoK8sAPICoreV1Affinity.
type OptIoK8sAPICoreV1Affinity struct {
	Value IoK8sAPICoreV1Affinity
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1Affinity was set.
func (o OptIoK8sAPICoreV1Affinity) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1Affinity) Reset() {
	var v IoK8sAPICoreV1Affinity
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1Affinity) SetTo(v IoK8sAPICoreV1Affinity) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1Affinity) Get() (v IoK8sAPICoreV1Affinity, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1Affinity) Or(d IoK8sAPICoreV1Affinity) IoK8sAPICoreV1Affinity {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1AzureDiskVolumeSource returns new OptIoK8sAPICoreV1AzureDiskVolumeSource with value set to v.
func NewOptIoK8sAPICoreV1AzureDiskVolumeSource(v IoK8sAPICoreV1AzureDiskVolumeSource) OptIoK8sAPICoreV1AzureDiskVolumeSource {
	return OptIoK8sAPICoreV1AzureDiskVolumeSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1AzureDiskVolumeSource is optional IoK8sAPICoreV1AzureDiskVolumeSource.
type OptIoK8sAPICoreV1AzureDiskVolumeSource struct {
	Value IoK8sAPICoreV1AzureDiskVolumeSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1AzureDiskVolumeSource was set.
func (o OptIoK8sAPICoreV1AzureDiskVolumeSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1AzureDiskVolumeSource) Reset() {
	var v IoK8sAPICoreV1AzureDiskVolumeSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1AzureDiskVolumeSource) SetTo(v IoK8sAPICoreV1AzureDiskVolumeSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1AzureDiskVolumeSource) Get() (v IoK8sAPICoreV1AzureDiskVolumeSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1AzureDiskVolumeSource) Or(d IoK8sAPICoreV1AzureDiskVolumeSource) IoK8sAPICoreV1AzureDiskVolumeSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1AzureFilePersistentVolumeSource returns new OptIoK8sAPICoreV1AzureFilePersistentVolumeSource with value set to v.
func NewOptIoK8sAPICoreV1AzureFilePersistentVolumeSource(v IoK8sAPICoreV1AzureFilePersistentVolumeSource) OptIoK8sAPICoreV1AzureFilePersistentVolumeSource {
	return OptIoK8sAPICoreV1AzureFilePersistentVolumeSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1AzureFilePersistentVolumeSource is optional IoK8sAPICoreV1AzureFilePersistentVolumeSource.
type OptIoK8sAPICoreV1AzureFilePersistentVolumeSource struct {
	Value IoK8sAPICoreV1AzureFilePersistentVolumeSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1AzureFilePersistentVolumeSource was set.
func (o OptIoK8sAPICoreV1AzureFilePersistentVolumeSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1AzureFilePersistentVolumeSource) Reset() {
	var v IoK8sAPICoreV1AzureFilePersistentVolumeSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1AzureFilePersistentVolumeSource) SetTo(v IoK8sAPICoreV1AzureFilePersistentVolumeSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1AzureFilePersistentVolumeSource) Get() (v IoK8sAPICoreV1AzureFilePersistentVolumeSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1AzureFilePersistentVolumeSource) Or(d IoK8sAPICoreV1AzureFilePersistentVolumeSource) IoK8sAPICoreV1AzureFilePersistentVolumeSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1AzureFileVolumeSource returns new OptIoK8sAPICoreV1AzureFileVolumeSource with value set to v.
func NewOptIoK8sAPICoreV1AzureFileVolumeSource(v IoK8sAPICoreV1AzureFileVolumeSource) OptIoK8sAPICoreV1AzureFileVolumeSource {
	return OptIoK8sAPICoreV1AzureFileVolumeSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1AzureFileVolumeSource is optional IoK8sAPICoreV1AzureFileVolumeSource.
type OptIoK8sAPICoreV1AzureFileVolumeSource struct {
	Value IoK8sAPICoreV1AzureFileVolumeSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1AzureFileVolumeSource was set.
func (o OptIoK8sAPICoreV1AzureFileVolumeSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1AzureFileVolumeSource) Reset() {
	var v IoK8sAPICoreV1AzureFileVolumeSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1AzureFileVolumeSource) SetTo(v IoK8sAPICoreV1AzureFileVolumeSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1AzureFileVolumeSource) Get() (v IoK8sAPICoreV1AzureFileVolumeSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1AzureFileVolumeSource) Or(d IoK8sAPICoreV1AzureFileVolumeSource) IoK8sAPICoreV1AzureFileVolumeSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1CSIPersistentVolumeSource returns new OptIoK8sAPICoreV1CSIPersistentVolumeSource with value set to v.
func NewOptIoK8sAPICoreV1CSIPersistentVolumeSource(v IoK8sAPICoreV1CSIPersistentVolumeSource) OptIoK8sAPICoreV1CSIPersistentVolumeSource {
	return OptIoK8sAPICoreV1CSIPersistentVolumeSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1CSIPersistentVolumeSource is optional IoK8sAPICoreV1CSIPersistentVolumeSource.
type OptIoK8sAPICoreV1CSIPersistentVolumeSource struct {
	Value IoK8sAPICoreV1CSIPersistentVolumeSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1CSIPersistentVolumeSource was set.
func (o OptIoK8sAPICoreV1CSIPersistentVolumeSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1CSIPersistentVolumeSource) Reset() {
	var v IoK8sAPICoreV1CSIPersistentVolumeSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1CSIPersistentVolumeSource) SetTo(v IoK8sAPICoreV1CSIPersistentVolumeSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1CSIPersistentVolumeSource) Get() (v IoK8sAPICoreV1CSIPersistentVolumeSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1CSIPersistentVolumeSource) Or(d IoK8sAPICoreV1CSIPersistentVolumeSource) IoK8sAPICoreV1CSIPersistentVolumeSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1CSIPersistentVolumeSourceVolumeAttributes returns new OptIoK8sAPICoreV1CSIPersistentVolumeSourceVolumeAttributes with value set to v.
func NewOptIoK8sAPICoreV1CSIPersistentVolumeSourceVolumeAttributes(v IoK8sAPICoreV1CSIPersistentVolumeSourceVolumeAttributes) OptIoK8sAPICoreV1CSIPersistentVolumeSourceVolumeAttributes {
	return OptIoK8sAPICoreV1CSIPersistentVolumeSourceVolumeAttributes{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1CSIPersistentVolumeSourceVolumeAttributes is optional IoK8sAPICoreV1CSIPersistentVolumeSourceVolumeAttributes.
type OptIoK8sAPICoreV1CSIPersistentVolumeSourceVolumeAttributes struct {
	Value IoK8sAPICoreV1CSIPersistentVolumeSourceVolumeAttributes
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1CSIPersistentVolumeSourceVolumeAttributes was set.
func (o OptIoK8sAPICoreV1CSIPersistentVolumeSourceVolumeAttributes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1CSIPersistentVolumeSourceVolumeAttributes) Reset() {
	var v IoK8sAPICoreV1CSIPersistentVolumeSourceVolumeAttributes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1CSIPersistentVolumeSourceVolumeAttributes) SetTo(v IoK8sAPICoreV1CSIPersistentVolumeSourceVolumeAttributes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1CSIPersistentVolumeSourceVolumeAttributes) Get() (v IoK8sAPICoreV1CSIPersistentVolumeSourceVolumeAttributes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1CSIPersistentVolumeSourceVolumeAttributes) Or(d IoK8sAPICoreV1CSIPersistentVolumeSourceVolumeAttributes) IoK8sAPICoreV1CSIPersistentVolumeSourceVolumeAttributes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1CSIVolumeSource returns new OptIoK8sAPICoreV1CSIVolumeSource with value set to v.
func NewOptIoK8sAPICoreV1CSIVolumeSource(v IoK8sAPICoreV1CSIVolumeSource) OptIoK8sAPICoreV1CSIVolumeSource {
	return OptIoK8sAPICoreV1CSIVolumeSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1CSIVolumeSource is optional IoK8sAPICoreV1CSIVolumeSource.
type OptIoK8sAPICoreV1CSIVolumeSource struct {
	Value IoK8sAPICoreV1CSIVolumeSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1CSIVolumeSource was set.
func (o OptIoK8sAPICoreV1CSIVolumeSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1CSIVolumeSource) Reset() {
	var v IoK8sAPICoreV1CSIVolumeSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1CSIVolumeSource) SetTo(v IoK8sAPICoreV1CSIVolumeSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1CSIVolumeSource) Get() (v IoK8sAPICoreV1CSIVolumeSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1CSIVolumeSource) Or(d IoK8sAPICoreV1CSIVolumeSource) IoK8sAPICoreV1CSIVolumeSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1CSIVolumeSourceVolumeAttributes returns new OptIoK8sAPICoreV1CSIVolumeSourceVolumeAttributes with value set to v.
func NewOptIoK8sAPICoreV1CSIVolumeSourceVolumeAttributes(v IoK8sAPICoreV1CSIVolumeSourceVolumeAttributes) OptIoK8sAPICoreV1CSIVolumeSourceVolumeAttributes {
	return OptIoK8sAPICoreV1CSIVolumeSourceVolumeAttributes{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1CSIVolumeSourceVolumeAttributes is optional IoK8sAPICoreV1CSIVolumeSourceVolumeAttributes.
type OptIoK8sAPICoreV1CSIVolumeSourceVolumeAttributes struct {
	Value IoK8sAPICoreV1CSIVolumeSourceVolumeAttributes
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1CSIVolumeSourceVolumeAttributes was set.
func (o OptIoK8sAPICoreV1CSIVolumeSourceVolumeAttributes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1CSIVolumeSourceVolumeAttributes) Reset() {
	var v IoK8sAPICoreV1CSIVolumeSourceVolumeAttributes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1CSIVolumeSourceVolumeAttributes) SetTo(v IoK8sAPICoreV1CSIVolumeSourceVolumeAttributes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1CSIVolumeSourceVolumeAttributes) Get() (v IoK8sAPICoreV1CSIVolumeSourceVolumeAttributes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1CSIVolumeSourceVolumeAttributes) Or(d IoK8sAPICoreV1CSIVolumeSourceVolumeAttributes) IoK8sAPICoreV1CSIVolumeSourceVolumeAttributes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1Capabilities returns new OptIoK8sAPICoreV1Capabilities with value set to v.
func NewOptIoK8sAPICoreV1Capabilities(v IoK8sAPICoreV1Capabilities) OptIoK8sAPICoreV1Capabilities {
	return OptIoK8sAPICoreV1Capabilities{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1Capabilities is optional IoK8sAPICoreV1Capabilities.
type OptIoK8sAPICoreV1Capabilities struct {
	Value IoK8sAPICoreV1Capabilities
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1Capabilities was set.
func (o OptIoK8sAPICoreV1Capabilities) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1Capabilities) Reset() {
	var v IoK8sAPICoreV1Capabilities
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1Capabilities) SetTo(v IoK8sAPICoreV1Capabilities) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1Capabilities) Get() (v IoK8sAPICoreV1Capabilities, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1Capabilities) Or(d IoK8sAPICoreV1Capabilities) IoK8sAPICoreV1Capabilities {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1CephFSPersistentVolumeSource returns new OptIoK8sAPICoreV1CephFSPersistentVolumeSource with value set to v.
func NewOptIoK8sAPICoreV1CephFSPersistentVolumeSource(v IoK8sAPICoreV1CephFSPersistentVolumeSource) OptIoK8sAPICoreV1CephFSPersistentVolumeSource {
	return OptIoK8sAPICoreV1CephFSPersistentVolumeSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1CephFSPersistentVolumeSource is optional IoK8sAPICoreV1CephFSPersistentVolumeSource.
type OptIoK8sAPICoreV1CephFSPersistentVolumeSource struct {
	Value IoK8sAPICoreV1CephFSPersistentVolumeSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1CephFSPersistentVolumeSource was set.
func (o OptIoK8sAPICoreV1CephFSPersistentVolumeSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1CephFSPersistentVolumeSource) Reset() {
	var v IoK8sAPICoreV1CephFSPersistentVolumeSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1CephFSPersistentVolumeSource) SetTo(v IoK8sAPICoreV1CephFSPersistentVolumeSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1CephFSPersistentVolumeSource) Get() (v IoK8sAPICoreV1CephFSPersistentVolumeSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1CephFSPersistentVolumeSource) Or(d IoK8sAPICoreV1CephFSPersistentVolumeSource) IoK8sAPICoreV1CephFSPersistentVolumeSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1CephFSVolumeSource returns new OptIoK8sAPICoreV1CephFSVolumeSource with value set to v.
func NewOptIoK8sAPICoreV1CephFSVolumeSource(v IoK8sAPICoreV1CephFSVolumeSource) OptIoK8sAPICoreV1CephFSVolumeSource {
	return OptIoK8sAPICoreV1CephFSVolumeSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1CephFSVolumeSource is optional IoK8sAPICoreV1CephFSVolumeSource.
type OptIoK8sAPICoreV1CephFSVolumeSource struct {
	Value IoK8sAPICoreV1CephFSVolumeSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1CephFSVolumeSource was set.
func (o OptIoK8sAPICoreV1CephFSVolumeSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1CephFSVolumeSource) Reset() {
	var v IoK8sAPICoreV1CephFSVolumeSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1CephFSVolumeSource) SetTo(v IoK8sAPICoreV1CephFSVolumeSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1CephFSVolumeSource) Get() (v IoK8sAPICoreV1CephFSVolumeSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1CephFSVolumeSource) Or(d IoK8sAPICoreV1CephFSVolumeSource) IoK8sAPICoreV1CephFSVolumeSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1CinderPersistentVolumeSource returns new OptIoK8sAPICoreV1CinderPersistentVolumeSource with value set to v.
func NewOptIoK8sAPICoreV1CinderPersistentVolumeSource(v IoK8sAPICoreV1CinderPersistentVolumeSource) OptIoK8sAPICoreV1CinderPersistentVolumeSource {
	return OptIoK8sAPICoreV1CinderPersistentVolumeSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1CinderPersistentVolumeSource is optional IoK8sAPICoreV1CinderPersistentVolumeSource.
type OptIoK8sAPICoreV1CinderPersistentVolumeSource struct {
	Value IoK8sAPICoreV1CinderPersistentVolumeSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1CinderPersistentVolumeSource was set.
func (o OptIoK8sAPICoreV1CinderPersistentVolumeSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1CinderPersistentVolumeSource) Reset() {
	var v IoK8sAPICoreV1CinderPersistentVolumeSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1CinderPersistentVolumeSource) SetTo(v IoK8sAPICoreV1CinderPersistentVolumeSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1CinderPersistentVolumeSource) Get() (v IoK8sAPICoreV1CinderPersistentVolumeSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1CinderPersistentVolumeSource) Or(d IoK8sAPICoreV1CinderPersistentVolumeSource) IoK8sAPICoreV1CinderPersistentVolumeSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1CinderVolumeSource returns new OptIoK8sAPICoreV1CinderVolumeSource with value set to v.
func NewOptIoK8sAPICoreV1CinderVolumeSource(v IoK8sAPICoreV1CinderVolumeSource) OptIoK8sAPICoreV1CinderVolumeSource {
	return OptIoK8sAPICoreV1CinderVolumeSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1CinderVolumeSource is optional IoK8sAPICoreV1CinderVolumeSource.
type OptIoK8sAPICoreV1CinderVolumeSource struct {
	Value IoK8sAPICoreV1CinderVolumeSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1CinderVolumeSource was set.
func (o OptIoK8sAPICoreV1CinderVolumeSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1CinderVolumeSource) Reset() {
	var v IoK8sAPICoreV1CinderVolumeSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1CinderVolumeSource) SetTo(v IoK8sAPICoreV1CinderVolumeSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1CinderVolumeSource) Get() (v IoK8sAPICoreV1CinderVolumeSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1CinderVolumeSource) Or(d IoK8sAPICoreV1CinderVolumeSource) IoK8sAPICoreV1CinderVolumeSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1ClientIPConfig returns new OptIoK8sAPICoreV1ClientIPConfig with value set to v.
func NewOptIoK8sAPICoreV1ClientIPConfig(v IoK8sAPICoreV1ClientIPConfig) OptIoK8sAPICoreV1ClientIPConfig {
	return OptIoK8sAPICoreV1ClientIPConfig{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1ClientIPConfig is optional IoK8sAPICoreV1ClientIPConfig.
type OptIoK8sAPICoreV1ClientIPConfig struct {
	Value IoK8sAPICoreV1ClientIPConfig
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1ClientIPConfig was set.
func (o OptIoK8sAPICoreV1ClientIPConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1ClientIPConfig) Reset() {
	var v IoK8sAPICoreV1ClientIPConfig
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1ClientIPConfig) SetTo(v IoK8sAPICoreV1ClientIPConfig) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1ClientIPConfig) Get() (v IoK8sAPICoreV1ClientIPConfig, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1ClientIPConfig) Or(d IoK8sAPICoreV1ClientIPConfig) IoK8sAPICoreV1ClientIPConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1ConfigMapBinaryData returns new OptIoK8sAPICoreV1ConfigMapBinaryData with value set to v.
func NewOptIoK8sAPICoreV1ConfigMapBinaryData(v IoK8sAPICoreV1ConfigMapBinaryData) OptIoK8sAPICoreV1ConfigMapBinaryData {
	return OptIoK8sAPICoreV1ConfigMapBinaryData{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1ConfigMapBinaryData is optional IoK8sAPICoreV1ConfigMapBinaryData.
type OptIoK8sAPICoreV1ConfigMapBinaryData struct {
	Value IoK8sAPICoreV1ConfigMapBinaryData
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1ConfigMapBinaryData was set.
func (o OptIoK8sAPICoreV1ConfigMapBinaryData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1ConfigMapBinaryData) Reset() {
	var v IoK8sAPICoreV1ConfigMapBinaryData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1ConfigMapBinaryData) SetTo(v IoK8sAPICoreV1ConfigMapBinaryData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1ConfigMapBinaryData) Get() (v IoK8sAPICoreV1ConfigMapBinaryData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1ConfigMapBinaryData) Or(d IoK8sAPICoreV1ConfigMapBinaryData) IoK8sAPICoreV1ConfigMapBinaryData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1ConfigMapData returns new OptIoK8sAPICoreV1ConfigMapData with value set to v.
func NewOptIoK8sAPICoreV1ConfigMapData(v IoK8sAPICoreV1ConfigMapData) OptIoK8sAPICoreV1ConfigMapData {
	return OptIoK8sAPICoreV1ConfigMapData{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1ConfigMapData is optional IoK8sAPICoreV1ConfigMapData.
type OptIoK8sAPICoreV1ConfigMapData struct {
	Value IoK8sAPICoreV1ConfigMapData
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1ConfigMapData was set.
func (o OptIoK8sAPICoreV1ConfigMapData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1ConfigMapData) Reset() {
	var v IoK8sAPICoreV1ConfigMapData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1ConfigMapData) SetTo(v IoK8sAPICoreV1ConfigMapData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1ConfigMapData) Get() (v IoK8sAPICoreV1ConfigMapData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1ConfigMapData) Or(d IoK8sAPICoreV1ConfigMapData) IoK8sAPICoreV1ConfigMapData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1ConfigMapEnvSource returns new OptIoK8sAPICoreV1ConfigMapEnvSource with value set to v.
func NewOptIoK8sAPICoreV1ConfigMapEnvSource(v IoK8sAPICoreV1ConfigMapEnvSource) OptIoK8sAPICoreV1ConfigMapEnvSource {
	return OptIoK8sAPICoreV1ConfigMapEnvSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1ConfigMapEnvSource is optional IoK8sAPICoreV1ConfigMapEnvSource.
type OptIoK8sAPICoreV1ConfigMapEnvSource struct {
	Value IoK8sAPICoreV1ConfigMapEnvSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1ConfigMapEnvSource was set.
func (o OptIoK8sAPICoreV1ConfigMapEnvSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1ConfigMapEnvSource) Reset() {
	var v IoK8sAPICoreV1ConfigMapEnvSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1ConfigMapEnvSource) SetTo(v IoK8sAPICoreV1ConfigMapEnvSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1ConfigMapEnvSource) Get() (v IoK8sAPICoreV1ConfigMapEnvSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1ConfigMapEnvSource) Or(d IoK8sAPICoreV1ConfigMapEnvSource) IoK8sAPICoreV1ConfigMapEnvSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1ConfigMapKeySelector returns new OptIoK8sAPICoreV1ConfigMapKeySelector with value set to v.
func NewOptIoK8sAPICoreV1ConfigMapKeySelector(v IoK8sAPICoreV1ConfigMapKeySelector) OptIoK8sAPICoreV1ConfigMapKeySelector {
	return OptIoK8sAPICoreV1ConfigMapKeySelector{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1ConfigMapKeySelector is optional IoK8sAPICoreV1ConfigMapKeySelector.
type OptIoK8sAPICoreV1ConfigMapKeySelector struct {
	Value IoK8sAPICoreV1ConfigMapKeySelector
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1ConfigMapKeySelector was set.
func (o OptIoK8sAPICoreV1ConfigMapKeySelector) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1ConfigMapKeySelector) Reset() {
	var v IoK8sAPICoreV1ConfigMapKeySelector
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1ConfigMapKeySelector) SetTo(v IoK8sAPICoreV1ConfigMapKeySelector) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1ConfigMapKeySelector) Get() (v IoK8sAPICoreV1ConfigMapKeySelector, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1ConfigMapKeySelector) Or(d IoK8sAPICoreV1ConfigMapKeySelector) IoK8sAPICoreV1ConfigMapKeySelector {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1ConfigMapNodeConfigSource returns new OptIoK8sAPICoreV1ConfigMapNodeConfigSource with value set to v.
func NewOptIoK8sAPICoreV1ConfigMapNodeConfigSource(v IoK8sAPICoreV1ConfigMapNodeConfigSource) OptIoK8sAPICoreV1ConfigMapNodeConfigSource {
	return OptIoK8sAPICoreV1ConfigMapNodeConfigSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1ConfigMapNodeConfigSource is optional IoK8sAPICoreV1ConfigMapNodeConfigSource.
type OptIoK8sAPICoreV1ConfigMapNodeConfigSource struct {
	Value IoK8sAPICoreV1ConfigMapNodeConfigSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1ConfigMapNodeConfigSource was set.
func (o OptIoK8sAPICoreV1ConfigMapNodeConfigSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1ConfigMapNodeConfigSource) Reset() {
	var v IoK8sAPICoreV1ConfigMapNodeConfigSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1ConfigMapNodeConfigSource) SetTo(v IoK8sAPICoreV1ConfigMapNodeConfigSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1ConfigMapNodeConfigSource) Get() (v IoK8sAPICoreV1ConfigMapNodeConfigSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1ConfigMapNodeConfigSource) Or(d IoK8sAPICoreV1ConfigMapNodeConfigSource) IoK8sAPICoreV1ConfigMapNodeConfigSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1ConfigMapProjection returns new OptIoK8sAPICoreV1ConfigMapProjection with value set to v.
func NewOptIoK8sAPICoreV1ConfigMapProjection(v IoK8sAPICoreV1ConfigMapProjection) OptIoK8sAPICoreV1ConfigMapProjection {
	return OptIoK8sAPICoreV1ConfigMapProjection{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1ConfigMapProjection is optional IoK8sAPICoreV1ConfigMapProjection.
type OptIoK8sAPICoreV1ConfigMapProjection struct {
	Value IoK8sAPICoreV1ConfigMapProjection
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1ConfigMapProjection was set.
func (o OptIoK8sAPICoreV1ConfigMapProjection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1ConfigMapProjection) Reset() {
	var v IoK8sAPICoreV1ConfigMapProjection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1ConfigMapProjection) SetTo(v IoK8sAPICoreV1ConfigMapProjection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1ConfigMapProjection) Get() (v IoK8sAPICoreV1ConfigMapProjection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1ConfigMapProjection) Or(d IoK8sAPICoreV1ConfigMapProjection) IoK8sAPICoreV1ConfigMapProjection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1ConfigMapVolumeSource returns new OptIoK8sAPICoreV1ConfigMapVolumeSource with value set to v.
func NewOptIoK8sAPICoreV1ConfigMapVolumeSource(v IoK8sAPICoreV1ConfigMapVolumeSource) OptIoK8sAPICoreV1ConfigMapVolumeSource {
	return OptIoK8sAPICoreV1ConfigMapVolumeSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1ConfigMapVolumeSource is optional IoK8sAPICoreV1ConfigMapVolumeSource.
type OptIoK8sAPICoreV1ConfigMapVolumeSource struct {
	Value IoK8sAPICoreV1ConfigMapVolumeSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1ConfigMapVolumeSource was set.
func (o OptIoK8sAPICoreV1ConfigMapVolumeSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1ConfigMapVolumeSource) Reset() {
	var v IoK8sAPICoreV1ConfigMapVolumeSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1ConfigMapVolumeSource) SetTo(v IoK8sAPICoreV1ConfigMapVolumeSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1ConfigMapVolumeSource) Get() (v IoK8sAPICoreV1ConfigMapVolumeSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1ConfigMapVolumeSource) Or(d IoK8sAPICoreV1ConfigMapVolumeSource) IoK8sAPICoreV1ConfigMapVolumeSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1ContainerState returns new OptIoK8sAPICoreV1ContainerState with value set to v.
func NewOptIoK8sAPICoreV1ContainerState(v IoK8sAPICoreV1ContainerState) OptIoK8sAPICoreV1ContainerState {
	return OptIoK8sAPICoreV1ContainerState{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1ContainerState is optional IoK8sAPICoreV1ContainerState.
type OptIoK8sAPICoreV1ContainerState struct {
	Value IoK8sAPICoreV1ContainerState
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1ContainerState was set.
func (o OptIoK8sAPICoreV1ContainerState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1ContainerState) Reset() {
	var v IoK8sAPICoreV1ContainerState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1ContainerState) SetTo(v IoK8sAPICoreV1ContainerState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1ContainerState) Get() (v IoK8sAPICoreV1ContainerState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1ContainerState) Or(d IoK8sAPICoreV1ContainerState) IoK8sAPICoreV1ContainerState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1ContainerStateRunning returns new OptIoK8sAPICoreV1ContainerStateRunning with value set to v.
func NewOptIoK8sAPICoreV1ContainerStateRunning(v IoK8sAPICoreV1ContainerStateRunning) OptIoK8sAPICoreV1ContainerStateRunning {
	return OptIoK8sAPICoreV1ContainerStateRunning{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1ContainerStateRunning is optional IoK8sAPICoreV1ContainerStateRunning.
type OptIoK8sAPICoreV1ContainerStateRunning struct {
	Value IoK8sAPICoreV1ContainerStateRunning
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1ContainerStateRunning was set.
func (o OptIoK8sAPICoreV1ContainerStateRunning) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1ContainerStateRunning) Reset() {
	var v IoK8sAPICoreV1ContainerStateRunning
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1ContainerStateRunning) SetTo(v IoK8sAPICoreV1ContainerStateRunning) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1ContainerStateRunning) Get() (v IoK8sAPICoreV1ContainerStateRunning, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1ContainerStateRunning) Or(d IoK8sAPICoreV1ContainerStateRunning) IoK8sAPICoreV1ContainerStateRunning {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1ContainerStateTerminated returns new OptIoK8sAPICoreV1ContainerStateTerminated with value set to v.
func NewOptIoK8sAPICoreV1ContainerStateTerminated(v IoK8sAPICoreV1ContainerStateTerminated) OptIoK8sAPICoreV1ContainerStateTerminated {
	return OptIoK8sAPICoreV1ContainerStateTerminated{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1ContainerStateTerminated is optional IoK8sAPICoreV1ContainerStateTerminated.
type OptIoK8sAPICoreV1ContainerStateTerminated struct {
	Value IoK8sAPICoreV1ContainerStateTerminated
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1ContainerStateTerminated was set.
func (o OptIoK8sAPICoreV1ContainerStateTerminated) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1ContainerStateTerminated) Reset() {
	var v IoK8sAPICoreV1ContainerStateTerminated
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1ContainerStateTerminated) SetTo(v IoK8sAPICoreV1ContainerStateTerminated) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1ContainerStateTerminated) Get() (v IoK8sAPICoreV1ContainerStateTerminated, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1ContainerStateTerminated) Or(d IoK8sAPICoreV1ContainerStateTerminated) IoK8sAPICoreV1ContainerStateTerminated {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1ContainerStateWaiting returns new OptIoK8sAPICoreV1ContainerStateWaiting with value set to v.
func NewOptIoK8sAPICoreV1ContainerStateWaiting(v IoK8sAPICoreV1ContainerStateWaiting) OptIoK8sAPICoreV1ContainerStateWaiting {
	return OptIoK8sAPICoreV1ContainerStateWaiting{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1ContainerStateWaiting is optional IoK8sAPICoreV1ContainerStateWaiting.
type OptIoK8sAPICoreV1ContainerStateWaiting struct {
	Value IoK8sAPICoreV1ContainerStateWaiting
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1ContainerStateWaiting was set.
func (o OptIoK8sAPICoreV1ContainerStateWaiting) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1ContainerStateWaiting) Reset() {
	var v IoK8sAPICoreV1ContainerStateWaiting
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1ContainerStateWaiting) SetTo(v IoK8sAPICoreV1ContainerStateWaiting) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1ContainerStateWaiting) Get() (v IoK8sAPICoreV1ContainerStateWaiting, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1ContainerStateWaiting) Or(d IoK8sAPICoreV1ContainerStateWaiting) IoK8sAPICoreV1ContainerStateWaiting {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1DaemonEndpoint returns new OptIoK8sAPICoreV1DaemonEndpoint with value set to v.
func NewOptIoK8sAPICoreV1DaemonEndpoint(v IoK8sAPICoreV1DaemonEndpoint) OptIoK8sAPICoreV1DaemonEndpoint {
	return OptIoK8sAPICoreV1DaemonEndpoint{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1DaemonEndpoint is optional IoK8sAPICoreV1DaemonEndpoint.
type OptIoK8sAPICoreV1DaemonEndpoint struct {
	Value IoK8sAPICoreV1DaemonEndpoint
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1DaemonEndpoint was set.
func (o OptIoK8sAPICoreV1DaemonEndpoint) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1DaemonEndpoint) Reset() {
	var v IoK8sAPICoreV1DaemonEndpoint
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1DaemonEndpoint) SetTo(v IoK8sAPICoreV1DaemonEndpoint) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1DaemonEndpoint) Get() (v IoK8sAPICoreV1DaemonEndpoint, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1DaemonEndpoint) Or(d IoK8sAPICoreV1DaemonEndpoint) IoK8sAPICoreV1DaemonEndpoint {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1DownwardAPIProjection returns new OptIoK8sAPICoreV1DownwardAPIProjection with value set to v.
func NewOptIoK8sAPICoreV1DownwardAPIProjection(v IoK8sAPICoreV1DownwardAPIProjection) OptIoK8sAPICoreV1DownwardAPIProjection {
	return OptIoK8sAPICoreV1DownwardAPIProjection{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1DownwardAPIProjection is optional IoK8sAPICoreV1DownwardAPIProjection.
type OptIoK8sAPICoreV1DownwardAPIProjection struct {
	Value IoK8sAPICoreV1DownwardAPIProjection
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1DownwardAPIProjection was set.
func (o OptIoK8sAPICoreV1DownwardAPIProjection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1DownwardAPIProjection) Reset() {
	var v IoK8sAPICoreV1DownwardAPIProjection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1DownwardAPIProjection) SetTo(v IoK8sAPICoreV1DownwardAPIProjection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1DownwardAPIProjection) Get() (v IoK8sAPICoreV1DownwardAPIProjection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1DownwardAPIProjection) Or(d IoK8sAPICoreV1DownwardAPIProjection) IoK8sAPICoreV1DownwardAPIProjection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1DownwardAPIVolumeSource returns new OptIoK8sAPICoreV1DownwardAPIVolumeSource with value set to v.
func NewOptIoK8sAPICoreV1DownwardAPIVolumeSource(v IoK8sAPICoreV1DownwardAPIVolumeSource) OptIoK8sAPICoreV1DownwardAPIVolumeSource {
	return OptIoK8sAPICoreV1DownwardAPIVolumeSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1DownwardAPIVolumeSource is optional IoK8sAPICoreV1DownwardAPIVolumeSource.
type OptIoK8sAPICoreV1DownwardAPIVolumeSource struct {
	Value IoK8sAPICoreV1DownwardAPIVolumeSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1DownwardAPIVolumeSource was set.
func (o OptIoK8sAPICoreV1DownwardAPIVolumeSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1DownwardAPIVolumeSource) Reset() {
	var v IoK8sAPICoreV1DownwardAPIVolumeSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1DownwardAPIVolumeSource) SetTo(v IoK8sAPICoreV1DownwardAPIVolumeSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1DownwardAPIVolumeSource) Get() (v IoK8sAPICoreV1DownwardAPIVolumeSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1DownwardAPIVolumeSource) Or(d IoK8sAPICoreV1DownwardAPIVolumeSource) IoK8sAPICoreV1DownwardAPIVolumeSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1EmptyDirVolumeSource returns new OptIoK8sAPICoreV1EmptyDirVolumeSource with value set to v.
func NewOptIoK8sAPICoreV1EmptyDirVolumeSource(v IoK8sAPICoreV1EmptyDirVolumeSource) OptIoK8sAPICoreV1EmptyDirVolumeSource {
	return OptIoK8sAPICoreV1EmptyDirVolumeSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1EmptyDirVolumeSource is optional IoK8sAPICoreV1EmptyDirVolumeSource.
type OptIoK8sAPICoreV1EmptyDirVolumeSource struct {
	Value IoK8sAPICoreV1EmptyDirVolumeSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1EmptyDirVolumeSource was set.
func (o OptIoK8sAPICoreV1EmptyDirVolumeSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1EmptyDirVolumeSource) Reset() {
	var v IoK8sAPICoreV1EmptyDirVolumeSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1EmptyDirVolumeSource) SetTo(v IoK8sAPICoreV1EmptyDirVolumeSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1EmptyDirVolumeSource) Get() (v IoK8sAPICoreV1EmptyDirVolumeSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1EmptyDirVolumeSource) Or(d IoK8sAPICoreV1EmptyDirVolumeSource) IoK8sAPICoreV1EmptyDirVolumeSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1EnvVarSource returns new OptIoK8sAPICoreV1EnvVarSource with value set to v.
func NewOptIoK8sAPICoreV1EnvVarSource(v IoK8sAPICoreV1EnvVarSource) OptIoK8sAPICoreV1EnvVarSource {
	return OptIoK8sAPICoreV1EnvVarSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1EnvVarSource is optional IoK8sAPICoreV1EnvVarSource.
type OptIoK8sAPICoreV1EnvVarSource struct {
	Value IoK8sAPICoreV1EnvVarSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1EnvVarSource was set.
func (o OptIoK8sAPICoreV1EnvVarSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1EnvVarSource) Reset() {
	var v IoK8sAPICoreV1EnvVarSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1EnvVarSource) SetTo(v IoK8sAPICoreV1EnvVarSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1EnvVarSource) Get() (v IoK8sAPICoreV1EnvVarSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1EnvVarSource) Or(d IoK8sAPICoreV1EnvVarSource) IoK8sAPICoreV1EnvVarSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1EphemeralVolumeSource returns new OptIoK8sAPICoreV1EphemeralVolumeSource with value set to v.
func NewOptIoK8sAPICoreV1EphemeralVolumeSource(v IoK8sAPICoreV1EphemeralVolumeSource) OptIoK8sAPICoreV1EphemeralVolumeSource {
	return OptIoK8sAPICoreV1EphemeralVolumeSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1EphemeralVolumeSource is optional IoK8sAPICoreV1EphemeralVolumeSource.
type OptIoK8sAPICoreV1EphemeralVolumeSource struct {
	Value IoK8sAPICoreV1EphemeralVolumeSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1EphemeralVolumeSource was set.
func (o OptIoK8sAPICoreV1EphemeralVolumeSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1EphemeralVolumeSource) Reset() {
	var v IoK8sAPICoreV1EphemeralVolumeSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1EphemeralVolumeSource) SetTo(v IoK8sAPICoreV1EphemeralVolumeSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1EphemeralVolumeSource) Get() (v IoK8sAPICoreV1EphemeralVolumeSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1EphemeralVolumeSource) Or(d IoK8sAPICoreV1EphemeralVolumeSource) IoK8sAPICoreV1EphemeralVolumeSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1EventSeries returns new OptIoK8sAPICoreV1EventSeries with value set to v.
func NewOptIoK8sAPICoreV1EventSeries(v IoK8sAPICoreV1EventSeries) OptIoK8sAPICoreV1EventSeries {
	return OptIoK8sAPICoreV1EventSeries{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1EventSeries is optional IoK8sAPICoreV1EventSeries.
type OptIoK8sAPICoreV1EventSeries struct {
	Value IoK8sAPICoreV1EventSeries
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1EventSeries was set.
func (o OptIoK8sAPICoreV1EventSeries) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1EventSeries) Reset() {
	var v IoK8sAPICoreV1EventSeries
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1EventSeries) SetTo(v IoK8sAPICoreV1EventSeries) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1EventSeries) Get() (v IoK8sAPICoreV1EventSeries, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1EventSeries) Or(d IoK8sAPICoreV1EventSeries) IoK8sAPICoreV1EventSeries {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1EventSource returns new OptIoK8sAPICoreV1EventSource with value set to v.
func NewOptIoK8sAPICoreV1EventSource(v IoK8sAPICoreV1EventSource) OptIoK8sAPICoreV1EventSource {
	return OptIoK8sAPICoreV1EventSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1EventSource is optional IoK8sAPICoreV1EventSource.
type OptIoK8sAPICoreV1EventSource struct {
	Value IoK8sAPICoreV1EventSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1EventSource was set.
func (o OptIoK8sAPICoreV1EventSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1EventSource) Reset() {
	var v IoK8sAPICoreV1EventSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1EventSource) SetTo(v IoK8sAPICoreV1EventSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1EventSource) Get() (v IoK8sAPICoreV1EventSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1EventSource) Or(d IoK8sAPICoreV1EventSource) IoK8sAPICoreV1EventSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1ExecAction returns new OptIoK8sAPICoreV1ExecAction with value set to v.
func NewOptIoK8sAPICoreV1ExecAction(v IoK8sAPICoreV1ExecAction) OptIoK8sAPICoreV1ExecAction {
	return OptIoK8sAPICoreV1ExecAction{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1ExecAction is optional IoK8sAPICoreV1ExecAction.
type OptIoK8sAPICoreV1ExecAction struct {
	Value IoK8sAPICoreV1ExecAction
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1ExecAction was set.
func (o OptIoK8sAPICoreV1ExecAction) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1ExecAction) Reset() {
	var v IoK8sAPICoreV1ExecAction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1ExecAction) SetTo(v IoK8sAPICoreV1ExecAction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1ExecAction) Get() (v IoK8sAPICoreV1ExecAction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1ExecAction) Or(d IoK8sAPICoreV1ExecAction) IoK8sAPICoreV1ExecAction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1FCVolumeSource returns new OptIoK8sAPICoreV1FCVolumeSource with value set to v.
func NewOptIoK8sAPICoreV1FCVolumeSource(v IoK8sAPICoreV1FCVolumeSource) OptIoK8sAPICoreV1FCVolumeSource {
	return OptIoK8sAPICoreV1FCVolumeSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1FCVolumeSource is optional IoK8sAPICoreV1FCVolumeSource.
type OptIoK8sAPICoreV1FCVolumeSource struct {
	Value IoK8sAPICoreV1FCVolumeSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1FCVolumeSource was set.
func (o OptIoK8sAPICoreV1FCVolumeSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1FCVolumeSource) Reset() {
	var v IoK8sAPICoreV1FCVolumeSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1FCVolumeSource) SetTo(v IoK8sAPICoreV1FCVolumeSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1FCVolumeSource) Get() (v IoK8sAPICoreV1FCVolumeSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1FCVolumeSource) Or(d IoK8sAPICoreV1FCVolumeSource) IoK8sAPICoreV1FCVolumeSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1FlexPersistentVolumeSource returns new OptIoK8sAPICoreV1FlexPersistentVolumeSource with value set to v.
func NewOptIoK8sAPICoreV1FlexPersistentVolumeSource(v IoK8sAPICoreV1FlexPersistentVolumeSource) OptIoK8sAPICoreV1FlexPersistentVolumeSource {
	return OptIoK8sAPICoreV1FlexPersistentVolumeSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1FlexPersistentVolumeSource is optional IoK8sAPICoreV1FlexPersistentVolumeSource.
type OptIoK8sAPICoreV1FlexPersistentVolumeSource struct {
	Value IoK8sAPICoreV1FlexPersistentVolumeSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1FlexPersistentVolumeSource was set.
func (o OptIoK8sAPICoreV1FlexPersistentVolumeSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1FlexPersistentVolumeSource) Reset() {
	var v IoK8sAPICoreV1FlexPersistentVolumeSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1FlexPersistentVolumeSource) SetTo(v IoK8sAPICoreV1FlexPersistentVolumeSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1FlexPersistentVolumeSource) Get() (v IoK8sAPICoreV1FlexPersistentVolumeSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1FlexPersistentVolumeSource) Or(d IoK8sAPICoreV1FlexPersistentVolumeSource) IoK8sAPICoreV1FlexPersistentVolumeSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1FlexPersistentVolumeSourceOptions returns new OptIoK8sAPICoreV1FlexPersistentVolumeSourceOptions with value set to v.
func NewOptIoK8sAPICoreV1FlexPersistentVolumeSourceOptions(v IoK8sAPICoreV1FlexPersistentVolumeSourceOptions) OptIoK8sAPICoreV1FlexPersistentVolumeSourceOptions {
	return OptIoK8sAPICoreV1FlexPersistentVolumeSourceOptions{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1FlexPersistentVolumeSourceOptions is optional IoK8sAPICoreV1FlexPersistentVolumeSourceOptions.
type OptIoK8sAPICoreV1FlexPersistentVolumeSourceOptions struct {
	Value IoK8sAPICoreV1FlexPersistentVolumeSourceOptions
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1FlexPersistentVolumeSourceOptions was set.
func (o OptIoK8sAPICoreV1FlexPersistentVolumeSourceOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1FlexPersistentVolumeSourceOptions) Reset() {
	var v IoK8sAPICoreV1FlexPersistentVolumeSourceOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1FlexPersistentVolumeSourceOptions) SetTo(v IoK8sAPICoreV1FlexPersistentVolumeSourceOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1FlexPersistentVolumeSourceOptions) Get() (v IoK8sAPICoreV1FlexPersistentVolumeSourceOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1FlexPersistentVolumeSourceOptions) Or(d IoK8sAPICoreV1FlexPersistentVolumeSourceOptions) IoK8sAPICoreV1FlexPersistentVolumeSourceOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1FlexVolumeSource returns new OptIoK8sAPICoreV1FlexVolumeSource with value set to v.
func NewOptIoK8sAPICoreV1FlexVolumeSource(v IoK8sAPICoreV1FlexVolumeSource) OptIoK8sAPICoreV1FlexVolumeSource {
	return OptIoK8sAPICoreV1FlexVolumeSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1FlexVolumeSource is optional IoK8sAPICoreV1FlexVolumeSource.
type OptIoK8sAPICoreV1FlexVolumeSource struct {
	Value IoK8sAPICoreV1FlexVolumeSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1FlexVolumeSource was set.
func (o OptIoK8sAPICoreV1FlexVolumeSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1FlexVolumeSource) Reset() {
	var v IoK8sAPICoreV1FlexVolumeSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1FlexVolumeSource) SetTo(v IoK8sAPICoreV1FlexVolumeSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1FlexVolumeSource) Get() (v IoK8sAPICoreV1FlexVolumeSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1FlexVolumeSource) Or(d IoK8sAPICoreV1FlexVolumeSource) IoK8sAPICoreV1FlexVolumeSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1FlexVolumeSourceOptions returns new OptIoK8sAPICoreV1FlexVolumeSourceOptions with value set to v.
func NewOptIoK8sAPICoreV1FlexVolumeSourceOptions(v IoK8sAPICoreV1FlexVolumeSourceOptions) OptIoK8sAPICoreV1FlexVolumeSourceOptions {
	return OptIoK8sAPICoreV1FlexVolumeSourceOptions{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1FlexVolumeSourceOptions is optional IoK8sAPICoreV1FlexVolumeSourceOptions.
type OptIoK8sAPICoreV1FlexVolumeSourceOptions struct {
	Value IoK8sAPICoreV1FlexVolumeSourceOptions
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1FlexVolumeSourceOptions was set.
func (o OptIoK8sAPICoreV1FlexVolumeSourceOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1FlexVolumeSourceOptions) Reset() {
	var v IoK8sAPICoreV1FlexVolumeSourceOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1FlexVolumeSourceOptions) SetTo(v IoK8sAPICoreV1FlexVolumeSourceOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1FlexVolumeSourceOptions) Get() (v IoK8sAPICoreV1FlexVolumeSourceOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1FlexVolumeSourceOptions) Or(d IoK8sAPICoreV1FlexVolumeSourceOptions) IoK8sAPICoreV1FlexVolumeSourceOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1FlockerVolumeSource returns new OptIoK8sAPICoreV1FlockerVolumeSource with value set to v.
func NewOptIoK8sAPICoreV1FlockerVolumeSource(v IoK8sAPICoreV1FlockerVolumeSource) OptIoK8sAPICoreV1FlockerVolumeSource {
	return OptIoK8sAPICoreV1FlockerVolumeSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1FlockerVolumeSource is optional IoK8sAPICoreV1FlockerVolumeSource.
type OptIoK8sAPICoreV1FlockerVolumeSource struct {
	Value IoK8sAPICoreV1FlockerVolumeSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1FlockerVolumeSource was set.
func (o OptIoK8sAPICoreV1FlockerVolumeSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1FlockerVolumeSource) Reset() {
	var v IoK8sAPICoreV1FlockerVolumeSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1FlockerVolumeSource) SetTo(v IoK8sAPICoreV1FlockerVolumeSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1FlockerVolumeSource) Get() (v IoK8sAPICoreV1FlockerVolumeSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1FlockerVolumeSource) Or(d IoK8sAPICoreV1FlockerVolumeSource) IoK8sAPICoreV1FlockerVolumeSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1GCEPersistentDiskVolumeSource returns new OptIoK8sAPICoreV1GCEPersistentDiskVolumeSource with value set to v.
func NewOptIoK8sAPICoreV1GCEPersistentDiskVolumeSource(v IoK8sAPICoreV1GCEPersistentDiskVolumeSource) OptIoK8sAPICoreV1GCEPersistentDiskVolumeSource {
	return OptIoK8sAPICoreV1GCEPersistentDiskVolumeSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1GCEPersistentDiskVolumeSource is optional IoK8sAPICoreV1GCEPersistentDiskVolumeSource.
type OptIoK8sAPICoreV1GCEPersistentDiskVolumeSource struct {
	Value IoK8sAPICoreV1GCEPersistentDiskVolumeSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1GCEPersistentDiskVolumeSource was set.
func (o OptIoK8sAPICoreV1GCEPersistentDiskVolumeSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1GCEPersistentDiskVolumeSource) Reset() {
	var v IoK8sAPICoreV1GCEPersistentDiskVolumeSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1GCEPersistentDiskVolumeSource) SetTo(v IoK8sAPICoreV1GCEPersistentDiskVolumeSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1GCEPersistentDiskVolumeSource) Get() (v IoK8sAPICoreV1GCEPersistentDiskVolumeSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1GCEPersistentDiskVolumeSource) Or(d IoK8sAPICoreV1GCEPersistentDiskVolumeSource) IoK8sAPICoreV1GCEPersistentDiskVolumeSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1GitRepoVolumeSource returns new OptIoK8sAPICoreV1GitRepoVolumeSource with value set to v.
func NewOptIoK8sAPICoreV1GitRepoVolumeSource(v IoK8sAPICoreV1GitRepoVolumeSource) OptIoK8sAPICoreV1GitRepoVolumeSource {
	return OptIoK8sAPICoreV1GitRepoVolumeSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1GitRepoVolumeSource is optional IoK8sAPICoreV1GitRepoVolumeSource.
type OptIoK8sAPICoreV1GitRepoVolumeSource struct {
	Value IoK8sAPICoreV1GitRepoVolumeSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1GitRepoVolumeSource was set.
func (o OptIoK8sAPICoreV1GitRepoVolumeSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1GitRepoVolumeSource) Reset() {
	var v IoK8sAPICoreV1GitRepoVolumeSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1GitRepoVolumeSource) SetTo(v IoK8sAPICoreV1GitRepoVolumeSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1GitRepoVolumeSource) Get() (v IoK8sAPICoreV1GitRepoVolumeSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1GitRepoVolumeSource) Or(d IoK8sAPICoreV1GitRepoVolumeSource) IoK8sAPICoreV1GitRepoVolumeSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1GlusterfsPersistentVolumeSource returns new OptIoK8sAPICoreV1GlusterfsPersistentVolumeSource with value set to v.
func NewOptIoK8sAPICoreV1GlusterfsPersistentVolumeSource(v IoK8sAPICoreV1GlusterfsPersistentVolumeSource) OptIoK8sAPICoreV1GlusterfsPersistentVolumeSource {
	return OptIoK8sAPICoreV1GlusterfsPersistentVolumeSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1GlusterfsPersistentVolumeSource is optional IoK8sAPICoreV1GlusterfsPersistentVolumeSource.
type OptIoK8sAPICoreV1GlusterfsPersistentVolumeSource struct {
	Value IoK8sAPICoreV1GlusterfsPersistentVolumeSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1GlusterfsPersistentVolumeSource was set.
func (o OptIoK8sAPICoreV1GlusterfsPersistentVolumeSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1GlusterfsPersistentVolumeSource) Reset() {
	var v IoK8sAPICoreV1GlusterfsPersistentVolumeSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1GlusterfsPersistentVolumeSource) SetTo(v IoK8sAPICoreV1GlusterfsPersistentVolumeSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1GlusterfsPersistentVolumeSource) Get() (v IoK8sAPICoreV1GlusterfsPersistentVolumeSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1GlusterfsPersistentVolumeSource) Or(d IoK8sAPICoreV1GlusterfsPersistentVolumeSource) IoK8sAPICoreV1GlusterfsPersistentVolumeSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1GlusterfsVolumeSource returns new OptIoK8sAPICoreV1GlusterfsVolumeSource with value set to v.
func NewOptIoK8sAPICoreV1GlusterfsVolumeSource(v IoK8sAPICoreV1GlusterfsVolumeSource) OptIoK8sAPICoreV1GlusterfsVolumeSource {
	return OptIoK8sAPICoreV1GlusterfsVolumeSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1GlusterfsVolumeSource is optional IoK8sAPICoreV1GlusterfsVolumeSource.
type OptIoK8sAPICoreV1GlusterfsVolumeSource struct {
	Value IoK8sAPICoreV1GlusterfsVolumeSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1GlusterfsVolumeSource was set.
func (o OptIoK8sAPICoreV1GlusterfsVolumeSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1GlusterfsVolumeSource) Reset() {
	var v IoK8sAPICoreV1GlusterfsVolumeSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1GlusterfsVolumeSource) SetTo(v IoK8sAPICoreV1GlusterfsVolumeSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1GlusterfsVolumeSource) Get() (v IoK8sAPICoreV1GlusterfsVolumeSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1GlusterfsVolumeSource) Or(d IoK8sAPICoreV1GlusterfsVolumeSource) IoK8sAPICoreV1GlusterfsVolumeSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1HTTPGetAction returns new OptIoK8sAPICoreV1HTTPGetAction with value set to v.
func NewOptIoK8sAPICoreV1HTTPGetAction(v IoK8sAPICoreV1HTTPGetAction) OptIoK8sAPICoreV1HTTPGetAction {
	return OptIoK8sAPICoreV1HTTPGetAction{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1HTTPGetAction is optional IoK8sAPICoreV1HTTPGetAction.
type OptIoK8sAPICoreV1HTTPGetAction struct {
	Value IoK8sAPICoreV1HTTPGetAction
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1HTTPGetAction was set.
func (o OptIoK8sAPICoreV1HTTPGetAction) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1HTTPGetAction) Reset() {
	var v IoK8sAPICoreV1HTTPGetAction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1HTTPGetAction) SetTo(v IoK8sAPICoreV1HTTPGetAction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1HTTPGetAction) Get() (v IoK8sAPICoreV1HTTPGetAction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1HTTPGetAction) Or(d IoK8sAPICoreV1HTTPGetAction) IoK8sAPICoreV1HTTPGetAction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1Handler returns new OptIoK8sAPICoreV1Handler with value set to v.
func NewOptIoK8sAPICoreV1Handler(v IoK8sAPICoreV1Handler) OptIoK8sAPICoreV1Handler {
	return OptIoK8sAPICoreV1Handler{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1Handler is optional IoK8sAPICoreV1Handler.
type OptIoK8sAPICoreV1Handler struct {
	Value IoK8sAPICoreV1Handler
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1Handler was set.
func (o OptIoK8sAPICoreV1Handler) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1Handler) Reset() {
	var v IoK8sAPICoreV1Handler
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1Handler) SetTo(v IoK8sAPICoreV1Handler) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1Handler) Get() (v IoK8sAPICoreV1Handler, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1Handler) Or(d IoK8sAPICoreV1Handler) IoK8sAPICoreV1Handler {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1HostPathVolumeSource returns new OptIoK8sAPICoreV1HostPathVolumeSource with value set to v.
func NewOptIoK8sAPICoreV1HostPathVolumeSource(v IoK8sAPICoreV1HostPathVolumeSource) OptIoK8sAPICoreV1HostPathVolumeSource {
	return OptIoK8sAPICoreV1HostPathVolumeSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1HostPathVolumeSource is optional IoK8sAPICoreV1HostPathVolumeSource.
type OptIoK8sAPICoreV1HostPathVolumeSource struct {
	Value IoK8sAPICoreV1HostPathVolumeSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1HostPathVolumeSource was set.
func (o OptIoK8sAPICoreV1HostPathVolumeSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1HostPathVolumeSource) Reset() {
	var v IoK8sAPICoreV1HostPathVolumeSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1HostPathVolumeSource) SetTo(v IoK8sAPICoreV1HostPathVolumeSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1HostPathVolumeSource) Get() (v IoK8sAPICoreV1HostPathVolumeSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1HostPathVolumeSource) Or(d IoK8sAPICoreV1HostPathVolumeSource) IoK8sAPICoreV1HostPathVolumeSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1ISCSIPersistentVolumeSource returns new OptIoK8sAPICoreV1ISCSIPersistentVolumeSource with value set to v.
func NewOptIoK8sAPICoreV1ISCSIPersistentVolumeSource(v IoK8sAPICoreV1ISCSIPersistentVolumeSource) OptIoK8sAPICoreV1ISCSIPersistentVolumeSource {
	return OptIoK8sAPICoreV1ISCSIPersistentVolumeSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1ISCSIPersistentVolumeSource is optional IoK8sAPICoreV1ISCSIPersistentVolumeSource.
type OptIoK8sAPICoreV1ISCSIPersistentVolumeSource struct {
	Value IoK8sAPICoreV1ISCSIPersistentVolumeSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1ISCSIPersistentVolumeSource was set.
func (o OptIoK8sAPICoreV1ISCSIPersistentVolumeSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1ISCSIPersistentVolumeSource) Reset() {
	var v IoK8sAPICoreV1ISCSIPersistentVolumeSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1ISCSIPersistentVolumeSource) SetTo(v IoK8sAPICoreV1ISCSIPersistentVolumeSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1ISCSIPersistentVolumeSource) Get() (v IoK8sAPICoreV1ISCSIPersistentVolumeSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1ISCSIPersistentVolumeSource) Or(d IoK8sAPICoreV1ISCSIPersistentVolumeSource) IoK8sAPICoreV1ISCSIPersistentVolumeSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1ISCSIVolumeSource returns new OptIoK8sAPICoreV1ISCSIVolumeSource with value set to v.
func NewOptIoK8sAPICoreV1ISCSIVolumeSource(v IoK8sAPICoreV1ISCSIVolumeSource) OptIoK8sAPICoreV1ISCSIVolumeSource {
	return OptIoK8sAPICoreV1ISCSIVolumeSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1ISCSIVolumeSource is optional IoK8sAPICoreV1ISCSIVolumeSource.
type OptIoK8sAPICoreV1ISCSIVolumeSource struct {
	Value IoK8sAPICoreV1ISCSIVolumeSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1ISCSIVolumeSource was set.
func (o OptIoK8sAPICoreV1ISCSIVolumeSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1ISCSIVolumeSource) Reset() {
	var v IoK8sAPICoreV1ISCSIVolumeSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1ISCSIVolumeSource) SetTo(v IoK8sAPICoreV1ISCSIVolumeSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1ISCSIVolumeSource) Get() (v IoK8sAPICoreV1ISCSIVolumeSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1ISCSIVolumeSource) Or(d IoK8sAPICoreV1ISCSIVolumeSource) IoK8sAPICoreV1ISCSIVolumeSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1Lifecycle returns new OptIoK8sAPICoreV1Lifecycle with value set to v.
func NewOptIoK8sAPICoreV1Lifecycle(v IoK8sAPICoreV1Lifecycle) OptIoK8sAPICoreV1Lifecycle {
	return OptIoK8sAPICoreV1Lifecycle{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1Lifecycle is optional IoK8sAPICoreV1Lifecycle.
type OptIoK8sAPICoreV1Lifecycle struct {
	Value IoK8sAPICoreV1Lifecycle
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1Lifecycle was set.
func (o OptIoK8sAPICoreV1Lifecycle) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1Lifecycle) Reset() {
	var v IoK8sAPICoreV1Lifecycle
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1Lifecycle) SetTo(v IoK8sAPICoreV1Lifecycle) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1Lifecycle) Get() (v IoK8sAPICoreV1Lifecycle, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1Lifecycle) Or(d IoK8sAPICoreV1Lifecycle) IoK8sAPICoreV1Lifecycle {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1LimitRangeItemDefault returns new OptIoK8sAPICoreV1LimitRangeItemDefault with value set to v.
func NewOptIoK8sAPICoreV1LimitRangeItemDefault(v IoK8sAPICoreV1LimitRangeItemDefault) OptIoK8sAPICoreV1LimitRangeItemDefault {
	return OptIoK8sAPICoreV1LimitRangeItemDefault{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1LimitRangeItemDefault is optional IoK8sAPICoreV1LimitRangeItemDefault.
type OptIoK8sAPICoreV1LimitRangeItemDefault struct {
	Value IoK8sAPICoreV1LimitRangeItemDefault
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1LimitRangeItemDefault was set.
func (o OptIoK8sAPICoreV1LimitRangeItemDefault) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1LimitRangeItemDefault) Reset() {
	var v IoK8sAPICoreV1LimitRangeItemDefault
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1LimitRangeItemDefault) SetTo(v IoK8sAPICoreV1LimitRangeItemDefault) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1LimitRangeItemDefault) Get() (v IoK8sAPICoreV1LimitRangeItemDefault, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1LimitRangeItemDefault) Or(d IoK8sAPICoreV1LimitRangeItemDefault) IoK8sAPICoreV1LimitRangeItemDefault {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1LimitRangeItemDefaultRequest returns new OptIoK8sAPICoreV1LimitRangeItemDefaultRequest with value set to v.
func NewOptIoK8sAPICoreV1LimitRangeItemDefaultRequest(v IoK8sAPICoreV1LimitRangeItemDefaultRequest) OptIoK8sAPICoreV1LimitRangeItemDefaultRequest {
	return OptIoK8sAPICoreV1LimitRangeItemDefaultRequest{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1LimitRangeItemDefaultRequest is optional IoK8sAPICoreV1LimitRangeItemDefaultRequest.
type OptIoK8sAPICoreV1LimitRangeItemDefaultRequest struct {
	Value IoK8sAPICoreV1LimitRangeItemDefaultRequest
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1LimitRangeItemDefaultRequest was set.
func (o OptIoK8sAPICoreV1LimitRangeItemDefaultRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1LimitRangeItemDefaultRequest) Reset() {
	var v IoK8sAPICoreV1LimitRangeItemDefaultRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1LimitRangeItemDefaultRequest) SetTo(v IoK8sAPICoreV1LimitRangeItemDefaultRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1LimitRangeItemDefaultRequest) Get() (v IoK8sAPICoreV1LimitRangeItemDefaultRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1LimitRangeItemDefaultRequest) Or(d IoK8sAPICoreV1LimitRangeItemDefaultRequest) IoK8sAPICoreV1LimitRangeItemDefaultRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1LimitRangeItemMax returns new OptIoK8sAPICoreV1LimitRangeItemMax with value set to v.
func NewOptIoK8sAPICoreV1LimitRangeItemMax(v IoK8sAPICoreV1LimitRangeItemMax) OptIoK8sAPICoreV1LimitRangeItemMax {
	return OptIoK8sAPICoreV1LimitRangeItemMax{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1LimitRangeItemMax is optional IoK8sAPICoreV1LimitRangeItemMax.
type OptIoK8sAPICoreV1LimitRangeItemMax struct {
	Value IoK8sAPICoreV1LimitRangeItemMax
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1LimitRangeItemMax was set.
func (o OptIoK8sAPICoreV1LimitRangeItemMax) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1LimitRangeItemMax) Reset() {
	var v IoK8sAPICoreV1LimitRangeItemMax
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1LimitRangeItemMax) SetTo(v IoK8sAPICoreV1LimitRangeItemMax) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1LimitRangeItemMax) Get() (v IoK8sAPICoreV1LimitRangeItemMax, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1LimitRangeItemMax) Or(d IoK8sAPICoreV1LimitRangeItemMax) IoK8sAPICoreV1LimitRangeItemMax {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1LimitRangeItemMaxLimitRequestRatio returns new OptIoK8sAPICoreV1LimitRangeItemMaxLimitRequestRatio with value set to v.
func NewOptIoK8sAPICoreV1LimitRangeItemMaxLimitRequestRatio(v IoK8sAPICoreV1LimitRangeItemMaxLimitRequestRatio) OptIoK8sAPICoreV1LimitRangeItemMaxLimitRequestRatio {
	return OptIoK8sAPICoreV1LimitRangeItemMaxLimitRequestRatio{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1LimitRangeItemMaxLimitRequestRatio is optional IoK8sAPICoreV1LimitRangeItemMaxLimitRequestRatio.
type OptIoK8sAPICoreV1LimitRangeItemMaxLimitRequestRatio struct {
	Value IoK8sAPICoreV1LimitRangeItemMaxLimitRequestRatio
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1LimitRangeItemMaxLimitRequestRatio was set.
func (o OptIoK8sAPICoreV1LimitRangeItemMaxLimitRequestRatio) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1LimitRangeItemMaxLimitRequestRatio) Reset() {
	var v IoK8sAPICoreV1LimitRangeItemMaxLimitRequestRatio
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1LimitRangeItemMaxLimitRequestRatio) SetTo(v IoK8sAPICoreV1LimitRangeItemMaxLimitRequestRatio) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1LimitRangeItemMaxLimitRequestRatio) Get() (v IoK8sAPICoreV1LimitRangeItemMaxLimitRequestRatio, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1LimitRangeItemMaxLimitRequestRatio) Or(d IoK8sAPICoreV1LimitRangeItemMaxLimitRequestRatio) IoK8sAPICoreV1LimitRangeItemMaxLimitRequestRatio {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1LimitRangeItemMin returns new OptIoK8sAPICoreV1LimitRangeItemMin with value set to v.
func NewOptIoK8sAPICoreV1LimitRangeItemMin(v IoK8sAPICoreV1LimitRangeItemMin) OptIoK8sAPICoreV1LimitRangeItemMin {
	return OptIoK8sAPICoreV1LimitRangeItemMin{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1LimitRangeItemMin is optional IoK8sAPICoreV1LimitRangeItemMin.
type OptIoK8sAPICoreV1LimitRangeItemMin struct {
	Value IoK8sAPICoreV1LimitRangeItemMin
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1LimitRangeItemMin was set.
func (o OptIoK8sAPICoreV1LimitRangeItemMin) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1LimitRangeItemMin) Reset() {
	var v IoK8sAPICoreV1LimitRangeItemMin
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1LimitRangeItemMin) SetTo(v IoK8sAPICoreV1LimitRangeItemMin) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1LimitRangeItemMin) Get() (v IoK8sAPICoreV1LimitRangeItemMin, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1LimitRangeItemMin) Or(d IoK8sAPICoreV1LimitRangeItemMin) IoK8sAPICoreV1LimitRangeItemMin {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1LimitRangeSpec returns new OptIoK8sAPICoreV1LimitRangeSpec with value set to v.
func NewOptIoK8sAPICoreV1LimitRangeSpec(v IoK8sAPICoreV1LimitRangeSpec) OptIoK8sAPICoreV1LimitRangeSpec {
	return OptIoK8sAPICoreV1LimitRangeSpec{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1LimitRangeSpec is optional IoK8sAPICoreV1LimitRangeSpec.
type OptIoK8sAPICoreV1LimitRangeSpec struct {
	Value IoK8sAPICoreV1LimitRangeSpec
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1LimitRangeSpec was set.
func (o OptIoK8sAPICoreV1LimitRangeSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1LimitRangeSpec) Reset() {
	var v IoK8sAPICoreV1LimitRangeSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1LimitRangeSpec) SetTo(v IoK8sAPICoreV1LimitRangeSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1LimitRangeSpec) Get() (v IoK8sAPICoreV1LimitRangeSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1LimitRangeSpec) Or(d IoK8sAPICoreV1LimitRangeSpec) IoK8sAPICoreV1LimitRangeSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1LoadBalancerStatus returns new OptIoK8sAPICoreV1LoadBalancerStatus with value set to v.
func NewOptIoK8sAPICoreV1LoadBalancerStatus(v IoK8sAPICoreV1LoadBalancerStatus) OptIoK8sAPICoreV1LoadBalancerStatus {
	return OptIoK8sAPICoreV1LoadBalancerStatus{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1LoadBalancerStatus is optional IoK8sAPICoreV1LoadBalancerStatus.
type OptIoK8sAPICoreV1LoadBalancerStatus struct {
	Value IoK8sAPICoreV1LoadBalancerStatus
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1LoadBalancerStatus was set.
func (o OptIoK8sAPICoreV1LoadBalancerStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1LoadBalancerStatus) Reset() {
	var v IoK8sAPICoreV1LoadBalancerStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1LoadBalancerStatus) SetTo(v IoK8sAPICoreV1LoadBalancerStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1LoadBalancerStatus) Get() (v IoK8sAPICoreV1LoadBalancerStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1LoadBalancerStatus) Or(d IoK8sAPICoreV1LoadBalancerStatus) IoK8sAPICoreV1LoadBalancerStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1LocalObjectReference returns new OptIoK8sAPICoreV1LocalObjectReference with value set to v.
func NewOptIoK8sAPICoreV1LocalObjectReference(v IoK8sAPICoreV1LocalObjectReference) OptIoK8sAPICoreV1LocalObjectReference {
	return OptIoK8sAPICoreV1LocalObjectReference{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1LocalObjectReference is optional IoK8sAPICoreV1LocalObjectReference.
type OptIoK8sAPICoreV1LocalObjectReference struct {
	Value IoK8sAPICoreV1LocalObjectReference
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1LocalObjectReference was set.
func (o OptIoK8sAPICoreV1LocalObjectReference) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1LocalObjectReference) Reset() {
	var v IoK8sAPICoreV1LocalObjectReference
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1LocalObjectReference) SetTo(v IoK8sAPICoreV1LocalObjectReference) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1LocalObjectReference) Get() (v IoK8sAPICoreV1LocalObjectReference, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1LocalObjectReference) Or(d IoK8sAPICoreV1LocalObjectReference) IoK8sAPICoreV1LocalObjectReference {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1LocalVolumeSource returns new OptIoK8sAPICoreV1LocalVolumeSource with value set to v.
func NewOptIoK8sAPICoreV1LocalVolumeSource(v IoK8sAPICoreV1LocalVolumeSource) OptIoK8sAPICoreV1LocalVolumeSource {
	return OptIoK8sAPICoreV1LocalVolumeSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1LocalVolumeSource is optional IoK8sAPICoreV1LocalVolumeSource.
type OptIoK8sAPICoreV1LocalVolumeSource struct {
	Value IoK8sAPICoreV1LocalVolumeSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1LocalVolumeSource was set.
func (o OptIoK8sAPICoreV1LocalVolumeSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1LocalVolumeSource) Reset() {
	var v IoK8sAPICoreV1LocalVolumeSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1LocalVolumeSource) SetTo(v IoK8sAPICoreV1LocalVolumeSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1LocalVolumeSource) Get() (v IoK8sAPICoreV1LocalVolumeSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1LocalVolumeSource) Or(d IoK8sAPICoreV1LocalVolumeSource) IoK8sAPICoreV1LocalVolumeSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1NFSVolumeSource returns new OptIoK8sAPICoreV1NFSVolumeSource with value set to v.
func NewOptIoK8sAPICoreV1NFSVolumeSource(v IoK8sAPICoreV1NFSVolumeSource) OptIoK8sAPICoreV1NFSVolumeSource {
	return OptIoK8sAPICoreV1NFSVolumeSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1NFSVolumeSource is optional IoK8sAPICoreV1NFSVolumeSource.
type OptIoK8sAPICoreV1NFSVolumeSource struct {
	Value IoK8sAPICoreV1NFSVolumeSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1NFSVolumeSource was set.
func (o OptIoK8sAPICoreV1NFSVolumeSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1NFSVolumeSource) Reset() {
	var v IoK8sAPICoreV1NFSVolumeSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1NFSVolumeSource) SetTo(v IoK8sAPICoreV1NFSVolumeSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1NFSVolumeSource) Get() (v IoK8sAPICoreV1NFSVolumeSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1NFSVolumeSource) Or(d IoK8sAPICoreV1NFSVolumeSource) IoK8sAPICoreV1NFSVolumeSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1NamespaceSpec returns new OptIoK8sAPICoreV1NamespaceSpec with value set to v.
func NewOptIoK8sAPICoreV1NamespaceSpec(v IoK8sAPICoreV1NamespaceSpec) OptIoK8sAPICoreV1NamespaceSpec {
	return OptIoK8sAPICoreV1NamespaceSpec{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1NamespaceSpec is optional IoK8sAPICoreV1NamespaceSpec.
type OptIoK8sAPICoreV1NamespaceSpec struct {
	Value IoK8sAPICoreV1NamespaceSpec
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1NamespaceSpec was set.
func (o OptIoK8sAPICoreV1NamespaceSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1NamespaceSpec) Reset() {
	var v IoK8sAPICoreV1NamespaceSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1NamespaceSpec) SetTo(v IoK8sAPICoreV1NamespaceSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1NamespaceSpec) Get() (v IoK8sAPICoreV1NamespaceSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1NamespaceSpec) Or(d IoK8sAPICoreV1NamespaceSpec) IoK8sAPICoreV1NamespaceSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1NamespaceStatus returns new OptIoK8sAPICoreV1NamespaceStatus with value set to v.
func NewOptIoK8sAPICoreV1NamespaceStatus(v IoK8sAPICoreV1NamespaceStatus) OptIoK8sAPICoreV1NamespaceStatus {
	return OptIoK8sAPICoreV1NamespaceStatus{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1NamespaceStatus is optional IoK8sAPICoreV1NamespaceStatus.
type OptIoK8sAPICoreV1NamespaceStatus struct {
	Value IoK8sAPICoreV1NamespaceStatus
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1NamespaceStatus was set.
func (o OptIoK8sAPICoreV1NamespaceStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1NamespaceStatus) Reset() {
	var v IoK8sAPICoreV1NamespaceStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1NamespaceStatus) SetTo(v IoK8sAPICoreV1NamespaceStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1NamespaceStatus) Get() (v IoK8sAPICoreV1NamespaceStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1NamespaceStatus) Or(d IoK8sAPICoreV1NamespaceStatus) IoK8sAPICoreV1NamespaceStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1NodeAffinity returns new OptIoK8sAPICoreV1NodeAffinity with value set to v.
func NewOptIoK8sAPICoreV1NodeAffinity(v IoK8sAPICoreV1NodeAffinity) OptIoK8sAPICoreV1NodeAffinity {
	return OptIoK8sAPICoreV1NodeAffinity{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1NodeAffinity is optional IoK8sAPICoreV1NodeAffinity.
type OptIoK8sAPICoreV1NodeAffinity struct {
	Value IoK8sAPICoreV1NodeAffinity
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1NodeAffinity was set.
func (o OptIoK8sAPICoreV1NodeAffinity) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1NodeAffinity) Reset() {
	var v IoK8sAPICoreV1NodeAffinity
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1NodeAffinity) SetTo(v IoK8sAPICoreV1NodeAffinity) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1NodeAffinity) Get() (v IoK8sAPICoreV1NodeAffinity, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1NodeAffinity) Or(d IoK8sAPICoreV1NodeAffinity) IoK8sAPICoreV1NodeAffinity {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1NodeConfigSource returns new OptIoK8sAPICoreV1NodeConfigSource with value set to v.
func NewOptIoK8sAPICoreV1NodeConfigSource(v IoK8sAPICoreV1NodeConfigSource) OptIoK8sAPICoreV1NodeConfigSource {
	return OptIoK8sAPICoreV1NodeConfigSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1NodeConfigSource is optional IoK8sAPICoreV1NodeConfigSource.
type OptIoK8sAPICoreV1NodeConfigSource struct {
	Value IoK8sAPICoreV1NodeConfigSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1NodeConfigSource was set.
func (o OptIoK8sAPICoreV1NodeConfigSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1NodeConfigSource) Reset() {
	var v IoK8sAPICoreV1NodeConfigSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1NodeConfigSource) SetTo(v IoK8sAPICoreV1NodeConfigSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1NodeConfigSource) Get() (v IoK8sAPICoreV1NodeConfigSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1NodeConfigSource) Or(d IoK8sAPICoreV1NodeConfigSource) IoK8sAPICoreV1NodeConfigSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1NodeConfigStatus returns new OptIoK8sAPICoreV1NodeConfigStatus with value set to v.
func NewOptIoK8sAPICoreV1NodeConfigStatus(v IoK8sAPICoreV1NodeConfigStatus) OptIoK8sAPICoreV1NodeConfigStatus {
	return OptIoK8sAPICoreV1NodeConfigStatus{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1NodeConfigStatus is optional IoK8sAPICoreV1NodeConfigStatus.
type OptIoK8sAPICoreV1NodeConfigStatus struct {
	Value IoK8sAPICoreV1NodeConfigStatus
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1NodeConfigStatus was set.
func (o OptIoK8sAPICoreV1NodeConfigStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1NodeConfigStatus) Reset() {
	var v IoK8sAPICoreV1NodeConfigStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1NodeConfigStatus) SetTo(v IoK8sAPICoreV1NodeConfigStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1NodeConfigStatus) Get() (v IoK8sAPICoreV1NodeConfigStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1NodeConfigStatus) Or(d IoK8sAPICoreV1NodeConfigStatus) IoK8sAPICoreV1NodeConfigStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1NodeDaemonEndpoints returns new OptIoK8sAPICoreV1NodeDaemonEndpoints with value set to v.
func NewOptIoK8sAPICoreV1NodeDaemonEndpoints(v IoK8sAPICoreV1NodeDaemonEndpoints) OptIoK8sAPICoreV1NodeDaemonEndpoints {
	return OptIoK8sAPICoreV1NodeDaemonEndpoints{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1NodeDaemonEndpoints is optional IoK8sAPICoreV1NodeDaemonEndpoints.
type OptIoK8sAPICoreV1NodeDaemonEndpoints struct {
	Value IoK8sAPICoreV1NodeDaemonEndpoints
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1NodeDaemonEndpoints was set.
func (o OptIoK8sAPICoreV1NodeDaemonEndpoints) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1NodeDaemonEndpoints) Reset() {
	var v IoK8sAPICoreV1NodeDaemonEndpoints
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1NodeDaemonEndpoints) SetTo(v IoK8sAPICoreV1NodeDaemonEndpoints) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1NodeDaemonEndpoints) Get() (v IoK8sAPICoreV1NodeDaemonEndpoints, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1NodeDaemonEndpoints) Or(d IoK8sAPICoreV1NodeDaemonEndpoints) IoK8sAPICoreV1NodeDaemonEndpoints {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1NodeSelector returns new OptIoK8sAPICoreV1NodeSelector with value set to v.
func NewOptIoK8sAPICoreV1NodeSelector(v IoK8sAPICoreV1NodeSelector) OptIoK8sAPICoreV1NodeSelector {
	return OptIoK8sAPICoreV1NodeSelector{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1NodeSelector is optional IoK8sAPICoreV1NodeSelector.
type OptIoK8sAPICoreV1NodeSelector struct {
	Value IoK8sAPICoreV1NodeSelector
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1NodeSelector was set.
func (o OptIoK8sAPICoreV1NodeSelector) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1NodeSelector) Reset() {
	var v IoK8sAPICoreV1NodeSelector
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1NodeSelector) SetTo(v IoK8sAPICoreV1NodeSelector) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1NodeSelector) Get() (v IoK8sAPICoreV1NodeSelector, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1NodeSelector) Or(d IoK8sAPICoreV1NodeSelector) IoK8sAPICoreV1NodeSelector {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1NodeSpec returns new OptIoK8sAPICoreV1NodeSpec with value set to v.
func NewOptIoK8sAPICoreV1NodeSpec(v IoK8sAPICoreV1NodeSpec) OptIoK8sAPICoreV1NodeSpec {
	return OptIoK8sAPICoreV1NodeSpec{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1NodeSpec is optional IoK8sAPICoreV1NodeSpec.
type OptIoK8sAPICoreV1NodeSpec struct {
	Value IoK8sAPICoreV1NodeSpec
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1NodeSpec was set.
func (o OptIoK8sAPICoreV1NodeSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1NodeSpec) Reset() {
	var v IoK8sAPICoreV1NodeSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1NodeSpec) SetTo(v IoK8sAPICoreV1NodeSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1NodeSpec) Get() (v IoK8sAPICoreV1NodeSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1NodeSpec) Or(d IoK8sAPICoreV1NodeSpec) IoK8sAPICoreV1NodeSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1NodeStatus returns new OptIoK8sAPICoreV1NodeStatus with value set to v.
func NewOptIoK8sAPICoreV1NodeStatus(v IoK8sAPICoreV1NodeStatus) OptIoK8sAPICoreV1NodeStatus {
	return OptIoK8sAPICoreV1NodeStatus{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1NodeStatus is optional IoK8sAPICoreV1NodeStatus.
type OptIoK8sAPICoreV1NodeStatus struct {
	Value IoK8sAPICoreV1NodeStatus
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1NodeStatus was set.
func (o OptIoK8sAPICoreV1NodeStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1NodeStatus) Reset() {
	var v IoK8sAPICoreV1NodeStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1NodeStatus) SetTo(v IoK8sAPICoreV1NodeStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1NodeStatus) Get() (v IoK8sAPICoreV1NodeStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1NodeStatus) Or(d IoK8sAPICoreV1NodeStatus) IoK8sAPICoreV1NodeStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1NodeStatusAllocatable returns new OptIoK8sAPICoreV1NodeStatusAllocatable with value set to v.
func NewOptIoK8sAPICoreV1NodeStatusAllocatable(v IoK8sAPICoreV1NodeStatusAllocatable) OptIoK8sAPICoreV1NodeStatusAllocatable {
	return OptIoK8sAPICoreV1NodeStatusAllocatable{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1NodeStatusAllocatable is optional IoK8sAPICoreV1NodeStatusAllocatable.
type OptIoK8sAPICoreV1NodeStatusAllocatable struct {
	Value IoK8sAPICoreV1NodeStatusAllocatable
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1NodeStatusAllocatable was set.
func (o OptIoK8sAPICoreV1NodeStatusAllocatable) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1NodeStatusAllocatable) Reset() {
	var v IoK8sAPICoreV1NodeStatusAllocatable
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1NodeStatusAllocatable) SetTo(v IoK8sAPICoreV1NodeStatusAllocatable) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1NodeStatusAllocatable) Get() (v IoK8sAPICoreV1NodeStatusAllocatable, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1NodeStatusAllocatable) Or(d IoK8sAPICoreV1NodeStatusAllocatable) IoK8sAPICoreV1NodeStatusAllocatable {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1NodeStatusCapacity returns new OptIoK8sAPICoreV1NodeStatusCapacity with value set to v.
func NewOptIoK8sAPICoreV1NodeStatusCapacity(v IoK8sAPICoreV1NodeStatusCapacity) OptIoK8sAPICoreV1NodeStatusCapacity {
	return OptIoK8sAPICoreV1NodeStatusCapacity{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1NodeStatusCapacity is optional IoK8sAPICoreV1NodeStatusCapacity.
type OptIoK8sAPICoreV1NodeStatusCapacity struct {
	Value IoK8sAPICoreV1NodeStatusCapacity
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1NodeStatusCapacity was set.
func (o OptIoK8sAPICoreV1NodeStatusCapacity) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1NodeStatusCapacity) Reset() {
	var v IoK8sAPICoreV1NodeStatusCapacity
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1NodeStatusCapacity) SetTo(v IoK8sAPICoreV1NodeStatusCapacity) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1NodeStatusCapacity) Get() (v IoK8sAPICoreV1NodeStatusCapacity, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1NodeStatusCapacity) Or(d IoK8sAPICoreV1NodeStatusCapacity) IoK8sAPICoreV1NodeStatusCapacity {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1NodeSystemInfo returns new OptIoK8sAPICoreV1NodeSystemInfo with value set to v.
func NewOptIoK8sAPICoreV1NodeSystemInfo(v IoK8sAPICoreV1NodeSystemInfo) OptIoK8sAPICoreV1NodeSystemInfo {
	return OptIoK8sAPICoreV1NodeSystemInfo{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1NodeSystemInfo is optional IoK8sAPICoreV1NodeSystemInfo.
type OptIoK8sAPICoreV1NodeSystemInfo struct {
	Value IoK8sAPICoreV1NodeSystemInfo
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1NodeSystemInfo was set.
func (o OptIoK8sAPICoreV1NodeSystemInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1NodeSystemInfo) Reset() {
	var v IoK8sAPICoreV1NodeSystemInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1NodeSystemInfo) SetTo(v IoK8sAPICoreV1NodeSystemInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1NodeSystemInfo) Get() (v IoK8sAPICoreV1NodeSystemInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1NodeSystemInfo) Or(d IoK8sAPICoreV1NodeSystemInfo) IoK8sAPICoreV1NodeSystemInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1ObjectFieldSelector returns new OptIoK8sAPICoreV1ObjectFieldSelector with value set to v.
func NewOptIoK8sAPICoreV1ObjectFieldSelector(v IoK8sAPICoreV1ObjectFieldSelector) OptIoK8sAPICoreV1ObjectFieldSelector {
	return OptIoK8sAPICoreV1ObjectFieldSelector{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1ObjectFieldSelector is optional IoK8sAPICoreV1ObjectFieldSelector.
type OptIoK8sAPICoreV1ObjectFieldSelector struct {
	Value IoK8sAPICoreV1ObjectFieldSelector
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1ObjectFieldSelector was set.
func (o OptIoK8sAPICoreV1ObjectFieldSelector) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1ObjectFieldSelector) Reset() {
	var v IoK8sAPICoreV1ObjectFieldSelector
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1ObjectFieldSelector) SetTo(v IoK8sAPICoreV1ObjectFieldSelector) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1ObjectFieldSelector) Get() (v IoK8sAPICoreV1ObjectFieldSelector, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1ObjectFieldSelector) Or(d IoK8sAPICoreV1ObjectFieldSelector) IoK8sAPICoreV1ObjectFieldSelector {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1ObjectReference returns new OptIoK8sAPICoreV1ObjectReference with value set to v.
func NewOptIoK8sAPICoreV1ObjectReference(v IoK8sAPICoreV1ObjectReference) OptIoK8sAPICoreV1ObjectReference {
	return OptIoK8sAPICoreV1ObjectReference{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1ObjectReference is optional IoK8sAPICoreV1ObjectReference.
type OptIoK8sAPICoreV1ObjectReference struct {
	Value IoK8sAPICoreV1ObjectReference
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1ObjectReference was set.
func (o OptIoK8sAPICoreV1ObjectReference) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1ObjectReference) Reset() {
	var v IoK8sAPICoreV1ObjectReference
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1ObjectReference) SetTo(v IoK8sAPICoreV1ObjectReference) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1ObjectReference) Get() (v IoK8sAPICoreV1ObjectReference, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1ObjectReference) Or(d IoK8sAPICoreV1ObjectReference) IoK8sAPICoreV1ObjectReference {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1PersistentVolumeClaimSpec returns new OptIoK8sAPICoreV1PersistentVolumeClaimSpec with value set to v.
func NewOptIoK8sAPICoreV1PersistentVolumeClaimSpec(v IoK8sAPICoreV1PersistentVolumeClaimSpec) OptIoK8sAPICoreV1PersistentVolumeClaimSpec {
	return OptIoK8sAPICoreV1PersistentVolumeClaimSpec{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1PersistentVolumeClaimSpec is optional IoK8sAPICoreV1PersistentVolumeClaimSpec.
type OptIoK8sAPICoreV1PersistentVolumeClaimSpec struct {
	Value IoK8sAPICoreV1PersistentVolumeClaimSpec
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1PersistentVolumeClaimSpec was set.
func (o OptIoK8sAPICoreV1PersistentVolumeClaimSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1PersistentVolumeClaimSpec) Reset() {
	var v IoK8sAPICoreV1PersistentVolumeClaimSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1PersistentVolumeClaimSpec) SetTo(v IoK8sAPICoreV1PersistentVolumeClaimSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1PersistentVolumeClaimSpec) Get() (v IoK8sAPICoreV1PersistentVolumeClaimSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1PersistentVolumeClaimSpec) Or(d IoK8sAPICoreV1PersistentVolumeClaimSpec) IoK8sAPICoreV1PersistentVolumeClaimSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1PersistentVolumeClaimStatus returns new OptIoK8sAPICoreV1PersistentVolumeClaimStatus with value set to v.
func NewOptIoK8sAPICoreV1PersistentVolumeClaimStatus(v IoK8sAPICoreV1PersistentVolumeClaimStatus) OptIoK8sAPICoreV1PersistentVolumeClaimStatus {
	return OptIoK8sAPICoreV1PersistentVolumeClaimStatus{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1PersistentVolumeClaimStatus is optional IoK8sAPICoreV1PersistentVolumeClaimStatus.
type OptIoK8sAPICoreV1PersistentVolumeClaimStatus struct {
	Value IoK8sAPICoreV1PersistentVolumeClaimStatus
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1PersistentVolumeClaimStatus was set.
func (o OptIoK8sAPICoreV1PersistentVolumeClaimStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1PersistentVolumeClaimStatus) Reset() {
	var v IoK8sAPICoreV1PersistentVolumeClaimStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1PersistentVolumeClaimStatus) SetTo(v IoK8sAPICoreV1PersistentVolumeClaimStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1PersistentVolumeClaimStatus) Get() (v IoK8sAPICoreV1PersistentVolumeClaimStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1PersistentVolumeClaimStatus) Or(d IoK8sAPICoreV1PersistentVolumeClaimStatus) IoK8sAPICoreV1PersistentVolumeClaimStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1PersistentVolumeClaimStatusCapacity returns new OptIoK8sAPICoreV1PersistentVolumeClaimStatusCapacity with value set to v.
func NewOptIoK8sAPICoreV1PersistentVolumeClaimStatusCapacity(v IoK8sAPICoreV1PersistentVolumeClaimStatusCapacity) OptIoK8sAPICoreV1PersistentVolumeClaimStatusCapacity {
	return OptIoK8sAPICoreV1PersistentVolumeClaimStatusCapacity{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1PersistentVolumeClaimStatusCapacity is optional IoK8sAPICoreV1PersistentVolumeClaimStatusCapacity.
type OptIoK8sAPICoreV1PersistentVolumeClaimStatusCapacity struct {
	Value IoK8sAPICoreV1PersistentVolumeClaimStatusCapacity
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1PersistentVolumeClaimStatusCapacity was set.
func (o OptIoK8sAPICoreV1PersistentVolumeClaimStatusCapacity) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1PersistentVolumeClaimStatusCapacity) Reset() {
	var v IoK8sAPICoreV1PersistentVolumeClaimStatusCapacity
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1PersistentVolumeClaimStatusCapacity) SetTo(v IoK8sAPICoreV1PersistentVolumeClaimStatusCapacity) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1PersistentVolumeClaimStatusCapacity) Get() (v IoK8sAPICoreV1PersistentVolumeClaimStatusCapacity, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1PersistentVolumeClaimStatusCapacity) Or(d IoK8sAPICoreV1PersistentVolumeClaimStatusCapacity) IoK8sAPICoreV1PersistentVolumeClaimStatusCapacity {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1PersistentVolumeClaimTemplate returns new OptIoK8sAPICoreV1PersistentVolumeClaimTemplate with value set to v.
func NewOptIoK8sAPICoreV1PersistentVolumeClaimTemplate(v IoK8sAPICoreV1PersistentVolumeClaimTemplate) OptIoK8sAPICoreV1PersistentVolumeClaimTemplate {
	return OptIoK8sAPICoreV1PersistentVolumeClaimTemplate{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1PersistentVolumeClaimTemplate is optional IoK8sAPICoreV1PersistentVolumeClaimTemplate.
type OptIoK8sAPICoreV1PersistentVolumeClaimTemplate struct {
	Value IoK8sAPICoreV1PersistentVolumeClaimTemplate
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1PersistentVolumeClaimTemplate was set.
func (o OptIoK8sAPICoreV1PersistentVolumeClaimTemplate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1PersistentVolumeClaimTemplate) Reset() {
	var v IoK8sAPICoreV1PersistentVolumeClaimTemplate
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1PersistentVolumeClaimTemplate) SetTo(v IoK8sAPICoreV1PersistentVolumeClaimTemplate) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1PersistentVolumeClaimTemplate) Get() (v IoK8sAPICoreV1PersistentVolumeClaimTemplate, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1PersistentVolumeClaimTemplate) Or(d IoK8sAPICoreV1PersistentVolumeClaimTemplate) IoK8sAPICoreV1PersistentVolumeClaimTemplate {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1PersistentVolumeClaimVolumeSource returns new OptIoK8sAPICoreV1PersistentVolumeClaimVolumeSource with value set to v.
func NewOptIoK8sAPICoreV1PersistentVolumeClaimVolumeSource(v IoK8sAPICoreV1PersistentVolumeClaimVolumeSource) OptIoK8sAPICoreV1PersistentVolumeClaimVolumeSource {
	return OptIoK8sAPICoreV1PersistentVolumeClaimVolumeSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1PersistentVolumeClaimVolumeSource is optional IoK8sAPICoreV1PersistentVolumeClaimVolumeSource.
type OptIoK8sAPICoreV1PersistentVolumeClaimVolumeSource struct {
	Value IoK8sAPICoreV1PersistentVolumeClaimVolumeSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1PersistentVolumeClaimVolumeSource was set.
func (o OptIoK8sAPICoreV1PersistentVolumeClaimVolumeSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1PersistentVolumeClaimVolumeSource) Reset() {
	var v IoK8sAPICoreV1PersistentVolumeClaimVolumeSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1PersistentVolumeClaimVolumeSource) SetTo(v IoK8sAPICoreV1PersistentVolumeClaimVolumeSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1PersistentVolumeClaimVolumeSource) Get() (v IoK8sAPICoreV1PersistentVolumeClaimVolumeSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1PersistentVolumeClaimVolumeSource) Or(d IoK8sAPICoreV1PersistentVolumeClaimVolumeSource) IoK8sAPICoreV1PersistentVolumeClaimVolumeSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1PersistentVolumeSpec returns new OptIoK8sAPICoreV1PersistentVolumeSpec with value set to v.
func NewOptIoK8sAPICoreV1PersistentVolumeSpec(v IoK8sAPICoreV1PersistentVolumeSpec) OptIoK8sAPICoreV1PersistentVolumeSpec {
	return OptIoK8sAPICoreV1PersistentVolumeSpec{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1PersistentVolumeSpec is optional IoK8sAPICoreV1PersistentVolumeSpec.
type OptIoK8sAPICoreV1PersistentVolumeSpec struct {
	Value IoK8sAPICoreV1PersistentVolumeSpec
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1PersistentVolumeSpec was set.
func (o OptIoK8sAPICoreV1PersistentVolumeSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1PersistentVolumeSpec) Reset() {
	var v IoK8sAPICoreV1PersistentVolumeSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1PersistentVolumeSpec) SetTo(v IoK8sAPICoreV1PersistentVolumeSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1PersistentVolumeSpec) Get() (v IoK8sAPICoreV1PersistentVolumeSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1PersistentVolumeSpec) Or(d IoK8sAPICoreV1PersistentVolumeSpec) IoK8sAPICoreV1PersistentVolumeSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1PersistentVolumeSpecCapacity returns new OptIoK8sAPICoreV1PersistentVolumeSpecCapacity with value set to v.
func NewOptIoK8sAPICoreV1PersistentVolumeSpecCapacity(v IoK8sAPICoreV1PersistentVolumeSpecCapacity) OptIoK8sAPICoreV1PersistentVolumeSpecCapacity {
	return OptIoK8sAPICoreV1PersistentVolumeSpecCapacity{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1PersistentVolumeSpecCapacity is optional IoK8sAPICoreV1PersistentVolumeSpecCapacity.
type OptIoK8sAPICoreV1PersistentVolumeSpecCapacity struct {
	Value IoK8sAPICoreV1PersistentVolumeSpecCapacity
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1PersistentVolumeSpecCapacity was set.
func (o OptIoK8sAPICoreV1PersistentVolumeSpecCapacity) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1PersistentVolumeSpecCapacity) Reset() {
	var v IoK8sAPICoreV1PersistentVolumeSpecCapacity
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1PersistentVolumeSpecCapacity) SetTo(v IoK8sAPICoreV1PersistentVolumeSpecCapacity) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1PersistentVolumeSpecCapacity) Get() (v IoK8sAPICoreV1PersistentVolumeSpecCapacity, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1PersistentVolumeSpecCapacity) Or(d IoK8sAPICoreV1PersistentVolumeSpecCapacity) IoK8sAPICoreV1PersistentVolumeSpecCapacity {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1PersistentVolumeStatus returns new OptIoK8sAPICoreV1PersistentVolumeStatus with value set to v.
func NewOptIoK8sAPICoreV1PersistentVolumeStatus(v IoK8sAPICoreV1PersistentVolumeStatus) OptIoK8sAPICoreV1PersistentVolumeStatus {
	return OptIoK8sAPICoreV1PersistentVolumeStatus{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1PersistentVolumeStatus is optional IoK8sAPICoreV1PersistentVolumeStatus.
type OptIoK8sAPICoreV1PersistentVolumeStatus struct {
	Value IoK8sAPICoreV1PersistentVolumeStatus
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1PersistentVolumeStatus was set.
func (o OptIoK8sAPICoreV1PersistentVolumeStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1PersistentVolumeStatus) Reset() {
	var v IoK8sAPICoreV1PersistentVolumeStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1PersistentVolumeStatus) SetTo(v IoK8sAPICoreV1PersistentVolumeStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1PersistentVolumeStatus) Get() (v IoK8sAPICoreV1PersistentVolumeStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1PersistentVolumeStatus) Or(d IoK8sAPICoreV1PersistentVolumeStatus) IoK8sAPICoreV1PersistentVolumeStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1PhotonPersistentDiskVolumeSource returns new OptIoK8sAPICoreV1PhotonPersistentDiskVolumeSource with value set to v.
func NewOptIoK8sAPICoreV1PhotonPersistentDiskVolumeSource(v IoK8sAPICoreV1PhotonPersistentDiskVolumeSource) OptIoK8sAPICoreV1PhotonPersistentDiskVolumeSource {
	return OptIoK8sAPICoreV1PhotonPersistentDiskVolumeSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1PhotonPersistentDiskVolumeSource is optional IoK8sAPICoreV1PhotonPersistentDiskVolumeSource.
type OptIoK8sAPICoreV1PhotonPersistentDiskVolumeSource struct {
	Value IoK8sAPICoreV1PhotonPersistentDiskVolumeSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1PhotonPersistentDiskVolumeSource was set.
func (o OptIoK8sAPICoreV1PhotonPersistentDiskVolumeSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1PhotonPersistentDiskVolumeSource) Reset() {
	var v IoK8sAPICoreV1PhotonPersistentDiskVolumeSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1PhotonPersistentDiskVolumeSource) SetTo(v IoK8sAPICoreV1PhotonPersistentDiskVolumeSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1PhotonPersistentDiskVolumeSource) Get() (v IoK8sAPICoreV1PhotonPersistentDiskVolumeSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1PhotonPersistentDiskVolumeSource) Or(d IoK8sAPICoreV1PhotonPersistentDiskVolumeSource) IoK8sAPICoreV1PhotonPersistentDiskVolumeSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1PodAffinity returns new OptIoK8sAPICoreV1PodAffinity with value set to v.
func NewOptIoK8sAPICoreV1PodAffinity(v IoK8sAPICoreV1PodAffinity) OptIoK8sAPICoreV1PodAffinity {
	return OptIoK8sAPICoreV1PodAffinity{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1PodAffinity is optional IoK8sAPICoreV1PodAffinity.
type OptIoK8sAPICoreV1PodAffinity struct {
	Value IoK8sAPICoreV1PodAffinity
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1PodAffinity was set.
func (o OptIoK8sAPICoreV1PodAffinity) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1PodAffinity) Reset() {
	var v IoK8sAPICoreV1PodAffinity
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1PodAffinity) SetTo(v IoK8sAPICoreV1PodAffinity) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1PodAffinity) Get() (v IoK8sAPICoreV1PodAffinity, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1PodAffinity) Or(d IoK8sAPICoreV1PodAffinity) IoK8sAPICoreV1PodAffinity {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1PodAntiAffinity returns new OptIoK8sAPICoreV1PodAntiAffinity with value set to v.
func NewOptIoK8sAPICoreV1PodAntiAffinity(v IoK8sAPICoreV1PodAntiAffinity) OptIoK8sAPICoreV1PodAntiAffinity {
	return OptIoK8sAPICoreV1PodAntiAffinity{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1PodAntiAffinity is optional IoK8sAPICoreV1PodAntiAffinity.
type OptIoK8sAPICoreV1PodAntiAffinity struct {
	Value IoK8sAPICoreV1PodAntiAffinity
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1PodAntiAffinity was set.
func (o OptIoK8sAPICoreV1PodAntiAffinity) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1PodAntiAffinity) Reset() {
	var v IoK8sAPICoreV1PodAntiAffinity
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1PodAntiAffinity) SetTo(v IoK8sAPICoreV1PodAntiAffinity) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1PodAntiAffinity) Get() (v IoK8sAPICoreV1PodAntiAffinity, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1PodAntiAffinity) Or(d IoK8sAPICoreV1PodAntiAffinity) IoK8sAPICoreV1PodAntiAffinity {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1PodDNSConfig returns new OptIoK8sAPICoreV1PodDNSConfig with value set to v.
func NewOptIoK8sAPICoreV1PodDNSConfig(v IoK8sAPICoreV1PodDNSConfig) OptIoK8sAPICoreV1PodDNSConfig {
	return OptIoK8sAPICoreV1PodDNSConfig{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1PodDNSConfig is optional IoK8sAPICoreV1PodDNSConfig.
type OptIoK8sAPICoreV1PodDNSConfig struct {
	Value IoK8sAPICoreV1PodDNSConfig
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1PodDNSConfig was set.
func (o OptIoK8sAPICoreV1PodDNSConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1PodDNSConfig) Reset() {
	var v IoK8sAPICoreV1PodDNSConfig
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1PodDNSConfig) SetTo(v IoK8sAPICoreV1PodDNSConfig) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1PodDNSConfig) Get() (v IoK8sAPICoreV1PodDNSConfig, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1PodDNSConfig) Or(d IoK8sAPICoreV1PodDNSConfig) IoK8sAPICoreV1PodDNSConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1PodSecurityContext returns new OptIoK8sAPICoreV1PodSecurityContext with value set to v.
func NewOptIoK8sAPICoreV1PodSecurityContext(v IoK8sAPICoreV1PodSecurityContext) OptIoK8sAPICoreV1PodSecurityContext {
	return OptIoK8sAPICoreV1PodSecurityContext{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1PodSecurityContext is optional IoK8sAPICoreV1PodSecurityContext.
type OptIoK8sAPICoreV1PodSecurityContext struct {
	Value IoK8sAPICoreV1PodSecurityContext
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1PodSecurityContext was set.
func (o OptIoK8sAPICoreV1PodSecurityContext) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1PodSecurityContext) Reset() {
	var v IoK8sAPICoreV1PodSecurityContext
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1PodSecurityContext) SetTo(v IoK8sAPICoreV1PodSecurityContext) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1PodSecurityContext) Get() (v IoK8sAPICoreV1PodSecurityContext, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1PodSecurityContext) Or(d IoK8sAPICoreV1PodSecurityContext) IoK8sAPICoreV1PodSecurityContext {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1PodSpec returns new OptIoK8sAPICoreV1PodSpec with value set to v.
func NewOptIoK8sAPICoreV1PodSpec(v IoK8sAPICoreV1PodSpec) OptIoK8sAPICoreV1PodSpec {
	return OptIoK8sAPICoreV1PodSpec{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1PodSpec is optional IoK8sAPICoreV1PodSpec.
type OptIoK8sAPICoreV1PodSpec struct {
	Value IoK8sAPICoreV1PodSpec
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1PodSpec was set.
func (o OptIoK8sAPICoreV1PodSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1PodSpec) Reset() {
	var v IoK8sAPICoreV1PodSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1PodSpec) SetTo(v IoK8sAPICoreV1PodSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1PodSpec) Get() (v IoK8sAPICoreV1PodSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1PodSpec) Or(d IoK8sAPICoreV1PodSpec) IoK8sAPICoreV1PodSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1PodSpecNodeSelector returns new OptIoK8sAPICoreV1PodSpecNodeSelector with value set to v.
func NewOptIoK8sAPICoreV1PodSpecNodeSelector(v IoK8sAPICoreV1PodSpecNodeSelector) OptIoK8sAPICoreV1PodSpecNodeSelector {
	return OptIoK8sAPICoreV1PodSpecNodeSelector{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1PodSpecNodeSelector is optional IoK8sAPICoreV1PodSpecNodeSelector.
type OptIoK8sAPICoreV1PodSpecNodeSelector struct {
	Value IoK8sAPICoreV1PodSpecNodeSelector
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1PodSpecNodeSelector was set.
func (o OptIoK8sAPICoreV1PodSpecNodeSelector) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1PodSpecNodeSelector) Reset() {
	var v IoK8sAPICoreV1PodSpecNodeSelector
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1PodSpecNodeSelector) SetTo(v IoK8sAPICoreV1PodSpecNodeSelector) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1PodSpecNodeSelector) Get() (v IoK8sAPICoreV1PodSpecNodeSelector, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1PodSpecNodeSelector) Or(d IoK8sAPICoreV1PodSpecNodeSelector) IoK8sAPICoreV1PodSpecNodeSelector {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1PodSpecOverhead returns new OptIoK8sAPICoreV1PodSpecOverhead with value set to v.
func NewOptIoK8sAPICoreV1PodSpecOverhead(v IoK8sAPICoreV1PodSpecOverhead) OptIoK8sAPICoreV1PodSpecOverhead {
	return OptIoK8sAPICoreV1PodSpecOverhead{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1PodSpecOverhead is optional IoK8sAPICoreV1PodSpecOverhead.
type OptIoK8sAPICoreV1PodSpecOverhead struct {
	Value IoK8sAPICoreV1PodSpecOverhead
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1PodSpecOverhead was set.
func (o OptIoK8sAPICoreV1PodSpecOverhead) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1PodSpecOverhead) Reset() {
	var v IoK8sAPICoreV1PodSpecOverhead
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1PodSpecOverhead) SetTo(v IoK8sAPICoreV1PodSpecOverhead) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1PodSpecOverhead) Get() (v IoK8sAPICoreV1PodSpecOverhead, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1PodSpecOverhead) Or(d IoK8sAPICoreV1PodSpecOverhead) IoK8sAPICoreV1PodSpecOverhead {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1PodStatus returns new OptIoK8sAPICoreV1PodStatus with value set to v.
func NewOptIoK8sAPICoreV1PodStatus(v IoK8sAPICoreV1PodStatus) OptIoK8sAPICoreV1PodStatus {
	return OptIoK8sAPICoreV1PodStatus{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1PodStatus is optional IoK8sAPICoreV1PodStatus.
type OptIoK8sAPICoreV1PodStatus struct {
	Value IoK8sAPICoreV1PodStatus
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1PodStatus was set.
func (o OptIoK8sAPICoreV1PodStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1PodStatus) Reset() {
	var v IoK8sAPICoreV1PodStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1PodStatus) SetTo(v IoK8sAPICoreV1PodStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1PodStatus) Get() (v IoK8sAPICoreV1PodStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1PodStatus) Or(d IoK8sAPICoreV1PodStatus) IoK8sAPICoreV1PodStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1PodTemplateSpec returns new OptIoK8sAPICoreV1PodTemplateSpec with value set to v.
func NewOptIoK8sAPICoreV1PodTemplateSpec(v IoK8sAPICoreV1PodTemplateSpec) OptIoK8sAPICoreV1PodTemplateSpec {
	return OptIoK8sAPICoreV1PodTemplateSpec{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1PodTemplateSpec is optional IoK8sAPICoreV1PodTemplateSpec.
type OptIoK8sAPICoreV1PodTemplateSpec struct {
	Value IoK8sAPICoreV1PodTemplateSpec
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1PodTemplateSpec was set.
func (o OptIoK8sAPICoreV1PodTemplateSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1PodTemplateSpec) Reset() {
	var v IoK8sAPICoreV1PodTemplateSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1PodTemplateSpec) SetTo(v IoK8sAPICoreV1PodTemplateSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1PodTemplateSpec) Get() (v IoK8sAPICoreV1PodTemplateSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1PodTemplateSpec) Or(d IoK8sAPICoreV1PodTemplateSpec) IoK8sAPICoreV1PodTemplateSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1PortworxVolumeSource returns new OptIoK8sAPICoreV1PortworxVolumeSource with value set to v.
func NewOptIoK8sAPICoreV1PortworxVolumeSource(v IoK8sAPICoreV1PortworxVolumeSource) OptIoK8sAPICoreV1PortworxVolumeSource {
	return OptIoK8sAPICoreV1PortworxVolumeSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1PortworxVolumeSource is optional IoK8sAPICoreV1PortworxVolumeSource.
type OptIoK8sAPICoreV1PortworxVolumeSource struct {
	Value IoK8sAPICoreV1PortworxVolumeSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1PortworxVolumeSource was set.
func (o OptIoK8sAPICoreV1PortworxVolumeSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1PortworxVolumeSource) Reset() {
	var v IoK8sAPICoreV1PortworxVolumeSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1PortworxVolumeSource) SetTo(v IoK8sAPICoreV1PortworxVolumeSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1PortworxVolumeSource) Get() (v IoK8sAPICoreV1PortworxVolumeSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1PortworxVolumeSource) Or(d IoK8sAPICoreV1PortworxVolumeSource) IoK8sAPICoreV1PortworxVolumeSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1Probe returns new OptIoK8sAPICoreV1Probe with value set to v.
func NewOptIoK8sAPICoreV1Probe(v IoK8sAPICoreV1Probe) OptIoK8sAPICoreV1Probe {
	return OptIoK8sAPICoreV1Probe{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1Probe is optional IoK8sAPICoreV1Probe.
type OptIoK8sAPICoreV1Probe struct {
	Value IoK8sAPICoreV1Probe
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1Probe was set.
func (o OptIoK8sAPICoreV1Probe) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1Probe) Reset() {
	var v IoK8sAPICoreV1Probe
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1Probe) SetTo(v IoK8sAPICoreV1Probe) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1Probe) Get() (v IoK8sAPICoreV1Probe, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1Probe) Or(d IoK8sAPICoreV1Probe) IoK8sAPICoreV1Probe {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1ProjectedVolumeSource returns new OptIoK8sAPICoreV1ProjectedVolumeSource with value set to v.
func NewOptIoK8sAPICoreV1ProjectedVolumeSource(v IoK8sAPICoreV1ProjectedVolumeSource) OptIoK8sAPICoreV1ProjectedVolumeSource {
	return OptIoK8sAPICoreV1ProjectedVolumeSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1ProjectedVolumeSource is optional IoK8sAPICoreV1ProjectedVolumeSource.
type OptIoK8sAPICoreV1ProjectedVolumeSource struct {
	Value IoK8sAPICoreV1ProjectedVolumeSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1ProjectedVolumeSource was set.
func (o OptIoK8sAPICoreV1ProjectedVolumeSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1ProjectedVolumeSource) Reset() {
	var v IoK8sAPICoreV1ProjectedVolumeSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1ProjectedVolumeSource) SetTo(v IoK8sAPICoreV1ProjectedVolumeSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1ProjectedVolumeSource) Get() (v IoK8sAPICoreV1ProjectedVolumeSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1ProjectedVolumeSource) Or(d IoK8sAPICoreV1ProjectedVolumeSource) IoK8sAPICoreV1ProjectedVolumeSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1QuobyteVolumeSource returns new OptIoK8sAPICoreV1QuobyteVolumeSource with value set to v.
func NewOptIoK8sAPICoreV1QuobyteVolumeSource(v IoK8sAPICoreV1QuobyteVolumeSource) OptIoK8sAPICoreV1QuobyteVolumeSource {
	return OptIoK8sAPICoreV1QuobyteVolumeSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1QuobyteVolumeSource is optional IoK8sAPICoreV1QuobyteVolumeSource.
type OptIoK8sAPICoreV1QuobyteVolumeSource struct {
	Value IoK8sAPICoreV1QuobyteVolumeSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1QuobyteVolumeSource was set.
func (o OptIoK8sAPICoreV1QuobyteVolumeSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1QuobyteVolumeSource) Reset() {
	var v IoK8sAPICoreV1QuobyteVolumeSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1QuobyteVolumeSource) SetTo(v IoK8sAPICoreV1QuobyteVolumeSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1QuobyteVolumeSource) Get() (v IoK8sAPICoreV1QuobyteVolumeSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1QuobyteVolumeSource) Or(d IoK8sAPICoreV1QuobyteVolumeSource) IoK8sAPICoreV1QuobyteVolumeSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1RBDPersistentVolumeSource returns new OptIoK8sAPICoreV1RBDPersistentVolumeSource with value set to v.
func NewOptIoK8sAPICoreV1RBDPersistentVolumeSource(v IoK8sAPICoreV1RBDPersistentVolumeSource) OptIoK8sAPICoreV1RBDPersistentVolumeSource {
	return OptIoK8sAPICoreV1RBDPersistentVolumeSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1RBDPersistentVolumeSource is optional IoK8sAPICoreV1RBDPersistentVolumeSource.
type OptIoK8sAPICoreV1RBDPersistentVolumeSource struct {
	Value IoK8sAPICoreV1RBDPersistentVolumeSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1RBDPersistentVolumeSource was set.
func (o OptIoK8sAPICoreV1RBDPersistentVolumeSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1RBDPersistentVolumeSource) Reset() {
	var v IoK8sAPICoreV1RBDPersistentVolumeSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1RBDPersistentVolumeSource) SetTo(v IoK8sAPICoreV1RBDPersistentVolumeSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1RBDPersistentVolumeSource) Get() (v IoK8sAPICoreV1RBDPersistentVolumeSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1RBDPersistentVolumeSource) Or(d IoK8sAPICoreV1RBDPersistentVolumeSource) IoK8sAPICoreV1RBDPersistentVolumeSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1RBDVolumeSource returns new OptIoK8sAPICoreV1RBDVolumeSource with value set to v.
func NewOptIoK8sAPICoreV1RBDVolumeSource(v IoK8sAPICoreV1RBDVolumeSource) OptIoK8sAPICoreV1RBDVolumeSource {
	return OptIoK8sAPICoreV1RBDVolumeSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1RBDVolumeSource is optional IoK8sAPICoreV1RBDVolumeSource.
type OptIoK8sAPICoreV1RBDVolumeSource struct {
	Value IoK8sAPICoreV1RBDVolumeSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1RBDVolumeSource was set.
func (o OptIoK8sAPICoreV1RBDVolumeSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1RBDVolumeSource) Reset() {
	var v IoK8sAPICoreV1RBDVolumeSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1RBDVolumeSource) SetTo(v IoK8sAPICoreV1RBDVolumeSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1RBDVolumeSource) Get() (v IoK8sAPICoreV1RBDVolumeSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1RBDVolumeSource) Or(d IoK8sAPICoreV1RBDVolumeSource) IoK8sAPICoreV1RBDVolumeSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1ReplicationControllerSpec returns new OptIoK8sAPICoreV1ReplicationControllerSpec with value set to v.
func NewOptIoK8sAPICoreV1ReplicationControllerSpec(v IoK8sAPICoreV1ReplicationControllerSpec) OptIoK8sAPICoreV1ReplicationControllerSpec {
	return OptIoK8sAPICoreV1ReplicationControllerSpec{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1ReplicationControllerSpec is optional IoK8sAPICoreV1ReplicationControllerSpec.
type OptIoK8sAPICoreV1ReplicationControllerSpec struct {
	Value IoK8sAPICoreV1ReplicationControllerSpec
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1ReplicationControllerSpec was set.
func (o OptIoK8sAPICoreV1ReplicationControllerSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1ReplicationControllerSpec) Reset() {
	var v IoK8sAPICoreV1ReplicationControllerSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1ReplicationControllerSpec) SetTo(v IoK8sAPICoreV1ReplicationControllerSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1ReplicationControllerSpec) Get() (v IoK8sAPICoreV1ReplicationControllerSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1ReplicationControllerSpec) Or(d IoK8sAPICoreV1ReplicationControllerSpec) IoK8sAPICoreV1ReplicationControllerSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1ReplicationControllerSpecSelector returns new OptIoK8sAPICoreV1ReplicationControllerSpecSelector with value set to v.
func NewOptIoK8sAPICoreV1ReplicationControllerSpecSelector(v IoK8sAPICoreV1ReplicationControllerSpecSelector) OptIoK8sAPICoreV1ReplicationControllerSpecSelector {
	return OptIoK8sAPICoreV1ReplicationControllerSpecSelector{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1ReplicationControllerSpecSelector is optional IoK8sAPICoreV1ReplicationControllerSpecSelector.
type OptIoK8sAPICoreV1ReplicationControllerSpecSelector struct {
	Value IoK8sAPICoreV1ReplicationControllerSpecSelector
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1ReplicationControllerSpecSelector was set.
func (o OptIoK8sAPICoreV1ReplicationControllerSpecSelector) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1ReplicationControllerSpecSelector) Reset() {
	var v IoK8sAPICoreV1ReplicationControllerSpecSelector
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1ReplicationControllerSpecSelector) SetTo(v IoK8sAPICoreV1ReplicationControllerSpecSelector) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1ReplicationControllerSpecSelector) Get() (v IoK8sAPICoreV1ReplicationControllerSpecSelector, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1ReplicationControllerSpecSelector) Or(d IoK8sAPICoreV1ReplicationControllerSpecSelector) IoK8sAPICoreV1ReplicationControllerSpecSelector {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1ReplicationControllerStatus returns new OptIoK8sAPICoreV1ReplicationControllerStatus with value set to v.
func NewOptIoK8sAPICoreV1ReplicationControllerStatus(v IoK8sAPICoreV1ReplicationControllerStatus) OptIoK8sAPICoreV1ReplicationControllerStatus {
	return OptIoK8sAPICoreV1ReplicationControllerStatus{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1ReplicationControllerStatus is optional IoK8sAPICoreV1ReplicationControllerStatus.
type OptIoK8sAPICoreV1ReplicationControllerStatus struct {
	Value IoK8sAPICoreV1ReplicationControllerStatus
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1ReplicationControllerStatus was set.
func (o OptIoK8sAPICoreV1ReplicationControllerStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1ReplicationControllerStatus) Reset() {
	var v IoK8sAPICoreV1ReplicationControllerStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1ReplicationControllerStatus) SetTo(v IoK8sAPICoreV1ReplicationControllerStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1ReplicationControllerStatus) Get() (v IoK8sAPICoreV1ReplicationControllerStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1ReplicationControllerStatus) Or(d IoK8sAPICoreV1ReplicationControllerStatus) IoK8sAPICoreV1ReplicationControllerStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1ResourceFieldSelector returns new OptIoK8sAPICoreV1ResourceFieldSelector with value set to v.
func NewOptIoK8sAPICoreV1ResourceFieldSelector(v IoK8sAPICoreV1ResourceFieldSelector) OptIoK8sAPICoreV1ResourceFieldSelector {
	return OptIoK8sAPICoreV1ResourceFieldSelector{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1ResourceFieldSelector is optional IoK8sAPICoreV1ResourceFieldSelector.
type OptIoK8sAPICoreV1ResourceFieldSelector struct {
	Value IoK8sAPICoreV1ResourceFieldSelector
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1ResourceFieldSelector was set.
func (o OptIoK8sAPICoreV1ResourceFieldSelector) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1ResourceFieldSelector) Reset() {
	var v IoK8sAPICoreV1ResourceFieldSelector
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1ResourceFieldSelector) SetTo(v IoK8sAPICoreV1ResourceFieldSelector) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1ResourceFieldSelector) Get() (v IoK8sAPICoreV1ResourceFieldSelector, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1ResourceFieldSelector) Or(d IoK8sAPICoreV1ResourceFieldSelector) IoK8sAPICoreV1ResourceFieldSelector {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1ResourceQuotaSpec returns new OptIoK8sAPICoreV1ResourceQuotaSpec with value set to v.
func NewOptIoK8sAPICoreV1ResourceQuotaSpec(v IoK8sAPICoreV1ResourceQuotaSpec) OptIoK8sAPICoreV1ResourceQuotaSpec {
	return OptIoK8sAPICoreV1ResourceQuotaSpec{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1ResourceQuotaSpec is optional IoK8sAPICoreV1ResourceQuotaSpec.
type OptIoK8sAPICoreV1ResourceQuotaSpec struct {
	Value IoK8sAPICoreV1ResourceQuotaSpec
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1ResourceQuotaSpec was set.
func (o OptIoK8sAPICoreV1ResourceQuotaSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1ResourceQuotaSpec) Reset() {
	var v IoK8sAPICoreV1ResourceQuotaSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1ResourceQuotaSpec) SetTo(v IoK8sAPICoreV1ResourceQuotaSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1ResourceQuotaSpec) Get() (v IoK8sAPICoreV1ResourceQuotaSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1ResourceQuotaSpec) Or(d IoK8sAPICoreV1ResourceQuotaSpec) IoK8sAPICoreV1ResourceQuotaSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1ResourceQuotaSpecHard returns new OptIoK8sAPICoreV1ResourceQuotaSpecHard with value set to v.
func NewOptIoK8sAPICoreV1ResourceQuotaSpecHard(v IoK8sAPICoreV1ResourceQuotaSpecHard) OptIoK8sAPICoreV1ResourceQuotaSpecHard {
	return OptIoK8sAPICoreV1ResourceQuotaSpecHard{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1ResourceQuotaSpecHard is optional IoK8sAPICoreV1ResourceQuotaSpecHard.
type OptIoK8sAPICoreV1ResourceQuotaSpecHard struct {
	Value IoK8sAPICoreV1ResourceQuotaSpecHard
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1ResourceQuotaSpecHard was set.
func (o OptIoK8sAPICoreV1ResourceQuotaSpecHard) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1ResourceQuotaSpecHard) Reset() {
	var v IoK8sAPICoreV1ResourceQuotaSpecHard
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1ResourceQuotaSpecHard) SetTo(v IoK8sAPICoreV1ResourceQuotaSpecHard) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1ResourceQuotaSpecHard) Get() (v IoK8sAPICoreV1ResourceQuotaSpecHard, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1ResourceQuotaSpecHard) Or(d IoK8sAPICoreV1ResourceQuotaSpecHard) IoK8sAPICoreV1ResourceQuotaSpecHard {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1ResourceQuotaStatus returns new OptIoK8sAPICoreV1ResourceQuotaStatus with value set to v.
func NewOptIoK8sAPICoreV1ResourceQuotaStatus(v IoK8sAPICoreV1ResourceQuotaStatus) OptIoK8sAPICoreV1ResourceQuotaStatus {
	return OptIoK8sAPICoreV1ResourceQuotaStatus{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1ResourceQuotaStatus is optional IoK8sAPICoreV1ResourceQuotaStatus.
type OptIoK8sAPICoreV1ResourceQuotaStatus struct {
	Value IoK8sAPICoreV1ResourceQuotaStatus
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1ResourceQuotaStatus was set.
func (o OptIoK8sAPICoreV1ResourceQuotaStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1ResourceQuotaStatus) Reset() {
	var v IoK8sAPICoreV1ResourceQuotaStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1ResourceQuotaStatus) SetTo(v IoK8sAPICoreV1ResourceQuotaStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1ResourceQuotaStatus) Get() (v IoK8sAPICoreV1ResourceQuotaStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1ResourceQuotaStatus) Or(d IoK8sAPICoreV1ResourceQuotaStatus) IoK8sAPICoreV1ResourceQuotaStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1ResourceQuotaStatusHard returns new OptIoK8sAPICoreV1ResourceQuotaStatusHard with value set to v.
func NewOptIoK8sAPICoreV1ResourceQuotaStatusHard(v IoK8sAPICoreV1ResourceQuotaStatusHard) OptIoK8sAPICoreV1ResourceQuotaStatusHard {
	return OptIoK8sAPICoreV1ResourceQuotaStatusHard{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1ResourceQuotaStatusHard is optional IoK8sAPICoreV1ResourceQuotaStatusHard.
type OptIoK8sAPICoreV1ResourceQuotaStatusHard struct {
	Value IoK8sAPICoreV1ResourceQuotaStatusHard
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1ResourceQuotaStatusHard was set.
func (o OptIoK8sAPICoreV1ResourceQuotaStatusHard) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1ResourceQuotaStatusHard) Reset() {
	var v IoK8sAPICoreV1ResourceQuotaStatusHard
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1ResourceQuotaStatusHard) SetTo(v IoK8sAPICoreV1ResourceQuotaStatusHard) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1ResourceQuotaStatusHard) Get() (v IoK8sAPICoreV1ResourceQuotaStatusHard, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1ResourceQuotaStatusHard) Or(d IoK8sAPICoreV1ResourceQuotaStatusHard) IoK8sAPICoreV1ResourceQuotaStatusHard {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1ResourceQuotaStatusUsed returns new OptIoK8sAPICoreV1ResourceQuotaStatusUsed with value set to v.
func NewOptIoK8sAPICoreV1ResourceQuotaStatusUsed(v IoK8sAPICoreV1ResourceQuotaStatusUsed) OptIoK8sAPICoreV1ResourceQuotaStatusUsed {
	return OptIoK8sAPICoreV1ResourceQuotaStatusUsed{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1ResourceQuotaStatusUsed is optional IoK8sAPICoreV1ResourceQuotaStatusUsed.
type OptIoK8sAPICoreV1ResourceQuotaStatusUsed struct {
	Value IoK8sAPICoreV1ResourceQuotaStatusUsed
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1ResourceQuotaStatusUsed was set.
func (o OptIoK8sAPICoreV1ResourceQuotaStatusUsed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1ResourceQuotaStatusUsed) Reset() {
	var v IoK8sAPICoreV1ResourceQuotaStatusUsed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1ResourceQuotaStatusUsed) SetTo(v IoK8sAPICoreV1ResourceQuotaStatusUsed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1ResourceQuotaStatusUsed) Get() (v IoK8sAPICoreV1ResourceQuotaStatusUsed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1ResourceQuotaStatusUsed) Or(d IoK8sAPICoreV1ResourceQuotaStatusUsed) IoK8sAPICoreV1ResourceQuotaStatusUsed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1ResourceRequirements returns new OptIoK8sAPICoreV1ResourceRequirements with value set to v.
func NewOptIoK8sAPICoreV1ResourceRequirements(v IoK8sAPICoreV1ResourceRequirements) OptIoK8sAPICoreV1ResourceRequirements {
	return OptIoK8sAPICoreV1ResourceRequirements{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1ResourceRequirements is optional IoK8sAPICoreV1ResourceRequirements.
type OptIoK8sAPICoreV1ResourceRequirements struct {
	Value IoK8sAPICoreV1ResourceRequirements
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1ResourceRequirements was set.
func (o OptIoK8sAPICoreV1ResourceRequirements) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1ResourceRequirements) Reset() {
	var v IoK8sAPICoreV1ResourceRequirements
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1ResourceRequirements) SetTo(v IoK8sAPICoreV1ResourceRequirements) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1ResourceRequirements) Get() (v IoK8sAPICoreV1ResourceRequirements, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1ResourceRequirements) Or(d IoK8sAPICoreV1ResourceRequirements) IoK8sAPICoreV1ResourceRequirements {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1ResourceRequirementsLimits returns new OptIoK8sAPICoreV1ResourceRequirementsLimits with value set to v.
func NewOptIoK8sAPICoreV1ResourceRequirementsLimits(v IoK8sAPICoreV1ResourceRequirementsLimits) OptIoK8sAPICoreV1ResourceRequirementsLimits {
	return OptIoK8sAPICoreV1ResourceRequirementsLimits{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1ResourceRequirementsLimits is optional IoK8sAPICoreV1ResourceRequirementsLimits.
type OptIoK8sAPICoreV1ResourceRequirementsLimits struct {
	Value IoK8sAPICoreV1ResourceRequirementsLimits
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1ResourceRequirementsLimits was set.
func (o OptIoK8sAPICoreV1ResourceRequirementsLimits) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1ResourceRequirementsLimits) Reset() {
	var v IoK8sAPICoreV1ResourceRequirementsLimits
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1ResourceRequirementsLimits) SetTo(v IoK8sAPICoreV1ResourceRequirementsLimits) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1ResourceRequirementsLimits) Get() (v IoK8sAPICoreV1ResourceRequirementsLimits, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1ResourceRequirementsLimits) Or(d IoK8sAPICoreV1ResourceRequirementsLimits) IoK8sAPICoreV1ResourceRequirementsLimits {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1ResourceRequirementsRequests returns new OptIoK8sAPICoreV1ResourceRequirementsRequests with value set to v.
func NewOptIoK8sAPICoreV1ResourceRequirementsRequests(v IoK8sAPICoreV1ResourceRequirementsRequests) OptIoK8sAPICoreV1ResourceRequirementsRequests {
	return OptIoK8sAPICoreV1ResourceRequirementsRequests{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1ResourceRequirementsRequests is optional IoK8sAPICoreV1ResourceRequirementsRequests.
type OptIoK8sAPICoreV1ResourceRequirementsRequests struct {
	Value IoK8sAPICoreV1ResourceRequirementsRequests
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1ResourceRequirementsRequests was set.
func (o OptIoK8sAPICoreV1ResourceRequirementsRequests) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1ResourceRequirementsRequests) Reset() {
	var v IoK8sAPICoreV1ResourceRequirementsRequests
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1ResourceRequirementsRequests) SetTo(v IoK8sAPICoreV1ResourceRequirementsRequests) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1ResourceRequirementsRequests) Get() (v IoK8sAPICoreV1ResourceRequirementsRequests, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1ResourceRequirementsRequests) Or(d IoK8sAPICoreV1ResourceRequirementsRequests) IoK8sAPICoreV1ResourceRequirementsRequests {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1SELinuxOptions returns new OptIoK8sAPICoreV1SELinuxOptions with value set to v.
func NewOptIoK8sAPICoreV1SELinuxOptions(v IoK8sAPICoreV1SELinuxOptions) OptIoK8sAPICoreV1SELinuxOptions {
	return OptIoK8sAPICoreV1SELinuxOptions{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1SELinuxOptions is optional IoK8sAPICoreV1SELinuxOptions.
type OptIoK8sAPICoreV1SELinuxOptions struct {
	Value IoK8sAPICoreV1SELinuxOptions
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1SELinuxOptions was set.
func (o OptIoK8sAPICoreV1SELinuxOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1SELinuxOptions) Reset() {
	var v IoK8sAPICoreV1SELinuxOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1SELinuxOptions) SetTo(v IoK8sAPICoreV1SELinuxOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1SELinuxOptions) Get() (v IoK8sAPICoreV1SELinuxOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1SELinuxOptions) Or(d IoK8sAPICoreV1SELinuxOptions) IoK8sAPICoreV1SELinuxOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1ScaleIOPersistentVolumeSource returns new OptIoK8sAPICoreV1ScaleIOPersistentVolumeSource with value set to v.
func NewOptIoK8sAPICoreV1ScaleIOPersistentVolumeSource(v IoK8sAPICoreV1ScaleIOPersistentVolumeSource) OptIoK8sAPICoreV1ScaleIOPersistentVolumeSource {
	return OptIoK8sAPICoreV1ScaleIOPersistentVolumeSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1ScaleIOPersistentVolumeSource is optional IoK8sAPICoreV1ScaleIOPersistentVolumeSource.
type OptIoK8sAPICoreV1ScaleIOPersistentVolumeSource struct {
	Value IoK8sAPICoreV1ScaleIOPersistentVolumeSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1ScaleIOPersistentVolumeSource was set.
func (o OptIoK8sAPICoreV1ScaleIOPersistentVolumeSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1ScaleIOPersistentVolumeSource) Reset() {
	var v IoK8sAPICoreV1ScaleIOPersistentVolumeSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1ScaleIOPersistentVolumeSource) SetTo(v IoK8sAPICoreV1ScaleIOPersistentVolumeSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1ScaleIOPersistentVolumeSource) Get() (v IoK8sAPICoreV1ScaleIOPersistentVolumeSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1ScaleIOPersistentVolumeSource) Or(d IoK8sAPICoreV1ScaleIOPersistentVolumeSource) IoK8sAPICoreV1ScaleIOPersistentVolumeSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1ScaleIOVolumeSource returns new OptIoK8sAPICoreV1ScaleIOVolumeSource with value set to v.
func NewOptIoK8sAPICoreV1ScaleIOVolumeSource(v IoK8sAPICoreV1ScaleIOVolumeSource) OptIoK8sAPICoreV1ScaleIOVolumeSource {
	return OptIoK8sAPICoreV1ScaleIOVolumeSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1ScaleIOVolumeSource is optional IoK8sAPICoreV1ScaleIOVolumeSource.
type OptIoK8sAPICoreV1ScaleIOVolumeSource struct {
	Value IoK8sAPICoreV1ScaleIOVolumeSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1ScaleIOVolumeSource was set.
func (o OptIoK8sAPICoreV1ScaleIOVolumeSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1ScaleIOVolumeSource) Reset() {
	var v IoK8sAPICoreV1ScaleIOVolumeSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1ScaleIOVolumeSource) SetTo(v IoK8sAPICoreV1ScaleIOVolumeSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1ScaleIOVolumeSource) Get() (v IoK8sAPICoreV1ScaleIOVolumeSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1ScaleIOVolumeSource) Or(d IoK8sAPICoreV1ScaleIOVolumeSource) IoK8sAPICoreV1ScaleIOVolumeSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1ScopeSelector returns new OptIoK8sAPICoreV1ScopeSelector with value set to v.
func NewOptIoK8sAPICoreV1ScopeSelector(v IoK8sAPICoreV1ScopeSelector) OptIoK8sAPICoreV1ScopeSelector {
	return OptIoK8sAPICoreV1ScopeSelector{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1ScopeSelector is optional IoK8sAPICoreV1ScopeSelector.
type OptIoK8sAPICoreV1ScopeSelector struct {
	Value IoK8sAPICoreV1ScopeSelector
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1ScopeSelector was set.
func (o OptIoK8sAPICoreV1ScopeSelector) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1ScopeSelector) Reset() {
	var v IoK8sAPICoreV1ScopeSelector
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1ScopeSelector) SetTo(v IoK8sAPICoreV1ScopeSelector) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1ScopeSelector) Get() (v IoK8sAPICoreV1ScopeSelector, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1ScopeSelector) Or(d IoK8sAPICoreV1ScopeSelector) IoK8sAPICoreV1ScopeSelector {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1SeccompProfile returns new OptIoK8sAPICoreV1SeccompProfile with value set to v.
func NewOptIoK8sAPICoreV1SeccompProfile(v IoK8sAPICoreV1SeccompProfile) OptIoK8sAPICoreV1SeccompProfile {
	return OptIoK8sAPICoreV1SeccompProfile{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1SeccompProfile is optional IoK8sAPICoreV1SeccompProfile.
type OptIoK8sAPICoreV1SeccompProfile struct {
	Value IoK8sAPICoreV1SeccompProfile
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1SeccompProfile was set.
func (o OptIoK8sAPICoreV1SeccompProfile) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1SeccompProfile) Reset() {
	var v IoK8sAPICoreV1SeccompProfile
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1SeccompProfile) SetTo(v IoK8sAPICoreV1SeccompProfile) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1SeccompProfile) Get() (v IoK8sAPICoreV1SeccompProfile, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1SeccompProfile) Or(d IoK8sAPICoreV1SeccompProfile) IoK8sAPICoreV1SeccompProfile {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1SecretData returns new OptIoK8sAPICoreV1SecretData with value set to v.
func NewOptIoK8sAPICoreV1SecretData(v IoK8sAPICoreV1SecretData) OptIoK8sAPICoreV1SecretData {
	return OptIoK8sAPICoreV1SecretData{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1SecretData is optional IoK8sAPICoreV1SecretData.
type OptIoK8sAPICoreV1SecretData struct {
	Value IoK8sAPICoreV1SecretData
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1SecretData was set.
func (o OptIoK8sAPICoreV1SecretData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1SecretData) Reset() {
	var v IoK8sAPICoreV1SecretData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1SecretData) SetTo(v IoK8sAPICoreV1SecretData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1SecretData) Get() (v IoK8sAPICoreV1SecretData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1SecretData) Or(d IoK8sAPICoreV1SecretData) IoK8sAPICoreV1SecretData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1SecretEnvSource returns new OptIoK8sAPICoreV1SecretEnvSource with value set to v.
func NewOptIoK8sAPICoreV1SecretEnvSource(v IoK8sAPICoreV1SecretEnvSource) OptIoK8sAPICoreV1SecretEnvSource {
	return OptIoK8sAPICoreV1SecretEnvSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1SecretEnvSource is optional IoK8sAPICoreV1SecretEnvSource.
type OptIoK8sAPICoreV1SecretEnvSource struct {
	Value IoK8sAPICoreV1SecretEnvSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1SecretEnvSource was set.
func (o OptIoK8sAPICoreV1SecretEnvSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1SecretEnvSource) Reset() {
	var v IoK8sAPICoreV1SecretEnvSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1SecretEnvSource) SetTo(v IoK8sAPICoreV1SecretEnvSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1SecretEnvSource) Get() (v IoK8sAPICoreV1SecretEnvSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1SecretEnvSource) Or(d IoK8sAPICoreV1SecretEnvSource) IoK8sAPICoreV1SecretEnvSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1SecretKeySelector returns new OptIoK8sAPICoreV1SecretKeySelector with value set to v.
func NewOptIoK8sAPICoreV1SecretKeySelector(v IoK8sAPICoreV1SecretKeySelector) OptIoK8sAPICoreV1SecretKeySelector {
	return OptIoK8sAPICoreV1SecretKeySelector{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1SecretKeySelector is optional IoK8sAPICoreV1SecretKeySelector.
type OptIoK8sAPICoreV1SecretKeySelector struct {
	Value IoK8sAPICoreV1SecretKeySelector
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1SecretKeySelector was set.
func (o OptIoK8sAPICoreV1SecretKeySelector) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1SecretKeySelector) Reset() {
	var v IoK8sAPICoreV1SecretKeySelector
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1SecretKeySelector) SetTo(v IoK8sAPICoreV1SecretKeySelector) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1SecretKeySelector) Get() (v IoK8sAPICoreV1SecretKeySelector, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1SecretKeySelector) Or(d IoK8sAPICoreV1SecretKeySelector) IoK8sAPICoreV1SecretKeySelector {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1SecretProjection returns new OptIoK8sAPICoreV1SecretProjection with value set to v.
func NewOptIoK8sAPICoreV1SecretProjection(v IoK8sAPICoreV1SecretProjection) OptIoK8sAPICoreV1SecretProjection {
	return OptIoK8sAPICoreV1SecretProjection{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1SecretProjection is optional IoK8sAPICoreV1SecretProjection.
type OptIoK8sAPICoreV1SecretProjection struct {
	Value IoK8sAPICoreV1SecretProjection
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1SecretProjection was set.
func (o OptIoK8sAPICoreV1SecretProjection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1SecretProjection) Reset() {
	var v IoK8sAPICoreV1SecretProjection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1SecretProjection) SetTo(v IoK8sAPICoreV1SecretProjection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1SecretProjection) Get() (v IoK8sAPICoreV1SecretProjection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1SecretProjection) Or(d IoK8sAPICoreV1SecretProjection) IoK8sAPICoreV1SecretProjection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1SecretReference returns new OptIoK8sAPICoreV1SecretReference with value set to v.
func NewOptIoK8sAPICoreV1SecretReference(v IoK8sAPICoreV1SecretReference) OptIoK8sAPICoreV1SecretReference {
	return OptIoK8sAPICoreV1SecretReference{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1SecretReference is optional IoK8sAPICoreV1SecretReference.
type OptIoK8sAPICoreV1SecretReference struct {
	Value IoK8sAPICoreV1SecretReference
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1SecretReference was set.
func (o OptIoK8sAPICoreV1SecretReference) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1SecretReference) Reset() {
	var v IoK8sAPICoreV1SecretReference
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1SecretReference) SetTo(v IoK8sAPICoreV1SecretReference) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1SecretReference) Get() (v IoK8sAPICoreV1SecretReference, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1SecretReference) Or(d IoK8sAPICoreV1SecretReference) IoK8sAPICoreV1SecretReference {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1SecretStringData returns new OptIoK8sAPICoreV1SecretStringData with value set to v.
func NewOptIoK8sAPICoreV1SecretStringData(v IoK8sAPICoreV1SecretStringData) OptIoK8sAPICoreV1SecretStringData {
	return OptIoK8sAPICoreV1SecretStringData{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1SecretStringData is optional IoK8sAPICoreV1SecretStringData.
type OptIoK8sAPICoreV1SecretStringData struct {
	Value IoK8sAPICoreV1SecretStringData
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1SecretStringData was set.
func (o OptIoK8sAPICoreV1SecretStringData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1SecretStringData) Reset() {
	var v IoK8sAPICoreV1SecretStringData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1SecretStringData) SetTo(v IoK8sAPICoreV1SecretStringData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1SecretStringData) Get() (v IoK8sAPICoreV1SecretStringData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1SecretStringData) Or(d IoK8sAPICoreV1SecretStringData) IoK8sAPICoreV1SecretStringData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1SecretVolumeSource returns new OptIoK8sAPICoreV1SecretVolumeSource with value set to v.
func NewOptIoK8sAPICoreV1SecretVolumeSource(v IoK8sAPICoreV1SecretVolumeSource) OptIoK8sAPICoreV1SecretVolumeSource {
	return OptIoK8sAPICoreV1SecretVolumeSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1SecretVolumeSource is optional IoK8sAPICoreV1SecretVolumeSource.
type OptIoK8sAPICoreV1SecretVolumeSource struct {
	Value IoK8sAPICoreV1SecretVolumeSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1SecretVolumeSource was set.
func (o OptIoK8sAPICoreV1SecretVolumeSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1SecretVolumeSource) Reset() {
	var v IoK8sAPICoreV1SecretVolumeSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1SecretVolumeSource) SetTo(v IoK8sAPICoreV1SecretVolumeSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1SecretVolumeSource) Get() (v IoK8sAPICoreV1SecretVolumeSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1SecretVolumeSource) Or(d IoK8sAPICoreV1SecretVolumeSource) IoK8sAPICoreV1SecretVolumeSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1SecurityContext returns new OptIoK8sAPICoreV1SecurityContext with value set to v.
func NewOptIoK8sAPICoreV1SecurityContext(v IoK8sAPICoreV1SecurityContext) OptIoK8sAPICoreV1SecurityContext {
	return OptIoK8sAPICoreV1SecurityContext{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1SecurityContext is optional IoK8sAPICoreV1SecurityContext.
type OptIoK8sAPICoreV1SecurityContext struct {
	Value IoK8sAPICoreV1SecurityContext
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1SecurityContext was set.
func (o OptIoK8sAPICoreV1SecurityContext) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1SecurityContext) Reset() {
	var v IoK8sAPICoreV1SecurityContext
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1SecurityContext) SetTo(v IoK8sAPICoreV1SecurityContext) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1SecurityContext) Get() (v IoK8sAPICoreV1SecurityContext, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1SecurityContext) Or(d IoK8sAPICoreV1SecurityContext) IoK8sAPICoreV1SecurityContext {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1ServiceAccountTokenProjection returns new OptIoK8sAPICoreV1ServiceAccountTokenProjection with value set to v.
func NewOptIoK8sAPICoreV1ServiceAccountTokenProjection(v IoK8sAPICoreV1ServiceAccountTokenProjection) OptIoK8sAPICoreV1ServiceAccountTokenProjection {
	return OptIoK8sAPICoreV1ServiceAccountTokenProjection{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1ServiceAccountTokenProjection is optional IoK8sAPICoreV1ServiceAccountTokenProjection.
type OptIoK8sAPICoreV1ServiceAccountTokenProjection struct {
	Value IoK8sAPICoreV1ServiceAccountTokenProjection
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1ServiceAccountTokenProjection was set.
func (o OptIoK8sAPICoreV1ServiceAccountTokenProjection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1ServiceAccountTokenProjection) Reset() {
	var v IoK8sAPICoreV1ServiceAccountTokenProjection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1ServiceAccountTokenProjection) SetTo(v IoK8sAPICoreV1ServiceAccountTokenProjection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1ServiceAccountTokenProjection) Get() (v IoK8sAPICoreV1ServiceAccountTokenProjection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1ServiceAccountTokenProjection) Or(d IoK8sAPICoreV1ServiceAccountTokenProjection) IoK8sAPICoreV1ServiceAccountTokenProjection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1ServiceSpec returns new OptIoK8sAPICoreV1ServiceSpec with value set to v.
func NewOptIoK8sAPICoreV1ServiceSpec(v IoK8sAPICoreV1ServiceSpec) OptIoK8sAPICoreV1ServiceSpec {
	return OptIoK8sAPICoreV1ServiceSpec{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1ServiceSpec is optional IoK8sAPICoreV1ServiceSpec.
type OptIoK8sAPICoreV1ServiceSpec struct {
	Value IoK8sAPICoreV1ServiceSpec
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1ServiceSpec was set.
func (o OptIoK8sAPICoreV1ServiceSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1ServiceSpec) Reset() {
	var v IoK8sAPICoreV1ServiceSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1ServiceSpec) SetTo(v IoK8sAPICoreV1ServiceSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1ServiceSpec) Get() (v IoK8sAPICoreV1ServiceSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1ServiceSpec) Or(d IoK8sAPICoreV1ServiceSpec) IoK8sAPICoreV1ServiceSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1ServiceSpecSelector returns new OptIoK8sAPICoreV1ServiceSpecSelector with value set to v.
func NewOptIoK8sAPICoreV1ServiceSpecSelector(v IoK8sAPICoreV1ServiceSpecSelector) OptIoK8sAPICoreV1ServiceSpecSelector {
	return OptIoK8sAPICoreV1ServiceSpecSelector{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1ServiceSpecSelector is optional IoK8sAPICoreV1ServiceSpecSelector.
type OptIoK8sAPICoreV1ServiceSpecSelector struct {
	Value IoK8sAPICoreV1ServiceSpecSelector
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1ServiceSpecSelector was set.
func (o OptIoK8sAPICoreV1ServiceSpecSelector) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1ServiceSpecSelector) Reset() {
	var v IoK8sAPICoreV1ServiceSpecSelector
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1ServiceSpecSelector) SetTo(v IoK8sAPICoreV1ServiceSpecSelector) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1ServiceSpecSelector) Get() (v IoK8sAPICoreV1ServiceSpecSelector, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1ServiceSpecSelector) Or(d IoK8sAPICoreV1ServiceSpecSelector) IoK8sAPICoreV1ServiceSpecSelector {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1ServiceStatus returns new OptIoK8sAPICoreV1ServiceStatus with value set to v.
func NewOptIoK8sAPICoreV1ServiceStatus(v IoK8sAPICoreV1ServiceStatus) OptIoK8sAPICoreV1ServiceStatus {
	return OptIoK8sAPICoreV1ServiceStatus{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1ServiceStatus is optional IoK8sAPICoreV1ServiceStatus.
type OptIoK8sAPICoreV1ServiceStatus struct {
	Value IoK8sAPICoreV1ServiceStatus
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1ServiceStatus was set.
func (o OptIoK8sAPICoreV1ServiceStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1ServiceStatus) Reset() {
	var v IoK8sAPICoreV1ServiceStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1ServiceStatus) SetTo(v IoK8sAPICoreV1ServiceStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1ServiceStatus) Get() (v IoK8sAPICoreV1ServiceStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1ServiceStatus) Or(d IoK8sAPICoreV1ServiceStatus) IoK8sAPICoreV1ServiceStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1SessionAffinityConfig returns new OptIoK8sAPICoreV1SessionAffinityConfig with value set to v.
func NewOptIoK8sAPICoreV1SessionAffinityConfig(v IoK8sAPICoreV1SessionAffinityConfig) OptIoK8sAPICoreV1SessionAffinityConfig {
	return OptIoK8sAPICoreV1SessionAffinityConfig{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1SessionAffinityConfig is optional IoK8sAPICoreV1SessionAffinityConfig.
type OptIoK8sAPICoreV1SessionAffinityConfig struct {
	Value IoK8sAPICoreV1SessionAffinityConfig
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1SessionAffinityConfig was set.
func (o OptIoK8sAPICoreV1SessionAffinityConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1SessionAffinityConfig) Reset() {
	var v IoK8sAPICoreV1SessionAffinityConfig
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1SessionAffinityConfig) SetTo(v IoK8sAPICoreV1SessionAffinityConfig) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1SessionAffinityConfig) Get() (v IoK8sAPICoreV1SessionAffinityConfig, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1SessionAffinityConfig) Or(d IoK8sAPICoreV1SessionAffinityConfig) IoK8sAPICoreV1SessionAffinityConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1StorageOSPersistentVolumeSource returns new OptIoK8sAPICoreV1StorageOSPersistentVolumeSource with value set to v.
func NewOptIoK8sAPICoreV1StorageOSPersistentVolumeSource(v IoK8sAPICoreV1StorageOSPersistentVolumeSource) OptIoK8sAPICoreV1StorageOSPersistentVolumeSource {
	return OptIoK8sAPICoreV1StorageOSPersistentVolumeSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1StorageOSPersistentVolumeSource is optional IoK8sAPICoreV1StorageOSPersistentVolumeSource.
type OptIoK8sAPICoreV1StorageOSPersistentVolumeSource struct {
	Value IoK8sAPICoreV1StorageOSPersistentVolumeSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1StorageOSPersistentVolumeSource was set.
func (o OptIoK8sAPICoreV1StorageOSPersistentVolumeSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1StorageOSPersistentVolumeSource) Reset() {
	var v IoK8sAPICoreV1StorageOSPersistentVolumeSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1StorageOSPersistentVolumeSource) SetTo(v IoK8sAPICoreV1StorageOSPersistentVolumeSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1StorageOSPersistentVolumeSource) Get() (v IoK8sAPICoreV1StorageOSPersistentVolumeSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1StorageOSPersistentVolumeSource) Or(d IoK8sAPICoreV1StorageOSPersistentVolumeSource) IoK8sAPICoreV1StorageOSPersistentVolumeSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1StorageOSVolumeSource returns new OptIoK8sAPICoreV1StorageOSVolumeSource with value set to v.
func NewOptIoK8sAPICoreV1StorageOSVolumeSource(v IoK8sAPICoreV1StorageOSVolumeSource) OptIoK8sAPICoreV1StorageOSVolumeSource {
	return OptIoK8sAPICoreV1StorageOSVolumeSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1StorageOSVolumeSource is optional IoK8sAPICoreV1StorageOSVolumeSource.
type OptIoK8sAPICoreV1StorageOSVolumeSource struct {
	Value IoK8sAPICoreV1StorageOSVolumeSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1StorageOSVolumeSource was set.
func (o OptIoK8sAPICoreV1StorageOSVolumeSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1StorageOSVolumeSource) Reset() {
	var v IoK8sAPICoreV1StorageOSVolumeSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1StorageOSVolumeSource) SetTo(v IoK8sAPICoreV1StorageOSVolumeSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1StorageOSVolumeSource) Get() (v IoK8sAPICoreV1StorageOSVolumeSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1StorageOSVolumeSource) Or(d IoK8sAPICoreV1StorageOSVolumeSource) IoK8sAPICoreV1StorageOSVolumeSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1TCPSocketAction returns new OptIoK8sAPICoreV1TCPSocketAction with value set to v.
func NewOptIoK8sAPICoreV1TCPSocketAction(v IoK8sAPICoreV1TCPSocketAction) OptIoK8sAPICoreV1TCPSocketAction {
	return OptIoK8sAPICoreV1TCPSocketAction{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1TCPSocketAction is optional IoK8sAPICoreV1TCPSocketAction.
type OptIoK8sAPICoreV1TCPSocketAction struct {
	Value IoK8sAPICoreV1TCPSocketAction
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1TCPSocketAction was set.
func (o OptIoK8sAPICoreV1TCPSocketAction) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1TCPSocketAction) Reset() {
	var v IoK8sAPICoreV1TCPSocketAction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1TCPSocketAction) SetTo(v IoK8sAPICoreV1TCPSocketAction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1TCPSocketAction) Get() (v IoK8sAPICoreV1TCPSocketAction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1TCPSocketAction) Or(d IoK8sAPICoreV1TCPSocketAction) IoK8sAPICoreV1TCPSocketAction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1TypedLocalObjectReference returns new OptIoK8sAPICoreV1TypedLocalObjectReference with value set to v.
func NewOptIoK8sAPICoreV1TypedLocalObjectReference(v IoK8sAPICoreV1TypedLocalObjectReference) OptIoK8sAPICoreV1TypedLocalObjectReference {
	return OptIoK8sAPICoreV1TypedLocalObjectReference{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1TypedLocalObjectReference is optional IoK8sAPICoreV1TypedLocalObjectReference.
type OptIoK8sAPICoreV1TypedLocalObjectReference struct {
	Value IoK8sAPICoreV1TypedLocalObjectReference
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1TypedLocalObjectReference was set.
func (o OptIoK8sAPICoreV1TypedLocalObjectReference) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1TypedLocalObjectReference) Reset() {
	var v IoK8sAPICoreV1TypedLocalObjectReference
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1TypedLocalObjectReference) SetTo(v IoK8sAPICoreV1TypedLocalObjectReference) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1TypedLocalObjectReference) Get() (v IoK8sAPICoreV1TypedLocalObjectReference, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1TypedLocalObjectReference) Or(d IoK8sAPICoreV1TypedLocalObjectReference) IoK8sAPICoreV1TypedLocalObjectReference {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1VolumeNodeAffinity returns new OptIoK8sAPICoreV1VolumeNodeAffinity with value set to v.
func NewOptIoK8sAPICoreV1VolumeNodeAffinity(v IoK8sAPICoreV1VolumeNodeAffinity) OptIoK8sAPICoreV1VolumeNodeAffinity {
	return OptIoK8sAPICoreV1VolumeNodeAffinity{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1VolumeNodeAffinity is optional IoK8sAPICoreV1VolumeNodeAffinity.
type OptIoK8sAPICoreV1VolumeNodeAffinity struct {
	Value IoK8sAPICoreV1VolumeNodeAffinity
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1VolumeNodeAffinity was set.
func (o OptIoK8sAPICoreV1VolumeNodeAffinity) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1VolumeNodeAffinity) Reset() {
	var v IoK8sAPICoreV1VolumeNodeAffinity
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1VolumeNodeAffinity) SetTo(v IoK8sAPICoreV1VolumeNodeAffinity) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1VolumeNodeAffinity) Get() (v IoK8sAPICoreV1VolumeNodeAffinity, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1VolumeNodeAffinity) Or(d IoK8sAPICoreV1VolumeNodeAffinity) IoK8sAPICoreV1VolumeNodeAffinity {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1VsphereVirtualDiskVolumeSource returns new OptIoK8sAPICoreV1VsphereVirtualDiskVolumeSource with value set to v.
func NewOptIoK8sAPICoreV1VsphereVirtualDiskVolumeSource(v IoK8sAPICoreV1VsphereVirtualDiskVolumeSource) OptIoK8sAPICoreV1VsphereVirtualDiskVolumeSource {
	return OptIoK8sAPICoreV1VsphereVirtualDiskVolumeSource{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1VsphereVirtualDiskVolumeSource is optional IoK8sAPICoreV1VsphereVirtualDiskVolumeSource.
type OptIoK8sAPICoreV1VsphereVirtualDiskVolumeSource struct {
	Value IoK8sAPICoreV1VsphereVirtualDiskVolumeSource
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1VsphereVirtualDiskVolumeSource was set.
func (o OptIoK8sAPICoreV1VsphereVirtualDiskVolumeSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1VsphereVirtualDiskVolumeSource) Reset() {
	var v IoK8sAPICoreV1VsphereVirtualDiskVolumeSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1VsphereVirtualDiskVolumeSource) SetTo(v IoK8sAPICoreV1VsphereVirtualDiskVolumeSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1VsphereVirtualDiskVolumeSource) Get() (v IoK8sAPICoreV1VsphereVirtualDiskVolumeSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1VsphereVirtualDiskVolumeSource) Or(d IoK8sAPICoreV1VsphereVirtualDiskVolumeSource) IoK8sAPICoreV1VsphereVirtualDiskVolumeSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPICoreV1WindowsSecurityContextOptions returns new OptIoK8sAPICoreV1WindowsSecurityContextOptions with value set to v.
func NewOptIoK8sAPICoreV1WindowsSecurityContextOptions(v IoK8sAPICoreV1WindowsSecurityContextOptions) OptIoK8sAPICoreV1WindowsSecurityContextOptions {
	return OptIoK8sAPICoreV1WindowsSecurityContextOptions{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPICoreV1WindowsSecurityContextOptions is optional IoK8sAPICoreV1WindowsSecurityContextOptions.
type OptIoK8sAPICoreV1WindowsSecurityContextOptions struct {
	Value IoK8sAPICoreV1WindowsSecurityContextOptions
	Set   bool
}

// IsSet returns true if OptIoK8sAPICoreV1WindowsSecurityContextOptions was set.
func (o OptIoK8sAPICoreV1WindowsSecurityContextOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPICoreV1WindowsSecurityContextOptions) Reset() {
	var v IoK8sAPICoreV1WindowsSecurityContextOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPICoreV1WindowsSecurityContextOptions) SetTo(v IoK8sAPICoreV1WindowsSecurityContextOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPICoreV1WindowsSecurityContextOptions) Get() (v IoK8sAPICoreV1WindowsSecurityContextOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPICoreV1WindowsSecurityContextOptions) Or(d IoK8sAPICoreV1WindowsSecurityContextOptions) IoK8sAPICoreV1WindowsSecurityContextOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIDiscoveryV1EndpointConditions returns new OptIoK8sAPIDiscoveryV1EndpointConditions with value set to v.
func NewOptIoK8sAPIDiscoveryV1EndpointConditions(v IoK8sAPIDiscoveryV1EndpointConditions) OptIoK8sAPIDiscoveryV1EndpointConditions {
	return OptIoK8sAPIDiscoveryV1EndpointConditions{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIDiscoveryV1EndpointConditions is optional IoK8sAPIDiscoveryV1EndpointConditions.
type OptIoK8sAPIDiscoveryV1EndpointConditions struct {
	Value IoK8sAPIDiscoveryV1EndpointConditions
	Set   bool
}

// IsSet returns true if OptIoK8sAPIDiscoveryV1EndpointConditions was set.
func (o OptIoK8sAPIDiscoveryV1EndpointConditions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIDiscoveryV1EndpointConditions) Reset() {
	var v IoK8sAPIDiscoveryV1EndpointConditions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIDiscoveryV1EndpointConditions) SetTo(v IoK8sAPIDiscoveryV1EndpointConditions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIDiscoveryV1EndpointConditions) Get() (v IoK8sAPIDiscoveryV1EndpointConditions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIDiscoveryV1EndpointConditions) Or(d IoK8sAPIDiscoveryV1EndpointConditions) IoK8sAPIDiscoveryV1EndpointConditions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIDiscoveryV1EndpointDeprecatedTopology returns new OptIoK8sAPIDiscoveryV1EndpointDeprecatedTopology with value set to v.
func NewOptIoK8sAPIDiscoveryV1EndpointDeprecatedTopology(v IoK8sAPIDiscoveryV1EndpointDeprecatedTopology) OptIoK8sAPIDiscoveryV1EndpointDeprecatedTopology {
	return OptIoK8sAPIDiscoveryV1EndpointDeprecatedTopology{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIDiscoveryV1EndpointDeprecatedTopology is optional IoK8sAPIDiscoveryV1EndpointDeprecatedTopology.
type OptIoK8sAPIDiscoveryV1EndpointDeprecatedTopology struct {
	Value IoK8sAPIDiscoveryV1EndpointDeprecatedTopology
	Set   bool
}

// IsSet returns true if OptIoK8sAPIDiscoveryV1EndpointDeprecatedTopology was set.
func (o OptIoK8sAPIDiscoveryV1EndpointDeprecatedTopology) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIDiscoveryV1EndpointDeprecatedTopology) Reset() {
	var v IoK8sAPIDiscoveryV1EndpointDeprecatedTopology
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIDiscoveryV1EndpointDeprecatedTopology) SetTo(v IoK8sAPIDiscoveryV1EndpointDeprecatedTopology) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIDiscoveryV1EndpointDeprecatedTopology) Get() (v IoK8sAPIDiscoveryV1EndpointDeprecatedTopology, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIDiscoveryV1EndpointDeprecatedTopology) Or(d IoK8sAPIDiscoveryV1EndpointDeprecatedTopology) IoK8sAPIDiscoveryV1EndpointDeprecatedTopology {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIDiscoveryV1EndpointHints returns new OptIoK8sAPIDiscoveryV1EndpointHints with value set to v.
func NewOptIoK8sAPIDiscoveryV1EndpointHints(v IoK8sAPIDiscoveryV1EndpointHints) OptIoK8sAPIDiscoveryV1EndpointHints {
	return OptIoK8sAPIDiscoveryV1EndpointHints{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIDiscoveryV1EndpointHints is optional IoK8sAPIDiscoveryV1EndpointHints.
type OptIoK8sAPIDiscoveryV1EndpointHints struct {
	Value IoK8sAPIDiscoveryV1EndpointHints
	Set   bool
}

// IsSet returns true if OptIoK8sAPIDiscoveryV1EndpointHints was set.
func (o OptIoK8sAPIDiscoveryV1EndpointHints) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIDiscoveryV1EndpointHints) Reset() {
	var v IoK8sAPIDiscoveryV1EndpointHints
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIDiscoveryV1EndpointHints) SetTo(v IoK8sAPIDiscoveryV1EndpointHints) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIDiscoveryV1EndpointHints) Get() (v IoK8sAPIDiscoveryV1EndpointHints, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIDiscoveryV1EndpointHints) Or(d IoK8sAPIDiscoveryV1EndpointHints) IoK8sAPIDiscoveryV1EndpointHints {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIDiscoveryV1beta1EndpointConditions returns new OptIoK8sAPIDiscoveryV1beta1EndpointConditions with value set to v.
func NewOptIoK8sAPIDiscoveryV1beta1EndpointConditions(v IoK8sAPIDiscoveryV1beta1EndpointConditions) OptIoK8sAPIDiscoveryV1beta1EndpointConditions {
	return OptIoK8sAPIDiscoveryV1beta1EndpointConditions{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIDiscoveryV1beta1EndpointConditions is optional IoK8sAPIDiscoveryV1beta1EndpointConditions.
type OptIoK8sAPIDiscoveryV1beta1EndpointConditions struct {
	Value IoK8sAPIDiscoveryV1beta1EndpointConditions
	Set   bool
}

// IsSet returns true if OptIoK8sAPIDiscoveryV1beta1EndpointConditions was set.
func (o OptIoK8sAPIDiscoveryV1beta1EndpointConditions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIDiscoveryV1beta1EndpointConditions) Reset() {
	var v IoK8sAPIDiscoveryV1beta1EndpointConditions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIDiscoveryV1beta1EndpointConditions) SetTo(v IoK8sAPIDiscoveryV1beta1EndpointConditions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIDiscoveryV1beta1EndpointConditions) Get() (v IoK8sAPIDiscoveryV1beta1EndpointConditions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIDiscoveryV1beta1EndpointConditions) Or(d IoK8sAPIDiscoveryV1beta1EndpointConditions) IoK8sAPIDiscoveryV1beta1EndpointConditions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIDiscoveryV1beta1EndpointHints returns new OptIoK8sAPIDiscoveryV1beta1EndpointHints with value set to v.
func NewOptIoK8sAPIDiscoveryV1beta1EndpointHints(v IoK8sAPIDiscoveryV1beta1EndpointHints) OptIoK8sAPIDiscoveryV1beta1EndpointHints {
	return OptIoK8sAPIDiscoveryV1beta1EndpointHints{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIDiscoveryV1beta1EndpointHints is optional IoK8sAPIDiscoveryV1beta1EndpointHints.
type OptIoK8sAPIDiscoveryV1beta1EndpointHints struct {
	Value IoK8sAPIDiscoveryV1beta1EndpointHints
	Set   bool
}

// IsSet returns true if OptIoK8sAPIDiscoveryV1beta1EndpointHints was set.
func (o OptIoK8sAPIDiscoveryV1beta1EndpointHints) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIDiscoveryV1beta1EndpointHints) Reset() {
	var v IoK8sAPIDiscoveryV1beta1EndpointHints
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIDiscoveryV1beta1EndpointHints) SetTo(v IoK8sAPIDiscoveryV1beta1EndpointHints) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIDiscoveryV1beta1EndpointHints) Get() (v IoK8sAPIDiscoveryV1beta1EndpointHints, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIDiscoveryV1beta1EndpointHints) Or(d IoK8sAPIDiscoveryV1beta1EndpointHints) IoK8sAPIDiscoveryV1beta1EndpointHints {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIDiscoveryV1beta1EndpointTopology returns new OptIoK8sAPIDiscoveryV1beta1EndpointTopology with value set to v.
func NewOptIoK8sAPIDiscoveryV1beta1EndpointTopology(v IoK8sAPIDiscoveryV1beta1EndpointTopology) OptIoK8sAPIDiscoveryV1beta1EndpointTopology {
	return OptIoK8sAPIDiscoveryV1beta1EndpointTopology{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIDiscoveryV1beta1EndpointTopology is optional IoK8sAPIDiscoveryV1beta1EndpointTopology.
type OptIoK8sAPIDiscoveryV1beta1EndpointTopology struct {
	Value IoK8sAPIDiscoveryV1beta1EndpointTopology
	Set   bool
}

// IsSet returns true if OptIoK8sAPIDiscoveryV1beta1EndpointTopology was set.
func (o OptIoK8sAPIDiscoveryV1beta1EndpointTopology) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIDiscoveryV1beta1EndpointTopology) Reset() {
	var v IoK8sAPIDiscoveryV1beta1EndpointTopology
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIDiscoveryV1beta1EndpointTopology) SetTo(v IoK8sAPIDiscoveryV1beta1EndpointTopology) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIDiscoveryV1beta1EndpointTopology) Get() (v IoK8sAPIDiscoveryV1beta1EndpointTopology, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIDiscoveryV1beta1EndpointTopology) Or(d IoK8sAPIDiscoveryV1beta1EndpointTopology) IoK8sAPIDiscoveryV1beta1EndpointTopology {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIEventsV1EventSeries returns new OptIoK8sAPIEventsV1EventSeries with value set to v.
func NewOptIoK8sAPIEventsV1EventSeries(v IoK8sAPIEventsV1EventSeries) OptIoK8sAPIEventsV1EventSeries {
	return OptIoK8sAPIEventsV1EventSeries{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIEventsV1EventSeries is optional IoK8sAPIEventsV1EventSeries.
type OptIoK8sAPIEventsV1EventSeries struct {
	Value IoK8sAPIEventsV1EventSeries
	Set   bool
}

// IsSet returns true if OptIoK8sAPIEventsV1EventSeries was set.
func (o OptIoK8sAPIEventsV1EventSeries) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIEventsV1EventSeries) Reset() {
	var v IoK8sAPIEventsV1EventSeries
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIEventsV1EventSeries) SetTo(v IoK8sAPIEventsV1EventSeries) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIEventsV1EventSeries) Get() (v IoK8sAPIEventsV1EventSeries, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIEventsV1EventSeries) Or(d IoK8sAPIEventsV1EventSeries) IoK8sAPIEventsV1EventSeries {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIEventsV1beta1EventSeries returns new OptIoK8sAPIEventsV1beta1EventSeries with value set to v.
func NewOptIoK8sAPIEventsV1beta1EventSeries(v IoK8sAPIEventsV1beta1EventSeries) OptIoK8sAPIEventsV1beta1EventSeries {
	return OptIoK8sAPIEventsV1beta1EventSeries{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIEventsV1beta1EventSeries is optional IoK8sAPIEventsV1beta1EventSeries.
type OptIoK8sAPIEventsV1beta1EventSeries struct {
	Value IoK8sAPIEventsV1beta1EventSeries
	Set   bool
}

// IsSet returns true if OptIoK8sAPIEventsV1beta1EventSeries was set.
func (o OptIoK8sAPIEventsV1beta1EventSeries) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIEventsV1beta1EventSeries) Reset() {
	var v IoK8sAPIEventsV1beta1EventSeries
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIEventsV1beta1EventSeries) SetTo(v IoK8sAPIEventsV1beta1EventSeries) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIEventsV1beta1EventSeries) Get() (v IoK8sAPIEventsV1beta1EventSeries, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIEventsV1beta1EventSeries) Or(d IoK8sAPIEventsV1beta1EventSeries) IoK8sAPIEventsV1beta1EventSeries {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod returns new OptIoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod with value set to v.
func NewOptIoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod(v IoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod) OptIoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod {
	return OptIoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod is optional IoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod.
type OptIoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod struct {
	Value IoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod
	Set   bool
}

// IsSet returns true if OptIoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod was set.
func (o OptIoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod) Reset() {
	var v IoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod) SetTo(v IoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod) Get() (v IoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod) Or(d IoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod) IoK8sAPIFlowcontrolV1beta1FlowDistinguisherMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIFlowcontrolV1beta1FlowSchemaSpec returns new OptIoK8sAPIFlowcontrolV1beta1FlowSchemaSpec with value set to v.
func NewOptIoK8sAPIFlowcontrolV1beta1FlowSchemaSpec(v IoK8sAPIFlowcontrolV1beta1FlowSchemaSpec) OptIoK8sAPIFlowcontrolV1beta1FlowSchemaSpec {
	return OptIoK8sAPIFlowcontrolV1beta1FlowSchemaSpec{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIFlowcontrolV1beta1FlowSchemaSpec is optional IoK8sAPIFlowcontrolV1beta1FlowSchemaSpec.
type OptIoK8sAPIFlowcontrolV1beta1FlowSchemaSpec struct {
	Value IoK8sAPIFlowcontrolV1beta1FlowSchemaSpec
	Set   bool
}

// IsSet returns true if OptIoK8sAPIFlowcontrolV1beta1FlowSchemaSpec was set.
func (o OptIoK8sAPIFlowcontrolV1beta1FlowSchemaSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIFlowcontrolV1beta1FlowSchemaSpec) Reset() {
	var v IoK8sAPIFlowcontrolV1beta1FlowSchemaSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIFlowcontrolV1beta1FlowSchemaSpec) SetTo(v IoK8sAPIFlowcontrolV1beta1FlowSchemaSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIFlowcontrolV1beta1FlowSchemaSpec) Get() (v IoK8sAPIFlowcontrolV1beta1FlowSchemaSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIFlowcontrolV1beta1FlowSchemaSpec) Or(d IoK8sAPIFlowcontrolV1beta1FlowSchemaSpec) IoK8sAPIFlowcontrolV1beta1FlowSchemaSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIFlowcontrolV1beta1FlowSchemaStatus returns new OptIoK8sAPIFlowcontrolV1beta1FlowSchemaStatus with value set to v.
func NewOptIoK8sAPIFlowcontrolV1beta1FlowSchemaStatus(v IoK8sAPIFlowcontrolV1beta1FlowSchemaStatus) OptIoK8sAPIFlowcontrolV1beta1FlowSchemaStatus {
	return OptIoK8sAPIFlowcontrolV1beta1FlowSchemaStatus{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIFlowcontrolV1beta1FlowSchemaStatus is optional IoK8sAPIFlowcontrolV1beta1FlowSchemaStatus.
type OptIoK8sAPIFlowcontrolV1beta1FlowSchemaStatus struct {
	Value IoK8sAPIFlowcontrolV1beta1FlowSchemaStatus
	Set   bool
}

// IsSet returns true if OptIoK8sAPIFlowcontrolV1beta1FlowSchemaStatus was set.
func (o OptIoK8sAPIFlowcontrolV1beta1FlowSchemaStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIFlowcontrolV1beta1FlowSchemaStatus) Reset() {
	var v IoK8sAPIFlowcontrolV1beta1FlowSchemaStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIFlowcontrolV1beta1FlowSchemaStatus) SetTo(v IoK8sAPIFlowcontrolV1beta1FlowSchemaStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIFlowcontrolV1beta1FlowSchemaStatus) Get() (v IoK8sAPIFlowcontrolV1beta1FlowSchemaStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIFlowcontrolV1beta1FlowSchemaStatus) Or(d IoK8sAPIFlowcontrolV1beta1FlowSchemaStatus) IoK8sAPIFlowcontrolV1beta1FlowSchemaStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIFlowcontrolV1beta1GroupSubject returns new OptIoK8sAPIFlowcontrolV1beta1GroupSubject with value set to v.
func NewOptIoK8sAPIFlowcontrolV1beta1GroupSubject(v IoK8sAPIFlowcontrolV1beta1GroupSubject) OptIoK8sAPIFlowcontrolV1beta1GroupSubject {
	return OptIoK8sAPIFlowcontrolV1beta1GroupSubject{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIFlowcontrolV1beta1GroupSubject is optional IoK8sAPIFlowcontrolV1beta1GroupSubject.
type OptIoK8sAPIFlowcontrolV1beta1GroupSubject struct {
	Value IoK8sAPIFlowcontrolV1beta1GroupSubject
	Set   bool
}

// IsSet returns true if OptIoK8sAPIFlowcontrolV1beta1GroupSubject was set.
func (o OptIoK8sAPIFlowcontrolV1beta1GroupSubject) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIFlowcontrolV1beta1GroupSubject) Reset() {
	var v IoK8sAPIFlowcontrolV1beta1GroupSubject
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIFlowcontrolV1beta1GroupSubject) SetTo(v IoK8sAPIFlowcontrolV1beta1GroupSubject) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIFlowcontrolV1beta1GroupSubject) Get() (v IoK8sAPIFlowcontrolV1beta1GroupSubject, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIFlowcontrolV1beta1GroupSubject) Or(d IoK8sAPIFlowcontrolV1beta1GroupSubject) IoK8sAPIFlowcontrolV1beta1GroupSubject {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIFlowcontrolV1beta1LimitResponse returns new OptIoK8sAPIFlowcontrolV1beta1LimitResponse with value set to v.
func NewOptIoK8sAPIFlowcontrolV1beta1LimitResponse(v IoK8sAPIFlowcontrolV1beta1LimitResponse) OptIoK8sAPIFlowcontrolV1beta1LimitResponse {
	return OptIoK8sAPIFlowcontrolV1beta1LimitResponse{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIFlowcontrolV1beta1LimitResponse is optional IoK8sAPIFlowcontrolV1beta1LimitResponse.
type OptIoK8sAPIFlowcontrolV1beta1LimitResponse struct {
	Value IoK8sAPIFlowcontrolV1beta1LimitResponse
	Set   bool
}

// IsSet returns true if OptIoK8sAPIFlowcontrolV1beta1LimitResponse was set.
func (o OptIoK8sAPIFlowcontrolV1beta1LimitResponse) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIFlowcontrolV1beta1LimitResponse) Reset() {
	var v IoK8sAPIFlowcontrolV1beta1LimitResponse
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIFlowcontrolV1beta1LimitResponse) SetTo(v IoK8sAPIFlowcontrolV1beta1LimitResponse) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIFlowcontrolV1beta1LimitResponse) Get() (v IoK8sAPIFlowcontrolV1beta1LimitResponse, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIFlowcontrolV1beta1LimitResponse) Or(d IoK8sAPIFlowcontrolV1beta1LimitResponse) IoK8sAPIFlowcontrolV1beta1LimitResponse {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration returns new OptIoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration with value set to v.
func NewOptIoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration(v IoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration) OptIoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration {
	return OptIoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration is optional IoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration.
type OptIoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration struct {
	Value IoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration
	Set   bool
}

// IsSet returns true if OptIoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration was set.
func (o OptIoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration) Reset() {
	var v IoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration) SetTo(v IoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration) Get() (v IoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration) Or(d IoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration) IoK8sAPIFlowcontrolV1beta1LimitedPriorityLevelConfiguration {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec returns new OptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec with value set to v.
func NewOptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec(v IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec) OptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec {
	return OptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec is optional IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec.
type OptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec struct {
	Value IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec
	Set   bool
}

// IsSet returns true if OptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec was set.
func (o OptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec) Reset() {
	var v IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec) SetTo(v IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec) Get() (v IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec) Or(d IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec) IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus returns new OptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus with value set to v.
func NewOptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus(v IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus) OptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus {
	return OptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus is optional IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus.
type OptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus struct {
	Value IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus
	Set   bool
}

// IsSet returns true if OptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus was set.
func (o OptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus) Reset() {
	var v IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus) SetTo(v IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus) Get() (v IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus) Or(d IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus) IoK8sAPIFlowcontrolV1beta1PriorityLevelConfigurationStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIFlowcontrolV1beta1QueuingConfiguration returns new OptIoK8sAPIFlowcontrolV1beta1QueuingConfiguration with value set to v.
func NewOptIoK8sAPIFlowcontrolV1beta1QueuingConfiguration(v IoK8sAPIFlowcontrolV1beta1QueuingConfiguration) OptIoK8sAPIFlowcontrolV1beta1QueuingConfiguration {
	return OptIoK8sAPIFlowcontrolV1beta1QueuingConfiguration{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIFlowcontrolV1beta1QueuingConfiguration is optional IoK8sAPIFlowcontrolV1beta1QueuingConfiguration.
type OptIoK8sAPIFlowcontrolV1beta1QueuingConfiguration struct {
	Value IoK8sAPIFlowcontrolV1beta1QueuingConfiguration
	Set   bool
}

// IsSet returns true if OptIoK8sAPIFlowcontrolV1beta1QueuingConfiguration was set.
func (o OptIoK8sAPIFlowcontrolV1beta1QueuingConfiguration) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIFlowcontrolV1beta1QueuingConfiguration) Reset() {
	var v IoK8sAPIFlowcontrolV1beta1QueuingConfiguration
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIFlowcontrolV1beta1QueuingConfiguration) SetTo(v IoK8sAPIFlowcontrolV1beta1QueuingConfiguration) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIFlowcontrolV1beta1QueuingConfiguration) Get() (v IoK8sAPIFlowcontrolV1beta1QueuingConfiguration, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIFlowcontrolV1beta1QueuingConfiguration) Or(d IoK8sAPIFlowcontrolV1beta1QueuingConfiguration) IoK8sAPIFlowcontrolV1beta1QueuingConfiguration {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIFlowcontrolV1beta1ServiceAccountSubject returns new OptIoK8sAPIFlowcontrolV1beta1ServiceAccountSubject with value set to v.
func NewOptIoK8sAPIFlowcontrolV1beta1ServiceAccountSubject(v IoK8sAPIFlowcontrolV1beta1ServiceAccountSubject) OptIoK8sAPIFlowcontrolV1beta1ServiceAccountSubject {
	return OptIoK8sAPIFlowcontrolV1beta1ServiceAccountSubject{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIFlowcontrolV1beta1ServiceAccountSubject is optional IoK8sAPIFlowcontrolV1beta1ServiceAccountSubject.
type OptIoK8sAPIFlowcontrolV1beta1ServiceAccountSubject struct {
	Value IoK8sAPIFlowcontrolV1beta1ServiceAccountSubject
	Set   bool
}

// IsSet returns true if OptIoK8sAPIFlowcontrolV1beta1ServiceAccountSubject was set.
func (o OptIoK8sAPIFlowcontrolV1beta1ServiceAccountSubject) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIFlowcontrolV1beta1ServiceAccountSubject) Reset() {
	var v IoK8sAPIFlowcontrolV1beta1ServiceAccountSubject
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIFlowcontrolV1beta1ServiceAccountSubject) SetTo(v IoK8sAPIFlowcontrolV1beta1ServiceAccountSubject) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIFlowcontrolV1beta1ServiceAccountSubject) Get() (v IoK8sAPIFlowcontrolV1beta1ServiceAccountSubject, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIFlowcontrolV1beta1ServiceAccountSubject) Or(d IoK8sAPIFlowcontrolV1beta1ServiceAccountSubject) IoK8sAPIFlowcontrolV1beta1ServiceAccountSubject {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIFlowcontrolV1beta1UserSubject returns new OptIoK8sAPIFlowcontrolV1beta1UserSubject with value set to v.
func NewOptIoK8sAPIFlowcontrolV1beta1UserSubject(v IoK8sAPIFlowcontrolV1beta1UserSubject) OptIoK8sAPIFlowcontrolV1beta1UserSubject {
	return OptIoK8sAPIFlowcontrolV1beta1UserSubject{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIFlowcontrolV1beta1UserSubject is optional IoK8sAPIFlowcontrolV1beta1UserSubject.
type OptIoK8sAPIFlowcontrolV1beta1UserSubject struct {
	Value IoK8sAPIFlowcontrolV1beta1UserSubject
	Set   bool
}

// IsSet returns true if OptIoK8sAPIFlowcontrolV1beta1UserSubject was set.
func (o OptIoK8sAPIFlowcontrolV1beta1UserSubject) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIFlowcontrolV1beta1UserSubject) Reset() {
	var v IoK8sAPIFlowcontrolV1beta1UserSubject
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIFlowcontrolV1beta1UserSubject) SetTo(v IoK8sAPIFlowcontrolV1beta1UserSubject) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIFlowcontrolV1beta1UserSubject) Get() (v IoK8sAPIFlowcontrolV1beta1UserSubject, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIFlowcontrolV1beta1UserSubject) Or(d IoK8sAPIFlowcontrolV1beta1UserSubject) IoK8sAPIFlowcontrolV1beta1UserSubject {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod returns new OptIoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod with value set to v.
func NewOptIoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod(v IoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod) OptIoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod {
	return OptIoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod is optional IoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod.
type OptIoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod struct {
	Value IoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod
	Set   bool
}

// IsSet returns true if OptIoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod was set.
func (o OptIoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod) Reset() {
	var v IoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod) SetTo(v IoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod) Get() (v IoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod) Or(d IoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod) IoK8sAPIFlowcontrolV1beta2FlowDistinguisherMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIFlowcontrolV1beta2FlowSchemaSpec returns new OptIoK8sAPIFlowcontrolV1beta2FlowSchemaSpec with value set to v.
func NewOptIoK8sAPIFlowcontrolV1beta2FlowSchemaSpec(v IoK8sAPIFlowcontrolV1beta2FlowSchemaSpec) OptIoK8sAPIFlowcontrolV1beta2FlowSchemaSpec {
	return OptIoK8sAPIFlowcontrolV1beta2FlowSchemaSpec{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIFlowcontrolV1beta2FlowSchemaSpec is optional IoK8sAPIFlowcontrolV1beta2FlowSchemaSpec.
type OptIoK8sAPIFlowcontrolV1beta2FlowSchemaSpec struct {
	Value IoK8sAPIFlowcontrolV1beta2FlowSchemaSpec
	Set   bool
}

// IsSet returns true if OptIoK8sAPIFlowcontrolV1beta2FlowSchemaSpec was set.
func (o OptIoK8sAPIFlowcontrolV1beta2FlowSchemaSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIFlowcontrolV1beta2FlowSchemaSpec) Reset() {
	var v IoK8sAPIFlowcontrolV1beta2FlowSchemaSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIFlowcontrolV1beta2FlowSchemaSpec) SetTo(v IoK8sAPIFlowcontrolV1beta2FlowSchemaSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIFlowcontrolV1beta2FlowSchemaSpec) Get() (v IoK8sAPIFlowcontrolV1beta2FlowSchemaSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIFlowcontrolV1beta2FlowSchemaSpec) Or(d IoK8sAPIFlowcontrolV1beta2FlowSchemaSpec) IoK8sAPIFlowcontrolV1beta2FlowSchemaSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIFlowcontrolV1beta2FlowSchemaStatus returns new OptIoK8sAPIFlowcontrolV1beta2FlowSchemaStatus with value set to v.
func NewOptIoK8sAPIFlowcontrolV1beta2FlowSchemaStatus(v IoK8sAPIFlowcontrolV1beta2FlowSchemaStatus) OptIoK8sAPIFlowcontrolV1beta2FlowSchemaStatus {
	return OptIoK8sAPIFlowcontrolV1beta2FlowSchemaStatus{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIFlowcontrolV1beta2FlowSchemaStatus is optional IoK8sAPIFlowcontrolV1beta2FlowSchemaStatus.
type OptIoK8sAPIFlowcontrolV1beta2FlowSchemaStatus struct {
	Value IoK8sAPIFlowcontrolV1beta2FlowSchemaStatus
	Set   bool
}

// IsSet returns true if OptIoK8sAPIFlowcontrolV1beta2FlowSchemaStatus was set.
func (o OptIoK8sAPIFlowcontrolV1beta2FlowSchemaStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIFlowcontrolV1beta2FlowSchemaStatus) Reset() {
	var v IoK8sAPIFlowcontrolV1beta2FlowSchemaStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIFlowcontrolV1beta2FlowSchemaStatus) SetTo(v IoK8sAPIFlowcontrolV1beta2FlowSchemaStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIFlowcontrolV1beta2FlowSchemaStatus) Get() (v IoK8sAPIFlowcontrolV1beta2FlowSchemaStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIFlowcontrolV1beta2FlowSchemaStatus) Or(d IoK8sAPIFlowcontrolV1beta2FlowSchemaStatus) IoK8sAPIFlowcontrolV1beta2FlowSchemaStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIFlowcontrolV1beta2GroupSubject returns new OptIoK8sAPIFlowcontrolV1beta2GroupSubject with value set to v.
func NewOptIoK8sAPIFlowcontrolV1beta2GroupSubject(v IoK8sAPIFlowcontrolV1beta2GroupSubject) OptIoK8sAPIFlowcontrolV1beta2GroupSubject {
	return OptIoK8sAPIFlowcontrolV1beta2GroupSubject{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIFlowcontrolV1beta2GroupSubject is optional IoK8sAPIFlowcontrolV1beta2GroupSubject.
type OptIoK8sAPIFlowcontrolV1beta2GroupSubject struct {
	Value IoK8sAPIFlowcontrolV1beta2GroupSubject
	Set   bool
}

// IsSet returns true if OptIoK8sAPIFlowcontrolV1beta2GroupSubject was set.
func (o OptIoK8sAPIFlowcontrolV1beta2GroupSubject) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIFlowcontrolV1beta2GroupSubject) Reset() {
	var v IoK8sAPIFlowcontrolV1beta2GroupSubject
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIFlowcontrolV1beta2GroupSubject) SetTo(v IoK8sAPIFlowcontrolV1beta2GroupSubject) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIFlowcontrolV1beta2GroupSubject) Get() (v IoK8sAPIFlowcontrolV1beta2GroupSubject, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIFlowcontrolV1beta2GroupSubject) Or(d IoK8sAPIFlowcontrolV1beta2GroupSubject) IoK8sAPIFlowcontrolV1beta2GroupSubject {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIFlowcontrolV1beta2LimitResponse returns new OptIoK8sAPIFlowcontrolV1beta2LimitResponse with value set to v.
func NewOptIoK8sAPIFlowcontrolV1beta2LimitResponse(v IoK8sAPIFlowcontrolV1beta2LimitResponse) OptIoK8sAPIFlowcontrolV1beta2LimitResponse {
	return OptIoK8sAPIFlowcontrolV1beta2LimitResponse{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIFlowcontrolV1beta2LimitResponse is optional IoK8sAPIFlowcontrolV1beta2LimitResponse.
type OptIoK8sAPIFlowcontrolV1beta2LimitResponse struct {
	Value IoK8sAPIFlowcontrolV1beta2LimitResponse
	Set   bool
}

// IsSet returns true if OptIoK8sAPIFlowcontrolV1beta2LimitResponse was set.
func (o OptIoK8sAPIFlowcontrolV1beta2LimitResponse) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIFlowcontrolV1beta2LimitResponse) Reset() {
	var v IoK8sAPIFlowcontrolV1beta2LimitResponse
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIFlowcontrolV1beta2LimitResponse) SetTo(v IoK8sAPIFlowcontrolV1beta2LimitResponse) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIFlowcontrolV1beta2LimitResponse) Get() (v IoK8sAPIFlowcontrolV1beta2LimitResponse, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIFlowcontrolV1beta2LimitResponse) Or(d IoK8sAPIFlowcontrolV1beta2LimitResponse) IoK8sAPIFlowcontrolV1beta2LimitResponse {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration returns new OptIoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration with value set to v.
func NewOptIoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration(v IoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration) OptIoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration {
	return OptIoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration is optional IoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration.
type OptIoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration struct {
	Value IoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration
	Set   bool
}

// IsSet returns true if OptIoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration was set.
func (o OptIoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration) Reset() {
	var v IoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration) SetTo(v IoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration) Get() (v IoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration) Or(d IoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration) IoK8sAPIFlowcontrolV1beta2LimitedPriorityLevelConfiguration {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec returns new OptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec with value set to v.
func NewOptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec(v IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec) OptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec {
	return OptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec is optional IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec.
type OptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec struct {
	Value IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec
	Set   bool
}

// IsSet returns true if OptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec was set.
func (o OptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec) Reset() {
	var v IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec) SetTo(v IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec) Get() (v IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec) Or(d IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec) IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus returns new OptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus with value set to v.
func NewOptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus(v IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus) OptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus {
	return OptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus is optional IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus.
type OptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus struct {
	Value IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus
	Set   bool
}

// IsSet returns true if OptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus was set.
func (o OptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus) Reset() {
	var v IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus) SetTo(v IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus) Get() (v IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus) Or(d IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus) IoK8sAPIFlowcontrolV1beta2PriorityLevelConfigurationStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIFlowcontrolV1beta2QueuingConfiguration returns new OptIoK8sAPIFlowcontrolV1beta2QueuingConfiguration with value set to v.
func NewOptIoK8sAPIFlowcontrolV1beta2QueuingConfiguration(v IoK8sAPIFlowcontrolV1beta2QueuingConfiguration) OptIoK8sAPIFlowcontrolV1beta2QueuingConfiguration {
	return OptIoK8sAPIFlowcontrolV1beta2QueuingConfiguration{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIFlowcontrolV1beta2QueuingConfiguration is optional IoK8sAPIFlowcontrolV1beta2QueuingConfiguration.
type OptIoK8sAPIFlowcontrolV1beta2QueuingConfiguration struct {
	Value IoK8sAPIFlowcontrolV1beta2QueuingConfiguration
	Set   bool
}

// IsSet returns true if OptIoK8sAPIFlowcontrolV1beta2QueuingConfiguration was set.
func (o OptIoK8sAPIFlowcontrolV1beta2QueuingConfiguration) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIFlowcontrolV1beta2QueuingConfiguration) Reset() {
	var v IoK8sAPIFlowcontrolV1beta2QueuingConfiguration
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIFlowcontrolV1beta2QueuingConfiguration) SetTo(v IoK8sAPIFlowcontrolV1beta2QueuingConfiguration) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIFlowcontrolV1beta2QueuingConfiguration) Get() (v IoK8sAPIFlowcontrolV1beta2QueuingConfiguration, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIFlowcontrolV1beta2QueuingConfiguration) Or(d IoK8sAPIFlowcontrolV1beta2QueuingConfiguration) IoK8sAPIFlowcontrolV1beta2QueuingConfiguration {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIFlowcontrolV1beta2ServiceAccountSubject returns new OptIoK8sAPIFlowcontrolV1beta2ServiceAccountSubject with value set to v.
func NewOptIoK8sAPIFlowcontrolV1beta2ServiceAccountSubject(v IoK8sAPIFlowcontrolV1beta2ServiceAccountSubject) OptIoK8sAPIFlowcontrolV1beta2ServiceAccountSubject {
	return OptIoK8sAPIFlowcontrolV1beta2ServiceAccountSubject{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIFlowcontrolV1beta2ServiceAccountSubject is optional IoK8sAPIFlowcontrolV1beta2ServiceAccountSubject.
type OptIoK8sAPIFlowcontrolV1beta2ServiceAccountSubject struct {
	Value IoK8sAPIFlowcontrolV1beta2ServiceAccountSubject
	Set   bool
}

// IsSet returns true if OptIoK8sAPIFlowcontrolV1beta2ServiceAccountSubject was set.
func (o OptIoK8sAPIFlowcontrolV1beta2ServiceAccountSubject) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIFlowcontrolV1beta2ServiceAccountSubject) Reset() {
	var v IoK8sAPIFlowcontrolV1beta2ServiceAccountSubject
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIFlowcontrolV1beta2ServiceAccountSubject) SetTo(v IoK8sAPIFlowcontrolV1beta2ServiceAccountSubject) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIFlowcontrolV1beta2ServiceAccountSubject) Get() (v IoK8sAPIFlowcontrolV1beta2ServiceAccountSubject, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIFlowcontrolV1beta2ServiceAccountSubject) Or(d IoK8sAPIFlowcontrolV1beta2ServiceAccountSubject) IoK8sAPIFlowcontrolV1beta2ServiceAccountSubject {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIFlowcontrolV1beta2UserSubject returns new OptIoK8sAPIFlowcontrolV1beta2UserSubject with value set to v.
func NewOptIoK8sAPIFlowcontrolV1beta2UserSubject(v IoK8sAPIFlowcontrolV1beta2UserSubject) OptIoK8sAPIFlowcontrolV1beta2UserSubject {
	return OptIoK8sAPIFlowcontrolV1beta2UserSubject{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIFlowcontrolV1beta2UserSubject is optional IoK8sAPIFlowcontrolV1beta2UserSubject.
type OptIoK8sAPIFlowcontrolV1beta2UserSubject struct {
	Value IoK8sAPIFlowcontrolV1beta2UserSubject
	Set   bool
}

// IsSet returns true if OptIoK8sAPIFlowcontrolV1beta2UserSubject was set.
func (o OptIoK8sAPIFlowcontrolV1beta2UserSubject) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIFlowcontrolV1beta2UserSubject) Reset() {
	var v IoK8sAPIFlowcontrolV1beta2UserSubject
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIFlowcontrolV1beta2UserSubject) SetTo(v IoK8sAPIFlowcontrolV1beta2UserSubject) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIFlowcontrolV1beta2UserSubject) Get() (v IoK8sAPIFlowcontrolV1beta2UserSubject, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIFlowcontrolV1beta2UserSubject) Or(d IoK8sAPIFlowcontrolV1beta2UserSubject) IoK8sAPIFlowcontrolV1beta2UserSubject {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPINetworkingV1HTTPIngressRuleValue returns new OptIoK8sAPINetworkingV1HTTPIngressRuleValue with value set to v.
func NewOptIoK8sAPINetworkingV1HTTPIngressRuleValue(v IoK8sAPINetworkingV1HTTPIngressRuleValue) OptIoK8sAPINetworkingV1HTTPIngressRuleValue {
	return OptIoK8sAPINetworkingV1HTTPIngressRuleValue{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPINetworkingV1HTTPIngressRuleValue is optional IoK8sAPINetworkingV1HTTPIngressRuleValue.
type OptIoK8sAPINetworkingV1HTTPIngressRuleValue struct {
	Value IoK8sAPINetworkingV1HTTPIngressRuleValue
	Set   bool
}

// IsSet returns true if OptIoK8sAPINetworkingV1HTTPIngressRuleValue was set.
func (o OptIoK8sAPINetworkingV1HTTPIngressRuleValue) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPINetworkingV1HTTPIngressRuleValue) Reset() {
	var v IoK8sAPINetworkingV1HTTPIngressRuleValue
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPINetworkingV1HTTPIngressRuleValue) SetTo(v IoK8sAPINetworkingV1HTTPIngressRuleValue) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPINetworkingV1HTTPIngressRuleValue) Get() (v IoK8sAPINetworkingV1HTTPIngressRuleValue, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPINetworkingV1HTTPIngressRuleValue) Or(d IoK8sAPINetworkingV1HTTPIngressRuleValue) IoK8sAPINetworkingV1HTTPIngressRuleValue {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPINetworkingV1IPBlock returns new OptIoK8sAPINetworkingV1IPBlock with value set to v.
func NewOptIoK8sAPINetworkingV1IPBlock(v IoK8sAPINetworkingV1IPBlock) OptIoK8sAPINetworkingV1IPBlock {
	return OptIoK8sAPINetworkingV1IPBlock{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPINetworkingV1IPBlock is optional IoK8sAPINetworkingV1IPBlock.
type OptIoK8sAPINetworkingV1IPBlock struct {
	Value IoK8sAPINetworkingV1IPBlock
	Set   bool
}

// IsSet returns true if OptIoK8sAPINetworkingV1IPBlock was set.
func (o OptIoK8sAPINetworkingV1IPBlock) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPINetworkingV1IPBlock) Reset() {
	var v IoK8sAPINetworkingV1IPBlock
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPINetworkingV1IPBlock) SetTo(v IoK8sAPINetworkingV1IPBlock) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPINetworkingV1IPBlock) Get() (v IoK8sAPINetworkingV1IPBlock, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPINetworkingV1IPBlock) Or(d IoK8sAPINetworkingV1IPBlock) IoK8sAPINetworkingV1IPBlock {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPINetworkingV1IngressBackend returns new OptIoK8sAPINetworkingV1IngressBackend with value set to v.
func NewOptIoK8sAPINetworkingV1IngressBackend(v IoK8sAPINetworkingV1IngressBackend) OptIoK8sAPINetworkingV1IngressBackend {
	return OptIoK8sAPINetworkingV1IngressBackend{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPINetworkingV1IngressBackend is optional IoK8sAPINetworkingV1IngressBackend.
type OptIoK8sAPINetworkingV1IngressBackend struct {
	Value IoK8sAPINetworkingV1IngressBackend
	Set   bool
}

// IsSet returns true if OptIoK8sAPINetworkingV1IngressBackend was set.
func (o OptIoK8sAPINetworkingV1IngressBackend) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPINetworkingV1IngressBackend) Reset() {
	var v IoK8sAPINetworkingV1IngressBackend
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPINetworkingV1IngressBackend) SetTo(v IoK8sAPINetworkingV1IngressBackend) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPINetworkingV1IngressBackend) Get() (v IoK8sAPINetworkingV1IngressBackend, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPINetworkingV1IngressBackend) Or(d IoK8sAPINetworkingV1IngressBackend) IoK8sAPINetworkingV1IngressBackend {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPINetworkingV1IngressClassParametersReference returns new OptIoK8sAPINetworkingV1IngressClassParametersReference with value set to v.
func NewOptIoK8sAPINetworkingV1IngressClassParametersReference(v IoK8sAPINetworkingV1IngressClassParametersReference) OptIoK8sAPINetworkingV1IngressClassParametersReference {
	return OptIoK8sAPINetworkingV1IngressClassParametersReference{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPINetworkingV1IngressClassParametersReference is optional IoK8sAPINetworkingV1IngressClassParametersReference.
type OptIoK8sAPINetworkingV1IngressClassParametersReference struct {
	Value IoK8sAPINetworkingV1IngressClassParametersReference
	Set   bool
}

// IsSet returns true if OptIoK8sAPINetworkingV1IngressClassParametersReference was set.
func (o OptIoK8sAPINetworkingV1IngressClassParametersReference) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPINetworkingV1IngressClassParametersReference) Reset() {
	var v IoK8sAPINetworkingV1IngressClassParametersReference
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPINetworkingV1IngressClassParametersReference) SetTo(v IoK8sAPINetworkingV1IngressClassParametersReference) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPINetworkingV1IngressClassParametersReference) Get() (v IoK8sAPINetworkingV1IngressClassParametersReference, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPINetworkingV1IngressClassParametersReference) Or(d IoK8sAPINetworkingV1IngressClassParametersReference) IoK8sAPINetworkingV1IngressClassParametersReference {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPINetworkingV1IngressClassSpec returns new OptIoK8sAPINetworkingV1IngressClassSpec with value set to v.
func NewOptIoK8sAPINetworkingV1IngressClassSpec(v IoK8sAPINetworkingV1IngressClassSpec) OptIoK8sAPINetworkingV1IngressClassSpec {
	return OptIoK8sAPINetworkingV1IngressClassSpec{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPINetworkingV1IngressClassSpec is optional IoK8sAPINetworkingV1IngressClassSpec.
type OptIoK8sAPINetworkingV1IngressClassSpec struct {
	Value IoK8sAPINetworkingV1IngressClassSpec
	Set   bool
}

// IsSet returns true if OptIoK8sAPINetworkingV1IngressClassSpec was set.
func (o OptIoK8sAPINetworkingV1IngressClassSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPINetworkingV1IngressClassSpec) Reset() {
	var v IoK8sAPINetworkingV1IngressClassSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPINetworkingV1IngressClassSpec) SetTo(v IoK8sAPINetworkingV1IngressClassSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPINetworkingV1IngressClassSpec) Get() (v IoK8sAPINetworkingV1IngressClassSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPINetworkingV1IngressClassSpec) Or(d IoK8sAPINetworkingV1IngressClassSpec) IoK8sAPINetworkingV1IngressClassSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPINetworkingV1IngressServiceBackend returns new OptIoK8sAPINetworkingV1IngressServiceBackend with value set to v.
func NewOptIoK8sAPINetworkingV1IngressServiceBackend(v IoK8sAPINetworkingV1IngressServiceBackend) OptIoK8sAPINetworkingV1IngressServiceBackend {
	return OptIoK8sAPINetworkingV1IngressServiceBackend{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPINetworkingV1IngressServiceBackend is optional IoK8sAPINetworkingV1IngressServiceBackend.
type OptIoK8sAPINetworkingV1IngressServiceBackend struct {
	Value IoK8sAPINetworkingV1IngressServiceBackend
	Set   bool
}

// IsSet returns true if OptIoK8sAPINetworkingV1IngressServiceBackend was set.
func (o OptIoK8sAPINetworkingV1IngressServiceBackend) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPINetworkingV1IngressServiceBackend) Reset() {
	var v IoK8sAPINetworkingV1IngressServiceBackend
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPINetworkingV1IngressServiceBackend) SetTo(v IoK8sAPINetworkingV1IngressServiceBackend) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPINetworkingV1IngressServiceBackend) Get() (v IoK8sAPINetworkingV1IngressServiceBackend, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPINetworkingV1IngressServiceBackend) Or(d IoK8sAPINetworkingV1IngressServiceBackend) IoK8sAPINetworkingV1IngressServiceBackend {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPINetworkingV1IngressSpec returns new OptIoK8sAPINetworkingV1IngressSpec with value set to v.
func NewOptIoK8sAPINetworkingV1IngressSpec(v IoK8sAPINetworkingV1IngressSpec) OptIoK8sAPINetworkingV1IngressSpec {
	return OptIoK8sAPINetworkingV1IngressSpec{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPINetworkingV1IngressSpec is optional IoK8sAPINetworkingV1IngressSpec.
type OptIoK8sAPINetworkingV1IngressSpec struct {
	Value IoK8sAPINetworkingV1IngressSpec
	Set   bool
}

// IsSet returns true if OptIoK8sAPINetworkingV1IngressSpec was set.
func (o OptIoK8sAPINetworkingV1IngressSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPINetworkingV1IngressSpec) Reset() {
	var v IoK8sAPINetworkingV1IngressSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPINetworkingV1IngressSpec) SetTo(v IoK8sAPINetworkingV1IngressSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPINetworkingV1IngressSpec) Get() (v IoK8sAPINetworkingV1IngressSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPINetworkingV1IngressSpec) Or(d IoK8sAPINetworkingV1IngressSpec) IoK8sAPINetworkingV1IngressSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPINetworkingV1IngressStatus returns new OptIoK8sAPINetworkingV1IngressStatus with value set to v.
func NewOptIoK8sAPINetworkingV1IngressStatus(v IoK8sAPINetworkingV1IngressStatus) OptIoK8sAPINetworkingV1IngressStatus {
	return OptIoK8sAPINetworkingV1IngressStatus{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPINetworkingV1IngressStatus is optional IoK8sAPINetworkingV1IngressStatus.
type OptIoK8sAPINetworkingV1IngressStatus struct {
	Value IoK8sAPINetworkingV1IngressStatus
	Set   bool
}

// IsSet returns true if OptIoK8sAPINetworkingV1IngressStatus was set.
func (o OptIoK8sAPINetworkingV1IngressStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPINetworkingV1IngressStatus) Reset() {
	var v IoK8sAPINetworkingV1IngressStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPINetworkingV1IngressStatus) SetTo(v IoK8sAPINetworkingV1IngressStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPINetworkingV1IngressStatus) Get() (v IoK8sAPINetworkingV1IngressStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPINetworkingV1IngressStatus) Or(d IoK8sAPINetworkingV1IngressStatus) IoK8sAPINetworkingV1IngressStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPINetworkingV1NetworkPolicySpec returns new OptIoK8sAPINetworkingV1NetworkPolicySpec with value set to v.
func NewOptIoK8sAPINetworkingV1NetworkPolicySpec(v IoK8sAPINetworkingV1NetworkPolicySpec) OptIoK8sAPINetworkingV1NetworkPolicySpec {
	return OptIoK8sAPINetworkingV1NetworkPolicySpec{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPINetworkingV1NetworkPolicySpec is optional IoK8sAPINetworkingV1NetworkPolicySpec.
type OptIoK8sAPINetworkingV1NetworkPolicySpec struct {
	Value IoK8sAPINetworkingV1NetworkPolicySpec
	Set   bool
}

// IsSet returns true if OptIoK8sAPINetworkingV1NetworkPolicySpec was set.
func (o OptIoK8sAPINetworkingV1NetworkPolicySpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPINetworkingV1NetworkPolicySpec) Reset() {
	var v IoK8sAPINetworkingV1NetworkPolicySpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPINetworkingV1NetworkPolicySpec) SetTo(v IoK8sAPINetworkingV1NetworkPolicySpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPINetworkingV1NetworkPolicySpec) Get() (v IoK8sAPINetworkingV1NetworkPolicySpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPINetworkingV1NetworkPolicySpec) Or(d IoK8sAPINetworkingV1NetworkPolicySpec) IoK8sAPINetworkingV1NetworkPolicySpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPINetworkingV1ServiceBackendPort returns new OptIoK8sAPINetworkingV1ServiceBackendPort with value set to v.
func NewOptIoK8sAPINetworkingV1ServiceBackendPort(v IoK8sAPINetworkingV1ServiceBackendPort) OptIoK8sAPINetworkingV1ServiceBackendPort {
	return OptIoK8sAPINetworkingV1ServiceBackendPort{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPINetworkingV1ServiceBackendPort is optional IoK8sAPINetworkingV1ServiceBackendPort.
type OptIoK8sAPINetworkingV1ServiceBackendPort struct {
	Value IoK8sAPINetworkingV1ServiceBackendPort
	Set   bool
}

// IsSet returns true if OptIoK8sAPINetworkingV1ServiceBackendPort was set.
func (o OptIoK8sAPINetworkingV1ServiceBackendPort) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPINetworkingV1ServiceBackendPort) Reset() {
	var v IoK8sAPINetworkingV1ServiceBackendPort
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPINetworkingV1ServiceBackendPort) SetTo(v IoK8sAPINetworkingV1ServiceBackendPort) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPINetworkingV1ServiceBackendPort) Get() (v IoK8sAPINetworkingV1ServiceBackendPort, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPINetworkingV1ServiceBackendPort) Or(d IoK8sAPINetworkingV1ServiceBackendPort) IoK8sAPINetworkingV1ServiceBackendPort {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPINodeV1Overhead returns new OptIoK8sAPINodeV1Overhead with value set to v.
func NewOptIoK8sAPINodeV1Overhead(v IoK8sAPINodeV1Overhead) OptIoK8sAPINodeV1Overhead {
	return OptIoK8sAPINodeV1Overhead{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPINodeV1Overhead is optional IoK8sAPINodeV1Overhead.
type OptIoK8sAPINodeV1Overhead struct {
	Value IoK8sAPINodeV1Overhead
	Set   bool
}

// IsSet returns true if OptIoK8sAPINodeV1Overhead was set.
func (o OptIoK8sAPINodeV1Overhead) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPINodeV1Overhead) Reset() {
	var v IoK8sAPINodeV1Overhead
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPINodeV1Overhead) SetTo(v IoK8sAPINodeV1Overhead) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPINodeV1Overhead) Get() (v IoK8sAPINodeV1Overhead, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPINodeV1Overhead) Or(d IoK8sAPINodeV1Overhead) IoK8sAPINodeV1Overhead {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPINodeV1OverheadPodFixed returns new OptIoK8sAPINodeV1OverheadPodFixed with value set to v.
func NewOptIoK8sAPINodeV1OverheadPodFixed(v IoK8sAPINodeV1OverheadPodFixed) OptIoK8sAPINodeV1OverheadPodFixed {
	return OptIoK8sAPINodeV1OverheadPodFixed{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPINodeV1OverheadPodFixed is optional IoK8sAPINodeV1OverheadPodFixed.
type OptIoK8sAPINodeV1OverheadPodFixed struct {
	Value IoK8sAPINodeV1OverheadPodFixed
	Set   bool
}

// IsSet returns true if OptIoK8sAPINodeV1OverheadPodFixed was set.
func (o OptIoK8sAPINodeV1OverheadPodFixed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPINodeV1OverheadPodFixed) Reset() {
	var v IoK8sAPINodeV1OverheadPodFixed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPINodeV1OverheadPodFixed) SetTo(v IoK8sAPINodeV1OverheadPodFixed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPINodeV1OverheadPodFixed) Get() (v IoK8sAPINodeV1OverheadPodFixed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPINodeV1OverheadPodFixed) Or(d IoK8sAPINodeV1OverheadPodFixed) IoK8sAPINodeV1OverheadPodFixed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPINodeV1Scheduling returns new OptIoK8sAPINodeV1Scheduling with value set to v.
func NewOptIoK8sAPINodeV1Scheduling(v IoK8sAPINodeV1Scheduling) OptIoK8sAPINodeV1Scheduling {
	return OptIoK8sAPINodeV1Scheduling{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPINodeV1Scheduling is optional IoK8sAPINodeV1Scheduling.
type OptIoK8sAPINodeV1Scheduling struct {
	Value IoK8sAPINodeV1Scheduling
	Set   bool
}

// IsSet returns true if OptIoK8sAPINodeV1Scheduling was set.
func (o OptIoK8sAPINodeV1Scheduling) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPINodeV1Scheduling) Reset() {
	var v IoK8sAPINodeV1Scheduling
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPINodeV1Scheduling) SetTo(v IoK8sAPINodeV1Scheduling) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPINodeV1Scheduling) Get() (v IoK8sAPINodeV1Scheduling, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPINodeV1Scheduling) Or(d IoK8sAPINodeV1Scheduling) IoK8sAPINodeV1Scheduling {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPINodeV1SchedulingNodeSelector returns new OptIoK8sAPINodeV1SchedulingNodeSelector with value set to v.
func NewOptIoK8sAPINodeV1SchedulingNodeSelector(v IoK8sAPINodeV1SchedulingNodeSelector) OptIoK8sAPINodeV1SchedulingNodeSelector {
	return OptIoK8sAPINodeV1SchedulingNodeSelector{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPINodeV1SchedulingNodeSelector is optional IoK8sAPINodeV1SchedulingNodeSelector.
type OptIoK8sAPINodeV1SchedulingNodeSelector struct {
	Value IoK8sAPINodeV1SchedulingNodeSelector
	Set   bool
}

// IsSet returns true if OptIoK8sAPINodeV1SchedulingNodeSelector was set.
func (o OptIoK8sAPINodeV1SchedulingNodeSelector) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPINodeV1SchedulingNodeSelector) Reset() {
	var v IoK8sAPINodeV1SchedulingNodeSelector
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPINodeV1SchedulingNodeSelector) SetTo(v IoK8sAPINodeV1SchedulingNodeSelector) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPINodeV1SchedulingNodeSelector) Get() (v IoK8sAPINodeV1SchedulingNodeSelector, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPINodeV1SchedulingNodeSelector) Or(d IoK8sAPINodeV1SchedulingNodeSelector) IoK8sAPINodeV1SchedulingNodeSelector {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPINodeV1alpha1Overhead returns new OptIoK8sAPINodeV1alpha1Overhead with value set to v.
func NewOptIoK8sAPINodeV1alpha1Overhead(v IoK8sAPINodeV1alpha1Overhead) OptIoK8sAPINodeV1alpha1Overhead {
	return OptIoK8sAPINodeV1alpha1Overhead{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPINodeV1alpha1Overhead is optional IoK8sAPINodeV1alpha1Overhead.
type OptIoK8sAPINodeV1alpha1Overhead struct {
	Value IoK8sAPINodeV1alpha1Overhead
	Set   bool
}

// IsSet returns true if OptIoK8sAPINodeV1alpha1Overhead was set.
func (o OptIoK8sAPINodeV1alpha1Overhead) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPINodeV1alpha1Overhead) Reset() {
	var v IoK8sAPINodeV1alpha1Overhead
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPINodeV1alpha1Overhead) SetTo(v IoK8sAPINodeV1alpha1Overhead) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPINodeV1alpha1Overhead) Get() (v IoK8sAPINodeV1alpha1Overhead, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPINodeV1alpha1Overhead) Or(d IoK8sAPINodeV1alpha1Overhead) IoK8sAPINodeV1alpha1Overhead {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPINodeV1alpha1OverheadPodFixed returns new OptIoK8sAPINodeV1alpha1OverheadPodFixed with value set to v.
func NewOptIoK8sAPINodeV1alpha1OverheadPodFixed(v IoK8sAPINodeV1alpha1OverheadPodFixed) OptIoK8sAPINodeV1alpha1OverheadPodFixed {
	return OptIoK8sAPINodeV1alpha1OverheadPodFixed{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPINodeV1alpha1OverheadPodFixed is optional IoK8sAPINodeV1alpha1OverheadPodFixed.
type OptIoK8sAPINodeV1alpha1OverheadPodFixed struct {
	Value IoK8sAPINodeV1alpha1OverheadPodFixed
	Set   bool
}

// IsSet returns true if OptIoK8sAPINodeV1alpha1OverheadPodFixed was set.
func (o OptIoK8sAPINodeV1alpha1OverheadPodFixed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPINodeV1alpha1OverheadPodFixed) Reset() {
	var v IoK8sAPINodeV1alpha1OverheadPodFixed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPINodeV1alpha1OverheadPodFixed) SetTo(v IoK8sAPINodeV1alpha1OverheadPodFixed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPINodeV1alpha1OverheadPodFixed) Get() (v IoK8sAPINodeV1alpha1OverheadPodFixed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPINodeV1alpha1OverheadPodFixed) Or(d IoK8sAPINodeV1alpha1OverheadPodFixed) IoK8sAPINodeV1alpha1OverheadPodFixed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPINodeV1alpha1Scheduling returns new OptIoK8sAPINodeV1alpha1Scheduling with value set to v.
func NewOptIoK8sAPINodeV1alpha1Scheduling(v IoK8sAPINodeV1alpha1Scheduling) OptIoK8sAPINodeV1alpha1Scheduling {
	return OptIoK8sAPINodeV1alpha1Scheduling{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPINodeV1alpha1Scheduling is optional IoK8sAPINodeV1alpha1Scheduling.
type OptIoK8sAPINodeV1alpha1Scheduling struct {
	Value IoK8sAPINodeV1alpha1Scheduling
	Set   bool
}

// IsSet returns true if OptIoK8sAPINodeV1alpha1Scheduling was set.
func (o OptIoK8sAPINodeV1alpha1Scheduling) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPINodeV1alpha1Scheduling) Reset() {
	var v IoK8sAPINodeV1alpha1Scheduling
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPINodeV1alpha1Scheduling) SetTo(v IoK8sAPINodeV1alpha1Scheduling) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPINodeV1alpha1Scheduling) Get() (v IoK8sAPINodeV1alpha1Scheduling, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPINodeV1alpha1Scheduling) Or(d IoK8sAPINodeV1alpha1Scheduling) IoK8sAPINodeV1alpha1Scheduling {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPINodeV1alpha1SchedulingNodeSelector returns new OptIoK8sAPINodeV1alpha1SchedulingNodeSelector with value set to v.
func NewOptIoK8sAPINodeV1alpha1SchedulingNodeSelector(v IoK8sAPINodeV1alpha1SchedulingNodeSelector) OptIoK8sAPINodeV1alpha1SchedulingNodeSelector {
	return OptIoK8sAPINodeV1alpha1SchedulingNodeSelector{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPINodeV1alpha1SchedulingNodeSelector is optional IoK8sAPINodeV1alpha1SchedulingNodeSelector.
type OptIoK8sAPINodeV1alpha1SchedulingNodeSelector struct {
	Value IoK8sAPINodeV1alpha1SchedulingNodeSelector
	Set   bool
}

// IsSet returns true if OptIoK8sAPINodeV1alpha1SchedulingNodeSelector was set.
func (o OptIoK8sAPINodeV1alpha1SchedulingNodeSelector) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPINodeV1alpha1SchedulingNodeSelector) Reset() {
	var v IoK8sAPINodeV1alpha1SchedulingNodeSelector
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPINodeV1alpha1SchedulingNodeSelector) SetTo(v IoK8sAPINodeV1alpha1SchedulingNodeSelector) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPINodeV1alpha1SchedulingNodeSelector) Get() (v IoK8sAPINodeV1alpha1SchedulingNodeSelector, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPINodeV1alpha1SchedulingNodeSelector) Or(d IoK8sAPINodeV1alpha1SchedulingNodeSelector) IoK8sAPINodeV1alpha1SchedulingNodeSelector {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPINodeV1beta1Overhead returns new OptIoK8sAPINodeV1beta1Overhead with value set to v.
func NewOptIoK8sAPINodeV1beta1Overhead(v IoK8sAPINodeV1beta1Overhead) OptIoK8sAPINodeV1beta1Overhead {
	return OptIoK8sAPINodeV1beta1Overhead{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPINodeV1beta1Overhead is optional IoK8sAPINodeV1beta1Overhead.
type OptIoK8sAPINodeV1beta1Overhead struct {
	Value IoK8sAPINodeV1beta1Overhead
	Set   bool
}

// IsSet returns true if OptIoK8sAPINodeV1beta1Overhead was set.
func (o OptIoK8sAPINodeV1beta1Overhead) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPINodeV1beta1Overhead) Reset() {
	var v IoK8sAPINodeV1beta1Overhead
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPINodeV1beta1Overhead) SetTo(v IoK8sAPINodeV1beta1Overhead) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPINodeV1beta1Overhead) Get() (v IoK8sAPINodeV1beta1Overhead, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPINodeV1beta1Overhead) Or(d IoK8sAPINodeV1beta1Overhead) IoK8sAPINodeV1beta1Overhead {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPINodeV1beta1OverheadPodFixed returns new OptIoK8sAPINodeV1beta1OverheadPodFixed with value set to v.
func NewOptIoK8sAPINodeV1beta1OverheadPodFixed(v IoK8sAPINodeV1beta1OverheadPodFixed) OptIoK8sAPINodeV1beta1OverheadPodFixed {
	return OptIoK8sAPINodeV1beta1OverheadPodFixed{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPINodeV1beta1OverheadPodFixed is optional IoK8sAPINodeV1beta1OverheadPodFixed.
type OptIoK8sAPINodeV1beta1OverheadPodFixed struct {
	Value IoK8sAPINodeV1beta1OverheadPodFixed
	Set   bool
}

// IsSet returns true if OptIoK8sAPINodeV1beta1OverheadPodFixed was set.
func (o OptIoK8sAPINodeV1beta1OverheadPodFixed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPINodeV1beta1OverheadPodFixed) Reset() {
	var v IoK8sAPINodeV1beta1OverheadPodFixed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPINodeV1beta1OverheadPodFixed) SetTo(v IoK8sAPINodeV1beta1OverheadPodFixed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPINodeV1beta1OverheadPodFixed) Get() (v IoK8sAPINodeV1beta1OverheadPodFixed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPINodeV1beta1OverheadPodFixed) Or(d IoK8sAPINodeV1beta1OverheadPodFixed) IoK8sAPINodeV1beta1OverheadPodFixed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPINodeV1beta1Scheduling returns new OptIoK8sAPINodeV1beta1Scheduling with value set to v.
func NewOptIoK8sAPINodeV1beta1Scheduling(v IoK8sAPINodeV1beta1Scheduling) OptIoK8sAPINodeV1beta1Scheduling {
	return OptIoK8sAPINodeV1beta1Scheduling{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPINodeV1beta1Scheduling is optional IoK8sAPINodeV1beta1Scheduling.
type OptIoK8sAPINodeV1beta1Scheduling struct {
	Value IoK8sAPINodeV1beta1Scheduling
	Set   bool
}

// IsSet returns true if OptIoK8sAPINodeV1beta1Scheduling was set.
func (o OptIoK8sAPINodeV1beta1Scheduling) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPINodeV1beta1Scheduling) Reset() {
	var v IoK8sAPINodeV1beta1Scheduling
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPINodeV1beta1Scheduling) SetTo(v IoK8sAPINodeV1beta1Scheduling) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPINodeV1beta1Scheduling) Get() (v IoK8sAPINodeV1beta1Scheduling, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPINodeV1beta1Scheduling) Or(d IoK8sAPINodeV1beta1Scheduling) IoK8sAPINodeV1beta1Scheduling {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPINodeV1beta1SchedulingNodeSelector returns new OptIoK8sAPINodeV1beta1SchedulingNodeSelector with value set to v.
func NewOptIoK8sAPINodeV1beta1SchedulingNodeSelector(v IoK8sAPINodeV1beta1SchedulingNodeSelector) OptIoK8sAPINodeV1beta1SchedulingNodeSelector {
	return OptIoK8sAPINodeV1beta1SchedulingNodeSelector{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPINodeV1beta1SchedulingNodeSelector is optional IoK8sAPINodeV1beta1SchedulingNodeSelector.
type OptIoK8sAPINodeV1beta1SchedulingNodeSelector struct {
	Value IoK8sAPINodeV1beta1SchedulingNodeSelector
	Set   bool
}

// IsSet returns true if OptIoK8sAPINodeV1beta1SchedulingNodeSelector was set.
func (o OptIoK8sAPINodeV1beta1SchedulingNodeSelector) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPINodeV1beta1SchedulingNodeSelector) Reset() {
	var v IoK8sAPINodeV1beta1SchedulingNodeSelector
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPINodeV1beta1SchedulingNodeSelector) SetTo(v IoK8sAPINodeV1beta1SchedulingNodeSelector) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPINodeV1beta1SchedulingNodeSelector) Get() (v IoK8sAPINodeV1beta1SchedulingNodeSelector, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPINodeV1beta1SchedulingNodeSelector) Or(d IoK8sAPINodeV1beta1SchedulingNodeSelector) IoK8sAPINodeV1beta1SchedulingNodeSelector {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIPolicyV1PodDisruptionBudgetSpec returns new OptIoK8sAPIPolicyV1PodDisruptionBudgetSpec with value set to v.
func NewOptIoK8sAPIPolicyV1PodDisruptionBudgetSpec(v IoK8sAPIPolicyV1PodDisruptionBudgetSpec) OptIoK8sAPIPolicyV1PodDisruptionBudgetSpec {
	return OptIoK8sAPIPolicyV1PodDisruptionBudgetSpec{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIPolicyV1PodDisruptionBudgetSpec is optional IoK8sAPIPolicyV1PodDisruptionBudgetSpec.
type OptIoK8sAPIPolicyV1PodDisruptionBudgetSpec struct {
	Value IoK8sAPIPolicyV1PodDisruptionBudgetSpec
	Set   bool
}

// IsSet returns true if OptIoK8sAPIPolicyV1PodDisruptionBudgetSpec was set.
func (o OptIoK8sAPIPolicyV1PodDisruptionBudgetSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIPolicyV1PodDisruptionBudgetSpec) Reset() {
	var v IoK8sAPIPolicyV1PodDisruptionBudgetSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIPolicyV1PodDisruptionBudgetSpec) SetTo(v IoK8sAPIPolicyV1PodDisruptionBudgetSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIPolicyV1PodDisruptionBudgetSpec) Get() (v IoK8sAPIPolicyV1PodDisruptionBudgetSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIPolicyV1PodDisruptionBudgetSpec) Or(d IoK8sAPIPolicyV1PodDisruptionBudgetSpec) IoK8sAPIPolicyV1PodDisruptionBudgetSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIPolicyV1PodDisruptionBudgetStatus returns new OptIoK8sAPIPolicyV1PodDisruptionBudgetStatus with value set to v.
func NewOptIoK8sAPIPolicyV1PodDisruptionBudgetStatus(v IoK8sAPIPolicyV1PodDisruptionBudgetStatus) OptIoK8sAPIPolicyV1PodDisruptionBudgetStatus {
	return OptIoK8sAPIPolicyV1PodDisruptionBudgetStatus{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIPolicyV1PodDisruptionBudgetStatus is optional IoK8sAPIPolicyV1PodDisruptionBudgetStatus.
type OptIoK8sAPIPolicyV1PodDisruptionBudgetStatus struct {
	Value IoK8sAPIPolicyV1PodDisruptionBudgetStatus
	Set   bool
}

// IsSet returns true if OptIoK8sAPIPolicyV1PodDisruptionBudgetStatus was set.
func (o OptIoK8sAPIPolicyV1PodDisruptionBudgetStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIPolicyV1PodDisruptionBudgetStatus) Reset() {
	var v IoK8sAPIPolicyV1PodDisruptionBudgetStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIPolicyV1PodDisruptionBudgetStatus) SetTo(v IoK8sAPIPolicyV1PodDisruptionBudgetStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIPolicyV1PodDisruptionBudgetStatus) Get() (v IoK8sAPIPolicyV1PodDisruptionBudgetStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIPolicyV1PodDisruptionBudgetStatus) Or(d IoK8sAPIPolicyV1PodDisruptionBudgetStatus) IoK8sAPIPolicyV1PodDisruptionBudgetStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIPolicyV1PodDisruptionBudgetStatusDisruptedPods returns new OptIoK8sAPIPolicyV1PodDisruptionBudgetStatusDisruptedPods with value set to v.
func NewOptIoK8sAPIPolicyV1PodDisruptionBudgetStatusDisruptedPods(v IoK8sAPIPolicyV1PodDisruptionBudgetStatusDisruptedPods) OptIoK8sAPIPolicyV1PodDisruptionBudgetStatusDisruptedPods {
	return OptIoK8sAPIPolicyV1PodDisruptionBudgetStatusDisruptedPods{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIPolicyV1PodDisruptionBudgetStatusDisruptedPods is optional IoK8sAPIPolicyV1PodDisruptionBudgetStatusDisruptedPods.
type OptIoK8sAPIPolicyV1PodDisruptionBudgetStatusDisruptedPods struct {
	Value IoK8sAPIPolicyV1PodDisruptionBudgetStatusDisruptedPods
	Set   bool
}

// IsSet returns true if OptIoK8sAPIPolicyV1PodDisruptionBudgetStatusDisruptedPods was set.
func (o OptIoK8sAPIPolicyV1PodDisruptionBudgetStatusDisruptedPods) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIPolicyV1PodDisruptionBudgetStatusDisruptedPods) Reset() {
	var v IoK8sAPIPolicyV1PodDisruptionBudgetStatusDisruptedPods
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIPolicyV1PodDisruptionBudgetStatusDisruptedPods) SetTo(v IoK8sAPIPolicyV1PodDisruptionBudgetStatusDisruptedPods) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIPolicyV1PodDisruptionBudgetStatusDisruptedPods) Get() (v IoK8sAPIPolicyV1PodDisruptionBudgetStatusDisruptedPods, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIPolicyV1PodDisruptionBudgetStatusDisruptedPods) Or(d IoK8sAPIPolicyV1PodDisruptionBudgetStatusDisruptedPods) IoK8sAPIPolicyV1PodDisruptionBudgetStatusDisruptedPods {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec returns new OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec with value set to v.
func NewOptIoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec(v IoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec) OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec {
	return OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec is optional IoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec.
type OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec struct {
	Value IoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec
	Set   bool
}

// IsSet returns true if OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec was set.
func (o OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec) Reset() {
	var v IoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec) SetTo(v IoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec) Get() (v IoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec) Or(d IoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec) IoK8sAPIPolicyV1beta1PodDisruptionBudgetSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus returns new OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus with value set to v.
func NewOptIoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus(v IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus) OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus {
	return OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus is optional IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus.
type OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus struct {
	Value IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus
	Set   bool
}

// IsSet returns true if OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus was set.
func (o OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus) Reset() {
	var v IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus) SetTo(v IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus) Get() (v IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus) Or(d IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus) IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIPolicyV1beta1PodDisruptionBudgetStatusDisruptedPods returns new OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetStatusDisruptedPods with value set to v.
func NewOptIoK8sAPIPolicyV1beta1PodDisruptionBudgetStatusDisruptedPods(v IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatusDisruptedPods) OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetStatusDisruptedPods {
	return OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetStatusDisruptedPods{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetStatusDisruptedPods is optional IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatusDisruptedPods.
type OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetStatusDisruptedPods struct {
	Value IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatusDisruptedPods
	Set   bool
}

// IsSet returns true if OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetStatusDisruptedPods was set.
func (o OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetStatusDisruptedPods) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetStatusDisruptedPods) Reset() {
	var v IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatusDisruptedPods
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetStatusDisruptedPods) SetTo(v IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatusDisruptedPods) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetStatusDisruptedPods) Get() (v IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatusDisruptedPods, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIPolicyV1beta1PodDisruptionBudgetStatusDisruptedPods) Or(d IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatusDisruptedPods) IoK8sAPIPolicyV1beta1PodDisruptionBudgetStatusDisruptedPods {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIPolicyV1beta1PodSecurityPolicySpec returns new OptIoK8sAPIPolicyV1beta1PodSecurityPolicySpec with value set to v.
func NewOptIoK8sAPIPolicyV1beta1PodSecurityPolicySpec(v IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) OptIoK8sAPIPolicyV1beta1PodSecurityPolicySpec {
	return OptIoK8sAPIPolicyV1beta1PodSecurityPolicySpec{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIPolicyV1beta1PodSecurityPolicySpec is optional IoK8sAPIPolicyV1beta1PodSecurityPolicySpec.
type OptIoK8sAPIPolicyV1beta1PodSecurityPolicySpec struct {
	Value IoK8sAPIPolicyV1beta1PodSecurityPolicySpec
	Set   bool
}

// IsSet returns true if OptIoK8sAPIPolicyV1beta1PodSecurityPolicySpec was set.
func (o OptIoK8sAPIPolicyV1beta1PodSecurityPolicySpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIPolicyV1beta1PodSecurityPolicySpec) Reset() {
	var v IoK8sAPIPolicyV1beta1PodSecurityPolicySpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIPolicyV1beta1PodSecurityPolicySpec) SetTo(v IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIPolicyV1beta1PodSecurityPolicySpec) Get() (v IoK8sAPIPolicyV1beta1PodSecurityPolicySpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIPolicyV1beta1PodSecurityPolicySpec) Or(d IoK8sAPIPolicyV1beta1PodSecurityPolicySpec) IoK8sAPIPolicyV1beta1PodSecurityPolicySpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions returns new OptIoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions with value set to v.
func NewOptIoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions(v IoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions) OptIoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions {
	return OptIoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions is optional IoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions.
type OptIoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions struct {
	Value IoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions
	Set   bool
}

// IsSet returns true if OptIoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions was set.
func (o OptIoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions) Reset() {
	var v IoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions) SetTo(v IoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions) Get() (v IoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions) Or(d IoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions) IoK8sAPIPolicyV1beta1RunAsGroupStrategyOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions returns new OptIoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions with value set to v.
func NewOptIoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions(v IoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions) OptIoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions {
	return OptIoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions is optional IoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions.
type OptIoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions struct {
	Value IoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions
	Set   bool
}

// IsSet returns true if OptIoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions was set.
func (o OptIoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions) Reset() {
	var v IoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions) SetTo(v IoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions) Get() (v IoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions) Or(d IoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions) IoK8sAPIPolicyV1beta1RuntimeClassStrategyOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIRbacV1AggregationRule returns new OptIoK8sAPIRbacV1AggregationRule with value set to v.
func NewOptIoK8sAPIRbacV1AggregationRule(v IoK8sAPIRbacV1AggregationRule) OptIoK8sAPIRbacV1AggregationRule {
	return OptIoK8sAPIRbacV1AggregationRule{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIRbacV1AggregationRule is optional IoK8sAPIRbacV1AggregationRule.
type OptIoK8sAPIRbacV1AggregationRule struct {
	Value IoK8sAPIRbacV1AggregationRule
	Set   bool
}

// IsSet returns true if OptIoK8sAPIRbacV1AggregationRule was set.
func (o OptIoK8sAPIRbacV1AggregationRule) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIRbacV1AggregationRule) Reset() {
	var v IoK8sAPIRbacV1AggregationRule
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIRbacV1AggregationRule) SetTo(v IoK8sAPIRbacV1AggregationRule) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIRbacV1AggregationRule) Get() (v IoK8sAPIRbacV1AggregationRule, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIRbacV1AggregationRule) Or(d IoK8sAPIRbacV1AggregationRule) IoK8sAPIRbacV1AggregationRule {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIStorageV1StorageClassParameters returns new OptIoK8sAPIStorageV1StorageClassParameters with value set to v.
func NewOptIoK8sAPIStorageV1StorageClassParameters(v IoK8sAPIStorageV1StorageClassParameters) OptIoK8sAPIStorageV1StorageClassParameters {
	return OptIoK8sAPIStorageV1StorageClassParameters{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIStorageV1StorageClassParameters is optional IoK8sAPIStorageV1StorageClassParameters.
type OptIoK8sAPIStorageV1StorageClassParameters struct {
	Value IoK8sAPIStorageV1StorageClassParameters
	Set   bool
}

// IsSet returns true if OptIoK8sAPIStorageV1StorageClassParameters was set.
func (o OptIoK8sAPIStorageV1StorageClassParameters) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIStorageV1StorageClassParameters) Reset() {
	var v IoK8sAPIStorageV1StorageClassParameters
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIStorageV1StorageClassParameters) SetTo(v IoK8sAPIStorageV1StorageClassParameters) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIStorageV1StorageClassParameters) Get() (v IoK8sAPIStorageV1StorageClassParameters, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIStorageV1StorageClassParameters) Or(d IoK8sAPIStorageV1StorageClassParameters) IoK8sAPIStorageV1StorageClassParameters {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIStorageV1VolumeAttachmentStatus returns new OptIoK8sAPIStorageV1VolumeAttachmentStatus with value set to v.
func NewOptIoK8sAPIStorageV1VolumeAttachmentStatus(v IoK8sAPIStorageV1VolumeAttachmentStatus) OptIoK8sAPIStorageV1VolumeAttachmentStatus {
	return OptIoK8sAPIStorageV1VolumeAttachmentStatus{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIStorageV1VolumeAttachmentStatus is optional IoK8sAPIStorageV1VolumeAttachmentStatus.
type OptIoK8sAPIStorageV1VolumeAttachmentStatus struct {
	Value IoK8sAPIStorageV1VolumeAttachmentStatus
	Set   bool
}

// IsSet returns true if OptIoK8sAPIStorageV1VolumeAttachmentStatus was set.
func (o OptIoK8sAPIStorageV1VolumeAttachmentStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIStorageV1VolumeAttachmentStatus) Reset() {
	var v IoK8sAPIStorageV1VolumeAttachmentStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIStorageV1VolumeAttachmentStatus) SetTo(v IoK8sAPIStorageV1VolumeAttachmentStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIStorageV1VolumeAttachmentStatus) Get() (v IoK8sAPIStorageV1VolumeAttachmentStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIStorageV1VolumeAttachmentStatus) Or(d IoK8sAPIStorageV1VolumeAttachmentStatus) IoK8sAPIStorageV1VolumeAttachmentStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIStorageV1VolumeAttachmentStatusAttachmentMetadata returns new OptIoK8sAPIStorageV1VolumeAttachmentStatusAttachmentMetadata with value set to v.
func NewOptIoK8sAPIStorageV1VolumeAttachmentStatusAttachmentMetadata(v IoK8sAPIStorageV1VolumeAttachmentStatusAttachmentMetadata) OptIoK8sAPIStorageV1VolumeAttachmentStatusAttachmentMetadata {
	return OptIoK8sAPIStorageV1VolumeAttachmentStatusAttachmentMetadata{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIStorageV1VolumeAttachmentStatusAttachmentMetadata is optional IoK8sAPIStorageV1VolumeAttachmentStatusAttachmentMetadata.
type OptIoK8sAPIStorageV1VolumeAttachmentStatusAttachmentMetadata struct {
	Value IoK8sAPIStorageV1VolumeAttachmentStatusAttachmentMetadata
	Set   bool
}

// IsSet returns true if OptIoK8sAPIStorageV1VolumeAttachmentStatusAttachmentMetadata was set.
func (o OptIoK8sAPIStorageV1VolumeAttachmentStatusAttachmentMetadata) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIStorageV1VolumeAttachmentStatusAttachmentMetadata) Reset() {
	var v IoK8sAPIStorageV1VolumeAttachmentStatusAttachmentMetadata
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIStorageV1VolumeAttachmentStatusAttachmentMetadata) SetTo(v IoK8sAPIStorageV1VolumeAttachmentStatusAttachmentMetadata) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIStorageV1VolumeAttachmentStatusAttachmentMetadata) Get() (v IoK8sAPIStorageV1VolumeAttachmentStatusAttachmentMetadata, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIStorageV1VolumeAttachmentStatusAttachmentMetadata) Or(d IoK8sAPIStorageV1VolumeAttachmentStatusAttachmentMetadata) IoK8sAPIStorageV1VolumeAttachmentStatusAttachmentMetadata {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIStorageV1VolumeError returns new OptIoK8sAPIStorageV1VolumeError with value set to v.
func NewOptIoK8sAPIStorageV1VolumeError(v IoK8sAPIStorageV1VolumeError) OptIoK8sAPIStorageV1VolumeError {
	return OptIoK8sAPIStorageV1VolumeError{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIStorageV1VolumeError is optional IoK8sAPIStorageV1VolumeError.
type OptIoK8sAPIStorageV1VolumeError struct {
	Value IoK8sAPIStorageV1VolumeError
	Set   bool
}

// IsSet returns true if OptIoK8sAPIStorageV1VolumeError was set.
func (o OptIoK8sAPIStorageV1VolumeError) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIStorageV1VolumeError) Reset() {
	var v IoK8sAPIStorageV1VolumeError
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIStorageV1VolumeError) SetTo(v IoK8sAPIStorageV1VolumeError) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIStorageV1VolumeError) Get() (v IoK8sAPIStorageV1VolumeError, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIStorageV1VolumeError) Or(d IoK8sAPIStorageV1VolumeError) IoK8sAPIStorageV1VolumeError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sAPIStorageV1VolumeNodeResources returns new OptIoK8sAPIStorageV1VolumeNodeResources with value set to v.
func NewOptIoK8sAPIStorageV1VolumeNodeResources(v IoK8sAPIStorageV1VolumeNodeResources) OptIoK8sAPIStorageV1VolumeNodeResources {
	return OptIoK8sAPIStorageV1VolumeNodeResources{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sAPIStorageV1VolumeNodeResources is optional IoK8sAPIStorageV1VolumeNodeResources.
type OptIoK8sAPIStorageV1VolumeNodeResources struct {
	Value IoK8sAPIStorageV1VolumeNodeResources
	Set   bool
}

// IsSet returns true if OptIoK8sAPIStorageV1VolumeNodeResources was set.
func (o OptIoK8sAPIStorageV1VolumeNodeResources) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sAPIStorageV1VolumeNodeResources) Reset() {
	var v IoK8sAPIStorageV1VolumeNodeResources
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sAPIStorageV1VolumeNodeResources) SetTo(v IoK8sAPIStorageV1VolumeNodeResources) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sAPIStorageV1VolumeNodeResources) Get() (v IoK8sAPIStorageV1VolumeNodeResources, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sAPIStorageV1VolumeNodeResources) Or(d IoK8sAPIStorageV1VolumeNodeResources) IoK8sAPIStorageV1VolumeNodeResources {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion returns new OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion with value set to v.
func NewOptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion(v IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion) OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion {
	return OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion is optional IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion.
type OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion struct {
	Value IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion
	Set   bool
}

// IsSet returns true if OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion was set.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion) Reset() {
	var v IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion) SetTo(v IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion) Get() (v IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion) Or(d IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion) IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames returns new OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames with value set to v.
func NewOptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames(v IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames) OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames {
	return OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames is optional IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames.
type OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames struct {
	Value IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames
	Set   bool
}

// IsSet returns true if OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames was set.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames) Reset() {
	var v IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames) SetTo(v IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames) Get() (v IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames) Or(d IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames) IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus returns new OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus with value set to v.
func NewOptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus(v IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus) OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus {
	return OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus is optional IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus.
type OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus struct {
	Value IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus
	Set   bool
}

// IsSet returns true if OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus was set.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus) Reset() {
	var v IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus) SetTo(v IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus) Get() (v IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus) Or(d IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus) IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale returns new OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale with value set to v.
func NewOptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale(v IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale) OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale {
	return OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale is optional IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale.
type OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale struct {
	Value IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale
	Set   bool
}

// IsSet returns true if OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale was set.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale) Reset() {
	var v IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale) SetTo(v IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale) Get() (v IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale) Or(d IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale) IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources returns new OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources with value set to v.
func NewOptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources(v IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources) OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources {
	return OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources is optional IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources.
type OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources struct {
	Value IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources
	Set   bool
}

// IsSet returns true if OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources was set.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources) Reset() {
	var v IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources) SetTo(v IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources) Get() (v IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources) Or(d IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources) IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation returns new OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation with value set to v.
func NewOptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation(v IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation) OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation {
	return OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation is optional IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation.
type OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation struct {
	Value IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation
	Set   bool
}

// IsSet returns true if OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation was set.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation) Reset() {
	var v IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation) SetTo(v IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation) Get() (v IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation) Or(d IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation) IoK8sApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation returns new OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation with value set to v.
func NewOptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation(v IoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation) OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation {
	return OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation is optional IoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation.
type OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation struct {
	Value IoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation
	Set   bool
}

// IsSet returns true if OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation was set.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation) Reset() {
	var v IoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation) SetTo(v IoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation) Get() (v IoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation) Or(d IoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation) IoK8sApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps returns new OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps with value set to v.
func NewOptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps(v IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps {
	return OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps is optional IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps.
type OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps struct {
	Value IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps
	Set   bool
}

// IsSet returns true if OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps was set.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) Reset() {
	var v IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) SetTo(v IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) Get() (v IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) Or(d IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps) IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDefinitions returns new OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDefinitions with value set to v.
func NewOptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDefinitions(v IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDefinitions) OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDefinitions {
	return OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDefinitions{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDefinitions is optional IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDefinitions.
type OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDefinitions struct {
	Value IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDefinitions
	Set   bool
}

// IsSet returns true if OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDefinitions was set.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDefinitions) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDefinitions) Reset() {
	var v IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDefinitions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDefinitions) SetTo(v IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDefinitions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDefinitions) Get() (v IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDefinitions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDefinitions) Or(d IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDefinitions) IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDefinitions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDependencies returns new OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDependencies with value set to v.
func NewOptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDependencies(v IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDependencies) OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDependencies {
	return OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDependencies{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDependencies is optional IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDependencies.
type OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDependencies struct {
	Value IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDependencies
	Set   bool
}

// IsSet returns true if OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDependencies was set.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDependencies) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDependencies) Reset() {
	var v IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDependencies
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDependencies) SetTo(v IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDependencies) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDependencies) Get() (v IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDependencies, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDependencies) Or(d IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDependencies) IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsDependencies {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsPatternProperties returns new OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsPatternProperties with value set to v.
func NewOptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsPatternProperties(v IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsPatternProperties) OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsPatternProperties {
	return OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsPatternProperties{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsPatternProperties is optional IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsPatternProperties.
type OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsPatternProperties struct {
	Value IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsPatternProperties
	Set   bool
}

// IsSet returns true if OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsPatternProperties was set.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsPatternProperties) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsPatternProperties) Reset() {
	var v IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsPatternProperties
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsPatternProperties) SetTo(v IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsPatternProperties) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsPatternProperties) Get() (v IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsPatternProperties, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsPatternProperties) Or(d IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsPatternProperties) IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsPatternProperties {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsProperties returns new OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsProperties with value set to v.
func NewOptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsProperties(v IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsProperties) OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsProperties {
	return OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsProperties{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsProperties is optional IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsProperties.
type OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsProperties struct {
	Value IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsProperties
	Set   bool
}

// IsSet returns true if OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsProperties was set.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsProperties) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsProperties) Reset() {
	var v IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsProperties
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsProperties) SetTo(v IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsProperties) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsProperties) Get() (v IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsProperties, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsProperties) Or(d IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsProperties) IoK8sApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsProperties {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference returns new OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference with value set to v.
func NewOptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference(v IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference) OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference {
	return OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference is optional IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference.
type OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference struct {
	Value IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference
	Set   bool
}

// IsSet returns true if OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference was set.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference) Reset() {
	var v IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference) SetTo(v IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference) Get() (v IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference) Or(d IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference) IoK8sApiextensionsApiserverPkgApisApiextensionsV1ServiceReference {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig returns new OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig with value set to v.
func NewOptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig(v IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig) OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig {
	return OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig is optional IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig.
type OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig struct {
	Value IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig
	Set   bool
}

// IsSet returns true if OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig was set.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig) Reset() {
	var v IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig) SetTo(v IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig) Get() (v IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig) Or(d IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig) IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion returns new OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion with value set to v.
func NewOptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion(v IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion) OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion {
	return OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion is optional IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion.
type OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion struct {
	Value IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion
	Set   bool
}

// IsSet returns true if OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion was set.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion) Reset() {
	var v IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion) SetTo(v IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion) Get() (v IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion) Or(d IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion) IoK8sApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sApimachineryPkgAPIResourceQuantity returns new OptIoK8sApimachineryPkgAPIResourceQuantity with value set to v.
func NewOptIoK8sApimachineryPkgAPIResourceQuantity(v IoK8sApimachineryPkgAPIResourceQuantity) OptIoK8sApimachineryPkgAPIResourceQuantity {
	return OptIoK8sApimachineryPkgAPIResourceQuantity{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sApimachineryPkgAPIResourceQuantity is optional IoK8sApimachineryPkgAPIResourceQuantity.
type OptIoK8sApimachineryPkgAPIResourceQuantity struct {
	Value IoK8sApimachineryPkgAPIResourceQuantity
	Set   bool
}

// IsSet returns true if OptIoK8sApimachineryPkgAPIResourceQuantity was set.
func (o OptIoK8sApimachineryPkgAPIResourceQuantity) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sApimachineryPkgAPIResourceQuantity) Reset() {
	var v IoK8sApimachineryPkgAPIResourceQuantity
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sApimachineryPkgAPIResourceQuantity) SetTo(v IoK8sApimachineryPkgAPIResourceQuantity) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sApimachineryPkgAPIResourceQuantity) Get() (v IoK8sApimachineryPkgAPIResourceQuantity, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sApimachineryPkgAPIResourceQuantity) Or(d IoK8sApimachineryPkgAPIResourceQuantity) IoK8sApimachineryPkgAPIResourceQuantity {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery returns new OptIoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery with value set to v.
func NewOptIoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery(v IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery) OptIoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery {
	return OptIoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery is optional IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery.
type OptIoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery struct {
	Value IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery
	Set   bool
}

// IsSet returns true if OptIoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery was set.
func (o OptIoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery) Reset() {
	var v IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery) SetTo(v IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery) Get() (v IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery) Or(d IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery) IoK8sApimachineryPkgApisMetaV1GroupVersionForDiscovery {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sApimachineryPkgApisMetaV1LabelSelector returns new OptIoK8sApimachineryPkgApisMetaV1LabelSelector with value set to v.
func NewOptIoK8sApimachineryPkgApisMetaV1LabelSelector(v IoK8sApimachineryPkgApisMetaV1LabelSelector) OptIoK8sApimachineryPkgApisMetaV1LabelSelector {
	return OptIoK8sApimachineryPkgApisMetaV1LabelSelector{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sApimachineryPkgApisMetaV1LabelSelector is optional IoK8sApimachineryPkgApisMetaV1LabelSelector.
type OptIoK8sApimachineryPkgApisMetaV1LabelSelector struct {
	Value IoK8sApimachineryPkgApisMetaV1LabelSelector
	Set   bool
}

// IsSet returns true if OptIoK8sApimachineryPkgApisMetaV1LabelSelector was set.
func (o OptIoK8sApimachineryPkgApisMetaV1LabelSelector) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sApimachineryPkgApisMetaV1LabelSelector) Reset() {
	var v IoK8sApimachineryPkgApisMetaV1LabelSelector
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sApimachineryPkgApisMetaV1LabelSelector) SetTo(v IoK8sApimachineryPkgApisMetaV1LabelSelector) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sApimachineryPkgApisMetaV1LabelSelector) Get() (v IoK8sApimachineryPkgApisMetaV1LabelSelector, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sApimachineryPkgApisMetaV1LabelSelector) Or(d IoK8sApimachineryPkgApisMetaV1LabelSelector) IoK8sApimachineryPkgApisMetaV1LabelSelector {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sApimachineryPkgApisMetaV1LabelSelectorMatchLabels returns new OptIoK8sApimachineryPkgApisMetaV1LabelSelectorMatchLabels with value set to v.
func NewOptIoK8sApimachineryPkgApisMetaV1LabelSelectorMatchLabels(v IoK8sApimachineryPkgApisMetaV1LabelSelectorMatchLabels) OptIoK8sApimachineryPkgApisMetaV1LabelSelectorMatchLabels {
	return OptIoK8sApimachineryPkgApisMetaV1LabelSelectorMatchLabels{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sApimachineryPkgApisMetaV1LabelSelectorMatchLabels is optional IoK8sApimachineryPkgApisMetaV1LabelSelectorMatchLabels.
type OptIoK8sApimachineryPkgApisMetaV1LabelSelectorMatchLabels struct {
	Value IoK8sApimachineryPkgApisMetaV1LabelSelectorMatchLabels
	Set   bool
}

// IsSet returns true if OptIoK8sApimachineryPkgApisMetaV1LabelSelectorMatchLabels was set.
func (o OptIoK8sApimachineryPkgApisMetaV1LabelSelectorMatchLabels) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sApimachineryPkgApisMetaV1LabelSelectorMatchLabels) Reset() {
	var v IoK8sApimachineryPkgApisMetaV1LabelSelectorMatchLabels
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sApimachineryPkgApisMetaV1LabelSelectorMatchLabels) SetTo(v IoK8sApimachineryPkgApisMetaV1LabelSelectorMatchLabels) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sApimachineryPkgApisMetaV1LabelSelectorMatchLabels) Get() (v IoK8sApimachineryPkgApisMetaV1LabelSelectorMatchLabels, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sApimachineryPkgApisMetaV1LabelSelectorMatchLabels) Or(d IoK8sApimachineryPkgApisMetaV1LabelSelectorMatchLabels) IoK8sApimachineryPkgApisMetaV1LabelSelectorMatchLabels {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sApimachineryPkgApisMetaV1ListMeta returns new OptIoK8sApimachineryPkgApisMetaV1ListMeta with value set to v.
func NewOptIoK8sApimachineryPkgApisMetaV1ListMeta(v IoK8sApimachineryPkgApisMetaV1ListMeta) OptIoK8sApimachineryPkgApisMetaV1ListMeta {
	return OptIoK8sApimachineryPkgApisMetaV1ListMeta{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sApimachineryPkgApisMetaV1ListMeta is optional IoK8sApimachineryPkgApisMetaV1ListMeta.
type OptIoK8sApimachineryPkgApisMetaV1ListMeta struct {
	Value IoK8sApimachineryPkgApisMetaV1ListMeta
	Set   bool
}

// IsSet returns true if OptIoK8sApimachineryPkgApisMetaV1ListMeta was set.
func (o OptIoK8sApimachineryPkgApisMetaV1ListMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sApimachineryPkgApisMetaV1ListMeta) Reset() {
	var v IoK8sApimachineryPkgApisMetaV1ListMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sApimachineryPkgApisMetaV1ListMeta) SetTo(v IoK8sApimachineryPkgApisMetaV1ListMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sApimachineryPkgApisMetaV1ListMeta) Get() (v IoK8sApimachineryPkgApisMetaV1ListMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sApimachineryPkgApisMetaV1ListMeta) Or(d IoK8sApimachineryPkgApisMetaV1ListMeta) IoK8sApimachineryPkgApisMetaV1ListMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sApimachineryPkgApisMetaV1MicroTime returns new OptIoK8sApimachineryPkgApisMetaV1MicroTime with value set to v.
func NewOptIoK8sApimachineryPkgApisMetaV1MicroTime(v IoK8sApimachineryPkgApisMetaV1MicroTime) OptIoK8sApimachineryPkgApisMetaV1MicroTime {
	return OptIoK8sApimachineryPkgApisMetaV1MicroTime{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sApimachineryPkgApisMetaV1MicroTime is optional IoK8sApimachineryPkgApisMetaV1MicroTime.
type OptIoK8sApimachineryPkgApisMetaV1MicroTime struct {
	Value IoK8sApimachineryPkgApisMetaV1MicroTime
	Set   bool
}

// IsSet returns true if OptIoK8sApimachineryPkgApisMetaV1MicroTime was set.
func (o OptIoK8sApimachineryPkgApisMetaV1MicroTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sApimachineryPkgApisMetaV1MicroTime) Reset() {
	var v IoK8sApimachineryPkgApisMetaV1MicroTime
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sApimachineryPkgApisMetaV1MicroTime) SetTo(v IoK8sApimachineryPkgApisMetaV1MicroTime) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sApimachineryPkgApisMetaV1MicroTime) Get() (v IoK8sApimachineryPkgApisMetaV1MicroTime, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sApimachineryPkgApisMetaV1MicroTime) Or(d IoK8sApimachineryPkgApisMetaV1MicroTime) IoK8sApimachineryPkgApisMetaV1MicroTime {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sApimachineryPkgApisMetaV1ObjectMeta returns new OptIoK8sApimachineryPkgApisMetaV1ObjectMeta with value set to v.
func NewOptIoK8sApimachineryPkgApisMetaV1ObjectMeta(v IoK8sApimachineryPkgApisMetaV1ObjectMeta) OptIoK8sApimachineryPkgApisMetaV1ObjectMeta {
	return OptIoK8sApimachineryPkgApisMetaV1ObjectMeta{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sApimachineryPkgApisMetaV1ObjectMeta is optional IoK8sApimachineryPkgApisMetaV1ObjectMeta.
type OptIoK8sApimachineryPkgApisMetaV1ObjectMeta struct {
	Value IoK8sApimachineryPkgApisMetaV1ObjectMeta
	Set   bool
}

// IsSet returns true if OptIoK8sApimachineryPkgApisMetaV1ObjectMeta was set.
func (o OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) Reset() {
	var v IoK8sApimachineryPkgApisMetaV1ObjectMeta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) SetTo(v IoK8sApimachineryPkgApisMetaV1ObjectMeta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) Get() (v IoK8sApimachineryPkgApisMetaV1ObjectMeta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sApimachineryPkgApisMetaV1ObjectMeta) Or(d IoK8sApimachineryPkgApisMetaV1ObjectMeta) IoK8sApimachineryPkgApisMetaV1ObjectMeta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sApimachineryPkgApisMetaV1ObjectMetaAnnotations returns new OptIoK8sApimachineryPkgApisMetaV1ObjectMetaAnnotations with value set to v.
func NewOptIoK8sApimachineryPkgApisMetaV1ObjectMetaAnnotations(v IoK8sApimachineryPkgApisMetaV1ObjectMetaAnnotations) OptIoK8sApimachineryPkgApisMetaV1ObjectMetaAnnotations {
	return OptIoK8sApimachineryPkgApisMetaV1ObjectMetaAnnotations{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sApimachineryPkgApisMetaV1ObjectMetaAnnotations is optional IoK8sApimachineryPkgApisMetaV1ObjectMetaAnnotations.
type OptIoK8sApimachineryPkgApisMetaV1ObjectMetaAnnotations struct {
	Value IoK8sApimachineryPkgApisMetaV1ObjectMetaAnnotations
	Set   bool
}

// IsSet returns true if OptIoK8sApimachineryPkgApisMetaV1ObjectMetaAnnotations was set.
func (o OptIoK8sApimachineryPkgApisMetaV1ObjectMetaAnnotations) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sApimachineryPkgApisMetaV1ObjectMetaAnnotations) Reset() {
	var v IoK8sApimachineryPkgApisMetaV1ObjectMetaAnnotations
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sApimachineryPkgApisMetaV1ObjectMetaAnnotations) SetTo(v IoK8sApimachineryPkgApisMetaV1ObjectMetaAnnotations) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sApimachineryPkgApisMetaV1ObjectMetaAnnotations) Get() (v IoK8sApimachineryPkgApisMetaV1ObjectMetaAnnotations, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sApimachineryPkgApisMetaV1ObjectMetaAnnotations) Or(d IoK8sApimachineryPkgApisMetaV1ObjectMetaAnnotations) IoK8sApimachineryPkgApisMetaV1ObjectMetaAnnotations {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sApimachineryPkgApisMetaV1ObjectMetaLabels returns new OptIoK8sApimachineryPkgApisMetaV1ObjectMetaLabels with value set to v.
func NewOptIoK8sApimachineryPkgApisMetaV1ObjectMetaLabels(v IoK8sApimachineryPkgApisMetaV1ObjectMetaLabels) OptIoK8sApimachineryPkgApisMetaV1ObjectMetaLabels {
	return OptIoK8sApimachineryPkgApisMetaV1ObjectMetaLabels{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sApimachineryPkgApisMetaV1ObjectMetaLabels is optional IoK8sApimachineryPkgApisMetaV1ObjectMetaLabels.
type OptIoK8sApimachineryPkgApisMetaV1ObjectMetaLabels struct {
	Value IoK8sApimachineryPkgApisMetaV1ObjectMetaLabels
	Set   bool
}

// IsSet returns true if OptIoK8sApimachineryPkgApisMetaV1ObjectMetaLabels was set.
func (o OptIoK8sApimachineryPkgApisMetaV1ObjectMetaLabels) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sApimachineryPkgApisMetaV1ObjectMetaLabels) Reset() {
	var v IoK8sApimachineryPkgApisMetaV1ObjectMetaLabels
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sApimachineryPkgApisMetaV1ObjectMetaLabels) SetTo(v IoK8sApimachineryPkgApisMetaV1ObjectMetaLabels) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sApimachineryPkgApisMetaV1ObjectMetaLabels) Get() (v IoK8sApimachineryPkgApisMetaV1ObjectMetaLabels, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sApimachineryPkgApisMetaV1ObjectMetaLabels) Or(d IoK8sApimachineryPkgApisMetaV1ObjectMetaLabels) IoK8sApimachineryPkgApisMetaV1ObjectMetaLabels {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sApimachineryPkgApisMetaV1Time returns new OptIoK8sApimachineryPkgApisMetaV1Time with value set to v.
func NewOptIoK8sApimachineryPkgApisMetaV1Time(v IoK8sApimachineryPkgApisMetaV1Time) OptIoK8sApimachineryPkgApisMetaV1Time {
	return OptIoK8sApimachineryPkgApisMetaV1Time{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sApimachineryPkgApisMetaV1Time is optional IoK8sApimachineryPkgApisMetaV1Time.
type OptIoK8sApimachineryPkgApisMetaV1Time struct {
	Value IoK8sApimachineryPkgApisMetaV1Time
	Set   bool
}

// IsSet returns true if OptIoK8sApimachineryPkgApisMetaV1Time was set.
func (o OptIoK8sApimachineryPkgApisMetaV1Time) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sApimachineryPkgApisMetaV1Time) Reset() {
	var v IoK8sApimachineryPkgApisMetaV1Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sApimachineryPkgApisMetaV1Time) SetTo(v IoK8sApimachineryPkgApisMetaV1Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sApimachineryPkgApisMetaV1Time) Get() (v IoK8sApimachineryPkgApisMetaV1Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sApimachineryPkgApisMetaV1Time) Or(d IoK8sApimachineryPkgApisMetaV1Time) IoK8sApimachineryPkgApisMetaV1Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sApimachineryPkgUtilIntstrIntOrString returns new OptIoK8sApimachineryPkgUtilIntstrIntOrString with value set to v.
func NewOptIoK8sApimachineryPkgUtilIntstrIntOrString(v IoK8sApimachineryPkgUtilIntstrIntOrString) OptIoK8sApimachineryPkgUtilIntstrIntOrString {
	return OptIoK8sApimachineryPkgUtilIntstrIntOrString{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sApimachineryPkgUtilIntstrIntOrString is optional IoK8sApimachineryPkgUtilIntstrIntOrString.
type OptIoK8sApimachineryPkgUtilIntstrIntOrString struct {
	Value IoK8sApimachineryPkgUtilIntstrIntOrString
	Set   bool
}

// IsSet returns true if OptIoK8sApimachineryPkgUtilIntstrIntOrString was set.
func (o OptIoK8sApimachineryPkgUtilIntstrIntOrString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sApimachineryPkgUtilIntstrIntOrString) Reset() {
	var v IoK8sApimachineryPkgUtilIntstrIntOrString
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sApimachineryPkgUtilIntstrIntOrString) SetTo(v IoK8sApimachineryPkgUtilIntstrIntOrString) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sApimachineryPkgUtilIntstrIntOrString) Get() (v IoK8sApimachineryPkgUtilIntstrIntOrString, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sApimachineryPkgUtilIntstrIntOrString) Or(d IoK8sApimachineryPkgUtilIntstrIntOrString) IoK8sApimachineryPkgUtilIntstrIntOrString {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec returns new OptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec with value set to v.
func NewOptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec(v IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec) OptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec {
	return OptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec is optional IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec.
type OptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec struct {
	Value IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec
	Set   bool
}

// IsSet returns true if OptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec was set.
func (o OptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec) Reset() {
	var v IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec) SetTo(v IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec) Get() (v IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec) Or(d IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec) IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceSpec {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus returns new OptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus with value set to v.
func NewOptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus(v IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus) OptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus {
	return OptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus is optional IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus.
type OptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus struct {
	Value IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus
	Set   bool
}

// IsSet returns true if OptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus was set.
func (o OptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus) Reset() {
	var v IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus) SetTo(v IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus) Get() (v IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus) Or(d IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus) IoK8sKubeAggregatorPkgApisApiregistrationV1APIServiceStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference returns new OptIoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference with value set to v.
func NewOptIoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference(v IoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference) OptIoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference {
	return OptIoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference{
		Value: v,
		Set:   true,
	}
}

// OptIoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference is optional IoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference.
type OptIoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference struct {
	Value IoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference
	Set   bool
}

// IsSet returns true if OptIoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference was set.
func (o OptIoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference) Reset() {
	var v IoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference) SetTo(v IoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference) Get() (v IoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference) Or(d IoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference) IoK8sKubeAggregatorPkgApisApiregistrationV1ServiceReference {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// ReadAdmissionregistrationV1MutatingWebhookConfigurationUnauthorized is response for ReadAdmissionregistrationV1MutatingWebhookConfiguration operation.
type ReadAdmissionregistrationV1MutatingWebhookConfigurationUnauthorized struct{}

func (*ReadAdmissionregistrationV1MutatingWebhookConfigurationUnauthorized) readAdmissionregistrationV1MutatingWebhookConfigurationRes() {
}

// ReadAdmissionregistrationV1ValidatingWebhookConfigurationUnauthorized is response for ReadAdmissionregistrationV1ValidatingWebhookConfiguration operation.
type ReadAdmissionregistrationV1ValidatingWebhookConfigurationUnauthorized struct{}

func (*ReadAdmissionregistrationV1ValidatingWebhookConfigurationUnauthorized) readAdmissionregistrationV1ValidatingWebhookConfigurationRes() {
}

// ReadApiextensionsV1CustomResourceDefinitionStatusUnauthorized is response for ReadApiextensionsV1CustomResourceDefinitionStatus operation.
type ReadApiextensionsV1CustomResourceDefinitionStatusUnauthorized struct{}

func (*ReadApiextensionsV1CustomResourceDefinitionStatusUnauthorized) readApiextensionsV1CustomResourceDefinitionStatusRes() {
}

// ReadApiextensionsV1CustomResourceDefinitionUnauthorized is response for ReadApiextensionsV1CustomResourceDefinition operation.
type ReadApiextensionsV1CustomResourceDefinitionUnauthorized struct{}

func (*ReadApiextensionsV1CustomResourceDefinitionUnauthorized) readApiextensionsV1CustomResourceDefinitionRes() {
}

// ReadApiregistrationV1APIServiceStatusUnauthorized is response for ReadApiregistrationV1APIServiceStatus operation.
type ReadApiregistrationV1APIServiceStatusUnauthorized struct{}

func (*ReadApiregistrationV1APIServiceStatusUnauthorized) readApiregistrationV1APIServiceStatusRes() {
}

// ReadApiregistrationV1APIServiceUnauthorized is response for ReadApiregistrationV1APIService operation.
type ReadApiregistrationV1APIServiceUnauthorized struct{}

func (*ReadApiregistrationV1APIServiceUnauthorized) readApiregistrationV1APIServiceRes() {}

// ReadAppsV1NamespacedControllerRevisionUnauthorized is response for ReadAppsV1NamespacedControllerRevision operation.
type ReadAppsV1NamespacedControllerRevisionUnauthorized struct{}

func (*ReadAppsV1NamespacedControllerRevisionUnauthorized) readAppsV1NamespacedControllerRevisionRes() {
}

// ReadAppsV1NamespacedDaemonSetStatusUnauthorized is response for ReadAppsV1NamespacedDaemonSetStatus operation.
type ReadAppsV1NamespacedDaemonSetStatusUnauthorized struct{}

func (*ReadAppsV1NamespacedDaemonSetStatusUnauthorized) readAppsV1NamespacedDaemonSetStatusRes() {}

// ReadAppsV1NamespacedDaemonSetUnauthorized is response for ReadAppsV1NamespacedDaemonSet operation.
type ReadAppsV1NamespacedDaemonSetUnauthorized struct{}

func (*ReadAppsV1NamespacedDaemonSetUnauthorized) readAppsV1NamespacedDaemonSetRes() {}

// ReadAppsV1NamespacedDeploymentScaleUnauthorized is response for ReadAppsV1NamespacedDeploymentScale operation.
type ReadAppsV1NamespacedDeploymentScaleUnauthorized struct{}

func (*ReadAppsV1NamespacedDeploymentScaleUnauthorized) readAppsV1NamespacedDeploymentScaleRes() {}

// ReadAppsV1NamespacedDeploymentStatusUnauthorized is response for ReadAppsV1NamespacedDeploymentStatus operation.
type ReadAppsV1NamespacedDeploymentStatusUnauthorized struct{}

func (*ReadAppsV1NamespacedDeploymentStatusUnauthorized) readAppsV1NamespacedDeploymentStatusRes() {}

// ReadAppsV1NamespacedDeploymentUnauthorized is response for ReadAppsV1NamespacedDeployment operation.
type ReadAppsV1NamespacedDeploymentUnauthorized struct{}

func (*ReadAppsV1NamespacedDeploymentUnauthorized) readAppsV1NamespacedDeploymentRes() {}

// ReadAppsV1NamespacedReplicaSetScaleUnauthorized is response for ReadAppsV1NamespacedReplicaSetScale operation.
type ReadAppsV1NamespacedReplicaSetScaleUnauthorized struct{}

func (*ReadAppsV1NamespacedReplicaSetScaleUnauthorized) readAppsV1NamespacedReplicaSetScaleRes() {}

// ReadAppsV1NamespacedReplicaSetStatusUnauthorized is response for ReadAppsV1NamespacedReplicaSetStatus operation.
type ReadAppsV1NamespacedReplicaSetStatusUnauthorized struct{}

func (*ReadAppsV1NamespacedReplicaSetStatusUnauthorized) readAppsV1NamespacedReplicaSetStatusRes() {}

// ReadAppsV1NamespacedReplicaSetUnauthorized is response for ReadAppsV1NamespacedReplicaSet operation.
type ReadAppsV1NamespacedReplicaSetUnauthorized struct{}

func (*ReadAppsV1NamespacedReplicaSetUnauthorized) readAppsV1NamespacedReplicaSetRes() {}

// ReadAppsV1NamespacedStatefulSetScaleUnauthorized is response for ReadAppsV1NamespacedStatefulSetScale operation.
type ReadAppsV1NamespacedStatefulSetScaleUnauthorized struct{}

func (*ReadAppsV1NamespacedStatefulSetScaleUnauthorized) readAppsV1NamespacedStatefulSetScaleRes() {}

// ReadAppsV1NamespacedStatefulSetStatusUnauthorized is response for ReadAppsV1NamespacedStatefulSetStatus operation.
type ReadAppsV1NamespacedStatefulSetStatusUnauthorized struct{}

func (*ReadAppsV1NamespacedStatefulSetStatusUnauthorized) readAppsV1NamespacedStatefulSetStatusRes() {
}

// ReadAppsV1NamespacedStatefulSetUnauthorized is response for ReadAppsV1NamespacedStatefulSet operation.
type ReadAppsV1NamespacedStatefulSetUnauthorized struct{}

func (*ReadAppsV1NamespacedStatefulSetUnauthorized) readAppsV1NamespacedStatefulSetRes() {}

// ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusUnauthorized is response for ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatus operation.
type ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusUnauthorized struct{}

func (*ReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatusUnauthorized) readAutoscalingV1NamespacedHorizontalPodAutoscalerStatusRes() {
}

// ReadAutoscalingV1NamespacedHorizontalPodAutoscalerUnauthorized is response for ReadAutoscalingV1NamespacedHorizontalPodAutoscaler operation.
type ReadAutoscalingV1NamespacedHorizontalPodAutoscalerUnauthorized struct{}

func (*ReadAutoscalingV1NamespacedHorizontalPodAutoscalerUnauthorized) readAutoscalingV1NamespacedHorizontalPodAutoscalerRes() {
}

// ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusUnauthorized is response for ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus operation.
type ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusUnauthorized struct{}

func (*ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusUnauthorized) readAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatusRes() {
}

// ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerUnauthorized is response for ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscaler operation.
type ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerUnauthorized struct{}

func (*ReadAutoscalingV2beta1NamespacedHorizontalPodAutoscalerUnauthorized) readAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRes() {
}

// ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusUnauthorized is response for ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus operation.
type ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusUnauthorized struct{}

func (*ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusUnauthorized) readAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatusRes() {
}

// ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerUnauthorized is response for ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscaler operation.
type ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerUnauthorized struct{}

func (*ReadAutoscalingV2beta2NamespacedHorizontalPodAutoscalerUnauthorized) readAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRes() {
}

// ReadBatchV1NamespacedCronJobStatusUnauthorized is response for ReadBatchV1NamespacedCronJobStatus operation.
type ReadBatchV1NamespacedCronJobStatusUnauthorized struct{}

func (*ReadBatchV1NamespacedCronJobStatusUnauthorized) readBatchV1NamespacedCronJobStatusRes() {}

// ReadBatchV1NamespacedCronJobUnauthorized is response for ReadBatchV1NamespacedCronJob operation.
type ReadBatchV1NamespacedCronJobUnauthorized struct{}

func (*ReadBatchV1NamespacedCronJobUnauthorized) readBatchV1NamespacedCronJobRes() {}

// ReadBatchV1NamespacedJobStatusUnauthorized is response for ReadBatchV1NamespacedJobStatus operation.
type ReadBatchV1NamespacedJobStatusUnauthorized struct{}

func (*ReadBatchV1NamespacedJobStatusUnauthorized) readBatchV1NamespacedJobStatusRes() {}

// ReadBatchV1NamespacedJobUnauthorized is response for ReadBatchV1NamespacedJob operation.
type ReadBatchV1NamespacedJobUnauthorized struct{}

func (*ReadBatchV1NamespacedJobUnauthorized) readBatchV1NamespacedJobRes() {}

// ReadBatchV1beta1NamespacedCronJobStatusUnauthorized is response for ReadBatchV1beta1NamespacedCronJobStatus operation.
type ReadBatchV1beta1NamespacedCronJobStatusUnauthorized struct{}

func (*ReadBatchV1beta1NamespacedCronJobStatusUnauthorized) readBatchV1beta1NamespacedCronJobStatusRes() {
}

// ReadBatchV1beta1NamespacedCronJobUnauthorized is response for ReadBatchV1beta1NamespacedCronJob operation.
type ReadBatchV1beta1NamespacedCronJobUnauthorized struct{}

func (*ReadBatchV1beta1NamespacedCronJobUnauthorized) readBatchV1beta1NamespacedCronJobRes() {}

// ReadCertificatesV1CertificateSigningRequestApprovalUnauthorized is response for ReadCertificatesV1CertificateSigningRequestApproval operation.
type ReadCertificatesV1CertificateSigningRequestApprovalUnauthorized struct{}

func (*ReadCertificatesV1CertificateSigningRequestApprovalUnauthorized) readCertificatesV1CertificateSigningRequestApprovalRes() {
}

// ReadCertificatesV1CertificateSigningRequestStatusUnauthorized is response for ReadCertificatesV1CertificateSigningRequestStatus operation.
type ReadCertificatesV1CertificateSigningRequestStatusUnauthorized struct{}

func (*ReadCertificatesV1CertificateSigningRequestStatusUnauthorized) readCertificatesV1CertificateSigningRequestStatusRes() {
}

// ReadCertificatesV1CertificateSigningRequestUnauthorized is response for ReadCertificatesV1CertificateSigningRequest operation.
type ReadCertificatesV1CertificateSigningRequestUnauthorized struct{}

func (*ReadCertificatesV1CertificateSigningRequestUnauthorized) readCertificatesV1CertificateSigningRequestRes() {
}

// ReadCoordinationV1NamespacedLeaseUnauthorized is response for ReadCoordinationV1NamespacedLease operation.
type ReadCoordinationV1NamespacedLeaseUnauthorized struct{}

func (*ReadCoordinationV1NamespacedLeaseUnauthorized) readCoordinationV1NamespacedLeaseRes() {}

// ReadCoreV1ComponentStatusUnauthorized is response for ReadCoreV1ComponentStatus operation.
type ReadCoreV1ComponentStatusUnauthorized struct{}

func (*ReadCoreV1ComponentStatusUnauthorized) readCoreV1ComponentStatusRes() {}

// ReadCoreV1NamespaceStatusUnauthorized is response for ReadCoreV1NamespaceStatus operation.
type ReadCoreV1NamespaceStatusUnauthorized struct{}

func (*ReadCoreV1NamespaceStatusUnauthorized) readCoreV1NamespaceStatusRes() {}

// ReadCoreV1NamespaceUnauthorized is response for ReadCoreV1Namespace operation.
type ReadCoreV1NamespaceUnauthorized struct{}

func (*ReadCoreV1NamespaceUnauthorized) readCoreV1NamespaceRes() {}

// ReadCoreV1NamespacedConfigMapUnauthorized is response for ReadCoreV1NamespacedConfigMap operation.
type ReadCoreV1NamespacedConfigMapUnauthorized struct{}

func (*ReadCoreV1NamespacedConfigMapUnauthorized) readCoreV1NamespacedConfigMapRes() {}

// ReadCoreV1NamespacedEndpointsUnauthorized is response for ReadCoreV1NamespacedEndpoints operation.
type ReadCoreV1NamespacedEndpointsUnauthorized struct{}

func (*ReadCoreV1NamespacedEndpointsUnauthorized) readCoreV1NamespacedEndpointsRes() {}

// ReadCoreV1NamespacedEventUnauthorized is response for ReadCoreV1NamespacedEvent operation.
type ReadCoreV1NamespacedEventUnauthorized struct{}

func (*ReadCoreV1NamespacedEventUnauthorized) readCoreV1NamespacedEventRes() {}

// ReadCoreV1NamespacedLimitRangeUnauthorized is response for ReadCoreV1NamespacedLimitRange operation.
type ReadCoreV1NamespacedLimitRangeUnauthorized struct{}

func (*ReadCoreV1NamespacedLimitRangeUnauthorized) readCoreV1NamespacedLimitRangeRes() {}

// ReadCoreV1NamespacedPersistentVolumeClaimStatusUnauthorized is response for ReadCoreV1NamespacedPersistentVolumeClaimStatus operation.
type ReadCoreV1NamespacedPersistentVolumeClaimStatusUnauthorized struct{}

func (*ReadCoreV1NamespacedPersistentVolumeClaimStatusUnauthorized) readCoreV1NamespacedPersistentVolumeClaimStatusRes() {
}

// ReadCoreV1NamespacedPersistentVolumeClaimUnauthorized is response for ReadCoreV1NamespacedPersistentVolumeClaim operation.
type ReadCoreV1NamespacedPersistentVolumeClaimUnauthorized struct{}

func (*ReadCoreV1NamespacedPersistentVolumeClaimUnauthorized) readCoreV1NamespacedPersistentVolumeClaimRes() {
}

// ReadCoreV1NamespacedPodEphemeralcontainersUnauthorized is response for ReadCoreV1NamespacedPodEphemeralcontainers operation.
type ReadCoreV1NamespacedPodEphemeralcontainersUnauthorized struct{}

func (*ReadCoreV1NamespacedPodEphemeralcontainersUnauthorized) readCoreV1NamespacedPodEphemeralcontainersRes() {
}

type ReadCoreV1NamespacedPodLogOKApplicationJSON string

func (*ReadCoreV1NamespacedPodLogOKApplicationJSON) readCoreV1NamespacedPodLogRes() {}

type ReadCoreV1NamespacedPodLogOKApplicationVndKubernetesProtobuf struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ReadCoreV1NamespacedPodLogOKApplicationVndKubernetesProtobuf) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*ReadCoreV1NamespacedPodLogOKApplicationVndKubernetesProtobuf) readCoreV1NamespacedPodLogRes() {
}

type ReadCoreV1NamespacedPodLogOKApplicationYaml struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ReadCoreV1NamespacedPodLogOKApplicationYaml) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*ReadCoreV1NamespacedPodLogOKApplicationYaml) readCoreV1NamespacedPodLogRes() {}

type ReadCoreV1NamespacedPodLogOKTextPlain struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ReadCoreV1NamespacedPodLogOKTextPlain) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*ReadCoreV1NamespacedPodLogOKTextPlain) readCoreV1NamespacedPodLogRes() {}

// ReadCoreV1NamespacedPodLogUnauthorized is response for ReadCoreV1NamespacedPodLog operation.
type ReadCoreV1NamespacedPodLogUnauthorized struct{}

func (*ReadCoreV1NamespacedPodLogUnauthorized) readCoreV1NamespacedPodLogRes() {}

// ReadCoreV1NamespacedPodStatusUnauthorized is response for ReadCoreV1NamespacedPodStatus operation.
type ReadCoreV1NamespacedPodStatusUnauthorized struct{}

func (*ReadCoreV1NamespacedPodStatusUnauthorized) readCoreV1NamespacedPodStatusRes() {}

// ReadCoreV1NamespacedPodTemplateUnauthorized is response for ReadCoreV1NamespacedPodTemplate operation.
type ReadCoreV1NamespacedPodTemplateUnauthorized struct{}

func (*ReadCoreV1NamespacedPodTemplateUnauthorized) readCoreV1NamespacedPodTemplateRes() {}

// ReadCoreV1NamespacedPodUnauthorized is response for ReadCoreV1NamespacedPod operation.
type ReadCoreV1NamespacedPodUnauthorized struct{}

func (*ReadCoreV1NamespacedPodUnauthorized) readCoreV1NamespacedPodRes() {}

// ReadCoreV1NamespacedReplicationControllerScaleUnauthorized is response for ReadCoreV1NamespacedReplicationControllerScale operation.
type ReadCoreV1NamespacedReplicationControllerScaleUnauthorized struct{}

func (*ReadCoreV1NamespacedReplicationControllerScaleUnauthorized) readCoreV1NamespacedReplicationControllerScaleRes() {
}

// ReadCoreV1NamespacedReplicationControllerStatusUnauthorized is response for ReadCoreV1NamespacedReplicationControllerStatus operation.
type ReadCoreV1NamespacedReplicationControllerStatusUnauthorized struct{}

func (*ReadCoreV1NamespacedReplicationControllerStatusUnauthorized) readCoreV1NamespacedReplicationControllerStatusRes() {
}

// ReadCoreV1NamespacedReplicationControllerUnauthorized is response for ReadCoreV1NamespacedReplicationController operation.
type ReadCoreV1NamespacedReplicationControllerUnauthorized struct{}

func (*ReadCoreV1NamespacedReplicationControllerUnauthorized) readCoreV1NamespacedReplicationControllerRes() {
}

// ReadCoreV1NamespacedResourceQuotaStatusUnauthorized is response for ReadCoreV1NamespacedResourceQuotaStatus operation.
type ReadCoreV1NamespacedResourceQuotaStatusUnauthorized struct{}

func (*ReadCoreV1NamespacedResourceQuotaStatusUnauthorized) readCoreV1NamespacedResourceQuotaStatusRes() {
}

// ReadCoreV1NamespacedResourceQuotaUnauthorized is response for ReadCoreV1NamespacedResourceQuota operation.
type ReadCoreV1NamespacedResourceQuotaUnauthorized struct{}

func (*ReadCoreV1NamespacedResourceQuotaUnauthorized) readCoreV1NamespacedResourceQuotaRes() {}

// ReadCoreV1NamespacedSecretUnauthorized is response for ReadCoreV1NamespacedSecret operation.
type ReadCoreV1NamespacedSecretUnauthorized struct{}

func (*ReadCoreV1NamespacedSecretUnauthorized) readCoreV1NamespacedSecretRes() {}

// ReadCoreV1NamespacedServiceAccountUnauthorized is response for ReadCoreV1NamespacedServiceAccount operation.
type ReadCoreV1NamespacedServiceAccountUnauthorized struct{}

func (*ReadCoreV1NamespacedServiceAccountUnauthorized) readCoreV1NamespacedServiceAccountRes() {}

// ReadCoreV1NamespacedServiceStatusUnauthorized is response for ReadCoreV1NamespacedServiceStatus operation.
type ReadCoreV1NamespacedServiceStatusUnauthorized struct{}

func (*ReadCoreV1NamespacedServiceStatusUnauthorized) readCoreV1NamespacedServiceStatusRes() {}

// ReadCoreV1NamespacedServiceUnauthorized is response for ReadCoreV1NamespacedService operation.
type ReadCoreV1NamespacedServiceUnauthorized struct{}

func (*ReadCoreV1NamespacedServiceUnauthorized) readCoreV1NamespacedServiceRes() {}

// ReadCoreV1NodeStatusUnauthorized is response for ReadCoreV1NodeStatus operation.
type ReadCoreV1NodeStatusUnauthorized struct{}

func (*ReadCoreV1NodeStatusUnauthorized) readCoreV1NodeStatusRes() {}

// ReadCoreV1NodeUnauthorized is response for ReadCoreV1Node operation.
type ReadCoreV1NodeUnauthorized struct{}

func (*ReadCoreV1NodeUnauthorized) readCoreV1NodeRes() {}

// ReadCoreV1PersistentVolumeStatusUnauthorized is response for ReadCoreV1PersistentVolumeStatus operation.
type ReadCoreV1PersistentVolumeStatusUnauthorized struct{}

func (*ReadCoreV1PersistentVolumeStatusUnauthorized) readCoreV1PersistentVolumeStatusRes() {}

// ReadCoreV1PersistentVolumeUnauthorized is response for ReadCoreV1PersistentVolume operation.
type ReadCoreV1PersistentVolumeUnauthorized struct{}

func (*ReadCoreV1PersistentVolumeUnauthorized) readCoreV1PersistentVolumeRes() {}

// ReadDiscoveryV1NamespacedEndpointSliceUnauthorized is response for ReadDiscoveryV1NamespacedEndpointSlice operation.
type ReadDiscoveryV1NamespacedEndpointSliceUnauthorized struct{}

func (*ReadDiscoveryV1NamespacedEndpointSliceUnauthorized) readDiscoveryV1NamespacedEndpointSliceRes() {
}

// ReadDiscoveryV1beta1NamespacedEndpointSliceUnauthorized is response for ReadDiscoveryV1beta1NamespacedEndpointSlice operation.
type ReadDiscoveryV1beta1NamespacedEndpointSliceUnauthorized struct{}

func (*ReadDiscoveryV1beta1NamespacedEndpointSliceUnauthorized) readDiscoveryV1beta1NamespacedEndpointSliceRes() {
}

// ReadEventsV1NamespacedEventUnauthorized is response for ReadEventsV1NamespacedEvent operation.
type ReadEventsV1NamespacedEventUnauthorized struct{}

func (*ReadEventsV1NamespacedEventUnauthorized) readEventsV1NamespacedEventRes() {}

// ReadEventsV1beta1NamespacedEventUnauthorized is response for ReadEventsV1beta1NamespacedEvent operation.
type ReadEventsV1beta1NamespacedEventUnauthorized struct{}

func (*ReadEventsV1beta1NamespacedEventUnauthorized) readEventsV1beta1NamespacedEventRes() {}

// ReadFlowcontrolApiserverV1beta1FlowSchemaStatusUnauthorized is response for ReadFlowcontrolApiserverV1beta1FlowSchemaStatus operation.
type ReadFlowcontrolApiserverV1beta1FlowSchemaStatusUnauthorized struct{}

func (*ReadFlowcontrolApiserverV1beta1FlowSchemaStatusUnauthorized) readFlowcontrolApiserverV1beta1FlowSchemaStatusRes() {
}

// ReadFlowcontrolApiserverV1beta1FlowSchemaUnauthorized is response for ReadFlowcontrolApiserverV1beta1FlowSchema operation.
type ReadFlowcontrolApiserverV1beta1FlowSchemaUnauthorized struct{}

func (*ReadFlowcontrolApiserverV1beta1FlowSchemaUnauthorized) readFlowcontrolApiserverV1beta1FlowSchemaRes() {
}

// ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusUnauthorized is response for ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatus operation.
type ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusUnauthorized struct{}

func (*ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusUnauthorized) readFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatusRes() {
}

// ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationUnauthorized is response for ReadFlowcontrolApiserverV1beta1PriorityLevelConfiguration operation.
type ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationUnauthorized struct{}

func (*ReadFlowcontrolApiserverV1beta1PriorityLevelConfigurationUnauthorized) readFlowcontrolApiserverV1beta1PriorityLevelConfigurationRes() {
}

// ReadFlowcontrolApiserverV1beta2FlowSchemaStatusUnauthorized is response for ReadFlowcontrolApiserverV1beta2FlowSchemaStatus operation.
type ReadFlowcontrolApiserverV1beta2FlowSchemaStatusUnauthorized struct{}

func (*ReadFlowcontrolApiserverV1beta2FlowSchemaStatusUnauthorized) readFlowcontrolApiserverV1beta2FlowSchemaStatusRes() {
}

// ReadFlowcontrolApiserverV1beta2FlowSchemaUnauthorized is response for ReadFlowcontrolApiserverV1beta2FlowSchema operation.
type ReadFlowcontrolApiserverV1beta2FlowSchemaUnauthorized struct{}

func (*ReadFlowcontrolApiserverV1beta2FlowSchemaUnauthorized) readFlowcontrolApiserverV1beta2FlowSchemaRes() {
}

// ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusUnauthorized is response for ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatus operation.
type ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusUnauthorized struct{}

func (*ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusUnauthorized) readFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusRes() {
}

// ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationUnauthorized is response for ReadFlowcontrolApiserverV1beta2PriorityLevelConfiguration operation.
type ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationUnauthorized struct{}

func (*ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationUnauthorized) readFlowcontrolApiserverV1beta2PriorityLevelConfigurationRes() {
}

// ReadInternalApiserverV1alpha1StorageVersionStatusUnauthorized is response for ReadInternalApiserverV1alpha1StorageVersionStatus operation.
type ReadInternalApiserverV1alpha1StorageVersionStatusUnauthorized struct{}

func (*ReadInternalApiserverV1alpha1StorageVersionStatusUnauthorized) readInternalApiserverV1alpha1StorageVersionStatusRes() {
}

// ReadInternalApiserverV1alpha1StorageVersionUnauthorized is response for ReadInternalApiserverV1alpha1StorageVersion operation.
type ReadInternalApiserverV1alpha1StorageVersionUnauthorized struct{}

func (*ReadInternalApiserverV1alpha1StorageVersionUnauthorized) readInternalApiserverV1alpha1StorageVersionRes() {
}

// ReadNetworkingV1IngressClassUnauthorized is response for ReadNetworkingV1IngressClass operation.
type ReadNetworkingV1IngressClassUnauthorized struct{}

func (*ReadNetworkingV1IngressClassUnauthorized) readNetworkingV1IngressClassRes() {}

// ReadNetworkingV1NamespacedIngressStatusUnauthorized is response for ReadNetworkingV1NamespacedIngressStatus operation.
type ReadNetworkingV1NamespacedIngressStatusUnauthorized struct{}

func (*ReadNetworkingV1NamespacedIngressStatusUnauthorized) readNetworkingV1NamespacedIngressStatusRes() {
}

// ReadNetworkingV1NamespacedIngressUnauthorized is response for ReadNetworkingV1NamespacedIngress operation.
type ReadNetworkingV1NamespacedIngressUnauthorized struct{}

func (*ReadNetworkingV1NamespacedIngressUnauthorized) readNetworkingV1NamespacedIngressRes() {}

// ReadNetworkingV1NamespacedNetworkPolicyUnauthorized is response for ReadNetworkingV1NamespacedNetworkPolicy operation.
type ReadNetworkingV1NamespacedNetworkPolicyUnauthorized struct{}

func (*ReadNetworkingV1NamespacedNetworkPolicyUnauthorized) readNetworkingV1NamespacedNetworkPolicyRes() {
}

// ReadNodeV1RuntimeClassUnauthorized is response for ReadNodeV1RuntimeClass operation.
type ReadNodeV1RuntimeClassUnauthorized struct{}

func (*ReadNodeV1RuntimeClassUnauthorized) readNodeV1RuntimeClassRes() {}

// ReadNodeV1alpha1RuntimeClassUnauthorized is response for ReadNodeV1alpha1RuntimeClass operation.
type ReadNodeV1alpha1RuntimeClassUnauthorized struct{}

func (*ReadNodeV1alpha1RuntimeClassUnauthorized) readNodeV1alpha1RuntimeClassRes() {}

// ReadNodeV1beta1RuntimeClassUnauthorized is response for ReadNodeV1beta1RuntimeClass operation.
type ReadNodeV1beta1RuntimeClassUnauthorized struct{}

func (*ReadNodeV1beta1RuntimeClassUnauthorized) readNodeV1beta1RuntimeClassRes() {}

// ReadPolicyV1NamespacedPodDisruptionBudgetStatusUnauthorized is response for ReadPolicyV1NamespacedPodDisruptionBudgetStatus operation.
type ReadPolicyV1NamespacedPodDisruptionBudgetStatusUnauthorized struct{}

func (*ReadPolicyV1NamespacedPodDisruptionBudgetStatusUnauthorized) readPolicyV1NamespacedPodDisruptionBudgetStatusRes() {
}

// ReadPolicyV1NamespacedPodDisruptionBudgetUnauthorized is response for ReadPolicyV1NamespacedPodDisruptionBudget operation.
type ReadPolicyV1NamespacedPodDisruptionBudgetUnauthorized struct{}

func (*ReadPolicyV1NamespacedPodDisruptionBudgetUnauthorized) readPolicyV1NamespacedPodDisruptionBudgetRes() {
}

// ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusUnauthorized is response for ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatus operation.
type ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusUnauthorized struct{}

func (*ReadPolicyV1beta1NamespacedPodDisruptionBudgetStatusUnauthorized) readPolicyV1beta1NamespacedPodDisruptionBudgetStatusRes() {
}

// ReadPolicyV1beta1NamespacedPodDisruptionBudgetUnauthorized is response for ReadPolicyV1beta1NamespacedPodDisruptionBudget operation.
type ReadPolicyV1beta1NamespacedPodDisruptionBudgetUnauthorized struct{}

func (*ReadPolicyV1beta1NamespacedPodDisruptionBudgetUnauthorized) readPolicyV1beta1NamespacedPodDisruptionBudgetRes() {
}

// ReadPolicyV1beta1PodSecurityPolicyUnauthorized is response for ReadPolicyV1beta1PodSecurityPolicy operation.
type ReadPolicyV1beta1PodSecurityPolicyUnauthorized struct{}

func (*ReadPolicyV1beta1PodSecurityPolicyUnauthorized) readPolicyV1beta1PodSecurityPolicyRes() {}

// ReadRbacAuthorizationV1ClusterRoleBindingUnauthorized is response for ReadRbacAuthorizationV1ClusterRoleBinding operation.
type ReadRbacAuthorizationV1ClusterRoleBindingUnauthorized struct{}

func (*ReadRbacAuthorizationV1ClusterRoleBindingUnauthorized) readRbacAuthorizationV1ClusterRoleBindingRes() {
}

// ReadRbacAuthorizationV1ClusterRoleUnauthorized is response for ReadRbacAuthorizationV1ClusterRole operation.
type ReadRbacAuthorizationV1ClusterRoleUnauthorized struct{}

func (*ReadRbacAuthorizationV1ClusterRoleUnauthorized) readRbacAuthorizationV1ClusterRoleRes() {}

// ReadRbacAuthorizationV1NamespacedRoleBindingUnauthorized is response for ReadRbacAuthorizationV1NamespacedRoleBinding operation.
type ReadRbacAuthorizationV1NamespacedRoleBindingUnauthorized struct{}

func (*ReadRbacAuthorizationV1NamespacedRoleBindingUnauthorized) readRbacAuthorizationV1NamespacedRoleBindingRes() {
}

// ReadRbacAuthorizationV1NamespacedRoleUnauthorized is response for ReadRbacAuthorizationV1NamespacedRole operation.
type ReadRbacAuthorizationV1NamespacedRoleUnauthorized struct{}

func (*ReadRbacAuthorizationV1NamespacedRoleUnauthorized) readRbacAuthorizationV1NamespacedRoleRes() {
}

// ReadSchedulingV1PriorityClassUnauthorized is response for ReadSchedulingV1PriorityClass operation.
type ReadSchedulingV1PriorityClassUnauthorized struct{}

func (*ReadSchedulingV1PriorityClassUnauthorized) readSchedulingV1PriorityClassRes() {}

// ReadStorageV1CSIDriverUnauthorized is response for ReadStorageV1CSIDriver operation.
type ReadStorageV1CSIDriverUnauthorized struct{}

func (*ReadStorageV1CSIDriverUnauthorized) readStorageV1CSIDriverRes() {}

// ReadStorageV1CSINodeUnauthorized is response for ReadStorageV1CSINode operation.
type ReadStorageV1CSINodeUnauthorized struct{}

func (*ReadStorageV1CSINodeUnauthorized) readStorageV1CSINodeRes() {}

// ReadStorageV1StorageClassUnauthorized is response for ReadStorageV1StorageClass operation.
type ReadStorageV1StorageClassUnauthorized struct{}

func (*ReadStorageV1StorageClassUnauthorized) readStorageV1StorageClassRes() {}

// ReadStorageV1VolumeAttachmentStatusUnauthorized is response for ReadStorageV1VolumeAttachmentStatus operation.
type ReadStorageV1VolumeAttachmentStatusUnauthorized struct{}

func (*ReadStorageV1VolumeAttachmentStatusUnauthorized) readStorageV1VolumeAttachmentStatusRes() {}

// ReadStorageV1VolumeAttachmentUnauthorized is response for ReadStorageV1VolumeAttachment operation.
type ReadStorageV1VolumeAttachmentUnauthorized struct{}

func (*ReadStorageV1VolumeAttachmentUnauthorized) readStorageV1VolumeAttachmentRes() {}

// ReadStorageV1alpha1NamespacedCSIStorageCapacityUnauthorized is response for ReadStorageV1alpha1NamespacedCSIStorageCapacity operation.
type ReadStorageV1alpha1NamespacedCSIStorageCapacityUnauthorized struct{}

func (*ReadStorageV1alpha1NamespacedCSIStorageCapacityUnauthorized) readStorageV1alpha1NamespacedCSIStorageCapacityRes() {
}

// ReadStorageV1beta1NamespacedCSIStorageCapacityUnauthorized is response for ReadStorageV1beta1NamespacedCSIStorageCapacity operation.
type ReadStorageV1beta1NamespacedCSIStorageCapacityUnauthorized struct{}

func (*ReadStorageV1beta1NamespacedCSIStorageCapacityUnauthorized) readStorageV1beta1NamespacedCSIStorageCapacityRes() {
}

// WatchAdmissionregistrationV1MutatingWebhookConfigurationListUnauthorized is response for WatchAdmissionregistrationV1MutatingWebhookConfigurationList operation.
type WatchAdmissionregistrationV1MutatingWebhookConfigurationListUnauthorized struct{}

func (*WatchAdmissionregistrationV1MutatingWebhookConfigurationListUnauthorized) watchAdmissionregistrationV1MutatingWebhookConfigurationListRes() {
}

// WatchAdmissionregistrationV1MutatingWebhookConfigurationUnauthorized is response for WatchAdmissionregistrationV1MutatingWebhookConfiguration operation.
type WatchAdmissionregistrationV1MutatingWebhookConfigurationUnauthorized struct{}

func (*WatchAdmissionregistrationV1MutatingWebhookConfigurationUnauthorized) watchAdmissionregistrationV1MutatingWebhookConfigurationRes() {
}

// WatchAdmissionregistrationV1ValidatingWebhookConfigurationListUnauthorized is response for WatchAdmissionregistrationV1ValidatingWebhookConfigurationList operation.
type WatchAdmissionregistrationV1ValidatingWebhookConfigurationListUnauthorized struct{}

func (*WatchAdmissionregistrationV1ValidatingWebhookConfigurationListUnauthorized) watchAdmissionregistrationV1ValidatingWebhookConfigurationListRes() {
}

// WatchAdmissionregistrationV1ValidatingWebhookConfigurationUnauthorized is response for WatchAdmissionregistrationV1ValidatingWebhookConfiguration operation.
type WatchAdmissionregistrationV1ValidatingWebhookConfigurationUnauthorized struct{}

func (*WatchAdmissionregistrationV1ValidatingWebhookConfigurationUnauthorized) watchAdmissionregistrationV1ValidatingWebhookConfigurationRes() {
}

// WatchApiextensionsV1CustomResourceDefinitionListUnauthorized is response for WatchApiextensionsV1CustomResourceDefinitionList operation.
type WatchApiextensionsV1CustomResourceDefinitionListUnauthorized struct{}

func (*WatchApiextensionsV1CustomResourceDefinitionListUnauthorized) watchApiextensionsV1CustomResourceDefinitionListRes() {
}

// WatchApiextensionsV1CustomResourceDefinitionUnauthorized is response for WatchApiextensionsV1CustomResourceDefinition operation.
type WatchApiextensionsV1CustomResourceDefinitionUnauthorized struct{}

func (*WatchApiextensionsV1CustomResourceDefinitionUnauthorized) watchApiextensionsV1CustomResourceDefinitionRes() {
}

// WatchApiregistrationV1APIServiceListUnauthorized is response for WatchApiregistrationV1APIServiceList operation.
type WatchApiregistrationV1APIServiceListUnauthorized struct{}

func (*WatchApiregistrationV1APIServiceListUnauthorized) watchApiregistrationV1APIServiceListRes() {}

// WatchApiregistrationV1APIServiceUnauthorized is response for WatchApiregistrationV1APIService operation.
type WatchApiregistrationV1APIServiceUnauthorized struct{}

func (*WatchApiregistrationV1APIServiceUnauthorized) watchApiregistrationV1APIServiceRes() {}

// WatchAppsV1ControllerRevisionListForAllNamespacesUnauthorized is response for WatchAppsV1ControllerRevisionListForAllNamespaces operation.
type WatchAppsV1ControllerRevisionListForAllNamespacesUnauthorized struct{}

func (*WatchAppsV1ControllerRevisionListForAllNamespacesUnauthorized) watchAppsV1ControllerRevisionListForAllNamespacesRes() {
}

// WatchAppsV1DaemonSetListForAllNamespacesUnauthorized is response for WatchAppsV1DaemonSetListForAllNamespaces operation.
type WatchAppsV1DaemonSetListForAllNamespacesUnauthorized struct{}

func (*WatchAppsV1DaemonSetListForAllNamespacesUnauthorized) watchAppsV1DaemonSetListForAllNamespacesRes() {
}

// WatchAppsV1DeploymentListForAllNamespacesUnauthorized is response for WatchAppsV1DeploymentListForAllNamespaces operation.
type WatchAppsV1DeploymentListForAllNamespacesUnauthorized struct{}

func (*WatchAppsV1DeploymentListForAllNamespacesUnauthorized) watchAppsV1DeploymentListForAllNamespacesRes() {
}

// WatchAppsV1NamespacedControllerRevisionListUnauthorized is response for WatchAppsV1NamespacedControllerRevisionList operation.
type WatchAppsV1NamespacedControllerRevisionListUnauthorized struct{}

func (*WatchAppsV1NamespacedControllerRevisionListUnauthorized) watchAppsV1NamespacedControllerRevisionListRes() {
}

// WatchAppsV1NamespacedControllerRevisionUnauthorized is response for WatchAppsV1NamespacedControllerRevision operation.
type WatchAppsV1NamespacedControllerRevisionUnauthorized struct{}

func (*WatchAppsV1NamespacedControllerRevisionUnauthorized) watchAppsV1NamespacedControllerRevisionRes() {
}

// WatchAppsV1NamespacedDaemonSetListUnauthorized is response for WatchAppsV1NamespacedDaemonSetList operation.
type WatchAppsV1NamespacedDaemonSetListUnauthorized struct{}

func (*WatchAppsV1NamespacedDaemonSetListUnauthorized) watchAppsV1NamespacedDaemonSetListRes() {}

// WatchAppsV1NamespacedDaemonSetUnauthorized is response for WatchAppsV1NamespacedDaemonSet operation.
type WatchAppsV1NamespacedDaemonSetUnauthorized struct{}

func (*WatchAppsV1NamespacedDaemonSetUnauthorized) watchAppsV1NamespacedDaemonSetRes() {}

// WatchAppsV1NamespacedDeploymentListUnauthorized is response for WatchAppsV1NamespacedDeploymentList operation.
type WatchAppsV1NamespacedDeploymentListUnauthorized struct{}

func (*WatchAppsV1NamespacedDeploymentListUnauthorized) watchAppsV1NamespacedDeploymentListRes() {}

// WatchAppsV1NamespacedDeploymentUnauthorized is response for WatchAppsV1NamespacedDeployment operation.
type WatchAppsV1NamespacedDeploymentUnauthorized struct{}

func (*WatchAppsV1NamespacedDeploymentUnauthorized) watchAppsV1NamespacedDeploymentRes() {}

// WatchAppsV1NamespacedReplicaSetListUnauthorized is response for WatchAppsV1NamespacedReplicaSetList operation.
type WatchAppsV1NamespacedReplicaSetListUnauthorized struct{}

func (*WatchAppsV1NamespacedReplicaSetListUnauthorized) watchAppsV1NamespacedReplicaSetListRes() {}

// WatchAppsV1NamespacedReplicaSetUnauthorized is response for WatchAppsV1NamespacedReplicaSet operation.
type WatchAppsV1NamespacedReplicaSetUnauthorized struct{}

func (*WatchAppsV1NamespacedReplicaSetUnauthorized) watchAppsV1NamespacedReplicaSetRes() {}

// WatchAppsV1NamespacedStatefulSetListUnauthorized is response for WatchAppsV1NamespacedStatefulSetList operation.
type WatchAppsV1NamespacedStatefulSetListUnauthorized struct{}

func (*WatchAppsV1NamespacedStatefulSetListUnauthorized) watchAppsV1NamespacedStatefulSetListRes() {}

// WatchAppsV1NamespacedStatefulSetUnauthorized is response for WatchAppsV1NamespacedStatefulSet operation.
type WatchAppsV1NamespacedStatefulSetUnauthorized struct{}

func (*WatchAppsV1NamespacedStatefulSetUnauthorized) watchAppsV1NamespacedStatefulSetRes() {}

// WatchAppsV1ReplicaSetListForAllNamespacesUnauthorized is response for WatchAppsV1ReplicaSetListForAllNamespaces operation.
type WatchAppsV1ReplicaSetListForAllNamespacesUnauthorized struct{}

func (*WatchAppsV1ReplicaSetListForAllNamespacesUnauthorized) watchAppsV1ReplicaSetListForAllNamespacesRes() {
}

// WatchAppsV1StatefulSetListForAllNamespacesUnauthorized is response for WatchAppsV1StatefulSetListForAllNamespaces operation.
type WatchAppsV1StatefulSetListForAllNamespacesUnauthorized struct{}

func (*WatchAppsV1StatefulSetListForAllNamespacesUnauthorized) watchAppsV1StatefulSetListForAllNamespacesRes() {
}

// WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesUnauthorized is response for WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespaces operation.
type WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesUnauthorized struct{}

func (*WatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesUnauthorized) watchAutoscalingV1HorizontalPodAutoscalerListForAllNamespacesRes() {
}

// WatchAutoscalingV1NamespacedHorizontalPodAutoscalerListUnauthorized is response for WatchAutoscalingV1NamespacedHorizontalPodAutoscalerList operation.
type WatchAutoscalingV1NamespacedHorizontalPodAutoscalerListUnauthorized struct{}

func (*WatchAutoscalingV1NamespacedHorizontalPodAutoscalerListUnauthorized) watchAutoscalingV1NamespacedHorizontalPodAutoscalerListRes() {
}

// WatchAutoscalingV1NamespacedHorizontalPodAutoscalerUnauthorized is response for WatchAutoscalingV1NamespacedHorizontalPodAutoscaler operation.
type WatchAutoscalingV1NamespacedHorizontalPodAutoscalerUnauthorized struct{}

func (*WatchAutoscalingV1NamespacedHorizontalPodAutoscalerUnauthorized) watchAutoscalingV1NamespacedHorizontalPodAutoscalerRes() {
}

// WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesUnauthorized is response for WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespaces operation.
type WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesUnauthorized struct{}

func (*WatchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesUnauthorized) watchAutoscalingV2beta1HorizontalPodAutoscalerListForAllNamespacesRes() {
}

// WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListUnauthorized is response for WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerList operation.
type WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListUnauthorized struct{}

func (*WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListUnauthorized) watchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerListRes() {
}

// WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerUnauthorized is response for WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscaler operation.
type WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerUnauthorized struct{}

func (*WatchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerUnauthorized) watchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerRes() {
}

// WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesUnauthorized is response for WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespaces operation.
type WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesUnauthorized struct{}

func (*WatchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesUnauthorized) watchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespacesRes() {
}

// WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListUnauthorized is response for WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerList operation.
type WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListUnauthorized struct{}

func (*WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListUnauthorized) watchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerListRes() {
}

// WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerUnauthorized is response for WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscaler operation.
type WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerUnauthorized struct{}

func (*WatchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerUnauthorized) watchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerRes() {
}

// WatchBatchV1CronJobListForAllNamespacesUnauthorized is response for WatchBatchV1CronJobListForAllNamespaces operation.
type WatchBatchV1CronJobListForAllNamespacesUnauthorized struct{}

func (*WatchBatchV1CronJobListForAllNamespacesUnauthorized) watchBatchV1CronJobListForAllNamespacesRes() {
}

// WatchBatchV1JobListForAllNamespacesUnauthorized is response for WatchBatchV1JobListForAllNamespaces operation.
type WatchBatchV1JobListForAllNamespacesUnauthorized struct{}

func (*WatchBatchV1JobListForAllNamespacesUnauthorized) watchBatchV1JobListForAllNamespacesRes() {}

// WatchBatchV1NamespacedCronJobListUnauthorized is response for WatchBatchV1NamespacedCronJobList operation.
type WatchBatchV1NamespacedCronJobListUnauthorized struct{}

func (*WatchBatchV1NamespacedCronJobListUnauthorized) watchBatchV1NamespacedCronJobListRes() {}

// WatchBatchV1NamespacedCronJobUnauthorized is response for WatchBatchV1NamespacedCronJob operation.
type WatchBatchV1NamespacedCronJobUnauthorized struct{}

func (*WatchBatchV1NamespacedCronJobUnauthorized) watchBatchV1NamespacedCronJobRes() {}

// WatchBatchV1NamespacedJobListUnauthorized is response for WatchBatchV1NamespacedJobList operation.
type WatchBatchV1NamespacedJobListUnauthorized struct{}

func (*WatchBatchV1NamespacedJobListUnauthorized) watchBatchV1NamespacedJobListRes() {}

// WatchBatchV1NamespacedJobUnauthorized is response for WatchBatchV1NamespacedJob operation.
type WatchBatchV1NamespacedJobUnauthorized struct{}

func (*WatchBatchV1NamespacedJobUnauthorized) watchBatchV1NamespacedJobRes() {}

// WatchBatchV1beta1CronJobListForAllNamespacesUnauthorized is response for WatchBatchV1beta1CronJobListForAllNamespaces operation.
type WatchBatchV1beta1CronJobListForAllNamespacesUnauthorized struct{}

func (*WatchBatchV1beta1CronJobListForAllNamespacesUnauthorized) watchBatchV1beta1CronJobListForAllNamespacesRes() {
}

// WatchBatchV1beta1NamespacedCronJobListUnauthorized is response for WatchBatchV1beta1NamespacedCronJobList operation.
type WatchBatchV1beta1NamespacedCronJobListUnauthorized struct{}

func (*WatchBatchV1beta1NamespacedCronJobListUnauthorized) watchBatchV1beta1NamespacedCronJobListRes() {
}

// WatchBatchV1beta1NamespacedCronJobUnauthorized is response for WatchBatchV1beta1NamespacedCronJob operation.
type WatchBatchV1beta1NamespacedCronJobUnauthorized struct{}

func (*WatchBatchV1beta1NamespacedCronJobUnauthorized) watchBatchV1beta1NamespacedCronJobRes() {}

// WatchCertificatesV1CertificateSigningRequestListUnauthorized is response for WatchCertificatesV1CertificateSigningRequestList operation.
type WatchCertificatesV1CertificateSigningRequestListUnauthorized struct{}

func (*WatchCertificatesV1CertificateSigningRequestListUnauthorized) watchCertificatesV1CertificateSigningRequestListRes() {
}

// WatchCertificatesV1CertificateSigningRequestUnauthorized is response for WatchCertificatesV1CertificateSigningRequest operation.
type WatchCertificatesV1CertificateSigningRequestUnauthorized struct{}

func (*WatchCertificatesV1CertificateSigningRequestUnauthorized) watchCertificatesV1CertificateSigningRequestRes() {
}

// WatchCoordinationV1LeaseListForAllNamespacesUnauthorized is response for WatchCoordinationV1LeaseListForAllNamespaces operation.
type WatchCoordinationV1LeaseListForAllNamespacesUnauthorized struct{}

func (*WatchCoordinationV1LeaseListForAllNamespacesUnauthorized) watchCoordinationV1LeaseListForAllNamespacesRes() {
}

// WatchCoordinationV1NamespacedLeaseListUnauthorized is response for WatchCoordinationV1NamespacedLeaseList operation.
type WatchCoordinationV1NamespacedLeaseListUnauthorized struct{}

func (*WatchCoordinationV1NamespacedLeaseListUnauthorized) watchCoordinationV1NamespacedLeaseListRes() {
}

// WatchCoordinationV1NamespacedLeaseUnauthorized is response for WatchCoordinationV1NamespacedLease operation.
type WatchCoordinationV1NamespacedLeaseUnauthorized struct{}

func (*WatchCoordinationV1NamespacedLeaseUnauthorized) watchCoordinationV1NamespacedLeaseRes() {}

// WatchCoreV1ConfigMapListForAllNamespacesUnauthorized is response for WatchCoreV1ConfigMapListForAllNamespaces operation.
type WatchCoreV1ConfigMapListForAllNamespacesUnauthorized struct{}

func (*WatchCoreV1ConfigMapListForAllNamespacesUnauthorized) watchCoreV1ConfigMapListForAllNamespacesRes() {
}

// WatchCoreV1EndpointsListForAllNamespacesUnauthorized is response for WatchCoreV1EndpointsListForAllNamespaces operation.
type WatchCoreV1EndpointsListForAllNamespacesUnauthorized struct{}

func (*WatchCoreV1EndpointsListForAllNamespacesUnauthorized) watchCoreV1EndpointsListForAllNamespacesRes() {
}

// WatchCoreV1EventListForAllNamespacesUnauthorized is response for WatchCoreV1EventListForAllNamespaces operation.
type WatchCoreV1EventListForAllNamespacesUnauthorized struct{}

func (*WatchCoreV1EventListForAllNamespacesUnauthorized) watchCoreV1EventListForAllNamespacesRes() {}

// WatchCoreV1LimitRangeListForAllNamespacesUnauthorized is response for WatchCoreV1LimitRangeListForAllNamespaces operation.
type WatchCoreV1LimitRangeListForAllNamespacesUnauthorized struct{}

func (*WatchCoreV1LimitRangeListForAllNamespacesUnauthorized) watchCoreV1LimitRangeListForAllNamespacesRes() {
}

// WatchCoreV1NamespaceListUnauthorized is response for WatchCoreV1NamespaceList operation.
type WatchCoreV1NamespaceListUnauthorized struct{}

func (*WatchCoreV1NamespaceListUnauthorized) watchCoreV1NamespaceListRes() {}

// WatchCoreV1NamespaceUnauthorized is response for WatchCoreV1Namespace operation.
type WatchCoreV1NamespaceUnauthorized struct{}

func (*WatchCoreV1NamespaceUnauthorized) watchCoreV1NamespaceRes() {}

// WatchCoreV1NamespacedConfigMapListUnauthorized is response for WatchCoreV1NamespacedConfigMapList operation.
type WatchCoreV1NamespacedConfigMapListUnauthorized struct{}

func (*WatchCoreV1NamespacedConfigMapListUnauthorized) watchCoreV1NamespacedConfigMapListRes() {}

// WatchCoreV1NamespacedConfigMapUnauthorized is response for WatchCoreV1NamespacedConfigMap operation.
type WatchCoreV1NamespacedConfigMapUnauthorized struct{}

func (*WatchCoreV1NamespacedConfigMapUnauthorized) watchCoreV1NamespacedConfigMapRes() {}

// WatchCoreV1NamespacedEndpointsListUnauthorized is response for WatchCoreV1NamespacedEndpointsList operation.
type WatchCoreV1NamespacedEndpointsListUnauthorized struct{}

func (*WatchCoreV1NamespacedEndpointsListUnauthorized) watchCoreV1NamespacedEndpointsListRes() {}

// WatchCoreV1NamespacedEndpointsUnauthorized is response for WatchCoreV1NamespacedEndpoints operation.
type WatchCoreV1NamespacedEndpointsUnauthorized struct{}

func (*WatchCoreV1NamespacedEndpointsUnauthorized) watchCoreV1NamespacedEndpointsRes() {}

// WatchCoreV1NamespacedEventListUnauthorized is response for WatchCoreV1NamespacedEventList operation.
type WatchCoreV1NamespacedEventListUnauthorized struct{}

func (*WatchCoreV1NamespacedEventListUnauthorized) watchCoreV1NamespacedEventListRes() {}

// WatchCoreV1NamespacedEventUnauthorized is response for WatchCoreV1NamespacedEvent operation.
type WatchCoreV1NamespacedEventUnauthorized struct{}

func (*WatchCoreV1NamespacedEventUnauthorized) watchCoreV1NamespacedEventRes() {}

// WatchCoreV1NamespacedLimitRangeListUnauthorized is response for WatchCoreV1NamespacedLimitRangeList operation.
type WatchCoreV1NamespacedLimitRangeListUnauthorized struct{}

func (*WatchCoreV1NamespacedLimitRangeListUnauthorized) watchCoreV1NamespacedLimitRangeListRes() {}

// WatchCoreV1NamespacedLimitRangeUnauthorized is response for WatchCoreV1NamespacedLimitRange operation.
type WatchCoreV1NamespacedLimitRangeUnauthorized struct{}

func (*WatchCoreV1NamespacedLimitRangeUnauthorized) watchCoreV1NamespacedLimitRangeRes() {}

// WatchCoreV1NamespacedPersistentVolumeClaimListUnauthorized is response for WatchCoreV1NamespacedPersistentVolumeClaimList operation.
type WatchCoreV1NamespacedPersistentVolumeClaimListUnauthorized struct{}

func (*WatchCoreV1NamespacedPersistentVolumeClaimListUnauthorized) watchCoreV1NamespacedPersistentVolumeClaimListRes() {
}

// WatchCoreV1NamespacedPersistentVolumeClaimUnauthorized is response for WatchCoreV1NamespacedPersistentVolumeClaim operation.
type WatchCoreV1NamespacedPersistentVolumeClaimUnauthorized struct{}

func (*WatchCoreV1NamespacedPersistentVolumeClaimUnauthorized) watchCoreV1NamespacedPersistentVolumeClaimRes() {
}

// WatchCoreV1NamespacedPodListUnauthorized is response for WatchCoreV1NamespacedPodList operation.
type WatchCoreV1NamespacedPodListUnauthorized struct{}

func (*WatchCoreV1NamespacedPodListUnauthorized) watchCoreV1NamespacedPodListRes() {}

// WatchCoreV1NamespacedPodTemplateListUnauthorized is response for WatchCoreV1NamespacedPodTemplateList operation.
type WatchCoreV1NamespacedPodTemplateListUnauthorized struct{}

func (*WatchCoreV1NamespacedPodTemplateListUnauthorized) watchCoreV1NamespacedPodTemplateListRes() {}

// WatchCoreV1NamespacedPodTemplateUnauthorized is response for WatchCoreV1NamespacedPodTemplate operation.
type WatchCoreV1NamespacedPodTemplateUnauthorized struct{}

func (*WatchCoreV1NamespacedPodTemplateUnauthorized) watchCoreV1NamespacedPodTemplateRes() {}

// WatchCoreV1NamespacedPodUnauthorized is response for WatchCoreV1NamespacedPod operation.
type WatchCoreV1NamespacedPodUnauthorized struct{}

func (*WatchCoreV1NamespacedPodUnauthorized) watchCoreV1NamespacedPodRes() {}

// WatchCoreV1NamespacedReplicationControllerListUnauthorized is response for WatchCoreV1NamespacedReplicationControllerList operation.
type WatchCoreV1NamespacedReplicationControllerListUnauthorized struct{}

func (*WatchCoreV1NamespacedReplicationControllerListUnauthorized) watchCoreV1NamespacedReplicationControllerListRes() {
}

// WatchCoreV1NamespacedReplicationControllerUnauthorized is response for WatchCoreV1NamespacedReplicationController operation.
type WatchCoreV1NamespacedReplicationControllerUnauthorized struct{}

func (*WatchCoreV1NamespacedReplicationControllerUnauthorized) watchCoreV1NamespacedReplicationControllerRes() {
}

// WatchCoreV1NamespacedResourceQuotaListUnauthorized is response for WatchCoreV1NamespacedResourceQuotaList operation.
type WatchCoreV1NamespacedResourceQuotaListUnauthorized struct{}

func (*WatchCoreV1NamespacedResourceQuotaListUnauthorized) watchCoreV1NamespacedResourceQuotaListRes() {
}

// WatchCoreV1NamespacedResourceQuotaUnauthorized is response for WatchCoreV1NamespacedResourceQuota operation.
type WatchCoreV1NamespacedResourceQuotaUnauthorized struct{}

func (*WatchCoreV1NamespacedResourceQuotaUnauthorized) watchCoreV1NamespacedResourceQuotaRes() {}

// WatchCoreV1NamespacedSecretListUnauthorized is response for WatchCoreV1NamespacedSecretList operation.
type WatchCoreV1NamespacedSecretListUnauthorized struct{}

func (*WatchCoreV1NamespacedSecretListUnauthorized) watchCoreV1NamespacedSecretListRes() {}

// WatchCoreV1NamespacedSecretUnauthorized is response for WatchCoreV1NamespacedSecret operation.
type WatchCoreV1NamespacedSecretUnauthorized struct{}

func (*WatchCoreV1NamespacedSecretUnauthorized) watchCoreV1NamespacedSecretRes() {}

// WatchCoreV1NamespacedServiceAccountListUnauthorized is response for WatchCoreV1NamespacedServiceAccountList operation.
type WatchCoreV1NamespacedServiceAccountListUnauthorized struct{}

func (*WatchCoreV1NamespacedServiceAccountListUnauthorized) watchCoreV1NamespacedServiceAccountListRes() {
}

// WatchCoreV1NamespacedServiceAccountUnauthorized is response for WatchCoreV1NamespacedServiceAccount operation.
type WatchCoreV1NamespacedServiceAccountUnauthorized struct{}

func (*WatchCoreV1NamespacedServiceAccountUnauthorized) watchCoreV1NamespacedServiceAccountRes() {}

// WatchCoreV1NamespacedServiceListUnauthorized is response for WatchCoreV1NamespacedServiceList operation.
type WatchCoreV1NamespacedServiceListUnauthorized struct{}

func (*WatchCoreV1NamespacedServiceListUnauthorized) watchCoreV1NamespacedServiceListRes() {}

// WatchCoreV1NamespacedServiceUnauthorized is response for WatchCoreV1NamespacedService operation.
type WatchCoreV1NamespacedServiceUnauthorized struct{}

func (*WatchCoreV1NamespacedServiceUnauthorized) watchCoreV1NamespacedServiceRes() {}

// WatchCoreV1NodeListUnauthorized is response for WatchCoreV1NodeList operation.
type WatchCoreV1NodeListUnauthorized struct{}

func (*WatchCoreV1NodeListUnauthorized) watchCoreV1NodeListRes() {}

// WatchCoreV1NodeUnauthorized is response for WatchCoreV1Node operation.
type WatchCoreV1NodeUnauthorized struct{}

func (*WatchCoreV1NodeUnauthorized) watchCoreV1NodeRes() {}

// WatchCoreV1PersistentVolumeClaimListForAllNamespacesUnauthorized is response for WatchCoreV1PersistentVolumeClaimListForAllNamespaces operation.
type WatchCoreV1PersistentVolumeClaimListForAllNamespacesUnauthorized struct{}

func (*WatchCoreV1PersistentVolumeClaimListForAllNamespacesUnauthorized) watchCoreV1PersistentVolumeClaimListForAllNamespacesRes() {
}

// WatchCoreV1PersistentVolumeListUnauthorized is response for WatchCoreV1PersistentVolumeList operation.
type WatchCoreV1PersistentVolumeListUnauthorized struct{}

func (*WatchCoreV1PersistentVolumeListUnauthorized) watchCoreV1PersistentVolumeListRes() {}

// WatchCoreV1PersistentVolumeUnauthorized is response for WatchCoreV1PersistentVolume operation.
type WatchCoreV1PersistentVolumeUnauthorized struct{}

func (*WatchCoreV1PersistentVolumeUnauthorized) watchCoreV1PersistentVolumeRes() {}

// WatchCoreV1PodListForAllNamespacesUnauthorized is response for WatchCoreV1PodListForAllNamespaces operation.
type WatchCoreV1PodListForAllNamespacesUnauthorized struct{}

func (*WatchCoreV1PodListForAllNamespacesUnauthorized) watchCoreV1PodListForAllNamespacesRes() {}

// WatchCoreV1PodTemplateListForAllNamespacesUnauthorized is response for WatchCoreV1PodTemplateListForAllNamespaces operation.
type WatchCoreV1PodTemplateListForAllNamespacesUnauthorized struct{}

func (*WatchCoreV1PodTemplateListForAllNamespacesUnauthorized) watchCoreV1PodTemplateListForAllNamespacesRes() {
}

// WatchCoreV1ReplicationControllerListForAllNamespacesUnauthorized is response for WatchCoreV1ReplicationControllerListForAllNamespaces operation.
type WatchCoreV1ReplicationControllerListForAllNamespacesUnauthorized struct{}

func (*WatchCoreV1ReplicationControllerListForAllNamespacesUnauthorized) watchCoreV1ReplicationControllerListForAllNamespacesRes() {
}

// WatchCoreV1ResourceQuotaListForAllNamespacesUnauthorized is response for WatchCoreV1ResourceQuotaListForAllNamespaces operation.
type WatchCoreV1ResourceQuotaListForAllNamespacesUnauthorized struct{}

func (*WatchCoreV1ResourceQuotaListForAllNamespacesUnauthorized) watchCoreV1ResourceQuotaListForAllNamespacesRes() {
}

// WatchCoreV1SecretListForAllNamespacesUnauthorized is response for WatchCoreV1SecretListForAllNamespaces operation.
type WatchCoreV1SecretListForAllNamespacesUnauthorized struct{}

func (*WatchCoreV1SecretListForAllNamespacesUnauthorized) watchCoreV1SecretListForAllNamespacesRes() {
}

// WatchCoreV1ServiceAccountListForAllNamespacesUnauthorized is response for WatchCoreV1ServiceAccountListForAllNamespaces operation.
type WatchCoreV1ServiceAccountListForAllNamespacesUnauthorized struct{}

func (*WatchCoreV1ServiceAccountListForAllNamespacesUnauthorized) watchCoreV1ServiceAccountListForAllNamespacesRes() {
}

// WatchCoreV1ServiceListForAllNamespacesUnauthorized is response for WatchCoreV1ServiceListForAllNamespaces operation.
type WatchCoreV1ServiceListForAllNamespacesUnauthorized struct{}

func (*WatchCoreV1ServiceListForAllNamespacesUnauthorized) watchCoreV1ServiceListForAllNamespacesRes() {
}

// WatchDiscoveryV1EndpointSliceListForAllNamespacesUnauthorized is response for WatchDiscoveryV1EndpointSliceListForAllNamespaces operation.
type WatchDiscoveryV1EndpointSliceListForAllNamespacesUnauthorized struct{}

func (*WatchDiscoveryV1EndpointSliceListForAllNamespacesUnauthorized) watchDiscoveryV1EndpointSliceListForAllNamespacesRes() {
}

// WatchDiscoveryV1NamespacedEndpointSliceListUnauthorized is response for WatchDiscoveryV1NamespacedEndpointSliceList operation.
type WatchDiscoveryV1NamespacedEndpointSliceListUnauthorized struct{}

func (*WatchDiscoveryV1NamespacedEndpointSliceListUnauthorized) watchDiscoveryV1NamespacedEndpointSliceListRes() {
}

// WatchDiscoveryV1NamespacedEndpointSliceUnauthorized is response for WatchDiscoveryV1NamespacedEndpointSlice operation.
type WatchDiscoveryV1NamespacedEndpointSliceUnauthorized struct{}

func (*WatchDiscoveryV1NamespacedEndpointSliceUnauthorized) watchDiscoveryV1NamespacedEndpointSliceRes() {
}

// WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesUnauthorized is response for WatchDiscoveryV1beta1EndpointSliceListForAllNamespaces operation.
type WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesUnauthorized struct{}

func (*WatchDiscoveryV1beta1EndpointSliceListForAllNamespacesUnauthorized) watchDiscoveryV1beta1EndpointSliceListForAllNamespacesRes() {
}

// WatchDiscoveryV1beta1NamespacedEndpointSliceListUnauthorized is response for WatchDiscoveryV1beta1NamespacedEndpointSliceList operation.
type WatchDiscoveryV1beta1NamespacedEndpointSliceListUnauthorized struct{}

func (*WatchDiscoveryV1beta1NamespacedEndpointSliceListUnauthorized) watchDiscoveryV1beta1NamespacedEndpointSliceListRes() {
}

// WatchDiscoveryV1beta1NamespacedEndpointSliceUnauthorized is response for WatchDiscoveryV1beta1NamespacedEndpointSlice operation.
type WatchDiscoveryV1beta1NamespacedEndpointSliceUnauthorized struct{}

func (*WatchDiscoveryV1beta1NamespacedEndpointSliceUnauthorized) watchDiscoveryV1beta1NamespacedEndpointSliceRes() {
}

// WatchEventsV1EventListForAllNamespacesUnauthorized is response for WatchEventsV1EventListForAllNamespaces operation.
type WatchEventsV1EventListForAllNamespacesUnauthorized struct{}

func (*WatchEventsV1EventListForAllNamespacesUnauthorized) watchEventsV1EventListForAllNamespacesRes() {
}

// WatchEventsV1NamespacedEventListUnauthorized is response for WatchEventsV1NamespacedEventList operation.
type WatchEventsV1NamespacedEventListUnauthorized struct{}

func (*WatchEventsV1NamespacedEventListUnauthorized) watchEventsV1NamespacedEventListRes() {}

// WatchEventsV1NamespacedEventUnauthorized is response for WatchEventsV1NamespacedEvent operation.
type WatchEventsV1NamespacedEventUnauthorized struct{}

func (*WatchEventsV1NamespacedEventUnauthorized) watchEventsV1NamespacedEventRes() {}

// WatchEventsV1beta1EventListForAllNamespacesUnauthorized is response for WatchEventsV1beta1EventListForAllNamespaces operation.
type WatchEventsV1beta1EventListForAllNamespacesUnauthorized struct{}

func (*WatchEventsV1beta1EventListForAllNamespacesUnauthorized) watchEventsV1beta1EventListForAllNamespacesRes() {
}

// WatchEventsV1beta1NamespacedEventListUnauthorized is response for WatchEventsV1beta1NamespacedEventList operation.
type WatchEventsV1beta1NamespacedEventListUnauthorized struct{}

func (*WatchEventsV1beta1NamespacedEventListUnauthorized) watchEventsV1beta1NamespacedEventListRes() {
}

// WatchEventsV1beta1NamespacedEventUnauthorized is response for WatchEventsV1beta1NamespacedEvent operation.
type WatchEventsV1beta1NamespacedEventUnauthorized struct{}

func (*WatchEventsV1beta1NamespacedEventUnauthorized) watchEventsV1beta1NamespacedEventRes() {}

// WatchFlowcontrolApiserverV1beta1FlowSchemaListUnauthorized is response for WatchFlowcontrolApiserverV1beta1FlowSchemaList operation.
type WatchFlowcontrolApiserverV1beta1FlowSchemaListUnauthorized struct{}

func (*WatchFlowcontrolApiserverV1beta1FlowSchemaListUnauthorized) watchFlowcontrolApiserverV1beta1FlowSchemaListRes() {
}

// WatchFlowcontrolApiserverV1beta1FlowSchemaUnauthorized is response for WatchFlowcontrolApiserverV1beta1FlowSchema operation.
type WatchFlowcontrolApiserverV1beta1FlowSchemaUnauthorized struct{}

func (*WatchFlowcontrolApiserverV1beta1FlowSchemaUnauthorized) watchFlowcontrolApiserverV1beta1FlowSchemaRes() {
}

// WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListUnauthorized is response for WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationList operation.
type WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListUnauthorized struct{}

func (*WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListUnauthorized) watchFlowcontrolApiserverV1beta1PriorityLevelConfigurationListRes() {
}

// WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationUnauthorized is response for WatchFlowcontrolApiserverV1beta1PriorityLevelConfiguration operation.
type WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationUnauthorized struct{}

func (*WatchFlowcontrolApiserverV1beta1PriorityLevelConfigurationUnauthorized) watchFlowcontrolApiserverV1beta1PriorityLevelConfigurationRes() {
}

// WatchFlowcontrolApiserverV1beta2FlowSchemaListUnauthorized is response for WatchFlowcontrolApiserverV1beta2FlowSchemaList operation.
type WatchFlowcontrolApiserverV1beta2FlowSchemaListUnauthorized struct{}

func (*WatchFlowcontrolApiserverV1beta2FlowSchemaListUnauthorized) watchFlowcontrolApiserverV1beta2FlowSchemaListRes() {
}

// WatchFlowcontrolApiserverV1beta2FlowSchemaUnauthorized is response for WatchFlowcontrolApiserverV1beta2FlowSchema operation.
type WatchFlowcontrolApiserverV1beta2FlowSchemaUnauthorized struct{}

func (*WatchFlowcontrolApiserverV1beta2FlowSchemaUnauthorized) watchFlowcontrolApiserverV1beta2FlowSchemaRes() {
}

// WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListUnauthorized is response for WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationList operation.
type WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListUnauthorized struct{}

func (*WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListUnauthorized) watchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListRes() {
}

// WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationUnauthorized is response for WatchFlowcontrolApiserverV1beta2PriorityLevelConfiguration operation.
type WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationUnauthorized struct{}

func (*WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationUnauthorized) watchFlowcontrolApiserverV1beta2PriorityLevelConfigurationRes() {
}

// WatchInternalApiserverV1alpha1StorageVersionListUnauthorized is response for WatchInternalApiserverV1alpha1StorageVersionList operation.
type WatchInternalApiserverV1alpha1StorageVersionListUnauthorized struct{}

func (*WatchInternalApiserverV1alpha1StorageVersionListUnauthorized) watchInternalApiserverV1alpha1StorageVersionListRes() {
}

// WatchInternalApiserverV1alpha1StorageVersionUnauthorized is response for WatchInternalApiserverV1alpha1StorageVersion operation.
type WatchInternalApiserverV1alpha1StorageVersionUnauthorized struct{}

func (*WatchInternalApiserverV1alpha1StorageVersionUnauthorized) watchInternalApiserverV1alpha1StorageVersionRes() {
}

// WatchNetworkingV1IngressClassListUnauthorized is response for WatchNetworkingV1IngressClassList operation.
type WatchNetworkingV1IngressClassListUnauthorized struct{}

func (*WatchNetworkingV1IngressClassListUnauthorized) watchNetworkingV1IngressClassListRes() {}

// WatchNetworkingV1IngressClassUnauthorized is response for WatchNetworkingV1IngressClass operation.
type WatchNetworkingV1IngressClassUnauthorized struct{}

func (*WatchNetworkingV1IngressClassUnauthorized) watchNetworkingV1IngressClassRes() {}

// WatchNetworkingV1IngressListForAllNamespacesUnauthorized is response for WatchNetworkingV1IngressListForAllNamespaces operation.
type WatchNetworkingV1IngressListForAllNamespacesUnauthorized struct{}

func (*WatchNetworkingV1IngressListForAllNamespacesUnauthorized) watchNetworkingV1IngressListForAllNamespacesRes() {
}

// WatchNetworkingV1NamespacedIngressListUnauthorized is response for WatchNetworkingV1NamespacedIngressList operation.
type WatchNetworkingV1NamespacedIngressListUnauthorized struct{}

func (*WatchNetworkingV1NamespacedIngressListUnauthorized) watchNetworkingV1NamespacedIngressListRes() {
}

// WatchNetworkingV1NamespacedIngressUnauthorized is response for WatchNetworkingV1NamespacedIngress operation.
type WatchNetworkingV1NamespacedIngressUnauthorized struct{}

func (*WatchNetworkingV1NamespacedIngressUnauthorized) watchNetworkingV1NamespacedIngressRes() {}

// WatchNetworkingV1NamespacedNetworkPolicyListUnauthorized is response for WatchNetworkingV1NamespacedNetworkPolicyList operation.
type WatchNetworkingV1NamespacedNetworkPolicyListUnauthorized struct{}

func (*WatchNetworkingV1NamespacedNetworkPolicyListUnauthorized) watchNetworkingV1NamespacedNetworkPolicyListRes() {
}

// WatchNetworkingV1NamespacedNetworkPolicyUnauthorized is response for WatchNetworkingV1NamespacedNetworkPolicy operation.
type WatchNetworkingV1NamespacedNetworkPolicyUnauthorized struct{}

func (*WatchNetworkingV1NamespacedNetworkPolicyUnauthorized) watchNetworkingV1NamespacedNetworkPolicyRes() {
}

// WatchNetworkingV1NetworkPolicyListForAllNamespacesUnauthorized is response for WatchNetworkingV1NetworkPolicyListForAllNamespaces operation.
type WatchNetworkingV1NetworkPolicyListForAllNamespacesUnauthorized struct{}

func (*WatchNetworkingV1NetworkPolicyListForAllNamespacesUnauthorized) watchNetworkingV1NetworkPolicyListForAllNamespacesRes() {
}

// WatchNodeV1RuntimeClassListUnauthorized is response for WatchNodeV1RuntimeClassList operation.
type WatchNodeV1RuntimeClassListUnauthorized struct{}

func (*WatchNodeV1RuntimeClassListUnauthorized) watchNodeV1RuntimeClassListRes() {}

// WatchNodeV1RuntimeClassUnauthorized is response for WatchNodeV1RuntimeClass operation.
type WatchNodeV1RuntimeClassUnauthorized struct{}

func (*WatchNodeV1RuntimeClassUnauthorized) watchNodeV1RuntimeClassRes() {}

// WatchNodeV1alpha1RuntimeClassListUnauthorized is response for WatchNodeV1alpha1RuntimeClassList operation.
type WatchNodeV1alpha1RuntimeClassListUnauthorized struct{}

func (*WatchNodeV1alpha1RuntimeClassListUnauthorized) watchNodeV1alpha1RuntimeClassListRes() {}

// WatchNodeV1alpha1RuntimeClassUnauthorized is response for WatchNodeV1alpha1RuntimeClass operation.
type WatchNodeV1alpha1RuntimeClassUnauthorized struct{}

func (*WatchNodeV1alpha1RuntimeClassUnauthorized) watchNodeV1alpha1RuntimeClassRes() {}

// WatchNodeV1beta1RuntimeClassListUnauthorized is response for WatchNodeV1beta1RuntimeClassList operation.
type WatchNodeV1beta1RuntimeClassListUnauthorized struct{}

func (*WatchNodeV1beta1RuntimeClassListUnauthorized) watchNodeV1beta1RuntimeClassListRes() {}

// WatchNodeV1beta1RuntimeClassUnauthorized is response for WatchNodeV1beta1RuntimeClass operation.
type WatchNodeV1beta1RuntimeClassUnauthorized struct{}

func (*WatchNodeV1beta1RuntimeClassUnauthorized) watchNodeV1beta1RuntimeClassRes() {}

// WatchPolicyV1NamespacedPodDisruptionBudgetListUnauthorized is response for WatchPolicyV1NamespacedPodDisruptionBudgetList operation.
type WatchPolicyV1NamespacedPodDisruptionBudgetListUnauthorized struct{}

func (*WatchPolicyV1NamespacedPodDisruptionBudgetListUnauthorized) watchPolicyV1NamespacedPodDisruptionBudgetListRes() {
}

// WatchPolicyV1NamespacedPodDisruptionBudgetUnauthorized is response for WatchPolicyV1NamespacedPodDisruptionBudget operation.
type WatchPolicyV1NamespacedPodDisruptionBudgetUnauthorized struct{}

func (*WatchPolicyV1NamespacedPodDisruptionBudgetUnauthorized) watchPolicyV1NamespacedPodDisruptionBudgetRes() {
}

// WatchPolicyV1PodDisruptionBudgetListForAllNamespacesUnauthorized is response for WatchPolicyV1PodDisruptionBudgetListForAllNamespaces operation.
type WatchPolicyV1PodDisruptionBudgetListForAllNamespacesUnauthorized struct{}

func (*WatchPolicyV1PodDisruptionBudgetListForAllNamespacesUnauthorized) watchPolicyV1PodDisruptionBudgetListForAllNamespacesRes() {
}

// WatchPolicyV1beta1NamespacedPodDisruptionBudgetListUnauthorized is response for WatchPolicyV1beta1NamespacedPodDisruptionBudgetList operation.
type WatchPolicyV1beta1NamespacedPodDisruptionBudgetListUnauthorized struct{}

func (*WatchPolicyV1beta1NamespacedPodDisruptionBudgetListUnauthorized) watchPolicyV1beta1NamespacedPodDisruptionBudgetListRes() {
}

// WatchPolicyV1beta1NamespacedPodDisruptionBudgetUnauthorized is response for WatchPolicyV1beta1NamespacedPodDisruptionBudget operation.
type WatchPolicyV1beta1NamespacedPodDisruptionBudgetUnauthorized struct{}

func (*WatchPolicyV1beta1NamespacedPodDisruptionBudgetUnauthorized) watchPolicyV1beta1NamespacedPodDisruptionBudgetRes() {
}

// WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesUnauthorized is response for WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespaces operation.
type WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesUnauthorized struct{}

func (*WatchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesUnauthorized) watchPolicyV1beta1PodDisruptionBudgetListForAllNamespacesRes() {
}

// WatchPolicyV1beta1PodSecurityPolicyListUnauthorized is response for WatchPolicyV1beta1PodSecurityPolicyList operation.
type WatchPolicyV1beta1PodSecurityPolicyListUnauthorized struct{}

func (*WatchPolicyV1beta1PodSecurityPolicyListUnauthorized) watchPolicyV1beta1PodSecurityPolicyListRes() {
}

// WatchPolicyV1beta1PodSecurityPolicyUnauthorized is response for WatchPolicyV1beta1PodSecurityPolicy operation.
type WatchPolicyV1beta1PodSecurityPolicyUnauthorized struct{}

func (*WatchPolicyV1beta1PodSecurityPolicyUnauthorized) watchPolicyV1beta1PodSecurityPolicyRes() {}

// WatchRbacAuthorizationV1ClusterRoleBindingListUnauthorized is response for WatchRbacAuthorizationV1ClusterRoleBindingList operation.
type WatchRbacAuthorizationV1ClusterRoleBindingListUnauthorized struct{}

func (*WatchRbacAuthorizationV1ClusterRoleBindingListUnauthorized) watchRbacAuthorizationV1ClusterRoleBindingListRes() {
}

// WatchRbacAuthorizationV1ClusterRoleBindingUnauthorized is response for WatchRbacAuthorizationV1ClusterRoleBinding operation.
type WatchRbacAuthorizationV1ClusterRoleBindingUnauthorized struct{}

func (*WatchRbacAuthorizationV1ClusterRoleBindingUnauthorized) watchRbacAuthorizationV1ClusterRoleBindingRes() {
}

// WatchRbacAuthorizationV1ClusterRoleListUnauthorized is response for WatchRbacAuthorizationV1ClusterRoleList operation.
type WatchRbacAuthorizationV1ClusterRoleListUnauthorized struct{}

func (*WatchRbacAuthorizationV1ClusterRoleListUnauthorized) watchRbacAuthorizationV1ClusterRoleListRes() {
}

// WatchRbacAuthorizationV1ClusterRoleUnauthorized is response for WatchRbacAuthorizationV1ClusterRole operation.
type WatchRbacAuthorizationV1ClusterRoleUnauthorized struct{}

func (*WatchRbacAuthorizationV1ClusterRoleUnauthorized) watchRbacAuthorizationV1ClusterRoleRes() {}

// WatchRbacAuthorizationV1NamespacedRoleBindingListUnauthorized is response for WatchRbacAuthorizationV1NamespacedRoleBindingList operation.
type WatchRbacAuthorizationV1NamespacedRoleBindingListUnauthorized struct{}

func (*WatchRbacAuthorizationV1NamespacedRoleBindingListUnauthorized) watchRbacAuthorizationV1NamespacedRoleBindingListRes() {
}

// WatchRbacAuthorizationV1NamespacedRoleBindingUnauthorized is response for WatchRbacAuthorizationV1NamespacedRoleBinding operation.
type WatchRbacAuthorizationV1NamespacedRoleBindingUnauthorized struct{}

func (*WatchRbacAuthorizationV1NamespacedRoleBindingUnauthorized) watchRbacAuthorizationV1NamespacedRoleBindingRes() {
}

// WatchRbacAuthorizationV1NamespacedRoleListUnauthorized is response for WatchRbacAuthorizationV1NamespacedRoleList operation.
type WatchRbacAuthorizationV1NamespacedRoleListUnauthorized struct{}

func (*WatchRbacAuthorizationV1NamespacedRoleListUnauthorized) watchRbacAuthorizationV1NamespacedRoleListRes() {
}

// WatchRbacAuthorizationV1NamespacedRoleUnauthorized is response for WatchRbacAuthorizationV1NamespacedRole operation.
type WatchRbacAuthorizationV1NamespacedRoleUnauthorized struct{}

func (*WatchRbacAuthorizationV1NamespacedRoleUnauthorized) watchRbacAuthorizationV1NamespacedRoleRes() {
}

// WatchRbacAuthorizationV1RoleBindingListForAllNamespacesUnauthorized is response for WatchRbacAuthorizationV1RoleBindingListForAllNamespaces operation.
type WatchRbacAuthorizationV1RoleBindingListForAllNamespacesUnauthorized struct{}

func (*WatchRbacAuthorizationV1RoleBindingListForAllNamespacesUnauthorized) watchRbacAuthorizationV1RoleBindingListForAllNamespacesRes() {
}

// WatchRbacAuthorizationV1RoleListForAllNamespacesUnauthorized is response for WatchRbacAuthorizationV1RoleListForAllNamespaces operation.
type WatchRbacAuthorizationV1RoleListForAllNamespacesUnauthorized struct{}

func (*WatchRbacAuthorizationV1RoleListForAllNamespacesUnauthorized) watchRbacAuthorizationV1RoleListForAllNamespacesRes() {
}

// WatchSchedulingV1PriorityClassListUnauthorized is response for WatchSchedulingV1PriorityClassList operation.
type WatchSchedulingV1PriorityClassListUnauthorized struct{}

func (*WatchSchedulingV1PriorityClassListUnauthorized) watchSchedulingV1PriorityClassListRes() {}

// WatchSchedulingV1PriorityClassUnauthorized is response for WatchSchedulingV1PriorityClass operation.
type WatchSchedulingV1PriorityClassUnauthorized struct{}

func (*WatchSchedulingV1PriorityClassUnauthorized) watchSchedulingV1PriorityClassRes() {}

// WatchStorageV1CSIDriverListUnauthorized is response for WatchStorageV1CSIDriverList operation.
type WatchStorageV1CSIDriverListUnauthorized struct{}

func (*WatchStorageV1CSIDriverListUnauthorized) watchStorageV1CSIDriverListRes() {}

// WatchStorageV1CSIDriverUnauthorized is response for WatchStorageV1CSIDriver operation.
type WatchStorageV1CSIDriverUnauthorized struct{}

func (*WatchStorageV1CSIDriverUnauthorized) watchStorageV1CSIDriverRes() {}

// WatchStorageV1CSINodeListUnauthorized is response for WatchStorageV1CSINodeList operation.
type WatchStorageV1CSINodeListUnauthorized struct{}

func (*WatchStorageV1CSINodeListUnauthorized) watchStorageV1CSINodeListRes() {}

// WatchStorageV1CSINodeUnauthorized is response for WatchStorageV1CSINode operation.
type WatchStorageV1CSINodeUnauthorized struct{}

func (*WatchStorageV1CSINodeUnauthorized) watchStorageV1CSINodeRes() {}

// WatchStorageV1StorageClassListUnauthorized is response for WatchStorageV1StorageClassList operation.
type WatchStorageV1StorageClassListUnauthorized struct{}

func (*WatchStorageV1StorageClassListUnauthorized) watchStorageV1StorageClassListRes() {}

// WatchStorageV1StorageClassUnauthorized is response for WatchStorageV1StorageClass operation.
type WatchStorageV1StorageClassUnauthorized struct{}

func (*WatchStorageV1StorageClassUnauthorized) watchStorageV1StorageClassRes() {}

// WatchStorageV1VolumeAttachmentListUnauthorized is response for WatchStorageV1VolumeAttachmentList operation.
type WatchStorageV1VolumeAttachmentListUnauthorized struct{}

func (*WatchStorageV1VolumeAttachmentListUnauthorized) watchStorageV1VolumeAttachmentListRes() {}

// WatchStorageV1VolumeAttachmentUnauthorized is response for WatchStorageV1VolumeAttachment operation.
type WatchStorageV1VolumeAttachmentUnauthorized struct{}

func (*WatchStorageV1VolumeAttachmentUnauthorized) watchStorageV1VolumeAttachmentRes() {}

// WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesUnauthorized is response for WatchStorageV1alpha1CSIStorageCapacityListForAllNamespaces operation.
type WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesUnauthorized struct{}

func (*WatchStorageV1alpha1CSIStorageCapacityListForAllNamespacesUnauthorized) watchStorageV1alpha1CSIStorageCapacityListForAllNamespacesRes() {
}

// WatchStorageV1alpha1NamespacedCSIStorageCapacityListUnauthorized is response for WatchStorageV1alpha1NamespacedCSIStorageCapacityList operation.
type WatchStorageV1alpha1NamespacedCSIStorageCapacityListUnauthorized struct{}

func (*WatchStorageV1alpha1NamespacedCSIStorageCapacityListUnauthorized) watchStorageV1alpha1NamespacedCSIStorageCapacityListRes() {
}

// WatchStorageV1alpha1NamespacedCSIStorageCapacityUnauthorized is response for WatchStorageV1alpha1NamespacedCSIStorageCapacity operation.
type WatchStorageV1alpha1NamespacedCSIStorageCapacityUnauthorized struct{}

func (*WatchStorageV1alpha1NamespacedCSIStorageCapacityUnauthorized) watchStorageV1alpha1NamespacedCSIStorageCapacityRes() {
}

// WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesUnauthorized is response for WatchStorageV1beta1CSIStorageCapacityListForAllNamespaces operation.
type WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesUnauthorized struct{}

func (*WatchStorageV1beta1CSIStorageCapacityListForAllNamespacesUnauthorized) watchStorageV1beta1CSIStorageCapacityListForAllNamespacesRes() {
}

// WatchStorageV1beta1NamespacedCSIStorageCapacityListUnauthorized is response for WatchStorageV1beta1NamespacedCSIStorageCapacityList operation.
type WatchStorageV1beta1NamespacedCSIStorageCapacityListUnauthorized struct{}

func (*WatchStorageV1beta1NamespacedCSIStorageCapacityListUnauthorized) watchStorageV1beta1NamespacedCSIStorageCapacityListRes() {
}

// WatchStorageV1beta1NamespacedCSIStorageCapacityUnauthorized is response for WatchStorageV1beta1NamespacedCSIStorageCapacity operation.
type WatchStorageV1beta1NamespacedCSIStorageCapacityUnauthorized struct{}

func (*WatchStorageV1beta1NamespacedCSIStorageCapacityUnauthorized) watchStorageV1beta1NamespacedCSIStorageCapacityRes() {
}

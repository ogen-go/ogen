// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"time"

	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/codes"

	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
)

// handleMarketBondsGetRequest handles GET /market/bonds operation.
//
// Получение списка облигаций.
//
// GET /market/bonds
func (s *Server) handleMarketBondsGetRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	var otelAttrs []attribute.KeyValue

	// Start a span for this request.
	ctx, span := s.cfg.Tracer.Start(r.Context(), "MarketBondsGet",
		serverSpanKind,
	)
	defer span.End()

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		elapsedDuration := time.Since(startTime)
		s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
	}()

	// Increment request counter.
	s.requests.Add(ctx, 1, otelAttrs...)

	var (
		op          = getPaths().MarketBondsGet
		recordError = func(stage string, err error) {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			s.errors.Add(ctx, 1, otelAttrs...)
		}
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name:      op.Name,
			ID:        op.ID,
			Operation: op,
		}
	)
	if sctx, err := s.securitySSOAuth(ctx, "MarketBondsGet", r); err != nil {
		err = &ogenerrors.SecurityError{
			OperationContext: opErrContext,
			Security:         "SSOAuth",
			Err:              err,
		}
		recordError("Security:SSOAuth", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	} else {
		ctx = sctx
	}

	var response MarketBondsGetRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:       ctx,
			OperationName: "MarketBondsGet",
			OperationID:   "",
			Op:            op,
			Body:          nil,
			Params:        middleware.Parameters{},
			Raw:           r,
		}

		type (
			Request  = struct{}
			Params   = struct{}
			Response = MarketBondsGetRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			nil,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.MarketBondsGet(ctx)
				return response, err
			},
		)
	} else {
		response, err = s.h.MarketBondsGet(ctx)
	}
	if err != nil {
		recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeMarketBondsGetResponse(response, w, span); err != nil {
		recordError("EncodeResponse", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
}

// handleMarketCandlesGetRequest handles GET /market/candles operation.
//
// Получение исторических свечей по FIGI.
//
// GET /market/candles
func (s *Server) handleMarketCandlesGetRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	var otelAttrs []attribute.KeyValue

	// Start a span for this request.
	ctx, span := s.cfg.Tracer.Start(r.Context(), "MarketCandlesGet",
		serverSpanKind,
	)
	defer span.End()

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		elapsedDuration := time.Since(startTime)
		s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
	}()

	// Increment request counter.
	s.requests.Add(ctx, 1, otelAttrs...)

	var (
		op          = getPaths().MarketCandlesGet
		recordError = func(stage string, err error) {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			s.errors.Add(ctx, 1, otelAttrs...)
		}
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name:      op.Name,
			ID:        op.ID,
			Operation: op,
		}
	)
	if sctx, err := s.securitySSOAuth(ctx, "MarketCandlesGet", r); err != nil {
		err = &ogenerrors.SecurityError{
			OperationContext: opErrContext,
			Security:         "SSOAuth",
			Err:              err,
		}
		recordError("Security:SSOAuth", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	} else {
		ctx = sctx
	}
	params, err := decodeMarketCandlesGetParams(args, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response MarketCandlesGetRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:       ctx,
			OperationName: "MarketCandlesGet",
			OperationID:   "",
			Op:            op,
			Body:          nil,
			Params: middleware.Parameters{
				{
					Name: "figi",
					In:   "query",
				}: params.Figi,
				{
					Name: "from",
					In:   "query",
				}: params.From,
				{
					Name: "to",
					In:   "query",
				}: params.To,
				{
					Name: "interval",
					In:   "query",
				}: params.Interval,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = MarketCandlesGetParams
			Response = MarketCandlesGetRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackMarketCandlesGetParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.MarketCandlesGet(ctx, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.MarketCandlesGet(ctx, params)
	}
	if err != nil {
		recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeMarketCandlesGetResponse(response, w, span); err != nil {
		recordError("EncodeResponse", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
}

// handleMarketCurrenciesGetRequest handles GET /market/currencies operation.
//
// Получение списка валютных пар.
//
// GET /market/currencies
func (s *Server) handleMarketCurrenciesGetRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	var otelAttrs []attribute.KeyValue

	// Start a span for this request.
	ctx, span := s.cfg.Tracer.Start(r.Context(), "MarketCurrenciesGet",
		serverSpanKind,
	)
	defer span.End()

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		elapsedDuration := time.Since(startTime)
		s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
	}()

	// Increment request counter.
	s.requests.Add(ctx, 1, otelAttrs...)

	var (
		op          = getPaths().MarketCurrenciesGet
		recordError = func(stage string, err error) {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			s.errors.Add(ctx, 1, otelAttrs...)
		}
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name:      op.Name,
			ID:        op.ID,
			Operation: op,
		}
	)
	if sctx, err := s.securitySSOAuth(ctx, "MarketCurrenciesGet", r); err != nil {
		err = &ogenerrors.SecurityError{
			OperationContext: opErrContext,
			Security:         "SSOAuth",
			Err:              err,
		}
		recordError("Security:SSOAuth", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	} else {
		ctx = sctx
	}

	var response MarketCurrenciesGetRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:       ctx,
			OperationName: "MarketCurrenciesGet",
			OperationID:   "",
			Op:            op,
			Body:          nil,
			Params:        middleware.Parameters{},
			Raw:           r,
		}

		type (
			Request  = struct{}
			Params   = struct{}
			Response = MarketCurrenciesGetRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			nil,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.MarketCurrenciesGet(ctx)
				return response, err
			},
		)
	} else {
		response, err = s.h.MarketCurrenciesGet(ctx)
	}
	if err != nil {
		recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeMarketCurrenciesGetResponse(response, w, span); err != nil {
		recordError("EncodeResponse", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
}

// handleMarketEtfsGetRequest handles GET /market/etfs operation.
//
// Получение списка ETF.
//
// GET /market/etfs
func (s *Server) handleMarketEtfsGetRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	var otelAttrs []attribute.KeyValue

	// Start a span for this request.
	ctx, span := s.cfg.Tracer.Start(r.Context(), "MarketEtfsGet",
		serverSpanKind,
	)
	defer span.End()

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		elapsedDuration := time.Since(startTime)
		s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
	}()

	// Increment request counter.
	s.requests.Add(ctx, 1, otelAttrs...)

	var (
		op          = getPaths().MarketEtfsGet
		recordError = func(stage string, err error) {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			s.errors.Add(ctx, 1, otelAttrs...)
		}
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name:      op.Name,
			ID:        op.ID,
			Operation: op,
		}
	)
	if sctx, err := s.securitySSOAuth(ctx, "MarketEtfsGet", r); err != nil {
		err = &ogenerrors.SecurityError{
			OperationContext: opErrContext,
			Security:         "SSOAuth",
			Err:              err,
		}
		recordError("Security:SSOAuth", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	} else {
		ctx = sctx
	}

	var response MarketEtfsGetRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:       ctx,
			OperationName: "MarketEtfsGet",
			OperationID:   "",
			Op:            op,
			Body:          nil,
			Params:        middleware.Parameters{},
			Raw:           r,
		}

		type (
			Request  = struct{}
			Params   = struct{}
			Response = MarketEtfsGetRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			nil,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.MarketEtfsGet(ctx)
				return response, err
			},
		)
	} else {
		response, err = s.h.MarketEtfsGet(ctx)
	}
	if err != nil {
		recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeMarketEtfsGetResponse(response, w, span); err != nil {
		recordError("EncodeResponse", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
}

// handleMarketOrderbookGetRequest handles GET /market/orderbook operation.
//
// Получение стакана по FIGI.
//
// GET /market/orderbook
func (s *Server) handleMarketOrderbookGetRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	var otelAttrs []attribute.KeyValue

	// Start a span for this request.
	ctx, span := s.cfg.Tracer.Start(r.Context(), "MarketOrderbookGet",
		serverSpanKind,
	)
	defer span.End()

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		elapsedDuration := time.Since(startTime)
		s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
	}()

	// Increment request counter.
	s.requests.Add(ctx, 1, otelAttrs...)

	var (
		op          = getPaths().MarketOrderbookGet
		recordError = func(stage string, err error) {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			s.errors.Add(ctx, 1, otelAttrs...)
		}
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name:      op.Name,
			ID:        op.ID,
			Operation: op,
		}
	)
	if sctx, err := s.securitySSOAuth(ctx, "MarketOrderbookGet", r); err != nil {
		err = &ogenerrors.SecurityError{
			OperationContext: opErrContext,
			Security:         "SSOAuth",
			Err:              err,
		}
		recordError("Security:SSOAuth", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	} else {
		ctx = sctx
	}
	params, err := decodeMarketOrderbookGetParams(args, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response MarketOrderbookGetRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:       ctx,
			OperationName: "MarketOrderbookGet",
			OperationID:   "",
			Op:            op,
			Body:          nil,
			Params: middleware.Parameters{
				{
					Name: "figi",
					In:   "query",
				}: params.Figi,
				{
					Name: "depth",
					In:   "query",
				}: params.Depth,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = MarketOrderbookGetParams
			Response = MarketOrderbookGetRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackMarketOrderbookGetParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.MarketOrderbookGet(ctx, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.MarketOrderbookGet(ctx, params)
	}
	if err != nil {
		recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeMarketOrderbookGetResponse(response, w, span); err != nil {
		recordError("EncodeResponse", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
}

// handleMarketSearchByFigiGetRequest handles GET /market/search/by-figi operation.
//
// Получение инструмента по FIGI.
//
// GET /market/search/by-figi
func (s *Server) handleMarketSearchByFigiGetRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	var otelAttrs []attribute.KeyValue

	// Start a span for this request.
	ctx, span := s.cfg.Tracer.Start(r.Context(), "MarketSearchByFigiGet",
		serverSpanKind,
	)
	defer span.End()

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		elapsedDuration := time.Since(startTime)
		s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
	}()

	// Increment request counter.
	s.requests.Add(ctx, 1, otelAttrs...)

	var (
		op          = getPaths().MarketSearchByFigiGet
		recordError = func(stage string, err error) {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			s.errors.Add(ctx, 1, otelAttrs...)
		}
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name:      op.Name,
			ID:        op.ID,
			Operation: op,
		}
	)
	if sctx, err := s.securitySSOAuth(ctx, "MarketSearchByFigiGet", r); err != nil {
		err = &ogenerrors.SecurityError{
			OperationContext: opErrContext,
			Security:         "SSOAuth",
			Err:              err,
		}
		recordError("Security:SSOAuth", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	} else {
		ctx = sctx
	}
	params, err := decodeMarketSearchByFigiGetParams(args, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response MarketSearchByFigiGetRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:       ctx,
			OperationName: "MarketSearchByFigiGet",
			OperationID:   "",
			Op:            op,
			Body:          nil,
			Params: middleware.Parameters{
				{
					Name: "figi",
					In:   "query",
				}: params.Figi,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = MarketSearchByFigiGetParams
			Response = MarketSearchByFigiGetRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackMarketSearchByFigiGetParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.MarketSearchByFigiGet(ctx, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.MarketSearchByFigiGet(ctx, params)
	}
	if err != nil {
		recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeMarketSearchByFigiGetResponse(response, w, span); err != nil {
		recordError("EncodeResponse", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
}

// handleMarketSearchByTickerGetRequest handles GET /market/search/by-ticker operation.
//
// Получение инструмента по тикеру.
//
// GET /market/search/by-ticker
func (s *Server) handleMarketSearchByTickerGetRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	var otelAttrs []attribute.KeyValue

	// Start a span for this request.
	ctx, span := s.cfg.Tracer.Start(r.Context(), "MarketSearchByTickerGet",
		serverSpanKind,
	)
	defer span.End()

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		elapsedDuration := time.Since(startTime)
		s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
	}()

	// Increment request counter.
	s.requests.Add(ctx, 1, otelAttrs...)

	var (
		op          = getPaths().MarketSearchByTickerGet
		recordError = func(stage string, err error) {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			s.errors.Add(ctx, 1, otelAttrs...)
		}
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name:      op.Name,
			ID:        op.ID,
			Operation: op,
		}
	)
	if sctx, err := s.securitySSOAuth(ctx, "MarketSearchByTickerGet", r); err != nil {
		err = &ogenerrors.SecurityError{
			OperationContext: opErrContext,
			Security:         "SSOAuth",
			Err:              err,
		}
		recordError("Security:SSOAuth", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	} else {
		ctx = sctx
	}
	params, err := decodeMarketSearchByTickerGetParams(args, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response MarketSearchByTickerGetRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:       ctx,
			OperationName: "MarketSearchByTickerGet",
			OperationID:   "",
			Op:            op,
			Body:          nil,
			Params: middleware.Parameters{
				{
					Name: "ticker",
					In:   "query",
				}: params.Ticker,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = MarketSearchByTickerGetParams
			Response = MarketSearchByTickerGetRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackMarketSearchByTickerGetParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.MarketSearchByTickerGet(ctx, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.MarketSearchByTickerGet(ctx, params)
	}
	if err != nil {
		recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeMarketSearchByTickerGetResponse(response, w, span); err != nil {
		recordError("EncodeResponse", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
}

// handleMarketStocksGetRequest handles GET /market/stocks operation.
//
// Получение списка акций.
//
// GET /market/stocks
func (s *Server) handleMarketStocksGetRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	var otelAttrs []attribute.KeyValue

	// Start a span for this request.
	ctx, span := s.cfg.Tracer.Start(r.Context(), "MarketStocksGet",
		serverSpanKind,
	)
	defer span.End()

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		elapsedDuration := time.Since(startTime)
		s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
	}()

	// Increment request counter.
	s.requests.Add(ctx, 1, otelAttrs...)

	var (
		op          = getPaths().MarketStocksGet
		recordError = func(stage string, err error) {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			s.errors.Add(ctx, 1, otelAttrs...)
		}
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name:      op.Name,
			ID:        op.ID,
			Operation: op,
		}
	)
	if sctx, err := s.securitySSOAuth(ctx, "MarketStocksGet", r); err != nil {
		err = &ogenerrors.SecurityError{
			OperationContext: opErrContext,
			Security:         "SSOAuth",
			Err:              err,
		}
		recordError("Security:SSOAuth", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	} else {
		ctx = sctx
	}

	var response MarketStocksGetRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:       ctx,
			OperationName: "MarketStocksGet",
			OperationID:   "",
			Op:            op,
			Body:          nil,
			Params:        middleware.Parameters{},
			Raw:           r,
		}

		type (
			Request  = struct{}
			Params   = struct{}
			Response = MarketStocksGetRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			nil,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.MarketStocksGet(ctx)
				return response, err
			},
		)
	} else {
		response, err = s.h.MarketStocksGet(ctx)
	}
	if err != nil {
		recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeMarketStocksGetResponse(response, w, span); err != nil {
		recordError("EncodeResponse", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
}

// handleOperationsGetRequest handles GET /operations operation.
//
// Получение списка операций.
//
// GET /operations
func (s *Server) handleOperationsGetRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	var otelAttrs []attribute.KeyValue

	// Start a span for this request.
	ctx, span := s.cfg.Tracer.Start(r.Context(), "OperationsGet",
		serverSpanKind,
	)
	defer span.End()

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		elapsedDuration := time.Since(startTime)
		s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
	}()

	// Increment request counter.
	s.requests.Add(ctx, 1, otelAttrs...)

	var (
		op          = getPaths().OperationsGet
		recordError = func(stage string, err error) {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			s.errors.Add(ctx, 1, otelAttrs...)
		}
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name:      op.Name,
			ID:        op.ID,
			Operation: op,
		}
	)
	if sctx, err := s.securitySSOAuth(ctx, "OperationsGet", r); err != nil {
		err = &ogenerrors.SecurityError{
			OperationContext: opErrContext,
			Security:         "SSOAuth",
			Err:              err,
		}
		recordError("Security:SSOAuth", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	} else {
		ctx = sctx
	}
	params, err := decodeOperationsGetParams(args, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response OperationsGetRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:       ctx,
			OperationName: "OperationsGet",
			OperationID:   "",
			Op:            op,
			Body:          nil,
			Params: middleware.Parameters{
				{
					Name: "from",
					In:   "query",
				}: params.From,
				{
					Name: "to",
					In:   "query",
				}: params.To,
				{
					Name: "figi",
					In:   "query",
				}: params.Figi,
				{
					Name: "brokerAccountId",
					In:   "query",
				}: params.BrokerAccountId,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = OperationsGetParams
			Response = OperationsGetRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackOperationsGetParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.OperationsGet(ctx, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.OperationsGet(ctx, params)
	}
	if err != nil {
		recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeOperationsGetResponse(response, w, span); err != nil {
		recordError("EncodeResponse", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
}

// handleOrdersCancelPostRequest handles POST /orders/cancel operation.
//
// Отмена заявки.
//
// POST /orders/cancel
func (s *Server) handleOrdersCancelPostRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	var otelAttrs []attribute.KeyValue

	// Start a span for this request.
	ctx, span := s.cfg.Tracer.Start(r.Context(), "OrdersCancelPost",
		serverSpanKind,
	)
	defer span.End()

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		elapsedDuration := time.Since(startTime)
		s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
	}()

	// Increment request counter.
	s.requests.Add(ctx, 1, otelAttrs...)

	var (
		op          = getPaths().OrdersCancelPost
		recordError = func(stage string, err error) {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			s.errors.Add(ctx, 1, otelAttrs...)
		}
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name:      op.Name,
			ID:        op.ID,
			Operation: op,
		}
	)
	if sctx, err := s.securitySSOAuth(ctx, "OrdersCancelPost", r); err != nil {
		err = &ogenerrors.SecurityError{
			OperationContext: opErrContext,
			Security:         "SSOAuth",
			Err:              err,
		}
		recordError("Security:SSOAuth", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	} else {
		ctx = sctx
	}
	params, err := decodeOrdersCancelPostParams(args, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response OrdersCancelPostRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:       ctx,
			OperationName: "OrdersCancelPost",
			OperationID:   "",
			Op:            op,
			Body:          nil,
			Params: middleware.Parameters{
				{
					Name: "orderId",
					In:   "query",
				}: params.OrderId,
				{
					Name: "brokerAccountId",
					In:   "query",
				}: params.BrokerAccountId,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = OrdersCancelPostParams
			Response = OrdersCancelPostRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackOrdersCancelPostParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.OrdersCancelPost(ctx, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.OrdersCancelPost(ctx, params)
	}
	if err != nil {
		recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeOrdersCancelPostResponse(response, w, span); err != nil {
		recordError("EncodeResponse", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
}

// handleOrdersGetRequest handles GET /orders operation.
//
// Получение списка активных заявок.
//
// GET /orders
func (s *Server) handleOrdersGetRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	var otelAttrs []attribute.KeyValue

	// Start a span for this request.
	ctx, span := s.cfg.Tracer.Start(r.Context(), "OrdersGet",
		serverSpanKind,
	)
	defer span.End()

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		elapsedDuration := time.Since(startTime)
		s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
	}()

	// Increment request counter.
	s.requests.Add(ctx, 1, otelAttrs...)

	var (
		op          = getPaths().OrdersGet
		recordError = func(stage string, err error) {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			s.errors.Add(ctx, 1, otelAttrs...)
		}
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name:      op.Name,
			ID:        op.ID,
			Operation: op,
		}
	)
	if sctx, err := s.securitySSOAuth(ctx, "OrdersGet", r); err != nil {
		err = &ogenerrors.SecurityError{
			OperationContext: opErrContext,
			Security:         "SSOAuth",
			Err:              err,
		}
		recordError("Security:SSOAuth", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	} else {
		ctx = sctx
	}
	params, err := decodeOrdersGetParams(args, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response OrdersGetRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:       ctx,
			OperationName: "OrdersGet",
			OperationID:   "",
			Op:            op,
			Body:          nil,
			Params: middleware.Parameters{
				{
					Name: "brokerAccountId",
					In:   "query",
				}: params.BrokerAccountId,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = OrdersGetParams
			Response = OrdersGetRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackOrdersGetParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.OrdersGet(ctx, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.OrdersGet(ctx, params)
	}
	if err != nil {
		recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeOrdersGetResponse(response, w, span); err != nil {
		recordError("EncodeResponse", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
}

// handleOrdersLimitOrderPostRequest handles POST /orders/limit-order operation.
//
// Создание лимитной заявки.
//
// POST /orders/limit-order
func (s *Server) handleOrdersLimitOrderPostRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	var otelAttrs []attribute.KeyValue

	// Start a span for this request.
	ctx, span := s.cfg.Tracer.Start(r.Context(), "OrdersLimitOrderPost",
		serverSpanKind,
	)
	defer span.End()

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		elapsedDuration := time.Since(startTime)
		s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
	}()

	// Increment request counter.
	s.requests.Add(ctx, 1, otelAttrs...)

	var (
		op          = getPaths().OrdersLimitOrderPost
		recordError = func(stage string, err error) {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			s.errors.Add(ctx, 1, otelAttrs...)
		}
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name:      op.Name,
			ID:        op.ID,
			Operation: op,
		}
	)
	if sctx, err := s.securitySSOAuth(ctx, "OrdersLimitOrderPost", r); err != nil {
		err = &ogenerrors.SecurityError{
			OperationContext: opErrContext,
			Security:         "SSOAuth",
			Err:              err,
		}
		recordError("Security:SSOAuth", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	} else {
		ctx = sctx
	}
	params, err := decodeOrdersLimitOrderPostParams(args, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
	request, close, err := s.decodeOrdersLimitOrderPostRequest(r)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			OperationContext: opErrContext,
			Err:              err,
		}
		recordError("DecodeRequest", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
	defer func() {
		if err := close(); err != nil {
			recordError("CloseRequest", err)
		}
	}()

	var response OrdersLimitOrderPostRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:       ctx,
			OperationName: "OrdersLimitOrderPost",
			OperationID:   "",
			Op:            op,
			Body:          request,
			Params: middleware.Parameters{
				{
					Name: "figi",
					In:   "query",
				}: params.Figi,
				{
					Name: "brokerAccountId",
					In:   "query",
				}: params.BrokerAccountId,
			},
			Raw: r,
		}

		type (
			Request  = *LimitOrderRequest
			Params   = OrdersLimitOrderPostParams
			Response = OrdersLimitOrderPostRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackOrdersLimitOrderPostParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.OrdersLimitOrderPost(ctx, request, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.OrdersLimitOrderPost(ctx, request, params)
	}
	if err != nil {
		recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeOrdersLimitOrderPostResponse(response, w, span); err != nil {
		recordError("EncodeResponse", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
}

// handleOrdersMarketOrderPostRequest handles POST /orders/market-order operation.
//
// Создание рыночной заявки.
//
// POST /orders/market-order
func (s *Server) handleOrdersMarketOrderPostRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	var otelAttrs []attribute.KeyValue

	// Start a span for this request.
	ctx, span := s.cfg.Tracer.Start(r.Context(), "OrdersMarketOrderPost",
		serverSpanKind,
	)
	defer span.End()

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		elapsedDuration := time.Since(startTime)
		s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
	}()

	// Increment request counter.
	s.requests.Add(ctx, 1, otelAttrs...)

	var (
		op          = getPaths().OrdersMarketOrderPost
		recordError = func(stage string, err error) {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			s.errors.Add(ctx, 1, otelAttrs...)
		}
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name:      op.Name,
			ID:        op.ID,
			Operation: op,
		}
	)
	if sctx, err := s.securitySSOAuth(ctx, "OrdersMarketOrderPost", r); err != nil {
		err = &ogenerrors.SecurityError{
			OperationContext: opErrContext,
			Security:         "SSOAuth",
			Err:              err,
		}
		recordError("Security:SSOAuth", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	} else {
		ctx = sctx
	}
	params, err := decodeOrdersMarketOrderPostParams(args, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
	request, close, err := s.decodeOrdersMarketOrderPostRequest(r)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			OperationContext: opErrContext,
			Err:              err,
		}
		recordError("DecodeRequest", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
	defer func() {
		if err := close(); err != nil {
			recordError("CloseRequest", err)
		}
	}()

	var response OrdersMarketOrderPostRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:       ctx,
			OperationName: "OrdersMarketOrderPost",
			OperationID:   "",
			Op:            op,
			Body:          request,
			Params: middleware.Parameters{
				{
					Name: "figi",
					In:   "query",
				}: params.Figi,
				{
					Name: "brokerAccountId",
					In:   "query",
				}: params.BrokerAccountId,
			},
			Raw: r,
		}

		type (
			Request  = *MarketOrderRequest
			Params   = OrdersMarketOrderPostParams
			Response = OrdersMarketOrderPostRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackOrdersMarketOrderPostParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.OrdersMarketOrderPost(ctx, request, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.OrdersMarketOrderPost(ctx, request, params)
	}
	if err != nil {
		recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeOrdersMarketOrderPostResponse(response, w, span); err != nil {
		recordError("EncodeResponse", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
}

// handlePortfolioCurrenciesGetRequest handles GET /portfolio/currencies operation.
//
// Получение валютных активов клиента.
//
// GET /portfolio/currencies
func (s *Server) handlePortfolioCurrenciesGetRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	var otelAttrs []attribute.KeyValue

	// Start a span for this request.
	ctx, span := s.cfg.Tracer.Start(r.Context(), "PortfolioCurrenciesGet",
		serverSpanKind,
	)
	defer span.End()

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		elapsedDuration := time.Since(startTime)
		s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
	}()

	// Increment request counter.
	s.requests.Add(ctx, 1, otelAttrs...)

	var (
		op          = getPaths().PortfolioCurrenciesGet
		recordError = func(stage string, err error) {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			s.errors.Add(ctx, 1, otelAttrs...)
		}
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name:      op.Name,
			ID:        op.ID,
			Operation: op,
		}
	)
	if sctx, err := s.securitySSOAuth(ctx, "PortfolioCurrenciesGet", r); err != nil {
		err = &ogenerrors.SecurityError{
			OperationContext: opErrContext,
			Security:         "SSOAuth",
			Err:              err,
		}
		recordError("Security:SSOAuth", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	} else {
		ctx = sctx
	}
	params, err := decodePortfolioCurrenciesGetParams(args, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response PortfolioCurrenciesGetRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:       ctx,
			OperationName: "PortfolioCurrenciesGet",
			OperationID:   "",
			Op:            op,
			Body:          nil,
			Params: middleware.Parameters{
				{
					Name: "brokerAccountId",
					In:   "query",
				}: params.BrokerAccountId,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = PortfolioCurrenciesGetParams
			Response = PortfolioCurrenciesGetRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackPortfolioCurrenciesGetParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.PortfolioCurrenciesGet(ctx, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.PortfolioCurrenciesGet(ctx, params)
	}
	if err != nil {
		recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodePortfolioCurrenciesGetResponse(response, w, span); err != nil {
		recordError("EncodeResponse", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
}

// handlePortfolioGetRequest handles GET /portfolio operation.
//
// Получение портфеля клиента.
//
// GET /portfolio
func (s *Server) handlePortfolioGetRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	var otelAttrs []attribute.KeyValue

	// Start a span for this request.
	ctx, span := s.cfg.Tracer.Start(r.Context(), "PortfolioGet",
		serverSpanKind,
	)
	defer span.End()

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		elapsedDuration := time.Since(startTime)
		s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
	}()

	// Increment request counter.
	s.requests.Add(ctx, 1, otelAttrs...)

	var (
		op          = getPaths().PortfolioGet
		recordError = func(stage string, err error) {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			s.errors.Add(ctx, 1, otelAttrs...)
		}
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name:      op.Name,
			ID:        op.ID,
			Operation: op,
		}
	)
	if sctx, err := s.securitySSOAuth(ctx, "PortfolioGet", r); err != nil {
		err = &ogenerrors.SecurityError{
			OperationContext: opErrContext,
			Security:         "SSOAuth",
			Err:              err,
		}
		recordError("Security:SSOAuth", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	} else {
		ctx = sctx
	}
	params, err := decodePortfolioGetParams(args, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response PortfolioGetRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:       ctx,
			OperationName: "PortfolioGet",
			OperationID:   "",
			Op:            op,
			Body:          nil,
			Params: middleware.Parameters{
				{
					Name: "brokerAccountId",
					In:   "query",
				}: params.BrokerAccountId,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = PortfolioGetParams
			Response = PortfolioGetRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackPortfolioGetParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.PortfolioGet(ctx, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.PortfolioGet(ctx, params)
	}
	if err != nil {
		recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodePortfolioGetResponse(response, w, span); err != nil {
		recordError("EncodeResponse", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
}

// handleSandboxClearPostRequest handles POST /sandbox/clear operation.
//
// Удаление всех позиций клиента.
//
// POST /sandbox/clear
func (s *Server) handleSandboxClearPostRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	var otelAttrs []attribute.KeyValue

	// Start a span for this request.
	ctx, span := s.cfg.Tracer.Start(r.Context(), "SandboxClearPost",
		serverSpanKind,
	)
	defer span.End()

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		elapsedDuration := time.Since(startTime)
		s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
	}()

	// Increment request counter.
	s.requests.Add(ctx, 1, otelAttrs...)

	var (
		op          = getPaths().SandboxClearPost
		recordError = func(stage string, err error) {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			s.errors.Add(ctx, 1, otelAttrs...)
		}
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name:      op.Name,
			ID:        op.ID,
			Operation: op,
		}
	)
	if sctx, err := s.securitySSOAuth(ctx, "SandboxClearPost", r); err != nil {
		err = &ogenerrors.SecurityError{
			OperationContext: opErrContext,
			Security:         "SSOAuth",
			Err:              err,
		}
		recordError("Security:SSOAuth", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	} else {
		ctx = sctx
	}
	params, err := decodeSandboxClearPostParams(args, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response SandboxClearPostRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:       ctx,
			OperationName: "SandboxClearPost",
			OperationID:   "",
			Op:            op,
			Body:          nil,
			Params: middleware.Parameters{
				{
					Name: "brokerAccountId",
					In:   "query",
				}: params.BrokerAccountId,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = SandboxClearPostParams
			Response = SandboxClearPostRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackSandboxClearPostParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.SandboxClearPost(ctx, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.SandboxClearPost(ctx, params)
	}
	if err != nil {
		recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeSandboxClearPostResponse(response, w, span); err != nil {
		recordError("EncodeResponse", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
}

// handleSandboxCurrenciesBalancePostRequest handles POST /sandbox/currencies/balance operation.
//
// Выставление баланса по валютным позициям.
//
// POST /sandbox/currencies/balance
func (s *Server) handleSandboxCurrenciesBalancePostRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	var otelAttrs []attribute.KeyValue

	// Start a span for this request.
	ctx, span := s.cfg.Tracer.Start(r.Context(), "SandboxCurrenciesBalancePost",
		serverSpanKind,
	)
	defer span.End()

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		elapsedDuration := time.Since(startTime)
		s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
	}()

	// Increment request counter.
	s.requests.Add(ctx, 1, otelAttrs...)

	var (
		op          = getPaths().SandboxCurrenciesBalancePost
		recordError = func(stage string, err error) {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			s.errors.Add(ctx, 1, otelAttrs...)
		}
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name:      op.Name,
			ID:        op.ID,
			Operation: op,
		}
	)
	if sctx, err := s.securitySSOAuth(ctx, "SandboxCurrenciesBalancePost", r); err != nil {
		err = &ogenerrors.SecurityError{
			OperationContext: opErrContext,
			Security:         "SSOAuth",
			Err:              err,
		}
		recordError("Security:SSOAuth", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	} else {
		ctx = sctx
	}
	params, err := decodeSandboxCurrenciesBalancePostParams(args, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
	request, close, err := s.decodeSandboxCurrenciesBalancePostRequest(r)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			OperationContext: opErrContext,
			Err:              err,
		}
		recordError("DecodeRequest", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
	defer func() {
		if err := close(); err != nil {
			recordError("CloseRequest", err)
		}
	}()

	var response SandboxCurrenciesBalancePostRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:       ctx,
			OperationName: "SandboxCurrenciesBalancePost",
			OperationID:   "",
			Op:            op,
			Body:          request,
			Params: middleware.Parameters{
				{
					Name: "brokerAccountId",
					In:   "query",
				}: params.BrokerAccountId,
			},
			Raw: r,
		}

		type (
			Request  = *SandboxSetCurrencyBalanceRequest
			Params   = SandboxCurrenciesBalancePostParams
			Response = SandboxCurrenciesBalancePostRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackSandboxCurrenciesBalancePostParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.SandboxCurrenciesBalancePost(ctx, request, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.SandboxCurrenciesBalancePost(ctx, request, params)
	}
	if err != nil {
		recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeSandboxCurrenciesBalancePostResponse(response, w, span); err != nil {
		recordError("EncodeResponse", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
}

// handleSandboxPositionsBalancePostRequest handles POST /sandbox/positions/balance operation.
//
// Выставление баланса по инструментным позициям.
//
// POST /sandbox/positions/balance
func (s *Server) handleSandboxPositionsBalancePostRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	var otelAttrs []attribute.KeyValue

	// Start a span for this request.
	ctx, span := s.cfg.Tracer.Start(r.Context(), "SandboxPositionsBalancePost",
		serverSpanKind,
	)
	defer span.End()

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		elapsedDuration := time.Since(startTime)
		s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
	}()

	// Increment request counter.
	s.requests.Add(ctx, 1, otelAttrs...)

	var (
		op          = getPaths().SandboxPositionsBalancePost
		recordError = func(stage string, err error) {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			s.errors.Add(ctx, 1, otelAttrs...)
		}
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name:      op.Name,
			ID:        op.ID,
			Operation: op,
		}
	)
	if sctx, err := s.securitySSOAuth(ctx, "SandboxPositionsBalancePost", r); err != nil {
		err = &ogenerrors.SecurityError{
			OperationContext: opErrContext,
			Security:         "SSOAuth",
			Err:              err,
		}
		recordError("Security:SSOAuth", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	} else {
		ctx = sctx
	}
	params, err := decodeSandboxPositionsBalancePostParams(args, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
	request, close, err := s.decodeSandboxPositionsBalancePostRequest(r)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			OperationContext: opErrContext,
			Err:              err,
		}
		recordError("DecodeRequest", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
	defer func() {
		if err := close(); err != nil {
			recordError("CloseRequest", err)
		}
	}()

	var response SandboxPositionsBalancePostRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:       ctx,
			OperationName: "SandboxPositionsBalancePost",
			OperationID:   "",
			Op:            op,
			Body:          request,
			Params: middleware.Parameters{
				{
					Name: "brokerAccountId",
					In:   "query",
				}: params.BrokerAccountId,
			},
			Raw: r,
		}

		type (
			Request  = *SandboxSetPositionBalanceRequest
			Params   = SandboxPositionsBalancePostParams
			Response = SandboxPositionsBalancePostRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackSandboxPositionsBalancePostParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.SandboxPositionsBalancePost(ctx, request, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.SandboxPositionsBalancePost(ctx, request, params)
	}
	if err != nil {
		recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeSandboxPositionsBalancePostResponse(response, w, span); err != nil {
		recordError("EncodeResponse", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
}

// handleSandboxRegisterPostRequest handles POST /sandbox/register operation.
//
// Создание счета и валютных позиций для клиента.
//
// POST /sandbox/register
func (s *Server) handleSandboxRegisterPostRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	var otelAttrs []attribute.KeyValue

	// Start a span for this request.
	ctx, span := s.cfg.Tracer.Start(r.Context(), "SandboxRegisterPost",
		serverSpanKind,
	)
	defer span.End()

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		elapsedDuration := time.Since(startTime)
		s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
	}()

	// Increment request counter.
	s.requests.Add(ctx, 1, otelAttrs...)

	var (
		op          = getPaths().SandboxRegisterPost
		recordError = func(stage string, err error) {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			s.errors.Add(ctx, 1, otelAttrs...)
		}
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name:      op.Name,
			ID:        op.ID,
			Operation: op,
		}
	)
	if sctx, err := s.securitySSOAuth(ctx, "SandboxRegisterPost", r); err != nil {
		err = &ogenerrors.SecurityError{
			OperationContext: opErrContext,
			Security:         "SSOAuth",
			Err:              err,
		}
		recordError("Security:SSOAuth", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	} else {
		ctx = sctx
	}
	request, close, err := s.decodeSandboxRegisterPostRequest(r)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			OperationContext: opErrContext,
			Err:              err,
		}
		recordError("DecodeRequest", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
	defer func() {
		if err := close(); err != nil {
			recordError("CloseRequest", err)
		}
	}()

	var response SandboxRegisterPostRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:       ctx,
			OperationName: "SandboxRegisterPost",
			OperationID:   "",
			Op:            op,
			Body:          request,
			Params:        middleware.Parameters{},
			Raw:           r,
		}

		type (
			Request  = OptSandboxRegisterRequest
			Params   = struct{}
			Response = SandboxRegisterPostRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			nil,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.SandboxRegisterPost(ctx, request)
				return response, err
			},
		)
	} else {
		response, err = s.h.SandboxRegisterPost(ctx, request)
	}
	if err != nil {
		recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeSandboxRegisterPostResponse(response, w, span); err != nil {
		recordError("EncodeResponse", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
}

// handleSandboxRemovePostRequest handles POST /sandbox/remove operation.
//
// Удаление счета клиента.
//
// POST /sandbox/remove
func (s *Server) handleSandboxRemovePostRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	var otelAttrs []attribute.KeyValue

	// Start a span for this request.
	ctx, span := s.cfg.Tracer.Start(r.Context(), "SandboxRemovePost",
		serverSpanKind,
	)
	defer span.End()

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		elapsedDuration := time.Since(startTime)
		s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
	}()

	// Increment request counter.
	s.requests.Add(ctx, 1, otelAttrs...)

	var (
		op          = getPaths().SandboxRemovePost
		recordError = func(stage string, err error) {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			s.errors.Add(ctx, 1, otelAttrs...)
		}
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name:      op.Name,
			ID:        op.ID,
			Operation: op,
		}
	)
	if sctx, err := s.securitySSOAuth(ctx, "SandboxRemovePost", r); err != nil {
		err = &ogenerrors.SecurityError{
			OperationContext: opErrContext,
			Security:         "SSOAuth",
			Err:              err,
		}
		recordError("Security:SSOAuth", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	} else {
		ctx = sctx
	}
	params, err := decodeSandboxRemovePostParams(args, r)
	if err != nil {
		err = &ogenerrors.DecodeParamsError{
			OperationContext: opErrContext,
			Err:              err,
		}
		recordError("DecodeParams", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	var response SandboxRemovePostRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:       ctx,
			OperationName: "SandboxRemovePost",
			OperationID:   "",
			Op:            op,
			Body:          nil,
			Params: middleware.Parameters{
				{
					Name: "brokerAccountId",
					In:   "query",
				}: params.BrokerAccountId,
			},
			Raw: r,
		}

		type (
			Request  = struct{}
			Params   = SandboxRemovePostParams
			Response = SandboxRemovePostRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			unpackSandboxRemovePostParams,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.SandboxRemovePost(ctx, params)
				return response, err
			},
		)
	} else {
		response, err = s.h.SandboxRemovePost(ctx, params)
	}
	if err != nil {
		recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeSandboxRemovePostResponse(response, w, span); err != nil {
		recordError("EncodeResponse", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
}

// handleUserAccountsGetRequest handles GET /user/accounts operation.
//
// Получение брокерских счетов клиента.
//
// GET /user/accounts
func (s *Server) handleUserAccountsGetRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	var otelAttrs []attribute.KeyValue

	// Start a span for this request.
	ctx, span := s.cfg.Tracer.Start(r.Context(), "UserAccountsGet",
		serverSpanKind,
	)
	defer span.End()

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		elapsedDuration := time.Since(startTime)
		s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
	}()

	// Increment request counter.
	s.requests.Add(ctx, 1, otelAttrs...)

	var (
		op          = getPaths().UserAccountsGet
		recordError = func(stage string, err error) {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			s.errors.Add(ctx, 1, otelAttrs...)
		}
		err          error
		opErrContext = ogenerrors.OperationContext{
			Name:      op.Name,
			ID:        op.ID,
			Operation: op,
		}
	)
	if sctx, err := s.securitySSOAuth(ctx, "UserAccountsGet", r); err != nil {
		err = &ogenerrors.SecurityError{
			OperationContext: opErrContext,
			Security:         "SSOAuth",
			Err:              err,
		}
		recordError("Security:SSOAuth", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	} else {
		ctx = sctx
	}

	var response UserAccountsGetRes
	if m := s.cfg.Middleware; m != nil {
		mreq := middleware.Request{
			Context:       ctx,
			OperationName: "UserAccountsGet",
			OperationID:   "",
			Op:            op,
			Body:          nil,
			Params:        middleware.Parameters{},
			Raw:           r,
		}

		type (
			Request  = struct{}
			Params   = struct{}
			Response = UserAccountsGetRes
		)
		response, err = middleware.HookMiddleware[
			Request,
			Params,
			Response,
		](
			m,
			mreq,
			nil,
			func(ctx context.Context, request Request, params Params) (response Response, err error) {
				response, err = s.h.UserAccountsGet(ctx)
				return response, err
			},
		)
	} else {
		response, err = s.h.UserAccountsGet(ctx)
	}
	if err != nil {
		recordError("Internal", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeUserAccountsGetResponse(response, w, span); err != nil {
		recordError("EncodeResponse", err)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}
}

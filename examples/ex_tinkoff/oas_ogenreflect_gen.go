// Code generated by ogen, DO NOT EDIT.

package api

import (
	"reflect"
	"time"

	"github.com/ogen-go/ogen/ogenreflect"
)

// API is generated API metadata.
var API = api{
	Paths: paths{
		MarketBondsGet: ogenreflect.RuntimeOperation{
			Name: "MarketBondsGet",
			ID:   "",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(MarketBondsGetRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*MarketInstrumentListResponse)).Elem(),
						reflect.TypeOf(new(*Error)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(MarketInstrumentListResponse)).Elem(),
							},
						},
						"500": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Error)).Elem(),
							},
						},
					},
				},
			},
		},
		MarketCandlesGet: ogenreflect.RuntimeOperation{
			Name: "MarketCandlesGet",
			ID:   "",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(MarketCandlesGetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "figi",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "figi",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: true,
						},
						{
							Name: "from",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(time.Time)).Elem(),
							Name:     "from",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: true,
						},
						{
							Name: "to",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(time.Time)).Elem(),
							Name:     "to",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: true,
						},
						{
							Name: "interval",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(CandleResolution)).Elem(),
							Name:     "interval",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(MarketCandlesGetRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*CandlesResponse)).Elem(),
						reflect.TypeOf(new(*Error)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(CandlesResponse)).Elem(),
							},
						},
						"500": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Error)).Elem(),
							},
						},
					},
				},
			},
		},
		MarketCurrenciesGet: ogenreflect.RuntimeOperation{
			Name: "MarketCurrenciesGet",
			ID:   "",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(MarketCurrenciesGetRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*MarketInstrumentListResponse)).Elem(),
						reflect.TypeOf(new(*Error)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(MarketInstrumentListResponse)).Elem(),
							},
						},
						"500": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Error)).Elem(),
							},
						},
					},
				},
			},
		},
		MarketEtfsGet: ogenreflect.RuntimeOperation{
			Name: "MarketEtfsGet",
			ID:   "",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(MarketEtfsGetRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*MarketInstrumentListResponse)).Elem(),
						reflect.TypeOf(new(*Error)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(MarketInstrumentListResponse)).Elem(),
							},
						},
						"500": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Error)).Elem(),
							},
						},
					},
				},
			},
		},
		MarketOrderbookGet: ogenreflect.RuntimeOperation{
			Name: "MarketOrderbookGet",
			ID:   "",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(MarketOrderbookGetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "figi",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "figi",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: true,
						},
						{
							Name: "depth",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int32)).Elem(),
							Name:     "depth",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(MarketOrderbookGetRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*OrderbookResponse)).Elem(),
						reflect.TypeOf(new(*Error)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OrderbookResponse)).Elem(),
							},
						},
						"500": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Error)).Elem(),
							},
						},
					},
				},
			},
		},
		MarketSearchByFigiGet: ogenreflect.RuntimeOperation{
			Name: "MarketSearchByFigiGet",
			ID:   "",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(MarketSearchByFigiGetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "figi",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "figi",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(MarketSearchByFigiGetRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*SearchMarketInstrumentResponse)).Elem(),
						reflect.TypeOf(new(*Error)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(SearchMarketInstrumentResponse)).Elem(),
							},
						},
						"500": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Error)).Elem(),
							},
						},
					},
				},
			},
		},
		MarketSearchByTickerGet: ogenreflect.RuntimeOperation{
			Name: "MarketSearchByTickerGet",
			ID:   "",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(MarketSearchByTickerGetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "ticker",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "ticker",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(MarketSearchByTickerGetRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*MarketInstrumentListResponse)).Elem(),
						reflect.TypeOf(new(*Error)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(MarketInstrumentListResponse)).Elem(),
							},
						},
						"500": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Error)).Elem(),
							},
						},
					},
				},
			},
		},
		MarketStocksGet: ogenreflect.RuntimeOperation{
			Name: "MarketStocksGet",
			ID:   "",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(MarketStocksGetRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*MarketInstrumentListResponse)).Elem(),
						reflect.TypeOf(new(*Error)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(MarketInstrumentListResponse)).Elem(),
							},
						},
						"500": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Error)).Elem(),
							},
						},
					},
				},
			},
		},
		OperationsGet: ogenreflect.RuntimeOperation{
			Name: "OperationsGet",
			ID:   "",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OperationsGetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "from",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(time.Time)).Elem(),
							Name:     "from",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: true,
						},
						{
							Name: "to",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(time.Time)).Elem(),
							Name:     "to",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: true,
						},
						{
							Name: "figi",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "figi",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
						{
							Name: "brokerAccountId",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "brokerAccountId",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(OperationsGetRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*OperationsResponse)).Elem(),
						reflect.TypeOf(new(*Error)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OperationsResponse)).Elem(),
							},
						},
						"500": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Error)).Elem(),
							},
						},
					},
				},
			},
		},
		OrdersCancelPost: ogenreflect.RuntimeOperation{
			Name: "OrdersCancelPost",
			ID:   "",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OrdersCancelPostParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "orderId",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "orderId",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: true,
						},
						{
							Name: "brokerAccountId",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "brokerAccountId",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(OrdersCancelPostRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Empty)).Elem(),
						reflect.TypeOf(new(*Error)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Empty)).Elem(),
							},
						},
						"500": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Error)).Elem(),
							},
						},
					},
				},
			},
		},
		OrdersGet: ogenreflect.RuntimeOperation{
			Name: "OrdersGet",
			ID:   "",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OrdersGetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "brokerAccountId",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "brokerAccountId",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(OrdersGetRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*OrdersResponse)).Elem(),
						reflect.TypeOf(new(*Error)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(OrdersResponse)).Elem(),
							},
						},
						"500": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Error)).Elem(),
							},
						},
					},
				},
			},
		},
		OrdersLimitOrderPost: ogenreflect.RuntimeOperation{
			Name: "OrdersLimitOrderPost",
			ID:   "",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(LimitOrderRequest)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OrdersLimitOrderPostParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "figi",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "figi",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: true,
						},
						{
							Name: "brokerAccountId",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "brokerAccountId",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(OrdersLimitOrderPostRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*LimitOrderResponse)).Elem(),
						reflect.TypeOf(new(*Error)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(LimitOrderResponse)).Elem(),
							},
						},
						"500": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Error)).Elem(),
							},
						},
					},
				},
			},
		},
		OrdersMarketOrderPost: ogenreflect.RuntimeOperation{
			Name: "OrdersMarketOrderPost",
			ID:   "",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(MarketOrderRequest)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(OrdersMarketOrderPostParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "figi",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "figi",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: true,
						},
						{
							Name: "brokerAccountId",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "brokerAccountId",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(OrdersMarketOrderPostRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*MarketOrderResponse)).Elem(),
						reflect.TypeOf(new(*Error)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(MarketOrderResponse)).Elem(),
							},
						},
						"500": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Error)).Elem(),
							},
						},
					},
				},
			},
		},
		PortfolioCurrenciesGet: ogenreflect.RuntimeOperation{
			Name: "PortfolioCurrenciesGet",
			ID:   "",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PortfolioCurrenciesGetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "brokerAccountId",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "brokerAccountId",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PortfolioCurrenciesGetRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PortfolioCurrenciesResponse)).Elem(),
						reflect.TypeOf(new(*Error)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PortfolioCurrenciesResponse)).Elem(),
							},
						},
						"500": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Error)).Elem(),
							},
						},
					},
				},
			},
		},
		PortfolioGet: ogenreflect.RuntimeOperation{
			Name: "PortfolioGet",
			ID:   "",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(PortfolioGetParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "brokerAccountId",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "brokerAccountId",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(PortfolioGetRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*PortfolioResponse)).Elem(),
						reflect.TypeOf(new(*Error)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(PortfolioResponse)).Elem(),
							},
						},
						"500": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Error)).Elem(),
							},
						},
					},
				},
			},
		},
		SandboxClearPost: ogenreflect.RuntimeOperation{
			Name: "SandboxClearPost",
			ID:   "",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(SandboxClearPostParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "brokerAccountId",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "brokerAccountId",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(SandboxClearPostRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Empty)).Elem(),
						reflect.TypeOf(new(*Error)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Empty)).Elem(),
							},
						},
						"500": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Error)).Elem(),
							},
						},
					},
				},
			},
		},
		SandboxCurrenciesBalancePost: ogenreflect.RuntimeOperation{
			Name: "SandboxCurrenciesBalancePost",
			ID:   "",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(SandboxSetCurrencyBalanceRequest)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(SandboxCurrenciesBalancePostParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "brokerAccountId",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "brokerAccountId",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(SandboxCurrenciesBalancePostRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Empty)).Elem(),
						reflect.TypeOf(new(*Error)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Empty)).Elem(),
							},
						},
						"500": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Error)).Elem(),
							},
						},
					},
				},
			},
		},
		SandboxPositionsBalancePost: ogenreflect.RuntimeOperation{
			Name: "SandboxPositionsBalancePost",
			ID:   "",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(SandboxSetPositionBalanceRequest)).Elem(),
					Implementations: nil,
				},
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(SandboxPositionsBalancePostParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "brokerAccountId",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "brokerAccountId",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(SandboxPositionsBalancePostRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Empty)).Elem(),
						reflect.TypeOf(new(*Error)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Empty)).Elem(),
							},
						},
						"500": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Error)).Elem(),
							},
						},
					},
				},
			},
		},
		SandboxRegisterPost: ogenreflect.RuntimeOperation{
			Name: "SandboxRegisterPost",
			ID:   "",
			Types: ogenreflect.OperationTypes{
				Request: ogenreflect.RequestType{
					Type:            reflect.TypeOf(new(OptSandboxRegisterRequest)).Elem(),
					Implementations: nil,
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(SandboxRegisterPostRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*SandboxRegisterResponse)).Elem(),
						reflect.TypeOf(new(*Error)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(SandboxRegisterResponse)).Elem(),
							},
						},
						"500": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Error)).Elem(),
							},
						},
					},
				},
			},
		},
		SandboxRemovePost: ogenreflect.RuntimeOperation{
			Name: "SandboxRemovePost",
			ID:   "",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(SandboxRemovePostParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "brokerAccountId",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptString)).Elem(),
							Name:     "brokerAccountId",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(SandboxRemovePostRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Empty)).Elem(),
						reflect.TypeOf(new(*Error)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Empty)).Elem(),
							},
						},
						"500": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Error)).Elem(),
							},
						},
					},
				},
			},
		},
		UserAccountsGet: ogenreflect.RuntimeOperation{
			Name: "UserAccountsGet",
			ID:   "",
			Types: ogenreflect.OperationTypes{
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(UserAccountsGetRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*UserAccountsResponse)).Elem(),
						reflect.TypeOf(new(*Error)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(UserAccountsResponse)).Elem(),
							},
						},
						"500": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Error)).Elem(),
							},
						},
					},
				},
			},
		},
	},
}

type api struct {
	Paths paths
}

type paths struct {
	MarketBondsGet               ogenreflect.RuntimeOperation
	MarketCandlesGet             ogenreflect.RuntimeOperation
	MarketCurrenciesGet          ogenreflect.RuntimeOperation
	MarketEtfsGet                ogenreflect.RuntimeOperation
	MarketOrderbookGet           ogenreflect.RuntimeOperation
	MarketSearchByFigiGet        ogenreflect.RuntimeOperation
	MarketSearchByTickerGet      ogenreflect.RuntimeOperation
	MarketStocksGet              ogenreflect.RuntimeOperation
	OperationsGet                ogenreflect.RuntimeOperation
	OrdersCancelPost             ogenreflect.RuntimeOperation
	OrdersGet                    ogenreflect.RuntimeOperation
	OrdersLimitOrderPost         ogenreflect.RuntimeOperation
	OrdersMarketOrderPost        ogenreflect.RuntimeOperation
	PortfolioCurrenciesGet       ogenreflect.RuntimeOperation
	PortfolioGet                 ogenreflect.RuntimeOperation
	SandboxClearPost             ogenreflect.RuntimeOperation
	SandboxCurrenciesBalancePost ogenreflect.RuntimeOperation
	SandboxPositionsBalancePost  ogenreflect.RuntimeOperation
	SandboxRegisterPost          ogenreflect.RuntimeOperation
	SandboxRemovePost            ogenreflect.RuntimeOperation
	UserAccountsGet              ogenreflect.RuntimeOperation
}

func getPaths() paths {
	return API.Paths
}

// FindByName finds operation by ogen name.
func (p paths) FindByName(name string) (op ogenreflect.RuntimeOperation, _ bool) {
	switch name {
	case "MarketBondsGet":
		return p.MarketBondsGet, true
	case "MarketCandlesGet":
		return p.MarketCandlesGet, true
	case "MarketCurrenciesGet":
		return p.MarketCurrenciesGet, true
	case "MarketEtfsGet":
		return p.MarketEtfsGet, true
	case "MarketOrderbookGet":
		return p.MarketOrderbookGet, true
	case "MarketSearchByFigiGet":
		return p.MarketSearchByFigiGet, true
	case "MarketSearchByTickerGet":
		return p.MarketSearchByTickerGet, true
	case "MarketStocksGet":
		return p.MarketStocksGet, true
	case "OperationsGet":
		return p.OperationsGet, true
	case "OrdersCancelPost":
		return p.OrdersCancelPost, true
	case "OrdersGet":
		return p.OrdersGet, true
	case "OrdersLimitOrderPost":
		return p.OrdersLimitOrderPost, true
	case "OrdersMarketOrderPost":
		return p.OrdersMarketOrderPost, true
	case "PortfolioCurrenciesGet":
		return p.PortfolioCurrenciesGet, true
	case "PortfolioGet":
		return p.PortfolioGet, true
	case "SandboxClearPost":
		return p.SandboxClearPost, true
	case "SandboxCurrenciesBalancePost":
		return p.SandboxCurrenciesBalancePost, true
	case "SandboxPositionsBalancePost":
		return p.SandboxPositionsBalancePost, true
	case "SandboxRegisterPost":
		return p.SandboxRegisterPost, true
	case "SandboxRemovePost":
		return p.SandboxRemovePost, true
	case "UserAccountsGet":
		return p.UserAccountsGet, true
	default:
		return op, false
	}
}

// FindByOperationID finds operation by operationId.
func (p paths) FindByOperationID(operationID string) (op ogenreflect.RuntimeOperation, _ bool) {
	switch operationID {
	default:
		return op, false
	}
}

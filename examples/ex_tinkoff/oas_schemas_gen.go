// Code generated by ogen, DO NOT EDIT.

package api

import (
	"time"
)

// Ref: #/components/schemas/BrokerAccountType
type BrokerAccountType string

const (
	BrokerAccountTypeTinkoff    BrokerAccountType = "Tinkoff"
	BrokerAccountTypeTinkoffIis BrokerAccountType = "TinkoffIis"
)

// Ref: #/components/schemas/Candle
type Candle struct {
	Figi     string           `json:"figi"`
	Interval CandleResolution `json:"interval"`
	O        float64          `json:"o"`
	C        float64          `json:"c"`
	H        float64          `json:"h"`
	L        float64          `json:"l"`
	V        int32            `json:"v"`
	// ISO8601.
	Time time.Time `json:"time"`
}

// GetFigi returns the value of Figi.
func (s Candle) GetFigi() string {
	return s.Figi
}

// GetInterval returns the value of Interval.
func (s Candle) GetInterval() CandleResolution {
	return s.Interval
}

// GetO returns the value of O.
func (s Candle) GetO() float64 {
	return s.O
}

// GetC returns the value of C.
func (s Candle) GetC() float64 {
	return s.C
}

// GetH returns the value of H.
func (s Candle) GetH() float64 {
	return s.H
}

// GetL returns the value of L.
func (s Candle) GetL() float64 {
	return s.L
}

// GetV returns the value of V.
func (s Candle) GetV() int32 {
	return s.V
}

// GetTime returns the value of Time.
func (s Candle) GetTime() time.Time {
	return s.Time
}

// SetFigi sets the value of Figi.
func (s *Candle) SetFigi(val string) {
	s.Figi = val
}

// SetInterval sets the value of Interval.
func (s *Candle) SetInterval(val CandleResolution) {
	s.Interval = val
}

// SetO sets the value of O.
func (s *Candle) SetO(val float64) {
	s.O = val
}

// SetC sets the value of C.
func (s *Candle) SetC(val float64) {
	s.C = val
}

// SetH sets the value of H.
func (s *Candle) SetH(val float64) {
	s.H = val
}

// SetL sets the value of L.
func (s *Candle) SetL(val float64) {
	s.L = val
}

// SetV sets the value of V.
func (s *Candle) SetV(val int32) {
	s.V = val
}

// SetTime sets the value of Time.
func (s *Candle) SetTime(val time.Time) {
	s.Time = val
}

// Интервал свечи и допустимый промежуток запроса:
// - 1min [1 minute, 1 day]
// - 2min [2 minutes, 1 day]
// - 3min [3 minutes, 1 day]
// - 5min [5 minutes, 1 day]
// - 10min [10 minutes, 1 day]
// - 15min [15 minutes, 1 day]
// - 30min [30 minutes, 1 day]
// - hour [1 hour, 7 days]
// - day [1 day, 1 year]
// - week [7 days, 2 years]
// - month [1 month, 10 years].
// Ref: #/components/schemas/CandleResolution
type CandleResolution string

const (
	CandleResolution1min  CandleResolution = "1min"
	CandleResolution2min  CandleResolution = "2min"
	CandleResolution3min  CandleResolution = "3min"
	CandleResolution5min  CandleResolution = "5min"
	CandleResolution10min CandleResolution = "10min"
	CandleResolution15min CandleResolution = "15min"
	CandleResolution30min CandleResolution = "30min"
	CandleResolutionHour  CandleResolution = "hour"
	CandleResolutionDay   CandleResolution = "day"
	CandleResolutionWeek  CandleResolution = "week"
	CandleResolutionMonth CandleResolution = "month"
)

// Ref: #/components/schemas/Candles
type Candles struct {
	Figi     string           `json:"figi"`
	Interval CandleResolution `json:"interval"`
	Candles  []Candle         `json:"candles"`
}

// GetFigi returns the value of Figi.
func (s Candles) GetFigi() string {
	return s.Figi
}

// GetInterval returns the value of Interval.
func (s Candles) GetInterval() CandleResolution {
	return s.Interval
}

// GetCandles returns the value of Candles.
func (s Candles) GetCandles() []Candle {
	return s.Candles
}

// SetFigi sets the value of Figi.
func (s *Candles) SetFigi(val string) {
	s.Figi = val
}

// SetInterval sets the value of Interval.
func (s *Candles) SetInterval(val CandleResolution) {
	s.Interval = val
}

// SetCandles sets the value of Candles.
func (s *Candles) SetCandles(val []Candle) {
	s.Candles = val
}

// Ref: #/components/schemas/CandlesResponse
type CandlesResponse struct {
	TrackingId string  `json:"trackingId"`
	Status     string  `json:"status"`
	Payload    Candles `json:"payload"`
}

// GetTrackingId returns the value of TrackingId.
func (s CandlesResponse) GetTrackingId() string {
	return s.TrackingId
}

// GetStatus returns the value of Status.
func (s CandlesResponse) GetStatus() string {
	return s.Status
}

// GetPayload returns the value of Payload.
func (s CandlesResponse) GetPayload() Candles {
	return s.Payload
}

// SetTrackingId sets the value of TrackingId.
func (s *CandlesResponse) SetTrackingId(val string) {
	s.TrackingId = val
}

// SetStatus sets the value of Status.
func (s *CandlesResponse) SetStatus(val string) {
	s.Status = val
}

// SetPayload sets the value of Payload.
func (s *CandlesResponse) SetPayload(val Candles) {
	s.Payload = val
}

func (*CandlesResponse) marketCandlesGetRes() {}

// Ref: #/components/schemas/Currencies
type Currencies struct {
	Currencies []CurrencyPosition `json:"currencies"`
}

// GetCurrencies returns the value of Currencies.
func (s Currencies) GetCurrencies() []CurrencyPosition {
	return s.Currencies
}

// SetCurrencies sets the value of Currencies.
func (s *Currencies) SetCurrencies(val []CurrencyPosition) {
	s.Currencies = val
}

// Ref: #/components/schemas/Currency
type Currency string

const (
	CurrencyRUB Currency = "RUB"
	CurrencyUSD Currency = "USD"
	CurrencyEUR Currency = "EUR"
	CurrencyGBP Currency = "GBP"
	CurrencyHKD Currency = "HKD"
	CurrencyCHF Currency = "CHF"
	CurrencyJPY Currency = "JPY"
	CurrencyCNY Currency = "CNY"
	CurrencyTRY Currency = "TRY"
)

// Ref: #/components/schemas/CurrencyPosition
type CurrencyPosition struct {
	Currency Currency   `json:"currency"`
	Balance  float64    `json:"balance"`
	Blocked  OptFloat64 `json:"blocked,omitempty"`
}

// GetCurrency returns the value of Currency.
func (s CurrencyPosition) GetCurrency() Currency {
	return s.Currency
}

// GetBalance returns the value of Balance.
func (s CurrencyPosition) GetBalance() float64 {
	return s.Balance
}

// GetBlocked returns the value of Blocked.
func (s CurrencyPosition) GetBlocked() OptFloat64 {
	return s.Blocked
}

// SetCurrency sets the value of Currency.
func (s *CurrencyPosition) SetCurrency(val Currency) {
	s.Currency = val
}

// SetBalance sets the value of Balance.
func (s *CurrencyPosition) SetBalance(val float64) {
	s.Balance = val
}

// SetBlocked sets the value of Blocked.
func (s *CurrencyPosition) SetBlocked(val OptFloat64) {
	s.Blocked = val
}

// Ref: #/components/schemas/Empty
type Empty struct {
	TrackingId string       `json:"trackingId"`
	Payload    EmptyPayload `json:"payload"`
	Status     string       `json:"status"`
}

// GetTrackingId returns the value of TrackingId.
func (s Empty) GetTrackingId() string {
	return s.TrackingId
}

// GetPayload returns the value of Payload.
func (s Empty) GetPayload() EmptyPayload {
	return s.Payload
}

// GetStatus returns the value of Status.
func (s Empty) GetStatus() string {
	return s.Status
}

// SetTrackingId sets the value of TrackingId.
func (s *Empty) SetTrackingId(val string) {
	s.TrackingId = val
}

// SetPayload sets the value of Payload.
func (s *Empty) SetPayload(val EmptyPayload) {
	s.Payload = val
}

// SetStatus sets the value of Status.
func (s *Empty) SetStatus(val string) {
	s.Status = val
}

func (*Empty) ordersCancelPostRes()             {}
func (*Empty) sandboxClearPostRes()             {}
func (*Empty) sandboxCurrenciesBalancePostRes() {}
func (*Empty) sandboxPositionsBalancePostRes()  {}
func (*Empty) sandboxRemovePostRes()            {}

type EmptyPayload struct{}

// Ref: #/components/schemas/Error
type Error struct {
	TrackingId string       `json:"trackingId"`
	Status     string       `json:"status"`
	Payload    ErrorPayload `json:"payload"`
}

// GetTrackingId returns the value of TrackingId.
func (s Error) GetTrackingId() string {
	return s.TrackingId
}

// GetStatus returns the value of Status.
func (s Error) GetStatus() string {
	return s.Status
}

// GetPayload returns the value of Payload.
func (s Error) GetPayload() ErrorPayload {
	return s.Payload
}

// SetTrackingId sets the value of TrackingId.
func (s *Error) SetTrackingId(val string) {
	s.TrackingId = val
}

// SetStatus sets the value of Status.
func (s *Error) SetStatus(val string) {
	s.Status = val
}

// SetPayload sets the value of Payload.
func (s *Error) SetPayload(val ErrorPayload) {
	s.Payload = val
}

func (*Error) marketBondsGetRes()               {}
func (*Error) marketCandlesGetRes()             {}
func (*Error) marketCurrenciesGetRes()          {}
func (*Error) marketEtfsGetRes()                {}
func (*Error) marketOrderbookGetRes()           {}
func (*Error) marketSearchByFigiGetRes()        {}
func (*Error) marketSearchByTickerGetRes()      {}
func (*Error) marketStocksGetRes()              {}
func (*Error) operationsGetRes()                {}
func (*Error) ordersCancelPostRes()             {}
func (*Error) ordersGetRes()                    {}
func (*Error) ordersLimitOrderPostRes()         {}
func (*Error) ordersMarketOrderPostRes()        {}
func (*Error) portfolioCurrenciesGetRes()       {}
func (*Error) portfolioGetRes()                 {}
func (*Error) sandboxClearPostRes()             {}
func (*Error) sandboxCurrenciesBalancePostRes() {}
func (*Error) sandboxPositionsBalancePostRes()  {}
func (*Error) sandboxRegisterPostRes()          {}
func (*Error) sandboxRemovePostRes()            {}
func (*Error) userAccountsGetRes()              {}

type ErrorPayload struct {
	Message OptString `json:"message,omitempty"`
	Code    OptString `json:"code,omitempty"`
}

// GetMessage returns the value of Message.
func (s ErrorPayload) GetMessage() OptString {
	return s.Message
}

// GetCode returns the value of Code.
func (s ErrorPayload) GetCode() OptString {
	return s.Code
}

// SetMessage sets the value of Message.
func (s *ErrorPayload) SetMessage(val OptString) {
	s.Message = val
}

// SetCode sets the value of Code.
func (s *ErrorPayload) SetCode(val OptString) {
	s.Code = val
}

// Ref: #/components/schemas/InstrumentType
type InstrumentType string

const (
	InstrumentTypeStock    InstrumentType = "Stock"
	InstrumentTypeCurrency InstrumentType = "Currency"
	InstrumentTypeBond     InstrumentType = "Bond"
	InstrumentTypeEtf      InstrumentType = "Etf"
)

// Ref: #/components/schemas/LimitOrderRequest
type LimitOrderRequest struct {
	Lots      int32         `json:"lots"`
	Operation OperationType `json:"operation"`
	Price     float64       `json:"price"`
}

// GetLots returns the value of Lots.
func (s LimitOrderRequest) GetLots() int32 {
	return s.Lots
}

// GetOperation returns the value of Operation.
func (s LimitOrderRequest) GetOperation() OperationType {
	return s.Operation
}

// GetPrice returns the value of Price.
func (s LimitOrderRequest) GetPrice() float64 {
	return s.Price
}

// SetLots sets the value of Lots.
func (s *LimitOrderRequest) SetLots(val int32) {
	s.Lots = val
}

// SetOperation sets the value of Operation.
func (s *LimitOrderRequest) SetOperation(val OperationType) {
	s.Operation = val
}

// SetPrice sets the value of Price.
func (s *LimitOrderRequest) SetPrice(val float64) {
	s.Price = val
}

// Ref: #/components/schemas/LimitOrderResponse
type LimitOrderResponse struct {
	TrackingId string           `json:"trackingId"`
	Status     string           `json:"status"`
	Payload    PlacedLimitOrder `json:"payload"`
}

// GetTrackingId returns the value of TrackingId.
func (s LimitOrderResponse) GetTrackingId() string {
	return s.TrackingId
}

// GetStatus returns the value of Status.
func (s LimitOrderResponse) GetStatus() string {
	return s.Status
}

// GetPayload returns the value of Payload.
func (s LimitOrderResponse) GetPayload() PlacedLimitOrder {
	return s.Payload
}

// SetTrackingId sets the value of TrackingId.
func (s *LimitOrderResponse) SetTrackingId(val string) {
	s.TrackingId = val
}

// SetStatus sets the value of Status.
func (s *LimitOrderResponse) SetStatus(val string) {
	s.Status = val
}

// SetPayload sets the value of Payload.
func (s *LimitOrderResponse) SetPayload(val PlacedLimitOrder) {
	s.Payload = val
}

func (*LimitOrderResponse) ordersLimitOrderPostRes() {}

// Ref: #/components/schemas/MarketInstrument
type MarketInstrument struct {
	Figi   string    `json:"figi"`
	Ticker string    `json:"ticker"`
	Isin   OptString `json:"isin,omitempty"`
	// Шаг цены.
	MinPriceIncrement OptFloat64 `json:"minPriceIncrement,omitempty"`
	Lot               int32      `json:"lot"`
	// Минимальное число инструментов для покупки должно
	// быть не меньше, чем размер лота х количество лотов.
	MinQuantity OptInt32       `json:"minQuantity,omitempty"`
	Currency    OptCurrency    `json:"currency,omitempty"`
	Name        string         `json:"name"`
	Type        InstrumentType `json:"type"`
}

// GetFigi returns the value of Figi.
func (s MarketInstrument) GetFigi() string {
	return s.Figi
}

// GetTicker returns the value of Ticker.
func (s MarketInstrument) GetTicker() string {
	return s.Ticker
}

// GetIsin returns the value of Isin.
func (s MarketInstrument) GetIsin() OptString {
	return s.Isin
}

// GetMinPriceIncrement returns the value of MinPriceIncrement.
func (s MarketInstrument) GetMinPriceIncrement() OptFloat64 {
	return s.MinPriceIncrement
}

// GetLot returns the value of Lot.
func (s MarketInstrument) GetLot() int32 {
	return s.Lot
}

// GetMinQuantity returns the value of MinQuantity.
func (s MarketInstrument) GetMinQuantity() OptInt32 {
	return s.MinQuantity
}

// GetCurrency returns the value of Currency.
func (s MarketInstrument) GetCurrency() OptCurrency {
	return s.Currency
}

// GetName returns the value of Name.
func (s MarketInstrument) GetName() string {
	return s.Name
}

// GetType returns the value of Type.
func (s MarketInstrument) GetType() InstrumentType {
	return s.Type
}

// SetFigi sets the value of Figi.
func (s *MarketInstrument) SetFigi(val string) {
	s.Figi = val
}

// SetTicker sets the value of Ticker.
func (s *MarketInstrument) SetTicker(val string) {
	s.Ticker = val
}

// SetIsin sets the value of Isin.
func (s *MarketInstrument) SetIsin(val OptString) {
	s.Isin = val
}

// SetMinPriceIncrement sets the value of MinPriceIncrement.
func (s *MarketInstrument) SetMinPriceIncrement(val OptFloat64) {
	s.MinPriceIncrement = val
}

// SetLot sets the value of Lot.
func (s *MarketInstrument) SetLot(val int32) {
	s.Lot = val
}

// SetMinQuantity sets the value of MinQuantity.
func (s *MarketInstrument) SetMinQuantity(val OptInt32) {
	s.MinQuantity = val
}

// SetCurrency sets the value of Currency.
func (s *MarketInstrument) SetCurrency(val OptCurrency) {
	s.Currency = val
}

// SetName sets the value of Name.
func (s *MarketInstrument) SetName(val string) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *MarketInstrument) SetType(val InstrumentType) {
	s.Type = val
}

// Ref: #/components/schemas/MarketInstrumentList
type MarketInstrumentList struct {
	Total       int32              `json:"total"`
	Instruments []MarketInstrument `json:"instruments"`
}

// GetTotal returns the value of Total.
func (s MarketInstrumentList) GetTotal() int32 {
	return s.Total
}

// GetInstruments returns the value of Instruments.
func (s MarketInstrumentList) GetInstruments() []MarketInstrument {
	return s.Instruments
}

// SetTotal sets the value of Total.
func (s *MarketInstrumentList) SetTotal(val int32) {
	s.Total = val
}

// SetInstruments sets the value of Instruments.
func (s *MarketInstrumentList) SetInstruments(val []MarketInstrument) {
	s.Instruments = val
}

// Ref: #/components/schemas/MarketInstrumentListResponse
type MarketInstrumentListResponse struct {
	TrackingId string               `json:"trackingId"`
	Status     string               `json:"status"`
	Payload    MarketInstrumentList `json:"payload"`
}

// GetTrackingId returns the value of TrackingId.
func (s MarketInstrumentListResponse) GetTrackingId() string {
	return s.TrackingId
}

// GetStatus returns the value of Status.
func (s MarketInstrumentListResponse) GetStatus() string {
	return s.Status
}

// GetPayload returns the value of Payload.
func (s MarketInstrumentListResponse) GetPayload() MarketInstrumentList {
	return s.Payload
}

// SetTrackingId sets the value of TrackingId.
func (s *MarketInstrumentListResponse) SetTrackingId(val string) {
	s.TrackingId = val
}

// SetStatus sets the value of Status.
func (s *MarketInstrumentListResponse) SetStatus(val string) {
	s.Status = val
}

// SetPayload sets the value of Payload.
func (s *MarketInstrumentListResponse) SetPayload(val MarketInstrumentList) {
	s.Payload = val
}

func (*MarketInstrumentListResponse) marketBondsGetRes()          {}
func (*MarketInstrumentListResponse) marketCurrenciesGetRes()     {}
func (*MarketInstrumentListResponse) marketEtfsGetRes()           {}
func (*MarketInstrumentListResponse) marketSearchByTickerGetRes() {}
func (*MarketInstrumentListResponse) marketStocksGetRes()         {}

// Ref: #/components/schemas/MarketOrderRequest
type MarketOrderRequest struct {
	Lots      int32         `json:"lots"`
	Operation OperationType `json:"operation"`
}

// GetLots returns the value of Lots.
func (s MarketOrderRequest) GetLots() int32 {
	return s.Lots
}

// GetOperation returns the value of Operation.
func (s MarketOrderRequest) GetOperation() OperationType {
	return s.Operation
}

// SetLots sets the value of Lots.
func (s *MarketOrderRequest) SetLots(val int32) {
	s.Lots = val
}

// SetOperation sets the value of Operation.
func (s *MarketOrderRequest) SetOperation(val OperationType) {
	s.Operation = val
}

// Ref: #/components/schemas/MarketOrderResponse
type MarketOrderResponse struct {
	TrackingId string            `json:"trackingId"`
	Status     string            `json:"status"`
	Payload    PlacedMarketOrder `json:"payload"`
}

// GetTrackingId returns the value of TrackingId.
func (s MarketOrderResponse) GetTrackingId() string {
	return s.TrackingId
}

// GetStatus returns the value of Status.
func (s MarketOrderResponse) GetStatus() string {
	return s.Status
}

// GetPayload returns the value of Payload.
func (s MarketOrderResponse) GetPayload() PlacedMarketOrder {
	return s.Payload
}

// SetTrackingId sets the value of TrackingId.
func (s *MarketOrderResponse) SetTrackingId(val string) {
	s.TrackingId = val
}

// SetStatus sets the value of Status.
func (s *MarketOrderResponse) SetStatus(val string) {
	s.Status = val
}

// SetPayload sets the value of Payload.
func (s *MarketOrderResponse) SetPayload(val PlacedMarketOrder) {
	s.Payload = val
}

func (*MarketOrderResponse) ordersMarketOrderPostRes() {}

// Ref: #/components/schemas/MoneyAmount
type MoneyAmount struct {
	Currency Currency `json:"currency"`
	Value    float64  `json:"value"`
}

// GetCurrency returns the value of Currency.
func (s MoneyAmount) GetCurrency() Currency {
	return s.Currency
}

// GetValue returns the value of Value.
func (s MoneyAmount) GetValue() float64 {
	return s.Value
}

// SetCurrency sets the value of Currency.
func (s *MoneyAmount) SetCurrency(val Currency) {
	s.Currency = val
}

// SetValue sets the value of Value.
func (s *MoneyAmount) SetValue(val float64) {
	s.Value = val
}

// Ref: #/components/schemas/Operation
type Operation struct {
	ID         string           `json:"id"`
	Status     OperationStatus  `json:"status"`
	Trades     []OperationTrade `json:"trades,omitempty"`
	Commission OptMoneyAmount   `json:"commission,omitempty"`
	Currency   Currency         `json:"currency"`
	Payment    float64          `json:"payment"`
	Price      OptFloat64       `json:"price,omitempty"`
	// Число инструментов в выставленной заявке.
	Quantity OptInt32 `json:"quantity,omitempty"`
	// Число инструментов, исполненных в заявке.
	QuantityExecuted OptInt32          `json:"quantityExecuted,omitempty"`
	Figi             OptString         `json:"figi,omitempty"`
	InstrumentType   OptInstrumentType `json:"instrumentType,omitempty"`
	IsMarginCall     bool              `json:"isMarginCall"`
	// ISO8601.
	Date          time.Time                      `json:"date"`
	OperationType OptOperationTypeWithCommission `json:"operationType,omitempty"`
}

// GetID returns the value of ID.
func (s Operation) GetID() string {
	return s.ID
}

// GetStatus returns the value of Status.
func (s Operation) GetStatus() OperationStatus {
	return s.Status
}

// GetTrades returns the value of Trades.
func (s Operation) GetTrades() []OperationTrade {
	return s.Trades
}

// GetCommission returns the value of Commission.
func (s Operation) GetCommission() OptMoneyAmount {
	return s.Commission
}

// GetCurrency returns the value of Currency.
func (s Operation) GetCurrency() Currency {
	return s.Currency
}

// GetPayment returns the value of Payment.
func (s Operation) GetPayment() float64 {
	return s.Payment
}

// GetPrice returns the value of Price.
func (s Operation) GetPrice() OptFloat64 {
	return s.Price
}

// GetQuantity returns the value of Quantity.
func (s Operation) GetQuantity() OptInt32 {
	return s.Quantity
}

// GetQuantityExecuted returns the value of QuantityExecuted.
func (s Operation) GetQuantityExecuted() OptInt32 {
	return s.QuantityExecuted
}

// GetFigi returns the value of Figi.
func (s Operation) GetFigi() OptString {
	return s.Figi
}

// GetInstrumentType returns the value of InstrumentType.
func (s Operation) GetInstrumentType() OptInstrumentType {
	return s.InstrumentType
}

// GetIsMarginCall returns the value of IsMarginCall.
func (s Operation) GetIsMarginCall() bool {
	return s.IsMarginCall
}

// GetDate returns the value of Date.
func (s Operation) GetDate() time.Time {
	return s.Date
}

// GetOperationType returns the value of OperationType.
func (s Operation) GetOperationType() OptOperationTypeWithCommission {
	return s.OperationType
}

// SetID sets the value of ID.
func (s *Operation) SetID(val string) {
	s.ID = val
}

// SetStatus sets the value of Status.
func (s *Operation) SetStatus(val OperationStatus) {
	s.Status = val
}

// SetTrades sets the value of Trades.
func (s *Operation) SetTrades(val []OperationTrade) {
	s.Trades = val
}

// SetCommission sets the value of Commission.
func (s *Operation) SetCommission(val OptMoneyAmount) {
	s.Commission = val
}

// SetCurrency sets the value of Currency.
func (s *Operation) SetCurrency(val Currency) {
	s.Currency = val
}

// SetPayment sets the value of Payment.
func (s *Operation) SetPayment(val float64) {
	s.Payment = val
}

// SetPrice sets the value of Price.
func (s *Operation) SetPrice(val OptFloat64) {
	s.Price = val
}

// SetQuantity sets the value of Quantity.
func (s *Operation) SetQuantity(val OptInt32) {
	s.Quantity = val
}

// SetQuantityExecuted sets the value of QuantityExecuted.
func (s *Operation) SetQuantityExecuted(val OptInt32) {
	s.QuantityExecuted = val
}

// SetFigi sets the value of Figi.
func (s *Operation) SetFigi(val OptString) {
	s.Figi = val
}

// SetInstrumentType sets the value of InstrumentType.
func (s *Operation) SetInstrumentType(val OptInstrumentType) {
	s.InstrumentType = val
}

// SetIsMarginCall sets the value of IsMarginCall.
func (s *Operation) SetIsMarginCall(val bool) {
	s.IsMarginCall = val
}

// SetDate sets the value of Date.
func (s *Operation) SetDate(val time.Time) {
	s.Date = val
}

// SetOperationType sets the value of OperationType.
func (s *Operation) SetOperationType(val OptOperationTypeWithCommission) {
	s.OperationType = val
}

// Статус заявки.
// Ref: #/components/schemas/OperationStatus
type OperationStatus string

const (
	OperationStatusDone     OperationStatus = "Done"
	OperationStatusDecline  OperationStatus = "Decline"
	OperationStatusProgress OperationStatus = "Progress"
)

// Ref: #/components/schemas/OperationTrade
type OperationTrade struct {
	TradeId string `json:"tradeId"`
	// ISO8601.
	Date     time.Time `json:"date"`
	Price    float64   `json:"price"`
	Quantity int32     `json:"quantity"`
}

// GetTradeId returns the value of TradeId.
func (s OperationTrade) GetTradeId() string {
	return s.TradeId
}

// GetDate returns the value of Date.
func (s OperationTrade) GetDate() time.Time {
	return s.Date
}

// GetPrice returns the value of Price.
func (s OperationTrade) GetPrice() float64 {
	return s.Price
}

// GetQuantity returns the value of Quantity.
func (s OperationTrade) GetQuantity() int32 {
	return s.Quantity
}

// SetTradeId sets the value of TradeId.
func (s *OperationTrade) SetTradeId(val string) {
	s.TradeId = val
}

// SetDate sets the value of Date.
func (s *OperationTrade) SetDate(val time.Time) {
	s.Date = val
}

// SetPrice sets the value of Price.
func (s *OperationTrade) SetPrice(val float64) {
	s.Price = val
}

// SetQuantity sets the value of Quantity.
func (s *OperationTrade) SetQuantity(val int32) {
	s.Quantity = val
}

// Ref: #/components/schemas/OperationType
type OperationType string

const (
	OperationTypeBuy  OperationType = "Buy"
	OperationTypeSell OperationType = "Sell"
)

// Ref: #/components/schemas/OperationTypeWithCommission
type OperationTypeWithCommission string

const (
	OperationTypeWithCommissionBuy                OperationTypeWithCommission = "Buy"
	OperationTypeWithCommissionBuyCard            OperationTypeWithCommission = "BuyCard"
	OperationTypeWithCommissionSell               OperationTypeWithCommission = "Sell"
	OperationTypeWithCommissionBrokerCommission   OperationTypeWithCommission = "BrokerCommission"
	OperationTypeWithCommissionExchangeCommission OperationTypeWithCommission = "ExchangeCommission"
	OperationTypeWithCommissionServiceCommission  OperationTypeWithCommission = "ServiceCommission"
	OperationTypeWithCommissionMarginCommission   OperationTypeWithCommission = "MarginCommission"
	OperationTypeWithCommissionOtherCommission    OperationTypeWithCommission = "OtherCommission"
	OperationTypeWithCommissionPayIn              OperationTypeWithCommission = "PayIn"
	OperationTypeWithCommissionPayOut             OperationTypeWithCommission = "PayOut"
	OperationTypeWithCommissionTax                OperationTypeWithCommission = "Tax"
	OperationTypeWithCommissionTaxLucre           OperationTypeWithCommission = "TaxLucre"
	OperationTypeWithCommissionTaxDividend        OperationTypeWithCommission = "TaxDividend"
	OperationTypeWithCommissionTaxCoupon          OperationTypeWithCommission = "TaxCoupon"
	OperationTypeWithCommissionTaxBack            OperationTypeWithCommission = "TaxBack"
	OperationTypeWithCommissionRepayment          OperationTypeWithCommission = "Repayment"
	OperationTypeWithCommissionPartRepayment      OperationTypeWithCommission = "PartRepayment"
	OperationTypeWithCommissionCoupon             OperationTypeWithCommission = "Coupon"
	OperationTypeWithCommissionDividend           OperationTypeWithCommission = "Dividend"
	OperationTypeWithCommissionSecurityIn         OperationTypeWithCommission = "SecurityIn"
	OperationTypeWithCommissionSecurityOut        OperationTypeWithCommission = "SecurityOut"
)

// Ref: #/components/schemas/Operations
type Operations struct {
	Operations []Operation `json:"operations"`
}

// GetOperations returns the value of Operations.
func (s Operations) GetOperations() []Operation {
	return s.Operations
}

// SetOperations sets the value of Operations.
func (s *Operations) SetOperations(val []Operation) {
	s.Operations = val
}

// Ref: #/components/schemas/OperationsResponse
type OperationsResponse struct {
	TrackingId string     `json:"trackingId"`
	Status     string     `json:"status"`
	Payload    Operations `json:"payload"`
}

// GetTrackingId returns the value of TrackingId.
func (s OperationsResponse) GetTrackingId() string {
	return s.TrackingId
}

// GetStatus returns the value of Status.
func (s OperationsResponse) GetStatus() string {
	return s.Status
}

// GetPayload returns the value of Payload.
func (s OperationsResponse) GetPayload() Operations {
	return s.Payload
}

// SetTrackingId sets the value of TrackingId.
func (s *OperationsResponse) SetTrackingId(val string) {
	s.TrackingId = val
}

// SetStatus sets the value of Status.
func (s *OperationsResponse) SetStatus(val string) {
	s.Status = val
}

// SetPayload sets the value of Payload.
func (s *OperationsResponse) SetPayload(val Operations) {
	s.Payload = val
}

func (*OperationsResponse) operationsGetRes() {}

// NewOptBrokerAccountType returns new OptBrokerAccountType with value set to v.
func NewOptBrokerAccountType(v BrokerAccountType) OptBrokerAccountType {
	return OptBrokerAccountType{
		Value: v,
		Set:   true,
	}
}

// OptBrokerAccountType is optional BrokerAccountType.
type OptBrokerAccountType struct {
	Value BrokerAccountType
	Set   bool
}

// IsSet returns true if OptBrokerAccountType was set.
func (o OptBrokerAccountType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBrokerAccountType) Reset() {
	var v BrokerAccountType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBrokerAccountType) SetTo(v BrokerAccountType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBrokerAccountType) Get() (v BrokerAccountType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBrokerAccountType) Or(d BrokerAccountType) BrokerAccountType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCurrency returns new OptCurrency with value set to v.
func NewOptCurrency(v Currency) OptCurrency {
	return OptCurrency{
		Value: v,
		Set:   true,
	}
}

// OptCurrency is optional Currency.
type OptCurrency struct {
	Value Currency
	Set   bool
}

// IsSet returns true if OptCurrency was set.
func (o OptCurrency) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCurrency) Reset() {
	var v Currency
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCurrency) SetTo(v Currency) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCurrency) Get() (v Currency, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCurrency) Or(d Currency) Currency {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInstrumentType returns new OptInstrumentType with value set to v.
func NewOptInstrumentType(v InstrumentType) OptInstrumentType {
	return OptInstrumentType{
		Value: v,
		Set:   true,
	}
}

// OptInstrumentType is optional InstrumentType.
type OptInstrumentType struct {
	Value InstrumentType
	Set   bool
}

// IsSet returns true if OptInstrumentType was set.
func (o OptInstrumentType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInstrumentType) Reset() {
	var v InstrumentType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInstrumentType) SetTo(v InstrumentType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInstrumentType) Get() (v InstrumentType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInstrumentType) Or(d InstrumentType) InstrumentType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt32 returns new OptInt32 with value set to v.
func NewOptInt32(v int32) OptInt32 {
	return OptInt32{
		Value: v,
		Set:   true,
	}
}

// OptInt32 is optional int32.
type OptInt32 struct {
	Value int32
	Set   bool
}

// IsSet returns true if OptInt32 was set.
func (o OptInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt32) SetTo(v int32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt32) Get() (v int32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMoneyAmount returns new OptMoneyAmount with value set to v.
func NewOptMoneyAmount(v MoneyAmount) OptMoneyAmount {
	return OptMoneyAmount{
		Value: v,
		Set:   true,
	}
}

// OptMoneyAmount is optional MoneyAmount.
type OptMoneyAmount struct {
	Value MoneyAmount
	Set   bool
}

// IsSet returns true if OptMoneyAmount was set.
func (o OptMoneyAmount) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMoneyAmount) Reset() {
	var v MoneyAmount
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMoneyAmount) SetTo(v MoneyAmount) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMoneyAmount) Get() (v MoneyAmount, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMoneyAmount) Or(d MoneyAmount) MoneyAmount {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOperationTypeWithCommission returns new OptOperationTypeWithCommission with value set to v.
func NewOptOperationTypeWithCommission(v OperationTypeWithCommission) OptOperationTypeWithCommission {
	return OptOperationTypeWithCommission{
		Value: v,
		Set:   true,
	}
}

// OptOperationTypeWithCommission is optional OperationTypeWithCommission.
type OptOperationTypeWithCommission struct {
	Value OperationTypeWithCommission
	Set   bool
}

// IsSet returns true if OptOperationTypeWithCommission was set.
func (o OptOperationTypeWithCommission) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOperationTypeWithCommission) Reset() {
	var v OperationTypeWithCommission
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOperationTypeWithCommission) SetTo(v OperationTypeWithCommission) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOperationTypeWithCommission) Get() (v OperationTypeWithCommission, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOperationTypeWithCommission) Or(d OperationTypeWithCommission) OperationTypeWithCommission {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSandboxRegisterRequest returns new OptSandboxRegisterRequest with value set to v.
func NewOptSandboxRegisterRequest(v SandboxRegisterRequest) OptSandboxRegisterRequest {
	return OptSandboxRegisterRequest{
		Value: v,
		Set:   true,
	}
}

// OptSandboxRegisterRequest is optional SandboxRegisterRequest.
type OptSandboxRegisterRequest struct {
	Value SandboxRegisterRequest
	Set   bool
}

// IsSet returns true if OptSandboxRegisterRequest was set.
func (o OptSandboxRegisterRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSandboxRegisterRequest) Reset() {
	var v SandboxRegisterRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSandboxRegisterRequest) SetTo(v SandboxRegisterRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSandboxRegisterRequest) Get() (v SandboxRegisterRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSandboxRegisterRequest) Or(d SandboxRegisterRequest) SandboxRegisterRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Order
type Order struct {
	OrderId       string        `json:"orderId"`
	Figi          string        `json:"figi"`
	Operation     OperationType `json:"operation"`
	Status        OrderStatus   `json:"status"`
	RequestedLots int32         `json:"requestedLots"`
	ExecutedLots  int32         `json:"executedLots"`
	Type          OrderType     `json:"type"`
	Price         float64       `json:"price"`
}

// GetOrderId returns the value of OrderId.
func (s Order) GetOrderId() string {
	return s.OrderId
}

// GetFigi returns the value of Figi.
func (s Order) GetFigi() string {
	return s.Figi
}

// GetOperation returns the value of Operation.
func (s Order) GetOperation() OperationType {
	return s.Operation
}

// GetStatus returns the value of Status.
func (s Order) GetStatus() OrderStatus {
	return s.Status
}

// GetRequestedLots returns the value of RequestedLots.
func (s Order) GetRequestedLots() int32 {
	return s.RequestedLots
}

// GetExecutedLots returns the value of ExecutedLots.
func (s Order) GetExecutedLots() int32 {
	return s.ExecutedLots
}

// GetType returns the value of Type.
func (s Order) GetType() OrderType {
	return s.Type
}

// GetPrice returns the value of Price.
func (s Order) GetPrice() float64 {
	return s.Price
}

// SetOrderId sets the value of OrderId.
func (s *Order) SetOrderId(val string) {
	s.OrderId = val
}

// SetFigi sets the value of Figi.
func (s *Order) SetFigi(val string) {
	s.Figi = val
}

// SetOperation sets the value of Operation.
func (s *Order) SetOperation(val OperationType) {
	s.Operation = val
}

// SetStatus sets the value of Status.
func (s *Order) SetStatus(val OrderStatus) {
	s.Status = val
}

// SetRequestedLots sets the value of RequestedLots.
func (s *Order) SetRequestedLots(val int32) {
	s.RequestedLots = val
}

// SetExecutedLots sets the value of ExecutedLots.
func (s *Order) SetExecutedLots(val int32) {
	s.ExecutedLots = val
}

// SetType sets the value of Type.
func (s *Order) SetType(val OrderType) {
	s.Type = val
}

// SetPrice sets the value of Price.
func (s *Order) SetPrice(val float64) {
	s.Price = val
}

// Ref: #/components/schemas/OrderResponse
type OrderResponse struct {
	Price    float64 `json:"price"`
	Quantity int32   `json:"quantity"`
}

// GetPrice returns the value of Price.
func (s OrderResponse) GetPrice() float64 {
	return s.Price
}

// GetQuantity returns the value of Quantity.
func (s OrderResponse) GetQuantity() int32 {
	return s.Quantity
}

// SetPrice sets the value of Price.
func (s *OrderResponse) SetPrice(val float64) {
	s.Price = val
}

// SetQuantity sets the value of Quantity.
func (s *OrderResponse) SetQuantity(val int32) {
	s.Quantity = val
}

// Статус заявки.
// Ref: #/components/schemas/OrderStatus
type OrderStatus string

const (
	OrderStatusNew            OrderStatus = "New"
	OrderStatusPartiallyFill  OrderStatus = "PartiallyFill"
	OrderStatusFill           OrderStatus = "Fill"
	OrderStatusCancelled      OrderStatus = "Cancelled"
	OrderStatusReplaced       OrderStatus = "Replaced"
	OrderStatusPendingCancel  OrderStatus = "PendingCancel"
	OrderStatusRejected       OrderStatus = "Rejected"
	OrderStatusPendingReplace OrderStatus = "PendingReplace"
	OrderStatusPendingNew     OrderStatus = "PendingNew"
)

// Тип заявки.
// Ref: #/components/schemas/OrderType
type OrderType string

const (
	OrderTypeLimit  OrderType = "Limit"
	OrderTypeMarket OrderType = "Market"
)

// Ref: #/components/schemas/Orderbook
type Orderbook struct {
	Figi        string          `json:"figi"`
	Depth       int32           `json:"depth"`
	Bids        []OrderResponse `json:"bids"`
	Asks        []OrderResponse `json:"asks"`
	TradeStatus TradeStatus     `json:"tradeStatus"`
	// Шаг цены.
	MinPriceIncrement float64 `json:"minPriceIncrement"`
	// Номинал для облигаций.
	FaceValue  OptFloat64 `json:"faceValue,omitempty"`
	LastPrice  OptFloat64 `json:"lastPrice,omitempty"`
	ClosePrice OptFloat64 `json:"closePrice,omitempty"`
	// Верхняя граница цены.
	LimitUp OptFloat64 `json:"limitUp,omitempty"`
	// Нижняя граница цены.
	LimitDown OptFloat64 `json:"limitDown,omitempty"`
}

// GetFigi returns the value of Figi.
func (s Orderbook) GetFigi() string {
	return s.Figi
}

// GetDepth returns the value of Depth.
func (s Orderbook) GetDepth() int32 {
	return s.Depth
}

// GetBids returns the value of Bids.
func (s Orderbook) GetBids() []OrderResponse {
	return s.Bids
}

// GetAsks returns the value of Asks.
func (s Orderbook) GetAsks() []OrderResponse {
	return s.Asks
}

// GetTradeStatus returns the value of TradeStatus.
func (s Orderbook) GetTradeStatus() TradeStatus {
	return s.TradeStatus
}

// GetMinPriceIncrement returns the value of MinPriceIncrement.
func (s Orderbook) GetMinPriceIncrement() float64 {
	return s.MinPriceIncrement
}

// GetFaceValue returns the value of FaceValue.
func (s Orderbook) GetFaceValue() OptFloat64 {
	return s.FaceValue
}

// GetLastPrice returns the value of LastPrice.
func (s Orderbook) GetLastPrice() OptFloat64 {
	return s.LastPrice
}

// GetClosePrice returns the value of ClosePrice.
func (s Orderbook) GetClosePrice() OptFloat64 {
	return s.ClosePrice
}

// GetLimitUp returns the value of LimitUp.
func (s Orderbook) GetLimitUp() OptFloat64 {
	return s.LimitUp
}

// GetLimitDown returns the value of LimitDown.
func (s Orderbook) GetLimitDown() OptFloat64 {
	return s.LimitDown
}

// SetFigi sets the value of Figi.
func (s *Orderbook) SetFigi(val string) {
	s.Figi = val
}

// SetDepth sets the value of Depth.
func (s *Orderbook) SetDepth(val int32) {
	s.Depth = val
}

// SetBids sets the value of Bids.
func (s *Orderbook) SetBids(val []OrderResponse) {
	s.Bids = val
}

// SetAsks sets the value of Asks.
func (s *Orderbook) SetAsks(val []OrderResponse) {
	s.Asks = val
}

// SetTradeStatus sets the value of TradeStatus.
func (s *Orderbook) SetTradeStatus(val TradeStatus) {
	s.TradeStatus = val
}

// SetMinPriceIncrement sets the value of MinPriceIncrement.
func (s *Orderbook) SetMinPriceIncrement(val float64) {
	s.MinPriceIncrement = val
}

// SetFaceValue sets the value of FaceValue.
func (s *Orderbook) SetFaceValue(val OptFloat64) {
	s.FaceValue = val
}

// SetLastPrice sets the value of LastPrice.
func (s *Orderbook) SetLastPrice(val OptFloat64) {
	s.LastPrice = val
}

// SetClosePrice sets the value of ClosePrice.
func (s *Orderbook) SetClosePrice(val OptFloat64) {
	s.ClosePrice = val
}

// SetLimitUp sets the value of LimitUp.
func (s *Orderbook) SetLimitUp(val OptFloat64) {
	s.LimitUp = val
}

// SetLimitDown sets the value of LimitDown.
func (s *Orderbook) SetLimitDown(val OptFloat64) {
	s.LimitDown = val
}

// Ref: #/components/schemas/OrderbookResponse
type OrderbookResponse struct {
	TrackingId string    `json:"trackingId"`
	Status     string    `json:"status"`
	Payload    Orderbook `json:"payload"`
}

// GetTrackingId returns the value of TrackingId.
func (s OrderbookResponse) GetTrackingId() string {
	return s.TrackingId
}

// GetStatus returns the value of Status.
func (s OrderbookResponse) GetStatus() string {
	return s.Status
}

// GetPayload returns the value of Payload.
func (s OrderbookResponse) GetPayload() Orderbook {
	return s.Payload
}

// SetTrackingId sets the value of TrackingId.
func (s *OrderbookResponse) SetTrackingId(val string) {
	s.TrackingId = val
}

// SetStatus sets the value of Status.
func (s *OrderbookResponse) SetStatus(val string) {
	s.Status = val
}

// SetPayload sets the value of Payload.
func (s *OrderbookResponse) SetPayload(val Orderbook) {
	s.Payload = val
}

func (*OrderbookResponse) marketOrderbookGetRes() {}

// Ref: #/components/schemas/OrdersResponse
type OrdersResponse struct {
	TrackingId string  `json:"trackingId"`
	Status     string  `json:"status"`
	Payload    []Order `json:"payload"`
}

// GetTrackingId returns the value of TrackingId.
func (s OrdersResponse) GetTrackingId() string {
	return s.TrackingId
}

// GetStatus returns the value of Status.
func (s OrdersResponse) GetStatus() string {
	return s.Status
}

// GetPayload returns the value of Payload.
func (s OrdersResponse) GetPayload() []Order {
	return s.Payload
}

// SetTrackingId sets the value of TrackingId.
func (s *OrdersResponse) SetTrackingId(val string) {
	s.TrackingId = val
}

// SetStatus sets the value of Status.
func (s *OrdersResponse) SetStatus(val string) {
	s.Status = val
}

// SetPayload sets the value of Payload.
func (s *OrdersResponse) SetPayload(val []Order) {
	s.Payload = val
}

func (*OrdersResponse) ordersGetRes() {}

// Ref: #/components/schemas/PlacedLimitOrder
type PlacedLimitOrder struct {
	OrderId      string        `json:"orderId"`
	Operation    OperationType `json:"operation"`
	Status       OrderStatus   `json:"status"`
	RejectReason OptString     `json:"rejectReason,omitempty"`
	// Сообщение об ошибке.
	Message       OptString      `json:"message,omitempty"`
	RequestedLots int            `json:"requestedLots"`
	ExecutedLots  int            `json:"executedLots"`
	Commission    OptMoneyAmount `json:"commission,omitempty"`
}

// GetOrderId returns the value of OrderId.
func (s PlacedLimitOrder) GetOrderId() string {
	return s.OrderId
}

// GetOperation returns the value of Operation.
func (s PlacedLimitOrder) GetOperation() OperationType {
	return s.Operation
}

// GetStatus returns the value of Status.
func (s PlacedLimitOrder) GetStatus() OrderStatus {
	return s.Status
}

// GetRejectReason returns the value of RejectReason.
func (s PlacedLimitOrder) GetRejectReason() OptString {
	return s.RejectReason
}

// GetMessage returns the value of Message.
func (s PlacedLimitOrder) GetMessage() OptString {
	return s.Message
}

// GetRequestedLots returns the value of RequestedLots.
func (s PlacedLimitOrder) GetRequestedLots() int {
	return s.RequestedLots
}

// GetExecutedLots returns the value of ExecutedLots.
func (s PlacedLimitOrder) GetExecutedLots() int {
	return s.ExecutedLots
}

// GetCommission returns the value of Commission.
func (s PlacedLimitOrder) GetCommission() OptMoneyAmount {
	return s.Commission
}

// SetOrderId sets the value of OrderId.
func (s *PlacedLimitOrder) SetOrderId(val string) {
	s.OrderId = val
}

// SetOperation sets the value of Operation.
func (s *PlacedLimitOrder) SetOperation(val OperationType) {
	s.Operation = val
}

// SetStatus sets the value of Status.
func (s *PlacedLimitOrder) SetStatus(val OrderStatus) {
	s.Status = val
}

// SetRejectReason sets the value of RejectReason.
func (s *PlacedLimitOrder) SetRejectReason(val OptString) {
	s.RejectReason = val
}

// SetMessage sets the value of Message.
func (s *PlacedLimitOrder) SetMessage(val OptString) {
	s.Message = val
}

// SetRequestedLots sets the value of RequestedLots.
func (s *PlacedLimitOrder) SetRequestedLots(val int) {
	s.RequestedLots = val
}

// SetExecutedLots sets the value of ExecutedLots.
func (s *PlacedLimitOrder) SetExecutedLots(val int) {
	s.ExecutedLots = val
}

// SetCommission sets the value of Commission.
func (s *PlacedLimitOrder) SetCommission(val OptMoneyAmount) {
	s.Commission = val
}

// Ref: #/components/schemas/PlacedMarketOrder
type PlacedMarketOrder struct {
	OrderId      string        `json:"orderId"`
	Operation    OperationType `json:"operation"`
	Status       OrderStatus   `json:"status"`
	RejectReason OptString     `json:"rejectReason,omitempty"`
	// Сообщение об ошибке.
	Message       OptString      `json:"message,omitempty"`
	RequestedLots int            `json:"requestedLots"`
	ExecutedLots  int            `json:"executedLots"`
	Commission    OptMoneyAmount `json:"commission,omitempty"`
}

// GetOrderId returns the value of OrderId.
func (s PlacedMarketOrder) GetOrderId() string {
	return s.OrderId
}

// GetOperation returns the value of Operation.
func (s PlacedMarketOrder) GetOperation() OperationType {
	return s.Operation
}

// GetStatus returns the value of Status.
func (s PlacedMarketOrder) GetStatus() OrderStatus {
	return s.Status
}

// GetRejectReason returns the value of RejectReason.
func (s PlacedMarketOrder) GetRejectReason() OptString {
	return s.RejectReason
}

// GetMessage returns the value of Message.
func (s PlacedMarketOrder) GetMessage() OptString {
	return s.Message
}

// GetRequestedLots returns the value of RequestedLots.
func (s PlacedMarketOrder) GetRequestedLots() int {
	return s.RequestedLots
}

// GetExecutedLots returns the value of ExecutedLots.
func (s PlacedMarketOrder) GetExecutedLots() int {
	return s.ExecutedLots
}

// GetCommission returns the value of Commission.
func (s PlacedMarketOrder) GetCommission() OptMoneyAmount {
	return s.Commission
}

// SetOrderId sets the value of OrderId.
func (s *PlacedMarketOrder) SetOrderId(val string) {
	s.OrderId = val
}

// SetOperation sets the value of Operation.
func (s *PlacedMarketOrder) SetOperation(val OperationType) {
	s.Operation = val
}

// SetStatus sets the value of Status.
func (s *PlacedMarketOrder) SetStatus(val OrderStatus) {
	s.Status = val
}

// SetRejectReason sets the value of RejectReason.
func (s *PlacedMarketOrder) SetRejectReason(val OptString) {
	s.RejectReason = val
}

// SetMessage sets the value of Message.
func (s *PlacedMarketOrder) SetMessage(val OptString) {
	s.Message = val
}

// SetRequestedLots sets the value of RequestedLots.
func (s *PlacedMarketOrder) SetRequestedLots(val int) {
	s.RequestedLots = val
}

// SetExecutedLots sets the value of ExecutedLots.
func (s *PlacedMarketOrder) SetExecutedLots(val int) {
	s.ExecutedLots = val
}

// SetCommission sets the value of Commission.
func (s *PlacedMarketOrder) SetCommission(val OptMoneyAmount) {
	s.Commission = val
}

// Ref: #/components/schemas/Portfolio
type Portfolio struct {
	Positions []PortfolioPosition `json:"positions"`
}

// GetPositions returns the value of Positions.
func (s Portfolio) GetPositions() []PortfolioPosition {
	return s.Positions
}

// SetPositions sets the value of Positions.
func (s *Portfolio) SetPositions(val []PortfolioPosition) {
	s.Positions = val
}

// Ref: #/components/schemas/PortfolioCurrenciesResponse
type PortfolioCurrenciesResponse struct {
	TrackingId string     `json:"trackingId"`
	Status     string     `json:"status"`
	Payload    Currencies `json:"payload"`
}

// GetTrackingId returns the value of TrackingId.
func (s PortfolioCurrenciesResponse) GetTrackingId() string {
	return s.TrackingId
}

// GetStatus returns the value of Status.
func (s PortfolioCurrenciesResponse) GetStatus() string {
	return s.Status
}

// GetPayload returns the value of Payload.
func (s PortfolioCurrenciesResponse) GetPayload() Currencies {
	return s.Payload
}

// SetTrackingId sets the value of TrackingId.
func (s *PortfolioCurrenciesResponse) SetTrackingId(val string) {
	s.TrackingId = val
}

// SetStatus sets the value of Status.
func (s *PortfolioCurrenciesResponse) SetStatus(val string) {
	s.Status = val
}

// SetPayload sets the value of Payload.
func (s *PortfolioCurrenciesResponse) SetPayload(val Currencies) {
	s.Payload = val
}

func (*PortfolioCurrenciesResponse) portfolioCurrenciesGetRes() {}

// Ref: #/components/schemas/PortfolioPosition
type PortfolioPosition struct {
	Figi                      string         `json:"figi"`
	Ticker                    OptString      `json:"ticker,omitempty"`
	Isin                      OptString      `json:"isin,omitempty"`
	InstrumentType            InstrumentType `json:"instrumentType"`
	Balance                   float64        `json:"balance"`
	Blocked                   OptFloat64     `json:"blocked,omitempty"`
	ExpectedYield             OptMoneyAmount `json:"expectedYield,omitempty"`
	Lots                      int32          `json:"lots"`
	AveragePositionPrice      OptMoneyAmount `json:"averagePositionPrice,omitempty"`
	AveragePositionPriceNoNkd OptMoneyAmount `json:"averagePositionPriceNoNkd,omitempty"`
	Name                      string         `json:"name"`
}

// GetFigi returns the value of Figi.
func (s PortfolioPosition) GetFigi() string {
	return s.Figi
}

// GetTicker returns the value of Ticker.
func (s PortfolioPosition) GetTicker() OptString {
	return s.Ticker
}

// GetIsin returns the value of Isin.
func (s PortfolioPosition) GetIsin() OptString {
	return s.Isin
}

// GetInstrumentType returns the value of InstrumentType.
func (s PortfolioPosition) GetInstrumentType() InstrumentType {
	return s.InstrumentType
}

// GetBalance returns the value of Balance.
func (s PortfolioPosition) GetBalance() float64 {
	return s.Balance
}

// GetBlocked returns the value of Blocked.
func (s PortfolioPosition) GetBlocked() OptFloat64 {
	return s.Blocked
}

// GetExpectedYield returns the value of ExpectedYield.
func (s PortfolioPosition) GetExpectedYield() OptMoneyAmount {
	return s.ExpectedYield
}

// GetLots returns the value of Lots.
func (s PortfolioPosition) GetLots() int32 {
	return s.Lots
}

// GetAveragePositionPrice returns the value of AveragePositionPrice.
func (s PortfolioPosition) GetAveragePositionPrice() OptMoneyAmount {
	return s.AveragePositionPrice
}

// GetAveragePositionPriceNoNkd returns the value of AveragePositionPriceNoNkd.
func (s PortfolioPosition) GetAveragePositionPriceNoNkd() OptMoneyAmount {
	return s.AveragePositionPriceNoNkd
}

// GetName returns the value of Name.
func (s PortfolioPosition) GetName() string {
	return s.Name
}

// SetFigi sets the value of Figi.
func (s *PortfolioPosition) SetFigi(val string) {
	s.Figi = val
}

// SetTicker sets the value of Ticker.
func (s *PortfolioPosition) SetTicker(val OptString) {
	s.Ticker = val
}

// SetIsin sets the value of Isin.
func (s *PortfolioPosition) SetIsin(val OptString) {
	s.Isin = val
}

// SetInstrumentType sets the value of InstrumentType.
func (s *PortfolioPosition) SetInstrumentType(val InstrumentType) {
	s.InstrumentType = val
}

// SetBalance sets the value of Balance.
func (s *PortfolioPosition) SetBalance(val float64) {
	s.Balance = val
}

// SetBlocked sets the value of Blocked.
func (s *PortfolioPosition) SetBlocked(val OptFloat64) {
	s.Blocked = val
}

// SetExpectedYield sets the value of ExpectedYield.
func (s *PortfolioPosition) SetExpectedYield(val OptMoneyAmount) {
	s.ExpectedYield = val
}

// SetLots sets the value of Lots.
func (s *PortfolioPosition) SetLots(val int32) {
	s.Lots = val
}

// SetAveragePositionPrice sets the value of AveragePositionPrice.
func (s *PortfolioPosition) SetAveragePositionPrice(val OptMoneyAmount) {
	s.AveragePositionPrice = val
}

// SetAveragePositionPriceNoNkd sets the value of AveragePositionPriceNoNkd.
func (s *PortfolioPosition) SetAveragePositionPriceNoNkd(val OptMoneyAmount) {
	s.AveragePositionPriceNoNkd = val
}

// SetName sets the value of Name.
func (s *PortfolioPosition) SetName(val string) {
	s.Name = val
}

// Ref: #/components/schemas/PortfolioResponse
type PortfolioResponse struct {
	TrackingId string    `json:"trackingId"`
	Status     string    `json:"status"`
	Payload    Portfolio `json:"payload"`
}

// GetTrackingId returns the value of TrackingId.
func (s PortfolioResponse) GetTrackingId() string {
	return s.TrackingId
}

// GetStatus returns the value of Status.
func (s PortfolioResponse) GetStatus() string {
	return s.Status
}

// GetPayload returns the value of Payload.
func (s PortfolioResponse) GetPayload() Portfolio {
	return s.Payload
}

// SetTrackingId sets the value of TrackingId.
func (s *PortfolioResponse) SetTrackingId(val string) {
	s.TrackingId = val
}

// SetStatus sets the value of Status.
func (s *PortfolioResponse) SetStatus(val string) {
	s.Status = val
}

// SetPayload sets the value of Payload.
func (s *PortfolioResponse) SetPayload(val Portfolio) {
	s.Payload = val
}

func (*PortfolioResponse) portfolioGetRes() {}

type SSOAuth struct {
	Token string
}

// GetToken returns the value of Token.
func (s SSOAuth) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *SSOAuth) SetToken(val string) {
	s.Token = val
}

// Ref: #/components/schemas/SandboxAccount
type SandboxAccount struct {
	BrokerAccountType BrokerAccountType `json:"brokerAccountType"`
	BrokerAccountId   string            `json:"brokerAccountId"`
}

// GetBrokerAccountType returns the value of BrokerAccountType.
func (s SandboxAccount) GetBrokerAccountType() BrokerAccountType {
	return s.BrokerAccountType
}

// GetBrokerAccountId returns the value of BrokerAccountId.
func (s SandboxAccount) GetBrokerAccountId() string {
	return s.BrokerAccountId
}

// SetBrokerAccountType sets the value of BrokerAccountType.
func (s *SandboxAccount) SetBrokerAccountType(val BrokerAccountType) {
	s.BrokerAccountType = val
}

// SetBrokerAccountId sets the value of BrokerAccountId.
func (s *SandboxAccount) SetBrokerAccountId(val string) {
	s.BrokerAccountId = val
}

// Ref: #/components/schemas/SandboxCurrency
type SandboxCurrency string

const (
	SandboxCurrencyRUB SandboxCurrency = "RUB"
	SandboxCurrencyUSD SandboxCurrency = "USD"
	SandboxCurrencyEUR SandboxCurrency = "EUR"
	SandboxCurrencyGBP SandboxCurrency = "GBP"
	SandboxCurrencyHKD SandboxCurrency = "HKD"
	SandboxCurrencyCHF SandboxCurrency = "CHF"
	SandboxCurrencyJPY SandboxCurrency = "JPY"
	SandboxCurrencyCNY SandboxCurrency = "CNY"
	SandboxCurrencyTRY SandboxCurrency = "TRY"
)

// Ref: #/components/schemas/SandboxRegisterRequest
type SandboxRegisterRequest struct {
	BrokerAccountType OptBrokerAccountType `json:"brokerAccountType,omitempty"`
}

// GetBrokerAccountType returns the value of BrokerAccountType.
func (s SandboxRegisterRequest) GetBrokerAccountType() OptBrokerAccountType {
	return s.BrokerAccountType
}

// SetBrokerAccountType sets the value of BrokerAccountType.
func (s *SandboxRegisterRequest) SetBrokerAccountType(val OptBrokerAccountType) {
	s.BrokerAccountType = val
}

// Ref: #/components/schemas/SandboxRegisterResponse
type SandboxRegisterResponse struct {
	TrackingId string         `json:"trackingId"`
	Status     string         `json:"status"`
	Payload    SandboxAccount `json:"payload"`
}

// GetTrackingId returns the value of TrackingId.
func (s SandboxRegisterResponse) GetTrackingId() string {
	return s.TrackingId
}

// GetStatus returns the value of Status.
func (s SandboxRegisterResponse) GetStatus() string {
	return s.Status
}

// GetPayload returns the value of Payload.
func (s SandboxRegisterResponse) GetPayload() SandboxAccount {
	return s.Payload
}

// SetTrackingId sets the value of TrackingId.
func (s *SandboxRegisterResponse) SetTrackingId(val string) {
	s.TrackingId = val
}

// SetStatus sets the value of Status.
func (s *SandboxRegisterResponse) SetStatus(val string) {
	s.Status = val
}

// SetPayload sets the value of Payload.
func (s *SandboxRegisterResponse) SetPayload(val SandboxAccount) {
	s.Payload = val
}

func (*SandboxRegisterResponse) sandboxRegisterPostRes() {}

// Ref: #/components/schemas/SandboxSetCurrencyBalanceRequest
type SandboxSetCurrencyBalanceRequest struct {
	Currency SandboxCurrency `json:"currency"`
	Balance  float64         `json:"balance"`
}

// GetCurrency returns the value of Currency.
func (s SandboxSetCurrencyBalanceRequest) GetCurrency() SandboxCurrency {
	return s.Currency
}

// GetBalance returns the value of Balance.
func (s SandboxSetCurrencyBalanceRequest) GetBalance() float64 {
	return s.Balance
}

// SetCurrency sets the value of Currency.
func (s *SandboxSetCurrencyBalanceRequest) SetCurrency(val SandboxCurrency) {
	s.Currency = val
}

// SetBalance sets the value of Balance.
func (s *SandboxSetCurrencyBalanceRequest) SetBalance(val float64) {
	s.Balance = val
}

// Ref: #/components/schemas/SandboxSetPositionBalanceRequest
type SandboxSetPositionBalanceRequest struct {
	Figi    OptString `json:"figi,omitempty"`
	Balance float64   `json:"balance"`
}

// GetFigi returns the value of Figi.
func (s SandboxSetPositionBalanceRequest) GetFigi() OptString {
	return s.Figi
}

// GetBalance returns the value of Balance.
func (s SandboxSetPositionBalanceRequest) GetBalance() float64 {
	return s.Balance
}

// SetFigi sets the value of Figi.
func (s *SandboxSetPositionBalanceRequest) SetFigi(val OptString) {
	s.Figi = val
}

// SetBalance sets the value of Balance.
func (s *SandboxSetPositionBalanceRequest) SetBalance(val float64) {
	s.Balance = val
}

// Ref: #/components/schemas/SearchMarketInstrument
type SearchMarketInstrument struct {
	Figi   string    `json:"figi"`
	Ticker string    `json:"ticker"`
	Isin   OptString `json:"isin,omitempty"`
	// Шаг цены.
	MinPriceIncrement OptFloat64     `json:"minPriceIncrement,omitempty"`
	Lot               int32          `json:"lot"`
	Currency          OptCurrency    `json:"currency,omitempty"`
	Name              string         `json:"name"`
	Type              InstrumentType `json:"type"`
}

// GetFigi returns the value of Figi.
func (s SearchMarketInstrument) GetFigi() string {
	return s.Figi
}

// GetTicker returns the value of Ticker.
func (s SearchMarketInstrument) GetTicker() string {
	return s.Ticker
}

// GetIsin returns the value of Isin.
func (s SearchMarketInstrument) GetIsin() OptString {
	return s.Isin
}

// GetMinPriceIncrement returns the value of MinPriceIncrement.
func (s SearchMarketInstrument) GetMinPriceIncrement() OptFloat64 {
	return s.MinPriceIncrement
}

// GetLot returns the value of Lot.
func (s SearchMarketInstrument) GetLot() int32 {
	return s.Lot
}

// GetCurrency returns the value of Currency.
func (s SearchMarketInstrument) GetCurrency() OptCurrency {
	return s.Currency
}

// GetName returns the value of Name.
func (s SearchMarketInstrument) GetName() string {
	return s.Name
}

// GetType returns the value of Type.
func (s SearchMarketInstrument) GetType() InstrumentType {
	return s.Type
}

// SetFigi sets the value of Figi.
func (s *SearchMarketInstrument) SetFigi(val string) {
	s.Figi = val
}

// SetTicker sets the value of Ticker.
func (s *SearchMarketInstrument) SetTicker(val string) {
	s.Ticker = val
}

// SetIsin sets the value of Isin.
func (s *SearchMarketInstrument) SetIsin(val OptString) {
	s.Isin = val
}

// SetMinPriceIncrement sets the value of MinPriceIncrement.
func (s *SearchMarketInstrument) SetMinPriceIncrement(val OptFloat64) {
	s.MinPriceIncrement = val
}

// SetLot sets the value of Lot.
func (s *SearchMarketInstrument) SetLot(val int32) {
	s.Lot = val
}

// SetCurrency sets the value of Currency.
func (s *SearchMarketInstrument) SetCurrency(val OptCurrency) {
	s.Currency = val
}

// SetName sets the value of Name.
func (s *SearchMarketInstrument) SetName(val string) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *SearchMarketInstrument) SetType(val InstrumentType) {
	s.Type = val
}

// Ref: #/components/schemas/SearchMarketInstrumentResponse
type SearchMarketInstrumentResponse struct {
	TrackingId string                 `json:"trackingId"`
	Status     string                 `json:"status"`
	Payload    SearchMarketInstrument `json:"payload"`
}

// GetTrackingId returns the value of TrackingId.
func (s SearchMarketInstrumentResponse) GetTrackingId() string {
	return s.TrackingId
}

// GetStatus returns the value of Status.
func (s SearchMarketInstrumentResponse) GetStatus() string {
	return s.Status
}

// GetPayload returns the value of Payload.
func (s SearchMarketInstrumentResponse) GetPayload() SearchMarketInstrument {
	return s.Payload
}

// SetTrackingId sets the value of TrackingId.
func (s *SearchMarketInstrumentResponse) SetTrackingId(val string) {
	s.TrackingId = val
}

// SetStatus sets the value of Status.
func (s *SearchMarketInstrumentResponse) SetStatus(val string) {
	s.Status = val
}

// SetPayload sets the value of Payload.
func (s *SearchMarketInstrumentResponse) SetPayload(val SearchMarketInstrument) {
	s.Payload = val
}

func (*SearchMarketInstrumentResponse) marketSearchByFigiGetRes() {}

// Ref: #/components/schemas/TradeStatus
type TradeStatus string

const (
	TradeStatusNormalTrading          TradeStatus = "NormalTrading"
	TradeStatusNotAvailableForTrading TradeStatus = "NotAvailableForTrading"
)

// Ref: #/components/schemas/UserAccount
type UserAccount struct {
	BrokerAccountType BrokerAccountType `json:"brokerAccountType"`
	BrokerAccountId   string            `json:"brokerAccountId"`
}

// GetBrokerAccountType returns the value of BrokerAccountType.
func (s UserAccount) GetBrokerAccountType() BrokerAccountType {
	return s.BrokerAccountType
}

// GetBrokerAccountId returns the value of BrokerAccountId.
func (s UserAccount) GetBrokerAccountId() string {
	return s.BrokerAccountId
}

// SetBrokerAccountType sets the value of BrokerAccountType.
func (s *UserAccount) SetBrokerAccountType(val BrokerAccountType) {
	s.BrokerAccountType = val
}

// SetBrokerAccountId sets the value of BrokerAccountId.
func (s *UserAccount) SetBrokerAccountId(val string) {
	s.BrokerAccountId = val
}

// Ref: #/components/schemas/UserAccounts
type UserAccounts struct {
	Accounts []UserAccount `json:"accounts"`
}

// GetAccounts returns the value of Accounts.
func (s UserAccounts) GetAccounts() []UserAccount {
	return s.Accounts
}

// SetAccounts sets the value of Accounts.
func (s *UserAccounts) SetAccounts(val []UserAccount) {
	s.Accounts = val
}

// Ref: #/components/schemas/UserAccountsResponse
type UserAccountsResponse struct {
	TrackingId string       `json:"trackingId"`
	Status     string       `json:"status"`
	Payload    UserAccounts `json:"payload"`
}

// GetTrackingId returns the value of TrackingId.
func (s UserAccountsResponse) GetTrackingId() string {
	return s.TrackingId
}

// GetStatus returns the value of Status.
func (s UserAccountsResponse) GetStatus() string {
	return s.Status
}

// GetPayload returns the value of Payload.
func (s UserAccountsResponse) GetPayload() UserAccounts {
	return s.Payload
}

// SetTrackingId sets the value of TrackingId.
func (s *UserAccountsResponse) SetTrackingId(val string) {
	s.TrackingId = val
}

// SetStatus sets the value of Status.
func (s *UserAccountsResponse) SetStatus(val string) {
	s.Status = val
}

// SetPayload sets the value of Payload.
func (s *UserAccountsResponse) SetPayload(val UserAccounts) {
	s.Payload = val
}

func (*UserAccountsResponse) userAccountsGetRes() {}

// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"time"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
)

// MarketCandlesGetParams is parameters of GET /market/candles operation.
type MarketCandlesGetParams struct {
	// FIGI.
	Figi string
	// Начало временного промежутка.
	From time.Time
	// Конец временного промежутка.
	To time.Time
	// Интервал свечи.
	Interval CandleResolution
}

func unpackMarketCandlesGetParams(packed middleware.Parameters) (params MarketCandlesGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "figi",
			In:   "query",
		}
		params.Figi = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "from",
			In:   "query",
		}
		params.From = packed[key].(time.Time)
	}
	{
		key := middleware.ParameterKey{
			Name: "to",
			In:   "query",
		}
		params.To = packed[key].(time.Time)
	}
	{
		key := middleware.ParameterKey{
			Name: "interval",
			In:   "query",
		}
		params.Interval = packed[key].(CandleResolution)
	}
	return params
}

func decodeMarketCandlesGetParams(args [0]string, argsEscaped bool, r *http.Request) (params MarketCandlesGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: figi.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "figi",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Figi = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "figi",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: from.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "from",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToDateTime(val)
				if err != nil {
					return err
				}

				params.From = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "from",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: to.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "to",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToDateTime(val)
				if err != nil {
					return err
				}

				params.To = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "to",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: interval.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "interval",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Interval = CandleResolution(c)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Interval.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "interval",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// MarketOrderbookGetParams is parameters of GET /market/orderbook operation.
type MarketOrderbookGetParams struct {
	// FIGI.
	Figi string
	// Глубина стакана [1..20].
	Depth int32
}

func unpackMarketOrderbookGetParams(packed middleware.Parameters) (params MarketOrderbookGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "figi",
			In:   "query",
		}
		params.Figi = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "depth",
			In:   "query",
		}
		params.Depth = packed[key].(int32)
	}
	return params
}

func decodeMarketOrderbookGetParams(args [0]string, argsEscaped bool, r *http.Request) (params MarketOrderbookGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: figi.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "figi",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Figi = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "figi",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: depth.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "depth",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt32(val)
				if err != nil {
					return err
				}

				params.Depth = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "depth",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// MarketSearchByFigiGetParams is parameters of GET /market/search/by-figi operation.
type MarketSearchByFigiGetParams struct {
	// FIGI.
	Figi string
}

func unpackMarketSearchByFigiGetParams(packed middleware.Parameters) (params MarketSearchByFigiGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "figi",
			In:   "query",
		}
		params.Figi = packed[key].(string)
	}
	return params
}

func decodeMarketSearchByFigiGetParams(args [0]string, argsEscaped bool, r *http.Request) (params MarketSearchByFigiGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: figi.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "figi",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Figi = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "figi",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// MarketSearchByTickerGetParams is parameters of GET /market/search/by-ticker operation.
type MarketSearchByTickerGetParams struct {
	// Тикер инструмента.
	Ticker string
}

func unpackMarketSearchByTickerGetParams(packed middleware.Parameters) (params MarketSearchByTickerGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "ticker",
			In:   "query",
		}
		params.Ticker = packed[key].(string)
	}
	return params
}

func decodeMarketSearchByTickerGetParams(args [0]string, argsEscaped bool, r *http.Request) (params MarketSearchByTickerGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: ticker.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "ticker",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Ticker = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "ticker",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// OperationsGetParams is parameters of GET /operations operation.
type OperationsGetParams struct {
	// Начало временного промежутка.
	From time.Time
	// Конец временного промежутка.
	To time.Time
	// Figi инструмента для фильтрации.
	Figi OptString `json:",omitempty,omitzero"`
	// Номер счета (по умолчанию - Тинькофф).
	BrokerAccountId OptString `json:",omitempty,omitzero"`
}

func unpackOperationsGetParams(packed middleware.Parameters) (params OperationsGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "from",
			In:   "query",
		}
		params.From = packed[key].(time.Time)
	}
	{
		key := middleware.ParameterKey{
			Name: "to",
			In:   "query",
		}
		params.To = packed[key].(time.Time)
	}
	{
		key := middleware.ParameterKey{
			Name: "figi",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Figi = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "brokerAccountId",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.BrokerAccountId = v.(OptString)
		}
	}
	return params
}

func decodeOperationsGetParams(args [0]string, argsEscaped bool, r *http.Request) (params OperationsGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: from.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "from",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToDateTime(val)
				if err != nil {
					return err
				}

				params.From = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "from",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: to.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "to",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToDateTime(val)
				if err != nil {
					return err
				}

				params.To = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "to",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: figi.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "figi",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFigiVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFigiVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Figi.SetTo(paramsDotFigiVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "figi",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: brokerAccountId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "brokerAccountId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBrokerAccountIdVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotBrokerAccountIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.BrokerAccountId.SetTo(paramsDotBrokerAccountIdVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "brokerAccountId",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// OrdersCancelPostParams is parameters of POST /orders/cancel operation.
type OrdersCancelPostParams struct {
	// ID заявки.
	OrderId string
	// Номер счета (по умолчанию - Тинькофф).
	BrokerAccountId OptString `json:",omitempty,omitzero"`
}

func unpackOrdersCancelPostParams(packed middleware.Parameters) (params OrdersCancelPostParams) {
	{
		key := middleware.ParameterKey{
			Name: "orderId",
			In:   "query",
		}
		params.OrderId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "brokerAccountId",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.BrokerAccountId = v.(OptString)
		}
	}
	return params
}

func decodeOrdersCancelPostParams(args [0]string, argsEscaped bool, r *http.Request) (params OrdersCancelPostParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: orderId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "orderId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrderId = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "orderId",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: brokerAccountId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "brokerAccountId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBrokerAccountIdVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotBrokerAccountIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.BrokerAccountId.SetTo(paramsDotBrokerAccountIdVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "brokerAccountId",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// OrdersGetParams is parameters of GET /orders operation.
type OrdersGetParams struct {
	// Номер счета (по умолчанию - Тинькофф).
	BrokerAccountId OptString `json:",omitempty,omitzero"`
}

func unpackOrdersGetParams(packed middleware.Parameters) (params OrdersGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "brokerAccountId",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.BrokerAccountId = v.(OptString)
		}
	}
	return params
}

func decodeOrdersGetParams(args [0]string, argsEscaped bool, r *http.Request) (params OrdersGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: brokerAccountId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "brokerAccountId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBrokerAccountIdVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotBrokerAccountIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.BrokerAccountId.SetTo(paramsDotBrokerAccountIdVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "brokerAccountId",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// OrdersLimitOrderPostParams is parameters of POST /orders/limit-order operation.
type OrdersLimitOrderPostParams struct {
	// FIGI инструмента.
	Figi string
	// Номер счета (по умолчанию - Тинькофф).
	BrokerAccountId OptString `json:",omitempty,omitzero"`
}

func unpackOrdersLimitOrderPostParams(packed middleware.Parameters) (params OrdersLimitOrderPostParams) {
	{
		key := middleware.ParameterKey{
			Name: "figi",
			In:   "query",
		}
		params.Figi = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "brokerAccountId",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.BrokerAccountId = v.(OptString)
		}
	}
	return params
}

func decodeOrdersLimitOrderPostParams(args [0]string, argsEscaped bool, r *http.Request) (params OrdersLimitOrderPostParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: figi.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "figi",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Figi = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "figi",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: brokerAccountId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "brokerAccountId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBrokerAccountIdVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotBrokerAccountIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.BrokerAccountId.SetTo(paramsDotBrokerAccountIdVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "brokerAccountId",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// OrdersMarketOrderPostParams is parameters of POST /orders/market-order operation.
type OrdersMarketOrderPostParams struct {
	// FIGI инструмента.
	Figi string
	// Уникальный идентификатор счета (по умолчанию -
	// Тинькофф).
	BrokerAccountId OptString `json:",omitempty,omitzero"`
}

func unpackOrdersMarketOrderPostParams(packed middleware.Parameters) (params OrdersMarketOrderPostParams) {
	{
		key := middleware.ParameterKey{
			Name: "figi",
			In:   "query",
		}
		params.Figi = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "brokerAccountId",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.BrokerAccountId = v.(OptString)
		}
	}
	return params
}

func decodeOrdersMarketOrderPostParams(args [0]string, argsEscaped bool, r *http.Request) (params OrdersMarketOrderPostParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: figi.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "figi",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Figi = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "figi",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: brokerAccountId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "brokerAccountId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBrokerAccountIdVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotBrokerAccountIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.BrokerAccountId.SetTo(paramsDotBrokerAccountIdVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "brokerAccountId",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// PortfolioCurrenciesGetParams is parameters of GET /portfolio/currencies operation.
type PortfolioCurrenciesGetParams struct {
	// Номер счета (по умолчанию - Тинькофф).
	BrokerAccountId OptString `json:",omitempty,omitzero"`
}

func unpackPortfolioCurrenciesGetParams(packed middleware.Parameters) (params PortfolioCurrenciesGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "brokerAccountId",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.BrokerAccountId = v.(OptString)
		}
	}
	return params
}

func decodePortfolioCurrenciesGetParams(args [0]string, argsEscaped bool, r *http.Request) (params PortfolioCurrenciesGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: brokerAccountId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "brokerAccountId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBrokerAccountIdVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotBrokerAccountIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.BrokerAccountId.SetTo(paramsDotBrokerAccountIdVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "brokerAccountId",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// PortfolioGetParams is parameters of GET /portfolio operation.
type PortfolioGetParams struct {
	// Номер счета (по умолчанию - Тинькофф).
	BrokerAccountId OptString `json:",omitempty,omitzero"`
}

func unpackPortfolioGetParams(packed middleware.Parameters) (params PortfolioGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "brokerAccountId",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.BrokerAccountId = v.(OptString)
		}
	}
	return params
}

func decodePortfolioGetParams(args [0]string, argsEscaped bool, r *http.Request) (params PortfolioGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: brokerAccountId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "brokerAccountId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBrokerAccountIdVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotBrokerAccountIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.BrokerAccountId.SetTo(paramsDotBrokerAccountIdVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "brokerAccountId",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// SandboxClearPostParams is parameters of POST /sandbox/clear operation.
type SandboxClearPostParams struct {
	// Номер счета (по умолчанию - Тинькофф).
	BrokerAccountId OptString `json:",omitempty,omitzero"`
}

func unpackSandboxClearPostParams(packed middleware.Parameters) (params SandboxClearPostParams) {
	{
		key := middleware.ParameterKey{
			Name: "brokerAccountId",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.BrokerAccountId = v.(OptString)
		}
	}
	return params
}

func decodeSandboxClearPostParams(args [0]string, argsEscaped bool, r *http.Request) (params SandboxClearPostParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: brokerAccountId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "brokerAccountId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBrokerAccountIdVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotBrokerAccountIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.BrokerAccountId.SetTo(paramsDotBrokerAccountIdVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "brokerAccountId",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// SandboxCurrenciesBalancePostParams is parameters of POST /sandbox/currencies/balance operation.
type SandboxCurrenciesBalancePostParams struct {
	// Номер счета (по умолчанию - Тинькофф).
	BrokerAccountId OptString `json:",omitempty,omitzero"`
}

func unpackSandboxCurrenciesBalancePostParams(packed middleware.Parameters) (params SandboxCurrenciesBalancePostParams) {
	{
		key := middleware.ParameterKey{
			Name: "brokerAccountId",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.BrokerAccountId = v.(OptString)
		}
	}
	return params
}

func decodeSandboxCurrenciesBalancePostParams(args [0]string, argsEscaped bool, r *http.Request) (params SandboxCurrenciesBalancePostParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: brokerAccountId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "brokerAccountId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBrokerAccountIdVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotBrokerAccountIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.BrokerAccountId.SetTo(paramsDotBrokerAccountIdVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "brokerAccountId",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// SandboxPositionsBalancePostParams is parameters of POST /sandbox/positions/balance operation.
type SandboxPositionsBalancePostParams struct {
	// Номер счета (по умолчанию - Тинькофф).
	BrokerAccountId OptString `json:",omitempty,omitzero"`
}

func unpackSandboxPositionsBalancePostParams(packed middleware.Parameters) (params SandboxPositionsBalancePostParams) {
	{
		key := middleware.ParameterKey{
			Name: "brokerAccountId",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.BrokerAccountId = v.(OptString)
		}
	}
	return params
}

func decodeSandboxPositionsBalancePostParams(args [0]string, argsEscaped bool, r *http.Request) (params SandboxPositionsBalancePostParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: brokerAccountId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "brokerAccountId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBrokerAccountIdVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotBrokerAccountIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.BrokerAccountId.SetTo(paramsDotBrokerAccountIdVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "brokerAccountId",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// SandboxRemovePostParams is parameters of POST /sandbox/remove operation.
type SandboxRemovePostParams struct {
	// Номер счета (по умолчанию - Тинькофф).
	BrokerAccountId OptString `json:",omitempty,omitzero"`
}

func unpackSandboxRemovePostParams(packed middleware.Parameters) (params SandboxRemovePostParams) {
	{
		key := middleware.ParameterKey{
			Name: "brokerAccountId",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.BrokerAccountId = v.(OptString)
		}
	}
	return params
}

func decodeSandboxRemovePostParams(args [0]string, argsEscaped bool, r *http.Request) (params SandboxRemovePostParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: brokerAccountId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "brokerAccountId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBrokerAccountIdVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotBrokerAccountIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.BrokerAccountId.SetTo(paramsDotBrokerAccountIdVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "brokerAccountId",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

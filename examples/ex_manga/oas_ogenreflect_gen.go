// Code generated by ogen, DO NOT EDIT.

package api

import (
	"reflect"

	"github.com/ogen-go/ogen/ogenreflect"
)

// API is generated API metadata.
var API = api{
	Paths: paths{
		GetBook: ogenreflect.RuntimeOperation{
			Name: "GetBook",
			ID:   "getBook",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(GetBookParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "book_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "book_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetBookRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*Book)).Elem(),
						reflect.TypeOf(new(*GetBookForbidden)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(Book)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetPageCoverImage: ogenreflect.RuntimeOperation{
			Name: "GetPageCoverImage",
			ID:   "getPageCoverImage",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(GetPageCoverImageParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "media_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "media_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "format",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "format",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetPageCoverImageRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*GetPageCoverImageOK)).Elem(),
						reflect.TypeOf(new(*GetPageCoverImageForbidden)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"image/*": reflect.TypeOf(new(GetPageCoverImageOK)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetPageImage: ogenreflect.RuntimeOperation{
			Name: "GetPageImage",
			ID:   "getPageImage",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(GetPageImageParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "media_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "media_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "page",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "page",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "format",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "format",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetPageImageRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*GetPageImageOK)).Elem(),
						reflect.TypeOf(new(*GetPageImageForbidden)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"image/*": reflect.TypeOf(new(GetPageImageOK)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		GetPageThumbnailImage: ogenreflect.RuntimeOperation{
			Name: "GetPageThumbnailImage",
			ID:   "getPageThumbnailImage",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(GetPageThumbnailImageParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "media_id",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "media_id",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "page",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "page",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
						{
							Name: "format",
							In:   "path",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "format",
							In:       "path",
							Style:    "simple",
							Explode:  false,
							Required: true,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(GetPageThumbnailImageRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*GetPageThumbnailImageOK)).Elem(),
						reflect.TypeOf(new(*GetPageThumbnailImageForbidden)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"image/*": reflect.TypeOf(new(GetPageThumbnailImageOK)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		Search: ogenreflect.RuntimeOperation{
			Name: "Search",
			ID:   "search",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(SearchParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "query",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(string)).Elem(),
							Name:     "query",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: true,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(SearchRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*SearchOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*SearchForbidden)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(SearchOKApplicationJSON)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
		SearchByTagID: ogenreflect.RuntimeOperation{
			Name: "SearchByTagID",
			ID:   "searchByTagID",
			Types: ogenreflect.OperationTypes{
				Params: ogenreflect.ParametersType{
					StructType: reflect.TypeOf(new(SearchByTagIDParams)).Elem(),
					Map: ogenreflect.ParameterMap[ogenreflect.ParameterType]{
						{
							Name: "tag_id",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(int)).Elem(),
							Name:     "tag_id",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: true,
						},
						{
							Name: "page",
							In:   "query",
						}: ogenreflect.ParameterType{
							Type:     reflect.TypeOf(new(OptInt)).Elem(),
							Name:     "page",
							In:       "query",
							Style:    "form",
							Explode:  true,
							Required: false,
						},
					},
				},
				Responses: ogenreflect.ResponsesType{
					Type: reflect.TypeOf(new(SearchByTagIDRes)).Elem(),
					Implementations: []reflect.Type{
						reflect.TypeOf(new(*SearchByTagIDOKApplicationJSON)).Elem(),
						reflect.TypeOf(new(*SearchByTagIDForbidden)).Elem(),
					},
					PatternMap: map[string]ogenreflect.ResponseType{
						"200": ogenreflect.ResponseType{
							Headers: map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{
								"application/json": reflect.TypeOf(new(SearchByTagIDOKApplicationJSON)).Elem(),
							},
						},
						"403": ogenreflect.ResponseType{
							Headers:  map[string]ogenreflect.ParameterType{},
							Contents: ogenreflect.Contents{},
						},
					},
				},
			},
		},
	},
}

type api struct {
	Paths paths
}

type paths struct {
	GetBook               ogenreflect.RuntimeOperation
	GetPageCoverImage     ogenreflect.RuntimeOperation
	GetPageImage          ogenreflect.RuntimeOperation
	GetPageThumbnailImage ogenreflect.RuntimeOperation
	Search                ogenreflect.RuntimeOperation
	SearchByTagID         ogenreflect.RuntimeOperation
}

func getPaths() paths {
	return API.Paths
}

// FindByName finds operation by ogen name.
func (p paths) FindByName(name string) (op ogenreflect.RuntimeOperation, _ bool) {
	switch name {
	case "GetBook":
		return p.GetBook, true
	case "GetPageCoverImage":
		return p.GetPageCoverImage, true
	case "GetPageImage":
		return p.GetPageImage, true
	case "GetPageThumbnailImage":
		return p.GetPageThumbnailImage, true
	case "Search":
		return p.Search, true
	case "SearchByTagID":
		return p.SearchByTagID, true
	default:
		return op, false
	}
}

// FindByOperationID finds operation by operationId.
func (p paths) FindByOperationID(operationID string) (op ogenreflect.RuntimeOperation, _ bool) {
	switch operationID {
	case "getBook":
		return p.GetBook, true
	case "getPageCoverImage":
		return p.GetPageCoverImage, true
	case "getPageImage":
		return p.GetPageImage, true
	case "getPageThumbnailImage":
		return p.GetPageThumbnailImage, true
	case "search":
		return p.Search, true
	case "searchByTagID":
		return p.SearchByTagID, true
	default:
		return op, false
	}
}

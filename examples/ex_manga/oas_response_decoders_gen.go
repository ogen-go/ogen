// Code generated by ogen, DO NOT EDIT.

package api

import (
	"io"
	"mime"
	"net/http"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"

	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/validate"
)

func decodeGetBookResponse(resp *http.Response) (res GetBookRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			resp.Body.Close()
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			defer resp.Body.Close()
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response Book
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			resp.Body.Close()
			return res, validate.InvalidContentType(ct)
		}
	case 403:
		// Code 403.
		defer resp.Body.Close()
		return &GetBookForbidden{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeGetPageCoverImageResponse(resp *http.Response) (res GetPageCoverImageRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			resp.Body.Close()
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ht.MatchContentType("image/*", ct):
			reader := resp.Body

			response := GetPageCoverImageOK{Data: reader}
			return &response, nil
		default:
			resp.Body.Close()
			return res, validate.InvalidContentType(ct)
		}
	case 403:
		// Code 403.
		defer resp.Body.Close()
		return &GetPageCoverImageForbidden{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeGetPageImageResponse(resp *http.Response) (res GetPageImageRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			resp.Body.Close()
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ht.MatchContentType("image/*", ct):
			reader := resp.Body

			response := GetPageImageOK{Data: reader}
			return &response, nil
		default:
			resp.Body.Close()
			return res, validate.InvalidContentType(ct)
		}
	case 403:
		// Code 403.
		defer resp.Body.Close()
		return &GetPageImageForbidden{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeGetPageThumbnailImageResponse(resp *http.Response) (res GetPageThumbnailImageRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			resp.Body.Close()
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ht.MatchContentType("image/*", ct):
			reader := resp.Body

			response := GetPageThumbnailImageOK{Data: reader}
			return &response, nil
		default:
			resp.Body.Close()
			return res, validate.InvalidContentType(ct)
		}
	case 403:
		// Code 403.
		defer resp.Body.Close()
		return &GetPageThumbnailImageForbidden{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeSearchResponse(resp *http.Response) (res SearchRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			resp.Body.Close()
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			defer resp.Body.Close()
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response SearchOKApplicationJSON
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			resp.Body.Close()
			return res, validate.InvalidContentType(ct)
		}
	case 403:
		// Code 403.
		defer resp.Body.Close()
		return &SearchForbidden{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeSearchByTagIDResponse(resp *http.Response) (res SearchByTagIDRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			resp.Body.Close()
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			defer resp.Body.Close()
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response SearchByTagIDOKApplicationJSON
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			resp.Body.Close()
			return res, validate.InvalidContentType(ct)
		}
	case 403:
		// Code 403.
		defer resp.Body.Close()
		return &SearchByTagIDForbidden{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/netip"
	"net/url"
	"time"

	"github.com/go-faster/jx"
	"github.com/google/uuid"
)

// SetFake set fake values.
func (s *Error) SetFake() {
	{
		{
			s.Code.SetFake()
		}
	}
	{
		{
			s.Status.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *NilBool) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilDate) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilDateTime) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilDuration) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilFloat32) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilFloat64) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilIP) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilIPv4) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilIPv6) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilInt) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilInt16) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilInt32) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilInt64) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilInt8) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilString) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilStringFloat32) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilStringFloat64) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilStringInt) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilStringInt16) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilStringInt32) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilStringInt64) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilStringInt8) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilStringUint) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilStringUint16) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilStringUint32) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilStringUint64) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilStringUint8) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilStringUnixMicro) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilStringUnixMilli) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilStringUnixNano) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilStringUnixSeconds) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilTime) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilURI) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilUUID) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilUint) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilUint16) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilUint32) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilUint64) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilUint8) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilUnixMicro) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilUnixMilli) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilUnixNano) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *NilUnixSeconds) SetFake() {
	s.Null = true
}

// SetFake set fake values.
func (s *OptBool) SetFake() {
	var elem bool
	{
		elem = true
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptDate) SetFake() {
	var elem time.Time
	{
		elem = time.Now()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptDateTime) SetFake() {
	var elem time.Time
	{
		elem = time.Now()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptDuration) SetFake() {
	var elem time.Duration
	{
		elem = time.Duration(5 * time.Second)
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptFloat32) SetFake() {
	var elem float32
	{
		elem = float32(0)
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptFloat64) SetFake() {
	var elem float64
	{
		elem = float64(0)
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptIP) SetFake() {
	var elem netip.Addr
	{
		elem = netip.MustParseAddr("127.0.0.1")
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptIPv4) SetFake() {
	var elem netip.Addr
	{
		elem = netip.MustParseAddr("127.0.0.1")
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptIPv6) SetFake() {
	var elem netip.Addr
	{
		elem = netip.MustParseAddr("::1")
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptInt) SetFake() {
	var elem int
	{
		elem = int(0)
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptInt16) SetFake() {
	var elem int16
	{
		elem = int16(0)
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptInt32) SetFake() {
	var elem int32
	{
		elem = int32(0)
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptInt64) SetFake() {
	var elem int64
	{
		elem = int64(0)
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptInt8) SetFake() {
	var elem int8
	{
		elem = int8(0)
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptNilBool) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilByte) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilDate) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilDateTime) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilDuration) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilFloat32) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilFloat64) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilIP) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilIPv4) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilIPv6) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilInt) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilInt16) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilInt32) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilInt64) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilInt8) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilString) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilStringFloat32) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilStringFloat64) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilStringInt) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilStringInt16) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilStringInt32) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilStringInt64) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilStringInt8) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilStringUint) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilStringUint16) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilStringUint32) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilStringUint64) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilStringUint8) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilStringUnixMicro) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilStringUnixMilli) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilStringUnixNano) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilStringUnixSeconds) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilTime) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilURI) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilUUID) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilUint) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilUint16) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilUint32) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilUint64) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilUint8) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilUnixMicro) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilUnixMilli) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilUnixNano) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNilUnixSeconds) SetFake() {
	s.Null = true
	s.Set = true
}

// SetFake set fake values.
func (s *OptNull) SetFake() {
	var elem struct{}
	{
		elem = struct{}{}
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptString) SetFake() {
	var elem string
	{
		elem = "string"
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptStringFloat32) SetFake() {
	var elem float32
	{
		elem = float32(0)
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptStringFloat64) SetFake() {
	var elem float64
	{
		elem = float64(0)
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptStringInt) SetFake() {
	var elem int
	{
		elem = int(0)
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptStringInt16) SetFake() {
	var elem int16
	{
		elem = int16(0)
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptStringInt32) SetFake() {
	var elem int32
	{
		elem = int32(0)
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptStringInt64) SetFake() {
	var elem int64
	{
		elem = int64(0)
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptStringInt8) SetFake() {
	var elem int8
	{
		elem = int8(0)
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptStringUint) SetFake() {
	var elem uint
	{
		elem = uint(0)
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptStringUint16) SetFake() {
	var elem uint16
	{
		elem = uint16(0)
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptStringUint32) SetFake() {
	var elem uint32
	{
		elem = uint32(0)
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptStringUint64) SetFake() {
	var elem uint64
	{
		elem = uint64(0)
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptStringUint8) SetFake() {
	var elem uint8
	{
		elem = uint8(0)
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptStringUnixMicro) SetFake() {
	var elem time.Time
	{
		elem = time.Now()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptStringUnixMilli) SetFake() {
	var elem time.Time
	{
		elem = time.Now()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptStringUnixNano) SetFake() {
	var elem time.Time
	{
		elem = time.Now()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptStringUnixSeconds) SetFake() {
	var elem time.Time
	{
		elem = time.Now()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptTestRequestFormatTestReq) SetFake() {
	var elem TestRequestFormatTestReq
	{
		elem.SetFake()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptTime) SetFake() {
	var elem time.Time
	{
		elem = time.Now()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptURI) SetFake() {
	var elem url.URL
	{
		elem = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptUUID) SetFake() {
	var elem uuid.UUID
	{
		elem = uuid.New()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptUint) SetFake() {
	var elem uint
	{
		elem = uint(0)
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptUint16) SetFake() {
	var elem uint16
	{
		elem = uint16(0)
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptUint32) SetFake() {
	var elem uint32
	{
		elem = uint32(0)
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptUint64) SetFake() {
	var elem uint64
	{
		elem = uint64(0)
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptUint8) SetFake() {
	var elem uint8
	{
		elem = uint8(0)
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptUnixMicro) SetFake() {
	var elem time.Time
	{
		elem = time.Now()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptUnixMilli) SetFake() {
	var elem time.Time
	{
		elem = time.Now()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptUnixNano) SetFake() {
	var elem time.Time
	{
		elem = time.Now()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *OptUnixSeconds) SetFake() {
	var elem time.Time
	{
		elem = time.Now()
	}
	s.SetTo(elem)
}

// SetFake set fake values.
func (s *TestRequestEmptyStructReq) SetFake() {
}

// SetFake set fake values.
func (s *TestRequestFormatTestReq) SetFake() {
	{
		{
			s.RequiredAny = []byte("null")
		}
	}
	{
		{
			s.RequiredArrayAny = nil
			for i := 0; i < 0; i++ {
				var elem jx.Raw
				{
					elem = []byte("null")
				}
				s.RequiredArrayAny = append(s.RequiredArrayAny, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayBoolean = nil
			for i := 0; i < 0; i++ {
				var elem bool
				{
					elem = true
				}
				s.RequiredArrayBoolean = append(s.RequiredArrayBoolean, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayInteger = nil
			for i := 0; i < 0; i++ {
				var elem int
				{
					elem = int(0)
				}
				s.RequiredArrayInteger = append(s.RequiredArrayInteger, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayIntegerInt16 = nil
			for i := 0; i < 0; i++ {
				var elem int16
				{
					elem = int16(0)
				}
				s.RequiredArrayIntegerInt16 = append(s.RequiredArrayIntegerInt16, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayIntegerInt32 = nil
			for i := 0; i < 0; i++ {
				var elem int32
				{
					elem = int32(0)
				}
				s.RequiredArrayIntegerInt32 = append(s.RequiredArrayIntegerInt32, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayIntegerInt64 = nil
			for i := 0; i < 0; i++ {
				var elem int64
				{
					elem = int64(0)
				}
				s.RequiredArrayIntegerInt64 = append(s.RequiredArrayIntegerInt64, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayIntegerInt8 = nil
			for i := 0; i < 0; i++ {
				var elem int8
				{
					elem = int8(0)
				}
				s.RequiredArrayIntegerInt8 = append(s.RequiredArrayIntegerInt8, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayIntegerUint = nil
			for i := 0; i < 0; i++ {
				var elem uint
				{
					elem = uint(0)
				}
				s.RequiredArrayIntegerUint = append(s.RequiredArrayIntegerUint, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayIntegerUint16 = nil
			for i := 0; i < 0; i++ {
				var elem uint16
				{
					elem = uint16(0)
				}
				s.RequiredArrayIntegerUint16 = append(s.RequiredArrayIntegerUint16, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayIntegerUint32 = nil
			for i := 0; i < 0; i++ {
				var elem uint32
				{
					elem = uint32(0)
				}
				s.RequiredArrayIntegerUint32 = append(s.RequiredArrayIntegerUint32, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayIntegerUint64 = nil
			for i := 0; i < 0; i++ {
				var elem uint64
				{
					elem = uint64(0)
				}
				s.RequiredArrayIntegerUint64 = append(s.RequiredArrayIntegerUint64, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayIntegerUint8 = nil
			for i := 0; i < 0; i++ {
				var elem uint8
				{
					elem = uint8(0)
				}
				s.RequiredArrayIntegerUint8 = append(s.RequiredArrayIntegerUint8, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayIntegerUnix = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.RequiredArrayIntegerUnix = append(s.RequiredArrayIntegerUnix, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayIntegerUnixMinusMicro = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.RequiredArrayIntegerUnixMinusMicro = append(s.RequiredArrayIntegerUnixMinusMicro, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayIntegerUnixMinusMilli = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.RequiredArrayIntegerUnixMinusMilli = append(s.RequiredArrayIntegerUnixMinusMilli, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayIntegerUnixMinusNano = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.RequiredArrayIntegerUnixMinusNano = append(s.RequiredArrayIntegerUnixMinusNano, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayIntegerUnixMinusSeconds = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.RequiredArrayIntegerUnixMinusSeconds = append(s.RequiredArrayIntegerUnixMinusSeconds, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayNull = nil
			for i := 0; i < 0; i++ {
				var elem struct{}
				{
					elem = struct{}{}
				}
				s.RequiredArrayNull = append(s.RequiredArrayNull, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayNumber = nil
			for i := 0; i < 0; i++ {
				var elem float64
				{
					elem = float64(0)
				}
				s.RequiredArrayNumber = append(s.RequiredArrayNumber, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayNumberDouble = nil
			for i := 0; i < 0; i++ {
				var elem float64
				{
					elem = float64(0)
				}
				s.RequiredArrayNumberDouble = append(s.RequiredArrayNumberDouble, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayNumberFloat = nil
			for i := 0; i < 0; i++ {
				var elem float32
				{
					elem = float32(0)
				}
				s.RequiredArrayNumberFloat = append(s.RequiredArrayNumberFloat, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayNumberInt32 = nil
			for i := 0; i < 0; i++ {
				var elem int32
				{
					elem = int32(0)
				}
				s.RequiredArrayNumberInt32 = append(s.RequiredArrayNumberInt32, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayNumberInt64 = nil
			for i := 0; i < 0; i++ {
				var elem int64
				{
					elem = int64(0)
				}
				s.RequiredArrayNumberInt64 = append(s.RequiredArrayNumberInt64, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayString = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.RequiredArrayString = append(s.RequiredArrayString, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringBase64 = nil
			for i := 0; i < 0; i++ {
				var elem []byte
				{
					elem = []byte("[]byte")
				}
				s.RequiredArrayStringBase64 = append(s.RequiredArrayStringBase64, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringBinary = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.RequiredArrayStringBinary = append(s.RequiredArrayStringBinary, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringByte = nil
			for i := 0; i < 0; i++ {
				var elem []byte
				{
					elem = []byte("[]byte")
				}
				s.RequiredArrayStringByte = append(s.RequiredArrayStringByte, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringDate = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.RequiredArrayStringDate = append(s.RequiredArrayStringDate, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringDateMinusTime = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.RequiredArrayStringDateMinusTime = append(s.RequiredArrayStringDateMinusTime, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringDuration = nil
			for i := 0; i < 0; i++ {
				var elem time.Duration
				{
					elem = time.Duration(5 * time.Second)
				}
				s.RequiredArrayStringDuration = append(s.RequiredArrayStringDuration, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringEmail = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.RequiredArrayStringEmail = append(s.RequiredArrayStringEmail, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringFloat32 = nil
			for i := 0; i < 0; i++ {
				var elem float32
				{
					elem = float32(0)
				}
				s.RequiredArrayStringFloat32 = append(s.RequiredArrayStringFloat32, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringFloat64 = nil
			for i := 0; i < 0; i++ {
				var elem float64
				{
					elem = float64(0)
				}
				s.RequiredArrayStringFloat64 = append(s.RequiredArrayStringFloat64, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringHostname = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.RequiredArrayStringHostname = append(s.RequiredArrayStringHostname, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringInt = nil
			for i := 0; i < 0; i++ {
				var elem int
				{
					elem = int(0)
				}
				s.RequiredArrayStringInt = append(s.RequiredArrayStringInt, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringInt16 = nil
			for i := 0; i < 0; i++ {
				var elem int16
				{
					elem = int16(0)
				}
				s.RequiredArrayStringInt16 = append(s.RequiredArrayStringInt16, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringInt32 = nil
			for i := 0; i < 0; i++ {
				var elem int32
				{
					elem = int32(0)
				}
				s.RequiredArrayStringInt32 = append(s.RequiredArrayStringInt32, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringInt64 = nil
			for i := 0; i < 0; i++ {
				var elem int64
				{
					elem = int64(0)
				}
				s.RequiredArrayStringInt64 = append(s.RequiredArrayStringInt64, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringInt8 = nil
			for i := 0; i < 0; i++ {
				var elem int8
				{
					elem = int8(0)
				}
				s.RequiredArrayStringInt8 = append(s.RequiredArrayStringInt8, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringIP = nil
			for i := 0; i < 0; i++ {
				var elem netip.Addr
				{
					elem = netip.MustParseAddr("127.0.0.1")
				}
				s.RequiredArrayStringIP = append(s.RequiredArrayStringIP, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringIpv4 = nil
			for i := 0; i < 0; i++ {
				var elem netip.Addr
				{
					elem = netip.MustParseAddr("127.0.0.1")
				}
				s.RequiredArrayStringIpv4 = append(s.RequiredArrayStringIpv4, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringIpv6 = nil
			for i := 0; i < 0; i++ {
				var elem netip.Addr
				{
					elem = netip.MustParseAddr("::1")
				}
				s.RequiredArrayStringIpv6 = append(s.RequiredArrayStringIpv6, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringPassword = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.RequiredArrayStringPassword = append(s.RequiredArrayStringPassword, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringTime = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.RequiredArrayStringTime = append(s.RequiredArrayStringTime, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringUint = nil
			for i := 0; i < 0; i++ {
				var elem uint
				{
					elem = uint(0)
				}
				s.RequiredArrayStringUint = append(s.RequiredArrayStringUint, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringUint16 = nil
			for i := 0; i < 0; i++ {
				var elem uint16
				{
					elem = uint16(0)
				}
				s.RequiredArrayStringUint16 = append(s.RequiredArrayStringUint16, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringUint32 = nil
			for i := 0; i < 0; i++ {
				var elem uint32
				{
					elem = uint32(0)
				}
				s.RequiredArrayStringUint32 = append(s.RequiredArrayStringUint32, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringUint64 = nil
			for i := 0; i < 0; i++ {
				var elem uint64
				{
					elem = uint64(0)
				}
				s.RequiredArrayStringUint64 = append(s.RequiredArrayStringUint64, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringUint8 = nil
			for i := 0; i < 0; i++ {
				var elem uint8
				{
					elem = uint8(0)
				}
				s.RequiredArrayStringUint8 = append(s.RequiredArrayStringUint8, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringUnix = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.RequiredArrayStringUnix = append(s.RequiredArrayStringUnix, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringUnixMinusMicro = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.RequiredArrayStringUnixMinusMicro = append(s.RequiredArrayStringUnixMinusMicro, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringUnixMinusMilli = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.RequiredArrayStringUnixMinusMilli = append(s.RequiredArrayStringUnixMinusMilli, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringUnixMinusNano = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.RequiredArrayStringUnixMinusNano = append(s.RequiredArrayStringUnixMinusNano, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringUnixMinusSeconds = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.RequiredArrayStringUnixMinusSeconds = append(s.RequiredArrayStringUnixMinusSeconds, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringURI = nil
			for i := 0; i < 0; i++ {
				var elem url.URL
				{
					elem = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
				}
				s.RequiredArrayStringURI = append(s.RequiredArrayStringURI, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringUUID = nil
			for i := 0; i < 0; i++ {
				var elem uuid.UUID
				{
					elem = uuid.New()
				}
				s.RequiredArrayStringUUID = append(s.RequiredArrayStringUUID, elem)
			}
		}
	}
	{
		{
			s.RequiredBoolean = true
		}
	}
	{
		{
			s.RequiredDoubleArrayAny = nil
			for i := 0; i < 0; i++ {
				var elem []jx.Raw
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem jx.Raw
						{
							elemElem = []byte("null")
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayAny = append(s.RequiredDoubleArrayAny, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayBoolean = nil
			for i := 0; i < 0; i++ {
				var elem []bool
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem bool
						{
							elemElem = true
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayBoolean = append(s.RequiredDoubleArrayBoolean, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayInteger = nil
			for i := 0; i < 0; i++ {
				var elem []int
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int
						{
							elemElem = int(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayInteger = append(s.RequiredDoubleArrayInteger, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayIntegerInt16 = nil
			for i := 0; i < 0; i++ {
				var elem []int16
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int16
						{
							elemElem = int16(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayIntegerInt16 = append(s.RequiredDoubleArrayIntegerInt16, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayIntegerInt32 = nil
			for i := 0; i < 0; i++ {
				var elem []int32
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int32
						{
							elemElem = int32(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayIntegerInt32 = append(s.RequiredDoubleArrayIntegerInt32, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayIntegerInt64 = nil
			for i := 0; i < 0; i++ {
				var elem []int64
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int64
						{
							elemElem = int64(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayIntegerInt64 = append(s.RequiredDoubleArrayIntegerInt64, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayIntegerInt8 = nil
			for i := 0; i < 0; i++ {
				var elem []int8
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int8
						{
							elemElem = int8(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayIntegerInt8 = append(s.RequiredDoubleArrayIntegerInt8, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayIntegerUint = nil
			for i := 0; i < 0; i++ {
				var elem []uint
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint
						{
							elemElem = uint(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayIntegerUint = append(s.RequiredDoubleArrayIntegerUint, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayIntegerUint16 = nil
			for i := 0; i < 0; i++ {
				var elem []uint16
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint16
						{
							elemElem = uint16(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayIntegerUint16 = append(s.RequiredDoubleArrayIntegerUint16, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayIntegerUint32 = nil
			for i := 0; i < 0; i++ {
				var elem []uint32
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint32
						{
							elemElem = uint32(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayIntegerUint32 = append(s.RequiredDoubleArrayIntegerUint32, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayIntegerUint64 = nil
			for i := 0; i < 0; i++ {
				var elem []uint64
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint64
						{
							elemElem = uint64(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayIntegerUint64 = append(s.RequiredDoubleArrayIntegerUint64, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayIntegerUint8 = nil
			for i := 0; i < 0; i++ {
				var elem []uint8
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint8
						{
							elemElem = uint8(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayIntegerUint8 = append(s.RequiredDoubleArrayIntegerUint8, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayIntegerUnix = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayIntegerUnix = append(s.RequiredDoubleArrayIntegerUnix, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayIntegerUnixMinusMicro = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayIntegerUnixMinusMicro = append(s.RequiredDoubleArrayIntegerUnixMinusMicro, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayIntegerUnixMinusMilli = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayIntegerUnixMinusMilli = append(s.RequiredDoubleArrayIntegerUnixMinusMilli, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayIntegerUnixMinusNano = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayIntegerUnixMinusNano = append(s.RequiredDoubleArrayIntegerUnixMinusNano, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayIntegerUnixMinusSeconds = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayIntegerUnixMinusSeconds = append(s.RequiredDoubleArrayIntegerUnixMinusSeconds, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayNull = nil
			for i := 0; i < 0; i++ {
				var elem []struct{}
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem struct{}
						{
							elemElem = struct{}{}
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayNull = append(s.RequiredDoubleArrayNull, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayNumber = nil
			for i := 0; i < 0; i++ {
				var elem []float64
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem float64
						{
							elemElem = float64(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayNumber = append(s.RequiredDoubleArrayNumber, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayNumberDouble = nil
			for i := 0; i < 0; i++ {
				var elem []float64
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem float64
						{
							elemElem = float64(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayNumberDouble = append(s.RequiredDoubleArrayNumberDouble, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayNumberFloat = nil
			for i := 0; i < 0; i++ {
				var elem []float32
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem float32
						{
							elemElem = float32(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayNumberFloat = append(s.RequiredDoubleArrayNumberFloat, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayNumberInt32 = nil
			for i := 0; i < 0; i++ {
				var elem []int32
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int32
						{
							elemElem = int32(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayNumberInt32 = append(s.RequiredDoubleArrayNumberInt32, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayNumberInt64 = nil
			for i := 0; i < 0; i++ {
				var elem []int64
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int64
						{
							elemElem = int64(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayNumberInt64 = append(s.RequiredDoubleArrayNumberInt64, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayString = nil
			for i := 0; i < 0; i++ {
				var elem []string
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem string
						{
							elemElem = "string"
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayString = append(s.RequiredDoubleArrayString, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringBase64 = nil
			for i := 0; i < 0; i++ {
				var elem [][]byte
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem []byte
						{
							elemElem = []byte("[]byte")
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringBase64 = append(s.RequiredDoubleArrayStringBase64, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringBinary = nil
			for i := 0; i < 0; i++ {
				var elem []string
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem string
						{
							elemElem = "string"
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringBinary = append(s.RequiredDoubleArrayStringBinary, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringByte = nil
			for i := 0; i < 0; i++ {
				var elem [][]byte
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem []byte
						{
							elemElem = []byte("[]byte")
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringByte = append(s.RequiredDoubleArrayStringByte, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringDate = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringDate = append(s.RequiredDoubleArrayStringDate, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringDateMinusTime = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringDateMinusTime = append(s.RequiredDoubleArrayStringDateMinusTime, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringDuration = nil
			for i := 0; i < 0; i++ {
				var elem []time.Duration
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Duration
						{
							elemElem = time.Duration(5 * time.Second)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringDuration = append(s.RequiredDoubleArrayStringDuration, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringEmail = nil
			for i := 0; i < 0; i++ {
				var elem []string
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem string
						{
							elemElem = "string"
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringEmail = append(s.RequiredDoubleArrayStringEmail, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringFloat32 = nil
			for i := 0; i < 0; i++ {
				var elem []float32
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem float32
						{
							elemElem = float32(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringFloat32 = append(s.RequiredDoubleArrayStringFloat32, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringFloat64 = nil
			for i := 0; i < 0; i++ {
				var elem []float64
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem float64
						{
							elemElem = float64(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringFloat64 = append(s.RequiredDoubleArrayStringFloat64, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringHostname = nil
			for i := 0; i < 0; i++ {
				var elem []string
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem string
						{
							elemElem = "string"
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringHostname = append(s.RequiredDoubleArrayStringHostname, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringInt = nil
			for i := 0; i < 0; i++ {
				var elem []int
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int
						{
							elemElem = int(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringInt = append(s.RequiredDoubleArrayStringInt, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringInt16 = nil
			for i := 0; i < 0; i++ {
				var elem []int16
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int16
						{
							elemElem = int16(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringInt16 = append(s.RequiredDoubleArrayStringInt16, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringInt32 = nil
			for i := 0; i < 0; i++ {
				var elem []int32
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int32
						{
							elemElem = int32(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringInt32 = append(s.RequiredDoubleArrayStringInt32, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringInt64 = nil
			for i := 0; i < 0; i++ {
				var elem []int64
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int64
						{
							elemElem = int64(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringInt64 = append(s.RequiredDoubleArrayStringInt64, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringInt8 = nil
			for i := 0; i < 0; i++ {
				var elem []int8
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int8
						{
							elemElem = int8(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringInt8 = append(s.RequiredDoubleArrayStringInt8, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringIP = nil
			for i := 0; i < 0; i++ {
				var elem []netip.Addr
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem netip.Addr
						{
							elemElem = netip.MustParseAddr("127.0.0.1")
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringIP = append(s.RequiredDoubleArrayStringIP, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringIpv4 = nil
			for i := 0; i < 0; i++ {
				var elem []netip.Addr
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem netip.Addr
						{
							elemElem = netip.MustParseAddr("127.0.0.1")
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringIpv4 = append(s.RequiredDoubleArrayStringIpv4, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringIpv6 = nil
			for i := 0; i < 0; i++ {
				var elem []netip.Addr
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem netip.Addr
						{
							elemElem = netip.MustParseAddr("::1")
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringIpv6 = append(s.RequiredDoubleArrayStringIpv6, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringPassword = nil
			for i := 0; i < 0; i++ {
				var elem []string
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem string
						{
							elemElem = "string"
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringPassword = append(s.RequiredDoubleArrayStringPassword, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringTime = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringTime = append(s.RequiredDoubleArrayStringTime, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringUint = nil
			for i := 0; i < 0; i++ {
				var elem []uint
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint
						{
							elemElem = uint(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringUint = append(s.RequiredDoubleArrayStringUint, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringUint16 = nil
			for i := 0; i < 0; i++ {
				var elem []uint16
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint16
						{
							elemElem = uint16(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringUint16 = append(s.RequiredDoubleArrayStringUint16, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringUint32 = nil
			for i := 0; i < 0; i++ {
				var elem []uint32
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint32
						{
							elemElem = uint32(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringUint32 = append(s.RequiredDoubleArrayStringUint32, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringUint64 = nil
			for i := 0; i < 0; i++ {
				var elem []uint64
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint64
						{
							elemElem = uint64(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringUint64 = append(s.RequiredDoubleArrayStringUint64, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringUint8 = nil
			for i := 0; i < 0; i++ {
				var elem []uint8
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint8
						{
							elemElem = uint8(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringUint8 = append(s.RequiredDoubleArrayStringUint8, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringUnix = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringUnix = append(s.RequiredDoubleArrayStringUnix, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringUnixMinusMicro = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringUnixMinusMicro = append(s.RequiredDoubleArrayStringUnixMinusMicro, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringUnixMinusMilli = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringUnixMinusMilli = append(s.RequiredDoubleArrayStringUnixMinusMilli, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringUnixMinusNano = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringUnixMinusNano = append(s.RequiredDoubleArrayStringUnixMinusNano, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringUnixMinusSeconds = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringUnixMinusSeconds = append(s.RequiredDoubleArrayStringUnixMinusSeconds, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringURI = nil
			for i := 0; i < 0; i++ {
				var elem []url.URL
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem url.URL
						{
							elemElem = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringURI = append(s.RequiredDoubleArrayStringURI, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringUUID = nil
			for i := 0; i < 0; i++ {
				var elem []uuid.UUID
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uuid.UUID
						{
							elemElem = uuid.New()
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringUUID = append(s.RequiredDoubleArrayStringUUID, elem)
			}
		}
	}
	{
		{
			s.RequiredInteger = int(0)
		}
	}
	{
		{
			s.RequiredIntegerInt16 = int16(0)
		}
	}
	{
		{
			s.RequiredIntegerInt32 = int32(0)
		}
	}
	{
		{
			s.RequiredIntegerInt64 = int64(0)
		}
	}
	{
		{
			s.RequiredIntegerInt8 = int8(0)
		}
	}
	{
		{
			s.RequiredIntegerUint = uint(0)
		}
	}
	{
		{
			s.RequiredIntegerUint16 = uint16(0)
		}
	}
	{
		{
			s.RequiredIntegerUint32 = uint32(0)
		}
	}
	{
		{
			s.RequiredIntegerUint64 = uint64(0)
		}
	}
	{
		{
			s.RequiredIntegerUint8 = uint8(0)
		}
	}
	{
		{
			s.RequiredIntegerUnix = time.Now()
		}
	}
	{
		{
			s.RequiredIntegerUnixMinusMicro = time.Now()
		}
	}
	{
		{
			s.RequiredIntegerUnixMinusMilli = time.Now()
		}
	}
	{
		{
			s.RequiredIntegerUnixMinusNano = time.Now()
		}
	}
	{
		{
			s.RequiredIntegerUnixMinusSeconds = time.Now()
		}
	}
	{
		{
			s.RequiredNull = struct{}{}
		}
	}
	{
		{
			s.RequiredNumber = float64(0)
		}
	}
	{
		{
			s.RequiredNumberDouble = float64(0)
		}
	}
	{
		{
			s.RequiredNumberFloat = float32(0)
		}
	}
	{
		{
			s.RequiredNumberInt32 = int32(0)
		}
	}
	{
		{
			s.RequiredNumberInt64 = int64(0)
		}
	}
	{
		{
			s.RequiredString = "string"
		}
	}
	{
		{
			s.RequiredStringBase64 = []byte("[]byte")
		}
	}
	{
		{
			s.RequiredStringBinary = "string"
		}
	}
	{
		{
			s.RequiredStringByte = []byte("[]byte")
		}
	}
	{
		{
			s.RequiredStringDate = time.Now()
		}
	}
	{
		{
			s.RequiredStringDateMinusTime = time.Now()
		}
	}
	{
		{
			s.RequiredStringDuration = time.Duration(5 * time.Second)
		}
	}
	{
		{
			s.RequiredStringEmail = "string"
		}
	}
	{
		{
			s.RequiredStringFloat32 = float32(0)
		}
	}
	{
		{
			s.RequiredStringFloat64 = float64(0)
		}
	}
	{
		{
			s.RequiredStringHostname = "string"
		}
	}
	{
		{
			s.RequiredStringInt = int(0)
		}
	}
	{
		{
			s.RequiredStringInt16 = int16(0)
		}
	}
	{
		{
			s.RequiredStringInt32 = int32(0)
		}
	}
	{
		{
			s.RequiredStringInt64 = int64(0)
		}
	}
	{
		{
			s.RequiredStringInt8 = int8(0)
		}
	}
	{
		{
			s.RequiredStringIP = netip.MustParseAddr("127.0.0.1")
		}
	}
	{
		{
			s.RequiredStringIpv4 = netip.MustParseAddr("127.0.0.1")
		}
	}
	{
		{
			s.RequiredStringIpv6 = netip.MustParseAddr("::1")
		}
	}
	{
		{
			s.RequiredStringPassword = "string"
		}
	}
	{
		{
			s.RequiredStringTime = time.Now()
		}
	}
	{
		{
			s.RequiredStringUint = uint(0)
		}
	}
	{
		{
			s.RequiredStringUint16 = uint16(0)
		}
	}
	{
		{
			s.RequiredStringUint32 = uint32(0)
		}
	}
	{
		{
			s.RequiredStringUint64 = uint64(0)
		}
	}
	{
		{
			s.RequiredStringUint8 = uint8(0)
		}
	}
	{
		{
			s.RequiredStringUnix = time.Now()
		}
	}
	{
		{
			s.RequiredStringUnixMinusMicro = time.Now()
		}
	}
	{
		{
			s.RequiredStringUnixMinusMilli = time.Now()
		}
	}
	{
		{
			s.RequiredStringUnixMinusNano = time.Now()
		}
	}
	{
		{
			s.RequiredStringUnixMinusSeconds = time.Now()
		}
	}
	{
		{
			s.RequiredStringURI = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.RequiredStringUUID = uuid.New()
		}
	}
	{
		{
			s.OptionalAny = []byte("null")
		}
	}
	{
		{
			s.OptionalArrayAny = nil
			for i := 0; i < 0; i++ {
				var elem jx.Raw
				{
					elem = []byte("null")
				}
				s.OptionalArrayAny = append(s.OptionalArrayAny, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayBoolean = nil
			for i := 0; i < 0; i++ {
				var elem bool
				{
					elem = true
				}
				s.OptionalArrayBoolean = append(s.OptionalArrayBoolean, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayInteger = nil
			for i := 0; i < 0; i++ {
				var elem int
				{
					elem = int(0)
				}
				s.OptionalArrayInteger = append(s.OptionalArrayInteger, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayIntegerInt16 = nil
			for i := 0; i < 0; i++ {
				var elem int16
				{
					elem = int16(0)
				}
				s.OptionalArrayIntegerInt16 = append(s.OptionalArrayIntegerInt16, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayIntegerInt32 = nil
			for i := 0; i < 0; i++ {
				var elem int32
				{
					elem = int32(0)
				}
				s.OptionalArrayIntegerInt32 = append(s.OptionalArrayIntegerInt32, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayIntegerInt64 = nil
			for i := 0; i < 0; i++ {
				var elem int64
				{
					elem = int64(0)
				}
				s.OptionalArrayIntegerInt64 = append(s.OptionalArrayIntegerInt64, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayIntegerInt8 = nil
			for i := 0; i < 0; i++ {
				var elem int8
				{
					elem = int8(0)
				}
				s.OptionalArrayIntegerInt8 = append(s.OptionalArrayIntegerInt8, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayIntegerUint = nil
			for i := 0; i < 0; i++ {
				var elem uint
				{
					elem = uint(0)
				}
				s.OptionalArrayIntegerUint = append(s.OptionalArrayIntegerUint, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayIntegerUint16 = nil
			for i := 0; i < 0; i++ {
				var elem uint16
				{
					elem = uint16(0)
				}
				s.OptionalArrayIntegerUint16 = append(s.OptionalArrayIntegerUint16, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayIntegerUint32 = nil
			for i := 0; i < 0; i++ {
				var elem uint32
				{
					elem = uint32(0)
				}
				s.OptionalArrayIntegerUint32 = append(s.OptionalArrayIntegerUint32, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayIntegerUint64 = nil
			for i := 0; i < 0; i++ {
				var elem uint64
				{
					elem = uint64(0)
				}
				s.OptionalArrayIntegerUint64 = append(s.OptionalArrayIntegerUint64, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayIntegerUint8 = nil
			for i := 0; i < 0; i++ {
				var elem uint8
				{
					elem = uint8(0)
				}
				s.OptionalArrayIntegerUint8 = append(s.OptionalArrayIntegerUint8, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayIntegerUnix = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.OptionalArrayIntegerUnix = append(s.OptionalArrayIntegerUnix, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayIntegerUnixMinusMicro = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.OptionalArrayIntegerUnixMinusMicro = append(s.OptionalArrayIntegerUnixMinusMicro, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayIntegerUnixMinusMilli = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.OptionalArrayIntegerUnixMinusMilli = append(s.OptionalArrayIntegerUnixMinusMilli, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayIntegerUnixMinusNano = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.OptionalArrayIntegerUnixMinusNano = append(s.OptionalArrayIntegerUnixMinusNano, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayIntegerUnixMinusSeconds = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.OptionalArrayIntegerUnixMinusSeconds = append(s.OptionalArrayIntegerUnixMinusSeconds, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayNull = nil
			for i := 0; i < 0; i++ {
				var elem struct{}
				{
					elem = struct{}{}
				}
				s.OptionalArrayNull = append(s.OptionalArrayNull, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayNumber = nil
			for i := 0; i < 0; i++ {
				var elem float64
				{
					elem = float64(0)
				}
				s.OptionalArrayNumber = append(s.OptionalArrayNumber, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayNumberDouble = nil
			for i := 0; i < 0; i++ {
				var elem float64
				{
					elem = float64(0)
				}
				s.OptionalArrayNumberDouble = append(s.OptionalArrayNumberDouble, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayNumberFloat = nil
			for i := 0; i < 0; i++ {
				var elem float32
				{
					elem = float32(0)
				}
				s.OptionalArrayNumberFloat = append(s.OptionalArrayNumberFloat, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayNumberInt32 = nil
			for i := 0; i < 0; i++ {
				var elem int32
				{
					elem = int32(0)
				}
				s.OptionalArrayNumberInt32 = append(s.OptionalArrayNumberInt32, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayNumberInt64 = nil
			for i := 0; i < 0; i++ {
				var elem int64
				{
					elem = int64(0)
				}
				s.OptionalArrayNumberInt64 = append(s.OptionalArrayNumberInt64, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayString = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.OptionalArrayString = append(s.OptionalArrayString, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringBase64 = nil
			for i := 0; i < 0; i++ {
				var elem []byte
				{
					elem = []byte("[]byte")
				}
				s.OptionalArrayStringBase64 = append(s.OptionalArrayStringBase64, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringBinary = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.OptionalArrayStringBinary = append(s.OptionalArrayStringBinary, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringByte = nil
			for i := 0; i < 0; i++ {
				var elem []byte
				{
					elem = []byte("[]byte")
				}
				s.OptionalArrayStringByte = append(s.OptionalArrayStringByte, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringDate = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.OptionalArrayStringDate = append(s.OptionalArrayStringDate, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringDateMinusTime = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.OptionalArrayStringDateMinusTime = append(s.OptionalArrayStringDateMinusTime, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringDuration = nil
			for i := 0; i < 0; i++ {
				var elem time.Duration
				{
					elem = time.Duration(5 * time.Second)
				}
				s.OptionalArrayStringDuration = append(s.OptionalArrayStringDuration, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringEmail = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.OptionalArrayStringEmail = append(s.OptionalArrayStringEmail, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringFloat32 = nil
			for i := 0; i < 0; i++ {
				var elem float32
				{
					elem = float32(0)
				}
				s.OptionalArrayStringFloat32 = append(s.OptionalArrayStringFloat32, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringFloat64 = nil
			for i := 0; i < 0; i++ {
				var elem float64
				{
					elem = float64(0)
				}
				s.OptionalArrayStringFloat64 = append(s.OptionalArrayStringFloat64, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringHostname = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.OptionalArrayStringHostname = append(s.OptionalArrayStringHostname, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringInt = nil
			for i := 0; i < 0; i++ {
				var elem int
				{
					elem = int(0)
				}
				s.OptionalArrayStringInt = append(s.OptionalArrayStringInt, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringInt16 = nil
			for i := 0; i < 0; i++ {
				var elem int16
				{
					elem = int16(0)
				}
				s.OptionalArrayStringInt16 = append(s.OptionalArrayStringInt16, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringInt32 = nil
			for i := 0; i < 0; i++ {
				var elem int32
				{
					elem = int32(0)
				}
				s.OptionalArrayStringInt32 = append(s.OptionalArrayStringInt32, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringInt64 = nil
			for i := 0; i < 0; i++ {
				var elem int64
				{
					elem = int64(0)
				}
				s.OptionalArrayStringInt64 = append(s.OptionalArrayStringInt64, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringInt8 = nil
			for i := 0; i < 0; i++ {
				var elem int8
				{
					elem = int8(0)
				}
				s.OptionalArrayStringInt8 = append(s.OptionalArrayStringInt8, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringIP = nil
			for i := 0; i < 0; i++ {
				var elem netip.Addr
				{
					elem = netip.MustParseAddr("127.0.0.1")
				}
				s.OptionalArrayStringIP = append(s.OptionalArrayStringIP, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringIpv4 = nil
			for i := 0; i < 0; i++ {
				var elem netip.Addr
				{
					elem = netip.MustParseAddr("127.0.0.1")
				}
				s.OptionalArrayStringIpv4 = append(s.OptionalArrayStringIpv4, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringIpv6 = nil
			for i := 0; i < 0; i++ {
				var elem netip.Addr
				{
					elem = netip.MustParseAddr("::1")
				}
				s.OptionalArrayStringIpv6 = append(s.OptionalArrayStringIpv6, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringPassword = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.OptionalArrayStringPassword = append(s.OptionalArrayStringPassword, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringTime = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.OptionalArrayStringTime = append(s.OptionalArrayStringTime, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringUint = nil
			for i := 0; i < 0; i++ {
				var elem uint
				{
					elem = uint(0)
				}
				s.OptionalArrayStringUint = append(s.OptionalArrayStringUint, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringUint16 = nil
			for i := 0; i < 0; i++ {
				var elem uint16
				{
					elem = uint16(0)
				}
				s.OptionalArrayStringUint16 = append(s.OptionalArrayStringUint16, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringUint32 = nil
			for i := 0; i < 0; i++ {
				var elem uint32
				{
					elem = uint32(0)
				}
				s.OptionalArrayStringUint32 = append(s.OptionalArrayStringUint32, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringUint64 = nil
			for i := 0; i < 0; i++ {
				var elem uint64
				{
					elem = uint64(0)
				}
				s.OptionalArrayStringUint64 = append(s.OptionalArrayStringUint64, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringUint8 = nil
			for i := 0; i < 0; i++ {
				var elem uint8
				{
					elem = uint8(0)
				}
				s.OptionalArrayStringUint8 = append(s.OptionalArrayStringUint8, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringUnix = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.OptionalArrayStringUnix = append(s.OptionalArrayStringUnix, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringUnixMinusMicro = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.OptionalArrayStringUnixMinusMicro = append(s.OptionalArrayStringUnixMinusMicro, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringUnixMinusMilli = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.OptionalArrayStringUnixMinusMilli = append(s.OptionalArrayStringUnixMinusMilli, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringUnixMinusNano = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.OptionalArrayStringUnixMinusNano = append(s.OptionalArrayStringUnixMinusNano, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringUnixMinusSeconds = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.OptionalArrayStringUnixMinusSeconds = append(s.OptionalArrayStringUnixMinusSeconds, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringURI = nil
			for i := 0; i < 0; i++ {
				var elem url.URL
				{
					elem = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
				}
				s.OptionalArrayStringURI = append(s.OptionalArrayStringURI, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringUUID = nil
			for i := 0; i < 0; i++ {
				var elem uuid.UUID
				{
					elem = uuid.New()
				}
				s.OptionalArrayStringUUID = append(s.OptionalArrayStringUUID, elem)
			}
		}
	}
	{
		{
			s.OptionalBoolean.SetFake()
		}
	}
	{
		{
			s.OptionalDoubleArrayAny = nil
			for i := 0; i < 0; i++ {
				var elem []jx.Raw
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem jx.Raw
						{
							elemElem = []byte("null")
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayAny = append(s.OptionalDoubleArrayAny, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayBoolean = nil
			for i := 0; i < 0; i++ {
				var elem []bool
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem bool
						{
							elemElem = true
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayBoolean = append(s.OptionalDoubleArrayBoolean, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayInteger = nil
			for i := 0; i < 0; i++ {
				var elem []int
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int
						{
							elemElem = int(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayInteger = append(s.OptionalDoubleArrayInteger, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayIntegerInt16 = nil
			for i := 0; i < 0; i++ {
				var elem []int16
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int16
						{
							elemElem = int16(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayIntegerInt16 = append(s.OptionalDoubleArrayIntegerInt16, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayIntegerInt32 = nil
			for i := 0; i < 0; i++ {
				var elem []int32
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int32
						{
							elemElem = int32(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayIntegerInt32 = append(s.OptionalDoubleArrayIntegerInt32, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayIntegerInt64 = nil
			for i := 0; i < 0; i++ {
				var elem []int64
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int64
						{
							elemElem = int64(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayIntegerInt64 = append(s.OptionalDoubleArrayIntegerInt64, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayIntegerInt8 = nil
			for i := 0; i < 0; i++ {
				var elem []int8
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int8
						{
							elemElem = int8(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayIntegerInt8 = append(s.OptionalDoubleArrayIntegerInt8, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayIntegerUint = nil
			for i := 0; i < 0; i++ {
				var elem []uint
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint
						{
							elemElem = uint(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayIntegerUint = append(s.OptionalDoubleArrayIntegerUint, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayIntegerUint16 = nil
			for i := 0; i < 0; i++ {
				var elem []uint16
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint16
						{
							elemElem = uint16(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayIntegerUint16 = append(s.OptionalDoubleArrayIntegerUint16, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayIntegerUint32 = nil
			for i := 0; i < 0; i++ {
				var elem []uint32
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint32
						{
							elemElem = uint32(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayIntegerUint32 = append(s.OptionalDoubleArrayIntegerUint32, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayIntegerUint64 = nil
			for i := 0; i < 0; i++ {
				var elem []uint64
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint64
						{
							elemElem = uint64(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayIntegerUint64 = append(s.OptionalDoubleArrayIntegerUint64, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayIntegerUint8 = nil
			for i := 0; i < 0; i++ {
				var elem []uint8
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint8
						{
							elemElem = uint8(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayIntegerUint8 = append(s.OptionalDoubleArrayIntegerUint8, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayIntegerUnix = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayIntegerUnix = append(s.OptionalDoubleArrayIntegerUnix, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayIntegerUnixMinusMicro = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayIntegerUnixMinusMicro = append(s.OptionalDoubleArrayIntegerUnixMinusMicro, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayIntegerUnixMinusMilli = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayIntegerUnixMinusMilli = append(s.OptionalDoubleArrayIntegerUnixMinusMilli, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayIntegerUnixMinusNano = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayIntegerUnixMinusNano = append(s.OptionalDoubleArrayIntegerUnixMinusNano, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayIntegerUnixMinusSeconds = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayIntegerUnixMinusSeconds = append(s.OptionalDoubleArrayIntegerUnixMinusSeconds, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayNull = nil
			for i := 0; i < 0; i++ {
				var elem []struct{}
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem struct{}
						{
							elemElem = struct{}{}
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayNull = append(s.OptionalDoubleArrayNull, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayNumber = nil
			for i := 0; i < 0; i++ {
				var elem []float64
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem float64
						{
							elemElem = float64(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayNumber = append(s.OptionalDoubleArrayNumber, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayNumberDouble = nil
			for i := 0; i < 0; i++ {
				var elem []float64
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem float64
						{
							elemElem = float64(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayNumberDouble = append(s.OptionalDoubleArrayNumberDouble, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayNumberFloat = nil
			for i := 0; i < 0; i++ {
				var elem []float32
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem float32
						{
							elemElem = float32(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayNumberFloat = append(s.OptionalDoubleArrayNumberFloat, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayNumberInt32 = nil
			for i := 0; i < 0; i++ {
				var elem []int32
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int32
						{
							elemElem = int32(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayNumberInt32 = append(s.OptionalDoubleArrayNumberInt32, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayNumberInt64 = nil
			for i := 0; i < 0; i++ {
				var elem []int64
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int64
						{
							elemElem = int64(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayNumberInt64 = append(s.OptionalDoubleArrayNumberInt64, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayString = nil
			for i := 0; i < 0; i++ {
				var elem []string
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem string
						{
							elemElem = "string"
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayString = append(s.OptionalDoubleArrayString, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringBase64 = nil
			for i := 0; i < 0; i++ {
				var elem [][]byte
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem []byte
						{
							elemElem = []byte("[]byte")
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringBase64 = append(s.OptionalDoubleArrayStringBase64, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringBinary = nil
			for i := 0; i < 0; i++ {
				var elem []string
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem string
						{
							elemElem = "string"
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringBinary = append(s.OptionalDoubleArrayStringBinary, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringByte = nil
			for i := 0; i < 0; i++ {
				var elem [][]byte
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem []byte
						{
							elemElem = []byte("[]byte")
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringByte = append(s.OptionalDoubleArrayStringByte, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringDate = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringDate = append(s.OptionalDoubleArrayStringDate, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringDateMinusTime = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringDateMinusTime = append(s.OptionalDoubleArrayStringDateMinusTime, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringDuration = nil
			for i := 0; i < 0; i++ {
				var elem []time.Duration
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Duration
						{
							elemElem = time.Duration(5 * time.Second)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringDuration = append(s.OptionalDoubleArrayStringDuration, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringEmail = nil
			for i := 0; i < 0; i++ {
				var elem []string
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem string
						{
							elemElem = "string"
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringEmail = append(s.OptionalDoubleArrayStringEmail, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringFloat32 = nil
			for i := 0; i < 0; i++ {
				var elem []float32
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem float32
						{
							elemElem = float32(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringFloat32 = append(s.OptionalDoubleArrayStringFloat32, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringFloat64 = nil
			for i := 0; i < 0; i++ {
				var elem []float64
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem float64
						{
							elemElem = float64(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringFloat64 = append(s.OptionalDoubleArrayStringFloat64, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringHostname = nil
			for i := 0; i < 0; i++ {
				var elem []string
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem string
						{
							elemElem = "string"
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringHostname = append(s.OptionalDoubleArrayStringHostname, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringInt = nil
			for i := 0; i < 0; i++ {
				var elem []int
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int
						{
							elemElem = int(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringInt = append(s.OptionalDoubleArrayStringInt, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringInt16 = nil
			for i := 0; i < 0; i++ {
				var elem []int16
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int16
						{
							elemElem = int16(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringInt16 = append(s.OptionalDoubleArrayStringInt16, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringInt32 = nil
			for i := 0; i < 0; i++ {
				var elem []int32
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int32
						{
							elemElem = int32(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringInt32 = append(s.OptionalDoubleArrayStringInt32, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringInt64 = nil
			for i := 0; i < 0; i++ {
				var elem []int64
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int64
						{
							elemElem = int64(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringInt64 = append(s.OptionalDoubleArrayStringInt64, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringInt8 = nil
			for i := 0; i < 0; i++ {
				var elem []int8
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int8
						{
							elemElem = int8(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringInt8 = append(s.OptionalDoubleArrayStringInt8, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringIP = nil
			for i := 0; i < 0; i++ {
				var elem []netip.Addr
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem netip.Addr
						{
							elemElem = netip.MustParseAddr("127.0.0.1")
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringIP = append(s.OptionalDoubleArrayStringIP, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringIpv4 = nil
			for i := 0; i < 0; i++ {
				var elem []netip.Addr
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem netip.Addr
						{
							elemElem = netip.MustParseAddr("127.0.0.1")
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringIpv4 = append(s.OptionalDoubleArrayStringIpv4, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringIpv6 = nil
			for i := 0; i < 0; i++ {
				var elem []netip.Addr
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem netip.Addr
						{
							elemElem = netip.MustParseAddr("::1")
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringIpv6 = append(s.OptionalDoubleArrayStringIpv6, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringPassword = nil
			for i := 0; i < 0; i++ {
				var elem []string
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem string
						{
							elemElem = "string"
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringPassword = append(s.OptionalDoubleArrayStringPassword, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringTime = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringTime = append(s.OptionalDoubleArrayStringTime, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringUint = nil
			for i := 0; i < 0; i++ {
				var elem []uint
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint
						{
							elemElem = uint(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringUint = append(s.OptionalDoubleArrayStringUint, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringUint16 = nil
			for i := 0; i < 0; i++ {
				var elem []uint16
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint16
						{
							elemElem = uint16(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringUint16 = append(s.OptionalDoubleArrayStringUint16, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringUint32 = nil
			for i := 0; i < 0; i++ {
				var elem []uint32
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint32
						{
							elemElem = uint32(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringUint32 = append(s.OptionalDoubleArrayStringUint32, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringUint64 = nil
			for i := 0; i < 0; i++ {
				var elem []uint64
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint64
						{
							elemElem = uint64(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringUint64 = append(s.OptionalDoubleArrayStringUint64, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringUint8 = nil
			for i := 0; i < 0; i++ {
				var elem []uint8
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint8
						{
							elemElem = uint8(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringUint8 = append(s.OptionalDoubleArrayStringUint8, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringUnix = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringUnix = append(s.OptionalDoubleArrayStringUnix, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringUnixMinusMicro = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringUnixMinusMicro = append(s.OptionalDoubleArrayStringUnixMinusMicro, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringUnixMinusMilli = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringUnixMinusMilli = append(s.OptionalDoubleArrayStringUnixMinusMilli, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringUnixMinusNano = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringUnixMinusNano = append(s.OptionalDoubleArrayStringUnixMinusNano, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringUnixMinusSeconds = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringUnixMinusSeconds = append(s.OptionalDoubleArrayStringUnixMinusSeconds, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringURI = nil
			for i := 0; i < 0; i++ {
				var elem []url.URL
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem url.URL
						{
							elemElem = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringURI = append(s.OptionalDoubleArrayStringURI, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringUUID = nil
			for i := 0; i < 0; i++ {
				var elem []uuid.UUID
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uuid.UUID
						{
							elemElem = uuid.New()
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringUUID = append(s.OptionalDoubleArrayStringUUID, elem)
			}
		}
	}
	{
		{
			s.OptionalInteger.SetFake()
		}
	}
	{
		{
			s.OptionalIntegerInt16.SetFake()
		}
	}
	{
		{
			s.OptionalIntegerInt32.SetFake()
		}
	}
	{
		{
			s.OptionalIntegerInt64.SetFake()
		}
	}
	{
		{
			s.OptionalIntegerInt8.SetFake()
		}
	}
	{
		{
			s.OptionalIntegerUint.SetFake()
		}
	}
	{
		{
			s.OptionalIntegerUint16.SetFake()
		}
	}
	{
		{
			s.OptionalIntegerUint32.SetFake()
		}
	}
	{
		{
			s.OptionalIntegerUint64.SetFake()
		}
	}
	{
		{
			s.OptionalIntegerUint8.SetFake()
		}
	}
	{
		{
			s.OptionalIntegerUnix.SetFake()
		}
	}
	{
		{
			s.OptionalIntegerUnixMinusMicro.SetFake()
		}
	}
	{
		{
			s.OptionalIntegerUnixMinusMilli.SetFake()
		}
	}
	{
		{
			s.OptionalIntegerUnixMinusNano.SetFake()
		}
	}
	{
		{
			s.OptionalIntegerUnixMinusSeconds.SetFake()
		}
	}
	{
		{
			s.OptionalNull.SetFake()
		}
	}
	{
		{
			s.OptionalNumber.SetFake()
		}
	}
	{
		{
			s.OptionalNumberDouble.SetFake()
		}
	}
	{
		{
			s.OptionalNumberFloat.SetFake()
		}
	}
	{
		{
			s.OptionalNumberInt32.SetFake()
		}
	}
	{
		{
			s.OptionalNumberInt64.SetFake()
		}
	}
	{
		{
			s.OptionalString.SetFake()
		}
	}
	{
		{
			s.OptionalStringBase64 = []byte("[]byte")
		}
	}
	{
		{
			s.OptionalStringBinary.SetFake()
		}
	}
	{
		{
			s.OptionalStringByte = []byte("[]byte")
		}
	}
	{
		{
			s.OptionalStringDate.SetFake()
		}
	}
	{
		{
			s.OptionalStringDateMinusTime.SetFake()
		}
	}
	{
		{
			s.OptionalStringDuration.SetFake()
		}
	}
	{
		{
			s.OptionalStringEmail.SetFake()
		}
	}
	{
		{
			s.OptionalStringFloat32.SetFake()
		}
	}
	{
		{
			s.OptionalStringFloat64.SetFake()
		}
	}
	{
		{
			s.OptionalStringHostname.SetFake()
		}
	}
	{
		{
			s.OptionalStringInt.SetFake()
		}
	}
	{
		{
			s.OptionalStringInt16.SetFake()
		}
	}
	{
		{
			s.OptionalStringInt32.SetFake()
		}
	}
	{
		{
			s.OptionalStringInt64.SetFake()
		}
	}
	{
		{
			s.OptionalStringInt8.SetFake()
		}
	}
	{
		{
			s.OptionalStringIP.SetFake()
		}
	}
	{
		{
			s.OptionalStringIpv4.SetFake()
		}
	}
	{
		{
			s.OptionalStringIpv6.SetFake()
		}
	}
	{
		{
			s.OptionalStringPassword.SetFake()
		}
	}
	{
		{
			s.OptionalStringTime.SetFake()
		}
	}
	{
		{
			s.OptionalStringUint.SetFake()
		}
	}
	{
		{
			s.OptionalStringUint16.SetFake()
		}
	}
	{
		{
			s.OptionalStringUint32.SetFake()
		}
	}
	{
		{
			s.OptionalStringUint64.SetFake()
		}
	}
	{
		{
			s.OptionalStringUint8.SetFake()
		}
	}
	{
		{
			s.OptionalStringUnix.SetFake()
		}
	}
	{
		{
			s.OptionalStringUnixMinusMicro.SetFake()
		}
	}
	{
		{
			s.OptionalStringUnixMinusMilli.SetFake()
		}
	}
	{
		{
			s.OptionalStringUnixMinusNano.SetFake()
		}
	}
	{
		{
			s.OptionalStringUnixMinusSeconds.SetFake()
		}
	}
	{
		{
			s.OptionalStringURI.SetFake()
		}
	}
	{
		{
			s.OptionalStringUUID.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *TestRequestRequiredEmptyStructReq) SetFake() {
}

// SetFake set fake values.
func (s *TestRequestRequiredFormatTestReq) SetFake() {
	{
		{
			s.RequiredAny = []byte("null")
		}
	}
	{
		{
			s.RequiredArrayAny = nil
			for i := 0; i < 0; i++ {
				var elem jx.Raw
				{
					elem = []byte("null")
				}
				s.RequiredArrayAny = append(s.RequiredArrayAny, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayBoolean = nil
			for i := 0; i < 0; i++ {
				var elem bool
				{
					elem = true
				}
				s.RequiredArrayBoolean = append(s.RequiredArrayBoolean, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayInteger = nil
			for i := 0; i < 0; i++ {
				var elem int
				{
					elem = int(0)
				}
				s.RequiredArrayInteger = append(s.RequiredArrayInteger, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayIntegerInt16 = nil
			for i := 0; i < 0; i++ {
				var elem int16
				{
					elem = int16(0)
				}
				s.RequiredArrayIntegerInt16 = append(s.RequiredArrayIntegerInt16, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayIntegerInt32 = nil
			for i := 0; i < 0; i++ {
				var elem int32
				{
					elem = int32(0)
				}
				s.RequiredArrayIntegerInt32 = append(s.RequiredArrayIntegerInt32, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayIntegerInt64 = nil
			for i := 0; i < 0; i++ {
				var elem int64
				{
					elem = int64(0)
				}
				s.RequiredArrayIntegerInt64 = append(s.RequiredArrayIntegerInt64, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayIntegerInt8 = nil
			for i := 0; i < 0; i++ {
				var elem int8
				{
					elem = int8(0)
				}
				s.RequiredArrayIntegerInt8 = append(s.RequiredArrayIntegerInt8, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayIntegerUint = nil
			for i := 0; i < 0; i++ {
				var elem uint
				{
					elem = uint(0)
				}
				s.RequiredArrayIntegerUint = append(s.RequiredArrayIntegerUint, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayIntegerUint16 = nil
			for i := 0; i < 0; i++ {
				var elem uint16
				{
					elem = uint16(0)
				}
				s.RequiredArrayIntegerUint16 = append(s.RequiredArrayIntegerUint16, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayIntegerUint32 = nil
			for i := 0; i < 0; i++ {
				var elem uint32
				{
					elem = uint32(0)
				}
				s.RequiredArrayIntegerUint32 = append(s.RequiredArrayIntegerUint32, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayIntegerUint64 = nil
			for i := 0; i < 0; i++ {
				var elem uint64
				{
					elem = uint64(0)
				}
				s.RequiredArrayIntegerUint64 = append(s.RequiredArrayIntegerUint64, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayIntegerUint8 = nil
			for i := 0; i < 0; i++ {
				var elem uint8
				{
					elem = uint8(0)
				}
				s.RequiredArrayIntegerUint8 = append(s.RequiredArrayIntegerUint8, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayIntegerUnix = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.RequiredArrayIntegerUnix = append(s.RequiredArrayIntegerUnix, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayIntegerUnixMinusMicro = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.RequiredArrayIntegerUnixMinusMicro = append(s.RequiredArrayIntegerUnixMinusMicro, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayIntegerUnixMinusMilli = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.RequiredArrayIntegerUnixMinusMilli = append(s.RequiredArrayIntegerUnixMinusMilli, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayIntegerUnixMinusNano = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.RequiredArrayIntegerUnixMinusNano = append(s.RequiredArrayIntegerUnixMinusNano, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayIntegerUnixMinusSeconds = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.RequiredArrayIntegerUnixMinusSeconds = append(s.RequiredArrayIntegerUnixMinusSeconds, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayNull = nil
			for i := 0; i < 0; i++ {
				var elem struct{}
				{
					elem = struct{}{}
				}
				s.RequiredArrayNull = append(s.RequiredArrayNull, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayNumber = nil
			for i := 0; i < 0; i++ {
				var elem float64
				{
					elem = float64(0)
				}
				s.RequiredArrayNumber = append(s.RequiredArrayNumber, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayNumberDouble = nil
			for i := 0; i < 0; i++ {
				var elem float64
				{
					elem = float64(0)
				}
				s.RequiredArrayNumberDouble = append(s.RequiredArrayNumberDouble, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayNumberFloat = nil
			for i := 0; i < 0; i++ {
				var elem float32
				{
					elem = float32(0)
				}
				s.RequiredArrayNumberFloat = append(s.RequiredArrayNumberFloat, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayNumberInt32 = nil
			for i := 0; i < 0; i++ {
				var elem int32
				{
					elem = int32(0)
				}
				s.RequiredArrayNumberInt32 = append(s.RequiredArrayNumberInt32, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayNumberInt64 = nil
			for i := 0; i < 0; i++ {
				var elem int64
				{
					elem = int64(0)
				}
				s.RequiredArrayNumberInt64 = append(s.RequiredArrayNumberInt64, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayString = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.RequiredArrayString = append(s.RequiredArrayString, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringBase64 = nil
			for i := 0; i < 0; i++ {
				var elem []byte
				{
					elem = []byte("[]byte")
				}
				s.RequiredArrayStringBase64 = append(s.RequiredArrayStringBase64, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringBinary = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.RequiredArrayStringBinary = append(s.RequiredArrayStringBinary, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringByte = nil
			for i := 0; i < 0; i++ {
				var elem []byte
				{
					elem = []byte("[]byte")
				}
				s.RequiredArrayStringByte = append(s.RequiredArrayStringByte, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringDate = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.RequiredArrayStringDate = append(s.RequiredArrayStringDate, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringDateMinusTime = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.RequiredArrayStringDateMinusTime = append(s.RequiredArrayStringDateMinusTime, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringDuration = nil
			for i := 0; i < 0; i++ {
				var elem time.Duration
				{
					elem = time.Duration(5 * time.Second)
				}
				s.RequiredArrayStringDuration = append(s.RequiredArrayStringDuration, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringEmail = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.RequiredArrayStringEmail = append(s.RequiredArrayStringEmail, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringFloat32 = nil
			for i := 0; i < 0; i++ {
				var elem float32
				{
					elem = float32(0)
				}
				s.RequiredArrayStringFloat32 = append(s.RequiredArrayStringFloat32, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringFloat64 = nil
			for i := 0; i < 0; i++ {
				var elem float64
				{
					elem = float64(0)
				}
				s.RequiredArrayStringFloat64 = append(s.RequiredArrayStringFloat64, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringHostname = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.RequiredArrayStringHostname = append(s.RequiredArrayStringHostname, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringInt = nil
			for i := 0; i < 0; i++ {
				var elem int
				{
					elem = int(0)
				}
				s.RequiredArrayStringInt = append(s.RequiredArrayStringInt, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringInt16 = nil
			for i := 0; i < 0; i++ {
				var elem int16
				{
					elem = int16(0)
				}
				s.RequiredArrayStringInt16 = append(s.RequiredArrayStringInt16, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringInt32 = nil
			for i := 0; i < 0; i++ {
				var elem int32
				{
					elem = int32(0)
				}
				s.RequiredArrayStringInt32 = append(s.RequiredArrayStringInt32, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringInt64 = nil
			for i := 0; i < 0; i++ {
				var elem int64
				{
					elem = int64(0)
				}
				s.RequiredArrayStringInt64 = append(s.RequiredArrayStringInt64, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringInt8 = nil
			for i := 0; i < 0; i++ {
				var elem int8
				{
					elem = int8(0)
				}
				s.RequiredArrayStringInt8 = append(s.RequiredArrayStringInt8, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringIP = nil
			for i := 0; i < 0; i++ {
				var elem netip.Addr
				{
					elem = netip.MustParseAddr("127.0.0.1")
				}
				s.RequiredArrayStringIP = append(s.RequiredArrayStringIP, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringIpv4 = nil
			for i := 0; i < 0; i++ {
				var elem netip.Addr
				{
					elem = netip.MustParseAddr("127.0.0.1")
				}
				s.RequiredArrayStringIpv4 = append(s.RequiredArrayStringIpv4, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringIpv6 = nil
			for i := 0; i < 0; i++ {
				var elem netip.Addr
				{
					elem = netip.MustParseAddr("::1")
				}
				s.RequiredArrayStringIpv6 = append(s.RequiredArrayStringIpv6, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringPassword = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.RequiredArrayStringPassword = append(s.RequiredArrayStringPassword, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringTime = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.RequiredArrayStringTime = append(s.RequiredArrayStringTime, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringUint = nil
			for i := 0; i < 0; i++ {
				var elem uint
				{
					elem = uint(0)
				}
				s.RequiredArrayStringUint = append(s.RequiredArrayStringUint, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringUint16 = nil
			for i := 0; i < 0; i++ {
				var elem uint16
				{
					elem = uint16(0)
				}
				s.RequiredArrayStringUint16 = append(s.RequiredArrayStringUint16, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringUint32 = nil
			for i := 0; i < 0; i++ {
				var elem uint32
				{
					elem = uint32(0)
				}
				s.RequiredArrayStringUint32 = append(s.RequiredArrayStringUint32, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringUint64 = nil
			for i := 0; i < 0; i++ {
				var elem uint64
				{
					elem = uint64(0)
				}
				s.RequiredArrayStringUint64 = append(s.RequiredArrayStringUint64, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringUint8 = nil
			for i := 0; i < 0; i++ {
				var elem uint8
				{
					elem = uint8(0)
				}
				s.RequiredArrayStringUint8 = append(s.RequiredArrayStringUint8, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringUnix = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.RequiredArrayStringUnix = append(s.RequiredArrayStringUnix, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringUnixMinusMicro = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.RequiredArrayStringUnixMinusMicro = append(s.RequiredArrayStringUnixMinusMicro, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringUnixMinusMilli = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.RequiredArrayStringUnixMinusMilli = append(s.RequiredArrayStringUnixMinusMilli, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringUnixMinusNano = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.RequiredArrayStringUnixMinusNano = append(s.RequiredArrayStringUnixMinusNano, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringUnixMinusSeconds = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.RequiredArrayStringUnixMinusSeconds = append(s.RequiredArrayStringUnixMinusSeconds, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringURI = nil
			for i := 0; i < 0; i++ {
				var elem url.URL
				{
					elem = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
				}
				s.RequiredArrayStringURI = append(s.RequiredArrayStringURI, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringUUID = nil
			for i := 0; i < 0; i++ {
				var elem uuid.UUID
				{
					elem = uuid.New()
				}
				s.RequiredArrayStringUUID = append(s.RequiredArrayStringUUID, elem)
			}
		}
	}
	{
		{
			s.RequiredBoolean = true
		}
	}
	{
		{
			s.RequiredDoubleArrayAny = nil
			for i := 0; i < 0; i++ {
				var elem []jx.Raw
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem jx.Raw
						{
							elemElem = []byte("null")
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayAny = append(s.RequiredDoubleArrayAny, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayBoolean = nil
			for i := 0; i < 0; i++ {
				var elem []bool
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem bool
						{
							elemElem = true
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayBoolean = append(s.RequiredDoubleArrayBoolean, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayInteger = nil
			for i := 0; i < 0; i++ {
				var elem []int
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int
						{
							elemElem = int(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayInteger = append(s.RequiredDoubleArrayInteger, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayIntegerInt16 = nil
			for i := 0; i < 0; i++ {
				var elem []int16
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int16
						{
							elemElem = int16(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayIntegerInt16 = append(s.RequiredDoubleArrayIntegerInt16, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayIntegerInt32 = nil
			for i := 0; i < 0; i++ {
				var elem []int32
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int32
						{
							elemElem = int32(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayIntegerInt32 = append(s.RequiredDoubleArrayIntegerInt32, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayIntegerInt64 = nil
			for i := 0; i < 0; i++ {
				var elem []int64
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int64
						{
							elemElem = int64(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayIntegerInt64 = append(s.RequiredDoubleArrayIntegerInt64, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayIntegerInt8 = nil
			for i := 0; i < 0; i++ {
				var elem []int8
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int8
						{
							elemElem = int8(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayIntegerInt8 = append(s.RequiredDoubleArrayIntegerInt8, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayIntegerUint = nil
			for i := 0; i < 0; i++ {
				var elem []uint
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint
						{
							elemElem = uint(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayIntegerUint = append(s.RequiredDoubleArrayIntegerUint, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayIntegerUint16 = nil
			for i := 0; i < 0; i++ {
				var elem []uint16
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint16
						{
							elemElem = uint16(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayIntegerUint16 = append(s.RequiredDoubleArrayIntegerUint16, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayIntegerUint32 = nil
			for i := 0; i < 0; i++ {
				var elem []uint32
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint32
						{
							elemElem = uint32(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayIntegerUint32 = append(s.RequiredDoubleArrayIntegerUint32, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayIntegerUint64 = nil
			for i := 0; i < 0; i++ {
				var elem []uint64
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint64
						{
							elemElem = uint64(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayIntegerUint64 = append(s.RequiredDoubleArrayIntegerUint64, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayIntegerUint8 = nil
			for i := 0; i < 0; i++ {
				var elem []uint8
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint8
						{
							elemElem = uint8(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayIntegerUint8 = append(s.RequiredDoubleArrayIntegerUint8, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayIntegerUnix = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayIntegerUnix = append(s.RequiredDoubleArrayIntegerUnix, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayIntegerUnixMinusMicro = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayIntegerUnixMinusMicro = append(s.RequiredDoubleArrayIntegerUnixMinusMicro, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayIntegerUnixMinusMilli = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayIntegerUnixMinusMilli = append(s.RequiredDoubleArrayIntegerUnixMinusMilli, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayIntegerUnixMinusNano = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayIntegerUnixMinusNano = append(s.RequiredDoubleArrayIntegerUnixMinusNano, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayIntegerUnixMinusSeconds = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayIntegerUnixMinusSeconds = append(s.RequiredDoubleArrayIntegerUnixMinusSeconds, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayNull = nil
			for i := 0; i < 0; i++ {
				var elem []struct{}
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem struct{}
						{
							elemElem = struct{}{}
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayNull = append(s.RequiredDoubleArrayNull, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayNumber = nil
			for i := 0; i < 0; i++ {
				var elem []float64
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem float64
						{
							elemElem = float64(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayNumber = append(s.RequiredDoubleArrayNumber, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayNumberDouble = nil
			for i := 0; i < 0; i++ {
				var elem []float64
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem float64
						{
							elemElem = float64(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayNumberDouble = append(s.RequiredDoubleArrayNumberDouble, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayNumberFloat = nil
			for i := 0; i < 0; i++ {
				var elem []float32
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem float32
						{
							elemElem = float32(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayNumberFloat = append(s.RequiredDoubleArrayNumberFloat, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayNumberInt32 = nil
			for i := 0; i < 0; i++ {
				var elem []int32
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int32
						{
							elemElem = int32(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayNumberInt32 = append(s.RequiredDoubleArrayNumberInt32, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayNumberInt64 = nil
			for i := 0; i < 0; i++ {
				var elem []int64
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int64
						{
							elemElem = int64(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayNumberInt64 = append(s.RequiredDoubleArrayNumberInt64, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayString = nil
			for i := 0; i < 0; i++ {
				var elem []string
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem string
						{
							elemElem = "string"
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayString = append(s.RequiredDoubleArrayString, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringBase64 = nil
			for i := 0; i < 0; i++ {
				var elem [][]byte
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem []byte
						{
							elemElem = []byte("[]byte")
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringBase64 = append(s.RequiredDoubleArrayStringBase64, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringBinary = nil
			for i := 0; i < 0; i++ {
				var elem []string
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem string
						{
							elemElem = "string"
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringBinary = append(s.RequiredDoubleArrayStringBinary, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringByte = nil
			for i := 0; i < 0; i++ {
				var elem [][]byte
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem []byte
						{
							elemElem = []byte("[]byte")
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringByte = append(s.RequiredDoubleArrayStringByte, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringDate = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringDate = append(s.RequiredDoubleArrayStringDate, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringDateMinusTime = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringDateMinusTime = append(s.RequiredDoubleArrayStringDateMinusTime, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringDuration = nil
			for i := 0; i < 0; i++ {
				var elem []time.Duration
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Duration
						{
							elemElem = time.Duration(5 * time.Second)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringDuration = append(s.RequiredDoubleArrayStringDuration, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringEmail = nil
			for i := 0; i < 0; i++ {
				var elem []string
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem string
						{
							elemElem = "string"
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringEmail = append(s.RequiredDoubleArrayStringEmail, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringFloat32 = nil
			for i := 0; i < 0; i++ {
				var elem []float32
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem float32
						{
							elemElem = float32(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringFloat32 = append(s.RequiredDoubleArrayStringFloat32, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringFloat64 = nil
			for i := 0; i < 0; i++ {
				var elem []float64
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem float64
						{
							elemElem = float64(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringFloat64 = append(s.RequiredDoubleArrayStringFloat64, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringHostname = nil
			for i := 0; i < 0; i++ {
				var elem []string
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem string
						{
							elemElem = "string"
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringHostname = append(s.RequiredDoubleArrayStringHostname, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringInt = nil
			for i := 0; i < 0; i++ {
				var elem []int
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int
						{
							elemElem = int(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringInt = append(s.RequiredDoubleArrayStringInt, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringInt16 = nil
			for i := 0; i < 0; i++ {
				var elem []int16
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int16
						{
							elemElem = int16(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringInt16 = append(s.RequiredDoubleArrayStringInt16, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringInt32 = nil
			for i := 0; i < 0; i++ {
				var elem []int32
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int32
						{
							elemElem = int32(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringInt32 = append(s.RequiredDoubleArrayStringInt32, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringInt64 = nil
			for i := 0; i < 0; i++ {
				var elem []int64
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int64
						{
							elemElem = int64(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringInt64 = append(s.RequiredDoubleArrayStringInt64, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringInt8 = nil
			for i := 0; i < 0; i++ {
				var elem []int8
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int8
						{
							elemElem = int8(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringInt8 = append(s.RequiredDoubleArrayStringInt8, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringIP = nil
			for i := 0; i < 0; i++ {
				var elem []netip.Addr
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem netip.Addr
						{
							elemElem = netip.MustParseAddr("127.0.0.1")
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringIP = append(s.RequiredDoubleArrayStringIP, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringIpv4 = nil
			for i := 0; i < 0; i++ {
				var elem []netip.Addr
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem netip.Addr
						{
							elemElem = netip.MustParseAddr("127.0.0.1")
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringIpv4 = append(s.RequiredDoubleArrayStringIpv4, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringIpv6 = nil
			for i := 0; i < 0; i++ {
				var elem []netip.Addr
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem netip.Addr
						{
							elemElem = netip.MustParseAddr("::1")
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringIpv6 = append(s.RequiredDoubleArrayStringIpv6, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringPassword = nil
			for i := 0; i < 0; i++ {
				var elem []string
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem string
						{
							elemElem = "string"
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringPassword = append(s.RequiredDoubleArrayStringPassword, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringTime = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringTime = append(s.RequiredDoubleArrayStringTime, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringUint = nil
			for i := 0; i < 0; i++ {
				var elem []uint
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint
						{
							elemElem = uint(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringUint = append(s.RequiredDoubleArrayStringUint, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringUint16 = nil
			for i := 0; i < 0; i++ {
				var elem []uint16
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint16
						{
							elemElem = uint16(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringUint16 = append(s.RequiredDoubleArrayStringUint16, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringUint32 = nil
			for i := 0; i < 0; i++ {
				var elem []uint32
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint32
						{
							elemElem = uint32(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringUint32 = append(s.RequiredDoubleArrayStringUint32, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringUint64 = nil
			for i := 0; i < 0; i++ {
				var elem []uint64
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint64
						{
							elemElem = uint64(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringUint64 = append(s.RequiredDoubleArrayStringUint64, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringUint8 = nil
			for i := 0; i < 0; i++ {
				var elem []uint8
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint8
						{
							elemElem = uint8(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringUint8 = append(s.RequiredDoubleArrayStringUint8, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringUnix = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringUnix = append(s.RequiredDoubleArrayStringUnix, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringUnixMinusMicro = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringUnixMinusMicro = append(s.RequiredDoubleArrayStringUnixMinusMicro, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringUnixMinusMilli = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringUnixMinusMilli = append(s.RequiredDoubleArrayStringUnixMinusMilli, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringUnixMinusNano = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringUnixMinusNano = append(s.RequiredDoubleArrayStringUnixMinusNano, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringUnixMinusSeconds = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringUnixMinusSeconds = append(s.RequiredDoubleArrayStringUnixMinusSeconds, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringURI = nil
			for i := 0; i < 0; i++ {
				var elem []url.URL
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem url.URL
						{
							elemElem = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringURI = append(s.RequiredDoubleArrayStringURI, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringUUID = nil
			for i := 0; i < 0; i++ {
				var elem []uuid.UUID
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uuid.UUID
						{
							elemElem = uuid.New()
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringUUID = append(s.RequiredDoubleArrayStringUUID, elem)
			}
		}
	}
	{
		{
			s.RequiredInteger = int(0)
		}
	}
	{
		{
			s.RequiredIntegerInt16 = int16(0)
		}
	}
	{
		{
			s.RequiredIntegerInt32 = int32(0)
		}
	}
	{
		{
			s.RequiredIntegerInt64 = int64(0)
		}
	}
	{
		{
			s.RequiredIntegerInt8 = int8(0)
		}
	}
	{
		{
			s.RequiredIntegerUint = uint(0)
		}
	}
	{
		{
			s.RequiredIntegerUint16 = uint16(0)
		}
	}
	{
		{
			s.RequiredIntegerUint32 = uint32(0)
		}
	}
	{
		{
			s.RequiredIntegerUint64 = uint64(0)
		}
	}
	{
		{
			s.RequiredIntegerUint8 = uint8(0)
		}
	}
	{
		{
			s.RequiredIntegerUnix = time.Now()
		}
	}
	{
		{
			s.RequiredIntegerUnixMinusMicro = time.Now()
		}
	}
	{
		{
			s.RequiredIntegerUnixMinusMilli = time.Now()
		}
	}
	{
		{
			s.RequiredIntegerUnixMinusNano = time.Now()
		}
	}
	{
		{
			s.RequiredIntegerUnixMinusSeconds = time.Now()
		}
	}
	{
		{
			s.RequiredNull = struct{}{}
		}
	}
	{
		{
			s.RequiredNumber = float64(0)
		}
	}
	{
		{
			s.RequiredNumberDouble = float64(0)
		}
	}
	{
		{
			s.RequiredNumberFloat = float32(0)
		}
	}
	{
		{
			s.RequiredNumberInt32 = int32(0)
		}
	}
	{
		{
			s.RequiredNumberInt64 = int64(0)
		}
	}
	{
		{
			s.RequiredString = "string"
		}
	}
	{
		{
			s.RequiredStringBase64 = []byte("[]byte")
		}
	}
	{
		{
			s.RequiredStringBinary = "string"
		}
	}
	{
		{
			s.RequiredStringByte = []byte("[]byte")
		}
	}
	{
		{
			s.RequiredStringDate = time.Now()
		}
	}
	{
		{
			s.RequiredStringDateMinusTime = time.Now()
		}
	}
	{
		{
			s.RequiredStringDuration = time.Duration(5 * time.Second)
		}
	}
	{
		{
			s.RequiredStringEmail = "string"
		}
	}
	{
		{
			s.RequiredStringFloat32 = float32(0)
		}
	}
	{
		{
			s.RequiredStringFloat64 = float64(0)
		}
	}
	{
		{
			s.RequiredStringHostname = "string"
		}
	}
	{
		{
			s.RequiredStringInt = int(0)
		}
	}
	{
		{
			s.RequiredStringInt16 = int16(0)
		}
	}
	{
		{
			s.RequiredStringInt32 = int32(0)
		}
	}
	{
		{
			s.RequiredStringInt64 = int64(0)
		}
	}
	{
		{
			s.RequiredStringInt8 = int8(0)
		}
	}
	{
		{
			s.RequiredStringIP = netip.MustParseAddr("127.0.0.1")
		}
	}
	{
		{
			s.RequiredStringIpv4 = netip.MustParseAddr("127.0.0.1")
		}
	}
	{
		{
			s.RequiredStringIpv6 = netip.MustParseAddr("::1")
		}
	}
	{
		{
			s.RequiredStringPassword = "string"
		}
	}
	{
		{
			s.RequiredStringTime = time.Now()
		}
	}
	{
		{
			s.RequiredStringUint = uint(0)
		}
	}
	{
		{
			s.RequiredStringUint16 = uint16(0)
		}
	}
	{
		{
			s.RequiredStringUint32 = uint32(0)
		}
	}
	{
		{
			s.RequiredStringUint64 = uint64(0)
		}
	}
	{
		{
			s.RequiredStringUint8 = uint8(0)
		}
	}
	{
		{
			s.RequiredStringUnix = time.Now()
		}
	}
	{
		{
			s.RequiredStringUnixMinusMicro = time.Now()
		}
	}
	{
		{
			s.RequiredStringUnixMinusMilli = time.Now()
		}
	}
	{
		{
			s.RequiredStringUnixMinusNano = time.Now()
		}
	}
	{
		{
			s.RequiredStringUnixMinusSeconds = time.Now()
		}
	}
	{
		{
			s.RequiredStringURI = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.RequiredStringUUID = uuid.New()
		}
	}
	{
		{
			s.OptionalAny = []byte("null")
		}
	}
	{
		{
			s.OptionalArrayAny = nil
			for i := 0; i < 0; i++ {
				var elem jx.Raw
				{
					elem = []byte("null")
				}
				s.OptionalArrayAny = append(s.OptionalArrayAny, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayBoolean = nil
			for i := 0; i < 0; i++ {
				var elem bool
				{
					elem = true
				}
				s.OptionalArrayBoolean = append(s.OptionalArrayBoolean, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayInteger = nil
			for i := 0; i < 0; i++ {
				var elem int
				{
					elem = int(0)
				}
				s.OptionalArrayInteger = append(s.OptionalArrayInteger, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayIntegerInt16 = nil
			for i := 0; i < 0; i++ {
				var elem int16
				{
					elem = int16(0)
				}
				s.OptionalArrayIntegerInt16 = append(s.OptionalArrayIntegerInt16, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayIntegerInt32 = nil
			for i := 0; i < 0; i++ {
				var elem int32
				{
					elem = int32(0)
				}
				s.OptionalArrayIntegerInt32 = append(s.OptionalArrayIntegerInt32, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayIntegerInt64 = nil
			for i := 0; i < 0; i++ {
				var elem int64
				{
					elem = int64(0)
				}
				s.OptionalArrayIntegerInt64 = append(s.OptionalArrayIntegerInt64, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayIntegerInt8 = nil
			for i := 0; i < 0; i++ {
				var elem int8
				{
					elem = int8(0)
				}
				s.OptionalArrayIntegerInt8 = append(s.OptionalArrayIntegerInt8, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayIntegerUint = nil
			for i := 0; i < 0; i++ {
				var elem uint
				{
					elem = uint(0)
				}
				s.OptionalArrayIntegerUint = append(s.OptionalArrayIntegerUint, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayIntegerUint16 = nil
			for i := 0; i < 0; i++ {
				var elem uint16
				{
					elem = uint16(0)
				}
				s.OptionalArrayIntegerUint16 = append(s.OptionalArrayIntegerUint16, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayIntegerUint32 = nil
			for i := 0; i < 0; i++ {
				var elem uint32
				{
					elem = uint32(0)
				}
				s.OptionalArrayIntegerUint32 = append(s.OptionalArrayIntegerUint32, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayIntegerUint64 = nil
			for i := 0; i < 0; i++ {
				var elem uint64
				{
					elem = uint64(0)
				}
				s.OptionalArrayIntegerUint64 = append(s.OptionalArrayIntegerUint64, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayIntegerUint8 = nil
			for i := 0; i < 0; i++ {
				var elem uint8
				{
					elem = uint8(0)
				}
				s.OptionalArrayIntegerUint8 = append(s.OptionalArrayIntegerUint8, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayIntegerUnix = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.OptionalArrayIntegerUnix = append(s.OptionalArrayIntegerUnix, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayIntegerUnixMinusMicro = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.OptionalArrayIntegerUnixMinusMicro = append(s.OptionalArrayIntegerUnixMinusMicro, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayIntegerUnixMinusMilli = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.OptionalArrayIntegerUnixMinusMilli = append(s.OptionalArrayIntegerUnixMinusMilli, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayIntegerUnixMinusNano = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.OptionalArrayIntegerUnixMinusNano = append(s.OptionalArrayIntegerUnixMinusNano, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayIntegerUnixMinusSeconds = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.OptionalArrayIntegerUnixMinusSeconds = append(s.OptionalArrayIntegerUnixMinusSeconds, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayNull = nil
			for i := 0; i < 0; i++ {
				var elem struct{}
				{
					elem = struct{}{}
				}
				s.OptionalArrayNull = append(s.OptionalArrayNull, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayNumber = nil
			for i := 0; i < 0; i++ {
				var elem float64
				{
					elem = float64(0)
				}
				s.OptionalArrayNumber = append(s.OptionalArrayNumber, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayNumberDouble = nil
			for i := 0; i < 0; i++ {
				var elem float64
				{
					elem = float64(0)
				}
				s.OptionalArrayNumberDouble = append(s.OptionalArrayNumberDouble, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayNumberFloat = nil
			for i := 0; i < 0; i++ {
				var elem float32
				{
					elem = float32(0)
				}
				s.OptionalArrayNumberFloat = append(s.OptionalArrayNumberFloat, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayNumberInt32 = nil
			for i := 0; i < 0; i++ {
				var elem int32
				{
					elem = int32(0)
				}
				s.OptionalArrayNumberInt32 = append(s.OptionalArrayNumberInt32, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayNumberInt64 = nil
			for i := 0; i < 0; i++ {
				var elem int64
				{
					elem = int64(0)
				}
				s.OptionalArrayNumberInt64 = append(s.OptionalArrayNumberInt64, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayString = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.OptionalArrayString = append(s.OptionalArrayString, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringBase64 = nil
			for i := 0; i < 0; i++ {
				var elem []byte
				{
					elem = []byte("[]byte")
				}
				s.OptionalArrayStringBase64 = append(s.OptionalArrayStringBase64, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringBinary = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.OptionalArrayStringBinary = append(s.OptionalArrayStringBinary, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringByte = nil
			for i := 0; i < 0; i++ {
				var elem []byte
				{
					elem = []byte("[]byte")
				}
				s.OptionalArrayStringByte = append(s.OptionalArrayStringByte, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringDate = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.OptionalArrayStringDate = append(s.OptionalArrayStringDate, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringDateMinusTime = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.OptionalArrayStringDateMinusTime = append(s.OptionalArrayStringDateMinusTime, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringDuration = nil
			for i := 0; i < 0; i++ {
				var elem time.Duration
				{
					elem = time.Duration(5 * time.Second)
				}
				s.OptionalArrayStringDuration = append(s.OptionalArrayStringDuration, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringEmail = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.OptionalArrayStringEmail = append(s.OptionalArrayStringEmail, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringFloat32 = nil
			for i := 0; i < 0; i++ {
				var elem float32
				{
					elem = float32(0)
				}
				s.OptionalArrayStringFloat32 = append(s.OptionalArrayStringFloat32, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringFloat64 = nil
			for i := 0; i < 0; i++ {
				var elem float64
				{
					elem = float64(0)
				}
				s.OptionalArrayStringFloat64 = append(s.OptionalArrayStringFloat64, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringHostname = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.OptionalArrayStringHostname = append(s.OptionalArrayStringHostname, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringInt = nil
			for i := 0; i < 0; i++ {
				var elem int
				{
					elem = int(0)
				}
				s.OptionalArrayStringInt = append(s.OptionalArrayStringInt, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringInt16 = nil
			for i := 0; i < 0; i++ {
				var elem int16
				{
					elem = int16(0)
				}
				s.OptionalArrayStringInt16 = append(s.OptionalArrayStringInt16, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringInt32 = nil
			for i := 0; i < 0; i++ {
				var elem int32
				{
					elem = int32(0)
				}
				s.OptionalArrayStringInt32 = append(s.OptionalArrayStringInt32, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringInt64 = nil
			for i := 0; i < 0; i++ {
				var elem int64
				{
					elem = int64(0)
				}
				s.OptionalArrayStringInt64 = append(s.OptionalArrayStringInt64, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringInt8 = nil
			for i := 0; i < 0; i++ {
				var elem int8
				{
					elem = int8(0)
				}
				s.OptionalArrayStringInt8 = append(s.OptionalArrayStringInt8, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringIP = nil
			for i := 0; i < 0; i++ {
				var elem netip.Addr
				{
					elem = netip.MustParseAddr("127.0.0.1")
				}
				s.OptionalArrayStringIP = append(s.OptionalArrayStringIP, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringIpv4 = nil
			for i := 0; i < 0; i++ {
				var elem netip.Addr
				{
					elem = netip.MustParseAddr("127.0.0.1")
				}
				s.OptionalArrayStringIpv4 = append(s.OptionalArrayStringIpv4, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringIpv6 = nil
			for i := 0; i < 0; i++ {
				var elem netip.Addr
				{
					elem = netip.MustParseAddr("::1")
				}
				s.OptionalArrayStringIpv6 = append(s.OptionalArrayStringIpv6, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringPassword = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.OptionalArrayStringPassword = append(s.OptionalArrayStringPassword, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringTime = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.OptionalArrayStringTime = append(s.OptionalArrayStringTime, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringUint = nil
			for i := 0; i < 0; i++ {
				var elem uint
				{
					elem = uint(0)
				}
				s.OptionalArrayStringUint = append(s.OptionalArrayStringUint, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringUint16 = nil
			for i := 0; i < 0; i++ {
				var elem uint16
				{
					elem = uint16(0)
				}
				s.OptionalArrayStringUint16 = append(s.OptionalArrayStringUint16, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringUint32 = nil
			for i := 0; i < 0; i++ {
				var elem uint32
				{
					elem = uint32(0)
				}
				s.OptionalArrayStringUint32 = append(s.OptionalArrayStringUint32, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringUint64 = nil
			for i := 0; i < 0; i++ {
				var elem uint64
				{
					elem = uint64(0)
				}
				s.OptionalArrayStringUint64 = append(s.OptionalArrayStringUint64, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringUint8 = nil
			for i := 0; i < 0; i++ {
				var elem uint8
				{
					elem = uint8(0)
				}
				s.OptionalArrayStringUint8 = append(s.OptionalArrayStringUint8, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringUnix = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.OptionalArrayStringUnix = append(s.OptionalArrayStringUnix, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringUnixMinusMicro = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.OptionalArrayStringUnixMinusMicro = append(s.OptionalArrayStringUnixMinusMicro, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringUnixMinusMilli = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.OptionalArrayStringUnixMinusMilli = append(s.OptionalArrayStringUnixMinusMilli, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringUnixMinusNano = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.OptionalArrayStringUnixMinusNano = append(s.OptionalArrayStringUnixMinusNano, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringUnixMinusSeconds = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.OptionalArrayStringUnixMinusSeconds = append(s.OptionalArrayStringUnixMinusSeconds, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringURI = nil
			for i := 0; i < 0; i++ {
				var elem url.URL
				{
					elem = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
				}
				s.OptionalArrayStringURI = append(s.OptionalArrayStringURI, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringUUID = nil
			for i := 0; i < 0; i++ {
				var elem uuid.UUID
				{
					elem = uuid.New()
				}
				s.OptionalArrayStringUUID = append(s.OptionalArrayStringUUID, elem)
			}
		}
	}
	{
		{
			s.OptionalBoolean.SetFake()
		}
	}
	{
		{
			s.OptionalDoubleArrayAny = nil
			for i := 0; i < 0; i++ {
				var elem []jx.Raw
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem jx.Raw
						{
							elemElem = []byte("null")
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayAny = append(s.OptionalDoubleArrayAny, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayBoolean = nil
			for i := 0; i < 0; i++ {
				var elem []bool
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem bool
						{
							elemElem = true
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayBoolean = append(s.OptionalDoubleArrayBoolean, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayInteger = nil
			for i := 0; i < 0; i++ {
				var elem []int
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int
						{
							elemElem = int(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayInteger = append(s.OptionalDoubleArrayInteger, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayIntegerInt16 = nil
			for i := 0; i < 0; i++ {
				var elem []int16
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int16
						{
							elemElem = int16(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayIntegerInt16 = append(s.OptionalDoubleArrayIntegerInt16, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayIntegerInt32 = nil
			for i := 0; i < 0; i++ {
				var elem []int32
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int32
						{
							elemElem = int32(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayIntegerInt32 = append(s.OptionalDoubleArrayIntegerInt32, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayIntegerInt64 = nil
			for i := 0; i < 0; i++ {
				var elem []int64
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int64
						{
							elemElem = int64(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayIntegerInt64 = append(s.OptionalDoubleArrayIntegerInt64, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayIntegerInt8 = nil
			for i := 0; i < 0; i++ {
				var elem []int8
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int8
						{
							elemElem = int8(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayIntegerInt8 = append(s.OptionalDoubleArrayIntegerInt8, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayIntegerUint = nil
			for i := 0; i < 0; i++ {
				var elem []uint
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint
						{
							elemElem = uint(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayIntegerUint = append(s.OptionalDoubleArrayIntegerUint, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayIntegerUint16 = nil
			for i := 0; i < 0; i++ {
				var elem []uint16
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint16
						{
							elemElem = uint16(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayIntegerUint16 = append(s.OptionalDoubleArrayIntegerUint16, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayIntegerUint32 = nil
			for i := 0; i < 0; i++ {
				var elem []uint32
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint32
						{
							elemElem = uint32(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayIntegerUint32 = append(s.OptionalDoubleArrayIntegerUint32, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayIntegerUint64 = nil
			for i := 0; i < 0; i++ {
				var elem []uint64
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint64
						{
							elemElem = uint64(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayIntegerUint64 = append(s.OptionalDoubleArrayIntegerUint64, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayIntegerUint8 = nil
			for i := 0; i < 0; i++ {
				var elem []uint8
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint8
						{
							elemElem = uint8(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayIntegerUint8 = append(s.OptionalDoubleArrayIntegerUint8, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayIntegerUnix = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayIntegerUnix = append(s.OptionalDoubleArrayIntegerUnix, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayIntegerUnixMinusMicro = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayIntegerUnixMinusMicro = append(s.OptionalDoubleArrayIntegerUnixMinusMicro, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayIntegerUnixMinusMilli = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayIntegerUnixMinusMilli = append(s.OptionalDoubleArrayIntegerUnixMinusMilli, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayIntegerUnixMinusNano = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayIntegerUnixMinusNano = append(s.OptionalDoubleArrayIntegerUnixMinusNano, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayIntegerUnixMinusSeconds = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayIntegerUnixMinusSeconds = append(s.OptionalDoubleArrayIntegerUnixMinusSeconds, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayNull = nil
			for i := 0; i < 0; i++ {
				var elem []struct{}
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem struct{}
						{
							elemElem = struct{}{}
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayNull = append(s.OptionalDoubleArrayNull, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayNumber = nil
			for i := 0; i < 0; i++ {
				var elem []float64
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem float64
						{
							elemElem = float64(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayNumber = append(s.OptionalDoubleArrayNumber, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayNumberDouble = nil
			for i := 0; i < 0; i++ {
				var elem []float64
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem float64
						{
							elemElem = float64(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayNumberDouble = append(s.OptionalDoubleArrayNumberDouble, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayNumberFloat = nil
			for i := 0; i < 0; i++ {
				var elem []float32
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem float32
						{
							elemElem = float32(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayNumberFloat = append(s.OptionalDoubleArrayNumberFloat, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayNumberInt32 = nil
			for i := 0; i < 0; i++ {
				var elem []int32
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int32
						{
							elemElem = int32(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayNumberInt32 = append(s.OptionalDoubleArrayNumberInt32, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayNumberInt64 = nil
			for i := 0; i < 0; i++ {
				var elem []int64
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int64
						{
							elemElem = int64(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayNumberInt64 = append(s.OptionalDoubleArrayNumberInt64, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayString = nil
			for i := 0; i < 0; i++ {
				var elem []string
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem string
						{
							elemElem = "string"
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayString = append(s.OptionalDoubleArrayString, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringBase64 = nil
			for i := 0; i < 0; i++ {
				var elem [][]byte
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem []byte
						{
							elemElem = []byte("[]byte")
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringBase64 = append(s.OptionalDoubleArrayStringBase64, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringBinary = nil
			for i := 0; i < 0; i++ {
				var elem []string
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem string
						{
							elemElem = "string"
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringBinary = append(s.OptionalDoubleArrayStringBinary, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringByte = nil
			for i := 0; i < 0; i++ {
				var elem [][]byte
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem []byte
						{
							elemElem = []byte("[]byte")
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringByte = append(s.OptionalDoubleArrayStringByte, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringDate = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringDate = append(s.OptionalDoubleArrayStringDate, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringDateMinusTime = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringDateMinusTime = append(s.OptionalDoubleArrayStringDateMinusTime, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringDuration = nil
			for i := 0; i < 0; i++ {
				var elem []time.Duration
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Duration
						{
							elemElem = time.Duration(5 * time.Second)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringDuration = append(s.OptionalDoubleArrayStringDuration, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringEmail = nil
			for i := 0; i < 0; i++ {
				var elem []string
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem string
						{
							elemElem = "string"
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringEmail = append(s.OptionalDoubleArrayStringEmail, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringFloat32 = nil
			for i := 0; i < 0; i++ {
				var elem []float32
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem float32
						{
							elemElem = float32(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringFloat32 = append(s.OptionalDoubleArrayStringFloat32, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringFloat64 = nil
			for i := 0; i < 0; i++ {
				var elem []float64
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem float64
						{
							elemElem = float64(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringFloat64 = append(s.OptionalDoubleArrayStringFloat64, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringHostname = nil
			for i := 0; i < 0; i++ {
				var elem []string
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem string
						{
							elemElem = "string"
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringHostname = append(s.OptionalDoubleArrayStringHostname, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringInt = nil
			for i := 0; i < 0; i++ {
				var elem []int
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int
						{
							elemElem = int(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringInt = append(s.OptionalDoubleArrayStringInt, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringInt16 = nil
			for i := 0; i < 0; i++ {
				var elem []int16
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int16
						{
							elemElem = int16(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringInt16 = append(s.OptionalDoubleArrayStringInt16, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringInt32 = nil
			for i := 0; i < 0; i++ {
				var elem []int32
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int32
						{
							elemElem = int32(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringInt32 = append(s.OptionalDoubleArrayStringInt32, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringInt64 = nil
			for i := 0; i < 0; i++ {
				var elem []int64
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int64
						{
							elemElem = int64(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringInt64 = append(s.OptionalDoubleArrayStringInt64, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringInt8 = nil
			for i := 0; i < 0; i++ {
				var elem []int8
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int8
						{
							elemElem = int8(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringInt8 = append(s.OptionalDoubleArrayStringInt8, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringIP = nil
			for i := 0; i < 0; i++ {
				var elem []netip.Addr
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem netip.Addr
						{
							elemElem = netip.MustParseAddr("127.0.0.1")
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringIP = append(s.OptionalDoubleArrayStringIP, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringIpv4 = nil
			for i := 0; i < 0; i++ {
				var elem []netip.Addr
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem netip.Addr
						{
							elemElem = netip.MustParseAddr("127.0.0.1")
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringIpv4 = append(s.OptionalDoubleArrayStringIpv4, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringIpv6 = nil
			for i := 0; i < 0; i++ {
				var elem []netip.Addr
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem netip.Addr
						{
							elemElem = netip.MustParseAddr("::1")
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringIpv6 = append(s.OptionalDoubleArrayStringIpv6, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringPassword = nil
			for i := 0; i < 0; i++ {
				var elem []string
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem string
						{
							elemElem = "string"
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringPassword = append(s.OptionalDoubleArrayStringPassword, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringTime = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringTime = append(s.OptionalDoubleArrayStringTime, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringUint = nil
			for i := 0; i < 0; i++ {
				var elem []uint
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint
						{
							elemElem = uint(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringUint = append(s.OptionalDoubleArrayStringUint, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringUint16 = nil
			for i := 0; i < 0; i++ {
				var elem []uint16
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint16
						{
							elemElem = uint16(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringUint16 = append(s.OptionalDoubleArrayStringUint16, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringUint32 = nil
			for i := 0; i < 0; i++ {
				var elem []uint32
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint32
						{
							elemElem = uint32(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringUint32 = append(s.OptionalDoubleArrayStringUint32, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringUint64 = nil
			for i := 0; i < 0; i++ {
				var elem []uint64
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint64
						{
							elemElem = uint64(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringUint64 = append(s.OptionalDoubleArrayStringUint64, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringUint8 = nil
			for i := 0; i < 0; i++ {
				var elem []uint8
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint8
						{
							elemElem = uint8(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringUint8 = append(s.OptionalDoubleArrayStringUint8, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringUnix = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringUnix = append(s.OptionalDoubleArrayStringUnix, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringUnixMinusMicro = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringUnixMinusMicro = append(s.OptionalDoubleArrayStringUnixMinusMicro, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringUnixMinusMilli = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringUnixMinusMilli = append(s.OptionalDoubleArrayStringUnixMinusMilli, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringUnixMinusNano = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringUnixMinusNano = append(s.OptionalDoubleArrayStringUnixMinusNano, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringUnixMinusSeconds = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringUnixMinusSeconds = append(s.OptionalDoubleArrayStringUnixMinusSeconds, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringURI = nil
			for i := 0; i < 0; i++ {
				var elem []url.URL
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem url.URL
						{
							elemElem = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringURI = append(s.OptionalDoubleArrayStringURI, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringUUID = nil
			for i := 0; i < 0; i++ {
				var elem []uuid.UUID
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uuid.UUID
						{
							elemElem = uuid.New()
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringUUID = append(s.OptionalDoubleArrayStringUUID, elem)
			}
		}
	}
	{
		{
			s.OptionalInteger.SetFake()
		}
	}
	{
		{
			s.OptionalIntegerInt16.SetFake()
		}
	}
	{
		{
			s.OptionalIntegerInt32.SetFake()
		}
	}
	{
		{
			s.OptionalIntegerInt64.SetFake()
		}
	}
	{
		{
			s.OptionalIntegerInt8.SetFake()
		}
	}
	{
		{
			s.OptionalIntegerUint.SetFake()
		}
	}
	{
		{
			s.OptionalIntegerUint16.SetFake()
		}
	}
	{
		{
			s.OptionalIntegerUint32.SetFake()
		}
	}
	{
		{
			s.OptionalIntegerUint64.SetFake()
		}
	}
	{
		{
			s.OptionalIntegerUint8.SetFake()
		}
	}
	{
		{
			s.OptionalIntegerUnix.SetFake()
		}
	}
	{
		{
			s.OptionalIntegerUnixMinusMicro.SetFake()
		}
	}
	{
		{
			s.OptionalIntegerUnixMinusMilli.SetFake()
		}
	}
	{
		{
			s.OptionalIntegerUnixMinusNano.SetFake()
		}
	}
	{
		{
			s.OptionalIntegerUnixMinusSeconds.SetFake()
		}
	}
	{
		{
			s.OptionalNull.SetFake()
		}
	}
	{
		{
			s.OptionalNumber.SetFake()
		}
	}
	{
		{
			s.OptionalNumberDouble.SetFake()
		}
	}
	{
		{
			s.OptionalNumberFloat.SetFake()
		}
	}
	{
		{
			s.OptionalNumberInt32.SetFake()
		}
	}
	{
		{
			s.OptionalNumberInt64.SetFake()
		}
	}
	{
		{
			s.OptionalString.SetFake()
		}
	}
	{
		{
			s.OptionalStringBase64 = []byte("[]byte")
		}
	}
	{
		{
			s.OptionalStringBinary.SetFake()
		}
	}
	{
		{
			s.OptionalStringByte = []byte("[]byte")
		}
	}
	{
		{
			s.OptionalStringDate.SetFake()
		}
	}
	{
		{
			s.OptionalStringDateMinusTime.SetFake()
		}
	}
	{
		{
			s.OptionalStringDuration.SetFake()
		}
	}
	{
		{
			s.OptionalStringEmail.SetFake()
		}
	}
	{
		{
			s.OptionalStringFloat32.SetFake()
		}
	}
	{
		{
			s.OptionalStringFloat64.SetFake()
		}
	}
	{
		{
			s.OptionalStringHostname.SetFake()
		}
	}
	{
		{
			s.OptionalStringInt.SetFake()
		}
	}
	{
		{
			s.OptionalStringInt16.SetFake()
		}
	}
	{
		{
			s.OptionalStringInt32.SetFake()
		}
	}
	{
		{
			s.OptionalStringInt64.SetFake()
		}
	}
	{
		{
			s.OptionalStringInt8.SetFake()
		}
	}
	{
		{
			s.OptionalStringIP.SetFake()
		}
	}
	{
		{
			s.OptionalStringIpv4.SetFake()
		}
	}
	{
		{
			s.OptionalStringIpv6.SetFake()
		}
	}
	{
		{
			s.OptionalStringPassword.SetFake()
		}
	}
	{
		{
			s.OptionalStringTime.SetFake()
		}
	}
	{
		{
			s.OptionalStringUint.SetFake()
		}
	}
	{
		{
			s.OptionalStringUint16.SetFake()
		}
	}
	{
		{
			s.OptionalStringUint32.SetFake()
		}
	}
	{
		{
			s.OptionalStringUint64.SetFake()
		}
	}
	{
		{
			s.OptionalStringUint8.SetFake()
		}
	}
	{
		{
			s.OptionalStringUnix.SetFake()
		}
	}
	{
		{
			s.OptionalStringUnixMinusMicro.SetFake()
		}
	}
	{
		{
			s.OptionalStringUnixMinusMilli.SetFake()
		}
	}
	{
		{
			s.OptionalStringUnixMinusNano.SetFake()
		}
	}
	{
		{
			s.OptionalStringUnixMinusSeconds.SetFake()
		}
	}
	{
		{
			s.OptionalStringURI.SetFake()
		}
	}
	{
		{
			s.OptionalStringUUID.SetFake()
		}
	}
}

// SetFake set fake values.
func (s *TestResponseEmptyStructOK) SetFake() {
}

// SetFake set fake values.
func (s *TestResponseFormatTestOK) SetFake() {
	{
		{
			s.RequiredAny = []byte("null")
		}
	}
	{
		{
			s.RequiredArrayAny = nil
			for i := 0; i < 0; i++ {
				var elem jx.Raw
				{
					elem = []byte("null")
				}
				s.RequiredArrayAny = append(s.RequiredArrayAny, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayBoolean = nil
			for i := 0; i < 0; i++ {
				var elem bool
				{
					elem = true
				}
				s.RequiredArrayBoolean = append(s.RequiredArrayBoolean, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayInteger = nil
			for i := 0; i < 0; i++ {
				var elem int
				{
					elem = int(0)
				}
				s.RequiredArrayInteger = append(s.RequiredArrayInteger, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayIntegerInt16 = nil
			for i := 0; i < 0; i++ {
				var elem int16
				{
					elem = int16(0)
				}
				s.RequiredArrayIntegerInt16 = append(s.RequiredArrayIntegerInt16, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayIntegerInt32 = nil
			for i := 0; i < 0; i++ {
				var elem int32
				{
					elem = int32(0)
				}
				s.RequiredArrayIntegerInt32 = append(s.RequiredArrayIntegerInt32, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayIntegerInt64 = nil
			for i := 0; i < 0; i++ {
				var elem int64
				{
					elem = int64(0)
				}
				s.RequiredArrayIntegerInt64 = append(s.RequiredArrayIntegerInt64, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayIntegerInt8 = nil
			for i := 0; i < 0; i++ {
				var elem int8
				{
					elem = int8(0)
				}
				s.RequiredArrayIntegerInt8 = append(s.RequiredArrayIntegerInt8, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayIntegerUint = nil
			for i := 0; i < 0; i++ {
				var elem uint
				{
					elem = uint(0)
				}
				s.RequiredArrayIntegerUint = append(s.RequiredArrayIntegerUint, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayIntegerUint16 = nil
			for i := 0; i < 0; i++ {
				var elem uint16
				{
					elem = uint16(0)
				}
				s.RequiredArrayIntegerUint16 = append(s.RequiredArrayIntegerUint16, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayIntegerUint32 = nil
			for i := 0; i < 0; i++ {
				var elem uint32
				{
					elem = uint32(0)
				}
				s.RequiredArrayIntegerUint32 = append(s.RequiredArrayIntegerUint32, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayIntegerUint64 = nil
			for i := 0; i < 0; i++ {
				var elem uint64
				{
					elem = uint64(0)
				}
				s.RequiredArrayIntegerUint64 = append(s.RequiredArrayIntegerUint64, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayIntegerUint8 = nil
			for i := 0; i < 0; i++ {
				var elem uint8
				{
					elem = uint8(0)
				}
				s.RequiredArrayIntegerUint8 = append(s.RequiredArrayIntegerUint8, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayIntegerUnix = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.RequiredArrayIntegerUnix = append(s.RequiredArrayIntegerUnix, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayIntegerUnixMinusMicro = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.RequiredArrayIntegerUnixMinusMicro = append(s.RequiredArrayIntegerUnixMinusMicro, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayIntegerUnixMinusMilli = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.RequiredArrayIntegerUnixMinusMilli = append(s.RequiredArrayIntegerUnixMinusMilli, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayIntegerUnixMinusNano = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.RequiredArrayIntegerUnixMinusNano = append(s.RequiredArrayIntegerUnixMinusNano, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayIntegerUnixMinusSeconds = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.RequiredArrayIntegerUnixMinusSeconds = append(s.RequiredArrayIntegerUnixMinusSeconds, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayNull = nil
			for i := 0; i < 0; i++ {
				var elem struct{}
				{
					elem = struct{}{}
				}
				s.RequiredArrayNull = append(s.RequiredArrayNull, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayNumber = nil
			for i := 0; i < 0; i++ {
				var elem float64
				{
					elem = float64(0)
				}
				s.RequiredArrayNumber = append(s.RequiredArrayNumber, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayNumberDouble = nil
			for i := 0; i < 0; i++ {
				var elem float64
				{
					elem = float64(0)
				}
				s.RequiredArrayNumberDouble = append(s.RequiredArrayNumberDouble, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayNumberFloat = nil
			for i := 0; i < 0; i++ {
				var elem float32
				{
					elem = float32(0)
				}
				s.RequiredArrayNumberFloat = append(s.RequiredArrayNumberFloat, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayNumberInt32 = nil
			for i := 0; i < 0; i++ {
				var elem int32
				{
					elem = int32(0)
				}
				s.RequiredArrayNumberInt32 = append(s.RequiredArrayNumberInt32, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayNumberInt64 = nil
			for i := 0; i < 0; i++ {
				var elem int64
				{
					elem = int64(0)
				}
				s.RequiredArrayNumberInt64 = append(s.RequiredArrayNumberInt64, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayString = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.RequiredArrayString = append(s.RequiredArrayString, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringBase64 = nil
			for i := 0; i < 0; i++ {
				var elem []byte
				{
					elem = []byte("[]byte")
				}
				s.RequiredArrayStringBase64 = append(s.RequiredArrayStringBase64, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringBinary = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.RequiredArrayStringBinary = append(s.RequiredArrayStringBinary, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringByte = nil
			for i := 0; i < 0; i++ {
				var elem []byte
				{
					elem = []byte("[]byte")
				}
				s.RequiredArrayStringByte = append(s.RequiredArrayStringByte, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringDate = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.RequiredArrayStringDate = append(s.RequiredArrayStringDate, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringDateMinusTime = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.RequiredArrayStringDateMinusTime = append(s.RequiredArrayStringDateMinusTime, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringDuration = nil
			for i := 0; i < 0; i++ {
				var elem time.Duration
				{
					elem = time.Duration(5 * time.Second)
				}
				s.RequiredArrayStringDuration = append(s.RequiredArrayStringDuration, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringEmail = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.RequiredArrayStringEmail = append(s.RequiredArrayStringEmail, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringFloat32 = nil
			for i := 0; i < 0; i++ {
				var elem float32
				{
					elem = float32(0)
				}
				s.RequiredArrayStringFloat32 = append(s.RequiredArrayStringFloat32, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringFloat64 = nil
			for i := 0; i < 0; i++ {
				var elem float64
				{
					elem = float64(0)
				}
				s.RequiredArrayStringFloat64 = append(s.RequiredArrayStringFloat64, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringHostname = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.RequiredArrayStringHostname = append(s.RequiredArrayStringHostname, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringInt = nil
			for i := 0; i < 0; i++ {
				var elem int
				{
					elem = int(0)
				}
				s.RequiredArrayStringInt = append(s.RequiredArrayStringInt, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringInt16 = nil
			for i := 0; i < 0; i++ {
				var elem int16
				{
					elem = int16(0)
				}
				s.RequiredArrayStringInt16 = append(s.RequiredArrayStringInt16, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringInt32 = nil
			for i := 0; i < 0; i++ {
				var elem int32
				{
					elem = int32(0)
				}
				s.RequiredArrayStringInt32 = append(s.RequiredArrayStringInt32, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringInt64 = nil
			for i := 0; i < 0; i++ {
				var elem int64
				{
					elem = int64(0)
				}
				s.RequiredArrayStringInt64 = append(s.RequiredArrayStringInt64, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringInt8 = nil
			for i := 0; i < 0; i++ {
				var elem int8
				{
					elem = int8(0)
				}
				s.RequiredArrayStringInt8 = append(s.RequiredArrayStringInt8, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringIP = nil
			for i := 0; i < 0; i++ {
				var elem netip.Addr
				{
					elem = netip.MustParseAddr("127.0.0.1")
				}
				s.RequiredArrayStringIP = append(s.RequiredArrayStringIP, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringIpv4 = nil
			for i := 0; i < 0; i++ {
				var elem netip.Addr
				{
					elem = netip.MustParseAddr("127.0.0.1")
				}
				s.RequiredArrayStringIpv4 = append(s.RequiredArrayStringIpv4, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringIpv6 = nil
			for i := 0; i < 0; i++ {
				var elem netip.Addr
				{
					elem = netip.MustParseAddr("::1")
				}
				s.RequiredArrayStringIpv6 = append(s.RequiredArrayStringIpv6, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringPassword = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.RequiredArrayStringPassword = append(s.RequiredArrayStringPassword, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringTime = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.RequiredArrayStringTime = append(s.RequiredArrayStringTime, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringUint = nil
			for i := 0; i < 0; i++ {
				var elem uint
				{
					elem = uint(0)
				}
				s.RequiredArrayStringUint = append(s.RequiredArrayStringUint, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringUint16 = nil
			for i := 0; i < 0; i++ {
				var elem uint16
				{
					elem = uint16(0)
				}
				s.RequiredArrayStringUint16 = append(s.RequiredArrayStringUint16, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringUint32 = nil
			for i := 0; i < 0; i++ {
				var elem uint32
				{
					elem = uint32(0)
				}
				s.RequiredArrayStringUint32 = append(s.RequiredArrayStringUint32, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringUint64 = nil
			for i := 0; i < 0; i++ {
				var elem uint64
				{
					elem = uint64(0)
				}
				s.RequiredArrayStringUint64 = append(s.RequiredArrayStringUint64, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringUint8 = nil
			for i := 0; i < 0; i++ {
				var elem uint8
				{
					elem = uint8(0)
				}
				s.RequiredArrayStringUint8 = append(s.RequiredArrayStringUint8, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringUnix = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.RequiredArrayStringUnix = append(s.RequiredArrayStringUnix, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringUnixMinusMicro = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.RequiredArrayStringUnixMinusMicro = append(s.RequiredArrayStringUnixMinusMicro, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringUnixMinusMilli = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.RequiredArrayStringUnixMinusMilli = append(s.RequiredArrayStringUnixMinusMilli, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringUnixMinusNano = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.RequiredArrayStringUnixMinusNano = append(s.RequiredArrayStringUnixMinusNano, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringUnixMinusSeconds = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.RequiredArrayStringUnixMinusSeconds = append(s.RequiredArrayStringUnixMinusSeconds, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringURI = nil
			for i := 0; i < 0; i++ {
				var elem url.URL
				{
					elem = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
				}
				s.RequiredArrayStringURI = append(s.RequiredArrayStringURI, elem)
			}
		}
	}
	{
		{
			s.RequiredArrayStringUUID = nil
			for i := 0; i < 0; i++ {
				var elem uuid.UUID
				{
					elem = uuid.New()
				}
				s.RequiredArrayStringUUID = append(s.RequiredArrayStringUUID, elem)
			}
		}
	}
	{
		{
			s.RequiredBoolean = true
		}
	}
	{
		{
			s.RequiredDoubleArrayAny = nil
			for i := 0; i < 0; i++ {
				var elem []jx.Raw
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem jx.Raw
						{
							elemElem = []byte("null")
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayAny = append(s.RequiredDoubleArrayAny, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayBoolean = nil
			for i := 0; i < 0; i++ {
				var elem []bool
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem bool
						{
							elemElem = true
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayBoolean = append(s.RequiredDoubleArrayBoolean, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayInteger = nil
			for i := 0; i < 0; i++ {
				var elem []int
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int
						{
							elemElem = int(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayInteger = append(s.RequiredDoubleArrayInteger, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayIntegerInt16 = nil
			for i := 0; i < 0; i++ {
				var elem []int16
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int16
						{
							elemElem = int16(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayIntegerInt16 = append(s.RequiredDoubleArrayIntegerInt16, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayIntegerInt32 = nil
			for i := 0; i < 0; i++ {
				var elem []int32
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int32
						{
							elemElem = int32(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayIntegerInt32 = append(s.RequiredDoubleArrayIntegerInt32, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayIntegerInt64 = nil
			for i := 0; i < 0; i++ {
				var elem []int64
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int64
						{
							elemElem = int64(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayIntegerInt64 = append(s.RequiredDoubleArrayIntegerInt64, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayIntegerInt8 = nil
			for i := 0; i < 0; i++ {
				var elem []int8
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int8
						{
							elemElem = int8(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayIntegerInt8 = append(s.RequiredDoubleArrayIntegerInt8, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayIntegerUint = nil
			for i := 0; i < 0; i++ {
				var elem []uint
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint
						{
							elemElem = uint(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayIntegerUint = append(s.RequiredDoubleArrayIntegerUint, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayIntegerUint16 = nil
			for i := 0; i < 0; i++ {
				var elem []uint16
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint16
						{
							elemElem = uint16(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayIntegerUint16 = append(s.RequiredDoubleArrayIntegerUint16, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayIntegerUint32 = nil
			for i := 0; i < 0; i++ {
				var elem []uint32
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint32
						{
							elemElem = uint32(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayIntegerUint32 = append(s.RequiredDoubleArrayIntegerUint32, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayIntegerUint64 = nil
			for i := 0; i < 0; i++ {
				var elem []uint64
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint64
						{
							elemElem = uint64(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayIntegerUint64 = append(s.RequiredDoubleArrayIntegerUint64, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayIntegerUint8 = nil
			for i := 0; i < 0; i++ {
				var elem []uint8
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint8
						{
							elemElem = uint8(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayIntegerUint8 = append(s.RequiredDoubleArrayIntegerUint8, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayIntegerUnix = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayIntegerUnix = append(s.RequiredDoubleArrayIntegerUnix, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayIntegerUnixMinusMicro = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayIntegerUnixMinusMicro = append(s.RequiredDoubleArrayIntegerUnixMinusMicro, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayIntegerUnixMinusMilli = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayIntegerUnixMinusMilli = append(s.RequiredDoubleArrayIntegerUnixMinusMilli, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayIntegerUnixMinusNano = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayIntegerUnixMinusNano = append(s.RequiredDoubleArrayIntegerUnixMinusNano, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayIntegerUnixMinusSeconds = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayIntegerUnixMinusSeconds = append(s.RequiredDoubleArrayIntegerUnixMinusSeconds, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayNull = nil
			for i := 0; i < 0; i++ {
				var elem []struct{}
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem struct{}
						{
							elemElem = struct{}{}
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayNull = append(s.RequiredDoubleArrayNull, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayNumber = nil
			for i := 0; i < 0; i++ {
				var elem []float64
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem float64
						{
							elemElem = float64(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayNumber = append(s.RequiredDoubleArrayNumber, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayNumberDouble = nil
			for i := 0; i < 0; i++ {
				var elem []float64
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem float64
						{
							elemElem = float64(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayNumberDouble = append(s.RequiredDoubleArrayNumberDouble, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayNumberFloat = nil
			for i := 0; i < 0; i++ {
				var elem []float32
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem float32
						{
							elemElem = float32(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayNumberFloat = append(s.RequiredDoubleArrayNumberFloat, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayNumberInt32 = nil
			for i := 0; i < 0; i++ {
				var elem []int32
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int32
						{
							elemElem = int32(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayNumberInt32 = append(s.RequiredDoubleArrayNumberInt32, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayNumberInt64 = nil
			for i := 0; i < 0; i++ {
				var elem []int64
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int64
						{
							elemElem = int64(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayNumberInt64 = append(s.RequiredDoubleArrayNumberInt64, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayString = nil
			for i := 0; i < 0; i++ {
				var elem []string
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem string
						{
							elemElem = "string"
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayString = append(s.RequiredDoubleArrayString, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringBase64 = nil
			for i := 0; i < 0; i++ {
				var elem [][]byte
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem []byte
						{
							elemElem = []byte("[]byte")
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringBase64 = append(s.RequiredDoubleArrayStringBase64, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringBinary = nil
			for i := 0; i < 0; i++ {
				var elem []string
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem string
						{
							elemElem = "string"
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringBinary = append(s.RequiredDoubleArrayStringBinary, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringByte = nil
			for i := 0; i < 0; i++ {
				var elem [][]byte
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem []byte
						{
							elemElem = []byte("[]byte")
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringByte = append(s.RequiredDoubleArrayStringByte, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringDate = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringDate = append(s.RequiredDoubleArrayStringDate, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringDateMinusTime = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringDateMinusTime = append(s.RequiredDoubleArrayStringDateMinusTime, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringDuration = nil
			for i := 0; i < 0; i++ {
				var elem []time.Duration
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Duration
						{
							elemElem = time.Duration(5 * time.Second)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringDuration = append(s.RequiredDoubleArrayStringDuration, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringEmail = nil
			for i := 0; i < 0; i++ {
				var elem []string
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem string
						{
							elemElem = "string"
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringEmail = append(s.RequiredDoubleArrayStringEmail, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringFloat32 = nil
			for i := 0; i < 0; i++ {
				var elem []float32
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem float32
						{
							elemElem = float32(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringFloat32 = append(s.RequiredDoubleArrayStringFloat32, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringFloat64 = nil
			for i := 0; i < 0; i++ {
				var elem []float64
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem float64
						{
							elemElem = float64(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringFloat64 = append(s.RequiredDoubleArrayStringFloat64, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringHostname = nil
			for i := 0; i < 0; i++ {
				var elem []string
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem string
						{
							elemElem = "string"
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringHostname = append(s.RequiredDoubleArrayStringHostname, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringInt = nil
			for i := 0; i < 0; i++ {
				var elem []int
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int
						{
							elemElem = int(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringInt = append(s.RequiredDoubleArrayStringInt, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringInt16 = nil
			for i := 0; i < 0; i++ {
				var elem []int16
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int16
						{
							elemElem = int16(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringInt16 = append(s.RequiredDoubleArrayStringInt16, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringInt32 = nil
			for i := 0; i < 0; i++ {
				var elem []int32
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int32
						{
							elemElem = int32(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringInt32 = append(s.RequiredDoubleArrayStringInt32, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringInt64 = nil
			for i := 0; i < 0; i++ {
				var elem []int64
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int64
						{
							elemElem = int64(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringInt64 = append(s.RequiredDoubleArrayStringInt64, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringInt8 = nil
			for i := 0; i < 0; i++ {
				var elem []int8
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int8
						{
							elemElem = int8(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringInt8 = append(s.RequiredDoubleArrayStringInt8, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringIP = nil
			for i := 0; i < 0; i++ {
				var elem []netip.Addr
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem netip.Addr
						{
							elemElem = netip.MustParseAddr("127.0.0.1")
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringIP = append(s.RequiredDoubleArrayStringIP, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringIpv4 = nil
			for i := 0; i < 0; i++ {
				var elem []netip.Addr
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem netip.Addr
						{
							elemElem = netip.MustParseAddr("127.0.0.1")
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringIpv4 = append(s.RequiredDoubleArrayStringIpv4, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringIpv6 = nil
			for i := 0; i < 0; i++ {
				var elem []netip.Addr
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem netip.Addr
						{
							elemElem = netip.MustParseAddr("::1")
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringIpv6 = append(s.RequiredDoubleArrayStringIpv6, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringPassword = nil
			for i := 0; i < 0; i++ {
				var elem []string
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem string
						{
							elemElem = "string"
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringPassword = append(s.RequiredDoubleArrayStringPassword, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringTime = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringTime = append(s.RequiredDoubleArrayStringTime, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringUint = nil
			for i := 0; i < 0; i++ {
				var elem []uint
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint
						{
							elemElem = uint(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringUint = append(s.RequiredDoubleArrayStringUint, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringUint16 = nil
			for i := 0; i < 0; i++ {
				var elem []uint16
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint16
						{
							elemElem = uint16(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringUint16 = append(s.RequiredDoubleArrayStringUint16, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringUint32 = nil
			for i := 0; i < 0; i++ {
				var elem []uint32
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint32
						{
							elemElem = uint32(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringUint32 = append(s.RequiredDoubleArrayStringUint32, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringUint64 = nil
			for i := 0; i < 0; i++ {
				var elem []uint64
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint64
						{
							elemElem = uint64(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringUint64 = append(s.RequiredDoubleArrayStringUint64, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringUint8 = nil
			for i := 0; i < 0; i++ {
				var elem []uint8
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint8
						{
							elemElem = uint8(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringUint8 = append(s.RequiredDoubleArrayStringUint8, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringUnix = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringUnix = append(s.RequiredDoubleArrayStringUnix, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringUnixMinusMicro = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringUnixMinusMicro = append(s.RequiredDoubleArrayStringUnixMinusMicro, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringUnixMinusMilli = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringUnixMinusMilli = append(s.RequiredDoubleArrayStringUnixMinusMilli, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringUnixMinusNano = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringUnixMinusNano = append(s.RequiredDoubleArrayStringUnixMinusNano, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringUnixMinusSeconds = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringUnixMinusSeconds = append(s.RequiredDoubleArrayStringUnixMinusSeconds, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringURI = nil
			for i := 0; i < 0; i++ {
				var elem []url.URL
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem url.URL
						{
							elemElem = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringURI = append(s.RequiredDoubleArrayStringURI, elem)
			}
		}
	}
	{
		{
			s.RequiredDoubleArrayStringUUID = nil
			for i := 0; i < 0; i++ {
				var elem []uuid.UUID
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uuid.UUID
						{
							elemElem = uuid.New()
						}
						elem = append(elem, elemElem)
					}
				}
				s.RequiredDoubleArrayStringUUID = append(s.RequiredDoubleArrayStringUUID, elem)
			}
		}
	}
	{
		{
			s.RequiredInteger = int(0)
		}
	}
	{
		{
			s.RequiredIntegerInt16 = int16(0)
		}
	}
	{
		{
			s.RequiredIntegerInt32 = int32(0)
		}
	}
	{
		{
			s.RequiredIntegerInt64 = int64(0)
		}
	}
	{
		{
			s.RequiredIntegerInt8 = int8(0)
		}
	}
	{
		{
			s.RequiredIntegerUint = uint(0)
		}
	}
	{
		{
			s.RequiredIntegerUint16 = uint16(0)
		}
	}
	{
		{
			s.RequiredIntegerUint32 = uint32(0)
		}
	}
	{
		{
			s.RequiredIntegerUint64 = uint64(0)
		}
	}
	{
		{
			s.RequiredIntegerUint8 = uint8(0)
		}
	}
	{
		{
			s.RequiredIntegerUnix = time.Now()
		}
	}
	{
		{
			s.RequiredIntegerUnixMinusMicro = time.Now()
		}
	}
	{
		{
			s.RequiredIntegerUnixMinusMilli = time.Now()
		}
	}
	{
		{
			s.RequiredIntegerUnixMinusNano = time.Now()
		}
	}
	{
		{
			s.RequiredIntegerUnixMinusSeconds = time.Now()
		}
	}
	{
		{
			s.RequiredNull = struct{}{}
		}
	}
	{
		{
			s.RequiredNumber = float64(0)
		}
	}
	{
		{
			s.RequiredNumberDouble = float64(0)
		}
	}
	{
		{
			s.RequiredNumberFloat = float32(0)
		}
	}
	{
		{
			s.RequiredNumberInt32 = int32(0)
		}
	}
	{
		{
			s.RequiredNumberInt64 = int64(0)
		}
	}
	{
		{
			s.RequiredString = "string"
		}
	}
	{
		{
			s.RequiredStringBase64 = []byte("[]byte")
		}
	}
	{
		{
			s.RequiredStringBinary = "string"
		}
	}
	{
		{
			s.RequiredStringByte = []byte("[]byte")
		}
	}
	{
		{
			s.RequiredStringDate = time.Now()
		}
	}
	{
		{
			s.RequiredStringDateMinusTime = time.Now()
		}
	}
	{
		{
			s.RequiredStringDuration = time.Duration(5 * time.Second)
		}
	}
	{
		{
			s.RequiredStringEmail = "string"
		}
	}
	{
		{
			s.RequiredStringFloat32 = float32(0)
		}
	}
	{
		{
			s.RequiredStringFloat64 = float64(0)
		}
	}
	{
		{
			s.RequiredStringHostname = "string"
		}
	}
	{
		{
			s.RequiredStringInt = int(0)
		}
	}
	{
		{
			s.RequiredStringInt16 = int16(0)
		}
	}
	{
		{
			s.RequiredStringInt32 = int32(0)
		}
	}
	{
		{
			s.RequiredStringInt64 = int64(0)
		}
	}
	{
		{
			s.RequiredStringInt8 = int8(0)
		}
	}
	{
		{
			s.RequiredStringIP = netip.MustParseAddr("127.0.0.1")
		}
	}
	{
		{
			s.RequiredStringIpv4 = netip.MustParseAddr("127.0.0.1")
		}
	}
	{
		{
			s.RequiredStringIpv6 = netip.MustParseAddr("::1")
		}
	}
	{
		{
			s.RequiredStringPassword = "string"
		}
	}
	{
		{
			s.RequiredStringTime = time.Now()
		}
	}
	{
		{
			s.RequiredStringUint = uint(0)
		}
	}
	{
		{
			s.RequiredStringUint16 = uint16(0)
		}
	}
	{
		{
			s.RequiredStringUint32 = uint32(0)
		}
	}
	{
		{
			s.RequiredStringUint64 = uint64(0)
		}
	}
	{
		{
			s.RequiredStringUint8 = uint8(0)
		}
	}
	{
		{
			s.RequiredStringUnix = time.Now()
		}
	}
	{
		{
			s.RequiredStringUnixMinusMicro = time.Now()
		}
	}
	{
		{
			s.RequiredStringUnixMinusMilli = time.Now()
		}
	}
	{
		{
			s.RequiredStringUnixMinusNano = time.Now()
		}
	}
	{
		{
			s.RequiredStringUnixMinusSeconds = time.Now()
		}
	}
	{
		{
			s.RequiredStringURI = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
		}
	}
	{
		{
			s.RequiredStringUUID = uuid.New()
		}
	}
	{
		{
			s.OptionalAny = []byte("null")
		}
	}
	{
		{
			s.OptionalArrayAny = nil
			for i := 0; i < 0; i++ {
				var elem jx.Raw
				{
					elem = []byte("null")
				}
				s.OptionalArrayAny = append(s.OptionalArrayAny, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayBoolean = nil
			for i := 0; i < 0; i++ {
				var elem bool
				{
					elem = true
				}
				s.OptionalArrayBoolean = append(s.OptionalArrayBoolean, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayInteger = nil
			for i := 0; i < 0; i++ {
				var elem int
				{
					elem = int(0)
				}
				s.OptionalArrayInteger = append(s.OptionalArrayInteger, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayIntegerInt16 = nil
			for i := 0; i < 0; i++ {
				var elem int16
				{
					elem = int16(0)
				}
				s.OptionalArrayIntegerInt16 = append(s.OptionalArrayIntegerInt16, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayIntegerInt32 = nil
			for i := 0; i < 0; i++ {
				var elem int32
				{
					elem = int32(0)
				}
				s.OptionalArrayIntegerInt32 = append(s.OptionalArrayIntegerInt32, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayIntegerInt64 = nil
			for i := 0; i < 0; i++ {
				var elem int64
				{
					elem = int64(0)
				}
				s.OptionalArrayIntegerInt64 = append(s.OptionalArrayIntegerInt64, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayIntegerInt8 = nil
			for i := 0; i < 0; i++ {
				var elem int8
				{
					elem = int8(0)
				}
				s.OptionalArrayIntegerInt8 = append(s.OptionalArrayIntegerInt8, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayIntegerUint = nil
			for i := 0; i < 0; i++ {
				var elem uint
				{
					elem = uint(0)
				}
				s.OptionalArrayIntegerUint = append(s.OptionalArrayIntegerUint, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayIntegerUint16 = nil
			for i := 0; i < 0; i++ {
				var elem uint16
				{
					elem = uint16(0)
				}
				s.OptionalArrayIntegerUint16 = append(s.OptionalArrayIntegerUint16, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayIntegerUint32 = nil
			for i := 0; i < 0; i++ {
				var elem uint32
				{
					elem = uint32(0)
				}
				s.OptionalArrayIntegerUint32 = append(s.OptionalArrayIntegerUint32, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayIntegerUint64 = nil
			for i := 0; i < 0; i++ {
				var elem uint64
				{
					elem = uint64(0)
				}
				s.OptionalArrayIntegerUint64 = append(s.OptionalArrayIntegerUint64, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayIntegerUint8 = nil
			for i := 0; i < 0; i++ {
				var elem uint8
				{
					elem = uint8(0)
				}
				s.OptionalArrayIntegerUint8 = append(s.OptionalArrayIntegerUint8, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayIntegerUnix = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.OptionalArrayIntegerUnix = append(s.OptionalArrayIntegerUnix, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayIntegerUnixMinusMicro = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.OptionalArrayIntegerUnixMinusMicro = append(s.OptionalArrayIntegerUnixMinusMicro, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayIntegerUnixMinusMilli = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.OptionalArrayIntegerUnixMinusMilli = append(s.OptionalArrayIntegerUnixMinusMilli, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayIntegerUnixMinusNano = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.OptionalArrayIntegerUnixMinusNano = append(s.OptionalArrayIntegerUnixMinusNano, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayIntegerUnixMinusSeconds = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.OptionalArrayIntegerUnixMinusSeconds = append(s.OptionalArrayIntegerUnixMinusSeconds, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayNull = nil
			for i := 0; i < 0; i++ {
				var elem struct{}
				{
					elem = struct{}{}
				}
				s.OptionalArrayNull = append(s.OptionalArrayNull, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayNumber = nil
			for i := 0; i < 0; i++ {
				var elem float64
				{
					elem = float64(0)
				}
				s.OptionalArrayNumber = append(s.OptionalArrayNumber, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayNumberDouble = nil
			for i := 0; i < 0; i++ {
				var elem float64
				{
					elem = float64(0)
				}
				s.OptionalArrayNumberDouble = append(s.OptionalArrayNumberDouble, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayNumberFloat = nil
			for i := 0; i < 0; i++ {
				var elem float32
				{
					elem = float32(0)
				}
				s.OptionalArrayNumberFloat = append(s.OptionalArrayNumberFloat, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayNumberInt32 = nil
			for i := 0; i < 0; i++ {
				var elem int32
				{
					elem = int32(0)
				}
				s.OptionalArrayNumberInt32 = append(s.OptionalArrayNumberInt32, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayNumberInt64 = nil
			for i := 0; i < 0; i++ {
				var elem int64
				{
					elem = int64(0)
				}
				s.OptionalArrayNumberInt64 = append(s.OptionalArrayNumberInt64, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayString = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.OptionalArrayString = append(s.OptionalArrayString, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringBase64 = nil
			for i := 0; i < 0; i++ {
				var elem []byte
				{
					elem = []byte("[]byte")
				}
				s.OptionalArrayStringBase64 = append(s.OptionalArrayStringBase64, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringBinary = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.OptionalArrayStringBinary = append(s.OptionalArrayStringBinary, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringByte = nil
			for i := 0; i < 0; i++ {
				var elem []byte
				{
					elem = []byte("[]byte")
				}
				s.OptionalArrayStringByte = append(s.OptionalArrayStringByte, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringDate = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.OptionalArrayStringDate = append(s.OptionalArrayStringDate, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringDateMinusTime = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.OptionalArrayStringDateMinusTime = append(s.OptionalArrayStringDateMinusTime, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringDuration = nil
			for i := 0; i < 0; i++ {
				var elem time.Duration
				{
					elem = time.Duration(5 * time.Second)
				}
				s.OptionalArrayStringDuration = append(s.OptionalArrayStringDuration, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringEmail = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.OptionalArrayStringEmail = append(s.OptionalArrayStringEmail, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringFloat32 = nil
			for i := 0; i < 0; i++ {
				var elem float32
				{
					elem = float32(0)
				}
				s.OptionalArrayStringFloat32 = append(s.OptionalArrayStringFloat32, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringFloat64 = nil
			for i := 0; i < 0; i++ {
				var elem float64
				{
					elem = float64(0)
				}
				s.OptionalArrayStringFloat64 = append(s.OptionalArrayStringFloat64, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringHostname = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.OptionalArrayStringHostname = append(s.OptionalArrayStringHostname, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringInt = nil
			for i := 0; i < 0; i++ {
				var elem int
				{
					elem = int(0)
				}
				s.OptionalArrayStringInt = append(s.OptionalArrayStringInt, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringInt16 = nil
			for i := 0; i < 0; i++ {
				var elem int16
				{
					elem = int16(0)
				}
				s.OptionalArrayStringInt16 = append(s.OptionalArrayStringInt16, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringInt32 = nil
			for i := 0; i < 0; i++ {
				var elem int32
				{
					elem = int32(0)
				}
				s.OptionalArrayStringInt32 = append(s.OptionalArrayStringInt32, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringInt64 = nil
			for i := 0; i < 0; i++ {
				var elem int64
				{
					elem = int64(0)
				}
				s.OptionalArrayStringInt64 = append(s.OptionalArrayStringInt64, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringInt8 = nil
			for i := 0; i < 0; i++ {
				var elem int8
				{
					elem = int8(0)
				}
				s.OptionalArrayStringInt8 = append(s.OptionalArrayStringInt8, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringIP = nil
			for i := 0; i < 0; i++ {
				var elem netip.Addr
				{
					elem = netip.MustParseAddr("127.0.0.1")
				}
				s.OptionalArrayStringIP = append(s.OptionalArrayStringIP, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringIpv4 = nil
			for i := 0; i < 0; i++ {
				var elem netip.Addr
				{
					elem = netip.MustParseAddr("127.0.0.1")
				}
				s.OptionalArrayStringIpv4 = append(s.OptionalArrayStringIpv4, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringIpv6 = nil
			for i := 0; i < 0; i++ {
				var elem netip.Addr
				{
					elem = netip.MustParseAddr("::1")
				}
				s.OptionalArrayStringIpv6 = append(s.OptionalArrayStringIpv6, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringPassword = nil
			for i := 0; i < 0; i++ {
				var elem string
				{
					elem = "string"
				}
				s.OptionalArrayStringPassword = append(s.OptionalArrayStringPassword, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringTime = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.OptionalArrayStringTime = append(s.OptionalArrayStringTime, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringUint = nil
			for i := 0; i < 0; i++ {
				var elem uint
				{
					elem = uint(0)
				}
				s.OptionalArrayStringUint = append(s.OptionalArrayStringUint, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringUint16 = nil
			for i := 0; i < 0; i++ {
				var elem uint16
				{
					elem = uint16(0)
				}
				s.OptionalArrayStringUint16 = append(s.OptionalArrayStringUint16, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringUint32 = nil
			for i := 0; i < 0; i++ {
				var elem uint32
				{
					elem = uint32(0)
				}
				s.OptionalArrayStringUint32 = append(s.OptionalArrayStringUint32, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringUint64 = nil
			for i := 0; i < 0; i++ {
				var elem uint64
				{
					elem = uint64(0)
				}
				s.OptionalArrayStringUint64 = append(s.OptionalArrayStringUint64, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringUint8 = nil
			for i := 0; i < 0; i++ {
				var elem uint8
				{
					elem = uint8(0)
				}
				s.OptionalArrayStringUint8 = append(s.OptionalArrayStringUint8, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringUnix = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.OptionalArrayStringUnix = append(s.OptionalArrayStringUnix, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringUnixMinusMicro = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.OptionalArrayStringUnixMinusMicro = append(s.OptionalArrayStringUnixMinusMicro, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringUnixMinusMilli = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.OptionalArrayStringUnixMinusMilli = append(s.OptionalArrayStringUnixMinusMilli, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringUnixMinusNano = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.OptionalArrayStringUnixMinusNano = append(s.OptionalArrayStringUnixMinusNano, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringUnixMinusSeconds = nil
			for i := 0; i < 0; i++ {
				var elem time.Time
				{
					elem = time.Now()
				}
				s.OptionalArrayStringUnixMinusSeconds = append(s.OptionalArrayStringUnixMinusSeconds, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringURI = nil
			for i := 0; i < 0; i++ {
				var elem url.URL
				{
					elem = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
				}
				s.OptionalArrayStringURI = append(s.OptionalArrayStringURI, elem)
			}
		}
	}
	{
		{
			s.OptionalArrayStringUUID = nil
			for i := 0; i < 0; i++ {
				var elem uuid.UUID
				{
					elem = uuid.New()
				}
				s.OptionalArrayStringUUID = append(s.OptionalArrayStringUUID, elem)
			}
		}
	}
	{
		{
			s.OptionalBoolean.SetFake()
		}
	}
	{
		{
			s.OptionalDoubleArrayAny = nil
			for i := 0; i < 0; i++ {
				var elem []jx.Raw
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem jx.Raw
						{
							elemElem = []byte("null")
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayAny = append(s.OptionalDoubleArrayAny, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayBoolean = nil
			for i := 0; i < 0; i++ {
				var elem []bool
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem bool
						{
							elemElem = true
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayBoolean = append(s.OptionalDoubleArrayBoolean, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayInteger = nil
			for i := 0; i < 0; i++ {
				var elem []int
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int
						{
							elemElem = int(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayInteger = append(s.OptionalDoubleArrayInteger, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayIntegerInt16 = nil
			for i := 0; i < 0; i++ {
				var elem []int16
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int16
						{
							elemElem = int16(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayIntegerInt16 = append(s.OptionalDoubleArrayIntegerInt16, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayIntegerInt32 = nil
			for i := 0; i < 0; i++ {
				var elem []int32
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int32
						{
							elemElem = int32(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayIntegerInt32 = append(s.OptionalDoubleArrayIntegerInt32, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayIntegerInt64 = nil
			for i := 0; i < 0; i++ {
				var elem []int64
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int64
						{
							elemElem = int64(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayIntegerInt64 = append(s.OptionalDoubleArrayIntegerInt64, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayIntegerInt8 = nil
			for i := 0; i < 0; i++ {
				var elem []int8
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int8
						{
							elemElem = int8(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayIntegerInt8 = append(s.OptionalDoubleArrayIntegerInt8, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayIntegerUint = nil
			for i := 0; i < 0; i++ {
				var elem []uint
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint
						{
							elemElem = uint(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayIntegerUint = append(s.OptionalDoubleArrayIntegerUint, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayIntegerUint16 = nil
			for i := 0; i < 0; i++ {
				var elem []uint16
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint16
						{
							elemElem = uint16(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayIntegerUint16 = append(s.OptionalDoubleArrayIntegerUint16, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayIntegerUint32 = nil
			for i := 0; i < 0; i++ {
				var elem []uint32
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint32
						{
							elemElem = uint32(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayIntegerUint32 = append(s.OptionalDoubleArrayIntegerUint32, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayIntegerUint64 = nil
			for i := 0; i < 0; i++ {
				var elem []uint64
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint64
						{
							elemElem = uint64(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayIntegerUint64 = append(s.OptionalDoubleArrayIntegerUint64, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayIntegerUint8 = nil
			for i := 0; i < 0; i++ {
				var elem []uint8
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint8
						{
							elemElem = uint8(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayIntegerUint8 = append(s.OptionalDoubleArrayIntegerUint8, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayIntegerUnix = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayIntegerUnix = append(s.OptionalDoubleArrayIntegerUnix, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayIntegerUnixMinusMicro = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayIntegerUnixMinusMicro = append(s.OptionalDoubleArrayIntegerUnixMinusMicro, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayIntegerUnixMinusMilli = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayIntegerUnixMinusMilli = append(s.OptionalDoubleArrayIntegerUnixMinusMilli, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayIntegerUnixMinusNano = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayIntegerUnixMinusNano = append(s.OptionalDoubleArrayIntegerUnixMinusNano, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayIntegerUnixMinusSeconds = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayIntegerUnixMinusSeconds = append(s.OptionalDoubleArrayIntegerUnixMinusSeconds, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayNull = nil
			for i := 0; i < 0; i++ {
				var elem []struct{}
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem struct{}
						{
							elemElem = struct{}{}
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayNull = append(s.OptionalDoubleArrayNull, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayNumber = nil
			for i := 0; i < 0; i++ {
				var elem []float64
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem float64
						{
							elemElem = float64(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayNumber = append(s.OptionalDoubleArrayNumber, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayNumberDouble = nil
			for i := 0; i < 0; i++ {
				var elem []float64
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem float64
						{
							elemElem = float64(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayNumberDouble = append(s.OptionalDoubleArrayNumberDouble, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayNumberFloat = nil
			for i := 0; i < 0; i++ {
				var elem []float32
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem float32
						{
							elemElem = float32(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayNumberFloat = append(s.OptionalDoubleArrayNumberFloat, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayNumberInt32 = nil
			for i := 0; i < 0; i++ {
				var elem []int32
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int32
						{
							elemElem = int32(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayNumberInt32 = append(s.OptionalDoubleArrayNumberInt32, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayNumberInt64 = nil
			for i := 0; i < 0; i++ {
				var elem []int64
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int64
						{
							elemElem = int64(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayNumberInt64 = append(s.OptionalDoubleArrayNumberInt64, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayString = nil
			for i := 0; i < 0; i++ {
				var elem []string
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem string
						{
							elemElem = "string"
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayString = append(s.OptionalDoubleArrayString, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringBase64 = nil
			for i := 0; i < 0; i++ {
				var elem [][]byte
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem []byte
						{
							elemElem = []byte("[]byte")
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringBase64 = append(s.OptionalDoubleArrayStringBase64, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringBinary = nil
			for i := 0; i < 0; i++ {
				var elem []string
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem string
						{
							elemElem = "string"
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringBinary = append(s.OptionalDoubleArrayStringBinary, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringByte = nil
			for i := 0; i < 0; i++ {
				var elem [][]byte
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem []byte
						{
							elemElem = []byte("[]byte")
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringByte = append(s.OptionalDoubleArrayStringByte, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringDate = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringDate = append(s.OptionalDoubleArrayStringDate, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringDateMinusTime = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringDateMinusTime = append(s.OptionalDoubleArrayStringDateMinusTime, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringDuration = nil
			for i := 0; i < 0; i++ {
				var elem []time.Duration
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Duration
						{
							elemElem = time.Duration(5 * time.Second)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringDuration = append(s.OptionalDoubleArrayStringDuration, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringEmail = nil
			for i := 0; i < 0; i++ {
				var elem []string
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem string
						{
							elemElem = "string"
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringEmail = append(s.OptionalDoubleArrayStringEmail, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringFloat32 = nil
			for i := 0; i < 0; i++ {
				var elem []float32
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem float32
						{
							elemElem = float32(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringFloat32 = append(s.OptionalDoubleArrayStringFloat32, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringFloat64 = nil
			for i := 0; i < 0; i++ {
				var elem []float64
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem float64
						{
							elemElem = float64(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringFloat64 = append(s.OptionalDoubleArrayStringFloat64, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringHostname = nil
			for i := 0; i < 0; i++ {
				var elem []string
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem string
						{
							elemElem = "string"
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringHostname = append(s.OptionalDoubleArrayStringHostname, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringInt = nil
			for i := 0; i < 0; i++ {
				var elem []int
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int
						{
							elemElem = int(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringInt = append(s.OptionalDoubleArrayStringInt, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringInt16 = nil
			for i := 0; i < 0; i++ {
				var elem []int16
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int16
						{
							elemElem = int16(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringInt16 = append(s.OptionalDoubleArrayStringInt16, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringInt32 = nil
			for i := 0; i < 0; i++ {
				var elem []int32
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int32
						{
							elemElem = int32(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringInt32 = append(s.OptionalDoubleArrayStringInt32, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringInt64 = nil
			for i := 0; i < 0; i++ {
				var elem []int64
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int64
						{
							elemElem = int64(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringInt64 = append(s.OptionalDoubleArrayStringInt64, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringInt8 = nil
			for i := 0; i < 0; i++ {
				var elem []int8
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem int8
						{
							elemElem = int8(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringInt8 = append(s.OptionalDoubleArrayStringInt8, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringIP = nil
			for i := 0; i < 0; i++ {
				var elem []netip.Addr
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem netip.Addr
						{
							elemElem = netip.MustParseAddr("127.0.0.1")
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringIP = append(s.OptionalDoubleArrayStringIP, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringIpv4 = nil
			for i := 0; i < 0; i++ {
				var elem []netip.Addr
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem netip.Addr
						{
							elemElem = netip.MustParseAddr("127.0.0.1")
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringIpv4 = append(s.OptionalDoubleArrayStringIpv4, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringIpv6 = nil
			for i := 0; i < 0; i++ {
				var elem []netip.Addr
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem netip.Addr
						{
							elemElem = netip.MustParseAddr("::1")
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringIpv6 = append(s.OptionalDoubleArrayStringIpv6, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringPassword = nil
			for i := 0; i < 0; i++ {
				var elem []string
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem string
						{
							elemElem = "string"
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringPassword = append(s.OptionalDoubleArrayStringPassword, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringTime = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringTime = append(s.OptionalDoubleArrayStringTime, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringUint = nil
			for i := 0; i < 0; i++ {
				var elem []uint
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint
						{
							elemElem = uint(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringUint = append(s.OptionalDoubleArrayStringUint, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringUint16 = nil
			for i := 0; i < 0; i++ {
				var elem []uint16
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint16
						{
							elemElem = uint16(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringUint16 = append(s.OptionalDoubleArrayStringUint16, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringUint32 = nil
			for i := 0; i < 0; i++ {
				var elem []uint32
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint32
						{
							elemElem = uint32(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringUint32 = append(s.OptionalDoubleArrayStringUint32, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringUint64 = nil
			for i := 0; i < 0; i++ {
				var elem []uint64
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint64
						{
							elemElem = uint64(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringUint64 = append(s.OptionalDoubleArrayStringUint64, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringUint8 = nil
			for i := 0; i < 0; i++ {
				var elem []uint8
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uint8
						{
							elemElem = uint8(0)
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringUint8 = append(s.OptionalDoubleArrayStringUint8, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringUnix = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringUnix = append(s.OptionalDoubleArrayStringUnix, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringUnixMinusMicro = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringUnixMinusMicro = append(s.OptionalDoubleArrayStringUnixMinusMicro, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringUnixMinusMilli = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringUnixMinusMilli = append(s.OptionalDoubleArrayStringUnixMinusMilli, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringUnixMinusNano = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringUnixMinusNano = append(s.OptionalDoubleArrayStringUnixMinusNano, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringUnixMinusSeconds = nil
			for i := 0; i < 0; i++ {
				var elem []time.Time
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem time.Time
						{
							elemElem = time.Now()
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringUnixMinusSeconds = append(s.OptionalDoubleArrayStringUnixMinusSeconds, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringURI = nil
			for i := 0; i < 0; i++ {
				var elem []url.URL
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem url.URL
						{
							elemElem = url.URL{Scheme: "https", Host: "github.com", Path: "/ogen-go/ogen"}
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringURI = append(s.OptionalDoubleArrayStringURI, elem)
			}
		}
	}
	{
		{
			s.OptionalDoubleArrayStringUUID = nil
			for i := 0; i < 0; i++ {
				var elem []uuid.UUID
				{
					elem = nil
					for i := 0; i < 0; i++ {
						var elemElem uuid.UUID
						{
							elemElem = uuid.New()
						}
						elem = append(elem, elemElem)
					}
				}
				s.OptionalDoubleArrayStringUUID = append(s.OptionalDoubleArrayStringUUID, elem)
			}
		}
	}
	{
		{
			s.OptionalInteger.SetFake()
		}
	}
	{
		{
			s.OptionalIntegerInt16.SetFake()
		}
	}
	{
		{
			s.OptionalIntegerInt32.SetFake()
		}
	}
	{
		{
			s.OptionalIntegerInt64.SetFake()
		}
	}
	{
		{
			s.OptionalIntegerInt8.SetFake()
		}
	}
	{
		{
			s.OptionalIntegerUint.SetFake()
		}
	}
	{
		{
			s.OptionalIntegerUint16.SetFake()
		}
	}
	{
		{
			s.OptionalIntegerUint32.SetFake()
		}
	}
	{
		{
			s.OptionalIntegerUint64.SetFake()
		}
	}
	{
		{
			s.OptionalIntegerUint8.SetFake()
		}
	}
	{
		{
			s.OptionalIntegerUnix.SetFake()
		}
	}
	{
		{
			s.OptionalIntegerUnixMinusMicro.SetFake()
		}
	}
	{
		{
			s.OptionalIntegerUnixMinusMilli.SetFake()
		}
	}
	{
		{
			s.OptionalIntegerUnixMinusNano.SetFake()
		}
	}
	{
		{
			s.OptionalIntegerUnixMinusSeconds.SetFake()
		}
	}
	{
		{
			s.OptionalNull.SetFake()
		}
	}
	{
		{
			s.OptionalNumber.SetFake()
		}
	}
	{
		{
			s.OptionalNumberDouble.SetFake()
		}
	}
	{
		{
			s.OptionalNumberFloat.SetFake()
		}
	}
	{
		{
			s.OptionalNumberInt32.SetFake()
		}
	}
	{
		{
			s.OptionalNumberInt64.SetFake()
		}
	}
	{
		{
			s.OptionalString.SetFake()
		}
	}
	{
		{
			s.OptionalStringBase64 = []byte("[]byte")
		}
	}
	{
		{
			s.OptionalStringBinary.SetFake()
		}
	}
	{
		{
			s.OptionalStringByte = []byte("[]byte")
		}
	}
	{
		{
			s.OptionalStringDate.SetFake()
		}
	}
	{
		{
			s.OptionalStringDateMinusTime.SetFake()
		}
	}
	{
		{
			s.OptionalStringDuration.SetFake()
		}
	}
	{
		{
			s.OptionalStringEmail.SetFake()
		}
	}
	{
		{
			s.OptionalStringFloat32.SetFake()
		}
	}
	{
		{
			s.OptionalStringFloat64.SetFake()
		}
	}
	{
		{
			s.OptionalStringHostname.SetFake()
		}
	}
	{
		{
			s.OptionalStringInt.SetFake()
		}
	}
	{
		{
			s.OptionalStringInt16.SetFake()
		}
	}
	{
		{
			s.OptionalStringInt32.SetFake()
		}
	}
	{
		{
			s.OptionalStringInt64.SetFake()
		}
	}
	{
		{
			s.OptionalStringInt8.SetFake()
		}
	}
	{
		{
			s.OptionalStringIP.SetFake()
		}
	}
	{
		{
			s.OptionalStringIpv4.SetFake()
		}
	}
	{
		{
			s.OptionalStringIpv6.SetFake()
		}
	}
	{
		{
			s.OptionalStringPassword.SetFake()
		}
	}
	{
		{
			s.OptionalStringTime.SetFake()
		}
	}
	{
		{
			s.OptionalStringUint.SetFake()
		}
	}
	{
		{
			s.OptionalStringUint16.SetFake()
		}
	}
	{
		{
			s.OptionalStringUint32.SetFake()
		}
	}
	{
		{
			s.OptionalStringUint64.SetFake()
		}
	}
	{
		{
			s.OptionalStringUint8.SetFake()
		}
	}
	{
		{
			s.OptionalStringUnix.SetFake()
		}
	}
	{
		{
			s.OptionalStringUnixMinusMicro.SetFake()
		}
	}
	{
		{
			s.OptionalStringUnixMinusMilli.SetFake()
		}
	}
	{
		{
			s.OptionalStringUnixMinusNano.SetFake()
		}
	}
	{
		{
			s.OptionalStringUnixMinusSeconds.SetFake()
		}
	}
	{
		{
			s.OptionalStringURI.SetFake()
		}
	}
	{
		{
			s.OptionalStringUUID.SetFake()
		}
	}
}

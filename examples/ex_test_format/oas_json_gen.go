// Code generated by ogen, DO NOT EDIT.

package api

import (
	"math/bits"
	"net/netip"
	"net/url"
	"strconv"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"

	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/validate"
)

// Encode implements json.Marshaler.
func (s *Error) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *Error) encodeFields(e *jx.Encoder) {
	{
		if s.Code.Set {
			e.FieldStart("code")
			s.Code.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
}

var jsonFieldsNameOfError = [2]string{
	0: "code",
	1: "status",
}

// Decode decodes Error from json.
func (s *Error) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Error to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "code":
			if err := func() error {
				s.Code.Reset()
				if err := s.Code.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Error")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *Error) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Error) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes bool as json.
func (o NilBool) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Bool(bool(o.Value))
}

// Decode decodes bool from json.
func (o *NilBool) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilBool to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v bool
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := d.Bool()
	if err != nil {
		return err
	}
	o.Value = bool(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilBool) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilBool) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes time.Time as json.
func (o NilDate) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if o.Null {
		e.Null()
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *NilDate) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilDate to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v time.Time
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilDate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeDate)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilDate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeDate)
}

// Encode encodes time.Time as json.
func (o NilDateTime) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if o.Null {
		e.Null()
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *NilDateTime) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilDateTime to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v time.Time
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilDateTime) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeDateTime)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilDateTime) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeDateTime)
}

// Encode encodes time.Duration as json.
func (o NilDuration) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	json.EncodeDuration(e, o.Value)
}

// Decode decodes time.Duration from json.
func (o *NilDuration) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilDuration to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v time.Duration
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := json.DecodeDuration(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilDuration) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilDuration) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes float32 as json.
func (o NilFloat32) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Float32(float32(o.Value))
}

// Decode decodes float32 from json.
func (o *NilFloat32) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilFloat32 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v float32
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := d.Float32()
	if err != nil {
		return err
	}
	o.Value = float32(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilFloat32) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilFloat32) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes float64 as json.
func (o NilFloat64) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes float64 from json.
func (o *NilFloat64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilFloat64 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v float64
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := d.Float64()
	if err != nil {
		return err
	}
	o.Value = float64(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilFloat64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilFloat64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes netip.Addr as json.
func (o NilIP) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	json.EncodeIP(e, o.Value)
}

// Decode decodes netip.Addr from json.
func (o *NilIP) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilIP to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v netip.Addr
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := json.DecodeIP(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilIP) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilIP) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes netip.Addr as json.
func (o NilIPv4) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	json.EncodeIPv4(e, o.Value)
}

// Decode decodes netip.Addr from json.
func (o *NilIPv4) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilIPv4 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v netip.Addr
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := json.DecodeIPv4(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilIPv4) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilIPv4) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes netip.Addr as json.
func (o NilIPv6) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	json.EncodeIPv6(e, o.Value)
}

// Decode decodes netip.Addr from json.
func (o *NilIPv6) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilIPv6 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v netip.Addr
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := json.DecodeIPv6(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilIPv6) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilIPv6) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int as json.
func (o NilInt) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes int from json.
func (o *NilInt) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilInt to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v int
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := d.Int()
	if err != nil {
		return err
	}
	o.Value = int(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilInt) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilInt) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int16 as json.
func (o NilInt16) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Int16(int16(o.Value))
}

// Decode decodes int16 from json.
func (o *NilInt16) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilInt16 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v int16
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := d.Int16()
	if err != nil {
		return err
	}
	o.Value = int16(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilInt16) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilInt16) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int32 as json.
func (o NilInt32) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Int32(int32(o.Value))
}

// Decode decodes int32 from json.
func (o *NilInt32) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilInt32 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v int32
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := d.Int32()
	if err != nil {
		return err
	}
	o.Value = int32(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilInt32) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilInt32) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int64 as json.
func (o NilInt64) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Int64(int64(o.Value))
}

// Decode decodes int64 from json.
func (o *NilInt64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilInt64 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v int64
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := d.Int64()
	if err != nil {
		return err
	}
	o.Value = int64(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilInt64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilInt64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int8 as json.
func (o NilInt8) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Int8(int8(o.Value))
}

// Decode decodes int8 from json.
func (o *NilInt8) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilInt8 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v int8
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := d.Int8()
	if err != nil {
		return err
	}
	o.Value = int8(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilInt8) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilInt8) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes string as json.
func (o NilString) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *NilString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilString to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v string
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := d.Str()
	if err != nil {
		return err
	}
	o.Value = string(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilString) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilString) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes float32 as json.
func (o NilStringFloat32) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	json.EncodeStringFloat32(e, o.Value)
}

// Decode decodes float32 from json.
func (o *NilStringFloat32) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilStringFloat32 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v float32
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := json.DecodeStringFloat32(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilStringFloat32) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilStringFloat32) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes float64 as json.
func (o NilStringFloat64) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	json.EncodeStringFloat64(e, o.Value)
}

// Decode decodes float64 from json.
func (o *NilStringFloat64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilStringFloat64 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v float64
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := json.DecodeStringFloat64(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilStringFloat64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilStringFloat64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int as json.
func (o NilStringInt) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	json.EncodeStringInt(e, o.Value)
}

// Decode decodes int from json.
func (o *NilStringInt) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilStringInt to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v int
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := json.DecodeStringInt(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilStringInt) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilStringInt) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int16 as json.
func (o NilStringInt16) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	json.EncodeStringInt16(e, o.Value)
}

// Decode decodes int16 from json.
func (o *NilStringInt16) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilStringInt16 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v int16
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := json.DecodeStringInt16(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilStringInt16) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilStringInt16) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int32 as json.
func (o NilStringInt32) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	json.EncodeStringInt32(e, o.Value)
}

// Decode decodes int32 from json.
func (o *NilStringInt32) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilStringInt32 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v int32
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := json.DecodeStringInt32(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilStringInt32) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilStringInt32) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int64 as json.
func (o NilStringInt64) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	json.EncodeStringInt64(e, o.Value)
}

// Decode decodes int64 from json.
func (o *NilStringInt64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilStringInt64 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v int64
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := json.DecodeStringInt64(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilStringInt64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilStringInt64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int8 as json.
func (o NilStringInt8) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	json.EncodeStringInt8(e, o.Value)
}

// Decode decodes int8 from json.
func (o *NilStringInt8) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilStringInt8 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v int8
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := json.DecodeStringInt8(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilStringInt8) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilStringInt8) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes uint as json.
func (o NilStringUint) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	json.EncodeStringUint(e, o.Value)
}

// Decode decodes uint from json.
func (o *NilStringUint) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilStringUint to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v uint
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := json.DecodeStringUint(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilStringUint) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilStringUint) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes uint16 as json.
func (o NilStringUint16) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	json.EncodeStringUint16(e, o.Value)
}

// Decode decodes uint16 from json.
func (o *NilStringUint16) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilStringUint16 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v uint16
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := json.DecodeStringUint16(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilStringUint16) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilStringUint16) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes uint32 as json.
func (o NilStringUint32) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	json.EncodeStringUint32(e, o.Value)
}

// Decode decodes uint32 from json.
func (o *NilStringUint32) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilStringUint32 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v uint32
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := json.DecodeStringUint32(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilStringUint32) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilStringUint32) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes uint64 as json.
func (o NilStringUint64) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	json.EncodeStringUint64(e, o.Value)
}

// Decode decodes uint64 from json.
func (o *NilStringUint64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilStringUint64 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v uint64
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := json.DecodeStringUint64(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilStringUint64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilStringUint64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes uint8 as json.
func (o NilStringUint8) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	json.EncodeStringUint8(e, o.Value)
}

// Decode decodes uint8 from json.
func (o *NilStringUint8) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilStringUint8 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v uint8
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := json.DecodeStringUint8(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilStringUint8) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilStringUint8) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes time.Time as json.
func (o NilStringUnixMicro) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if o.Null {
		e.Null()
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *NilStringUnixMicro) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilStringUnixMicro to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v time.Time
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilStringUnixMicro) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeStringUnixMicro)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilStringUnixMicro) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeStringUnixMicro)
}

// Encode encodes time.Time as json.
func (o NilStringUnixMilli) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if o.Null {
		e.Null()
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *NilStringUnixMilli) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilStringUnixMilli to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v time.Time
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilStringUnixMilli) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeStringUnixMilli)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilStringUnixMilli) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeStringUnixMilli)
}

// Encode encodes time.Time as json.
func (o NilStringUnixNano) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if o.Null {
		e.Null()
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *NilStringUnixNano) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilStringUnixNano to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v time.Time
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilStringUnixNano) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeStringUnixNano)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilStringUnixNano) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeStringUnixNano)
}

// Encode encodes time.Time as json.
func (o NilStringUnixSeconds) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if o.Null {
		e.Null()
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *NilStringUnixSeconds) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilStringUnixSeconds to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v time.Time
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilStringUnixSeconds) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeStringUnixSeconds)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilStringUnixSeconds) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeStringUnixSeconds)
}

// Encode encodes time.Time as json.
func (o NilTime) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if o.Null {
		e.Null()
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *NilTime) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilTime to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v time.Time
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilTime) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeTime)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilTime) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeTime)
}

// Encode encodes url.URL as json.
func (o NilURI) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	json.EncodeURI(e, o.Value)
}

// Decode decodes url.URL from json.
func (o *NilURI) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilURI to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v url.URL
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := json.DecodeURI(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilURI) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilURI) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes uuid.UUID as json.
func (o NilUUID) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	json.EncodeUUID(e, o.Value)
}

// Decode decodes uuid.UUID from json.
func (o *NilUUID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilUUID to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v uuid.UUID
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := json.DecodeUUID(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilUUID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilUUID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes uint as json.
func (o NilUint) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.UInt(uint(o.Value))
}

// Decode decodes uint from json.
func (o *NilUint) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilUint to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v uint
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := d.UInt()
	if err != nil {
		return err
	}
	o.Value = uint(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilUint) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilUint) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes uint16 as json.
func (o NilUint16) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.UInt16(uint16(o.Value))
}

// Decode decodes uint16 from json.
func (o *NilUint16) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilUint16 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v uint16
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := d.UInt16()
	if err != nil {
		return err
	}
	o.Value = uint16(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilUint16) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilUint16) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes uint32 as json.
func (o NilUint32) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.UInt32(uint32(o.Value))
}

// Decode decodes uint32 from json.
func (o *NilUint32) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilUint32 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v uint32
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := d.UInt32()
	if err != nil {
		return err
	}
	o.Value = uint32(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilUint32) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilUint32) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes uint64 as json.
func (o NilUint64) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.UInt64(uint64(o.Value))
}

// Decode decodes uint64 from json.
func (o *NilUint64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilUint64 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v uint64
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := d.UInt64()
	if err != nil {
		return err
	}
	o.Value = uint64(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilUint64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilUint64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes uint8 as json.
func (o NilUint8) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.UInt8(uint8(o.Value))
}

// Decode decodes uint8 from json.
func (o *NilUint8) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilUint8 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v uint8
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := d.UInt8()
	if err != nil {
		return err
	}
	o.Value = uint8(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilUint8) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilUint8) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes time.Time as json.
func (o NilUnixMicro) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if o.Null {
		e.Null()
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *NilUnixMicro) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilUnixMicro to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v time.Time
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilUnixMicro) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeUnixMicro)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilUnixMicro) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeUnixMicro)
}

// Encode encodes time.Time as json.
func (o NilUnixMilli) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if o.Null {
		e.Null()
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *NilUnixMilli) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilUnixMilli to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v time.Time
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilUnixMilli) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeUnixMilli)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilUnixMilli) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeUnixMilli)
}

// Encode encodes time.Time as json.
func (o NilUnixNano) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if o.Null {
		e.Null()
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *NilUnixNano) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilUnixNano to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v time.Time
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilUnixNano) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeUnixNano)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilUnixNano) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeUnixNano)
}

// Encode encodes time.Time as json.
func (o NilUnixSeconds) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if o.Null {
		e.Null()
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *NilUnixSeconds) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilUnixSeconds to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v time.Time
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilUnixSeconds) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeUnixSeconds)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilUnixSeconds) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeUnixSeconds)
}

// Encode encodes bool as json.
func (o OptBool) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Bool(bool(o.Value))
}

// Decode decodes bool from json.
func (o *OptBool) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptBool to nil")
	}
	o.Set = true
	v, err := d.Bool()
	if err != nil {
		return err
	}
	o.Value = bool(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptBool) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptBool) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes time.Time as json.
func (o OptDate) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if !o.Set {
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *OptDate) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDate to nil")
	}
	o.Set = true
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeDate)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeDate)
}

// Encode encodes time.Time as json.
func (o OptDateTime) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if !o.Set {
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *OptDateTime) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDateTime to nil")
	}
	o.Set = true
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDateTime) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeDateTime)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDateTime) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeDateTime)
}

// Encode encodes time.Duration as json.
func (o OptDuration) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	json.EncodeDuration(e, o.Value)
}

// Decode decodes time.Duration from json.
func (o *OptDuration) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDuration to nil")
	}
	o.Set = true
	v, err := json.DecodeDuration(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDuration) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDuration) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes float32 as json.
func (o OptFloat32) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float32(float32(o.Value))
}

// Decode decodes float32 from json.
func (o *OptFloat32) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptFloat32 to nil")
	}
	o.Set = true
	v, err := d.Float32()
	if err != nil {
		return err
	}
	o.Value = float32(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptFloat32) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptFloat32) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes float64 as json.
func (o OptFloat64) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes float64 from json.
func (o *OptFloat64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptFloat64 to nil")
	}
	o.Set = true
	v, err := d.Float64()
	if err != nil {
		return err
	}
	o.Value = float64(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptFloat64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptFloat64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes netip.Addr as json.
func (o OptIP) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	json.EncodeIP(e, o.Value)
}

// Decode decodes netip.Addr from json.
func (o *OptIP) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptIP to nil")
	}
	o.Set = true
	v, err := json.DecodeIP(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptIP) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptIP) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes netip.Addr as json.
func (o OptIPv4) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	json.EncodeIPv4(e, o.Value)
}

// Decode decodes netip.Addr from json.
func (o *OptIPv4) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptIPv4 to nil")
	}
	o.Set = true
	v, err := json.DecodeIPv4(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptIPv4) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptIPv4) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes netip.Addr as json.
func (o OptIPv6) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	json.EncodeIPv6(e, o.Value)
}

// Decode decodes netip.Addr from json.
func (o *OptIPv6) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptIPv6 to nil")
	}
	o.Set = true
	v, err := json.DecodeIPv6(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptIPv6) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptIPv6) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int as json.
func (o OptInt) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes int from json.
func (o *OptInt) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptInt to nil")
	}
	o.Set = true
	v, err := d.Int()
	if err != nil {
		return err
	}
	o.Value = int(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptInt) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptInt) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int16 as json.
func (o OptInt16) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int16(int16(o.Value))
}

// Decode decodes int16 from json.
func (o *OptInt16) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptInt16 to nil")
	}
	o.Set = true
	v, err := d.Int16()
	if err != nil {
		return err
	}
	o.Value = int16(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptInt16) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptInt16) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int32 as json.
func (o OptInt32) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int32(int32(o.Value))
}

// Decode decodes int32 from json.
func (o *OptInt32) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptInt32 to nil")
	}
	o.Set = true
	v, err := d.Int32()
	if err != nil {
		return err
	}
	o.Value = int32(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptInt32) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptInt32) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int64 as json.
func (o OptInt64) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int64(int64(o.Value))
}

// Decode decodes int64 from json.
func (o *OptInt64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptInt64 to nil")
	}
	o.Set = true
	v, err := d.Int64()
	if err != nil {
		return err
	}
	o.Value = int64(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptInt64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptInt64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int8 as json.
func (o OptInt8) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int8(int8(o.Value))
}

// Decode decodes int8 from json.
func (o *OptInt8) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptInt8 to nil")
	}
	o.Set = true
	v, err := d.Int8()
	if err != nil {
		return err
	}
	o.Value = int8(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptInt8) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptInt8) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes bool as json.
func (o OptNilBool) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Bool(bool(o.Value))
}

// Decode decodes bool from json.
func (o *OptNilBool) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilBool to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v bool
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := d.Bool()
	if err != nil {
		return err
	}
	o.Value = bool(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilBool) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilBool) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes []byte as json.
func (o OptNilByte) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Base64([]byte(o.Value))
}

// Decode decodes []byte from json.
func (o *OptNilByte) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilByte to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v []byte
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := d.Base64()
	if err != nil {
		return err
	}
	o.Value = []byte(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilByte) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilByte) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes time.Time as json.
func (o OptNilDate) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *OptNilDate) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilDate to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v time.Time
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilDate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeDate)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilDate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeDate)
}

// Encode encodes time.Time as json.
func (o OptNilDateTime) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *OptNilDateTime) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilDateTime to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v time.Time
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilDateTime) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeDateTime)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilDateTime) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeDateTime)
}

// Encode encodes time.Duration as json.
func (o OptNilDuration) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	json.EncodeDuration(e, o.Value)
}

// Decode decodes time.Duration from json.
func (o *OptNilDuration) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilDuration to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v time.Duration
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := json.DecodeDuration(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilDuration) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilDuration) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes float32 as json.
func (o OptNilFloat32) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Float32(float32(o.Value))
}

// Decode decodes float32 from json.
func (o *OptNilFloat32) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilFloat32 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v float32
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := d.Float32()
	if err != nil {
		return err
	}
	o.Value = float32(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilFloat32) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilFloat32) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes float64 as json.
func (o OptNilFloat64) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes float64 from json.
func (o *OptNilFloat64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilFloat64 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v float64
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := d.Float64()
	if err != nil {
		return err
	}
	o.Value = float64(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilFloat64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilFloat64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes netip.Addr as json.
func (o OptNilIP) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	json.EncodeIP(e, o.Value)
}

// Decode decodes netip.Addr from json.
func (o *OptNilIP) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilIP to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v netip.Addr
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := json.DecodeIP(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilIP) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilIP) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes netip.Addr as json.
func (o OptNilIPv4) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	json.EncodeIPv4(e, o.Value)
}

// Decode decodes netip.Addr from json.
func (o *OptNilIPv4) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilIPv4 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v netip.Addr
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := json.DecodeIPv4(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilIPv4) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilIPv4) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes netip.Addr as json.
func (o OptNilIPv6) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	json.EncodeIPv6(e, o.Value)
}

// Decode decodes netip.Addr from json.
func (o *OptNilIPv6) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilIPv6 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v netip.Addr
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := json.DecodeIPv6(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilIPv6) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilIPv6) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int as json.
func (o OptNilInt) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes int from json.
func (o *OptNilInt) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilInt to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v int
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := d.Int()
	if err != nil {
		return err
	}
	o.Value = int(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilInt) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilInt) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int16 as json.
func (o OptNilInt16) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Int16(int16(o.Value))
}

// Decode decodes int16 from json.
func (o *OptNilInt16) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilInt16 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v int16
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := d.Int16()
	if err != nil {
		return err
	}
	o.Value = int16(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilInt16) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilInt16) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int32 as json.
func (o OptNilInt32) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Int32(int32(o.Value))
}

// Decode decodes int32 from json.
func (o *OptNilInt32) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilInt32 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v int32
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := d.Int32()
	if err != nil {
		return err
	}
	o.Value = int32(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilInt32) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilInt32) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int64 as json.
func (o OptNilInt64) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Int64(int64(o.Value))
}

// Decode decodes int64 from json.
func (o *OptNilInt64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilInt64 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v int64
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := d.Int64()
	if err != nil {
		return err
	}
	o.Value = int64(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilInt64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilInt64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int8 as json.
func (o OptNilInt8) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Int8(int8(o.Value))
}

// Decode decodes int8 from json.
func (o *OptNilInt8) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilInt8 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v int8
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := d.Int8()
	if err != nil {
		return err
	}
	o.Value = int8(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilInt8) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilInt8) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes string as json.
func (o OptNilString) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *OptNilString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilString to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v string
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := d.Str()
	if err != nil {
		return err
	}
	o.Value = string(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilString) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilString) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes float32 as json.
func (o OptNilStringFloat32) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	json.EncodeStringFloat32(e, o.Value)
}

// Decode decodes float32 from json.
func (o *OptNilStringFloat32) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilStringFloat32 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v float32
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := json.DecodeStringFloat32(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilStringFloat32) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilStringFloat32) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes float64 as json.
func (o OptNilStringFloat64) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	json.EncodeStringFloat64(e, o.Value)
}

// Decode decodes float64 from json.
func (o *OptNilStringFloat64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilStringFloat64 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v float64
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := json.DecodeStringFloat64(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilStringFloat64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilStringFloat64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int as json.
func (o OptNilStringInt) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	json.EncodeStringInt(e, o.Value)
}

// Decode decodes int from json.
func (o *OptNilStringInt) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilStringInt to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v int
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := json.DecodeStringInt(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilStringInt) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilStringInt) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int16 as json.
func (o OptNilStringInt16) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	json.EncodeStringInt16(e, o.Value)
}

// Decode decodes int16 from json.
func (o *OptNilStringInt16) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilStringInt16 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v int16
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := json.DecodeStringInt16(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilStringInt16) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilStringInt16) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int32 as json.
func (o OptNilStringInt32) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	json.EncodeStringInt32(e, o.Value)
}

// Decode decodes int32 from json.
func (o *OptNilStringInt32) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilStringInt32 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v int32
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := json.DecodeStringInt32(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilStringInt32) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilStringInt32) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int64 as json.
func (o OptNilStringInt64) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	json.EncodeStringInt64(e, o.Value)
}

// Decode decodes int64 from json.
func (o *OptNilStringInt64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilStringInt64 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v int64
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := json.DecodeStringInt64(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilStringInt64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilStringInt64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int8 as json.
func (o OptNilStringInt8) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	json.EncodeStringInt8(e, o.Value)
}

// Decode decodes int8 from json.
func (o *OptNilStringInt8) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilStringInt8 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v int8
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := json.DecodeStringInt8(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilStringInt8) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilStringInt8) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes uint as json.
func (o OptNilStringUint) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	json.EncodeStringUint(e, o.Value)
}

// Decode decodes uint from json.
func (o *OptNilStringUint) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilStringUint to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v uint
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := json.DecodeStringUint(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilStringUint) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilStringUint) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes uint16 as json.
func (o OptNilStringUint16) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	json.EncodeStringUint16(e, o.Value)
}

// Decode decodes uint16 from json.
func (o *OptNilStringUint16) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilStringUint16 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v uint16
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := json.DecodeStringUint16(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilStringUint16) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilStringUint16) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes uint32 as json.
func (o OptNilStringUint32) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	json.EncodeStringUint32(e, o.Value)
}

// Decode decodes uint32 from json.
func (o *OptNilStringUint32) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilStringUint32 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v uint32
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := json.DecodeStringUint32(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilStringUint32) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilStringUint32) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes uint64 as json.
func (o OptNilStringUint64) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	json.EncodeStringUint64(e, o.Value)
}

// Decode decodes uint64 from json.
func (o *OptNilStringUint64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilStringUint64 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v uint64
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := json.DecodeStringUint64(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilStringUint64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilStringUint64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes uint8 as json.
func (o OptNilStringUint8) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	json.EncodeStringUint8(e, o.Value)
}

// Decode decodes uint8 from json.
func (o *OptNilStringUint8) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilStringUint8 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v uint8
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := json.DecodeStringUint8(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilStringUint8) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilStringUint8) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes time.Time as json.
func (o OptNilStringUnixMicro) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *OptNilStringUnixMicro) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilStringUnixMicro to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v time.Time
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilStringUnixMicro) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeStringUnixMicro)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilStringUnixMicro) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeStringUnixMicro)
}

// Encode encodes time.Time as json.
func (o OptNilStringUnixMilli) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *OptNilStringUnixMilli) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilStringUnixMilli to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v time.Time
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilStringUnixMilli) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeStringUnixMilli)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilStringUnixMilli) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeStringUnixMilli)
}

// Encode encodes time.Time as json.
func (o OptNilStringUnixNano) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *OptNilStringUnixNano) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilStringUnixNano to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v time.Time
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilStringUnixNano) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeStringUnixNano)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilStringUnixNano) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeStringUnixNano)
}

// Encode encodes time.Time as json.
func (o OptNilStringUnixSeconds) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *OptNilStringUnixSeconds) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilStringUnixSeconds to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v time.Time
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilStringUnixSeconds) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeStringUnixSeconds)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilStringUnixSeconds) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeStringUnixSeconds)
}

// Encode encodes time.Time as json.
func (o OptNilTime) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *OptNilTime) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTime to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v time.Time
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTime) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeTime)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTime) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeTime)
}

// Encode encodes url.URL as json.
func (o OptNilURI) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	json.EncodeURI(e, o.Value)
}

// Decode decodes url.URL from json.
func (o *OptNilURI) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilURI to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v url.URL
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := json.DecodeURI(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilURI) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilURI) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes uuid.UUID as json.
func (o OptNilUUID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	json.EncodeUUID(e, o.Value)
}

// Decode decodes uuid.UUID from json.
func (o *OptNilUUID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilUUID to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v uuid.UUID
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := json.DecodeUUID(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilUUID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilUUID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes uint as json.
func (o OptNilUint) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.UInt(uint(o.Value))
}

// Decode decodes uint from json.
func (o *OptNilUint) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilUint to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v uint
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := d.UInt()
	if err != nil {
		return err
	}
	o.Value = uint(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilUint) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilUint) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes uint16 as json.
func (o OptNilUint16) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.UInt16(uint16(o.Value))
}

// Decode decodes uint16 from json.
func (o *OptNilUint16) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilUint16 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v uint16
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := d.UInt16()
	if err != nil {
		return err
	}
	o.Value = uint16(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilUint16) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilUint16) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes uint32 as json.
func (o OptNilUint32) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.UInt32(uint32(o.Value))
}

// Decode decodes uint32 from json.
func (o *OptNilUint32) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilUint32 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v uint32
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := d.UInt32()
	if err != nil {
		return err
	}
	o.Value = uint32(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilUint32) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilUint32) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes uint64 as json.
func (o OptNilUint64) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.UInt64(uint64(o.Value))
}

// Decode decodes uint64 from json.
func (o *OptNilUint64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilUint64 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v uint64
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := d.UInt64()
	if err != nil {
		return err
	}
	o.Value = uint64(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilUint64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilUint64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes uint8 as json.
func (o OptNilUint8) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.UInt8(uint8(o.Value))
}

// Decode decodes uint8 from json.
func (o *OptNilUint8) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilUint8 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v uint8
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := d.UInt8()
	if err != nil {
		return err
	}
	o.Value = uint8(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilUint8) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilUint8) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes time.Time as json.
func (o OptNilUnixMicro) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *OptNilUnixMicro) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilUnixMicro to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v time.Time
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilUnixMicro) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeUnixMicro)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilUnixMicro) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeUnixMicro)
}

// Encode encodes time.Time as json.
func (o OptNilUnixMilli) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *OptNilUnixMilli) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilUnixMilli to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v time.Time
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilUnixMilli) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeUnixMilli)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilUnixMilli) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeUnixMilli)
}

// Encode encodes time.Time as json.
func (o OptNilUnixNano) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *OptNilUnixNano) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilUnixNano to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v time.Time
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilUnixNano) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeUnixNano)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilUnixNano) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeUnixNano)
}

// Encode encodes time.Time as json.
func (o OptNilUnixSeconds) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *OptNilUnixSeconds) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilUnixSeconds to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v time.Time
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilUnixSeconds) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeUnixSeconds)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilUnixSeconds) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeUnixSeconds)
}

// Encode encodes struct{} as json.
func (o OptNull) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Null()
}

// Decode decodes struct{} from json.
func (o *OptNull) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNull to nil")
	}
	o.Set = true
	if err := d.Null(); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNull) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNull) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes string as json.
func (o OptString) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *OptString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptString to nil")
	}
	o.Set = true
	v, err := d.Str()
	if err != nil {
		return err
	}
	o.Value = string(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptString) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptString) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes float32 as json.
func (o OptStringFloat32) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	json.EncodeStringFloat32(e, o.Value)
}

// Decode decodes float32 from json.
func (o *OptStringFloat32) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptStringFloat32 to nil")
	}
	o.Set = true
	v, err := json.DecodeStringFloat32(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptStringFloat32) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptStringFloat32) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes float64 as json.
func (o OptStringFloat64) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	json.EncodeStringFloat64(e, o.Value)
}

// Decode decodes float64 from json.
func (o *OptStringFloat64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptStringFloat64 to nil")
	}
	o.Set = true
	v, err := json.DecodeStringFloat64(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptStringFloat64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptStringFloat64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int as json.
func (o OptStringInt) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	json.EncodeStringInt(e, o.Value)
}

// Decode decodes int from json.
func (o *OptStringInt) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptStringInt to nil")
	}
	o.Set = true
	v, err := json.DecodeStringInt(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptStringInt) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptStringInt) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int16 as json.
func (o OptStringInt16) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	json.EncodeStringInt16(e, o.Value)
}

// Decode decodes int16 from json.
func (o *OptStringInt16) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptStringInt16 to nil")
	}
	o.Set = true
	v, err := json.DecodeStringInt16(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptStringInt16) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptStringInt16) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int32 as json.
func (o OptStringInt32) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	json.EncodeStringInt32(e, o.Value)
}

// Decode decodes int32 from json.
func (o *OptStringInt32) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptStringInt32 to nil")
	}
	o.Set = true
	v, err := json.DecodeStringInt32(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptStringInt32) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptStringInt32) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int64 as json.
func (o OptStringInt64) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	json.EncodeStringInt64(e, o.Value)
}

// Decode decodes int64 from json.
func (o *OptStringInt64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptStringInt64 to nil")
	}
	o.Set = true
	v, err := json.DecodeStringInt64(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptStringInt64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptStringInt64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int8 as json.
func (o OptStringInt8) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	json.EncodeStringInt8(e, o.Value)
}

// Decode decodes int8 from json.
func (o *OptStringInt8) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptStringInt8 to nil")
	}
	o.Set = true
	v, err := json.DecodeStringInt8(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptStringInt8) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptStringInt8) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes uint as json.
func (o OptStringUint) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	json.EncodeStringUint(e, o.Value)
}

// Decode decodes uint from json.
func (o *OptStringUint) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptStringUint to nil")
	}
	o.Set = true
	v, err := json.DecodeStringUint(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptStringUint) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptStringUint) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes uint16 as json.
func (o OptStringUint16) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	json.EncodeStringUint16(e, o.Value)
}

// Decode decodes uint16 from json.
func (o *OptStringUint16) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptStringUint16 to nil")
	}
	o.Set = true
	v, err := json.DecodeStringUint16(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptStringUint16) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptStringUint16) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes uint32 as json.
func (o OptStringUint32) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	json.EncodeStringUint32(e, o.Value)
}

// Decode decodes uint32 from json.
func (o *OptStringUint32) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptStringUint32 to nil")
	}
	o.Set = true
	v, err := json.DecodeStringUint32(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptStringUint32) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptStringUint32) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes uint64 as json.
func (o OptStringUint64) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	json.EncodeStringUint64(e, o.Value)
}

// Decode decodes uint64 from json.
func (o *OptStringUint64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptStringUint64 to nil")
	}
	o.Set = true
	v, err := json.DecodeStringUint64(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptStringUint64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptStringUint64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes uint8 as json.
func (o OptStringUint8) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	json.EncodeStringUint8(e, o.Value)
}

// Decode decodes uint8 from json.
func (o *OptStringUint8) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptStringUint8 to nil")
	}
	o.Set = true
	v, err := json.DecodeStringUint8(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptStringUint8) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptStringUint8) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes time.Time as json.
func (o OptStringUnixMicro) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if !o.Set {
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *OptStringUnixMicro) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptStringUnixMicro to nil")
	}
	o.Set = true
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptStringUnixMicro) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeStringUnixMicro)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptStringUnixMicro) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeStringUnixMicro)
}

// Encode encodes time.Time as json.
func (o OptStringUnixMilli) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if !o.Set {
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *OptStringUnixMilli) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptStringUnixMilli to nil")
	}
	o.Set = true
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptStringUnixMilli) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeStringUnixMilli)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptStringUnixMilli) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeStringUnixMilli)
}

// Encode encodes time.Time as json.
func (o OptStringUnixNano) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if !o.Set {
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *OptStringUnixNano) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptStringUnixNano to nil")
	}
	o.Set = true
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptStringUnixNano) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeStringUnixNano)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptStringUnixNano) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeStringUnixNano)
}

// Encode encodes time.Time as json.
func (o OptStringUnixSeconds) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if !o.Set {
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *OptStringUnixSeconds) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptStringUnixSeconds to nil")
	}
	o.Set = true
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptStringUnixSeconds) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeStringUnixSeconds)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptStringUnixSeconds) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeStringUnixSeconds)
}

// Encode encodes TestRequestFormatTestReq as json.
func (o OptTestRequestFormatTestReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TestRequestFormatTestReq from json.
func (o *OptTestRequestFormatTestReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTestRequestFormatTestReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTestRequestFormatTestReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTestRequestFormatTestReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes time.Time as json.
func (o OptTime) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if !o.Set {
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *OptTime) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTime to nil")
	}
	o.Set = true
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTime) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeTime)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTime) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeTime)
}

// Encode encodes url.URL as json.
func (o OptURI) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	json.EncodeURI(e, o.Value)
}

// Decode decodes url.URL from json.
func (o *OptURI) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptURI to nil")
	}
	o.Set = true
	v, err := json.DecodeURI(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptURI) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptURI) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes uuid.UUID as json.
func (o OptUUID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	json.EncodeUUID(e, o.Value)
}

// Decode decodes uuid.UUID from json.
func (o *OptUUID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUUID to nil")
	}
	o.Set = true
	v, err := json.DecodeUUID(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUUID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUUID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes uint as json.
func (o OptUint) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.UInt(uint(o.Value))
}

// Decode decodes uint from json.
func (o *OptUint) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUint to nil")
	}
	o.Set = true
	v, err := d.UInt()
	if err != nil {
		return err
	}
	o.Value = uint(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUint) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUint) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes uint16 as json.
func (o OptUint16) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.UInt16(uint16(o.Value))
}

// Decode decodes uint16 from json.
func (o *OptUint16) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUint16 to nil")
	}
	o.Set = true
	v, err := d.UInt16()
	if err != nil {
		return err
	}
	o.Value = uint16(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUint16) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUint16) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes uint32 as json.
func (o OptUint32) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.UInt32(uint32(o.Value))
}

// Decode decodes uint32 from json.
func (o *OptUint32) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUint32 to nil")
	}
	o.Set = true
	v, err := d.UInt32()
	if err != nil {
		return err
	}
	o.Value = uint32(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUint32) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUint32) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes uint64 as json.
func (o OptUint64) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.UInt64(uint64(o.Value))
}

// Decode decodes uint64 from json.
func (o *OptUint64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUint64 to nil")
	}
	o.Set = true
	v, err := d.UInt64()
	if err != nil {
		return err
	}
	o.Value = uint64(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUint64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUint64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes uint8 as json.
func (o OptUint8) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.UInt8(uint8(o.Value))
}

// Decode decodes uint8 from json.
func (o *OptUint8) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUint8 to nil")
	}
	o.Set = true
	v, err := d.UInt8()
	if err != nil {
		return err
	}
	o.Value = uint8(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUint8) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUint8) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes time.Time as json.
func (o OptUnixMicro) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if !o.Set {
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *OptUnixMicro) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUnixMicro to nil")
	}
	o.Set = true
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUnixMicro) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeUnixMicro)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUnixMicro) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeUnixMicro)
}

// Encode encodes time.Time as json.
func (o OptUnixMilli) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if !o.Set {
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *OptUnixMilli) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUnixMilli to nil")
	}
	o.Set = true
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUnixMilli) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeUnixMilli)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUnixMilli) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeUnixMilli)
}

// Encode encodes time.Time as json.
func (o OptUnixNano) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if !o.Set {
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *OptUnixNano) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUnixNano to nil")
	}
	o.Set = true
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUnixNano) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeUnixNano)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUnixNano) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeUnixNano)
}

// Encode encodes time.Time as json.
func (o OptUnixSeconds) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if !o.Set {
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *OptUnixSeconds) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUnixSeconds to nil")
	}
	o.Set = true
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUnixSeconds) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeUnixSeconds)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUnixSeconds) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeUnixSeconds)
}

// Encode implements json.Marshaler.
func (s *TestRequestEmptyStructReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TestRequestEmptyStructReq) encodeFields(e *jx.Encoder) {
}

var jsonFieldsNameOfTestRequestEmptyStructReq = [0]string{}

// Decode decodes TestRequestEmptyStructReq from json.
func (s *TestRequestEmptyStructReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TestRequestEmptyStructReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
	}); err != nil {
		return errors.Wrap(err, "decode TestRequestEmptyStructReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TestRequestEmptyStructReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TestRequestEmptyStructReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TestRequestFormatTestReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TestRequestFormatTestReq) encodeFields(e *jx.Encoder) {
	{
		if len(s.RequiredAny) != 0 {
			e.FieldStart("required_any")
			e.Raw(s.RequiredAny)
		}
	}
	{
		e.FieldStart("required_array_any")
		e.ArrStart()
		for _, elem := range s.RequiredArrayAny {
			if len(elem) != 0 {
				e.Raw(elem)
			}
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_boolean")
		e.ArrStart()
		for _, elem := range s.RequiredArrayBoolean {
			e.Bool(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_integer")
		e.ArrStart()
		for _, elem := range s.RequiredArrayInteger {
			e.Int(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_integer_int16")
		e.ArrStart()
		for _, elem := range s.RequiredArrayIntegerInt16 {
			e.Int16(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_integer_int32")
		e.ArrStart()
		for _, elem := range s.RequiredArrayIntegerInt32 {
			e.Int32(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_integer_int64")
		e.ArrStart()
		for _, elem := range s.RequiredArrayIntegerInt64 {
			e.Int64(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_integer_int8")
		e.ArrStart()
		for _, elem := range s.RequiredArrayIntegerInt8 {
			e.Int8(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_integer_uint")
		e.ArrStart()
		for _, elem := range s.RequiredArrayIntegerUint {
			e.UInt(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_integer_uint16")
		e.ArrStart()
		for _, elem := range s.RequiredArrayIntegerUint16 {
			e.UInt16(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_integer_uint32")
		e.ArrStart()
		for _, elem := range s.RequiredArrayIntegerUint32 {
			e.UInt32(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_integer_uint64")
		e.ArrStart()
		for _, elem := range s.RequiredArrayIntegerUint64 {
			e.UInt64(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_integer_uint8")
		e.ArrStart()
		for _, elem := range s.RequiredArrayIntegerUint8 {
			e.UInt8(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_integer_unix")
		e.ArrStart()
		for _, elem := range s.RequiredArrayIntegerUnix {
			json.EncodeUnixSeconds(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_integer_unix-micro")
		e.ArrStart()
		for _, elem := range s.RequiredArrayIntegerUnixMinusMicro {
			json.EncodeUnixMicro(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_integer_unix-milli")
		e.ArrStart()
		for _, elem := range s.RequiredArrayIntegerUnixMinusMilli {
			json.EncodeUnixMilli(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_integer_unix-nano")
		e.ArrStart()
		for _, elem := range s.RequiredArrayIntegerUnixMinusNano {
			json.EncodeUnixNano(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_integer_unix-seconds")
		e.ArrStart()
		for _, elem := range s.RequiredArrayIntegerUnixMinusSeconds {
			json.EncodeUnixSeconds(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_null")
		e.ArrStart()
		for _, elem := range s.RequiredArrayNull {
			_ = elem
			e.Null()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_number")
		e.ArrStart()
		for _, elem := range s.RequiredArrayNumber {
			e.Float64(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_number_double")
		e.ArrStart()
		for _, elem := range s.RequiredArrayNumberDouble {
			e.Float64(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_number_float")
		e.ArrStart()
		for _, elem := range s.RequiredArrayNumberFloat {
			e.Float32(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_number_int32")
		e.ArrStart()
		for _, elem := range s.RequiredArrayNumberInt32 {
			e.Int32(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_number_int64")
		e.ArrStart()
		for _, elem := range s.RequiredArrayNumberInt64 {
			e.Int64(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string")
		e.ArrStart()
		for _, elem := range s.RequiredArrayString {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_base64")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringBase64 {
			e.Base64(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_binary")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringBinary {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_byte")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringByte {
			e.Base64(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_date")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringDate {
			json.EncodeDate(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_date-time")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringDateMinusTime {
			json.EncodeDateTime(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_duration")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringDuration {
			json.EncodeDuration(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_email")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringEmail {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_float32")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringFloat32 {
			json.EncodeStringFloat32(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_float64")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringFloat64 {
			json.EncodeStringFloat64(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_hostname")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringHostname {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_int")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringInt {
			json.EncodeStringInt(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_int16")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringInt16 {
			json.EncodeStringInt16(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_int32")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringInt32 {
			json.EncodeStringInt32(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_int64")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringInt64 {
			json.EncodeStringInt64(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_int8")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringInt8 {
			json.EncodeStringInt8(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_ip")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringIP {
			json.EncodeIP(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_ipv4")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringIpv4 {
			json.EncodeIPv4(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_ipv6")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringIpv6 {
			json.EncodeIPv6(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_password")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringPassword {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_time")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringTime {
			json.EncodeTime(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_uint")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringUint {
			json.EncodeStringUint(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_uint16")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringUint16 {
			json.EncodeStringUint16(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_uint32")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringUint32 {
			json.EncodeStringUint32(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_uint64")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringUint64 {
			json.EncodeStringUint64(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_uint8")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringUint8 {
			json.EncodeStringUint8(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_unix")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringUnix {
			json.EncodeStringUnixSeconds(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_unix-micro")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringUnixMinusMicro {
			json.EncodeStringUnixMicro(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_unix-milli")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringUnixMinusMilli {
			json.EncodeStringUnixMilli(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_unix-nano")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringUnixMinusNano {
			json.EncodeStringUnixNano(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_unix-seconds")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringUnixMinusSeconds {
			json.EncodeStringUnixSeconds(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_uri")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringURI {
			json.EncodeURI(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_uuid")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringUUID {
			json.EncodeUUID(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_boolean")
		e.Bool(s.RequiredBoolean)
	}
	{
		e.FieldStart("required_double_array_any")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayAny {
			e.ArrStart()
			for _, elem := range elem {
				if len(elem) != 0 {
					e.Raw(elem)
				}
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_boolean")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayBoolean {
			e.ArrStart()
			for _, elem := range elem {
				e.Bool(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_integer")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayInteger {
			e.ArrStart()
			for _, elem := range elem {
				e.Int(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_integer_int16")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayIntegerInt16 {
			e.ArrStart()
			for _, elem := range elem {
				e.Int16(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_integer_int32")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayIntegerInt32 {
			e.ArrStart()
			for _, elem := range elem {
				e.Int32(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_integer_int64")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayIntegerInt64 {
			e.ArrStart()
			for _, elem := range elem {
				e.Int64(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_integer_int8")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayIntegerInt8 {
			e.ArrStart()
			for _, elem := range elem {
				e.Int8(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_integer_uint")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayIntegerUint {
			e.ArrStart()
			for _, elem := range elem {
				e.UInt(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_integer_uint16")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayIntegerUint16 {
			e.ArrStart()
			for _, elem := range elem {
				e.UInt16(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_integer_uint32")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayIntegerUint32 {
			e.ArrStart()
			for _, elem := range elem {
				e.UInt32(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_integer_uint64")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayIntegerUint64 {
			e.ArrStart()
			for _, elem := range elem {
				e.UInt64(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_integer_uint8")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayIntegerUint8 {
			e.ArrStart()
			for _, elem := range elem {
				e.UInt8(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_integer_unix")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayIntegerUnix {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeUnixSeconds(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_integer_unix-micro")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayIntegerUnixMinusMicro {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeUnixMicro(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_integer_unix-milli")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayIntegerUnixMinusMilli {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeUnixMilli(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_integer_unix-nano")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayIntegerUnixMinusNano {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeUnixNano(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_integer_unix-seconds")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayIntegerUnixMinusSeconds {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeUnixSeconds(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_null")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayNull {
			e.ArrStart()
			for _, elem := range elem {
				_ = elem
				e.Null()
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_number")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayNumber {
			e.ArrStart()
			for _, elem := range elem {
				e.Float64(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_number_double")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayNumberDouble {
			e.ArrStart()
			for _, elem := range elem {
				e.Float64(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_number_float")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayNumberFloat {
			e.ArrStart()
			for _, elem := range elem {
				e.Float32(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_number_int32")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayNumberInt32 {
			e.ArrStart()
			for _, elem := range elem {
				e.Int32(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_number_int64")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayNumberInt64 {
			e.ArrStart()
			for _, elem := range elem {
				e.Int64(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayString {
			e.ArrStart()
			for _, elem := range elem {
				e.Str(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_base64")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringBase64 {
			e.ArrStart()
			for _, elem := range elem {
				e.Base64(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_binary")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringBinary {
			e.ArrStart()
			for _, elem := range elem {
				e.Str(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_byte")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringByte {
			e.ArrStart()
			for _, elem := range elem {
				e.Base64(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_date")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringDate {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeDate(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_date-time")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringDateMinusTime {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeDateTime(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_duration")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringDuration {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeDuration(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_email")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringEmail {
			e.ArrStart()
			for _, elem := range elem {
				e.Str(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_float32")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringFloat32 {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringFloat32(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_float64")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringFloat64 {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringFloat64(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_hostname")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringHostname {
			e.ArrStart()
			for _, elem := range elem {
				e.Str(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_int")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringInt {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringInt(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_int16")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringInt16 {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringInt16(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_int32")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringInt32 {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringInt32(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_int64")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringInt64 {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringInt64(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_int8")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringInt8 {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringInt8(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_ip")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringIP {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeIP(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_ipv4")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringIpv4 {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeIPv4(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_ipv6")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringIpv6 {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeIPv6(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_password")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringPassword {
			e.ArrStart()
			for _, elem := range elem {
				e.Str(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_time")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringTime {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeTime(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_uint")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringUint {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringUint(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_uint16")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringUint16 {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringUint16(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_uint32")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringUint32 {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringUint32(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_uint64")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringUint64 {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringUint64(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_uint8")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringUint8 {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringUint8(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_unix")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringUnix {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringUnixSeconds(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_unix-micro")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringUnixMinusMicro {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringUnixMicro(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_unix-milli")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringUnixMinusMilli {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringUnixMilli(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_unix-nano")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringUnixMinusNano {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringUnixNano(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_unix-seconds")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringUnixMinusSeconds {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringUnixSeconds(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_uri")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringURI {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeURI(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_uuid")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringUUID {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeUUID(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_integer")
		e.Int(s.RequiredInteger)
	}
	{
		e.FieldStart("required_integer_int16")
		e.Int16(s.RequiredIntegerInt16)
	}
	{
		e.FieldStart("required_integer_int32")
		e.Int32(s.RequiredIntegerInt32)
	}
	{
		e.FieldStart("required_integer_int64")
		e.Int64(s.RequiredIntegerInt64)
	}
	{
		e.FieldStart("required_integer_int8")
		e.Int8(s.RequiredIntegerInt8)
	}
	{
		e.FieldStart("required_integer_uint")
		e.UInt(s.RequiredIntegerUint)
	}
	{
		e.FieldStart("required_integer_uint16")
		e.UInt16(s.RequiredIntegerUint16)
	}
	{
		e.FieldStart("required_integer_uint32")
		e.UInt32(s.RequiredIntegerUint32)
	}
	{
		e.FieldStart("required_integer_uint64")
		e.UInt64(s.RequiredIntegerUint64)
	}
	{
		e.FieldStart("required_integer_uint8")
		e.UInt8(s.RequiredIntegerUint8)
	}
	{
		e.FieldStart("required_integer_unix")
		json.EncodeUnixSeconds(e, s.RequiredIntegerUnix)
	}
	{
		e.FieldStart("required_integer_unix-micro")
		json.EncodeUnixMicro(e, s.RequiredIntegerUnixMinusMicro)
	}
	{
		e.FieldStart("required_integer_unix-milli")
		json.EncodeUnixMilli(e, s.RequiredIntegerUnixMinusMilli)
	}
	{
		e.FieldStart("required_integer_unix-nano")
		json.EncodeUnixNano(e, s.RequiredIntegerUnixMinusNano)
	}
	{
		e.FieldStart("required_integer_unix-seconds")
		json.EncodeUnixSeconds(e, s.RequiredIntegerUnixMinusSeconds)
	}
	{
		_ = s.RequiredNull
		e.FieldStart("required_null")
		e.Null()
	}
	{
		e.FieldStart("required_number")
		e.Float64(s.RequiredNumber)
	}
	{
		e.FieldStart("required_number_double")
		e.Float64(s.RequiredNumberDouble)
	}
	{
		e.FieldStart("required_number_float")
		e.Float32(s.RequiredNumberFloat)
	}
	{
		e.FieldStart("required_number_int32")
		e.Int32(s.RequiredNumberInt32)
	}
	{
		e.FieldStart("required_number_int64")
		e.Int64(s.RequiredNumberInt64)
	}
	{
		e.FieldStart("required_string")
		e.Str(s.RequiredString)
	}
	{
		e.FieldStart("required_string_base64")
		e.Base64(s.RequiredStringBase64)
	}
	{
		e.FieldStart("required_string_binary")
		e.Str(s.RequiredStringBinary)
	}
	{
		e.FieldStart("required_string_byte")
		e.Base64(s.RequiredStringByte)
	}
	{
		e.FieldStart("required_string_date")
		json.EncodeDate(e, s.RequiredStringDate)
	}
	{
		e.FieldStart("required_string_date-time")
		json.EncodeDateTime(e, s.RequiredStringDateMinusTime)
	}
	{
		e.FieldStart("required_string_duration")
		json.EncodeDuration(e, s.RequiredStringDuration)
	}
	{
		e.FieldStart("required_string_email")
		e.Str(s.RequiredStringEmail)
	}
	{
		e.FieldStart("required_string_float32")
		json.EncodeStringFloat32(e, s.RequiredStringFloat32)
	}
	{
		e.FieldStart("required_string_float64")
		json.EncodeStringFloat64(e, s.RequiredStringFloat64)
	}
	{
		e.FieldStart("required_string_hostname")
		e.Str(s.RequiredStringHostname)
	}
	{
		e.FieldStart("required_string_int")
		json.EncodeStringInt(e, s.RequiredStringInt)
	}
	{
		e.FieldStart("required_string_int16")
		json.EncodeStringInt16(e, s.RequiredStringInt16)
	}
	{
		e.FieldStart("required_string_int32")
		json.EncodeStringInt32(e, s.RequiredStringInt32)
	}
	{
		e.FieldStart("required_string_int64")
		json.EncodeStringInt64(e, s.RequiredStringInt64)
	}
	{
		e.FieldStart("required_string_int8")
		json.EncodeStringInt8(e, s.RequiredStringInt8)
	}
	{
		e.FieldStart("required_string_ip")
		json.EncodeIP(e, s.RequiredStringIP)
	}
	{
		e.FieldStart("required_string_ipv4")
		json.EncodeIPv4(e, s.RequiredStringIpv4)
	}
	{
		e.FieldStart("required_string_ipv6")
		json.EncodeIPv6(e, s.RequiredStringIpv6)
	}
	{
		e.FieldStart("required_string_password")
		e.Str(s.RequiredStringPassword)
	}
	{
		e.FieldStart("required_string_time")
		json.EncodeTime(e, s.RequiredStringTime)
	}
	{
		e.FieldStart("required_string_uint")
		json.EncodeStringUint(e, s.RequiredStringUint)
	}
	{
		e.FieldStart("required_string_uint16")
		json.EncodeStringUint16(e, s.RequiredStringUint16)
	}
	{
		e.FieldStart("required_string_uint32")
		json.EncodeStringUint32(e, s.RequiredStringUint32)
	}
	{
		e.FieldStart("required_string_uint64")
		json.EncodeStringUint64(e, s.RequiredStringUint64)
	}
	{
		e.FieldStart("required_string_uint8")
		json.EncodeStringUint8(e, s.RequiredStringUint8)
	}
	{
		e.FieldStart("required_string_unix")
		json.EncodeStringUnixSeconds(e, s.RequiredStringUnix)
	}
	{
		e.FieldStart("required_string_unix-micro")
		json.EncodeStringUnixMicro(e, s.RequiredStringUnixMinusMicro)
	}
	{
		e.FieldStart("required_string_unix-milli")
		json.EncodeStringUnixMilli(e, s.RequiredStringUnixMinusMilli)
	}
	{
		e.FieldStart("required_string_unix-nano")
		json.EncodeStringUnixNano(e, s.RequiredStringUnixMinusNano)
	}
	{
		e.FieldStart("required_string_unix-seconds")
		json.EncodeStringUnixSeconds(e, s.RequiredStringUnixMinusSeconds)
	}
	{
		e.FieldStart("required_string_uri")
		json.EncodeURI(e, s.RequiredStringURI)
	}
	{
		e.FieldStart("required_string_uuid")
		json.EncodeUUID(e, s.RequiredStringUUID)
	}
	{
		if len(s.OptionalAny) != 0 {
			e.FieldStart("optional_any")
			e.Raw(s.OptionalAny)
		}
	}
	{
		if s.OptionalArrayAny != nil {
			e.FieldStart("optional_array_any")
			e.ArrStart()
			for _, elem := range s.OptionalArrayAny {
				if len(elem) != 0 {
					e.Raw(elem)
				}
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayBoolean != nil {
			e.FieldStart("optional_array_boolean")
			e.ArrStart()
			for _, elem := range s.OptionalArrayBoolean {
				e.Bool(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayInteger != nil {
			e.FieldStart("optional_array_integer")
			e.ArrStart()
			for _, elem := range s.OptionalArrayInteger {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayIntegerInt16 != nil {
			e.FieldStart("optional_array_integer_int16")
			e.ArrStart()
			for _, elem := range s.OptionalArrayIntegerInt16 {
				e.Int16(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayIntegerInt32 != nil {
			e.FieldStart("optional_array_integer_int32")
			e.ArrStart()
			for _, elem := range s.OptionalArrayIntegerInt32 {
				e.Int32(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayIntegerInt64 != nil {
			e.FieldStart("optional_array_integer_int64")
			e.ArrStart()
			for _, elem := range s.OptionalArrayIntegerInt64 {
				e.Int64(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayIntegerInt8 != nil {
			e.FieldStart("optional_array_integer_int8")
			e.ArrStart()
			for _, elem := range s.OptionalArrayIntegerInt8 {
				e.Int8(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayIntegerUint != nil {
			e.FieldStart("optional_array_integer_uint")
			e.ArrStart()
			for _, elem := range s.OptionalArrayIntegerUint {
				e.UInt(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayIntegerUint16 != nil {
			e.FieldStart("optional_array_integer_uint16")
			e.ArrStart()
			for _, elem := range s.OptionalArrayIntegerUint16 {
				e.UInt16(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayIntegerUint32 != nil {
			e.FieldStart("optional_array_integer_uint32")
			e.ArrStart()
			for _, elem := range s.OptionalArrayIntegerUint32 {
				e.UInt32(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayIntegerUint64 != nil {
			e.FieldStart("optional_array_integer_uint64")
			e.ArrStart()
			for _, elem := range s.OptionalArrayIntegerUint64 {
				e.UInt64(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayIntegerUint8 != nil {
			e.FieldStart("optional_array_integer_uint8")
			e.ArrStart()
			for _, elem := range s.OptionalArrayIntegerUint8 {
				e.UInt8(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayIntegerUnix != nil {
			e.FieldStart("optional_array_integer_unix")
			e.ArrStart()
			for _, elem := range s.OptionalArrayIntegerUnix {
				json.EncodeUnixSeconds(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayIntegerUnixMinusMicro != nil {
			e.FieldStart("optional_array_integer_unix-micro")
			e.ArrStart()
			for _, elem := range s.OptionalArrayIntegerUnixMinusMicro {
				json.EncodeUnixMicro(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayIntegerUnixMinusMilli != nil {
			e.FieldStart("optional_array_integer_unix-milli")
			e.ArrStart()
			for _, elem := range s.OptionalArrayIntegerUnixMinusMilli {
				json.EncodeUnixMilli(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayIntegerUnixMinusNano != nil {
			e.FieldStart("optional_array_integer_unix-nano")
			e.ArrStart()
			for _, elem := range s.OptionalArrayIntegerUnixMinusNano {
				json.EncodeUnixNano(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayIntegerUnixMinusSeconds != nil {
			e.FieldStart("optional_array_integer_unix-seconds")
			e.ArrStart()
			for _, elem := range s.OptionalArrayIntegerUnixMinusSeconds {
				json.EncodeUnixSeconds(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayNull != nil {
			e.FieldStart("optional_array_null")
			e.ArrStart()
			for _, elem := range s.OptionalArrayNull {
				_ = elem
				e.Null()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayNumber != nil {
			e.FieldStart("optional_array_number")
			e.ArrStart()
			for _, elem := range s.OptionalArrayNumber {
				e.Float64(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayNumberDouble != nil {
			e.FieldStart("optional_array_number_double")
			e.ArrStart()
			for _, elem := range s.OptionalArrayNumberDouble {
				e.Float64(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayNumberFloat != nil {
			e.FieldStart("optional_array_number_float")
			e.ArrStart()
			for _, elem := range s.OptionalArrayNumberFloat {
				e.Float32(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayNumberInt32 != nil {
			e.FieldStart("optional_array_number_int32")
			e.ArrStart()
			for _, elem := range s.OptionalArrayNumberInt32 {
				e.Int32(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayNumberInt64 != nil {
			e.FieldStart("optional_array_number_int64")
			e.ArrStart()
			for _, elem := range s.OptionalArrayNumberInt64 {
				e.Int64(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayString != nil {
			e.FieldStart("optional_array_string")
			e.ArrStart()
			for _, elem := range s.OptionalArrayString {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringBase64 != nil {
			e.FieldStart("optional_array_string_base64")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringBase64 {
				e.Base64(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringBinary != nil {
			e.FieldStart("optional_array_string_binary")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringBinary {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringByte != nil {
			e.FieldStart("optional_array_string_byte")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringByte {
				e.Base64(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringDate != nil {
			e.FieldStart("optional_array_string_date")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringDate {
				json.EncodeDate(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringDateMinusTime != nil {
			e.FieldStart("optional_array_string_date-time")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringDateMinusTime {
				json.EncodeDateTime(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringDuration != nil {
			e.FieldStart("optional_array_string_duration")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringDuration {
				json.EncodeDuration(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringEmail != nil {
			e.FieldStart("optional_array_string_email")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringEmail {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringFloat32 != nil {
			e.FieldStart("optional_array_string_float32")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringFloat32 {
				json.EncodeStringFloat32(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringFloat64 != nil {
			e.FieldStart("optional_array_string_float64")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringFloat64 {
				json.EncodeStringFloat64(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringHostname != nil {
			e.FieldStart("optional_array_string_hostname")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringHostname {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringInt != nil {
			e.FieldStart("optional_array_string_int")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringInt {
				json.EncodeStringInt(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringInt16 != nil {
			e.FieldStart("optional_array_string_int16")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringInt16 {
				json.EncodeStringInt16(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringInt32 != nil {
			e.FieldStart("optional_array_string_int32")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringInt32 {
				json.EncodeStringInt32(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringInt64 != nil {
			e.FieldStart("optional_array_string_int64")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringInt64 {
				json.EncodeStringInt64(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringInt8 != nil {
			e.FieldStart("optional_array_string_int8")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringInt8 {
				json.EncodeStringInt8(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringIP != nil {
			e.FieldStart("optional_array_string_ip")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringIP {
				json.EncodeIP(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringIpv4 != nil {
			e.FieldStart("optional_array_string_ipv4")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringIpv4 {
				json.EncodeIPv4(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringIpv6 != nil {
			e.FieldStart("optional_array_string_ipv6")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringIpv6 {
				json.EncodeIPv6(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringPassword != nil {
			e.FieldStart("optional_array_string_password")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringPassword {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringTime != nil {
			e.FieldStart("optional_array_string_time")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringTime {
				json.EncodeTime(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringUint != nil {
			e.FieldStart("optional_array_string_uint")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringUint {
				json.EncodeStringUint(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringUint16 != nil {
			e.FieldStart("optional_array_string_uint16")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringUint16 {
				json.EncodeStringUint16(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringUint32 != nil {
			e.FieldStart("optional_array_string_uint32")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringUint32 {
				json.EncodeStringUint32(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringUint64 != nil {
			e.FieldStart("optional_array_string_uint64")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringUint64 {
				json.EncodeStringUint64(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringUint8 != nil {
			e.FieldStart("optional_array_string_uint8")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringUint8 {
				json.EncodeStringUint8(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringUnix != nil {
			e.FieldStart("optional_array_string_unix")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringUnix {
				json.EncodeStringUnixSeconds(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringUnixMinusMicro != nil {
			e.FieldStart("optional_array_string_unix-micro")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringUnixMinusMicro {
				json.EncodeStringUnixMicro(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringUnixMinusMilli != nil {
			e.FieldStart("optional_array_string_unix-milli")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringUnixMinusMilli {
				json.EncodeStringUnixMilli(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringUnixMinusNano != nil {
			e.FieldStart("optional_array_string_unix-nano")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringUnixMinusNano {
				json.EncodeStringUnixNano(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringUnixMinusSeconds != nil {
			e.FieldStart("optional_array_string_unix-seconds")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringUnixMinusSeconds {
				json.EncodeStringUnixSeconds(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringURI != nil {
			e.FieldStart("optional_array_string_uri")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringURI {
				json.EncodeURI(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringUUID != nil {
			e.FieldStart("optional_array_string_uuid")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringUUID {
				json.EncodeUUID(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalBoolean.Set {
			e.FieldStart("optional_boolean")
			s.OptionalBoolean.Encode(e)
		}
	}
	{
		if s.OptionalDoubleArrayAny != nil {
			e.FieldStart("optional_double_array_any")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayAny {
				e.ArrStart()
				for _, elem := range elem {
					if len(elem) != 0 {
						e.Raw(elem)
					}
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayBoolean != nil {
			e.FieldStart("optional_double_array_boolean")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayBoolean {
				e.ArrStart()
				for _, elem := range elem {
					e.Bool(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayInteger != nil {
			e.FieldStart("optional_double_array_integer")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayInteger {
				e.ArrStart()
				for _, elem := range elem {
					e.Int(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayIntegerInt16 != nil {
			e.FieldStart("optional_double_array_integer_int16")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayIntegerInt16 {
				e.ArrStart()
				for _, elem := range elem {
					e.Int16(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayIntegerInt32 != nil {
			e.FieldStart("optional_double_array_integer_int32")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayIntegerInt32 {
				e.ArrStart()
				for _, elem := range elem {
					e.Int32(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayIntegerInt64 != nil {
			e.FieldStart("optional_double_array_integer_int64")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayIntegerInt64 {
				e.ArrStart()
				for _, elem := range elem {
					e.Int64(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayIntegerInt8 != nil {
			e.FieldStart("optional_double_array_integer_int8")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayIntegerInt8 {
				e.ArrStart()
				for _, elem := range elem {
					e.Int8(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayIntegerUint != nil {
			e.FieldStart("optional_double_array_integer_uint")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayIntegerUint {
				e.ArrStart()
				for _, elem := range elem {
					e.UInt(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayIntegerUint16 != nil {
			e.FieldStart("optional_double_array_integer_uint16")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayIntegerUint16 {
				e.ArrStart()
				for _, elem := range elem {
					e.UInt16(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayIntegerUint32 != nil {
			e.FieldStart("optional_double_array_integer_uint32")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayIntegerUint32 {
				e.ArrStart()
				for _, elem := range elem {
					e.UInt32(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayIntegerUint64 != nil {
			e.FieldStart("optional_double_array_integer_uint64")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayIntegerUint64 {
				e.ArrStart()
				for _, elem := range elem {
					e.UInt64(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayIntegerUint8 != nil {
			e.FieldStart("optional_double_array_integer_uint8")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayIntegerUint8 {
				e.ArrStart()
				for _, elem := range elem {
					e.UInt8(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayIntegerUnix != nil {
			e.FieldStart("optional_double_array_integer_unix")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayIntegerUnix {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeUnixSeconds(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayIntegerUnixMinusMicro != nil {
			e.FieldStart("optional_double_array_integer_unix-micro")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayIntegerUnixMinusMicro {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeUnixMicro(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayIntegerUnixMinusMilli != nil {
			e.FieldStart("optional_double_array_integer_unix-milli")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayIntegerUnixMinusMilli {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeUnixMilli(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayIntegerUnixMinusNano != nil {
			e.FieldStart("optional_double_array_integer_unix-nano")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayIntegerUnixMinusNano {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeUnixNano(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayIntegerUnixMinusSeconds != nil {
			e.FieldStart("optional_double_array_integer_unix-seconds")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayIntegerUnixMinusSeconds {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeUnixSeconds(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayNull != nil {
			e.FieldStart("optional_double_array_null")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayNull {
				e.ArrStart()
				for _, elem := range elem {
					_ = elem
					e.Null()
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayNumber != nil {
			e.FieldStart("optional_double_array_number")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayNumber {
				e.ArrStart()
				for _, elem := range elem {
					e.Float64(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayNumberDouble != nil {
			e.FieldStart("optional_double_array_number_double")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayNumberDouble {
				e.ArrStart()
				for _, elem := range elem {
					e.Float64(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayNumberFloat != nil {
			e.FieldStart("optional_double_array_number_float")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayNumberFloat {
				e.ArrStart()
				for _, elem := range elem {
					e.Float32(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayNumberInt32 != nil {
			e.FieldStart("optional_double_array_number_int32")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayNumberInt32 {
				e.ArrStart()
				for _, elem := range elem {
					e.Int32(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayNumberInt64 != nil {
			e.FieldStart("optional_double_array_number_int64")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayNumberInt64 {
				e.ArrStart()
				for _, elem := range elem {
					e.Int64(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayString != nil {
			e.FieldStart("optional_double_array_string")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayString {
				e.ArrStart()
				for _, elem := range elem {
					e.Str(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringBase64 != nil {
			e.FieldStart("optional_double_array_string_base64")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringBase64 {
				e.ArrStart()
				for _, elem := range elem {
					e.Base64(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringBinary != nil {
			e.FieldStart("optional_double_array_string_binary")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringBinary {
				e.ArrStart()
				for _, elem := range elem {
					e.Str(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringByte != nil {
			e.FieldStart("optional_double_array_string_byte")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringByte {
				e.ArrStart()
				for _, elem := range elem {
					e.Base64(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringDate != nil {
			e.FieldStart("optional_double_array_string_date")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringDate {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeDate(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringDateMinusTime != nil {
			e.FieldStart("optional_double_array_string_date-time")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringDateMinusTime {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeDateTime(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringDuration != nil {
			e.FieldStart("optional_double_array_string_duration")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringDuration {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeDuration(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringEmail != nil {
			e.FieldStart("optional_double_array_string_email")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringEmail {
				e.ArrStart()
				for _, elem := range elem {
					e.Str(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringFloat32 != nil {
			e.FieldStart("optional_double_array_string_float32")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringFloat32 {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringFloat32(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringFloat64 != nil {
			e.FieldStart("optional_double_array_string_float64")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringFloat64 {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringFloat64(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringHostname != nil {
			e.FieldStart("optional_double_array_string_hostname")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringHostname {
				e.ArrStart()
				for _, elem := range elem {
					e.Str(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringInt != nil {
			e.FieldStart("optional_double_array_string_int")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringInt {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringInt(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringInt16 != nil {
			e.FieldStart("optional_double_array_string_int16")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringInt16 {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringInt16(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringInt32 != nil {
			e.FieldStart("optional_double_array_string_int32")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringInt32 {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringInt32(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringInt64 != nil {
			e.FieldStart("optional_double_array_string_int64")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringInt64 {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringInt64(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringInt8 != nil {
			e.FieldStart("optional_double_array_string_int8")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringInt8 {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringInt8(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringIP != nil {
			e.FieldStart("optional_double_array_string_ip")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringIP {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeIP(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringIpv4 != nil {
			e.FieldStart("optional_double_array_string_ipv4")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringIpv4 {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeIPv4(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringIpv6 != nil {
			e.FieldStart("optional_double_array_string_ipv6")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringIpv6 {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeIPv6(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringPassword != nil {
			e.FieldStart("optional_double_array_string_password")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringPassword {
				e.ArrStart()
				for _, elem := range elem {
					e.Str(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringTime != nil {
			e.FieldStart("optional_double_array_string_time")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringTime {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeTime(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringUint != nil {
			e.FieldStart("optional_double_array_string_uint")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringUint {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringUint(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringUint16 != nil {
			e.FieldStart("optional_double_array_string_uint16")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringUint16 {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringUint16(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringUint32 != nil {
			e.FieldStart("optional_double_array_string_uint32")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringUint32 {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringUint32(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringUint64 != nil {
			e.FieldStart("optional_double_array_string_uint64")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringUint64 {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringUint64(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringUint8 != nil {
			e.FieldStart("optional_double_array_string_uint8")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringUint8 {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringUint8(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringUnix != nil {
			e.FieldStart("optional_double_array_string_unix")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringUnix {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringUnixSeconds(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringUnixMinusMicro != nil {
			e.FieldStart("optional_double_array_string_unix-micro")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringUnixMinusMicro {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringUnixMicro(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringUnixMinusMilli != nil {
			e.FieldStart("optional_double_array_string_unix-milli")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringUnixMinusMilli {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringUnixMilli(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringUnixMinusNano != nil {
			e.FieldStart("optional_double_array_string_unix-nano")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringUnixMinusNano {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringUnixNano(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringUnixMinusSeconds != nil {
			e.FieldStart("optional_double_array_string_unix-seconds")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringUnixMinusSeconds {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringUnixSeconds(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringURI != nil {
			e.FieldStart("optional_double_array_string_uri")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringURI {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeURI(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringUUID != nil {
			e.FieldStart("optional_double_array_string_uuid")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringUUID {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeUUID(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalInteger.Set {
			e.FieldStart("optional_integer")
			s.OptionalInteger.Encode(e)
		}
	}
	{
		if s.OptionalIntegerInt16.Set {
			e.FieldStart("optional_integer_int16")
			s.OptionalIntegerInt16.Encode(e)
		}
	}
	{
		if s.OptionalIntegerInt32.Set {
			e.FieldStart("optional_integer_int32")
			s.OptionalIntegerInt32.Encode(e)
		}
	}
	{
		if s.OptionalIntegerInt64.Set {
			e.FieldStart("optional_integer_int64")
			s.OptionalIntegerInt64.Encode(e)
		}
	}
	{
		if s.OptionalIntegerInt8.Set {
			e.FieldStart("optional_integer_int8")
			s.OptionalIntegerInt8.Encode(e)
		}
	}
	{
		if s.OptionalIntegerUint.Set {
			e.FieldStart("optional_integer_uint")
			s.OptionalIntegerUint.Encode(e)
		}
	}
	{
		if s.OptionalIntegerUint16.Set {
			e.FieldStart("optional_integer_uint16")
			s.OptionalIntegerUint16.Encode(e)
		}
	}
	{
		if s.OptionalIntegerUint32.Set {
			e.FieldStart("optional_integer_uint32")
			s.OptionalIntegerUint32.Encode(e)
		}
	}
	{
		if s.OptionalIntegerUint64.Set {
			e.FieldStart("optional_integer_uint64")
			s.OptionalIntegerUint64.Encode(e)
		}
	}
	{
		if s.OptionalIntegerUint8.Set {
			e.FieldStart("optional_integer_uint8")
			s.OptionalIntegerUint8.Encode(e)
		}
	}
	{
		if s.OptionalIntegerUnix.Set {
			e.FieldStart("optional_integer_unix")
			s.OptionalIntegerUnix.Encode(e, json.EncodeUnixSeconds)
		}
	}
	{
		if s.OptionalIntegerUnixMinusMicro.Set {
			e.FieldStart("optional_integer_unix-micro")
			s.OptionalIntegerUnixMinusMicro.Encode(e, json.EncodeUnixMicro)
		}
	}
	{
		if s.OptionalIntegerUnixMinusMilli.Set {
			e.FieldStart("optional_integer_unix-milli")
			s.OptionalIntegerUnixMinusMilli.Encode(e, json.EncodeUnixMilli)
		}
	}
	{
		if s.OptionalIntegerUnixMinusNano.Set {
			e.FieldStart("optional_integer_unix-nano")
			s.OptionalIntegerUnixMinusNano.Encode(e, json.EncodeUnixNano)
		}
	}
	{
		if s.OptionalIntegerUnixMinusSeconds.Set {
			e.FieldStart("optional_integer_unix-seconds")
			s.OptionalIntegerUnixMinusSeconds.Encode(e, json.EncodeUnixSeconds)
		}
	}
	{
		if s.OptionalNull.Set {
			e.FieldStart("optional_null")
			s.OptionalNull.Encode(e)
		}
	}
	{
		if s.OptionalNumber.Set {
			e.FieldStart("optional_number")
			s.OptionalNumber.Encode(e)
		}
	}
	{
		if s.OptionalNumberDouble.Set {
			e.FieldStart("optional_number_double")
			s.OptionalNumberDouble.Encode(e)
		}
	}
	{
		if s.OptionalNumberFloat.Set {
			e.FieldStart("optional_number_float")
			s.OptionalNumberFloat.Encode(e)
		}
	}
	{
		if s.OptionalNumberInt32.Set {
			e.FieldStart("optional_number_int32")
			s.OptionalNumberInt32.Encode(e)
		}
	}
	{
		if s.OptionalNumberInt64.Set {
			e.FieldStart("optional_number_int64")
			s.OptionalNumberInt64.Encode(e)
		}
	}
	{
		if s.OptionalString.Set {
			e.FieldStart("optional_string")
			s.OptionalString.Encode(e)
		}
	}
	{
		e.FieldStart("optional_string_base64")
		e.Base64(s.OptionalStringBase64)
	}
	{
		if s.OptionalStringBinary.Set {
			e.FieldStart("optional_string_binary")
			s.OptionalStringBinary.Encode(e)
		}
	}
	{
		e.FieldStart("optional_string_byte")
		e.Base64(s.OptionalStringByte)
	}
	{
		if s.OptionalStringDate.Set {
			e.FieldStart("optional_string_date")
			s.OptionalStringDate.Encode(e, json.EncodeDate)
		}
	}
	{
		if s.OptionalStringDateMinusTime.Set {
			e.FieldStart("optional_string_date-time")
			s.OptionalStringDateMinusTime.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.OptionalStringDuration.Set {
			e.FieldStart("optional_string_duration")
			s.OptionalStringDuration.Encode(e)
		}
	}
	{
		if s.OptionalStringEmail.Set {
			e.FieldStart("optional_string_email")
			s.OptionalStringEmail.Encode(e)
		}
	}
	{
		if s.OptionalStringFloat32.Set {
			e.FieldStart("optional_string_float32")
			s.OptionalStringFloat32.Encode(e)
		}
	}
	{
		if s.OptionalStringFloat64.Set {
			e.FieldStart("optional_string_float64")
			s.OptionalStringFloat64.Encode(e)
		}
	}
	{
		if s.OptionalStringHostname.Set {
			e.FieldStart("optional_string_hostname")
			s.OptionalStringHostname.Encode(e)
		}
	}
	{
		if s.OptionalStringInt.Set {
			e.FieldStart("optional_string_int")
			s.OptionalStringInt.Encode(e)
		}
	}
	{
		if s.OptionalStringInt16.Set {
			e.FieldStart("optional_string_int16")
			s.OptionalStringInt16.Encode(e)
		}
	}
	{
		if s.OptionalStringInt32.Set {
			e.FieldStart("optional_string_int32")
			s.OptionalStringInt32.Encode(e)
		}
	}
	{
		if s.OptionalStringInt64.Set {
			e.FieldStart("optional_string_int64")
			s.OptionalStringInt64.Encode(e)
		}
	}
	{
		if s.OptionalStringInt8.Set {
			e.FieldStart("optional_string_int8")
			s.OptionalStringInt8.Encode(e)
		}
	}
	{
		if s.OptionalStringIP.Set {
			e.FieldStart("optional_string_ip")
			s.OptionalStringIP.Encode(e)
		}
	}
	{
		if s.OptionalStringIpv4.Set {
			e.FieldStart("optional_string_ipv4")
			s.OptionalStringIpv4.Encode(e)
		}
	}
	{
		if s.OptionalStringIpv6.Set {
			e.FieldStart("optional_string_ipv6")
			s.OptionalStringIpv6.Encode(e)
		}
	}
	{
		if s.OptionalStringPassword.Set {
			e.FieldStart("optional_string_password")
			s.OptionalStringPassword.Encode(e)
		}
	}
	{
		if s.OptionalStringTime.Set {
			e.FieldStart("optional_string_time")
			s.OptionalStringTime.Encode(e, json.EncodeTime)
		}
	}
	{
		if s.OptionalStringUint.Set {
			e.FieldStart("optional_string_uint")
			s.OptionalStringUint.Encode(e)
		}
	}
	{
		if s.OptionalStringUint16.Set {
			e.FieldStart("optional_string_uint16")
			s.OptionalStringUint16.Encode(e)
		}
	}
	{
		if s.OptionalStringUint32.Set {
			e.FieldStart("optional_string_uint32")
			s.OptionalStringUint32.Encode(e)
		}
	}
	{
		if s.OptionalStringUint64.Set {
			e.FieldStart("optional_string_uint64")
			s.OptionalStringUint64.Encode(e)
		}
	}
	{
		if s.OptionalStringUint8.Set {
			e.FieldStart("optional_string_uint8")
			s.OptionalStringUint8.Encode(e)
		}
	}
	{
		if s.OptionalStringUnix.Set {
			e.FieldStart("optional_string_unix")
			s.OptionalStringUnix.Encode(e, json.EncodeStringUnixSeconds)
		}
	}
	{
		if s.OptionalStringUnixMinusMicro.Set {
			e.FieldStart("optional_string_unix-micro")
			s.OptionalStringUnixMinusMicro.Encode(e, json.EncodeStringUnixMicro)
		}
	}
	{
		if s.OptionalStringUnixMinusMilli.Set {
			e.FieldStart("optional_string_unix-milli")
			s.OptionalStringUnixMinusMilli.Encode(e, json.EncodeStringUnixMilli)
		}
	}
	{
		if s.OptionalStringUnixMinusNano.Set {
			e.FieldStart("optional_string_unix-nano")
			s.OptionalStringUnixMinusNano.Encode(e, json.EncodeStringUnixNano)
		}
	}
	{
		if s.OptionalStringUnixMinusSeconds.Set {
			e.FieldStart("optional_string_unix-seconds")
			s.OptionalStringUnixMinusSeconds.Encode(e, json.EncodeStringUnixSeconds)
		}
	}
	{
		if s.OptionalStringURI.Set {
			e.FieldStart("optional_string_uri")
			s.OptionalStringURI.Encode(e)
		}
	}
	{
		if s.OptionalStringUUID.Set {
			e.FieldStart("optional_string_uuid")
			s.OptionalStringUUID.Encode(e)
		}
	}
}

var jsonFieldsNameOfTestRequestFormatTestReq = [336]string{
	0:   "required_any",
	1:   "required_array_any",
	2:   "required_array_boolean",
	3:   "required_array_integer",
	4:   "required_array_integer_int16",
	5:   "required_array_integer_int32",
	6:   "required_array_integer_int64",
	7:   "required_array_integer_int8",
	8:   "required_array_integer_uint",
	9:   "required_array_integer_uint16",
	10:  "required_array_integer_uint32",
	11:  "required_array_integer_uint64",
	12:  "required_array_integer_uint8",
	13:  "required_array_integer_unix",
	14:  "required_array_integer_unix-micro",
	15:  "required_array_integer_unix-milli",
	16:  "required_array_integer_unix-nano",
	17:  "required_array_integer_unix-seconds",
	18:  "required_array_null",
	19:  "required_array_number",
	20:  "required_array_number_double",
	21:  "required_array_number_float",
	22:  "required_array_number_int32",
	23:  "required_array_number_int64",
	24:  "required_array_string",
	25:  "required_array_string_base64",
	26:  "required_array_string_binary",
	27:  "required_array_string_byte",
	28:  "required_array_string_date",
	29:  "required_array_string_date-time",
	30:  "required_array_string_duration",
	31:  "required_array_string_email",
	32:  "required_array_string_float32",
	33:  "required_array_string_float64",
	34:  "required_array_string_hostname",
	35:  "required_array_string_int",
	36:  "required_array_string_int16",
	37:  "required_array_string_int32",
	38:  "required_array_string_int64",
	39:  "required_array_string_int8",
	40:  "required_array_string_ip",
	41:  "required_array_string_ipv4",
	42:  "required_array_string_ipv6",
	43:  "required_array_string_password",
	44:  "required_array_string_time",
	45:  "required_array_string_uint",
	46:  "required_array_string_uint16",
	47:  "required_array_string_uint32",
	48:  "required_array_string_uint64",
	49:  "required_array_string_uint8",
	50:  "required_array_string_unix",
	51:  "required_array_string_unix-micro",
	52:  "required_array_string_unix-milli",
	53:  "required_array_string_unix-nano",
	54:  "required_array_string_unix-seconds",
	55:  "required_array_string_uri",
	56:  "required_array_string_uuid",
	57:  "required_boolean",
	58:  "required_double_array_any",
	59:  "required_double_array_boolean",
	60:  "required_double_array_integer",
	61:  "required_double_array_integer_int16",
	62:  "required_double_array_integer_int32",
	63:  "required_double_array_integer_int64",
	64:  "required_double_array_integer_int8",
	65:  "required_double_array_integer_uint",
	66:  "required_double_array_integer_uint16",
	67:  "required_double_array_integer_uint32",
	68:  "required_double_array_integer_uint64",
	69:  "required_double_array_integer_uint8",
	70:  "required_double_array_integer_unix",
	71:  "required_double_array_integer_unix-micro",
	72:  "required_double_array_integer_unix-milli",
	73:  "required_double_array_integer_unix-nano",
	74:  "required_double_array_integer_unix-seconds",
	75:  "required_double_array_null",
	76:  "required_double_array_number",
	77:  "required_double_array_number_double",
	78:  "required_double_array_number_float",
	79:  "required_double_array_number_int32",
	80:  "required_double_array_number_int64",
	81:  "required_double_array_string",
	82:  "required_double_array_string_base64",
	83:  "required_double_array_string_binary",
	84:  "required_double_array_string_byte",
	85:  "required_double_array_string_date",
	86:  "required_double_array_string_date-time",
	87:  "required_double_array_string_duration",
	88:  "required_double_array_string_email",
	89:  "required_double_array_string_float32",
	90:  "required_double_array_string_float64",
	91:  "required_double_array_string_hostname",
	92:  "required_double_array_string_int",
	93:  "required_double_array_string_int16",
	94:  "required_double_array_string_int32",
	95:  "required_double_array_string_int64",
	96:  "required_double_array_string_int8",
	97:  "required_double_array_string_ip",
	98:  "required_double_array_string_ipv4",
	99:  "required_double_array_string_ipv6",
	100: "required_double_array_string_password",
	101: "required_double_array_string_time",
	102: "required_double_array_string_uint",
	103: "required_double_array_string_uint16",
	104: "required_double_array_string_uint32",
	105: "required_double_array_string_uint64",
	106: "required_double_array_string_uint8",
	107: "required_double_array_string_unix",
	108: "required_double_array_string_unix-micro",
	109: "required_double_array_string_unix-milli",
	110: "required_double_array_string_unix-nano",
	111: "required_double_array_string_unix-seconds",
	112: "required_double_array_string_uri",
	113: "required_double_array_string_uuid",
	114: "required_integer",
	115: "required_integer_int16",
	116: "required_integer_int32",
	117: "required_integer_int64",
	118: "required_integer_int8",
	119: "required_integer_uint",
	120: "required_integer_uint16",
	121: "required_integer_uint32",
	122: "required_integer_uint64",
	123: "required_integer_uint8",
	124: "required_integer_unix",
	125: "required_integer_unix-micro",
	126: "required_integer_unix-milli",
	127: "required_integer_unix-nano",
	128: "required_integer_unix-seconds",
	129: "required_null",
	130: "required_number",
	131: "required_number_double",
	132: "required_number_float",
	133: "required_number_int32",
	134: "required_number_int64",
	135: "required_string",
	136: "required_string_base64",
	137: "required_string_binary",
	138: "required_string_byte",
	139: "required_string_date",
	140: "required_string_date-time",
	141: "required_string_duration",
	142: "required_string_email",
	143: "required_string_float32",
	144: "required_string_float64",
	145: "required_string_hostname",
	146: "required_string_int",
	147: "required_string_int16",
	148: "required_string_int32",
	149: "required_string_int64",
	150: "required_string_int8",
	151: "required_string_ip",
	152: "required_string_ipv4",
	153: "required_string_ipv6",
	154: "required_string_password",
	155: "required_string_time",
	156: "required_string_uint",
	157: "required_string_uint16",
	158: "required_string_uint32",
	159: "required_string_uint64",
	160: "required_string_uint8",
	161: "required_string_unix",
	162: "required_string_unix-micro",
	163: "required_string_unix-milli",
	164: "required_string_unix-nano",
	165: "required_string_unix-seconds",
	166: "required_string_uri",
	167: "required_string_uuid",
	168: "optional_any",
	169: "optional_array_any",
	170: "optional_array_boolean",
	171: "optional_array_integer",
	172: "optional_array_integer_int16",
	173: "optional_array_integer_int32",
	174: "optional_array_integer_int64",
	175: "optional_array_integer_int8",
	176: "optional_array_integer_uint",
	177: "optional_array_integer_uint16",
	178: "optional_array_integer_uint32",
	179: "optional_array_integer_uint64",
	180: "optional_array_integer_uint8",
	181: "optional_array_integer_unix",
	182: "optional_array_integer_unix-micro",
	183: "optional_array_integer_unix-milli",
	184: "optional_array_integer_unix-nano",
	185: "optional_array_integer_unix-seconds",
	186: "optional_array_null",
	187: "optional_array_number",
	188: "optional_array_number_double",
	189: "optional_array_number_float",
	190: "optional_array_number_int32",
	191: "optional_array_number_int64",
	192: "optional_array_string",
	193: "optional_array_string_base64",
	194: "optional_array_string_binary",
	195: "optional_array_string_byte",
	196: "optional_array_string_date",
	197: "optional_array_string_date-time",
	198: "optional_array_string_duration",
	199: "optional_array_string_email",
	200: "optional_array_string_float32",
	201: "optional_array_string_float64",
	202: "optional_array_string_hostname",
	203: "optional_array_string_int",
	204: "optional_array_string_int16",
	205: "optional_array_string_int32",
	206: "optional_array_string_int64",
	207: "optional_array_string_int8",
	208: "optional_array_string_ip",
	209: "optional_array_string_ipv4",
	210: "optional_array_string_ipv6",
	211: "optional_array_string_password",
	212: "optional_array_string_time",
	213: "optional_array_string_uint",
	214: "optional_array_string_uint16",
	215: "optional_array_string_uint32",
	216: "optional_array_string_uint64",
	217: "optional_array_string_uint8",
	218: "optional_array_string_unix",
	219: "optional_array_string_unix-micro",
	220: "optional_array_string_unix-milli",
	221: "optional_array_string_unix-nano",
	222: "optional_array_string_unix-seconds",
	223: "optional_array_string_uri",
	224: "optional_array_string_uuid",
	225: "optional_boolean",
	226: "optional_double_array_any",
	227: "optional_double_array_boolean",
	228: "optional_double_array_integer",
	229: "optional_double_array_integer_int16",
	230: "optional_double_array_integer_int32",
	231: "optional_double_array_integer_int64",
	232: "optional_double_array_integer_int8",
	233: "optional_double_array_integer_uint",
	234: "optional_double_array_integer_uint16",
	235: "optional_double_array_integer_uint32",
	236: "optional_double_array_integer_uint64",
	237: "optional_double_array_integer_uint8",
	238: "optional_double_array_integer_unix",
	239: "optional_double_array_integer_unix-micro",
	240: "optional_double_array_integer_unix-milli",
	241: "optional_double_array_integer_unix-nano",
	242: "optional_double_array_integer_unix-seconds",
	243: "optional_double_array_null",
	244: "optional_double_array_number",
	245: "optional_double_array_number_double",
	246: "optional_double_array_number_float",
	247: "optional_double_array_number_int32",
	248: "optional_double_array_number_int64",
	249: "optional_double_array_string",
	250: "optional_double_array_string_base64",
	251: "optional_double_array_string_binary",
	252: "optional_double_array_string_byte",
	253: "optional_double_array_string_date",
	254: "optional_double_array_string_date-time",
	255: "optional_double_array_string_duration",
	256: "optional_double_array_string_email",
	257: "optional_double_array_string_float32",
	258: "optional_double_array_string_float64",
	259: "optional_double_array_string_hostname",
	260: "optional_double_array_string_int",
	261: "optional_double_array_string_int16",
	262: "optional_double_array_string_int32",
	263: "optional_double_array_string_int64",
	264: "optional_double_array_string_int8",
	265: "optional_double_array_string_ip",
	266: "optional_double_array_string_ipv4",
	267: "optional_double_array_string_ipv6",
	268: "optional_double_array_string_password",
	269: "optional_double_array_string_time",
	270: "optional_double_array_string_uint",
	271: "optional_double_array_string_uint16",
	272: "optional_double_array_string_uint32",
	273: "optional_double_array_string_uint64",
	274: "optional_double_array_string_uint8",
	275: "optional_double_array_string_unix",
	276: "optional_double_array_string_unix-micro",
	277: "optional_double_array_string_unix-milli",
	278: "optional_double_array_string_unix-nano",
	279: "optional_double_array_string_unix-seconds",
	280: "optional_double_array_string_uri",
	281: "optional_double_array_string_uuid",
	282: "optional_integer",
	283: "optional_integer_int16",
	284: "optional_integer_int32",
	285: "optional_integer_int64",
	286: "optional_integer_int8",
	287: "optional_integer_uint",
	288: "optional_integer_uint16",
	289: "optional_integer_uint32",
	290: "optional_integer_uint64",
	291: "optional_integer_uint8",
	292: "optional_integer_unix",
	293: "optional_integer_unix-micro",
	294: "optional_integer_unix-milli",
	295: "optional_integer_unix-nano",
	296: "optional_integer_unix-seconds",
	297: "optional_null",
	298: "optional_number",
	299: "optional_number_double",
	300: "optional_number_float",
	301: "optional_number_int32",
	302: "optional_number_int64",
	303: "optional_string",
	304: "optional_string_base64",
	305: "optional_string_binary",
	306: "optional_string_byte",
	307: "optional_string_date",
	308: "optional_string_date-time",
	309: "optional_string_duration",
	310: "optional_string_email",
	311: "optional_string_float32",
	312: "optional_string_float64",
	313: "optional_string_hostname",
	314: "optional_string_int",
	315: "optional_string_int16",
	316: "optional_string_int32",
	317: "optional_string_int64",
	318: "optional_string_int8",
	319: "optional_string_ip",
	320: "optional_string_ipv4",
	321: "optional_string_ipv6",
	322: "optional_string_password",
	323: "optional_string_time",
	324: "optional_string_uint",
	325: "optional_string_uint16",
	326: "optional_string_uint32",
	327: "optional_string_uint64",
	328: "optional_string_uint8",
	329: "optional_string_unix",
	330: "optional_string_unix-micro",
	331: "optional_string_unix-milli",
	332: "optional_string_unix-nano",
	333: "optional_string_unix-seconds",
	334: "optional_string_uri",
	335: "optional_string_uuid",
}

// Decode decodes TestRequestFormatTestReq from json.
func (s *TestRequestFormatTestReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TestRequestFormatTestReq to nil")
	}
	var requiredBitSet [42]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "required_any":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.RequiredAny = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_any\"")
			}
		case "required_array_any":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				s.RequiredArrayAny = make([]jx.Raw, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem jx.Raw
					v, err := d.RawAppend(nil)
					elem = jx.Raw(v)
					if err != nil {
						return err
					}
					s.RequiredArrayAny = append(s.RequiredArrayAny, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_any\"")
			}
		case "required_array_boolean":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				s.RequiredArrayBoolean = make([]bool, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem bool
					v, err := d.Bool()
					elem = bool(v)
					if err != nil {
						return err
					}
					s.RequiredArrayBoolean = append(s.RequiredArrayBoolean, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_boolean\"")
			}
		case "required_array_integer":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				s.RequiredArrayInteger = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.RequiredArrayInteger = append(s.RequiredArrayInteger, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer\"")
			}
		case "required_array_integer_int16":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				s.RequiredArrayIntegerInt16 = make([]int16, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int16
					v, err := d.Int16()
					elem = int16(v)
					if err != nil {
						return err
					}
					s.RequiredArrayIntegerInt16 = append(s.RequiredArrayIntegerInt16, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer_int16\"")
			}
		case "required_array_integer_int32":
			requiredBitSet[0] |= 1 << 5
			if err := func() error {
				s.RequiredArrayIntegerInt32 = make([]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int32
					v, err := d.Int32()
					elem = int32(v)
					if err != nil {
						return err
					}
					s.RequiredArrayIntegerInt32 = append(s.RequiredArrayIntegerInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer_int32\"")
			}
		case "required_array_integer_int64":
			requiredBitSet[0] |= 1 << 6
			if err := func() error {
				s.RequiredArrayIntegerInt64 = make([]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int64
					v, err := d.Int64()
					elem = int64(v)
					if err != nil {
						return err
					}
					s.RequiredArrayIntegerInt64 = append(s.RequiredArrayIntegerInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer_int64\"")
			}
		case "required_array_integer_int8":
			requiredBitSet[0] |= 1 << 7
			if err := func() error {
				s.RequiredArrayIntegerInt8 = make([]int8, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int8
					v, err := d.Int8()
					elem = int8(v)
					if err != nil {
						return err
					}
					s.RequiredArrayIntegerInt8 = append(s.RequiredArrayIntegerInt8, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer_int8\"")
			}
		case "required_array_integer_uint":
			requiredBitSet[1] |= 1 << 0
			if err := func() error {
				s.RequiredArrayIntegerUint = make([]uint, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint
					v, err := d.UInt()
					elem = uint(v)
					if err != nil {
						return err
					}
					s.RequiredArrayIntegerUint = append(s.RequiredArrayIntegerUint, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer_uint\"")
			}
		case "required_array_integer_uint16":
			requiredBitSet[1] |= 1 << 1
			if err := func() error {
				s.RequiredArrayIntegerUint16 = make([]uint16, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint16
					v, err := d.UInt16()
					elem = uint16(v)
					if err != nil {
						return err
					}
					s.RequiredArrayIntegerUint16 = append(s.RequiredArrayIntegerUint16, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer_uint16\"")
			}
		case "required_array_integer_uint32":
			requiredBitSet[1] |= 1 << 2
			if err := func() error {
				s.RequiredArrayIntegerUint32 = make([]uint32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint32
					v, err := d.UInt32()
					elem = uint32(v)
					if err != nil {
						return err
					}
					s.RequiredArrayIntegerUint32 = append(s.RequiredArrayIntegerUint32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer_uint32\"")
			}
		case "required_array_integer_uint64":
			requiredBitSet[1] |= 1 << 3
			if err := func() error {
				s.RequiredArrayIntegerUint64 = make([]uint64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint64
					v, err := d.UInt64()
					elem = uint64(v)
					if err != nil {
						return err
					}
					s.RequiredArrayIntegerUint64 = append(s.RequiredArrayIntegerUint64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer_uint64\"")
			}
		case "required_array_integer_uint8":
			requiredBitSet[1] |= 1 << 4
			if err := func() error {
				s.RequiredArrayIntegerUint8 = make([]uint8, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint8
					v, err := d.UInt8()
					elem = uint8(v)
					if err != nil {
						return err
					}
					s.RequiredArrayIntegerUint8 = append(s.RequiredArrayIntegerUint8, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer_uint8\"")
			}
		case "required_array_integer_unix":
			requiredBitSet[1] |= 1 << 5
			if err := func() error {
				s.RequiredArrayIntegerUnix = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeUnixSeconds(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayIntegerUnix = append(s.RequiredArrayIntegerUnix, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer_unix\"")
			}
		case "required_array_integer_unix-micro":
			requiredBitSet[1] |= 1 << 6
			if err := func() error {
				s.RequiredArrayIntegerUnixMinusMicro = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeUnixMicro(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayIntegerUnixMinusMicro = append(s.RequiredArrayIntegerUnixMinusMicro, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer_unix-micro\"")
			}
		case "required_array_integer_unix-milli":
			requiredBitSet[1] |= 1 << 7
			if err := func() error {
				s.RequiredArrayIntegerUnixMinusMilli = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeUnixMilli(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayIntegerUnixMinusMilli = append(s.RequiredArrayIntegerUnixMinusMilli, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer_unix-milli\"")
			}
		case "required_array_integer_unix-nano":
			requiredBitSet[2] |= 1 << 0
			if err := func() error {
				s.RequiredArrayIntegerUnixMinusNano = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeUnixNano(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayIntegerUnixMinusNano = append(s.RequiredArrayIntegerUnixMinusNano, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer_unix-nano\"")
			}
		case "required_array_integer_unix-seconds":
			requiredBitSet[2] |= 1 << 1
			if err := func() error {
				s.RequiredArrayIntegerUnixMinusSeconds = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeUnixSeconds(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayIntegerUnixMinusSeconds = append(s.RequiredArrayIntegerUnixMinusSeconds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer_unix-seconds\"")
			}
		case "required_array_null":
			requiredBitSet[2] |= 1 << 2
			if err := func() error {
				s.RequiredArrayNull = make([]struct{}, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem struct{}
					if err := d.Null(); err != nil {
						return err
					}
					s.RequiredArrayNull = append(s.RequiredArrayNull, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_null\"")
			}
		case "required_array_number":
			requiredBitSet[2] |= 1 << 3
			if err := func() error {
				s.RequiredArrayNumber = make([]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem float64
					v, err := d.Float64()
					elem = float64(v)
					if err != nil {
						return err
					}
					s.RequiredArrayNumber = append(s.RequiredArrayNumber, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_number\"")
			}
		case "required_array_number_double":
			requiredBitSet[2] |= 1 << 4
			if err := func() error {
				s.RequiredArrayNumberDouble = make([]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem float64
					v, err := d.Float64()
					elem = float64(v)
					if err != nil {
						return err
					}
					s.RequiredArrayNumberDouble = append(s.RequiredArrayNumberDouble, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_number_double\"")
			}
		case "required_array_number_float":
			requiredBitSet[2] |= 1 << 5
			if err := func() error {
				s.RequiredArrayNumberFloat = make([]float32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem float32
					v, err := d.Float32()
					elem = float32(v)
					if err != nil {
						return err
					}
					s.RequiredArrayNumberFloat = append(s.RequiredArrayNumberFloat, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_number_float\"")
			}
		case "required_array_number_int32":
			requiredBitSet[2] |= 1 << 6
			if err := func() error {
				s.RequiredArrayNumberInt32 = make([]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int32
					v, err := d.Int32()
					elem = int32(v)
					if err != nil {
						return err
					}
					s.RequiredArrayNumberInt32 = append(s.RequiredArrayNumberInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_number_int32\"")
			}
		case "required_array_number_int64":
			requiredBitSet[2] |= 1 << 7
			if err := func() error {
				s.RequiredArrayNumberInt64 = make([]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int64
					v, err := d.Int64()
					elem = int64(v)
					if err != nil {
						return err
					}
					s.RequiredArrayNumberInt64 = append(s.RequiredArrayNumberInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_number_int64\"")
			}
		case "required_array_string":
			requiredBitSet[3] |= 1 << 0
			if err := func() error {
				s.RequiredArrayString = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.RequiredArrayString = append(s.RequiredArrayString, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string\"")
			}
		case "required_array_string_base64":
			requiredBitSet[3] |= 1 << 1
			if err := func() error {
				s.RequiredArrayStringBase64 = make([][]byte, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []byte
					v, err := d.Base64()
					elem = []byte(v)
					if err != nil {
						return err
					}
					s.RequiredArrayStringBase64 = append(s.RequiredArrayStringBase64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_base64\"")
			}
		case "required_array_string_binary":
			requiredBitSet[3] |= 1 << 2
			if err := func() error {
				s.RequiredArrayStringBinary = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.RequiredArrayStringBinary = append(s.RequiredArrayStringBinary, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_binary\"")
			}
		case "required_array_string_byte":
			requiredBitSet[3] |= 1 << 3
			if err := func() error {
				s.RequiredArrayStringByte = make([][]byte, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []byte
					v, err := d.Base64()
					elem = []byte(v)
					if err != nil {
						return err
					}
					s.RequiredArrayStringByte = append(s.RequiredArrayStringByte, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_byte\"")
			}
		case "required_array_string_date":
			requiredBitSet[3] |= 1 << 4
			if err := func() error {
				s.RequiredArrayStringDate = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeDate(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringDate = append(s.RequiredArrayStringDate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_date\"")
			}
		case "required_array_string_date-time":
			requiredBitSet[3] |= 1 << 5
			if err := func() error {
				s.RequiredArrayStringDateMinusTime = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeDateTime(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringDateMinusTime = append(s.RequiredArrayStringDateMinusTime, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_date-time\"")
			}
		case "required_array_string_duration":
			requiredBitSet[3] |= 1 << 6
			if err := func() error {
				s.RequiredArrayStringDuration = make([]time.Duration, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Duration
					v, err := json.DecodeDuration(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringDuration = append(s.RequiredArrayStringDuration, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_duration\"")
			}
		case "required_array_string_email":
			requiredBitSet[3] |= 1 << 7
			if err := func() error {
				s.RequiredArrayStringEmail = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.RequiredArrayStringEmail = append(s.RequiredArrayStringEmail, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_email\"")
			}
		case "required_array_string_float32":
			requiredBitSet[4] |= 1 << 0
			if err := func() error {
				s.RequiredArrayStringFloat32 = make([]float32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem float32
					v, err := json.DecodeStringFloat32(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringFloat32 = append(s.RequiredArrayStringFloat32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_float32\"")
			}
		case "required_array_string_float64":
			requiredBitSet[4] |= 1 << 1
			if err := func() error {
				s.RequiredArrayStringFloat64 = make([]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem float64
					v, err := json.DecodeStringFloat64(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringFloat64 = append(s.RequiredArrayStringFloat64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_float64\"")
			}
		case "required_array_string_hostname":
			requiredBitSet[4] |= 1 << 2
			if err := func() error {
				s.RequiredArrayStringHostname = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.RequiredArrayStringHostname = append(s.RequiredArrayStringHostname, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_hostname\"")
			}
		case "required_array_string_int":
			requiredBitSet[4] |= 1 << 3
			if err := func() error {
				s.RequiredArrayStringInt = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := json.DecodeStringInt(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringInt = append(s.RequiredArrayStringInt, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_int\"")
			}
		case "required_array_string_int16":
			requiredBitSet[4] |= 1 << 4
			if err := func() error {
				s.RequiredArrayStringInt16 = make([]int16, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int16
					v, err := json.DecodeStringInt16(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringInt16 = append(s.RequiredArrayStringInt16, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_int16\"")
			}
		case "required_array_string_int32":
			requiredBitSet[4] |= 1 << 5
			if err := func() error {
				s.RequiredArrayStringInt32 = make([]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int32
					v, err := json.DecodeStringInt32(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringInt32 = append(s.RequiredArrayStringInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_int32\"")
			}
		case "required_array_string_int64":
			requiredBitSet[4] |= 1 << 6
			if err := func() error {
				s.RequiredArrayStringInt64 = make([]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int64
					v, err := json.DecodeStringInt64(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringInt64 = append(s.RequiredArrayStringInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_int64\"")
			}
		case "required_array_string_int8":
			requiredBitSet[4] |= 1 << 7
			if err := func() error {
				s.RequiredArrayStringInt8 = make([]int8, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int8
					v, err := json.DecodeStringInt8(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringInt8 = append(s.RequiredArrayStringInt8, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_int8\"")
			}
		case "required_array_string_ip":
			requiredBitSet[5] |= 1 << 0
			if err := func() error {
				s.RequiredArrayStringIP = make([]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem netip.Addr
					v, err := json.DecodeIP(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringIP = append(s.RequiredArrayStringIP, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_ip\"")
			}
		case "required_array_string_ipv4":
			requiredBitSet[5] |= 1 << 1
			if err := func() error {
				s.RequiredArrayStringIpv4 = make([]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem netip.Addr
					v, err := json.DecodeIPv4(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringIpv4 = append(s.RequiredArrayStringIpv4, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_ipv4\"")
			}
		case "required_array_string_ipv6":
			requiredBitSet[5] |= 1 << 2
			if err := func() error {
				s.RequiredArrayStringIpv6 = make([]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem netip.Addr
					v, err := json.DecodeIPv6(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringIpv6 = append(s.RequiredArrayStringIpv6, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_ipv6\"")
			}
		case "required_array_string_password":
			requiredBitSet[5] |= 1 << 3
			if err := func() error {
				s.RequiredArrayStringPassword = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.RequiredArrayStringPassword = append(s.RequiredArrayStringPassword, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_password\"")
			}
		case "required_array_string_time":
			requiredBitSet[5] |= 1 << 4
			if err := func() error {
				s.RequiredArrayStringTime = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeTime(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringTime = append(s.RequiredArrayStringTime, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_time\"")
			}
		case "required_array_string_uint":
			requiredBitSet[5] |= 1 << 5
			if err := func() error {
				s.RequiredArrayStringUint = make([]uint, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint
					v, err := json.DecodeStringUint(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringUint = append(s.RequiredArrayStringUint, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_uint\"")
			}
		case "required_array_string_uint16":
			requiredBitSet[5] |= 1 << 6
			if err := func() error {
				s.RequiredArrayStringUint16 = make([]uint16, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint16
					v, err := json.DecodeStringUint16(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringUint16 = append(s.RequiredArrayStringUint16, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_uint16\"")
			}
		case "required_array_string_uint32":
			requiredBitSet[5] |= 1 << 7
			if err := func() error {
				s.RequiredArrayStringUint32 = make([]uint32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint32
					v, err := json.DecodeStringUint32(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringUint32 = append(s.RequiredArrayStringUint32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_uint32\"")
			}
		case "required_array_string_uint64":
			requiredBitSet[6] |= 1 << 0
			if err := func() error {
				s.RequiredArrayStringUint64 = make([]uint64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint64
					v, err := json.DecodeStringUint64(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringUint64 = append(s.RequiredArrayStringUint64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_uint64\"")
			}
		case "required_array_string_uint8":
			requiredBitSet[6] |= 1 << 1
			if err := func() error {
				s.RequiredArrayStringUint8 = make([]uint8, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint8
					v, err := json.DecodeStringUint8(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringUint8 = append(s.RequiredArrayStringUint8, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_uint8\"")
			}
		case "required_array_string_unix":
			requiredBitSet[6] |= 1 << 2
			if err := func() error {
				s.RequiredArrayStringUnix = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeStringUnixSeconds(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringUnix = append(s.RequiredArrayStringUnix, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_unix\"")
			}
		case "required_array_string_unix-micro":
			requiredBitSet[6] |= 1 << 3
			if err := func() error {
				s.RequiredArrayStringUnixMinusMicro = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeStringUnixMicro(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringUnixMinusMicro = append(s.RequiredArrayStringUnixMinusMicro, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_unix-micro\"")
			}
		case "required_array_string_unix-milli":
			requiredBitSet[6] |= 1 << 4
			if err := func() error {
				s.RequiredArrayStringUnixMinusMilli = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeStringUnixMilli(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringUnixMinusMilli = append(s.RequiredArrayStringUnixMinusMilli, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_unix-milli\"")
			}
		case "required_array_string_unix-nano":
			requiredBitSet[6] |= 1 << 5
			if err := func() error {
				s.RequiredArrayStringUnixMinusNano = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeStringUnixNano(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringUnixMinusNano = append(s.RequiredArrayStringUnixMinusNano, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_unix-nano\"")
			}
		case "required_array_string_unix-seconds":
			requiredBitSet[6] |= 1 << 6
			if err := func() error {
				s.RequiredArrayStringUnixMinusSeconds = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeStringUnixSeconds(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringUnixMinusSeconds = append(s.RequiredArrayStringUnixMinusSeconds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_unix-seconds\"")
			}
		case "required_array_string_uri":
			requiredBitSet[6] |= 1 << 7
			if err := func() error {
				s.RequiredArrayStringURI = make([]url.URL, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem url.URL
					v, err := json.DecodeURI(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringURI = append(s.RequiredArrayStringURI, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_uri\"")
			}
		case "required_array_string_uuid":
			requiredBitSet[7] |= 1 << 0
			if err := func() error {
				s.RequiredArrayStringUUID = make([]uuid.UUID, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uuid.UUID
					v, err := json.DecodeUUID(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringUUID = append(s.RequiredArrayStringUUID, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_uuid\"")
			}
		case "required_boolean":
			requiredBitSet[7] |= 1 << 1
			if err := func() error {
				v, err := d.Bool()
				s.RequiredBoolean = bool(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_boolean\"")
			}
		case "required_double_array_any":
			requiredBitSet[7] |= 1 << 2
			if err := func() error {
				s.RequiredDoubleArrayAny = make([][]jx.Raw, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []jx.Raw
					elem = make([]jx.Raw, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem jx.Raw
						v, err := d.RawAppend(nil)
						elemElem = jx.Raw(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayAny = append(s.RequiredDoubleArrayAny, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_any\"")
			}
		case "required_double_array_boolean":
			requiredBitSet[7] |= 1 << 3
			if err := func() error {
				s.RequiredDoubleArrayBoolean = make([][]bool, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []bool
					elem = make([]bool, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem bool
						v, err := d.Bool()
						elemElem = bool(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayBoolean = append(s.RequiredDoubleArrayBoolean, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_boolean\"")
			}
		case "required_double_array_integer":
			requiredBitSet[7] |= 1 << 4
			if err := func() error {
				s.RequiredDoubleArrayInteger = make([][]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int
					elem = make([]int, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int
						v, err := d.Int()
						elemElem = int(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayInteger = append(s.RequiredDoubleArrayInteger, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer\"")
			}
		case "required_double_array_integer_int16":
			requiredBitSet[7] |= 1 << 5
			if err := func() error {
				s.RequiredDoubleArrayIntegerInt16 = make([][]int16, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int16
					elem = make([]int16, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int16
						v, err := d.Int16()
						elemElem = int16(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayIntegerInt16 = append(s.RequiredDoubleArrayIntegerInt16, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer_int16\"")
			}
		case "required_double_array_integer_int32":
			requiredBitSet[7] |= 1 << 6
			if err := func() error {
				s.RequiredDoubleArrayIntegerInt32 = make([][]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int32
					elem = make([]int32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int32
						v, err := d.Int32()
						elemElem = int32(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayIntegerInt32 = append(s.RequiredDoubleArrayIntegerInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer_int32\"")
			}
		case "required_double_array_integer_int64":
			requiredBitSet[7] |= 1 << 7
			if err := func() error {
				s.RequiredDoubleArrayIntegerInt64 = make([][]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int64
					elem = make([]int64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int64
						v, err := d.Int64()
						elemElem = int64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayIntegerInt64 = append(s.RequiredDoubleArrayIntegerInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer_int64\"")
			}
		case "required_double_array_integer_int8":
			requiredBitSet[8] |= 1 << 0
			if err := func() error {
				s.RequiredDoubleArrayIntegerInt8 = make([][]int8, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int8
					elem = make([]int8, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int8
						v, err := d.Int8()
						elemElem = int8(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayIntegerInt8 = append(s.RequiredDoubleArrayIntegerInt8, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer_int8\"")
			}
		case "required_double_array_integer_uint":
			requiredBitSet[8] |= 1 << 1
			if err := func() error {
				s.RequiredDoubleArrayIntegerUint = make([][]uint, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint
					elem = make([]uint, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint
						v, err := d.UInt()
						elemElem = uint(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayIntegerUint = append(s.RequiredDoubleArrayIntegerUint, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer_uint\"")
			}
		case "required_double_array_integer_uint16":
			requiredBitSet[8] |= 1 << 2
			if err := func() error {
				s.RequiredDoubleArrayIntegerUint16 = make([][]uint16, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint16
					elem = make([]uint16, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint16
						v, err := d.UInt16()
						elemElem = uint16(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayIntegerUint16 = append(s.RequiredDoubleArrayIntegerUint16, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer_uint16\"")
			}
		case "required_double_array_integer_uint32":
			requiredBitSet[8] |= 1 << 3
			if err := func() error {
				s.RequiredDoubleArrayIntegerUint32 = make([][]uint32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint32
					elem = make([]uint32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint32
						v, err := d.UInt32()
						elemElem = uint32(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayIntegerUint32 = append(s.RequiredDoubleArrayIntegerUint32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer_uint32\"")
			}
		case "required_double_array_integer_uint64":
			requiredBitSet[8] |= 1 << 4
			if err := func() error {
				s.RequiredDoubleArrayIntegerUint64 = make([][]uint64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint64
					elem = make([]uint64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint64
						v, err := d.UInt64()
						elemElem = uint64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayIntegerUint64 = append(s.RequiredDoubleArrayIntegerUint64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer_uint64\"")
			}
		case "required_double_array_integer_uint8":
			requiredBitSet[8] |= 1 << 5
			if err := func() error {
				s.RequiredDoubleArrayIntegerUint8 = make([][]uint8, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint8
					elem = make([]uint8, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint8
						v, err := d.UInt8()
						elemElem = uint8(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayIntegerUint8 = append(s.RequiredDoubleArrayIntegerUint8, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer_uint8\"")
			}
		case "required_double_array_integer_unix":
			requiredBitSet[8] |= 1 << 6
			if err := func() error {
				s.RequiredDoubleArrayIntegerUnix = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeUnixSeconds(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayIntegerUnix = append(s.RequiredDoubleArrayIntegerUnix, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer_unix\"")
			}
		case "required_double_array_integer_unix-micro":
			requiredBitSet[8] |= 1 << 7
			if err := func() error {
				s.RequiredDoubleArrayIntegerUnixMinusMicro = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeUnixMicro(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayIntegerUnixMinusMicro = append(s.RequiredDoubleArrayIntegerUnixMinusMicro, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer_unix-micro\"")
			}
		case "required_double_array_integer_unix-milli":
			requiredBitSet[9] |= 1 << 0
			if err := func() error {
				s.RequiredDoubleArrayIntegerUnixMinusMilli = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeUnixMilli(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayIntegerUnixMinusMilli = append(s.RequiredDoubleArrayIntegerUnixMinusMilli, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer_unix-milli\"")
			}
		case "required_double_array_integer_unix-nano":
			requiredBitSet[9] |= 1 << 1
			if err := func() error {
				s.RequiredDoubleArrayIntegerUnixMinusNano = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeUnixNano(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayIntegerUnixMinusNano = append(s.RequiredDoubleArrayIntegerUnixMinusNano, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer_unix-nano\"")
			}
		case "required_double_array_integer_unix-seconds":
			requiredBitSet[9] |= 1 << 2
			if err := func() error {
				s.RequiredDoubleArrayIntegerUnixMinusSeconds = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeUnixSeconds(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayIntegerUnixMinusSeconds = append(s.RequiredDoubleArrayIntegerUnixMinusSeconds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer_unix-seconds\"")
			}
		case "required_double_array_null":
			requiredBitSet[9] |= 1 << 3
			if err := func() error {
				s.RequiredDoubleArrayNull = make([][]struct{}, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []struct{}
					elem = make([]struct{}, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem struct{}
						if err := d.Null(); err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayNull = append(s.RequiredDoubleArrayNull, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_null\"")
			}
		case "required_double_array_number":
			requiredBitSet[9] |= 1 << 4
			if err := func() error {
				s.RequiredDoubleArrayNumber = make([][]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []float64
					elem = make([]float64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem float64
						v, err := d.Float64()
						elemElem = float64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayNumber = append(s.RequiredDoubleArrayNumber, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_number\"")
			}
		case "required_double_array_number_double":
			requiredBitSet[9] |= 1 << 5
			if err := func() error {
				s.RequiredDoubleArrayNumberDouble = make([][]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []float64
					elem = make([]float64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem float64
						v, err := d.Float64()
						elemElem = float64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayNumberDouble = append(s.RequiredDoubleArrayNumberDouble, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_number_double\"")
			}
		case "required_double_array_number_float":
			requiredBitSet[9] |= 1 << 6
			if err := func() error {
				s.RequiredDoubleArrayNumberFloat = make([][]float32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []float32
					elem = make([]float32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem float32
						v, err := d.Float32()
						elemElem = float32(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayNumberFloat = append(s.RequiredDoubleArrayNumberFloat, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_number_float\"")
			}
		case "required_double_array_number_int32":
			requiredBitSet[9] |= 1 << 7
			if err := func() error {
				s.RequiredDoubleArrayNumberInt32 = make([][]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int32
					elem = make([]int32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int32
						v, err := d.Int32()
						elemElem = int32(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayNumberInt32 = append(s.RequiredDoubleArrayNumberInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_number_int32\"")
			}
		case "required_double_array_number_int64":
			requiredBitSet[10] |= 1 << 0
			if err := func() error {
				s.RequiredDoubleArrayNumberInt64 = make([][]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int64
					elem = make([]int64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int64
						v, err := d.Int64()
						elemElem = int64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayNumberInt64 = append(s.RequiredDoubleArrayNumberInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_number_int64\"")
			}
		case "required_double_array_string":
			requiredBitSet[10] |= 1 << 1
			if err := func() error {
				s.RequiredDoubleArrayString = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayString = append(s.RequiredDoubleArrayString, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string\"")
			}
		case "required_double_array_string_base64":
			requiredBitSet[10] |= 1 << 2
			if err := func() error {
				s.RequiredDoubleArrayStringBase64 = make([][][]byte, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem [][]byte
					elem = make([][]byte, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem []byte
						v, err := d.Base64()
						elemElem = []byte(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringBase64 = append(s.RequiredDoubleArrayStringBase64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_base64\"")
			}
		case "required_double_array_string_binary":
			requiredBitSet[10] |= 1 << 3
			if err := func() error {
				s.RequiredDoubleArrayStringBinary = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringBinary = append(s.RequiredDoubleArrayStringBinary, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_binary\"")
			}
		case "required_double_array_string_byte":
			requiredBitSet[10] |= 1 << 4
			if err := func() error {
				s.RequiredDoubleArrayStringByte = make([][][]byte, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem [][]byte
					elem = make([][]byte, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem []byte
						v, err := d.Base64()
						elemElem = []byte(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringByte = append(s.RequiredDoubleArrayStringByte, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_byte\"")
			}
		case "required_double_array_string_date":
			requiredBitSet[10] |= 1 << 5
			if err := func() error {
				s.RequiredDoubleArrayStringDate = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeDate(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringDate = append(s.RequiredDoubleArrayStringDate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_date\"")
			}
		case "required_double_array_string_date-time":
			requiredBitSet[10] |= 1 << 6
			if err := func() error {
				s.RequiredDoubleArrayStringDateMinusTime = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeDateTime(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringDateMinusTime = append(s.RequiredDoubleArrayStringDateMinusTime, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_date-time\"")
			}
		case "required_double_array_string_duration":
			requiredBitSet[10] |= 1 << 7
			if err := func() error {
				s.RequiredDoubleArrayStringDuration = make([][]time.Duration, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Duration
					elem = make([]time.Duration, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Duration
						v, err := json.DecodeDuration(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringDuration = append(s.RequiredDoubleArrayStringDuration, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_duration\"")
			}
		case "required_double_array_string_email":
			requiredBitSet[11] |= 1 << 0
			if err := func() error {
				s.RequiredDoubleArrayStringEmail = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringEmail = append(s.RequiredDoubleArrayStringEmail, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_email\"")
			}
		case "required_double_array_string_float32":
			requiredBitSet[11] |= 1 << 1
			if err := func() error {
				s.RequiredDoubleArrayStringFloat32 = make([][]float32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []float32
					elem = make([]float32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem float32
						v, err := json.DecodeStringFloat32(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringFloat32 = append(s.RequiredDoubleArrayStringFloat32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_float32\"")
			}
		case "required_double_array_string_float64":
			requiredBitSet[11] |= 1 << 2
			if err := func() error {
				s.RequiredDoubleArrayStringFloat64 = make([][]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []float64
					elem = make([]float64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem float64
						v, err := json.DecodeStringFloat64(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringFloat64 = append(s.RequiredDoubleArrayStringFloat64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_float64\"")
			}
		case "required_double_array_string_hostname":
			requiredBitSet[11] |= 1 << 3
			if err := func() error {
				s.RequiredDoubleArrayStringHostname = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringHostname = append(s.RequiredDoubleArrayStringHostname, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_hostname\"")
			}
		case "required_double_array_string_int":
			requiredBitSet[11] |= 1 << 4
			if err := func() error {
				s.RequiredDoubleArrayStringInt = make([][]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int
					elem = make([]int, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int
						v, err := json.DecodeStringInt(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringInt = append(s.RequiredDoubleArrayStringInt, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_int\"")
			}
		case "required_double_array_string_int16":
			requiredBitSet[11] |= 1 << 5
			if err := func() error {
				s.RequiredDoubleArrayStringInt16 = make([][]int16, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int16
					elem = make([]int16, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int16
						v, err := json.DecodeStringInt16(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringInt16 = append(s.RequiredDoubleArrayStringInt16, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_int16\"")
			}
		case "required_double_array_string_int32":
			requiredBitSet[11] |= 1 << 6
			if err := func() error {
				s.RequiredDoubleArrayStringInt32 = make([][]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int32
					elem = make([]int32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int32
						v, err := json.DecodeStringInt32(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringInt32 = append(s.RequiredDoubleArrayStringInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_int32\"")
			}
		case "required_double_array_string_int64":
			requiredBitSet[11] |= 1 << 7
			if err := func() error {
				s.RequiredDoubleArrayStringInt64 = make([][]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int64
					elem = make([]int64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int64
						v, err := json.DecodeStringInt64(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringInt64 = append(s.RequiredDoubleArrayStringInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_int64\"")
			}
		case "required_double_array_string_int8":
			requiredBitSet[12] |= 1 << 0
			if err := func() error {
				s.RequiredDoubleArrayStringInt8 = make([][]int8, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int8
					elem = make([]int8, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int8
						v, err := json.DecodeStringInt8(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringInt8 = append(s.RequiredDoubleArrayStringInt8, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_int8\"")
			}
		case "required_double_array_string_ip":
			requiredBitSet[12] |= 1 << 1
			if err := func() error {
				s.RequiredDoubleArrayStringIP = make([][]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []netip.Addr
					elem = make([]netip.Addr, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem netip.Addr
						v, err := json.DecodeIP(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringIP = append(s.RequiredDoubleArrayStringIP, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_ip\"")
			}
		case "required_double_array_string_ipv4":
			requiredBitSet[12] |= 1 << 2
			if err := func() error {
				s.RequiredDoubleArrayStringIpv4 = make([][]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []netip.Addr
					elem = make([]netip.Addr, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem netip.Addr
						v, err := json.DecodeIPv4(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringIpv4 = append(s.RequiredDoubleArrayStringIpv4, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_ipv4\"")
			}
		case "required_double_array_string_ipv6":
			requiredBitSet[12] |= 1 << 3
			if err := func() error {
				s.RequiredDoubleArrayStringIpv6 = make([][]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []netip.Addr
					elem = make([]netip.Addr, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem netip.Addr
						v, err := json.DecodeIPv6(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringIpv6 = append(s.RequiredDoubleArrayStringIpv6, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_ipv6\"")
			}
		case "required_double_array_string_password":
			requiredBitSet[12] |= 1 << 4
			if err := func() error {
				s.RequiredDoubleArrayStringPassword = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringPassword = append(s.RequiredDoubleArrayStringPassword, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_password\"")
			}
		case "required_double_array_string_time":
			requiredBitSet[12] |= 1 << 5
			if err := func() error {
				s.RequiredDoubleArrayStringTime = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeTime(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringTime = append(s.RequiredDoubleArrayStringTime, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_time\"")
			}
		case "required_double_array_string_uint":
			requiredBitSet[12] |= 1 << 6
			if err := func() error {
				s.RequiredDoubleArrayStringUint = make([][]uint, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint
					elem = make([]uint, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint
						v, err := json.DecodeStringUint(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringUint = append(s.RequiredDoubleArrayStringUint, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_uint\"")
			}
		case "required_double_array_string_uint16":
			requiredBitSet[12] |= 1 << 7
			if err := func() error {
				s.RequiredDoubleArrayStringUint16 = make([][]uint16, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint16
					elem = make([]uint16, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint16
						v, err := json.DecodeStringUint16(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringUint16 = append(s.RequiredDoubleArrayStringUint16, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_uint16\"")
			}
		case "required_double_array_string_uint32":
			requiredBitSet[13] |= 1 << 0
			if err := func() error {
				s.RequiredDoubleArrayStringUint32 = make([][]uint32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint32
					elem = make([]uint32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint32
						v, err := json.DecodeStringUint32(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringUint32 = append(s.RequiredDoubleArrayStringUint32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_uint32\"")
			}
		case "required_double_array_string_uint64":
			requiredBitSet[13] |= 1 << 1
			if err := func() error {
				s.RequiredDoubleArrayStringUint64 = make([][]uint64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint64
					elem = make([]uint64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint64
						v, err := json.DecodeStringUint64(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringUint64 = append(s.RequiredDoubleArrayStringUint64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_uint64\"")
			}
		case "required_double_array_string_uint8":
			requiredBitSet[13] |= 1 << 2
			if err := func() error {
				s.RequiredDoubleArrayStringUint8 = make([][]uint8, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint8
					elem = make([]uint8, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint8
						v, err := json.DecodeStringUint8(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringUint8 = append(s.RequiredDoubleArrayStringUint8, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_uint8\"")
			}
		case "required_double_array_string_unix":
			requiredBitSet[13] |= 1 << 3
			if err := func() error {
				s.RequiredDoubleArrayStringUnix = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeStringUnixSeconds(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringUnix = append(s.RequiredDoubleArrayStringUnix, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_unix\"")
			}
		case "required_double_array_string_unix-micro":
			requiredBitSet[13] |= 1 << 4
			if err := func() error {
				s.RequiredDoubleArrayStringUnixMinusMicro = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeStringUnixMicro(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringUnixMinusMicro = append(s.RequiredDoubleArrayStringUnixMinusMicro, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_unix-micro\"")
			}
		case "required_double_array_string_unix-milli":
			requiredBitSet[13] |= 1 << 5
			if err := func() error {
				s.RequiredDoubleArrayStringUnixMinusMilli = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeStringUnixMilli(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringUnixMinusMilli = append(s.RequiredDoubleArrayStringUnixMinusMilli, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_unix-milli\"")
			}
		case "required_double_array_string_unix-nano":
			requiredBitSet[13] |= 1 << 6
			if err := func() error {
				s.RequiredDoubleArrayStringUnixMinusNano = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeStringUnixNano(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringUnixMinusNano = append(s.RequiredDoubleArrayStringUnixMinusNano, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_unix-nano\"")
			}
		case "required_double_array_string_unix-seconds":
			requiredBitSet[13] |= 1 << 7
			if err := func() error {
				s.RequiredDoubleArrayStringUnixMinusSeconds = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeStringUnixSeconds(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringUnixMinusSeconds = append(s.RequiredDoubleArrayStringUnixMinusSeconds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_unix-seconds\"")
			}
		case "required_double_array_string_uri":
			requiredBitSet[14] |= 1 << 0
			if err := func() error {
				s.RequiredDoubleArrayStringURI = make([][]url.URL, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []url.URL
					elem = make([]url.URL, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem url.URL
						v, err := json.DecodeURI(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringURI = append(s.RequiredDoubleArrayStringURI, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_uri\"")
			}
		case "required_double_array_string_uuid":
			requiredBitSet[14] |= 1 << 1
			if err := func() error {
				s.RequiredDoubleArrayStringUUID = make([][]uuid.UUID, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uuid.UUID
					elem = make([]uuid.UUID, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uuid.UUID
						v, err := json.DecodeUUID(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringUUID = append(s.RequiredDoubleArrayStringUUID, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_uuid\"")
			}
		case "required_integer":
			requiredBitSet[14] |= 1 << 2
			if err := func() error {
				v, err := d.Int()
				s.RequiredInteger = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer\"")
			}
		case "required_integer_int16":
			requiredBitSet[14] |= 1 << 3
			if err := func() error {
				v, err := d.Int16()
				s.RequiredIntegerInt16 = int16(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer_int16\"")
			}
		case "required_integer_int32":
			requiredBitSet[14] |= 1 << 4
			if err := func() error {
				v, err := d.Int32()
				s.RequiredIntegerInt32 = int32(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer_int32\"")
			}
		case "required_integer_int64":
			requiredBitSet[14] |= 1 << 5
			if err := func() error {
				v, err := d.Int64()
				s.RequiredIntegerInt64 = int64(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer_int64\"")
			}
		case "required_integer_int8":
			requiredBitSet[14] |= 1 << 6
			if err := func() error {
				v, err := d.Int8()
				s.RequiredIntegerInt8 = int8(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer_int8\"")
			}
		case "required_integer_uint":
			requiredBitSet[14] |= 1 << 7
			if err := func() error {
				v, err := d.UInt()
				s.RequiredIntegerUint = uint(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer_uint\"")
			}
		case "required_integer_uint16":
			requiredBitSet[15] |= 1 << 0
			if err := func() error {
				v, err := d.UInt16()
				s.RequiredIntegerUint16 = uint16(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer_uint16\"")
			}
		case "required_integer_uint32":
			requiredBitSet[15] |= 1 << 1
			if err := func() error {
				v, err := d.UInt32()
				s.RequiredIntegerUint32 = uint32(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer_uint32\"")
			}
		case "required_integer_uint64":
			requiredBitSet[15] |= 1 << 2
			if err := func() error {
				v, err := d.UInt64()
				s.RequiredIntegerUint64 = uint64(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer_uint64\"")
			}
		case "required_integer_uint8":
			requiredBitSet[15] |= 1 << 3
			if err := func() error {
				v, err := d.UInt8()
				s.RequiredIntegerUint8 = uint8(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer_uint8\"")
			}
		case "required_integer_unix":
			requiredBitSet[15] |= 1 << 4
			if err := func() error {
				v, err := json.DecodeUnixSeconds(d)
				s.RequiredIntegerUnix = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer_unix\"")
			}
		case "required_integer_unix-micro":
			requiredBitSet[15] |= 1 << 5
			if err := func() error {
				v, err := json.DecodeUnixMicro(d)
				s.RequiredIntegerUnixMinusMicro = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer_unix-micro\"")
			}
		case "required_integer_unix-milli":
			requiredBitSet[15] |= 1 << 6
			if err := func() error {
				v, err := json.DecodeUnixMilli(d)
				s.RequiredIntegerUnixMinusMilli = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer_unix-milli\"")
			}
		case "required_integer_unix-nano":
			requiredBitSet[15] |= 1 << 7
			if err := func() error {
				v, err := json.DecodeUnixNano(d)
				s.RequiredIntegerUnixMinusNano = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer_unix-nano\"")
			}
		case "required_integer_unix-seconds":
			requiredBitSet[16] |= 1 << 0
			if err := func() error {
				v, err := json.DecodeUnixSeconds(d)
				s.RequiredIntegerUnixMinusSeconds = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer_unix-seconds\"")
			}
		case "required_null":
			requiredBitSet[16] |= 1 << 1
			if err := func() error {
				if err := d.Null(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_null\"")
			}
		case "required_number":
			requiredBitSet[16] |= 1 << 2
			if err := func() error {
				v, err := d.Float64()
				s.RequiredNumber = float64(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_number\"")
			}
		case "required_number_double":
			requiredBitSet[16] |= 1 << 3
			if err := func() error {
				v, err := d.Float64()
				s.RequiredNumberDouble = float64(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_number_double\"")
			}
		case "required_number_float":
			requiredBitSet[16] |= 1 << 4
			if err := func() error {
				v, err := d.Float32()
				s.RequiredNumberFloat = float32(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_number_float\"")
			}
		case "required_number_int32":
			requiredBitSet[16] |= 1 << 5
			if err := func() error {
				v, err := d.Int32()
				s.RequiredNumberInt32 = int32(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_number_int32\"")
			}
		case "required_number_int64":
			requiredBitSet[16] |= 1 << 6
			if err := func() error {
				v, err := d.Int64()
				s.RequiredNumberInt64 = int64(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_number_int64\"")
			}
		case "required_string":
			requiredBitSet[16] |= 1 << 7
			if err := func() error {
				v, err := d.Str()
				s.RequiredString = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string\"")
			}
		case "required_string_base64":
			requiredBitSet[17] |= 1 << 0
			if err := func() error {
				v, err := d.Base64()
				s.RequiredStringBase64 = []byte(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_base64\"")
			}
		case "required_string_binary":
			requiredBitSet[17] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.RequiredStringBinary = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_binary\"")
			}
		case "required_string_byte":
			requiredBitSet[17] |= 1 << 2
			if err := func() error {
				v, err := d.Base64()
				s.RequiredStringByte = []byte(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_byte\"")
			}
		case "required_string_date":
			requiredBitSet[17] |= 1 << 3
			if err := func() error {
				v, err := json.DecodeDate(d)
				s.RequiredStringDate = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_date\"")
			}
		case "required_string_date-time":
			requiredBitSet[17] |= 1 << 4
			if err := func() error {
				v, err := json.DecodeDateTime(d)
				s.RequiredStringDateMinusTime = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_date-time\"")
			}
		case "required_string_duration":
			requiredBitSet[17] |= 1 << 5
			if err := func() error {
				v, err := json.DecodeDuration(d)
				s.RequiredStringDuration = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_duration\"")
			}
		case "required_string_email":
			requiredBitSet[17] |= 1 << 6
			if err := func() error {
				v, err := d.Str()
				s.RequiredStringEmail = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_email\"")
			}
		case "required_string_float32":
			requiredBitSet[17] |= 1 << 7
			if err := func() error {
				v, err := json.DecodeStringFloat32(d)
				s.RequiredStringFloat32 = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_float32\"")
			}
		case "required_string_float64":
			requiredBitSet[18] |= 1 << 0
			if err := func() error {
				v, err := json.DecodeStringFloat64(d)
				s.RequiredStringFloat64 = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_float64\"")
			}
		case "required_string_hostname":
			requiredBitSet[18] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.RequiredStringHostname = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_hostname\"")
			}
		case "required_string_int":
			requiredBitSet[18] |= 1 << 2
			if err := func() error {
				v, err := json.DecodeStringInt(d)
				s.RequiredStringInt = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_int\"")
			}
		case "required_string_int16":
			requiredBitSet[18] |= 1 << 3
			if err := func() error {
				v, err := json.DecodeStringInt16(d)
				s.RequiredStringInt16 = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_int16\"")
			}
		case "required_string_int32":
			requiredBitSet[18] |= 1 << 4
			if err := func() error {
				v, err := json.DecodeStringInt32(d)
				s.RequiredStringInt32 = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_int32\"")
			}
		case "required_string_int64":
			requiredBitSet[18] |= 1 << 5
			if err := func() error {
				v, err := json.DecodeStringInt64(d)
				s.RequiredStringInt64 = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_int64\"")
			}
		case "required_string_int8":
			requiredBitSet[18] |= 1 << 6
			if err := func() error {
				v, err := json.DecodeStringInt8(d)
				s.RequiredStringInt8 = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_int8\"")
			}
		case "required_string_ip":
			requiredBitSet[18] |= 1 << 7
			if err := func() error {
				v, err := json.DecodeIP(d)
				s.RequiredStringIP = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_ip\"")
			}
		case "required_string_ipv4":
			requiredBitSet[19] |= 1 << 0
			if err := func() error {
				v, err := json.DecodeIPv4(d)
				s.RequiredStringIpv4 = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_ipv4\"")
			}
		case "required_string_ipv6":
			requiredBitSet[19] |= 1 << 1
			if err := func() error {
				v, err := json.DecodeIPv6(d)
				s.RequiredStringIpv6 = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_ipv6\"")
			}
		case "required_string_password":
			requiredBitSet[19] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.RequiredStringPassword = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_password\"")
			}
		case "required_string_time":
			requiredBitSet[19] |= 1 << 3
			if err := func() error {
				v, err := json.DecodeTime(d)
				s.RequiredStringTime = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_time\"")
			}
		case "required_string_uint":
			requiredBitSet[19] |= 1 << 4
			if err := func() error {
				v, err := json.DecodeStringUint(d)
				s.RequiredStringUint = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_uint\"")
			}
		case "required_string_uint16":
			requiredBitSet[19] |= 1 << 5
			if err := func() error {
				v, err := json.DecodeStringUint16(d)
				s.RequiredStringUint16 = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_uint16\"")
			}
		case "required_string_uint32":
			requiredBitSet[19] |= 1 << 6
			if err := func() error {
				v, err := json.DecodeStringUint32(d)
				s.RequiredStringUint32 = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_uint32\"")
			}
		case "required_string_uint64":
			requiredBitSet[19] |= 1 << 7
			if err := func() error {
				v, err := json.DecodeStringUint64(d)
				s.RequiredStringUint64 = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_uint64\"")
			}
		case "required_string_uint8":
			requiredBitSet[20] |= 1 << 0
			if err := func() error {
				v, err := json.DecodeStringUint8(d)
				s.RequiredStringUint8 = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_uint8\"")
			}
		case "required_string_unix":
			requiredBitSet[20] |= 1 << 1
			if err := func() error {
				v, err := json.DecodeStringUnixSeconds(d)
				s.RequiredStringUnix = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_unix\"")
			}
		case "required_string_unix-micro":
			requiredBitSet[20] |= 1 << 2
			if err := func() error {
				v, err := json.DecodeStringUnixMicro(d)
				s.RequiredStringUnixMinusMicro = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_unix-micro\"")
			}
		case "required_string_unix-milli":
			requiredBitSet[20] |= 1 << 3
			if err := func() error {
				v, err := json.DecodeStringUnixMilli(d)
				s.RequiredStringUnixMinusMilli = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_unix-milli\"")
			}
		case "required_string_unix-nano":
			requiredBitSet[20] |= 1 << 4
			if err := func() error {
				v, err := json.DecodeStringUnixNano(d)
				s.RequiredStringUnixMinusNano = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_unix-nano\"")
			}
		case "required_string_unix-seconds":
			requiredBitSet[20] |= 1 << 5
			if err := func() error {
				v, err := json.DecodeStringUnixSeconds(d)
				s.RequiredStringUnixMinusSeconds = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_unix-seconds\"")
			}
		case "required_string_uri":
			requiredBitSet[20] |= 1 << 6
			if err := func() error {
				v, err := json.DecodeURI(d)
				s.RequiredStringURI = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_uri\"")
			}
		case "required_string_uuid":
			requiredBitSet[20] |= 1 << 7
			if err := func() error {
				v, err := json.DecodeUUID(d)
				s.RequiredStringUUID = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_uuid\"")
			}
		case "optional_any":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.OptionalAny = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_any\"")
			}
		case "optional_array_any":
			if err := func() error {
				s.OptionalArrayAny = make([]jx.Raw, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem jx.Raw
					v, err := d.RawAppend(nil)
					elem = jx.Raw(v)
					if err != nil {
						return err
					}
					s.OptionalArrayAny = append(s.OptionalArrayAny, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_any\"")
			}
		case "optional_array_boolean":
			if err := func() error {
				s.OptionalArrayBoolean = make([]bool, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem bool
					v, err := d.Bool()
					elem = bool(v)
					if err != nil {
						return err
					}
					s.OptionalArrayBoolean = append(s.OptionalArrayBoolean, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_boolean\"")
			}
		case "optional_array_integer":
			if err := func() error {
				s.OptionalArrayInteger = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.OptionalArrayInteger = append(s.OptionalArrayInteger, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer\"")
			}
		case "optional_array_integer_int16":
			if err := func() error {
				s.OptionalArrayIntegerInt16 = make([]int16, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int16
					v, err := d.Int16()
					elem = int16(v)
					if err != nil {
						return err
					}
					s.OptionalArrayIntegerInt16 = append(s.OptionalArrayIntegerInt16, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer_int16\"")
			}
		case "optional_array_integer_int32":
			if err := func() error {
				s.OptionalArrayIntegerInt32 = make([]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int32
					v, err := d.Int32()
					elem = int32(v)
					if err != nil {
						return err
					}
					s.OptionalArrayIntegerInt32 = append(s.OptionalArrayIntegerInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer_int32\"")
			}
		case "optional_array_integer_int64":
			if err := func() error {
				s.OptionalArrayIntegerInt64 = make([]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int64
					v, err := d.Int64()
					elem = int64(v)
					if err != nil {
						return err
					}
					s.OptionalArrayIntegerInt64 = append(s.OptionalArrayIntegerInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer_int64\"")
			}
		case "optional_array_integer_int8":
			if err := func() error {
				s.OptionalArrayIntegerInt8 = make([]int8, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int8
					v, err := d.Int8()
					elem = int8(v)
					if err != nil {
						return err
					}
					s.OptionalArrayIntegerInt8 = append(s.OptionalArrayIntegerInt8, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer_int8\"")
			}
		case "optional_array_integer_uint":
			if err := func() error {
				s.OptionalArrayIntegerUint = make([]uint, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint
					v, err := d.UInt()
					elem = uint(v)
					if err != nil {
						return err
					}
					s.OptionalArrayIntegerUint = append(s.OptionalArrayIntegerUint, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer_uint\"")
			}
		case "optional_array_integer_uint16":
			if err := func() error {
				s.OptionalArrayIntegerUint16 = make([]uint16, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint16
					v, err := d.UInt16()
					elem = uint16(v)
					if err != nil {
						return err
					}
					s.OptionalArrayIntegerUint16 = append(s.OptionalArrayIntegerUint16, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer_uint16\"")
			}
		case "optional_array_integer_uint32":
			if err := func() error {
				s.OptionalArrayIntegerUint32 = make([]uint32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint32
					v, err := d.UInt32()
					elem = uint32(v)
					if err != nil {
						return err
					}
					s.OptionalArrayIntegerUint32 = append(s.OptionalArrayIntegerUint32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer_uint32\"")
			}
		case "optional_array_integer_uint64":
			if err := func() error {
				s.OptionalArrayIntegerUint64 = make([]uint64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint64
					v, err := d.UInt64()
					elem = uint64(v)
					if err != nil {
						return err
					}
					s.OptionalArrayIntegerUint64 = append(s.OptionalArrayIntegerUint64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer_uint64\"")
			}
		case "optional_array_integer_uint8":
			if err := func() error {
				s.OptionalArrayIntegerUint8 = make([]uint8, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint8
					v, err := d.UInt8()
					elem = uint8(v)
					if err != nil {
						return err
					}
					s.OptionalArrayIntegerUint8 = append(s.OptionalArrayIntegerUint8, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer_uint8\"")
			}
		case "optional_array_integer_unix":
			if err := func() error {
				s.OptionalArrayIntegerUnix = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeUnixSeconds(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayIntegerUnix = append(s.OptionalArrayIntegerUnix, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer_unix\"")
			}
		case "optional_array_integer_unix-micro":
			if err := func() error {
				s.OptionalArrayIntegerUnixMinusMicro = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeUnixMicro(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayIntegerUnixMinusMicro = append(s.OptionalArrayIntegerUnixMinusMicro, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer_unix-micro\"")
			}
		case "optional_array_integer_unix-milli":
			if err := func() error {
				s.OptionalArrayIntegerUnixMinusMilli = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeUnixMilli(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayIntegerUnixMinusMilli = append(s.OptionalArrayIntegerUnixMinusMilli, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer_unix-milli\"")
			}
		case "optional_array_integer_unix-nano":
			if err := func() error {
				s.OptionalArrayIntegerUnixMinusNano = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeUnixNano(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayIntegerUnixMinusNano = append(s.OptionalArrayIntegerUnixMinusNano, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer_unix-nano\"")
			}
		case "optional_array_integer_unix-seconds":
			if err := func() error {
				s.OptionalArrayIntegerUnixMinusSeconds = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeUnixSeconds(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayIntegerUnixMinusSeconds = append(s.OptionalArrayIntegerUnixMinusSeconds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer_unix-seconds\"")
			}
		case "optional_array_null":
			if err := func() error {
				s.OptionalArrayNull = make([]struct{}, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem struct{}
					if err := d.Null(); err != nil {
						return err
					}
					s.OptionalArrayNull = append(s.OptionalArrayNull, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_null\"")
			}
		case "optional_array_number":
			if err := func() error {
				s.OptionalArrayNumber = make([]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem float64
					v, err := d.Float64()
					elem = float64(v)
					if err != nil {
						return err
					}
					s.OptionalArrayNumber = append(s.OptionalArrayNumber, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_number\"")
			}
		case "optional_array_number_double":
			if err := func() error {
				s.OptionalArrayNumberDouble = make([]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem float64
					v, err := d.Float64()
					elem = float64(v)
					if err != nil {
						return err
					}
					s.OptionalArrayNumberDouble = append(s.OptionalArrayNumberDouble, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_number_double\"")
			}
		case "optional_array_number_float":
			if err := func() error {
				s.OptionalArrayNumberFloat = make([]float32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem float32
					v, err := d.Float32()
					elem = float32(v)
					if err != nil {
						return err
					}
					s.OptionalArrayNumberFloat = append(s.OptionalArrayNumberFloat, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_number_float\"")
			}
		case "optional_array_number_int32":
			if err := func() error {
				s.OptionalArrayNumberInt32 = make([]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int32
					v, err := d.Int32()
					elem = int32(v)
					if err != nil {
						return err
					}
					s.OptionalArrayNumberInt32 = append(s.OptionalArrayNumberInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_number_int32\"")
			}
		case "optional_array_number_int64":
			if err := func() error {
				s.OptionalArrayNumberInt64 = make([]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int64
					v, err := d.Int64()
					elem = int64(v)
					if err != nil {
						return err
					}
					s.OptionalArrayNumberInt64 = append(s.OptionalArrayNumberInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_number_int64\"")
			}
		case "optional_array_string":
			if err := func() error {
				s.OptionalArrayString = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.OptionalArrayString = append(s.OptionalArrayString, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string\"")
			}
		case "optional_array_string_base64":
			if err := func() error {
				s.OptionalArrayStringBase64 = make([][]byte, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []byte
					v, err := d.Base64()
					elem = []byte(v)
					if err != nil {
						return err
					}
					s.OptionalArrayStringBase64 = append(s.OptionalArrayStringBase64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_base64\"")
			}
		case "optional_array_string_binary":
			if err := func() error {
				s.OptionalArrayStringBinary = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.OptionalArrayStringBinary = append(s.OptionalArrayStringBinary, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_binary\"")
			}
		case "optional_array_string_byte":
			if err := func() error {
				s.OptionalArrayStringByte = make([][]byte, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []byte
					v, err := d.Base64()
					elem = []byte(v)
					if err != nil {
						return err
					}
					s.OptionalArrayStringByte = append(s.OptionalArrayStringByte, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_byte\"")
			}
		case "optional_array_string_date":
			if err := func() error {
				s.OptionalArrayStringDate = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeDate(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringDate = append(s.OptionalArrayStringDate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_date\"")
			}
		case "optional_array_string_date-time":
			if err := func() error {
				s.OptionalArrayStringDateMinusTime = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeDateTime(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringDateMinusTime = append(s.OptionalArrayStringDateMinusTime, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_date-time\"")
			}
		case "optional_array_string_duration":
			if err := func() error {
				s.OptionalArrayStringDuration = make([]time.Duration, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Duration
					v, err := json.DecodeDuration(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringDuration = append(s.OptionalArrayStringDuration, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_duration\"")
			}
		case "optional_array_string_email":
			if err := func() error {
				s.OptionalArrayStringEmail = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.OptionalArrayStringEmail = append(s.OptionalArrayStringEmail, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_email\"")
			}
		case "optional_array_string_float32":
			if err := func() error {
				s.OptionalArrayStringFloat32 = make([]float32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem float32
					v, err := json.DecodeStringFloat32(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringFloat32 = append(s.OptionalArrayStringFloat32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_float32\"")
			}
		case "optional_array_string_float64":
			if err := func() error {
				s.OptionalArrayStringFloat64 = make([]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem float64
					v, err := json.DecodeStringFloat64(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringFloat64 = append(s.OptionalArrayStringFloat64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_float64\"")
			}
		case "optional_array_string_hostname":
			if err := func() error {
				s.OptionalArrayStringHostname = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.OptionalArrayStringHostname = append(s.OptionalArrayStringHostname, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_hostname\"")
			}
		case "optional_array_string_int":
			if err := func() error {
				s.OptionalArrayStringInt = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := json.DecodeStringInt(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringInt = append(s.OptionalArrayStringInt, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_int\"")
			}
		case "optional_array_string_int16":
			if err := func() error {
				s.OptionalArrayStringInt16 = make([]int16, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int16
					v, err := json.DecodeStringInt16(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringInt16 = append(s.OptionalArrayStringInt16, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_int16\"")
			}
		case "optional_array_string_int32":
			if err := func() error {
				s.OptionalArrayStringInt32 = make([]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int32
					v, err := json.DecodeStringInt32(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringInt32 = append(s.OptionalArrayStringInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_int32\"")
			}
		case "optional_array_string_int64":
			if err := func() error {
				s.OptionalArrayStringInt64 = make([]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int64
					v, err := json.DecodeStringInt64(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringInt64 = append(s.OptionalArrayStringInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_int64\"")
			}
		case "optional_array_string_int8":
			if err := func() error {
				s.OptionalArrayStringInt8 = make([]int8, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int8
					v, err := json.DecodeStringInt8(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringInt8 = append(s.OptionalArrayStringInt8, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_int8\"")
			}
		case "optional_array_string_ip":
			if err := func() error {
				s.OptionalArrayStringIP = make([]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem netip.Addr
					v, err := json.DecodeIP(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringIP = append(s.OptionalArrayStringIP, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_ip\"")
			}
		case "optional_array_string_ipv4":
			if err := func() error {
				s.OptionalArrayStringIpv4 = make([]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem netip.Addr
					v, err := json.DecodeIPv4(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringIpv4 = append(s.OptionalArrayStringIpv4, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_ipv4\"")
			}
		case "optional_array_string_ipv6":
			if err := func() error {
				s.OptionalArrayStringIpv6 = make([]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem netip.Addr
					v, err := json.DecodeIPv6(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringIpv6 = append(s.OptionalArrayStringIpv6, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_ipv6\"")
			}
		case "optional_array_string_password":
			if err := func() error {
				s.OptionalArrayStringPassword = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.OptionalArrayStringPassword = append(s.OptionalArrayStringPassword, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_password\"")
			}
		case "optional_array_string_time":
			if err := func() error {
				s.OptionalArrayStringTime = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeTime(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringTime = append(s.OptionalArrayStringTime, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_time\"")
			}
		case "optional_array_string_uint":
			if err := func() error {
				s.OptionalArrayStringUint = make([]uint, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint
					v, err := json.DecodeStringUint(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringUint = append(s.OptionalArrayStringUint, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_uint\"")
			}
		case "optional_array_string_uint16":
			if err := func() error {
				s.OptionalArrayStringUint16 = make([]uint16, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint16
					v, err := json.DecodeStringUint16(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringUint16 = append(s.OptionalArrayStringUint16, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_uint16\"")
			}
		case "optional_array_string_uint32":
			if err := func() error {
				s.OptionalArrayStringUint32 = make([]uint32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint32
					v, err := json.DecodeStringUint32(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringUint32 = append(s.OptionalArrayStringUint32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_uint32\"")
			}
		case "optional_array_string_uint64":
			if err := func() error {
				s.OptionalArrayStringUint64 = make([]uint64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint64
					v, err := json.DecodeStringUint64(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringUint64 = append(s.OptionalArrayStringUint64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_uint64\"")
			}
		case "optional_array_string_uint8":
			if err := func() error {
				s.OptionalArrayStringUint8 = make([]uint8, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint8
					v, err := json.DecodeStringUint8(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringUint8 = append(s.OptionalArrayStringUint8, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_uint8\"")
			}
		case "optional_array_string_unix":
			if err := func() error {
				s.OptionalArrayStringUnix = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeStringUnixSeconds(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringUnix = append(s.OptionalArrayStringUnix, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_unix\"")
			}
		case "optional_array_string_unix-micro":
			if err := func() error {
				s.OptionalArrayStringUnixMinusMicro = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeStringUnixMicro(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringUnixMinusMicro = append(s.OptionalArrayStringUnixMinusMicro, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_unix-micro\"")
			}
		case "optional_array_string_unix-milli":
			if err := func() error {
				s.OptionalArrayStringUnixMinusMilli = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeStringUnixMilli(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringUnixMinusMilli = append(s.OptionalArrayStringUnixMinusMilli, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_unix-milli\"")
			}
		case "optional_array_string_unix-nano":
			if err := func() error {
				s.OptionalArrayStringUnixMinusNano = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeStringUnixNano(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringUnixMinusNano = append(s.OptionalArrayStringUnixMinusNano, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_unix-nano\"")
			}
		case "optional_array_string_unix-seconds":
			if err := func() error {
				s.OptionalArrayStringUnixMinusSeconds = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeStringUnixSeconds(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringUnixMinusSeconds = append(s.OptionalArrayStringUnixMinusSeconds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_unix-seconds\"")
			}
		case "optional_array_string_uri":
			if err := func() error {
				s.OptionalArrayStringURI = make([]url.URL, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem url.URL
					v, err := json.DecodeURI(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringURI = append(s.OptionalArrayStringURI, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_uri\"")
			}
		case "optional_array_string_uuid":
			if err := func() error {
				s.OptionalArrayStringUUID = make([]uuid.UUID, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uuid.UUID
					v, err := json.DecodeUUID(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringUUID = append(s.OptionalArrayStringUUID, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_uuid\"")
			}
		case "optional_boolean":
			if err := func() error {
				s.OptionalBoolean.Reset()
				if err := s.OptionalBoolean.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_boolean\"")
			}
		case "optional_double_array_any":
			if err := func() error {
				s.OptionalDoubleArrayAny = make([][]jx.Raw, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []jx.Raw
					elem = make([]jx.Raw, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem jx.Raw
						v, err := d.RawAppend(nil)
						elemElem = jx.Raw(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayAny = append(s.OptionalDoubleArrayAny, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_any\"")
			}
		case "optional_double_array_boolean":
			if err := func() error {
				s.OptionalDoubleArrayBoolean = make([][]bool, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []bool
					elem = make([]bool, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem bool
						v, err := d.Bool()
						elemElem = bool(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayBoolean = append(s.OptionalDoubleArrayBoolean, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_boolean\"")
			}
		case "optional_double_array_integer":
			if err := func() error {
				s.OptionalDoubleArrayInteger = make([][]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int
					elem = make([]int, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int
						v, err := d.Int()
						elemElem = int(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayInteger = append(s.OptionalDoubleArrayInteger, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer\"")
			}
		case "optional_double_array_integer_int16":
			if err := func() error {
				s.OptionalDoubleArrayIntegerInt16 = make([][]int16, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int16
					elem = make([]int16, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int16
						v, err := d.Int16()
						elemElem = int16(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayIntegerInt16 = append(s.OptionalDoubleArrayIntegerInt16, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer_int16\"")
			}
		case "optional_double_array_integer_int32":
			if err := func() error {
				s.OptionalDoubleArrayIntegerInt32 = make([][]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int32
					elem = make([]int32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int32
						v, err := d.Int32()
						elemElem = int32(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayIntegerInt32 = append(s.OptionalDoubleArrayIntegerInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer_int32\"")
			}
		case "optional_double_array_integer_int64":
			if err := func() error {
				s.OptionalDoubleArrayIntegerInt64 = make([][]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int64
					elem = make([]int64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int64
						v, err := d.Int64()
						elemElem = int64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayIntegerInt64 = append(s.OptionalDoubleArrayIntegerInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer_int64\"")
			}
		case "optional_double_array_integer_int8":
			if err := func() error {
				s.OptionalDoubleArrayIntegerInt8 = make([][]int8, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int8
					elem = make([]int8, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int8
						v, err := d.Int8()
						elemElem = int8(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayIntegerInt8 = append(s.OptionalDoubleArrayIntegerInt8, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer_int8\"")
			}
		case "optional_double_array_integer_uint":
			if err := func() error {
				s.OptionalDoubleArrayIntegerUint = make([][]uint, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint
					elem = make([]uint, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint
						v, err := d.UInt()
						elemElem = uint(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayIntegerUint = append(s.OptionalDoubleArrayIntegerUint, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer_uint\"")
			}
		case "optional_double_array_integer_uint16":
			if err := func() error {
				s.OptionalDoubleArrayIntegerUint16 = make([][]uint16, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint16
					elem = make([]uint16, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint16
						v, err := d.UInt16()
						elemElem = uint16(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayIntegerUint16 = append(s.OptionalDoubleArrayIntegerUint16, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer_uint16\"")
			}
		case "optional_double_array_integer_uint32":
			if err := func() error {
				s.OptionalDoubleArrayIntegerUint32 = make([][]uint32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint32
					elem = make([]uint32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint32
						v, err := d.UInt32()
						elemElem = uint32(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayIntegerUint32 = append(s.OptionalDoubleArrayIntegerUint32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer_uint32\"")
			}
		case "optional_double_array_integer_uint64":
			if err := func() error {
				s.OptionalDoubleArrayIntegerUint64 = make([][]uint64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint64
					elem = make([]uint64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint64
						v, err := d.UInt64()
						elemElem = uint64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayIntegerUint64 = append(s.OptionalDoubleArrayIntegerUint64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer_uint64\"")
			}
		case "optional_double_array_integer_uint8":
			if err := func() error {
				s.OptionalDoubleArrayIntegerUint8 = make([][]uint8, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint8
					elem = make([]uint8, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint8
						v, err := d.UInt8()
						elemElem = uint8(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayIntegerUint8 = append(s.OptionalDoubleArrayIntegerUint8, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer_uint8\"")
			}
		case "optional_double_array_integer_unix":
			if err := func() error {
				s.OptionalDoubleArrayIntegerUnix = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeUnixSeconds(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayIntegerUnix = append(s.OptionalDoubleArrayIntegerUnix, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer_unix\"")
			}
		case "optional_double_array_integer_unix-micro":
			if err := func() error {
				s.OptionalDoubleArrayIntegerUnixMinusMicro = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeUnixMicro(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayIntegerUnixMinusMicro = append(s.OptionalDoubleArrayIntegerUnixMinusMicro, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer_unix-micro\"")
			}
		case "optional_double_array_integer_unix-milli":
			if err := func() error {
				s.OptionalDoubleArrayIntegerUnixMinusMilli = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeUnixMilli(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayIntegerUnixMinusMilli = append(s.OptionalDoubleArrayIntegerUnixMinusMilli, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer_unix-milli\"")
			}
		case "optional_double_array_integer_unix-nano":
			if err := func() error {
				s.OptionalDoubleArrayIntegerUnixMinusNano = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeUnixNano(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayIntegerUnixMinusNano = append(s.OptionalDoubleArrayIntegerUnixMinusNano, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer_unix-nano\"")
			}
		case "optional_double_array_integer_unix-seconds":
			if err := func() error {
				s.OptionalDoubleArrayIntegerUnixMinusSeconds = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeUnixSeconds(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayIntegerUnixMinusSeconds = append(s.OptionalDoubleArrayIntegerUnixMinusSeconds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer_unix-seconds\"")
			}
		case "optional_double_array_null":
			if err := func() error {
				s.OptionalDoubleArrayNull = make([][]struct{}, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []struct{}
					elem = make([]struct{}, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem struct{}
						if err := d.Null(); err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayNull = append(s.OptionalDoubleArrayNull, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_null\"")
			}
		case "optional_double_array_number":
			if err := func() error {
				s.OptionalDoubleArrayNumber = make([][]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []float64
					elem = make([]float64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem float64
						v, err := d.Float64()
						elemElem = float64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayNumber = append(s.OptionalDoubleArrayNumber, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_number\"")
			}
		case "optional_double_array_number_double":
			if err := func() error {
				s.OptionalDoubleArrayNumberDouble = make([][]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []float64
					elem = make([]float64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem float64
						v, err := d.Float64()
						elemElem = float64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayNumberDouble = append(s.OptionalDoubleArrayNumberDouble, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_number_double\"")
			}
		case "optional_double_array_number_float":
			if err := func() error {
				s.OptionalDoubleArrayNumberFloat = make([][]float32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []float32
					elem = make([]float32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem float32
						v, err := d.Float32()
						elemElem = float32(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayNumberFloat = append(s.OptionalDoubleArrayNumberFloat, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_number_float\"")
			}
		case "optional_double_array_number_int32":
			if err := func() error {
				s.OptionalDoubleArrayNumberInt32 = make([][]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int32
					elem = make([]int32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int32
						v, err := d.Int32()
						elemElem = int32(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayNumberInt32 = append(s.OptionalDoubleArrayNumberInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_number_int32\"")
			}
		case "optional_double_array_number_int64":
			if err := func() error {
				s.OptionalDoubleArrayNumberInt64 = make([][]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int64
					elem = make([]int64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int64
						v, err := d.Int64()
						elemElem = int64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayNumberInt64 = append(s.OptionalDoubleArrayNumberInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_number_int64\"")
			}
		case "optional_double_array_string":
			if err := func() error {
				s.OptionalDoubleArrayString = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayString = append(s.OptionalDoubleArrayString, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string\"")
			}
		case "optional_double_array_string_base64":
			if err := func() error {
				s.OptionalDoubleArrayStringBase64 = make([][][]byte, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem [][]byte
					elem = make([][]byte, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem []byte
						v, err := d.Base64()
						elemElem = []byte(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringBase64 = append(s.OptionalDoubleArrayStringBase64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_base64\"")
			}
		case "optional_double_array_string_binary":
			if err := func() error {
				s.OptionalDoubleArrayStringBinary = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringBinary = append(s.OptionalDoubleArrayStringBinary, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_binary\"")
			}
		case "optional_double_array_string_byte":
			if err := func() error {
				s.OptionalDoubleArrayStringByte = make([][][]byte, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem [][]byte
					elem = make([][]byte, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem []byte
						v, err := d.Base64()
						elemElem = []byte(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringByte = append(s.OptionalDoubleArrayStringByte, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_byte\"")
			}
		case "optional_double_array_string_date":
			if err := func() error {
				s.OptionalDoubleArrayStringDate = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeDate(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringDate = append(s.OptionalDoubleArrayStringDate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_date\"")
			}
		case "optional_double_array_string_date-time":
			if err := func() error {
				s.OptionalDoubleArrayStringDateMinusTime = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeDateTime(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringDateMinusTime = append(s.OptionalDoubleArrayStringDateMinusTime, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_date-time\"")
			}
		case "optional_double_array_string_duration":
			if err := func() error {
				s.OptionalDoubleArrayStringDuration = make([][]time.Duration, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Duration
					elem = make([]time.Duration, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Duration
						v, err := json.DecodeDuration(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringDuration = append(s.OptionalDoubleArrayStringDuration, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_duration\"")
			}
		case "optional_double_array_string_email":
			if err := func() error {
				s.OptionalDoubleArrayStringEmail = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringEmail = append(s.OptionalDoubleArrayStringEmail, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_email\"")
			}
		case "optional_double_array_string_float32":
			if err := func() error {
				s.OptionalDoubleArrayStringFloat32 = make([][]float32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []float32
					elem = make([]float32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem float32
						v, err := json.DecodeStringFloat32(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringFloat32 = append(s.OptionalDoubleArrayStringFloat32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_float32\"")
			}
		case "optional_double_array_string_float64":
			if err := func() error {
				s.OptionalDoubleArrayStringFloat64 = make([][]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []float64
					elem = make([]float64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem float64
						v, err := json.DecodeStringFloat64(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringFloat64 = append(s.OptionalDoubleArrayStringFloat64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_float64\"")
			}
		case "optional_double_array_string_hostname":
			if err := func() error {
				s.OptionalDoubleArrayStringHostname = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringHostname = append(s.OptionalDoubleArrayStringHostname, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_hostname\"")
			}
		case "optional_double_array_string_int":
			if err := func() error {
				s.OptionalDoubleArrayStringInt = make([][]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int
					elem = make([]int, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int
						v, err := json.DecodeStringInt(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringInt = append(s.OptionalDoubleArrayStringInt, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_int\"")
			}
		case "optional_double_array_string_int16":
			if err := func() error {
				s.OptionalDoubleArrayStringInt16 = make([][]int16, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int16
					elem = make([]int16, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int16
						v, err := json.DecodeStringInt16(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringInt16 = append(s.OptionalDoubleArrayStringInt16, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_int16\"")
			}
		case "optional_double_array_string_int32":
			if err := func() error {
				s.OptionalDoubleArrayStringInt32 = make([][]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int32
					elem = make([]int32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int32
						v, err := json.DecodeStringInt32(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringInt32 = append(s.OptionalDoubleArrayStringInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_int32\"")
			}
		case "optional_double_array_string_int64":
			if err := func() error {
				s.OptionalDoubleArrayStringInt64 = make([][]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int64
					elem = make([]int64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int64
						v, err := json.DecodeStringInt64(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringInt64 = append(s.OptionalDoubleArrayStringInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_int64\"")
			}
		case "optional_double_array_string_int8":
			if err := func() error {
				s.OptionalDoubleArrayStringInt8 = make([][]int8, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int8
					elem = make([]int8, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int8
						v, err := json.DecodeStringInt8(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringInt8 = append(s.OptionalDoubleArrayStringInt8, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_int8\"")
			}
		case "optional_double_array_string_ip":
			if err := func() error {
				s.OptionalDoubleArrayStringIP = make([][]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []netip.Addr
					elem = make([]netip.Addr, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem netip.Addr
						v, err := json.DecodeIP(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringIP = append(s.OptionalDoubleArrayStringIP, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_ip\"")
			}
		case "optional_double_array_string_ipv4":
			if err := func() error {
				s.OptionalDoubleArrayStringIpv4 = make([][]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []netip.Addr
					elem = make([]netip.Addr, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem netip.Addr
						v, err := json.DecodeIPv4(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringIpv4 = append(s.OptionalDoubleArrayStringIpv4, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_ipv4\"")
			}
		case "optional_double_array_string_ipv6":
			if err := func() error {
				s.OptionalDoubleArrayStringIpv6 = make([][]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []netip.Addr
					elem = make([]netip.Addr, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem netip.Addr
						v, err := json.DecodeIPv6(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringIpv6 = append(s.OptionalDoubleArrayStringIpv6, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_ipv6\"")
			}
		case "optional_double_array_string_password":
			if err := func() error {
				s.OptionalDoubleArrayStringPassword = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringPassword = append(s.OptionalDoubleArrayStringPassword, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_password\"")
			}
		case "optional_double_array_string_time":
			if err := func() error {
				s.OptionalDoubleArrayStringTime = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeTime(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringTime = append(s.OptionalDoubleArrayStringTime, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_time\"")
			}
		case "optional_double_array_string_uint":
			if err := func() error {
				s.OptionalDoubleArrayStringUint = make([][]uint, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint
					elem = make([]uint, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint
						v, err := json.DecodeStringUint(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringUint = append(s.OptionalDoubleArrayStringUint, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_uint\"")
			}
		case "optional_double_array_string_uint16":
			if err := func() error {
				s.OptionalDoubleArrayStringUint16 = make([][]uint16, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint16
					elem = make([]uint16, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint16
						v, err := json.DecodeStringUint16(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringUint16 = append(s.OptionalDoubleArrayStringUint16, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_uint16\"")
			}
		case "optional_double_array_string_uint32":
			if err := func() error {
				s.OptionalDoubleArrayStringUint32 = make([][]uint32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint32
					elem = make([]uint32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint32
						v, err := json.DecodeStringUint32(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringUint32 = append(s.OptionalDoubleArrayStringUint32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_uint32\"")
			}
		case "optional_double_array_string_uint64":
			if err := func() error {
				s.OptionalDoubleArrayStringUint64 = make([][]uint64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint64
					elem = make([]uint64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint64
						v, err := json.DecodeStringUint64(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringUint64 = append(s.OptionalDoubleArrayStringUint64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_uint64\"")
			}
		case "optional_double_array_string_uint8":
			if err := func() error {
				s.OptionalDoubleArrayStringUint8 = make([][]uint8, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint8
					elem = make([]uint8, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint8
						v, err := json.DecodeStringUint8(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringUint8 = append(s.OptionalDoubleArrayStringUint8, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_uint8\"")
			}
		case "optional_double_array_string_unix":
			if err := func() error {
				s.OptionalDoubleArrayStringUnix = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeStringUnixSeconds(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringUnix = append(s.OptionalDoubleArrayStringUnix, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_unix\"")
			}
		case "optional_double_array_string_unix-micro":
			if err := func() error {
				s.OptionalDoubleArrayStringUnixMinusMicro = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeStringUnixMicro(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringUnixMinusMicro = append(s.OptionalDoubleArrayStringUnixMinusMicro, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_unix-micro\"")
			}
		case "optional_double_array_string_unix-milli":
			if err := func() error {
				s.OptionalDoubleArrayStringUnixMinusMilli = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeStringUnixMilli(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringUnixMinusMilli = append(s.OptionalDoubleArrayStringUnixMinusMilli, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_unix-milli\"")
			}
		case "optional_double_array_string_unix-nano":
			if err := func() error {
				s.OptionalDoubleArrayStringUnixMinusNano = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeStringUnixNano(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringUnixMinusNano = append(s.OptionalDoubleArrayStringUnixMinusNano, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_unix-nano\"")
			}
		case "optional_double_array_string_unix-seconds":
			if err := func() error {
				s.OptionalDoubleArrayStringUnixMinusSeconds = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeStringUnixSeconds(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringUnixMinusSeconds = append(s.OptionalDoubleArrayStringUnixMinusSeconds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_unix-seconds\"")
			}
		case "optional_double_array_string_uri":
			if err := func() error {
				s.OptionalDoubleArrayStringURI = make([][]url.URL, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []url.URL
					elem = make([]url.URL, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem url.URL
						v, err := json.DecodeURI(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringURI = append(s.OptionalDoubleArrayStringURI, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_uri\"")
			}
		case "optional_double_array_string_uuid":
			if err := func() error {
				s.OptionalDoubleArrayStringUUID = make([][]uuid.UUID, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uuid.UUID
					elem = make([]uuid.UUID, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uuid.UUID
						v, err := json.DecodeUUID(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringUUID = append(s.OptionalDoubleArrayStringUUID, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_uuid\"")
			}
		case "optional_integer":
			if err := func() error {
				s.OptionalInteger.Reset()
				if err := s.OptionalInteger.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer\"")
			}
		case "optional_integer_int16":
			if err := func() error {
				s.OptionalIntegerInt16.Reset()
				if err := s.OptionalIntegerInt16.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer_int16\"")
			}
		case "optional_integer_int32":
			if err := func() error {
				s.OptionalIntegerInt32.Reset()
				if err := s.OptionalIntegerInt32.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer_int32\"")
			}
		case "optional_integer_int64":
			if err := func() error {
				s.OptionalIntegerInt64.Reset()
				if err := s.OptionalIntegerInt64.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer_int64\"")
			}
		case "optional_integer_int8":
			if err := func() error {
				s.OptionalIntegerInt8.Reset()
				if err := s.OptionalIntegerInt8.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer_int8\"")
			}
		case "optional_integer_uint":
			if err := func() error {
				s.OptionalIntegerUint.Reset()
				if err := s.OptionalIntegerUint.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer_uint\"")
			}
		case "optional_integer_uint16":
			if err := func() error {
				s.OptionalIntegerUint16.Reset()
				if err := s.OptionalIntegerUint16.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer_uint16\"")
			}
		case "optional_integer_uint32":
			if err := func() error {
				s.OptionalIntegerUint32.Reset()
				if err := s.OptionalIntegerUint32.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer_uint32\"")
			}
		case "optional_integer_uint64":
			if err := func() error {
				s.OptionalIntegerUint64.Reset()
				if err := s.OptionalIntegerUint64.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer_uint64\"")
			}
		case "optional_integer_uint8":
			if err := func() error {
				s.OptionalIntegerUint8.Reset()
				if err := s.OptionalIntegerUint8.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer_uint8\"")
			}
		case "optional_integer_unix":
			if err := func() error {
				s.OptionalIntegerUnix.Reset()
				if err := s.OptionalIntegerUnix.Decode(d, json.DecodeUnixSeconds); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer_unix\"")
			}
		case "optional_integer_unix-micro":
			if err := func() error {
				s.OptionalIntegerUnixMinusMicro.Reset()
				if err := s.OptionalIntegerUnixMinusMicro.Decode(d, json.DecodeUnixMicro); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer_unix-micro\"")
			}
		case "optional_integer_unix-milli":
			if err := func() error {
				s.OptionalIntegerUnixMinusMilli.Reset()
				if err := s.OptionalIntegerUnixMinusMilli.Decode(d, json.DecodeUnixMilli); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer_unix-milli\"")
			}
		case "optional_integer_unix-nano":
			if err := func() error {
				s.OptionalIntegerUnixMinusNano.Reset()
				if err := s.OptionalIntegerUnixMinusNano.Decode(d, json.DecodeUnixNano); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer_unix-nano\"")
			}
		case "optional_integer_unix-seconds":
			if err := func() error {
				s.OptionalIntegerUnixMinusSeconds.Reset()
				if err := s.OptionalIntegerUnixMinusSeconds.Decode(d, json.DecodeUnixSeconds); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer_unix-seconds\"")
			}
		case "optional_null":
			if err := func() error {
				s.OptionalNull.Reset()
				if err := s.OptionalNull.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_null\"")
			}
		case "optional_number":
			if err := func() error {
				s.OptionalNumber.Reset()
				if err := s.OptionalNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_number\"")
			}
		case "optional_number_double":
			if err := func() error {
				s.OptionalNumberDouble.Reset()
				if err := s.OptionalNumberDouble.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_number_double\"")
			}
		case "optional_number_float":
			if err := func() error {
				s.OptionalNumberFloat.Reset()
				if err := s.OptionalNumberFloat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_number_float\"")
			}
		case "optional_number_int32":
			if err := func() error {
				s.OptionalNumberInt32.Reset()
				if err := s.OptionalNumberInt32.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_number_int32\"")
			}
		case "optional_number_int64":
			if err := func() error {
				s.OptionalNumberInt64.Reset()
				if err := s.OptionalNumberInt64.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_number_int64\"")
			}
		case "optional_string":
			if err := func() error {
				s.OptionalString.Reset()
				if err := s.OptionalString.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string\"")
			}
		case "optional_string_base64":
			if err := func() error {
				v, err := d.Base64()
				s.OptionalStringBase64 = []byte(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_base64\"")
			}
		case "optional_string_binary":
			if err := func() error {
				s.OptionalStringBinary.Reset()
				if err := s.OptionalStringBinary.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_binary\"")
			}
		case "optional_string_byte":
			if err := func() error {
				v, err := d.Base64()
				s.OptionalStringByte = []byte(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_byte\"")
			}
		case "optional_string_date":
			if err := func() error {
				s.OptionalStringDate.Reset()
				if err := s.OptionalStringDate.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_date\"")
			}
		case "optional_string_date-time":
			if err := func() error {
				s.OptionalStringDateMinusTime.Reset()
				if err := s.OptionalStringDateMinusTime.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_date-time\"")
			}
		case "optional_string_duration":
			if err := func() error {
				s.OptionalStringDuration.Reset()
				if err := s.OptionalStringDuration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_duration\"")
			}
		case "optional_string_email":
			if err := func() error {
				s.OptionalStringEmail.Reset()
				if err := s.OptionalStringEmail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_email\"")
			}
		case "optional_string_float32":
			if err := func() error {
				s.OptionalStringFloat32.Reset()
				if err := s.OptionalStringFloat32.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_float32\"")
			}
		case "optional_string_float64":
			if err := func() error {
				s.OptionalStringFloat64.Reset()
				if err := s.OptionalStringFloat64.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_float64\"")
			}
		case "optional_string_hostname":
			if err := func() error {
				s.OptionalStringHostname.Reset()
				if err := s.OptionalStringHostname.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_hostname\"")
			}
		case "optional_string_int":
			if err := func() error {
				s.OptionalStringInt.Reset()
				if err := s.OptionalStringInt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_int\"")
			}
		case "optional_string_int16":
			if err := func() error {
				s.OptionalStringInt16.Reset()
				if err := s.OptionalStringInt16.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_int16\"")
			}
		case "optional_string_int32":
			if err := func() error {
				s.OptionalStringInt32.Reset()
				if err := s.OptionalStringInt32.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_int32\"")
			}
		case "optional_string_int64":
			if err := func() error {
				s.OptionalStringInt64.Reset()
				if err := s.OptionalStringInt64.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_int64\"")
			}
		case "optional_string_int8":
			if err := func() error {
				s.OptionalStringInt8.Reset()
				if err := s.OptionalStringInt8.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_int8\"")
			}
		case "optional_string_ip":
			if err := func() error {
				s.OptionalStringIP.Reset()
				if err := s.OptionalStringIP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_ip\"")
			}
		case "optional_string_ipv4":
			if err := func() error {
				s.OptionalStringIpv4.Reset()
				if err := s.OptionalStringIpv4.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_ipv4\"")
			}
		case "optional_string_ipv6":
			if err := func() error {
				s.OptionalStringIpv6.Reset()
				if err := s.OptionalStringIpv6.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_ipv6\"")
			}
		case "optional_string_password":
			if err := func() error {
				s.OptionalStringPassword.Reset()
				if err := s.OptionalStringPassword.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_password\"")
			}
		case "optional_string_time":
			if err := func() error {
				s.OptionalStringTime.Reset()
				if err := s.OptionalStringTime.Decode(d, json.DecodeTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_time\"")
			}
		case "optional_string_uint":
			if err := func() error {
				s.OptionalStringUint.Reset()
				if err := s.OptionalStringUint.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_uint\"")
			}
		case "optional_string_uint16":
			if err := func() error {
				s.OptionalStringUint16.Reset()
				if err := s.OptionalStringUint16.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_uint16\"")
			}
		case "optional_string_uint32":
			if err := func() error {
				s.OptionalStringUint32.Reset()
				if err := s.OptionalStringUint32.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_uint32\"")
			}
		case "optional_string_uint64":
			if err := func() error {
				s.OptionalStringUint64.Reset()
				if err := s.OptionalStringUint64.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_uint64\"")
			}
		case "optional_string_uint8":
			if err := func() error {
				s.OptionalStringUint8.Reset()
				if err := s.OptionalStringUint8.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_uint8\"")
			}
		case "optional_string_unix":
			if err := func() error {
				s.OptionalStringUnix.Reset()
				if err := s.OptionalStringUnix.Decode(d, json.DecodeStringUnixSeconds); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_unix\"")
			}
		case "optional_string_unix-micro":
			if err := func() error {
				s.OptionalStringUnixMinusMicro.Reset()
				if err := s.OptionalStringUnixMinusMicro.Decode(d, json.DecodeStringUnixMicro); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_unix-micro\"")
			}
		case "optional_string_unix-milli":
			if err := func() error {
				s.OptionalStringUnixMinusMilli.Reset()
				if err := s.OptionalStringUnixMinusMilli.Decode(d, json.DecodeStringUnixMilli); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_unix-milli\"")
			}
		case "optional_string_unix-nano":
			if err := func() error {
				s.OptionalStringUnixMinusNano.Reset()
				if err := s.OptionalStringUnixMinusNano.Decode(d, json.DecodeStringUnixNano); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_unix-nano\"")
			}
		case "optional_string_unix-seconds":
			if err := func() error {
				s.OptionalStringUnixMinusSeconds.Reset()
				if err := s.OptionalStringUnixMinusSeconds.Decode(d, json.DecodeStringUnixSeconds); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_unix-seconds\"")
			}
		case "optional_string_uri":
			if err := func() error {
				s.OptionalStringURI.Reset()
				if err := s.OptionalStringURI.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_uri\"")
			}
		case "optional_string_uuid":
			if err := func() error {
				s.OptionalStringUUID.Reset()
				if err := s.OptionalStringUUID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_uuid\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TestRequestFormatTestReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [42]uint8{
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfTestRequestFormatTestReq) {
					name = jsonFieldsNameOfTestRequestFormatTestReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TestRequestFormatTestReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TestRequestFormatTestReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TestRequestRequiredEmptyStructReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TestRequestRequiredEmptyStructReq) encodeFields(e *jx.Encoder) {
}

var jsonFieldsNameOfTestRequestRequiredEmptyStructReq = [0]string{}

// Decode decodes TestRequestRequiredEmptyStructReq from json.
func (s *TestRequestRequiredEmptyStructReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TestRequestRequiredEmptyStructReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
	}); err != nil {
		return errors.Wrap(err, "decode TestRequestRequiredEmptyStructReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TestRequestRequiredEmptyStructReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TestRequestRequiredEmptyStructReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TestRequestRequiredFormatTestReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TestRequestRequiredFormatTestReq) encodeFields(e *jx.Encoder) {
	{
		if len(s.RequiredAny) != 0 {
			e.FieldStart("required_any")
			e.Raw(s.RequiredAny)
		}
	}
	{
		e.FieldStart("required_array_any")
		e.ArrStart()
		for _, elem := range s.RequiredArrayAny {
			if len(elem) != 0 {
				e.Raw(elem)
			}
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_boolean")
		e.ArrStart()
		for _, elem := range s.RequiredArrayBoolean {
			e.Bool(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_integer")
		e.ArrStart()
		for _, elem := range s.RequiredArrayInteger {
			e.Int(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_integer_int16")
		e.ArrStart()
		for _, elem := range s.RequiredArrayIntegerInt16 {
			e.Int16(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_integer_int32")
		e.ArrStart()
		for _, elem := range s.RequiredArrayIntegerInt32 {
			e.Int32(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_integer_int64")
		e.ArrStart()
		for _, elem := range s.RequiredArrayIntegerInt64 {
			e.Int64(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_integer_int8")
		e.ArrStart()
		for _, elem := range s.RequiredArrayIntegerInt8 {
			e.Int8(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_integer_uint")
		e.ArrStart()
		for _, elem := range s.RequiredArrayIntegerUint {
			e.UInt(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_integer_uint16")
		e.ArrStart()
		for _, elem := range s.RequiredArrayIntegerUint16 {
			e.UInt16(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_integer_uint32")
		e.ArrStart()
		for _, elem := range s.RequiredArrayIntegerUint32 {
			e.UInt32(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_integer_uint64")
		e.ArrStart()
		for _, elem := range s.RequiredArrayIntegerUint64 {
			e.UInt64(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_integer_uint8")
		e.ArrStart()
		for _, elem := range s.RequiredArrayIntegerUint8 {
			e.UInt8(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_integer_unix")
		e.ArrStart()
		for _, elem := range s.RequiredArrayIntegerUnix {
			json.EncodeUnixSeconds(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_integer_unix-micro")
		e.ArrStart()
		for _, elem := range s.RequiredArrayIntegerUnixMinusMicro {
			json.EncodeUnixMicro(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_integer_unix-milli")
		e.ArrStart()
		for _, elem := range s.RequiredArrayIntegerUnixMinusMilli {
			json.EncodeUnixMilli(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_integer_unix-nano")
		e.ArrStart()
		for _, elem := range s.RequiredArrayIntegerUnixMinusNano {
			json.EncodeUnixNano(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_integer_unix-seconds")
		e.ArrStart()
		for _, elem := range s.RequiredArrayIntegerUnixMinusSeconds {
			json.EncodeUnixSeconds(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_null")
		e.ArrStart()
		for _, elem := range s.RequiredArrayNull {
			_ = elem
			e.Null()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_number")
		e.ArrStart()
		for _, elem := range s.RequiredArrayNumber {
			e.Float64(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_number_double")
		e.ArrStart()
		for _, elem := range s.RequiredArrayNumberDouble {
			e.Float64(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_number_float")
		e.ArrStart()
		for _, elem := range s.RequiredArrayNumberFloat {
			e.Float32(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_number_int32")
		e.ArrStart()
		for _, elem := range s.RequiredArrayNumberInt32 {
			e.Int32(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_number_int64")
		e.ArrStart()
		for _, elem := range s.RequiredArrayNumberInt64 {
			e.Int64(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string")
		e.ArrStart()
		for _, elem := range s.RequiredArrayString {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_base64")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringBase64 {
			e.Base64(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_binary")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringBinary {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_byte")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringByte {
			e.Base64(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_date")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringDate {
			json.EncodeDate(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_date-time")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringDateMinusTime {
			json.EncodeDateTime(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_duration")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringDuration {
			json.EncodeDuration(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_email")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringEmail {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_float32")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringFloat32 {
			json.EncodeStringFloat32(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_float64")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringFloat64 {
			json.EncodeStringFloat64(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_hostname")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringHostname {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_int")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringInt {
			json.EncodeStringInt(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_int16")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringInt16 {
			json.EncodeStringInt16(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_int32")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringInt32 {
			json.EncodeStringInt32(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_int64")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringInt64 {
			json.EncodeStringInt64(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_int8")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringInt8 {
			json.EncodeStringInt8(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_ip")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringIP {
			json.EncodeIP(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_ipv4")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringIpv4 {
			json.EncodeIPv4(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_ipv6")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringIpv6 {
			json.EncodeIPv6(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_password")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringPassword {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_time")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringTime {
			json.EncodeTime(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_uint")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringUint {
			json.EncodeStringUint(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_uint16")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringUint16 {
			json.EncodeStringUint16(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_uint32")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringUint32 {
			json.EncodeStringUint32(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_uint64")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringUint64 {
			json.EncodeStringUint64(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_uint8")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringUint8 {
			json.EncodeStringUint8(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_unix")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringUnix {
			json.EncodeStringUnixSeconds(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_unix-micro")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringUnixMinusMicro {
			json.EncodeStringUnixMicro(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_unix-milli")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringUnixMinusMilli {
			json.EncodeStringUnixMilli(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_unix-nano")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringUnixMinusNano {
			json.EncodeStringUnixNano(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_unix-seconds")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringUnixMinusSeconds {
			json.EncodeStringUnixSeconds(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_uri")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringURI {
			json.EncodeURI(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_uuid")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringUUID {
			json.EncodeUUID(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_boolean")
		e.Bool(s.RequiredBoolean)
	}
	{
		e.FieldStart("required_double_array_any")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayAny {
			e.ArrStart()
			for _, elem := range elem {
				if len(elem) != 0 {
					e.Raw(elem)
				}
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_boolean")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayBoolean {
			e.ArrStart()
			for _, elem := range elem {
				e.Bool(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_integer")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayInteger {
			e.ArrStart()
			for _, elem := range elem {
				e.Int(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_integer_int16")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayIntegerInt16 {
			e.ArrStart()
			for _, elem := range elem {
				e.Int16(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_integer_int32")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayIntegerInt32 {
			e.ArrStart()
			for _, elem := range elem {
				e.Int32(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_integer_int64")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayIntegerInt64 {
			e.ArrStart()
			for _, elem := range elem {
				e.Int64(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_integer_int8")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayIntegerInt8 {
			e.ArrStart()
			for _, elem := range elem {
				e.Int8(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_integer_uint")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayIntegerUint {
			e.ArrStart()
			for _, elem := range elem {
				e.UInt(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_integer_uint16")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayIntegerUint16 {
			e.ArrStart()
			for _, elem := range elem {
				e.UInt16(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_integer_uint32")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayIntegerUint32 {
			e.ArrStart()
			for _, elem := range elem {
				e.UInt32(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_integer_uint64")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayIntegerUint64 {
			e.ArrStart()
			for _, elem := range elem {
				e.UInt64(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_integer_uint8")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayIntegerUint8 {
			e.ArrStart()
			for _, elem := range elem {
				e.UInt8(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_integer_unix")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayIntegerUnix {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeUnixSeconds(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_integer_unix-micro")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayIntegerUnixMinusMicro {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeUnixMicro(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_integer_unix-milli")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayIntegerUnixMinusMilli {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeUnixMilli(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_integer_unix-nano")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayIntegerUnixMinusNano {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeUnixNano(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_integer_unix-seconds")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayIntegerUnixMinusSeconds {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeUnixSeconds(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_null")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayNull {
			e.ArrStart()
			for _, elem := range elem {
				_ = elem
				e.Null()
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_number")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayNumber {
			e.ArrStart()
			for _, elem := range elem {
				e.Float64(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_number_double")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayNumberDouble {
			e.ArrStart()
			for _, elem := range elem {
				e.Float64(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_number_float")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayNumberFloat {
			e.ArrStart()
			for _, elem := range elem {
				e.Float32(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_number_int32")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayNumberInt32 {
			e.ArrStart()
			for _, elem := range elem {
				e.Int32(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_number_int64")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayNumberInt64 {
			e.ArrStart()
			for _, elem := range elem {
				e.Int64(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayString {
			e.ArrStart()
			for _, elem := range elem {
				e.Str(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_base64")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringBase64 {
			e.ArrStart()
			for _, elem := range elem {
				e.Base64(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_binary")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringBinary {
			e.ArrStart()
			for _, elem := range elem {
				e.Str(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_byte")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringByte {
			e.ArrStart()
			for _, elem := range elem {
				e.Base64(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_date")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringDate {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeDate(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_date-time")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringDateMinusTime {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeDateTime(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_duration")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringDuration {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeDuration(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_email")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringEmail {
			e.ArrStart()
			for _, elem := range elem {
				e.Str(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_float32")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringFloat32 {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringFloat32(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_float64")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringFloat64 {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringFloat64(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_hostname")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringHostname {
			e.ArrStart()
			for _, elem := range elem {
				e.Str(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_int")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringInt {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringInt(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_int16")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringInt16 {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringInt16(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_int32")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringInt32 {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringInt32(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_int64")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringInt64 {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringInt64(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_int8")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringInt8 {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringInt8(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_ip")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringIP {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeIP(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_ipv4")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringIpv4 {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeIPv4(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_ipv6")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringIpv6 {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeIPv6(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_password")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringPassword {
			e.ArrStart()
			for _, elem := range elem {
				e.Str(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_time")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringTime {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeTime(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_uint")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringUint {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringUint(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_uint16")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringUint16 {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringUint16(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_uint32")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringUint32 {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringUint32(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_uint64")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringUint64 {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringUint64(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_uint8")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringUint8 {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringUint8(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_unix")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringUnix {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringUnixSeconds(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_unix-micro")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringUnixMinusMicro {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringUnixMicro(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_unix-milli")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringUnixMinusMilli {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringUnixMilli(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_unix-nano")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringUnixMinusNano {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringUnixNano(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_unix-seconds")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringUnixMinusSeconds {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringUnixSeconds(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_uri")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringURI {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeURI(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_uuid")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringUUID {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeUUID(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_integer")
		e.Int(s.RequiredInteger)
	}
	{
		e.FieldStart("required_integer_int16")
		e.Int16(s.RequiredIntegerInt16)
	}
	{
		e.FieldStart("required_integer_int32")
		e.Int32(s.RequiredIntegerInt32)
	}
	{
		e.FieldStart("required_integer_int64")
		e.Int64(s.RequiredIntegerInt64)
	}
	{
		e.FieldStart("required_integer_int8")
		e.Int8(s.RequiredIntegerInt8)
	}
	{
		e.FieldStart("required_integer_uint")
		e.UInt(s.RequiredIntegerUint)
	}
	{
		e.FieldStart("required_integer_uint16")
		e.UInt16(s.RequiredIntegerUint16)
	}
	{
		e.FieldStart("required_integer_uint32")
		e.UInt32(s.RequiredIntegerUint32)
	}
	{
		e.FieldStart("required_integer_uint64")
		e.UInt64(s.RequiredIntegerUint64)
	}
	{
		e.FieldStart("required_integer_uint8")
		e.UInt8(s.RequiredIntegerUint8)
	}
	{
		e.FieldStart("required_integer_unix")
		json.EncodeUnixSeconds(e, s.RequiredIntegerUnix)
	}
	{
		e.FieldStart("required_integer_unix-micro")
		json.EncodeUnixMicro(e, s.RequiredIntegerUnixMinusMicro)
	}
	{
		e.FieldStart("required_integer_unix-milli")
		json.EncodeUnixMilli(e, s.RequiredIntegerUnixMinusMilli)
	}
	{
		e.FieldStart("required_integer_unix-nano")
		json.EncodeUnixNano(e, s.RequiredIntegerUnixMinusNano)
	}
	{
		e.FieldStart("required_integer_unix-seconds")
		json.EncodeUnixSeconds(e, s.RequiredIntegerUnixMinusSeconds)
	}
	{
		_ = s.RequiredNull
		e.FieldStart("required_null")
		e.Null()
	}
	{
		e.FieldStart("required_number")
		e.Float64(s.RequiredNumber)
	}
	{
		e.FieldStart("required_number_double")
		e.Float64(s.RequiredNumberDouble)
	}
	{
		e.FieldStart("required_number_float")
		e.Float32(s.RequiredNumberFloat)
	}
	{
		e.FieldStart("required_number_int32")
		e.Int32(s.RequiredNumberInt32)
	}
	{
		e.FieldStart("required_number_int64")
		e.Int64(s.RequiredNumberInt64)
	}
	{
		e.FieldStart("required_string")
		e.Str(s.RequiredString)
	}
	{
		e.FieldStart("required_string_base64")
		e.Base64(s.RequiredStringBase64)
	}
	{
		e.FieldStart("required_string_binary")
		e.Str(s.RequiredStringBinary)
	}
	{
		e.FieldStart("required_string_byte")
		e.Base64(s.RequiredStringByte)
	}
	{
		e.FieldStart("required_string_date")
		json.EncodeDate(e, s.RequiredStringDate)
	}
	{
		e.FieldStart("required_string_date-time")
		json.EncodeDateTime(e, s.RequiredStringDateMinusTime)
	}
	{
		e.FieldStart("required_string_duration")
		json.EncodeDuration(e, s.RequiredStringDuration)
	}
	{
		e.FieldStart("required_string_email")
		e.Str(s.RequiredStringEmail)
	}
	{
		e.FieldStart("required_string_float32")
		json.EncodeStringFloat32(e, s.RequiredStringFloat32)
	}
	{
		e.FieldStart("required_string_float64")
		json.EncodeStringFloat64(e, s.RequiredStringFloat64)
	}
	{
		e.FieldStart("required_string_hostname")
		e.Str(s.RequiredStringHostname)
	}
	{
		e.FieldStart("required_string_int")
		json.EncodeStringInt(e, s.RequiredStringInt)
	}
	{
		e.FieldStart("required_string_int16")
		json.EncodeStringInt16(e, s.RequiredStringInt16)
	}
	{
		e.FieldStart("required_string_int32")
		json.EncodeStringInt32(e, s.RequiredStringInt32)
	}
	{
		e.FieldStart("required_string_int64")
		json.EncodeStringInt64(e, s.RequiredStringInt64)
	}
	{
		e.FieldStart("required_string_int8")
		json.EncodeStringInt8(e, s.RequiredStringInt8)
	}
	{
		e.FieldStart("required_string_ip")
		json.EncodeIP(e, s.RequiredStringIP)
	}
	{
		e.FieldStart("required_string_ipv4")
		json.EncodeIPv4(e, s.RequiredStringIpv4)
	}
	{
		e.FieldStart("required_string_ipv6")
		json.EncodeIPv6(e, s.RequiredStringIpv6)
	}
	{
		e.FieldStart("required_string_password")
		e.Str(s.RequiredStringPassword)
	}
	{
		e.FieldStart("required_string_time")
		json.EncodeTime(e, s.RequiredStringTime)
	}
	{
		e.FieldStart("required_string_uint")
		json.EncodeStringUint(e, s.RequiredStringUint)
	}
	{
		e.FieldStart("required_string_uint16")
		json.EncodeStringUint16(e, s.RequiredStringUint16)
	}
	{
		e.FieldStart("required_string_uint32")
		json.EncodeStringUint32(e, s.RequiredStringUint32)
	}
	{
		e.FieldStart("required_string_uint64")
		json.EncodeStringUint64(e, s.RequiredStringUint64)
	}
	{
		e.FieldStart("required_string_uint8")
		json.EncodeStringUint8(e, s.RequiredStringUint8)
	}
	{
		e.FieldStart("required_string_unix")
		json.EncodeStringUnixSeconds(e, s.RequiredStringUnix)
	}
	{
		e.FieldStart("required_string_unix-micro")
		json.EncodeStringUnixMicro(e, s.RequiredStringUnixMinusMicro)
	}
	{
		e.FieldStart("required_string_unix-milli")
		json.EncodeStringUnixMilli(e, s.RequiredStringUnixMinusMilli)
	}
	{
		e.FieldStart("required_string_unix-nano")
		json.EncodeStringUnixNano(e, s.RequiredStringUnixMinusNano)
	}
	{
		e.FieldStart("required_string_unix-seconds")
		json.EncodeStringUnixSeconds(e, s.RequiredStringUnixMinusSeconds)
	}
	{
		e.FieldStart("required_string_uri")
		json.EncodeURI(e, s.RequiredStringURI)
	}
	{
		e.FieldStart("required_string_uuid")
		json.EncodeUUID(e, s.RequiredStringUUID)
	}
	{
		if len(s.OptionalAny) != 0 {
			e.FieldStart("optional_any")
			e.Raw(s.OptionalAny)
		}
	}
	{
		if s.OptionalArrayAny != nil {
			e.FieldStart("optional_array_any")
			e.ArrStart()
			for _, elem := range s.OptionalArrayAny {
				if len(elem) != 0 {
					e.Raw(elem)
				}
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayBoolean != nil {
			e.FieldStart("optional_array_boolean")
			e.ArrStart()
			for _, elem := range s.OptionalArrayBoolean {
				e.Bool(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayInteger != nil {
			e.FieldStart("optional_array_integer")
			e.ArrStart()
			for _, elem := range s.OptionalArrayInteger {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayIntegerInt16 != nil {
			e.FieldStart("optional_array_integer_int16")
			e.ArrStart()
			for _, elem := range s.OptionalArrayIntegerInt16 {
				e.Int16(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayIntegerInt32 != nil {
			e.FieldStart("optional_array_integer_int32")
			e.ArrStart()
			for _, elem := range s.OptionalArrayIntegerInt32 {
				e.Int32(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayIntegerInt64 != nil {
			e.FieldStart("optional_array_integer_int64")
			e.ArrStart()
			for _, elem := range s.OptionalArrayIntegerInt64 {
				e.Int64(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayIntegerInt8 != nil {
			e.FieldStart("optional_array_integer_int8")
			e.ArrStart()
			for _, elem := range s.OptionalArrayIntegerInt8 {
				e.Int8(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayIntegerUint != nil {
			e.FieldStart("optional_array_integer_uint")
			e.ArrStart()
			for _, elem := range s.OptionalArrayIntegerUint {
				e.UInt(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayIntegerUint16 != nil {
			e.FieldStart("optional_array_integer_uint16")
			e.ArrStart()
			for _, elem := range s.OptionalArrayIntegerUint16 {
				e.UInt16(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayIntegerUint32 != nil {
			e.FieldStart("optional_array_integer_uint32")
			e.ArrStart()
			for _, elem := range s.OptionalArrayIntegerUint32 {
				e.UInt32(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayIntegerUint64 != nil {
			e.FieldStart("optional_array_integer_uint64")
			e.ArrStart()
			for _, elem := range s.OptionalArrayIntegerUint64 {
				e.UInt64(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayIntegerUint8 != nil {
			e.FieldStart("optional_array_integer_uint8")
			e.ArrStart()
			for _, elem := range s.OptionalArrayIntegerUint8 {
				e.UInt8(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayIntegerUnix != nil {
			e.FieldStart("optional_array_integer_unix")
			e.ArrStart()
			for _, elem := range s.OptionalArrayIntegerUnix {
				json.EncodeUnixSeconds(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayIntegerUnixMinusMicro != nil {
			e.FieldStart("optional_array_integer_unix-micro")
			e.ArrStart()
			for _, elem := range s.OptionalArrayIntegerUnixMinusMicro {
				json.EncodeUnixMicro(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayIntegerUnixMinusMilli != nil {
			e.FieldStart("optional_array_integer_unix-milli")
			e.ArrStart()
			for _, elem := range s.OptionalArrayIntegerUnixMinusMilli {
				json.EncodeUnixMilli(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayIntegerUnixMinusNano != nil {
			e.FieldStart("optional_array_integer_unix-nano")
			e.ArrStart()
			for _, elem := range s.OptionalArrayIntegerUnixMinusNano {
				json.EncodeUnixNano(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayIntegerUnixMinusSeconds != nil {
			e.FieldStart("optional_array_integer_unix-seconds")
			e.ArrStart()
			for _, elem := range s.OptionalArrayIntegerUnixMinusSeconds {
				json.EncodeUnixSeconds(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayNull != nil {
			e.FieldStart("optional_array_null")
			e.ArrStart()
			for _, elem := range s.OptionalArrayNull {
				_ = elem
				e.Null()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayNumber != nil {
			e.FieldStart("optional_array_number")
			e.ArrStart()
			for _, elem := range s.OptionalArrayNumber {
				e.Float64(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayNumberDouble != nil {
			e.FieldStart("optional_array_number_double")
			e.ArrStart()
			for _, elem := range s.OptionalArrayNumberDouble {
				e.Float64(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayNumberFloat != nil {
			e.FieldStart("optional_array_number_float")
			e.ArrStart()
			for _, elem := range s.OptionalArrayNumberFloat {
				e.Float32(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayNumberInt32 != nil {
			e.FieldStart("optional_array_number_int32")
			e.ArrStart()
			for _, elem := range s.OptionalArrayNumberInt32 {
				e.Int32(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayNumberInt64 != nil {
			e.FieldStart("optional_array_number_int64")
			e.ArrStart()
			for _, elem := range s.OptionalArrayNumberInt64 {
				e.Int64(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayString != nil {
			e.FieldStart("optional_array_string")
			e.ArrStart()
			for _, elem := range s.OptionalArrayString {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringBase64 != nil {
			e.FieldStart("optional_array_string_base64")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringBase64 {
				e.Base64(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringBinary != nil {
			e.FieldStart("optional_array_string_binary")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringBinary {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringByte != nil {
			e.FieldStart("optional_array_string_byte")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringByte {
				e.Base64(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringDate != nil {
			e.FieldStart("optional_array_string_date")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringDate {
				json.EncodeDate(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringDateMinusTime != nil {
			e.FieldStart("optional_array_string_date-time")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringDateMinusTime {
				json.EncodeDateTime(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringDuration != nil {
			e.FieldStart("optional_array_string_duration")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringDuration {
				json.EncodeDuration(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringEmail != nil {
			e.FieldStart("optional_array_string_email")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringEmail {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringFloat32 != nil {
			e.FieldStart("optional_array_string_float32")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringFloat32 {
				json.EncodeStringFloat32(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringFloat64 != nil {
			e.FieldStart("optional_array_string_float64")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringFloat64 {
				json.EncodeStringFloat64(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringHostname != nil {
			e.FieldStart("optional_array_string_hostname")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringHostname {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringInt != nil {
			e.FieldStart("optional_array_string_int")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringInt {
				json.EncodeStringInt(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringInt16 != nil {
			e.FieldStart("optional_array_string_int16")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringInt16 {
				json.EncodeStringInt16(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringInt32 != nil {
			e.FieldStart("optional_array_string_int32")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringInt32 {
				json.EncodeStringInt32(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringInt64 != nil {
			e.FieldStart("optional_array_string_int64")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringInt64 {
				json.EncodeStringInt64(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringInt8 != nil {
			e.FieldStart("optional_array_string_int8")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringInt8 {
				json.EncodeStringInt8(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringIP != nil {
			e.FieldStart("optional_array_string_ip")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringIP {
				json.EncodeIP(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringIpv4 != nil {
			e.FieldStart("optional_array_string_ipv4")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringIpv4 {
				json.EncodeIPv4(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringIpv6 != nil {
			e.FieldStart("optional_array_string_ipv6")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringIpv6 {
				json.EncodeIPv6(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringPassword != nil {
			e.FieldStart("optional_array_string_password")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringPassword {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringTime != nil {
			e.FieldStart("optional_array_string_time")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringTime {
				json.EncodeTime(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringUint != nil {
			e.FieldStart("optional_array_string_uint")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringUint {
				json.EncodeStringUint(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringUint16 != nil {
			e.FieldStart("optional_array_string_uint16")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringUint16 {
				json.EncodeStringUint16(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringUint32 != nil {
			e.FieldStart("optional_array_string_uint32")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringUint32 {
				json.EncodeStringUint32(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringUint64 != nil {
			e.FieldStart("optional_array_string_uint64")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringUint64 {
				json.EncodeStringUint64(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringUint8 != nil {
			e.FieldStart("optional_array_string_uint8")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringUint8 {
				json.EncodeStringUint8(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringUnix != nil {
			e.FieldStart("optional_array_string_unix")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringUnix {
				json.EncodeStringUnixSeconds(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringUnixMinusMicro != nil {
			e.FieldStart("optional_array_string_unix-micro")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringUnixMinusMicro {
				json.EncodeStringUnixMicro(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringUnixMinusMilli != nil {
			e.FieldStart("optional_array_string_unix-milli")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringUnixMinusMilli {
				json.EncodeStringUnixMilli(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringUnixMinusNano != nil {
			e.FieldStart("optional_array_string_unix-nano")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringUnixMinusNano {
				json.EncodeStringUnixNano(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringUnixMinusSeconds != nil {
			e.FieldStart("optional_array_string_unix-seconds")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringUnixMinusSeconds {
				json.EncodeStringUnixSeconds(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringURI != nil {
			e.FieldStart("optional_array_string_uri")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringURI {
				json.EncodeURI(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringUUID != nil {
			e.FieldStart("optional_array_string_uuid")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringUUID {
				json.EncodeUUID(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalBoolean.Set {
			e.FieldStart("optional_boolean")
			s.OptionalBoolean.Encode(e)
		}
	}
	{
		if s.OptionalDoubleArrayAny != nil {
			e.FieldStart("optional_double_array_any")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayAny {
				e.ArrStart()
				for _, elem := range elem {
					if len(elem) != 0 {
						e.Raw(elem)
					}
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayBoolean != nil {
			e.FieldStart("optional_double_array_boolean")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayBoolean {
				e.ArrStart()
				for _, elem := range elem {
					e.Bool(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayInteger != nil {
			e.FieldStart("optional_double_array_integer")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayInteger {
				e.ArrStart()
				for _, elem := range elem {
					e.Int(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayIntegerInt16 != nil {
			e.FieldStart("optional_double_array_integer_int16")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayIntegerInt16 {
				e.ArrStart()
				for _, elem := range elem {
					e.Int16(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayIntegerInt32 != nil {
			e.FieldStart("optional_double_array_integer_int32")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayIntegerInt32 {
				e.ArrStart()
				for _, elem := range elem {
					e.Int32(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayIntegerInt64 != nil {
			e.FieldStart("optional_double_array_integer_int64")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayIntegerInt64 {
				e.ArrStart()
				for _, elem := range elem {
					e.Int64(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayIntegerInt8 != nil {
			e.FieldStart("optional_double_array_integer_int8")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayIntegerInt8 {
				e.ArrStart()
				for _, elem := range elem {
					e.Int8(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayIntegerUint != nil {
			e.FieldStart("optional_double_array_integer_uint")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayIntegerUint {
				e.ArrStart()
				for _, elem := range elem {
					e.UInt(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayIntegerUint16 != nil {
			e.FieldStart("optional_double_array_integer_uint16")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayIntegerUint16 {
				e.ArrStart()
				for _, elem := range elem {
					e.UInt16(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayIntegerUint32 != nil {
			e.FieldStart("optional_double_array_integer_uint32")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayIntegerUint32 {
				e.ArrStart()
				for _, elem := range elem {
					e.UInt32(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayIntegerUint64 != nil {
			e.FieldStart("optional_double_array_integer_uint64")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayIntegerUint64 {
				e.ArrStart()
				for _, elem := range elem {
					e.UInt64(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayIntegerUint8 != nil {
			e.FieldStart("optional_double_array_integer_uint8")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayIntegerUint8 {
				e.ArrStart()
				for _, elem := range elem {
					e.UInt8(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayIntegerUnix != nil {
			e.FieldStart("optional_double_array_integer_unix")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayIntegerUnix {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeUnixSeconds(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayIntegerUnixMinusMicro != nil {
			e.FieldStart("optional_double_array_integer_unix-micro")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayIntegerUnixMinusMicro {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeUnixMicro(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayIntegerUnixMinusMilli != nil {
			e.FieldStart("optional_double_array_integer_unix-milli")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayIntegerUnixMinusMilli {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeUnixMilli(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayIntegerUnixMinusNano != nil {
			e.FieldStart("optional_double_array_integer_unix-nano")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayIntegerUnixMinusNano {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeUnixNano(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayIntegerUnixMinusSeconds != nil {
			e.FieldStart("optional_double_array_integer_unix-seconds")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayIntegerUnixMinusSeconds {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeUnixSeconds(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayNull != nil {
			e.FieldStart("optional_double_array_null")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayNull {
				e.ArrStart()
				for _, elem := range elem {
					_ = elem
					e.Null()
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayNumber != nil {
			e.FieldStart("optional_double_array_number")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayNumber {
				e.ArrStart()
				for _, elem := range elem {
					e.Float64(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayNumberDouble != nil {
			e.FieldStart("optional_double_array_number_double")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayNumberDouble {
				e.ArrStart()
				for _, elem := range elem {
					e.Float64(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayNumberFloat != nil {
			e.FieldStart("optional_double_array_number_float")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayNumberFloat {
				e.ArrStart()
				for _, elem := range elem {
					e.Float32(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayNumberInt32 != nil {
			e.FieldStart("optional_double_array_number_int32")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayNumberInt32 {
				e.ArrStart()
				for _, elem := range elem {
					e.Int32(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayNumberInt64 != nil {
			e.FieldStart("optional_double_array_number_int64")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayNumberInt64 {
				e.ArrStart()
				for _, elem := range elem {
					e.Int64(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayString != nil {
			e.FieldStart("optional_double_array_string")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayString {
				e.ArrStart()
				for _, elem := range elem {
					e.Str(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringBase64 != nil {
			e.FieldStart("optional_double_array_string_base64")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringBase64 {
				e.ArrStart()
				for _, elem := range elem {
					e.Base64(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringBinary != nil {
			e.FieldStart("optional_double_array_string_binary")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringBinary {
				e.ArrStart()
				for _, elem := range elem {
					e.Str(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringByte != nil {
			e.FieldStart("optional_double_array_string_byte")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringByte {
				e.ArrStart()
				for _, elem := range elem {
					e.Base64(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringDate != nil {
			e.FieldStart("optional_double_array_string_date")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringDate {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeDate(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringDateMinusTime != nil {
			e.FieldStart("optional_double_array_string_date-time")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringDateMinusTime {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeDateTime(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringDuration != nil {
			e.FieldStart("optional_double_array_string_duration")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringDuration {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeDuration(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringEmail != nil {
			e.FieldStart("optional_double_array_string_email")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringEmail {
				e.ArrStart()
				for _, elem := range elem {
					e.Str(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringFloat32 != nil {
			e.FieldStart("optional_double_array_string_float32")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringFloat32 {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringFloat32(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringFloat64 != nil {
			e.FieldStart("optional_double_array_string_float64")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringFloat64 {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringFloat64(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringHostname != nil {
			e.FieldStart("optional_double_array_string_hostname")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringHostname {
				e.ArrStart()
				for _, elem := range elem {
					e.Str(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringInt != nil {
			e.FieldStart("optional_double_array_string_int")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringInt {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringInt(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringInt16 != nil {
			e.FieldStart("optional_double_array_string_int16")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringInt16 {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringInt16(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringInt32 != nil {
			e.FieldStart("optional_double_array_string_int32")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringInt32 {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringInt32(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringInt64 != nil {
			e.FieldStart("optional_double_array_string_int64")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringInt64 {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringInt64(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringInt8 != nil {
			e.FieldStart("optional_double_array_string_int8")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringInt8 {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringInt8(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringIP != nil {
			e.FieldStart("optional_double_array_string_ip")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringIP {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeIP(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringIpv4 != nil {
			e.FieldStart("optional_double_array_string_ipv4")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringIpv4 {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeIPv4(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringIpv6 != nil {
			e.FieldStart("optional_double_array_string_ipv6")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringIpv6 {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeIPv6(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringPassword != nil {
			e.FieldStart("optional_double_array_string_password")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringPassword {
				e.ArrStart()
				for _, elem := range elem {
					e.Str(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringTime != nil {
			e.FieldStart("optional_double_array_string_time")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringTime {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeTime(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringUint != nil {
			e.FieldStart("optional_double_array_string_uint")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringUint {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringUint(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringUint16 != nil {
			e.FieldStart("optional_double_array_string_uint16")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringUint16 {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringUint16(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringUint32 != nil {
			e.FieldStart("optional_double_array_string_uint32")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringUint32 {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringUint32(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringUint64 != nil {
			e.FieldStart("optional_double_array_string_uint64")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringUint64 {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringUint64(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringUint8 != nil {
			e.FieldStart("optional_double_array_string_uint8")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringUint8 {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringUint8(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringUnix != nil {
			e.FieldStart("optional_double_array_string_unix")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringUnix {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringUnixSeconds(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringUnixMinusMicro != nil {
			e.FieldStart("optional_double_array_string_unix-micro")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringUnixMinusMicro {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringUnixMicro(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringUnixMinusMilli != nil {
			e.FieldStart("optional_double_array_string_unix-milli")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringUnixMinusMilli {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringUnixMilli(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringUnixMinusNano != nil {
			e.FieldStart("optional_double_array_string_unix-nano")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringUnixMinusNano {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringUnixNano(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringUnixMinusSeconds != nil {
			e.FieldStart("optional_double_array_string_unix-seconds")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringUnixMinusSeconds {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringUnixSeconds(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringURI != nil {
			e.FieldStart("optional_double_array_string_uri")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringURI {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeURI(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringUUID != nil {
			e.FieldStart("optional_double_array_string_uuid")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringUUID {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeUUID(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalInteger.Set {
			e.FieldStart("optional_integer")
			s.OptionalInteger.Encode(e)
		}
	}
	{
		if s.OptionalIntegerInt16.Set {
			e.FieldStart("optional_integer_int16")
			s.OptionalIntegerInt16.Encode(e)
		}
	}
	{
		if s.OptionalIntegerInt32.Set {
			e.FieldStart("optional_integer_int32")
			s.OptionalIntegerInt32.Encode(e)
		}
	}
	{
		if s.OptionalIntegerInt64.Set {
			e.FieldStart("optional_integer_int64")
			s.OptionalIntegerInt64.Encode(e)
		}
	}
	{
		if s.OptionalIntegerInt8.Set {
			e.FieldStart("optional_integer_int8")
			s.OptionalIntegerInt8.Encode(e)
		}
	}
	{
		if s.OptionalIntegerUint.Set {
			e.FieldStart("optional_integer_uint")
			s.OptionalIntegerUint.Encode(e)
		}
	}
	{
		if s.OptionalIntegerUint16.Set {
			e.FieldStart("optional_integer_uint16")
			s.OptionalIntegerUint16.Encode(e)
		}
	}
	{
		if s.OptionalIntegerUint32.Set {
			e.FieldStart("optional_integer_uint32")
			s.OptionalIntegerUint32.Encode(e)
		}
	}
	{
		if s.OptionalIntegerUint64.Set {
			e.FieldStart("optional_integer_uint64")
			s.OptionalIntegerUint64.Encode(e)
		}
	}
	{
		if s.OptionalIntegerUint8.Set {
			e.FieldStart("optional_integer_uint8")
			s.OptionalIntegerUint8.Encode(e)
		}
	}
	{
		if s.OptionalIntegerUnix.Set {
			e.FieldStart("optional_integer_unix")
			s.OptionalIntegerUnix.Encode(e, json.EncodeUnixSeconds)
		}
	}
	{
		if s.OptionalIntegerUnixMinusMicro.Set {
			e.FieldStart("optional_integer_unix-micro")
			s.OptionalIntegerUnixMinusMicro.Encode(e, json.EncodeUnixMicro)
		}
	}
	{
		if s.OptionalIntegerUnixMinusMilli.Set {
			e.FieldStart("optional_integer_unix-milli")
			s.OptionalIntegerUnixMinusMilli.Encode(e, json.EncodeUnixMilli)
		}
	}
	{
		if s.OptionalIntegerUnixMinusNano.Set {
			e.FieldStart("optional_integer_unix-nano")
			s.OptionalIntegerUnixMinusNano.Encode(e, json.EncodeUnixNano)
		}
	}
	{
		if s.OptionalIntegerUnixMinusSeconds.Set {
			e.FieldStart("optional_integer_unix-seconds")
			s.OptionalIntegerUnixMinusSeconds.Encode(e, json.EncodeUnixSeconds)
		}
	}
	{
		if s.OptionalNull.Set {
			e.FieldStart("optional_null")
			s.OptionalNull.Encode(e)
		}
	}
	{
		if s.OptionalNumber.Set {
			e.FieldStart("optional_number")
			s.OptionalNumber.Encode(e)
		}
	}
	{
		if s.OptionalNumberDouble.Set {
			e.FieldStart("optional_number_double")
			s.OptionalNumberDouble.Encode(e)
		}
	}
	{
		if s.OptionalNumberFloat.Set {
			e.FieldStart("optional_number_float")
			s.OptionalNumberFloat.Encode(e)
		}
	}
	{
		if s.OptionalNumberInt32.Set {
			e.FieldStart("optional_number_int32")
			s.OptionalNumberInt32.Encode(e)
		}
	}
	{
		if s.OptionalNumberInt64.Set {
			e.FieldStart("optional_number_int64")
			s.OptionalNumberInt64.Encode(e)
		}
	}
	{
		if s.OptionalString.Set {
			e.FieldStart("optional_string")
			s.OptionalString.Encode(e)
		}
	}
	{
		e.FieldStart("optional_string_base64")
		e.Base64(s.OptionalStringBase64)
	}
	{
		if s.OptionalStringBinary.Set {
			e.FieldStart("optional_string_binary")
			s.OptionalStringBinary.Encode(e)
		}
	}
	{
		e.FieldStart("optional_string_byte")
		e.Base64(s.OptionalStringByte)
	}
	{
		if s.OptionalStringDate.Set {
			e.FieldStart("optional_string_date")
			s.OptionalStringDate.Encode(e, json.EncodeDate)
		}
	}
	{
		if s.OptionalStringDateMinusTime.Set {
			e.FieldStart("optional_string_date-time")
			s.OptionalStringDateMinusTime.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.OptionalStringDuration.Set {
			e.FieldStart("optional_string_duration")
			s.OptionalStringDuration.Encode(e)
		}
	}
	{
		if s.OptionalStringEmail.Set {
			e.FieldStart("optional_string_email")
			s.OptionalStringEmail.Encode(e)
		}
	}
	{
		if s.OptionalStringFloat32.Set {
			e.FieldStart("optional_string_float32")
			s.OptionalStringFloat32.Encode(e)
		}
	}
	{
		if s.OptionalStringFloat64.Set {
			e.FieldStart("optional_string_float64")
			s.OptionalStringFloat64.Encode(e)
		}
	}
	{
		if s.OptionalStringHostname.Set {
			e.FieldStart("optional_string_hostname")
			s.OptionalStringHostname.Encode(e)
		}
	}
	{
		if s.OptionalStringInt.Set {
			e.FieldStart("optional_string_int")
			s.OptionalStringInt.Encode(e)
		}
	}
	{
		if s.OptionalStringInt16.Set {
			e.FieldStart("optional_string_int16")
			s.OptionalStringInt16.Encode(e)
		}
	}
	{
		if s.OptionalStringInt32.Set {
			e.FieldStart("optional_string_int32")
			s.OptionalStringInt32.Encode(e)
		}
	}
	{
		if s.OptionalStringInt64.Set {
			e.FieldStart("optional_string_int64")
			s.OptionalStringInt64.Encode(e)
		}
	}
	{
		if s.OptionalStringInt8.Set {
			e.FieldStart("optional_string_int8")
			s.OptionalStringInt8.Encode(e)
		}
	}
	{
		if s.OptionalStringIP.Set {
			e.FieldStart("optional_string_ip")
			s.OptionalStringIP.Encode(e)
		}
	}
	{
		if s.OptionalStringIpv4.Set {
			e.FieldStart("optional_string_ipv4")
			s.OptionalStringIpv4.Encode(e)
		}
	}
	{
		if s.OptionalStringIpv6.Set {
			e.FieldStart("optional_string_ipv6")
			s.OptionalStringIpv6.Encode(e)
		}
	}
	{
		if s.OptionalStringPassword.Set {
			e.FieldStart("optional_string_password")
			s.OptionalStringPassword.Encode(e)
		}
	}
	{
		if s.OptionalStringTime.Set {
			e.FieldStart("optional_string_time")
			s.OptionalStringTime.Encode(e, json.EncodeTime)
		}
	}
	{
		if s.OptionalStringUint.Set {
			e.FieldStart("optional_string_uint")
			s.OptionalStringUint.Encode(e)
		}
	}
	{
		if s.OptionalStringUint16.Set {
			e.FieldStart("optional_string_uint16")
			s.OptionalStringUint16.Encode(e)
		}
	}
	{
		if s.OptionalStringUint32.Set {
			e.FieldStart("optional_string_uint32")
			s.OptionalStringUint32.Encode(e)
		}
	}
	{
		if s.OptionalStringUint64.Set {
			e.FieldStart("optional_string_uint64")
			s.OptionalStringUint64.Encode(e)
		}
	}
	{
		if s.OptionalStringUint8.Set {
			e.FieldStart("optional_string_uint8")
			s.OptionalStringUint8.Encode(e)
		}
	}
	{
		if s.OptionalStringUnix.Set {
			e.FieldStart("optional_string_unix")
			s.OptionalStringUnix.Encode(e, json.EncodeStringUnixSeconds)
		}
	}
	{
		if s.OptionalStringUnixMinusMicro.Set {
			e.FieldStart("optional_string_unix-micro")
			s.OptionalStringUnixMinusMicro.Encode(e, json.EncodeStringUnixMicro)
		}
	}
	{
		if s.OptionalStringUnixMinusMilli.Set {
			e.FieldStart("optional_string_unix-milli")
			s.OptionalStringUnixMinusMilli.Encode(e, json.EncodeStringUnixMilli)
		}
	}
	{
		if s.OptionalStringUnixMinusNano.Set {
			e.FieldStart("optional_string_unix-nano")
			s.OptionalStringUnixMinusNano.Encode(e, json.EncodeStringUnixNano)
		}
	}
	{
		if s.OptionalStringUnixMinusSeconds.Set {
			e.FieldStart("optional_string_unix-seconds")
			s.OptionalStringUnixMinusSeconds.Encode(e, json.EncodeStringUnixSeconds)
		}
	}
	{
		if s.OptionalStringURI.Set {
			e.FieldStart("optional_string_uri")
			s.OptionalStringURI.Encode(e)
		}
	}
	{
		if s.OptionalStringUUID.Set {
			e.FieldStart("optional_string_uuid")
			s.OptionalStringUUID.Encode(e)
		}
	}
}

var jsonFieldsNameOfTestRequestRequiredFormatTestReq = [336]string{
	0:   "required_any",
	1:   "required_array_any",
	2:   "required_array_boolean",
	3:   "required_array_integer",
	4:   "required_array_integer_int16",
	5:   "required_array_integer_int32",
	6:   "required_array_integer_int64",
	7:   "required_array_integer_int8",
	8:   "required_array_integer_uint",
	9:   "required_array_integer_uint16",
	10:  "required_array_integer_uint32",
	11:  "required_array_integer_uint64",
	12:  "required_array_integer_uint8",
	13:  "required_array_integer_unix",
	14:  "required_array_integer_unix-micro",
	15:  "required_array_integer_unix-milli",
	16:  "required_array_integer_unix-nano",
	17:  "required_array_integer_unix-seconds",
	18:  "required_array_null",
	19:  "required_array_number",
	20:  "required_array_number_double",
	21:  "required_array_number_float",
	22:  "required_array_number_int32",
	23:  "required_array_number_int64",
	24:  "required_array_string",
	25:  "required_array_string_base64",
	26:  "required_array_string_binary",
	27:  "required_array_string_byte",
	28:  "required_array_string_date",
	29:  "required_array_string_date-time",
	30:  "required_array_string_duration",
	31:  "required_array_string_email",
	32:  "required_array_string_float32",
	33:  "required_array_string_float64",
	34:  "required_array_string_hostname",
	35:  "required_array_string_int",
	36:  "required_array_string_int16",
	37:  "required_array_string_int32",
	38:  "required_array_string_int64",
	39:  "required_array_string_int8",
	40:  "required_array_string_ip",
	41:  "required_array_string_ipv4",
	42:  "required_array_string_ipv6",
	43:  "required_array_string_password",
	44:  "required_array_string_time",
	45:  "required_array_string_uint",
	46:  "required_array_string_uint16",
	47:  "required_array_string_uint32",
	48:  "required_array_string_uint64",
	49:  "required_array_string_uint8",
	50:  "required_array_string_unix",
	51:  "required_array_string_unix-micro",
	52:  "required_array_string_unix-milli",
	53:  "required_array_string_unix-nano",
	54:  "required_array_string_unix-seconds",
	55:  "required_array_string_uri",
	56:  "required_array_string_uuid",
	57:  "required_boolean",
	58:  "required_double_array_any",
	59:  "required_double_array_boolean",
	60:  "required_double_array_integer",
	61:  "required_double_array_integer_int16",
	62:  "required_double_array_integer_int32",
	63:  "required_double_array_integer_int64",
	64:  "required_double_array_integer_int8",
	65:  "required_double_array_integer_uint",
	66:  "required_double_array_integer_uint16",
	67:  "required_double_array_integer_uint32",
	68:  "required_double_array_integer_uint64",
	69:  "required_double_array_integer_uint8",
	70:  "required_double_array_integer_unix",
	71:  "required_double_array_integer_unix-micro",
	72:  "required_double_array_integer_unix-milli",
	73:  "required_double_array_integer_unix-nano",
	74:  "required_double_array_integer_unix-seconds",
	75:  "required_double_array_null",
	76:  "required_double_array_number",
	77:  "required_double_array_number_double",
	78:  "required_double_array_number_float",
	79:  "required_double_array_number_int32",
	80:  "required_double_array_number_int64",
	81:  "required_double_array_string",
	82:  "required_double_array_string_base64",
	83:  "required_double_array_string_binary",
	84:  "required_double_array_string_byte",
	85:  "required_double_array_string_date",
	86:  "required_double_array_string_date-time",
	87:  "required_double_array_string_duration",
	88:  "required_double_array_string_email",
	89:  "required_double_array_string_float32",
	90:  "required_double_array_string_float64",
	91:  "required_double_array_string_hostname",
	92:  "required_double_array_string_int",
	93:  "required_double_array_string_int16",
	94:  "required_double_array_string_int32",
	95:  "required_double_array_string_int64",
	96:  "required_double_array_string_int8",
	97:  "required_double_array_string_ip",
	98:  "required_double_array_string_ipv4",
	99:  "required_double_array_string_ipv6",
	100: "required_double_array_string_password",
	101: "required_double_array_string_time",
	102: "required_double_array_string_uint",
	103: "required_double_array_string_uint16",
	104: "required_double_array_string_uint32",
	105: "required_double_array_string_uint64",
	106: "required_double_array_string_uint8",
	107: "required_double_array_string_unix",
	108: "required_double_array_string_unix-micro",
	109: "required_double_array_string_unix-milli",
	110: "required_double_array_string_unix-nano",
	111: "required_double_array_string_unix-seconds",
	112: "required_double_array_string_uri",
	113: "required_double_array_string_uuid",
	114: "required_integer",
	115: "required_integer_int16",
	116: "required_integer_int32",
	117: "required_integer_int64",
	118: "required_integer_int8",
	119: "required_integer_uint",
	120: "required_integer_uint16",
	121: "required_integer_uint32",
	122: "required_integer_uint64",
	123: "required_integer_uint8",
	124: "required_integer_unix",
	125: "required_integer_unix-micro",
	126: "required_integer_unix-milli",
	127: "required_integer_unix-nano",
	128: "required_integer_unix-seconds",
	129: "required_null",
	130: "required_number",
	131: "required_number_double",
	132: "required_number_float",
	133: "required_number_int32",
	134: "required_number_int64",
	135: "required_string",
	136: "required_string_base64",
	137: "required_string_binary",
	138: "required_string_byte",
	139: "required_string_date",
	140: "required_string_date-time",
	141: "required_string_duration",
	142: "required_string_email",
	143: "required_string_float32",
	144: "required_string_float64",
	145: "required_string_hostname",
	146: "required_string_int",
	147: "required_string_int16",
	148: "required_string_int32",
	149: "required_string_int64",
	150: "required_string_int8",
	151: "required_string_ip",
	152: "required_string_ipv4",
	153: "required_string_ipv6",
	154: "required_string_password",
	155: "required_string_time",
	156: "required_string_uint",
	157: "required_string_uint16",
	158: "required_string_uint32",
	159: "required_string_uint64",
	160: "required_string_uint8",
	161: "required_string_unix",
	162: "required_string_unix-micro",
	163: "required_string_unix-milli",
	164: "required_string_unix-nano",
	165: "required_string_unix-seconds",
	166: "required_string_uri",
	167: "required_string_uuid",
	168: "optional_any",
	169: "optional_array_any",
	170: "optional_array_boolean",
	171: "optional_array_integer",
	172: "optional_array_integer_int16",
	173: "optional_array_integer_int32",
	174: "optional_array_integer_int64",
	175: "optional_array_integer_int8",
	176: "optional_array_integer_uint",
	177: "optional_array_integer_uint16",
	178: "optional_array_integer_uint32",
	179: "optional_array_integer_uint64",
	180: "optional_array_integer_uint8",
	181: "optional_array_integer_unix",
	182: "optional_array_integer_unix-micro",
	183: "optional_array_integer_unix-milli",
	184: "optional_array_integer_unix-nano",
	185: "optional_array_integer_unix-seconds",
	186: "optional_array_null",
	187: "optional_array_number",
	188: "optional_array_number_double",
	189: "optional_array_number_float",
	190: "optional_array_number_int32",
	191: "optional_array_number_int64",
	192: "optional_array_string",
	193: "optional_array_string_base64",
	194: "optional_array_string_binary",
	195: "optional_array_string_byte",
	196: "optional_array_string_date",
	197: "optional_array_string_date-time",
	198: "optional_array_string_duration",
	199: "optional_array_string_email",
	200: "optional_array_string_float32",
	201: "optional_array_string_float64",
	202: "optional_array_string_hostname",
	203: "optional_array_string_int",
	204: "optional_array_string_int16",
	205: "optional_array_string_int32",
	206: "optional_array_string_int64",
	207: "optional_array_string_int8",
	208: "optional_array_string_ip",
	209: "optional_array_string_ipv4",
	210: "optional_array_string_ipv6",
	211: "optional_array_string_password",
	212: "optional_array_string_time",
	213: "optional_array_string_uint",
	214: "optional_array_string_uint16",
	215: "optional_array_string_uint32",
	216: "optional_array_string_uint64",
	217: "optional_array_string_uint8",
	218: "optional_array_string_unix",
	219: "optional_array_string_unix-micro",
	220: "optional_array_string_unix-milli",
	221: "optional_array_string_unix-nano",
	222: "optional_array_string_unix-seconds",
	223: "optional_array_string_uri",
	224: "optional_array_string_uuid",
	225: "optional_boolean",
	226: "optional_double_array_any",
	227: "optional_double_array_boolean",
	228: "optional_double_array_integer",
	229: "optional_double_array_integer_int16",
	230: "optional_double_array_integer_int32",
	231: "optional_double_array_integer_int64",
	232: "optional_double_array_integer_int8",
	233: "optional_double_array_integer_uint",
	234: "optional_double_array_integer_uint16",
	235: "optional_double_array_integer_uint32",
	236: "optional_double_array_integer_uint64",
	237: "optional_double_array_integer_uint8",
	238: "optional_double_array_integer_unix",
	239: "optional_double_array_integer_unix-micro",
	240: "optional_double_array_integer_unix-milli",
	241: "optional_double_array_integer_unix-nano",
	242: "optional_double_array_integer_unix-seconds",
	243: "optional_double_array_null",
	244: "optional_double_array_number",
	245: "optional_double_array_number_double",
	246: "optional_double_array_number_float",
	247: "optional_double_array_number_int32",
	248: "optional_double_array_number_int64",
	249: "optional_double_array_string",
	250: "optional_double_array_string_base64",
	251: "optional_double_array_string_binary",
	252: "optional_double_array_string_byte",
	253: "optional_double_array_string_date",
	254: "optional_double_array_string_date-time",
	255: "optional_double_array_string_duration",
	256: "optional_double_array_string_email",
	257: "optional_double_array_string_float32",
	258: "optional_double_array_string_float64",
	259: "optional_double_array_string_hostname",
	260: "optional_double_array_string_int",
	261: "optional_double_array_string_int16",
	262: "optional_double_array_string_int32",
	263: "optional_double_array_string_int64",
	264: "optional_double_array_string_int8",
	265: "optional_double_array_string_ip",
	266: "optional_double_array_string_ipv4",
	267: "optional_double_array_string_ipv6",
	268: "optional_double_array_string_password",
	269: "optional_double_array_string_time",
	270: "optional_double_array_string_uint",
	271: "optional_double_array_string_uint16",
	272: "optional_double_array_string_uint32",
	273: "optional_double_array_string_uint64",
	274: "optional_double_array_string_uint8",
	275: "optional_double_array_string_unix",
	276: "optional_double_array_string_unix-micro",
	277: "optional_double_array_string_unix-milli",
	278: "optional_double_array_string_unix-nano",
	279: "optional_double_array_string_unix-seconds",
	280: "optional_double_array_string_uri",
	281: "optional_double_array_string_uuid",
	282: "optional_integer",
	283: "optional_integer_int16",
	284: "optional_integer_int32",
	285: "optional_integer_int64",
	286: "optional_integer_int8",
	287: "optional_integer_uint",
	288: "optional_integer_uint16",
	289: "optional_integer_uint32",
	290: "optional_integer_uint64",
	291: "optional_integer_uint8",
	292: "optional_integer_unix",
	293: "optional_integer_unix-micro",
	294: "optional_integer_unix-milli",
	295: "optional_integer_unix-nano",
	296: "optional_integer_unix-seconds",
	297: "optional_null",
	298: "optional_number",
	299: "optional_number_double",
	300: "optional_number_float",
	301: "optional_number_int32",
	302: "optional_number_int64",
	303: "optional_string",
	304: "optional_string_base64",
	305: "optional_string_binary",
	306: "optional_string_byte",
	307: "optional_string_date",
	308: "optional_string_date-time",
	309: "optional_string_duration",
	310: "optional_string_email",
	311: "optional_string_float32",
	312: "optional_string_float64",
	313: "optional_string_hostname",
	314: "optional_string_int",
	315: "optional_string_int16",
	316: "optional_string_int32",
	317: "optional_string_int64",
	318: "optional_string_int8",
	319: "optional_string_ip",
	320: "optional_string_ipv4",
	321: "optional_string_ipv6",
	322: "optional_string_password",
	323: "optional_string_time",
	324: "optional_string_uint",
	325: "optional_string_uint16",
	326: "optional_string_uint32",
	327: "optional_string_uint64",
	328: "optional_string_uint8",
	329: "optional_string_unix",
	330: "optional_string_unix-micro",
	331: "optional_string_unix-milli",
	332: "optional_string_unix-nano",
	333: "optional_string_unix-seconds",
	334: "optional_string_uri",
	335: "optional_string_uuid",
}

// Decode decodes TestRequestRequiredFormatTestReq from json.
func (s *TestRequestRequiredFormatTestReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TestRequestRequiredFormatTestReq to nil")
	}
	var requiredBitSet [42]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "required_any":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.RequiredAny = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_any\"")
			}
		case "required_array_any":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				s.RequiredArrayAny = make([]jx.Raw, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem jx.Raw
					v, err := d.RawAppend(nil)
					elem = jx.Raw(v)
					if err != nil {
						return err
					}
					s.RequiredArrayAny = append(s.RequiredArrayAny, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_any\"")
			}
		case "required_array_boolean":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				s.RequiredArrayBoolean = make([]bool, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem bool
					v, err := d.Bool()
					elem = bool(v)
					if err != nil {
						return err
					}
					s.RequiredArrayBoolean = append(s.RequiredArrayBoolean, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_boolean\"")
			}
		case "required_array_integer":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				s.RequiredArrayInteger = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.RequiredArrayInteger = append(s.RequiredArrayInteger, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer\"")
			}
		case "required_array_integer_int16":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				s.RequiredArrayIntegerInt16 = make([]int16, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int16
					v, err := d.Int16()
					elem = int16(v)
					if err != nil {
						return err
					}
					s.RequiredArrayIntegerInt16 = append(s.RequiredArrayIntegerInt16, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer_int16\"")
			}
		case "required_array_integer_int32":
			requiredBitSet[0] |= 1 << 5
			if err := func() error {
				s.RequiredArrayIntegerInt32 = make([]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int32
					v, err := d.Int32()
					elem = int32(v)
					if err != nil {
						return err
					}
					s.RequiredArrayIntegerInt32 = append(s.RequiredArrayIntegerInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer_int32\"")
			}
		case "required_array_integer_int64":
			requiredBitSet[0] |= 1 << 6
			if err := func() error {
				s.RequiredArrayIntegerInt64 = make([]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int64
					v, err := d.Int64()
					elem = int64(v)
					if err != nil {
						return err
					}
					s.RequiredArrayIntegerInt64 = append(s.RequiredArrayIntegerInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer_int64\"")
			}
		case "required_array_integer_int8":
			requiredBitSet[0] |= 1 << 7
			if err := func() error {
				s.RequiredArrayIntegerInt8 = make([]int8, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int8
					v, err := d.Int8()
					elem = int8(v)
					if err != nil {
						return err
					}
					s.RequiredArrayIntegerInt8 = append(s.RequiredArrayIntegerInt8, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer_int8\"")
			}
		case "required_array_integer_uint":
			requiredBitSet[1] |= 1 << 0
			if err := func() error {
				s.RequiredArrayIntegerUint = make([]uint, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint
					v, err := d.UInt()
					elem = uint(v)
					if err != nil {
						return err
					}
					s.RequiredArrayIntegerUint = append(s.RequiredArrayIntegerUint, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer_uint\"")
			}
		case "required_array_integer_uint16":
			requiredBitSet[1] |= 1 << 1
			if err := func() error {
				s.RequiredArrayIntegerUint16 = make([]uint16, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint16
					v, err := d.UInt16()
					elem = uint16(v)
					if err != nil {
						return err
					}
					s.RequiredArrayIntegerUint16 = append(s.RequiredArrayIntegerUint16, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer_uint16\"")
			}
		case "required_array_integer_uint32":
			requiredBitSet[1] |= 1 << 2
			if err := func() error {
				s.RequiredArrayIntegerUint32 = make([]uint32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint32
					v, err := d.UInt32()
					elem = uint32(v)
					if err != nil {
						return err
					}
					s.RequiredArrayIntegerUint32 = append(s.RequiredArrayIntegerUint32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer_uint32\"")
			}
		case "required_array_integer_uint64":
			requiredBitSet[1] |= 1 << 3
			if err := func() error {
				s.RequiredArrayIntegerUint64 = make([]uint64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint64
					v, err := d.UInt64()
					elem = uint64(v)
					if err != nil {
						return err
					}
					s.RequiredArrayIntegerUint64 = append(s.RequiredArrayIntegerUint64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer_uint64\"")
			}
		case "required_array_integer_uint8":
			requiredBitSet[1] |= 1 << 4
			if err := func() error {
				s.RequiredArrayIntegerUint8 = make([]uint8, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint8
					v, err := d.UInt8()
					elem = uint8(v)
					if err != nil {
						return err
					}
					s.RequiredArrayIntegerUint8 = append(s.RequiredArrayIntegerUint8, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer_uint8\"")
			}
		case "required_array_integer_unix":
			requiredBitSet[1] |= 1 << 5
			if err := func() error {
				s.RequiredArrayIntegerUnix = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeUnixSeconds(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayIntegerUnix = append(s.RequiredArrayIntegerUnix, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer_unix\"")
			}
		case "required_array_integer_unix-micro":
			requiredBitSet[1] |= 1 << 6
			if err := func() error {
				s.RequiredArrayIntegerUnixMinusMicro = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeUnixMicro(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayIntegerUnixMinusMicro = append(s.RequiredArrayIntegerUnixMinusMicro, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer_unix-micro\"")
			}
		case "required_array_integer_unix-milli":
			requiredBitSet[1] |= 1 << 7
			if err := func() error {
				s.RequiredArrayIntegerUnixMinusMilli = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeUnixMilli(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayIntegerUnixMinusMilli = append(s.RequiredArrayIntegerUnixMinusMilli, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer_unix-milli\"")
			}
		case "required_array_integer_unix-nano":
			requiredBitSet[2] |= 1 << 0
			if err := func() error {
				s.RequiredArrayIntegerUnixMinusNano = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeUnixNano(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayIntegerUnixMinusNano = append(s.RequiredArrayIntegerUnixMinusNano, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer_unix-nano\"")
			}
		case "required_array_integer_unix-seconds":
			requiredBitSet[2] |= 1 << 1
			if err := func() error {
				s.RequiredArrayIntegerUnixMinusSeconds = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeUnixSeconds(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayIntegerUnixMinusSeconds = append(s.RequiredArrayIntegerUnixMinusSeconds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer_unix-seconds\"")
			}
		case "required_array_null":
			requiredBitSet[2] |= 1 << 2
			if err := func() error {
				s.RequiredArrayNull = make([]struct{}, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem struct{}
					if err := d.Null(); err != nil {
						return err
					}
					s.RequiredArrayNull = append(s.RequiredArrayNull, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_null\"")
			}
		case "required_array_number":
			requiredBitSet[2] |= 1 << 3
			if err := func() error {
				s.RequiredArrayNumber = make([]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem float64
					v, err := d.Float64()
					elem = float64(v)
					if err != nil {
						return err
					}
					s.RequiredArrayNumber = append(s.RequiredArrayNumber, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_number\"")
			}
		case "required_array_number_double":
			requiredBitSet[2] |= 1 << 4
			if err := func() error {
				s.RequiredArrayNumberDouble = make([]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem float64
					v, err := d.Float64()
					elem = float64(v)
					if err != nil {
						return err
					}
					s.RequiredArrayNumberDouble = append(s.RequiredArrayNumberDouble, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_number_double\"")
			}
		case "required_array_number_float":
			requiredBitSet[2] |= 1 << 5
			if err := func() error {
				s.RequiredArrayNumberFloat = make([]float32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem float32
					v, err := d.Float32()
					elem = float32(v)
					if err != nil {
						return err
					}
					s.RequiredArrayNumberFloat = append(s.RequiredArrayNumberFloat, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_number_float\"")
			}
		case "required_array_number_int32":
			requiredBitSet[2] |= 1 << 6
			if err := func() error {
				s.RequiredArrayNumberInt32 = make([]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int32
					v, err := d.Int32()
					elem = int32(v)
					if err != nil {
						return err
					}
					s.RequiredArrayNumberInt32 = append(s.RequiredArrayNumberInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_number_int32\"")
			}
		case "required_array_number_int64":
			requiredBitSet[2] |= 1 << 7
			if err := func() error {
				s.RequiredArrayNumberInt64 = make([]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int64
					v, err := d.Int64()
					elem = int64(v)
					if err != nil {
						return err
					}
					s.RequiredArrayNumberInt64 = append(s.RequiredArrayNumberInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_number_int64\"")
			}
		case "required_array_string":
			requiredBitSet[3] |= 1 << 0
			if err := func() error {
				s.RequiredArrayString = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.RequiredArrayString = append(s.RequiredArrayString, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string\"")
			}
		case "required_array_string_base64":
			requiredBitSet[3] |= 1 << 1
			if err := func() error {
				s.RequiredArrayStringBase64 = make([][]byte, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []byte
					v, err := d.Base64()
					elem = []byte(v)
					if err != nil {
						return err
					}
					s.RequiredArrayStringBase64 = append(s.RequiredArrayStringBase64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_base64\"")
			}
		case "required_array_string_binary":
			requiredBitSet[3] |= 1 << 2
			if err := func() error {
				s.RequiredArrayStringBinary = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.RequiredArrayStringBinary = append(s.RequiredArrayStringBinary, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_binary\"")
			}
		case "required_array_string_byte":
			requiredBitSet[3] |= 1 << 3
			if err := func() error {
				s.RequiredArrayStringByte = make([][]byte, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []byte
					v, err := d.Base64()
					elem = []byte(v)
					if err != nil {
						return err
					}
					s.RequiredArrayStringByte = append(s.RequiredArrayStringByte, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_byte\"")
			}
		case "required_array_string_date":
			requiredBitSet[3] |= 1 << 4
			if err := func() error {
				s.RequiredArrayStringDate = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeDate(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringDate = append(s.RequiredArrayStringDate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_date\"")
			}
		case "required_array_string_date-time":
			requiredBitSet[3] |= 1 << 5
			if err := func() error {
				s.RequiredArrayStringDateMinusTime = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeDateTime(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringDateMinusTime = append(s.RequiredArrayStringDateMinusTime, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_date-time\"")
			}
		case "required_array_string_duration":
			requiredBitSet[3] |= 1 << 6
			if err := func() error {
				s.RequiredArrayStringDuration = make([]time.Duration, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Duration
					v, err := json.DecodeDuration(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringDuration = append(s.RequiredArrayStringDuration, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_duration\"")
			}
		case "required_array_string_email":
			requiredBitSet[3] |= 1 << 7
			if err := func() error {
				s.RequiredArrayStringEmail = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.RequiredArrayStringEmail = append(s.RequiredArrayStringEmail, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_email\"")
			}
		case "required_array_string_float32":
			requiredBitSet[4] |= 1 << 0
			if err := func() error {
				s.RequiredArrayStringFloat32 = make([]float32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem float32
					v, err := json.DecodeStringFloat32(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringFloat32 = append(s.RequiredArrayStringFloat32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_float32\"")
			}
		case "required_array_string_float64":
			requiredBitSet[4] |= 1 << 1
			if err := func() error {
				s.RequiredArrayStringFloat64 = make([]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem float64
					v, err := json.DecodeStringFloat64(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringFloat64 = append(s.RequiredArrayStringFloat64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_float64\"")
			}
		case "required_array_string_hostname":
			requiredBitSet[4] |= 1 << 2
			if err := func() error {
				s.RequiredArrayStringHostname = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.RequiredArrayStringHostname = append(s.RequiredArrayStringHostname, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_hostname\"")
			}
		case "required_array_string_int":
			requiredBitSet[4] |= 1 << 3
			if err := func() error {
				s.RequiredArrayStringInt = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := json.DecodeStringInt(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringInt = append(s.RequiredArrayStringInt, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_int\"")
			}
		case "required_array_string_int16":
			requiredBitSet[4] |= 1 << 4
			if err := func() error {
				s.RequiredArrayStringInt16 = make([]int16, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int16
					v, err := json.DecodeStringInt16(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringInt16 = append(s.RequiredArrayStringInt16, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_int16\"")
			}
		case "required_array_string_int32":
			requiredBitSet[4] |= 1 << 5
			if err := func() error {
				s.RequiredArrayStringInt32 = make([]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int32
					v, err := json.DecodeStringInt32(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringInt32 = append(s.RequiredArrayStringInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_int32\"")
			}
		case "required_array_string_int64":
			requiredBitSet[4] |= 1 << 6
			if err := func() error {
				s.RequiredArrayStringInt64 = make([]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int64
					v, err := json.DecodeStringInt64(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringInt64 = append(s.RequiredArrayStringInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_int64\"")
			}
		case "required_array_string_int8":
			requiredBitSet[4] |= 1 << 7
			if err := func() error {
				s.RequiredArrayStringInt8 = make([]int8, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int8
					v, err := json.DecodeStringInt8(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringInt8 = append(s.RequiredArrayStringInt8, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_int8\"")
			}
		case "required_array_string_ip":
			requiredBitSet[5] |= 1 << 0
			if err := func() error {
				s.RequiredArrayStringIP = make([]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem netip.Addr
					v, err := json.DecodeIP(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringIP = append(s.RequiredArrayStringIP, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_ip\"")
			}
		case "required_array_string_ipv4":
			requiredBitSet[5] |= 1 << 1
			if err := func() error {
				s.RequiredArrayStringIpv4 = make([]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem netip.Addr
					v, err := json.DecodeIPv4(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringIpv4 = append(s.RequiredArrayStringIpv4, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_ipv4\"")
			}
		case "required_array_string_ipv6":
			requiredBitSet[5] |= 1 << 2
			if err := func() error {
				s.RequiredArrayStringIpv6 = make([]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem netip.Addr
					v, err := json.DecodeIPv6(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringIpv6 = append(s.RequiredArrayStringIpv6, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_ipv6\"")
			}
		case "required_array_string_password":
			requiredBitSet[5] |= 1 << 3
			if err := func() error {
				s.RequiredArrayStringPassword = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.RequiredArrayStringPassword = append(s.RequiredArrayStringPassword, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_password\"")
			}
		case "required_array_string_time":
			requiredBitSet[5] |= 1 << 4
			if err := func() error {
				s.RequiredArrayStringTime = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeTime(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringTime = append(s.RequiredArrayStringTime, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_time\"")
			}
		case "required_array_string_uint":
			requiredBitSet[5] |= 1 << 5
			if err := func() error {
				s.RequiredArrayStringUint = make([]uint, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint
					v, err := json.DecodeStringUint(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringUint = append(s.RequiredArrayStringUint, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_uint\"")
			}
		case "required_array_string_uint16":
			requiredBitSet[5] |= 1 << 6
			if err := func() error {
				s.RequiredArrayStringUint16 = make([]uint16, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint16
					v, err := json.DecodeStringUint16(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringUint16 = append(s.RequiredArrayStringUint16, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_uint16\"")
			}
		case "required_array_string_uint32":
			requiredBitSet[5] |= 1 << 7
			if err := func() error {
				s.RequiredArrayStringUint32 = make([]uint32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint32
					v, err := json.DecodeStringUint32(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringUint32 = append(s.RequiredArrayStringUint32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_uint32\"")
			}
		case "required_array_string_uint64":
			requiredBitSet[6] |= 1 << 0
			if err := func() error {
				s.RequiredArrayStringUint64 = make([]uint64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint64
					v, err := json.DecodeStringUint64(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringUint64 = append(s.RequiredArrayStringUint64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_uint64\"")
			}
		case "required_array_string_uint8":
			requiredBitSet[6] |= 1 << 1
			if err := func() error {
				s.RequiredArrayStringUint8 = make([]uint8, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint8
					v, err := json.DecodeStringUint8(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringUint8 = append(s.RequiredArrayStringUint8, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_uint8\"")
			}
		case "required_array_string_unix":
			requiredBitSet[6] |= 1 << 2
			if err := func() error {
				s.RequiredArrayStringUnix = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeStringUnixSeconds(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringUnix = append(s.RequiredArrayStringUnix, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_unix\"")
			}
		case "required_array_string_unix-micro":
			requiredBitSet[6] |= 1 << 3
			if err := func() error {
				s.RequiredArrayStringUnixMinusMicro = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeStringUnixMicro(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringUnixMinusMicro = append(s.RequiredArrayStringUnixMinusMicro, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_unix-micro\"")
			}
		case "required_array_string_unix-milli":
			requiredBitSet[6] |= 1 << 4
			if err := func() error {
				s.RequiredArrayStringUnixMinusMilli = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeStringUnixMilli(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringUnixMinusMilli = append(s.RequiredArrayStringUnixMinusMilli, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_unix-milli\"")
			}
		case "required_array_string_unix-nano":
			requiredBitSet[6] |= 1 << 5
			if err := func() error {
				s.RequiredArrayStringUnixMinusNano = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeStringUnixNano(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringUnixMinusNano = append(s.RequiredArrayStringUnixMinusNano, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_unix-nano\"")
			}
		case "required_array_string_unix-seconds":
			requiredBitSet[6] |= 1 << 6
			if err := func() error {
				s.RequiredArrayStringUnixMinusSeconds = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeStringUnixSeconds(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringUnixMinusSeconds = append(s.RequiredArrayStringUnixMinusSeconds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_unix-seconds\"")
			}
		case "required_array_string_uri":
			requiredBitSet[6] |= 1 << 7
			if err := func() error {
				s.RequiredArrayStringURI = make([]url.URL, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem url.URL
					v, err := json.DecodeURI(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringURI = append(s.RequiredArrayStringURI, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_uri\"")
			}
		case "required_array_string_uuid":
			requiredBitSet[7] |= 1 << 0
			if err := func() error {
				s.RequiredArrayStringUUID = make([]uuid.UUID, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uuid.UUID
					v, err := json.DecodeUUID(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringUUID = append(s.RequiredArrayStringUUID, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_uuid\"")
			}
		case "required_boolean":
			requiredBitSet[7] |= 1 << 1
			if err := func() error {
				v, err := d.Bool()
				s.RequiredBoolean = bool(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_boolean\"")
			}
		case "required_double_array_any":
			requiredBitSet[7] |= 1 << 2
			if err := func() error {
				s.RequiredDoubleArrayAny = make([][]jx.Raw, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []jx.Raw
					elem = make([]jx.Raw, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem jx.Raw
						v, err := d.RawAppend(nil)
						elemElem = jx.Raw(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayAny = append(s.RequiredDoubleArrayAny, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_any\"")
			}
		case "required_double_array_boolean":
			requiredBitSet[7] |= 1 << 3
			if err := func() error {
				s.RequiredDoubleArrayBoolean = make([][]bool, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []bool
					elem = make([]bool, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem bool
						v, err := d.Bool()
						elemElem = bool(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayBoolean = append(s.RequiredDoubleArrayBoolean, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_boolean\"")
			}
		case "required_double_array_integer":
			requiredBitSet[7] |= 1 << 4
			if err := func() error {
				s.RequiredDoubleArrayInteger = make([][]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int
					elem = make([]int, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int
						v, err := d.Int()
						elemElem = int(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayInteger = append(s.RequiredDoubleArrayInteger, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer\"")
			}
		case "required_double_array_integer_int16":
			requiredBitSet[7] |= 1 << 5
			if err := func() error {
				s.RequiredDoubleArrayIntegerInt16 = make([][]int16, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int16
					elem = make([]int16, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int16
						v, err := d.Int16()
						elemElem = int16(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayIntegerInt16 = append(s.RequiredDoubleArrayIntegerInt16, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer_int16\"")
			}
		case "required_double_array_integer_int32":
			requiredBitSet[7] |= 1 << 6
			if err := func() error {
				s.RequiredDoubleArrayIntegerInt32 = make([][]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int32
					elem = make([]int32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int32
						v, err := d.Int32()
						elemElem = int32(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayIntegerInt32 = append(s.RequiredDoubleArrayIntegerInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer_int32\"")
			}
		case "required_double_array_integer_int64":
			requiredBitSet[7] |= 1 << 7
			if err := func() error {
				s.RequiredDoubleArrayIntegerInt64 = make([][]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int64
					elem = make([]int64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int64
						v, err := d.Int64()
						elemElem = int64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayIntegerInt64 = append(s.RequiredDoubleArrayIntegerInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer_int64\"")
			}
		case "required_double_array_integer_int8":
			requiredBitSet[8] |= 1 << 0
			if err := func() error {
				s.RequiredDoubleArrayIntegerInt8 = make([][]int8, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int8
					elem = make([]int8, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int8
						v, err := d.Int8()
						elemElem = int8(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayIntegerInt8 = append(s.RequiredDoubleArrayIntegerInt8, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer_int8\"")
			}
		case "required_double_array_integer_uint":
			requiredBitSet[8] |= 1 << 1
			if err := func() error {
				s.RequiredDoubleArrayIntegerUint = make([][]uint, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint
					elem = make([]uint, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint
						v, err := d.UInt()
						elemElem = uint(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayIntegerUint = append(s.RequiredDoubleArrayIntegerUint, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer_uint\"")
			}
		case "required_double_array_integer_uint16":
			requiredBitSet[8] |= 1 << 2
			if err := func() error {
				s.RequiredDoubleArrayIntegerUint16 = make([][]uint16, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint16
					elem = make([]uint16, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint16
						v, err := d.UInt16()
						elemElem = uint16(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayIntegerUint16 = append(s.RequiredDoubleArrayIntegerUint16, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer_uint16\"")
			}
		case "required_double_array_integer_uint32":
			requiredBitSet[8] |= 1 << 3
			if err := func() error {
				s.RequiredDoubleArrayIntegerUint32 = make([][]uint32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint32
					elem = make([]uint32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint32
						v, err := d.UInt32()
						elemElem = uint32(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayIntegerUint32 = append(s.RequiredDoubleArrayIntegerUint32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer_uint32\"")
			}
		case "required_double_array_integer_uint64":
			requiredBitSet[8] |= 1 << 4
			if err := func() error {
				s.RequiredDoubleArrayIntegerUint64 = make([][]uint64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint64
					elem = make([]uint64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint64
						v, err := d.UInt64()
						elemElem = uint64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayIntegerUint64 = append(s.RequiredDoubleArrayIntegerUint64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer_uint64\"")
			}
		case "required_double_array_integer_uint8":
			requiredBitSet[8] |= 1 << 5
			if err := func() error {
				s.RequiredDoubleArrayIntegerUint8 = make([][]uint8, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint8
					elem = make([]uint8, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint8
						v, err := d.UInt8()
						elemElem = uint8(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayIntegerUint8 = append(s.RequiredDoubleArrayIntegerUint8, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer_uint8\"")
			}
		case "required_double_array_integer_unix":
			requiredBitSet[8] |= 1 << 6
			if err := func() error {
				s.RequiredDoubleArrayIntegerUnix = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeUnixSeconds(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayIntegerUnix = append(s.RequiredDoubleArrayIntegerUnix, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer_unix\"")
			}
		case "required_double_array_integer_unix-micro":
			requiredBitSet[8] |= 1 << 7
			if err := func() error {
				s.RequiredDoubleArrayIntegerUnixMinusMicro = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeUnixMicro(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayIntegerUnixMinusMicro = append(s.RequiredDoubleArrayIntegerUnixMinusMicro, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer_unix-micro\"")
			}
		case "required_double_array_integer_unix-milli":
			requiredBitSet[9] |= 1 << 0
			if err := func() error {
				s.RequiredDoubleArrayIntegerUnixMinusMilli = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeUnixMilli(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayIntegerUnixMinusMilli = append(s.RequiredDoubleArrayIntegerUnixMinusMilli, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer_unix-milli\"")
			}
		case "required_double_array_integer_unix-nano":
			requiredBitSet[9] |= 1 << 1
			if err := func() error {
				s.RequiredDoubleArrayIntegerUnixMinusNano = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeUnixNano(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayIntegerUnixMinusNano = append(s.RequiredDoubleArrayIntegerUnixMinusNano, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer_unix-nano\"")
			}
		case "required_double_array_integer_unix-seconds":
			requiredBitSet[9] |= 1 << 2
			if err := func() error {
				s.RequiredDoubleArrayIntegerUnixMinusSeconds = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeUnixSeconds(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayIntegerUnixMinusSeconds = append(s.RequiredDoubleArrayIntegerUnixMinusSeconds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer_unix-seconds\"")
			}
		case "required_double_array_null":
			requiredBitSet[9] |= 1 << 3
			if err := func() error {
				s.RequiredDoubleArrayNull = make([][]struct{}, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []struct{}
					elem = make([]struct{}, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem struct{}
						if err := d.Null(); err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayNull = append(s.RequiredDoubleArrayNull, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_null\"")
			}
		case "required_double_array_number":
			requiredBitSet[9] |= 1 << 4
			if err := func() error {
				s.RequiredDoubleArrayNumber = make([][]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []float64
					elem = make([]float64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem float64
						v, err := d.Float64()
						elemElem = float64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayNumber = append(s.RequiredDoubleArrayNumber, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_number\"")
			}
		case "required_double_array_number_double":
			requiredBitSet[9] |= 1 << 5
			if err := func() error {
				s.RequiredDoubleArrayNumberDouble = make([][]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []float64
					elem = make([]float64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem float64
						v, err := d.Float64()
						elemElem = float64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayNumberDouble = append(s.RequiredDoubleArrayNumberDouble, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_number_double\"")
			}
		case "required_double_array_number_float":
			requiredBitSet[9] |= 1 << 6
			if err := func() error {
				s.RequiredDoubleArrayNumberFloat = make([][]float32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []float32
					elem = make([]float32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem float32
						v, err := d.Float32()
						elemElem = float32(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayNumberFloat = append(s.RequiredDoubleArrayNumberFloat, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_number_float\"")
			}
		case "required_double_array_number_int32":
			requiredBitSet[9] |= 1 << 7
			if err := func() error {
				s.RequiredDoubleArrayNumberInt32 = make([][]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int32
					elem = make([]int32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int32
						v, err := d.Int32()
						elemElem = int32(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayNumberInt32 = append(s.RequiredDoubleArrayNumberInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_number_int32\"")
			}
		case "required_double_array_number_int64":
			requiredBitSet[10] |= 1 << 0
			if err := func() error {
				s.RequiredDoubleArrayNumberInt64 = make([][]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int64
					elem = make([]int64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int64
						v, err := d.Int64()
						elemElem = int64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayNumberInt64 = append(s.RequiredDoubleArrayNumberInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_number_int64\"")
			}
		case "required_double_array_string":
			requiredBitSet[10] |= 1 << 1
			if err := func() error {
				s.RequiredDoubleArrayString = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayString = append(s.RequiredDoubleArrayString, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string\"")
			}
		case "required_double_array_string_base64":
			requiredBitSet[10] |= 1 << 2
			if err := func() error {
				s.RequiredDoubleArrayStringBase64 = make([][][]byte, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem [][]byte
					elem = make([][]byte, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem []byte
						v, err := d.Base64()
						elemElem = []byte(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringBase64 = append(s.RequiredDoubleArrayStringBase64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_base64\"")
			}
		case "required_double_array_string_binary":
			requiredBitSet[10] |= 1 << 3
			if err := func() error {
				s.RequiredDoubleArrayStringBinary = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringBinary = append(s.RequiredDoubleArrayStringBinary, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_binary\"")
			}
		case "required_double_array_string_byte":
			requiredBitSet[10] |= 1 << 4
			if err := func() error {
				s.RequiredDoubleArrayStringByte = make([][][]byte, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem [][]byte
					elem = make([][]byte, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem []byte
						v, err := d.Base64()
						elemElem = []byte(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringByte = append(s.RequiredDoubleArrayStringByte, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_byte\"")
			}
		case "required_double_array_string_date":
			requiredBitSet[10] |= 1 << 5
			if err := func() error {
				s.RequiredDoubleArrayStringDate = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeDate(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringDate = append(s.RequiredDoubleArrayStringDate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_date\"")
			}
		case "required_double_array_string_date-time":
			requiredBitSet[10] |= 1 << 6
			if err := func() error {
				s.RequiredDoubleArrayStringDateMinusTime = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeDateTime(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringDateMinusTime = append(s.RequiredDoubleArrayStringDateMinusTime, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_date-time\"")
			}
		case "required_double_array_string_duration":
			requiredBitSet[10] |= 1 << 7
			if err := func() error {
				s.RequiredDoubleArrayStringDuration = make([][]time.Duration, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Duration
					elem = make([]time.Duration, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Duration
						v, err := json.DecodeDuration(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringDuration = append(s.RequiredDoubleArrayStringDuration, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_duration\"")
			}
		case "required_double_array_string_email":
			requiredBitSet[11] |= 1 << 0
			if err := func() error {
				s.RequiredDoubleArrayStringEmail = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringEmail = append(s.RequiredDoubleArrayStringEmail, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_email\"")
			}
		case "required_double_array_string_float32":
			requiredBitSet[11] |= 1 << 1
			if err := func() error {
				s.RequiredDoubleArrayStringFloat32 = make([][]float32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []float32
					elem = make([]float32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem float32
						v, err := json.DecodeStringFloat32(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringFloat32 = append(s.RequiredDoubleArrayStringFloat32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_float32\"")
			}
		case "required_double_array_string_float64":
			requiredBitSet[11] |= 1 << 2
			if err := func() error {
				s.RequiredDoubleArrayStringFloat64 = make([][]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []float64
					elem = make([]float64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem float64
						v, err := json.DecodeStringFloat64(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringFloat64 = append(s.RequiredDoubleArrayStringFloat64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_float64\"")
			}
		case "required_double_array_string_hostname":
			requiredBitSet[11] |= 1 << 3
			if err := func() error {
				s.RequiredDoubleArrayStringHostname = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringHostname = append(s.RequiredDoubleArrayStringHostname, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_hostname\"")
			}
		case "required_double_array_string_int":
			requiredBitSet[11] |= 1 << 4
			if err := func() error {
				s.RequiredDoubleArrayStringInt = make([][]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int
					elem = make([]int, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int
						v, err := json.DecodeStringInt(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringInt = append(s.RequiredDoubleArrayStringInt, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_int\"")
			}
		case "required_double_array_string_int16":
			requiredBitSet[11] |= 1 << 5
			if err := func() error {
				s.RequiredDoubleArrayStringInt16 = make([][]int16, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int16
					elem = make([]int16, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int16
						v, err := json.DecodeStringInt16(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringInt16 = append(s.RequiredDoubleArrayStringInt16, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_int16\"")
			}
		case "required_double_array_string_int32":
			requiredBitSet[11] |= 1 << 6
			if err := func() error {
				s.RequiredDoubleArrayStringInt32 = make([][]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int32
					elem = make([]int32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int32
						v, err := json.DecodeStringInt32(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringInt32 = append(s.RequiredDoubleArrayStringInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_int32\"")
			}
		case "required_double_array_string_int64":
			requiredBitSet[11] |= 1 << 7
			if err := func() error {
				s.RequiredDoubleArrayStringInt64 = make([][]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int64
					elem = make([]int64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int64
						v, err := json.DecodeStringInt64(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringInt64 = append(s.RequiredDoubleArrayStringInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_int64\"")
			}
		case "required_double_array_string_int8":
			requiredBitSet[12] |= 1 << 0
			if err := func() error {
				s.RequiredDoubleArrayStringInt8 = make([][]int8, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int8
					elem = make([]int8, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int8
						v, err := json.DecodeStringInt8(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringInt8 = append(s.RequiredDoubleArrayStringInt8, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_int8\"")
			}
		case "required_double_array_string_ip":
			requiredBitSet[12] |= 1 << 1
			if err := func() error {
				s.RequiredDoubleArrayStringIP = make([][]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []netip.Addr
					elem = make([]netip.Addr, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem netip.Addr
						v, err := json.DecodeIP(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringIP = append(s.RequiredDoubleArrayStringIP, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_ip\"")
			}
		case "required_double_array_string_ipv4":
			requiredBitSet[12] |= 1 << 2
			if err := func() error {
				s.RequiredDoubleArrayStringIpv4 = make([][]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []netip.Addr
					elem = make([]netip.Addr, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem netip.Addr
						v, err := json.DecodeIPv4(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringIpv4 = append(s.RequiredDoubleArrayStringIpv4, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_ipv4\"")
			}
		case "required_double_array_string_ipv6":
			requiredBitSet[12] |= 1 << 3
			if err := func() error {
				s.RequiredDoubleArrayStringIpv6 = make([][]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []netip.Addr
					elem = make([]netip.Addr, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem netip.Addr
						v, err := json.DecodeIPv6(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringIpv6 = append(s.RequiredDoubleArrayStringIpv6, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_ipv6\"")
			}
		case "required_double_array_string_password":
			requiredBitSet[12] |= 1 << 4
			if err := func() error {
				s.RequiredDoubleArrayStringPassword = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringPassword = append(s.RequiredDoubleArrayStringPassword, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_password\"")
			}
		case "required_double_array_string_time":
			requiredBitSet[12] |= 1 << 5
			if err := func() error {
				s.RequiredDoubleArrayStringTime = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeTime(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringTime = append(s.RequiredDoubleArrayStringTime, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_time\"")
			}
		case "required_double_array_string_uint":
			requiredBitSet[12] |= 1 << 6
			if err := func() error {
				s.RequiredDoubleArrayStringUint = make([][]uint, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint
					elem = make([]uint, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint
						v, err := json.DecodeStringUint(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringUint = append(s.RequiredDoubleArrayStringUint, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_uint\"")
			}
		case "required_double_array_string_uint16":
			requiredBitSet[12] |= 1 << 7
			if err := func() error {
				s.RequiredDoubleArrayStringUint16 = make([][]uint16, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint16
					elem = make([]uint16, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint16
						v, err := json.DecodeStringUint16(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringUint16 = append(s.RequiredDoubleArrayStringUint16, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_uint16\"")
			}
		case "required_double_array_string_uint32":
			requiredBitSet[13] |= 1 << 0
			if err := func() error {
				s.RequiredDoubleArrayStringUint32 = make([][]uint32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint32
					elem = make([]uint32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint32
						v, err := json.DecodeStringUint32(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringUint32 = append(s.RequiredDoubleArrayStringUint32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_uint32\"")
			}
		case "required_double_array_string_uint64":
			requiredBitSet[13] |= 1 << 1
			if err := func() error {
				s.RequiredDoubleArrayStringUint64 = make([][]uint64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint64
					elem = make([]uint64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint64
						v, err := json.DecodeStringUint64(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringUint64 = append(s.RequiredDoubleArrayStringUint64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_uint64\"")
			}
		case "required_double_array_string_uint8":
			requiredBitSet[13] |= 1 << 2
			if err := func() error {
				s.RequiredDoubleArrayStringUint8 = make([][]uint8, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint8
					elem = make([]uint8, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint8
						v, err := json.DecodeStringUint8(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringUint8 = append(s.RequiredDoubleArrayStringUint8, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_uint8\"")
			}
		case "required_double_array_string_unix":
			requiredBitSet[13] |= 1 << 3
			if err := func() error {
				s.RequiredDoubleArrayStringUnix = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeStringUnixSeconds(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringUnix = append(s.RequiredDoubleArrayStringUnix, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_unix\"")
			}
		case "required_double_array_string_unix-micro":
			requiredBitSet[13] |= 1 << 4
			if err := func() error {
				s.RequiredDoubleArrayStringUnixMinusMicro = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeStringUnixMicro(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringUnixMinusMicro = append(s.RequiredDoubleArrayStringUnixMinusMicro, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_unix-micro\"")
			}
		case "required_double_array_string_unix-milli":
			requiredBitSet[13] |= 1 << 5
			if err := func() error {
				s.RequiredDoubleArrayStringUnixMinusMilli = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeStringUnixMilli(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringUnixMinusMilli = append(s.RequiredDoubleArrayStringUnixMinusMilli, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_unix-milli\"")
			}
		case "required_double_array_string_unix-nano":
			requiredBitSet[13] |= 1 << 6
			if err := func() error {
				s.RequiredDoubleArrayStringUnixMinusNano = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeStringUnixNano(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringUnixMinusNano = append(s.RequiredDoubleArrayStringUnixMinusNano, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_unix-nano\"")
			}
		case "required_double_array_string_unix-seconds":
			requiredBitSet[13] |= 1 << 7
			if err := func() error {
				s.RequiredDoubleArrayStringUnixMinusSeconds = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeStringUnixSeconds(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringUnixMinusSeconds = append(s.RequiredDoubleArrayStringUnixMinusSeconds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_unix-seconds\"")
			}
		case "required_double_array_string_uri":
			requiredBitSet[14] |= 1 << 0
			if err := func() error {
				s.RequiredDoubleArrayStringURI = make([][]url.URL, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []url.URL
					elem = make([]url.URL, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem url.URL
						v, err := json.DecodeURI(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringURI = append(s.RequiredDoubleArrayStringURI, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_uri\"")
			}
		case "required_double_array_string_uuid":
			requiredBitSet[14] |= 1 << 1
			if err := func() error {
				s.RequiredDoubleArrayStringUUID = make([][]uuid.UUID, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uuid.UUID
					elem = make([]uuid.UUID, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uuid.UUID
						v, err := json.DecodeUUID(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringUUID = append(s.RequiredDoubleArrayStringUUID, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_uuid\"")
			}
		case "required_integer":
			requiredBitSet[14] |= 1 << 2
			if err := func() error {
				v, err := d.Int()
				s.RequiredInteger = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer\"")
			}
		case "required_integer_int16":
			requiredBitSet[14] |= 1 << 3
			if err := func() error {
				v, err := d.Int16()
				s.RequiredIntegerInt16 = int16(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer_int16\"")
			}
		case "required_integer_int32":
			requiredBitSet[14] |= 1 << 4
			if err := func() error {
				v, err := d.Int32()
				s.RequiredIntegerInt32 = int32(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer_int32\"")
			}
		case "required_integer_int64":
			requiredBitSet[14] |= 1 << 5
			if err := func() error {
				v, err := d.Int64()
				s.RequiredIntegerInt64 = int64(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer_int64\"")
			}
		case "required_integer_int8":
			requiredBitSet[14] |= 1 << 6
			if err := func() error {
				v, err := d.Int8()
				s.RequiredIntegerInt8 = int8(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer_int8\"")
			}
		case "required_integer_uint":
			requiredBitSet[14] |= 1 << 7
			if err := func() error {
				v, err := d.UInt()
				s.RequiredIntegerUint = uint(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer_uint\"")
			}
		case "required_integer_uint16":
			requiredBitSet[15] |= 1 << 0
			if err := func() error {
				v, err := d.UInt16()
				s.RequiredIntegerUint16 = uint16(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer_uint16\"")
			}
		case "required_integer_uint32":
			requiredBitSet[15] |= 1 << 1
			if err := func() error {
				v, err := d.UInt32()
				s.RequiredIntegerUint32 = uint32(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer_uint32\"")
			}
		case "required_integer_uint64":
			requiredBitSet[15] |= 1 << 2
			if err := func() error {
				v, err := d.UInt64()
				s.RequiredIntegerUint64 = uint64(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer_uint64\"")
			}
		case "required_integer_uint8":
			requiredBitSet[15] |= 1 << 3
			if err := func() error {
				v, err := d.UInt8()
				s.RequiredIntegerUint8 = uint8(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer_uint8\"")
			}
		case "required_integer_unix":
			requiredBitSet[15] |= 1 << 4
			if err := func() error {
				v, err := json.DecodeUnixSeconds(d)
				s.RequiredIntegerUnix = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer_unix\"")
			}
		case "required_integer_unix-micro":
			requiredBitSet[15] |= 1 << 5
			if err := func() error {
				v, err := json.DecodeUnixMicro(d)
				s.RequiredIntegerUnixMinusMicro = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer_unix-micro\"")
			}
		case "required_integer_unix-milli":
			requiredBitSet[15] |= 1 << 6
			if err := func() error {
				v, err := json.DecodeUnixMilli(d)
				s.RequiredIntegerUnixMinusMilli = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer_unix-milli\"")
			}
		case "required_integer_unix-nano":
			requiredBitSet[15] |= 1 << 7
			if err := func() error {
				v, err := json.DecodeUnixNano(d)
				s.RequiredIntegerUnixMinusNano = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer_unix-nano\"")
			}
		case "required_integer_unix-seconds":
			requiredBitSet[16] |= 1 << 0
			if err := func() error {
				v, err := json.DecodeUnixSeconds(d)
				s.RequiredIntegerUnixMinusSeconds = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer_unix-seconds\"")
			}
		case "required_null":
			requiredBitSet[16] |= 1 << 1
			if err := func() error {
				if err := d.Null(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_null\"")
			}
		case "required_number":
			requiredBitSet[16] |= 1 << 2
			if err := func() error {
				v, err := d.Float64()
				s.RequiredNumber = float64(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_number\"")
			}
		case "required_number_double":
			requiredBitSet[16] |= 1 << 3
			if err := func() error {
				v, err := d.Float64()
				s.RequiredNumberDouble = float64(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_number_double\"")
			}
		case "required_number_float":
			requiredBitSet[16] |= 1 << 4
			if err := func() error {
				v, err := d.Float32()
				s.RequiredNumberFloat = float32(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_number_float\"")
			}
		case "required_number_int32":
			requiredBitSet[16] |= 1 << 5
			if err := func() error {
				v, err := d.Int32()
				s.RequiredNumberInt32 = int32(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_number_int32\"")
			}
		case "required_number_int64":
			requiredBitSet[16] |= 1 << 6
			if err := func() error {
				v, err := d.Int64()
				s.RequiredNumberInt64 = int64(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_number_int64\"")
			}
		case "required_string":
			requiredBitSet[16] |= 1 << 7
			if err := func() error {
				v, err := d.Str()
				s.RequiredString = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string\"")
			}
		case "required_string_base64":
			requiredBitSet[17] |= 1 << 0
			if err := func() error {
				v, err := d.Base64()
				s.RequiredStringBase64 = []byte(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_base64\"")
			}
		case "required_string_binary":
			requiredBitSet[17] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.RequiredStringBinary = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_binary\"")
			}
		case "required_string_byte":
			requiredBitSet[17] |= 1 << 2
			if err := func() error {
				v, err := d.Base64()
				s.RequiredStringByte = []byte(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_byte\"")
			}
		case "required_string_date":
			requiredBitSet[17] |= 1 << 3
			if err := func() error {
				v, err := json.DecodeDate(d)
				s.RequiredStringDate = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_date\"")
			}
		case "required_string_date-time":
			requiredBitSet[17] |= 1 << 4
			if err := func() error {
				v, err := json.DecodeDateTime(d)
				s.RequiredStringDateMinusTime = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_date-time\"")
			}
		case "required_string_duration":
			requiredBitSet[17] |= 1 << 5
			if err := func() error {
				v, err := json.DecodeDuration(d)
				s.RequiredStringDuration = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_duration\"")
			}
		case "required_string_email":
			requiredBitSet[17] |= 1 << 6
			if err := func() error {
				v, err := d.Str()
				s.RequiredStringEmail = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_email\"")
			}
		case "required_string_float32":
			requiredBitSet[17] |= 1 << 7
			if err := func() error {
				v, err := json.DecodeStringFloat32(d)
				s.RequiredStringFloat32 = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_float32\"")
			}
		case "required_string_float64":
			requiredBitSet[18] |= 1 << 0
			if err := func() error {
				v, err := json.DecodeStringFloat64(d)
				s.RequiredStringFloat64 = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_float64\"")
			}
		case "required_string_hostname":
			requiredBitSet[18] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.RequiredStringHostname = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_hostname\"")
			}
		case "required_string_int":
			requiredBitSet[18] |= 1 << 2
			if err := func() error {
				v, err := json.DecodeStringInt(d)
				s.RequiredStringInt = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_int\"")
			}
		case "required_string_int16":
			requiredBitSet[18] |= 1 << 3
			if err := func() error {
				v, err := json.DecodeStringInt16(d)
				s.RequiredStringInt16 = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_int16\"")
			}
		case "required_string_int32":
			requiredBitSet[18] |= 1 << 4
			if err := func() error {
				v, err := json.DecodeStringInt32(d)
				s.RequiredStringInt32 = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_int32\"")
			}
		case "required_string_int64":
			requiredBitSet[18] |= 1 << 5
			if err := func() error {
				v, err := json.DecodeStringInt64(d)
				s.RequiredStringInt64 = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_int64\"")
			}
		case "required_string_int8":
			requiredBitSet[18] |= 1 << 6
			if err := func() error {
				v, err := json.DecodeStringInt8(d)
				s.RequiredStringInt8 = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_int8\"")
			}
		case "required_string_ip":
			requiredBitSet[18] |= 1 << 7
			if err := func() error {
				v, err := json.DecodeIP(d)
				s.RequiredStringIP = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_ip\"")
			}
		case "required_string_ipv4":
			requiredBitSet[19] |= 1 << 0
			if err := func() error {
				v, err := json.DecodeIPv4(d)
				s.RequiredStringIpv4 = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_ipv4\"")
			}
		case "required_string_ipv6":
			requiredBitSet[19] |= 1 << 1
			if err := func() error {
				v, err := json.DecodeIPv6(d)
				s.RequiredStringIpv6 = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_ipv6\"")
			}
		case "required_string_password":
			requiredBitSet[19] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.RequiredStringPassword = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_password\"")
			}
		case "required_string_time":
			requiredBitSet[19] |= 1 << 3
			if err := func() error {
				v, err := json.DecodeTime(d)
				s.RequiredStringTime = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_time\"")
			}
		case "required_string_uint":
			requiredBitSet[19] |= 1 << 4
			if err := func() error {
				v, err := json.DecodeStringUint(d)
				s.RequiredStringUint = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_uint\"")
			}
		case "required_string_uint16":
			requiredBitSet[19] |= 1 << 5
			if err := func() error {
				v, err := json.DecodeStringUint16(d)
				s.RequiredStringUint16 = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_uint16\"")
			}
		case "required_string_uint32":
			requiredBitSet[19] |= 1 << 6
			if err := func() error {
				v, err := json.DecodeStringUint32(d)
				s.RequiredStringUint32 = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_uint32\"")
			}
		case "required_string_uint64":
			requiredBitSet[19] |= 1 << 7
			if err := func() error {
				v, err := json.DecodeStringUint64(d)
				s.RequiredStringUint64 = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_uint64\"")
			}
		case "required_string_uint8":
			requiredBitSet[20] |= 1 << 0
			if err := func() error {
				v, err := json.DecodeStringUint8(d)
				s.RequiredStringUint8 = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_uint8\"")
			}
		case "required_string_unix":
			requiredBitSet[20] |= 1 << 1
			if err := func() error {
				v, err := json.DecodeStringUnixSeconds(d)
				s.RequiredStringUnix = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_unix\"")
			}
		case "required_string_unix-micro":
			requiredBitSet[20] |= 1 << 2
			if err := func() error {
				v, err := json.DecodeStringUnixMicro(d)
				s.RequiredStringUnixMinusMicro = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_unix-micro\"")
			}
		case "required_string_unix-milli":
			requiredBitSet[20] |= 1 << 3
			if err := func() error {
				v, err := json.DecodeStringUnixMilli(d)
				s.RequiredStringUnixMinusMilli = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_unix-milli\"")
			}
		case "required_string_unix-nano":
			requiredBitSet[20] |= 1 << 4
			if err := func() error {
				v, err := json.DecodeStringUnixNano(d)
				s.RequiredStringUnixMinusNano = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_unix-nano\"")
			}
		case "required_string_unix-seconds":
			requiredBitSet[20] |= 1 << 5
			if err := func() error {
				v, err := json.DecodeStringUnixSeconds(d)
				s.RequiredStringUnixMinusSeconds = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_unix-seconds\"")
			}
		case "required_string_uri":
			requiredBitSet[20] |= 1 << 6
			if err := func() error {
				v, err := json.DecodeURI(d)
				s.RequiredStringURI = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_uri\"")
			}
		case "required_string_uuid":
			requiredBitSet[20] |= 1 << 7
			if err := func() error {
				v, err := json.DecodeUUID(d)
				s.RequiredStringUUID = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_uuid\"")
			}
		case "optional_any":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.OptionalAny = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_any\"")
			}
		case "optional_array_any":
			if err := func() error {
				s.OptionalArrayAny = make([]jx.Raw, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem jx.Raw
					v, err := d.RawAppend(nil)
					elem = jx.Raw(v)
					if err != nil {
						return err
					}
					s.OptionalArrayAny = append(s.OptionalArrayAny, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_any\"")
			}
		case "optional_array_boolean":
			if err := func() error {
				s.OptionalArrayBoolean = make([]bool, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem bool
					v, err := d.Bool()
					elem = bool(v)
					if err != nil {
						return err
					}
					s.OptionalArrayBoolean = append(s.OptionalArrayBoolean, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_boolean\"")
			}
		case "optional_array_integer":
			if err := func() error {
				s.OptionalArrayInteger = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.OptionalArrayInteger = append(s.OptionalArrayInteger, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer\"")
			}
		case "optional_array_integer_int16":
			if err := func() error {
				s.OptionalArrayIntegerInt16 = make([]int16, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int16
					v, err := d.Int16()
					elem = int16(v)
					if err != nil {
						return err
					}
					s.OptionalArrayIntegerInt16 = append(s.OptionalArrayIntegerInt16, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer_int16\"")
			}
		case "optional_array_integer_int32":
			if err := func() error {
				s.OptionalArrayIntegerInt32 = make([]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int32
					v, err := d.Int32()
					elem = int32(v)
					if err != nil {
						return err
					}
					s.OptionalArrayIntegerInt32 = append(s.OptionalArrayIntegerInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer_int32\"")
			}
		case "optional_array_integer_int64":
			if err := func() error {
				s.OptionalArrayIntegerInt64 = make([]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int64
					v, err := d.Int64()
					elem = int64(v)
					if err != nil {
						return err
					}
					s.OptionalArrayIntegerInt64 = append(s.OptionalArrayIntegerInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer_int64\"")
			}
		case "optional_array_integer_int8":
			if err := func() error {
				s.OptionalArrayIntegerInt8 = make([]int8, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int8
					v, err := d.Int8()
					elem = int8(v)
					if err != nil {
						return err
					}
					s.OptionalArrayIntegerInt8 = append(s.OptionalArrayIntegerInt8, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer_int8\"")
			}
		case "optional_array_integer_uint":
			if err := func() error {
				s.OptionalArrayIntegerUint = make([]uint, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint
					v, err := d.UInt()
					elem = uint(v)
					if err != nil {
						return err
					}
					s.OptionalArrayIntegerUint = append(s.OptionalArrayIntegerUint, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer_uint\"")
			}
		case "optional_array_integer_uint16":
			if err := func() error {
				s.OptionalArrayIntegerUint16 = make([]uint16, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint16
					v, err := d.UInt16()
					elem = uint16(v)
					if err != nil {
						return err
					}
					s.OptionalArrayIntegerUint16 = append(s.OptionalArrayIntegerUint16, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer_uint16\"")
			}
		case "optional_array_integer_uint32":
			if err := func() error {
				s.OptionalArrayIntegerUint32 = make([]uint32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint32
					v, err := d.UInt32()
					elem = uint32(v)
					if err != nil {
						return err
					}
					s.OptionalArrayIntegerUint32 = append(s.OptionalArrayIntegerUint32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer_uint32\"")
			}
		case "optional_array_integer_uint64":
			if err := func() error {
				s.OptionalArrayIntegerUint64 = make([]uint64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint64
					v, err := d.UInt64()
					elem = uint64(v)
					if err != nil {
						return err
					}
					s.OptionalArrayIntegerUint64 = append(s.OptionalArrayIntegerUint64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer_uint64\"")
			}
		case "optional_array_integer_uint8":
			if err := func() error {
				s.OptionalArrayIntegerUint8 = make([]uint8, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint8
					v, err := d.UInt8()
					elem = uint8(v)
					if err != nil {
						return err
					}
					s.OptionalArrayIntegerUint8 = append(s.OptionalArrayIntegerUint8, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer_uint8\"")
			}
		case "optional_array_integer_unix":
			if err := func() error {
				s.OptionalArrayIntegerUnix = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeUnixSeconds(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayIntegerUnix = append(s.OptionalArrayIntegerUnix, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer_unix\"")
			}
		case "optional_array_integer_unix-micro":
			if err := func() error {
				s.OptionalArrayIntegerUnixMinusMicro = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeUnixMicro(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayIntegerUnixMinusMicro = append(s.OptionalArrayIntegerUnixMinusMicro, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer_unix-micro\"")
			}
		case "optional_array_integer_unix-milli":
			if err := func() error {
				s.OptionalArrayIntegerUnixMinusMilli = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeUnixMilli(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayIntegerUnixMinusMilli = append(s.OptionalArrayIntegerUnixMinusMilli, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer_unix-milli\"")
			}
		case "optional_array_integer_unix-nano":
			if err := func() error {
				s.OptionalArrayIntegerUnixMinusNano = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeUnixNano(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayIntegerUnixMinusNano = append(s.OptionalArrayIntegerUnixMinusNano, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer_unix-nano\"")
			}
		case "optional_array_integer_unix-seconds":
			if err := func() error {
				s.OptionalArrayIntegerUnixMinusSeconds = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeUnixSeconds(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayIntegerUnixMinusSeconds = append(s.OptionalArrayIntegerUnixMinusSeconds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer_unix-seconds\"")
			}
		case "optional_array_null":
			if err := func() error {
				s.OptionalArrayNull = make([]struct{}, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem struct{}
					if err := d.Null(); err != nil {
						return err
					}
					s.OptionalArrayNull = append(s.OptionalArrayNull, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_null\"")
			}
		case "optional_array_number":
			if err := func() error {
				s.OptionalArrayNumber = make([]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem float64
					v, err := d.Float64()
					elem = float64(v)
					if err != nil {
						return err
					}
					s.OptionalArrayNumber = append(s.OptionalArrayNumber, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_number\"")
			}
		case "optional_array_number_double":
			if err := func() error {
				s.OptionalArrayNumberDouble = make([]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem float64
					v, err := d.Float64()
					elem = float64(v)
					if err != nil {
						return err
					}
					s.OptionalArrayNumberDouble = append(s.OptionalArrayNumberDouble, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_number_double\"")
			}
		case "optional_array_number_float":
			if err := func() error {
				s.OptionalArrayNumberFloat = make([]float32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem float32
					v, err := d.Float32()
					elem = float32(v)
					if err != nil {
						return err
					}
					s.OptionalArrayNumberFloat = append(s.OptionalArrayNumberFloat, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_number_float\"")
			}
		case "optional_array_number_int32":
			if err := func() error {
				s.OptionalArrayNumberInt32 = make([]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int32
					v, err := d.Int32()
					elem = int32(v)
					if err != nil {
						return err
					}
					s.OptionalArrayNumberInt32 = append(s.OptionalArrayNumberInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_number_int32\"")
			}
		case "optional_array_number_int64":
			if err := func() error {
				s.OptionalArrayNumberInt64 = make([]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int64
					v, err := d.Int64()
					elem = int64(v)
					if err != nil {
						return err
					}
					s.OptionalArrayNumberInt64 = append(s.OptionalArrayNumberInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_number_int64\"")
			}
		case "optional_array_string":
			if err := func() error {
				s.OptionalArrayString = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.OptionalArrayString = append(s.OptionalArrayString, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string\"")
			}
		case "optional_array_string_base64":
			if err := func() error {
				s.OptionalArrayStringBase64 = make([][]byte, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []byte
					v, err := d.Base64()
					elem = []byte(v)
					if err != nil {
						return err
					}
					s.OptionalArrayStringBase64 = append(s.OptionalArrayStringBase64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_base64\"")
			}
		case "optional_array_string_binary":
			if err := func() error {
				s.OptionalArrayStringBinary = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.OptionalArrayStringBinary = append(s.OptionalArrayStringBinary, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_binary\"")
			}
		case "optional_array_string_byte":
			if err := func() error {
				s.OptionalArrayStringByte = make([][]byte, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []byte
					v, err := d.Base64()
					elem = []byte(v)
					if err != nil {
						return err
					}
					s.OptionalArrayStringByte = append(s.OptionalArrayStringByte, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_byte\"")
			}
		case "optional_array_string_date":
			if err := func() error {
				s.OptionalArrayStringDate = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeDate(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringDate = append(s.OptionalArrayStringDate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_date\"")
			}
		case "optional_array_string_date-time":
			if err := func() error {
				s.OptionalArrayStringDateMinusTime = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeDateTime(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringDateMinusTime = append(s.OptionalArrayStringDateMinusTime, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_date-time\"")
			}
		case "optional_array_string_duration":
			if err := func() error {
				s.OptionalArrayStringDuration = make([]time.Duration, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Duration
					v, err := json.DecodeDuration(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringDuration = append(s.OptionalArrayStringDuration, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_duration\"")
			}
		case "optional_array_string_email":
			if err := func() error {
				s.OptionalArrayStringEmail = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.OptionalArrayStringEmail = append(s.OptionalArrayStringEmail, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_email\"")
			}
		case "optional_array_string_float32":
			if err := func() error {
				s.OptionalArrayStringFloat32 = make([]float32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem float32
					v, err := json.DecodeStringFloat32(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringFloat32 = append(s.OptionalArrayStringFloat32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_float32\"")
			}
		case "optional_array_string_float64":
			if err := func() error {
				s.OptionalArrayStringFloat64 = make([]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem float64
					v, err := json.DecodeStringFloat64(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringFloat64 = append(s.OptionalArrayStringFloat64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_float64\"")
			}
		case "optional_array_string_hostname":
			if err := func() error {
				s.OptionalArrayStringHostname = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.OptionalArrayStringHostname = append(s.OptionalArrayStringHostname, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_hostname\"")
			}
		case "optional_array_string_int":
			if err := func() error {
				s.OptionalArrayStringInt = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := json.DecodeStringInt(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringInt = append(s.OptionalArrayStringInt, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_int\"")
			}
		case "optional_array_string_int16":
			if err := func() error {
				s.OptionalArrayStringInt16 = make([]int16, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int16
					v, err := json.DecodeStringInt16(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringInt16 = append(s.OptionalArrayStringInt16, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_int16\"")
			}
		case "optional_array_string_int32":
			if err := func() error {
				s.OptionalArrayStringInt32 = make([]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int32
					v, err := json.DecodeStringInt32(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringInt32 = append(s.OptionalArrayStringInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_int32\"")
			}
		case "optional_array_string_int64":
			if err := func() error {
				s.OptionalArrayStringInt64 = make([]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int64
					v, err := json.DecodeStringInt64(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringInt64 = append(s.OptionalArrayStringInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_int64\"")
			}
		case "optional_array_string_int8":
			if err := func() error {
				s.OptionalArrayStringInt8 = make([]int8, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int8
					v, err := json.DecodeStringInt8(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringInt8 = append(s.OptionalArrayStringInt8, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_int8\"")
			}
		case "optional_array_string_ip":
			if err := func() error {
				s.OptionalArrayStringIP = make([]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem netip.Addr
					v, err := json.DecodeIP(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringIP = append(s.OptionalArrayStringIP, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_ip\"")
			}
		case "optional_array_string_ipv4":
			if err := func() error {
				s.OptionalArrayStringIpv4 = make([]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem netip.Addr
					v, err := json.DecodeIPv4(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringIpv4 = append(s.OptionalArrayStringIpv4, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_ipv4\"")
			}
		case "optional_array_string_ipv6":
			if err := func() error {
				s.OptionalArrayStringIpv6 = make([]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem netip.Addr
					v, err := json.DecodeIPv6(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringIpv6 = append(s.OptionalArrayStringIpv6, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_ipv6\"")
			}
		case "optional_array_string_password":
			if err := func() error {
				s.OptionalArrayStringPassword = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.OptionalArrayStringPassword = append(s.OptionalArrayStringPassword, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_password\"")
			}
		case "optional_array_string_time":
			if err := func() error {
				s.OptionalArrayStringTime = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeTime(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringTime = append(s.OptionalArrayStringTime, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_time\"")
			}
		case "optional_array_string_uint":
			if err := func() error {
				s.OptionalArrayStringUint = make([]uint, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint
					v, err := json.DecodeStringUint(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringUint = append(s.OptionalArrayStringUint, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_uint\"")
			}
		case "optional_array_string_uint16":
			if err := func() error {
				s.OptionalArrayStringUint16 = make([]uint16, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint16
					v, err := json.DecodeStringUint16(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringUint16 = append(s.OptionalArrayStringUint16, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_uint16\"")
			}
		case "optional_array_string_uint32":
			if err := func() error {
				s.OptionalArrayStringUint32 = make([]uint32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint32
					v, err := json.DecodeStringUint32(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringUint32 = append(s.OptionalArrayStringUint32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_uint32\"")
			}
		case "optional_array_string_uint64":
			if err := func() error {
				s.OptionalArrayStringUint64 = make([]uint64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint64
					v, err := json.DecodeStringUint64(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringUint64 = append(s.OptionalArrayStringUint64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_uint64\"")
			}
		case "optional_array_string_uint8":
			if err := func() error {
				s.OptionalArrayStringUint8 = make([]uint8, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint8
					v, err := json.DecodeStringUint8(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringUint8 = append(s.OptionalArrayStringUint8, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_uint8\"")
			}
		case "optional_array_string_unix":
			if err := func() error {
				s.OptionalArrayStringUnix = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeStringUnixSeconds(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringUnix = append(s.OptionalArrayStringUnix, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_unix\"")
			}
		case "optional_array_string_unix-micro":
			if err := func() error {
				s.OptionalArrayStringUnixMinusMicro = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeStringUnixMicro(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringUnixMinusMicro = append(s.OptionalArrayStringUnixMinusMicro, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_unix-micro\"")
			}
		case "optional_array_string_unix-milli":
			if err := func() error {
				s.OptionalArrayStringUnixMinusMilli = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeStringUnixMilli(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringUnixMinusMilli = append(s.OptionalArrayStringUnixMinusMilli, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_unix-milli\"")
			}
		case "optional_array_string_unix-nano":
			if err := func() error {
				s.OptionalArrayStringUnixMinusNano = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeStringUnixNano(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringUnixMinusNano = append(s.OptionalArrayStringUnixMinusNano, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_unix-nano\"")
			}
		case "optional_array_string_unix-seconds":
			if err := func() error {
				s.OptionalArrayStringUnixMinusSeconds = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeStringUnixSeconds(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringUnixMinusSeconds = append(s.OptionalArrayStringUnixMinusSeconds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_unix-seconds\"")
			}
		case "optional_array_string_uri":
			if err := func() error {
				s.OptionalArrayStringURI = make([]url.URL, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem url.URL
					v, err := json.DecodeURI(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringURI = append(s.OptionalArrayStringURI, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_uri\"")
			}
		case "optional_array_string_uuid":
			if err := func() error {
				s.OptionalArrayStringUUID = make([]uuid.UUID, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uuid.UUID
					v, err := json.DecodeUUID(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringUUID = append(s.OptionalArrayStringUUID, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_uuid\"")
			}
		case "optional_boolean":
			if err := func() error {
				s.OptionalBoolean.Reset()
				if err := s.OptionalBoolean.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_boolean\"")
			}
		case "optional_double_array_any":
			if err := func() error {
				s.OptionalDoubleArrayAny = make([][]jx.Raw, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []jx.Raw
					elem = make([]jx.Raw, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem jx.Raw
						v, err := d.RawAppend(nil)
						elemElem = jx.Raw(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayAny = append(s.OptionalDoubleArrayAny, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_any\"")
			}
		case "optional_double_array_boolean":
			if err := func() error {
				s.OptionalDoubleArrayBoolean = make([][]bool, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []bool
					elem = make([]bool, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem bool
						v, err := d.Bool()
						elemElem = bool(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayBoolean = append(s.OptionalDoubleArrayBoolean, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_boolean\"")
			}
		case "optional_double_array_integer":
			if err := func() error {
				s.OptionalDoubleArrayInteger = make([][]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int
					elem = make([]int, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int
						v, err := d.Int()
						elemElem = int(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayInteger = append(s.OptionalDoubleArrayInteger, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer\"")
			}
		case "optional_double_array_integer_int16":
			if err := func() error {
				s.OptionalDoubleArrayIntegerInt16 = make([][]int16, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int16
					elem = make([]int16, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int16
						v, err := d.Int16()
						elemElem = int16(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayIntegerInt16 = append(s.OptionalDoubleArrayIntegerInt16, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer_int16\"")
			}
		case "optional_double_array_integer_int32":
			if err := func() error {
				s.OptionalDoubleArrayIntegerInt32 = make([][]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int32
					elem = make([]int32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int32
						v, err := d.Int32()
						elemElem = int32(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayIntegerInt32 = append(s.OptionalDoubleArrayIntegerInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer_int32\"")
			}
		case "optional_double_array_integer_int64":
			if err := func() error {
				s.OptionalDoubleArrayIntegerInt64 = make([][]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int64
					elem = make([]int64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int64
						v, err := d.Int64()
						elemElem = int64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayIntegerInt64 = append(s.OptionalDoubleArrayIntegerInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer_int64\"")
			}
		case "optional_double_array_integer_int8":
			if err := func() error {
				s.OptionalDoubleArrayIntegerInt8 = make([][]int8, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int8
					elem = make([]int8, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int8
						v, err := d.Int8()
						elemElem = int8(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayIntegerInt8 = append(s.OptionalDoubleArrayIntegerInt8, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer_int8\"")
			}
		case "optional_double_array_integer_uint":
			if err := func() error {
				s.OptionalDoubleArrayIntegerUint = make([][]uint, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint
					elem = make([]uint, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint
						v, err := d.UInt()
						elemElem = uint(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayIntegerUint = append(s.OptionalDoubleArrayIntegerUint, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer_uint\"")
			}
		case "optional_double_array_integer_uint16":
			if err := func() error {
				s.OptionalDoubleArrayIntegerUint16 = make([][]uint16, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint16
					elem = make([]uint16, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint16
						v, err := d.UInt16()
						elemElem = uint16(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayIntegerUint16 = append(s.OptionalDoubleArrayIntegerUint16, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer_uint16\"")
			}
		case "optional_double_array_integer_uint32":
			if err := func() error {
				s.OptionalDoubleArrayIntegerUint32 = make([][]uint32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint32
					elem = make([]uint32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint32
						v, err := d.UInt32()
						elemElem = uint32(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayIntegerUint32 = append(s.OptionalDoubleArrayIntegerUint32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer_uint32\"")
			}
		case "optional_double_array_integer_uint64":
			if err := func() error {
				s.OptionalDoubleArrayIntegerUint64 = make([][]uint64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint64
					elem = make([]uint64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint64
						v, err := d.UInt64()
						elemElem = uint64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayIntegerUint64 = append(s.OptionalDoubleArrayIntegerUint64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer_uint64\"")
			}
		case "optional_double_array_integer_uint8":
			if err := func() error {
				s.OptionalDoubleArrayIntegerUint8 = make([][]uint8, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint8
					elem = make([]uint8, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint8
						v, err := d.UInt8()
						elemElem = uint8(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayIntegerUint8 = append(s.OptionalDoubleArrayIntegerUint8, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer_uint8\"")
			}
		case "optional_double_array_integer_unix":
			if err := func() error {
				s.OptionalDoubleArrayIntegerUnix = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeUnixSeconds(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayIntegerUnix = append(s.OptionalDoubleArrayIntegerUnix, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer_unix\"")
			}
		case "optional_double_array_integer_unix-micro":
			if err := func() error {
				s.OptionalDoubleArrayIntegerUnixMinusMicro = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeUnixMicro(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayIntegerUnixMinusMicro = append(s.OptionalDoubleArrayIntegerUnixMinusMicro, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer_unix-micro\"")
			}
		case "optional_double_array_integer_unix-milli":
			if err := func() error {
				s.OptionalDoubleArrayIntegerUnixMinusMilli = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeUnixMilli(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayIntegerUnixMinusMilli = append(s.OptionalDoubleArrayIntegerUnixMinusMilli, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer_unix-milli\"")
			}
		case "optional_double_array_integer_unix-nano":
			if err := func() error {
				s.OptionalDoubleArrayIntegerUnixMinusNano = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeUnixNano(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayIntegerUnixMinusNano = append(s.OptionalDoubleArrayIntegerUnixMinusNano, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer_unix-nano\"")
			}
		case "optional_double_array_integer_unix-seconds":
			if err := func() error {
				s.OptionalDoubleArrayIntegerUnixMinusSeconds = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeUnixSeconds(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayIntegerUnixMinusSeconds = append(s.OptionalDoubleArrayIntegerUnixMinusSeconds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer_unix-seconds\"")
			}
		case "optional_double_array_null":
			if err := func() error {
				s.OptionalDoubleArrayNull = make([][]struct{}, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []struct{}
					elem = make([]struct{}, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem struct{}
						if err := d.Null(); err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayNull = append(s.OptionalDoubleArrayNull, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_null\"")
			}
		case "optional_double_array_number":
			if err := func() error {
				s.OptionalDoubleArrayNumber = make([][]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []float64
					elem = make([]float64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem float64
						v, err := d.Float64()
						elemElem = float64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayNumber = append(s.OptionalDoubleArrayNumber, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_number\"")
			}
		case "optional_double_array_number_double":
			if err := func() error {
				s.OptionalDoubleArrayNumberDouble = make([][]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []float64
					elem = make([]float64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem float64
						v, err := d.Float64()
						elemElem = float64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayNumberDouble = append(s.OptionalDoubleArrayNumberDouble, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_number_double\"")
			}
		case "optional_double_array_number_float":
			if err := func() error {
				s.OptionalDoubleArrayNumberFloat = make([][]float32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []float32
					elem = make([]float32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem float32
						v, err := d.Float32()
						elemElem = float32(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayNumberFloat = append(s.OptionalDoubleArrayNumberFloat, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_number_float\"")
			}
		case "optional_double_array_number_int32":
			if err := func() error {
				s.OptionalDoubleArrayNumberInt32 = make([][]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int32
					elem = make([]int32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int32
						v, err := d.Int32()
						elemElem = int32(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayNumberInt32 = append(s.OptionalDoubleArrayNumberInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_number_int32\"")
			}
		case "optional_double_array_number_int64":
			if err := func() error {
				s.OptionalDoubleArrayNumberInt64 = make([][]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int64
					elem = make([]int64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int64
						v, err := d.Int64()
						elemElem = int64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayNumberInt64 = append(s.OptionalDoubleArrayNumberInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_number_int64\"")
			}
		case "optional_double_array_string":
			if err := func() error {
				s.OptionalDoubleArrayString = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayString = append(s.OptionalDoubleArrayString, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string\"")
			}
		case "optional_double_array_string_base64":
			if err := func() error {
				s.OptionalDoubleArrayStringBase64 = make([][][]byte, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem [][]byte
					elem = make([][]byte, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem []byte
						v, err := d.Base64()
						elemElem = []byte(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringBase64 = append(s.OptionalDoubleArrayStringBase64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_base64\"")
			}
		case "optional_double_array_string_binary":
			if err := func() error {
				s.OptionalDoubleArrayStringBinary = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringBinary = append(s.OptionalDoubleArrayStringBinary, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_binary\"")
			}
		case "optional_double_array_string_byte":
			if err := func() error {
				s.OptionalDoubleArrayStringByte = make([][][]byte, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem [][]byte
					elem = make([][]byte, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem []byte
						v, err := d.Base64()
						elemElem = []byte(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringByte = append(s.OptionalDoubleArrayStringByte, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_byte\"")
			}
		case "optional_double_array_string_date":
			if err := func() error {
				s.OptionalDoubleArrayStringDate = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeDate(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringDate = append(s.OptionalDoubleArrayStringDate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_date\"")
			}
		case "optional_double_array_string_date-time":
			if err := func() error {
				s.OptionalDoubleArrayStringDateMinusTime = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeDateTime(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringDateMinusTime = append(s.OptionalDoubleArrayStringDateMinusTime, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_date-time\"")
			}
		case "optional_double_array_string_duration":
			if err := func() error {
				s.OptionalDoubleArrayStringDuration = make([][]time.Duration, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Duration
					elem = make([]time.Duration, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Duration
						v, err := json.DecodeDuration(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringDuration = append(s.OptionalDoubleArrayStringDuration, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_duration\"")
			}
		case "optional_double_array_string_email":
			if err := func() error {
				s.OptionalDoubleArrayStringEmail = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringEmail = append(s.OptionalDoubleArrayStringEmail, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_email\"")
			}
		case "optional_double_array_string_float32":
			if err := func() error {
				s.OptionalDoubleArrayStringFloat32 = make([][]float32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []float32
					elem = make([]float32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem float32
						v, err := json.DecodeStringFloat32(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringFloat32 = append(s.OptionalDoubleArrayStringFloat32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_float32\"")
			}
		case "optional_double_array_string_float64":
			if err := func() error {
				s.OptionalDoubleArrayStringFloat64 = make([][]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []float64
					elem = make([]float64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem float64
						v, err := json.DecodeStringFloat64(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringFloat64 = append(s.OptionalDoubleArrayStringFloat64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_float64\"")
			}
		case "optional_double_array_string_hostname":
			if err := func() error {
				s.OptionalDoubleArrayStringHostname = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringHostname = append(s.OptionalDoubleArrayStringHostname, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_hostname\"")
			}
		case "optional_double_array_string_int":
			if err := func() error {
				s.OptionalDoubleArrayStringInt = make([][]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int
					elem = make([]int, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int
						v, err := json.DecodeStringInt(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringInt = append(s.OptionalDoubleArrayStringInt, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_int\"")
			}
		case "optional_double_array_string_int16":
			if err := func() error {
				s.OptionalDoubleArrayStringInt16 = make([][]int16, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int16
					elem = make([]int16, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int16
						v, err := json.DecodeStringInt16(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringInt16 = append(s.OptionalDoubleArrayStringInt16, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_int16\"")
			}
		case "optional_double_array_string_int32":
			if err := func() error {
				s.OptionalDoubleArrayStringInt32 = make([][]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int32
					elem = make([]int32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int32
						v, err := json.DecodeStringInt32(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringInt32 = append(s.OptionalDoubleArrayStringInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_int32\"")
			}
		case "optional_double_array_string_int64":
			if err := func() error {
				s.OptionalDoubleArrayStringInt64 = make([][]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int64
					elem = make([]int64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int64
						v, err := json.DecodeStringInt64(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringInt64 = append(s.OptionalDoubleArrayStringInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_int64\"")
			}
		case "optional_double_array_string_int8":
			if err := func() error {
				s.OptionalDoubleArrayStringInt8 = make([][]int8, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int8
					elem = make([]int8, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int8
						v, err := json.DecodeStringInt8(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringInt8 = append(s.OptionalDoubleArrayStringInt8, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_int8\"")
			}
		case "optional_double_array_string_ip":
			if err := func() error {
				s.OptionalDoubleArrayStringIP = make([][]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []netip.Addr
					elem = make([]netip.Addr, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem netip.Addr
						v, err := json.DecodeIP(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringIP = append(s.OptionalDoubleArrayStringIP, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_ip\"")
			}
		case "optional_double_array_string_ipv4":
			if err := func() error {
				s.OptionalDoubleArrayStringIpv4 = make([][]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []netip.Addr
					elem = make([]netip.Addr, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem netip.Addr
						v, err := json.DecodeIPv4(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringIpv4 = append(s.OptionalDoubleArrayStringIpv4, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_ipv4\"")
			}
		case "optional_double_array_string_ipv6":
			if err := func() error {
				s.OptionalDoubleArrayStringIpv6 = make([][]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []netip.Addr
					elem = make([]netip.Addr, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem netip.Addr
						v, err := json.DecodeIPv6(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringIpv6 = append(s.OptionalDoubleArrayStringIpv6, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_ipv6\"")
			}
		case "optional_double_array_string_password":
			if err := func() error {
				s.OptionalDoubleArrayStringPassword = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringPassword = append(s.OptionalDoubleArrayStringPassword, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_password\"")
			}
		case "optional_double_array_string_time":
			if err := func() error {
				s.OptionalDoubleArrayStringTime = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeTime(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringTime = append(s.OptionalDoubleArrayStringTime, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_time\"")
			}
		case "optional_double_array_string_uint":
			if err := func() error {
				s.OptionalDoubleArrayStringUint = make([][]uint, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint
					elem = make([]uint, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint
						v, err := json.DecodeStringUint(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringUint = append(s.OptionalDoubleArrayStringUint, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_uint\"")
			}
		case "optional_double_array_string_uint16":
			if err := func() error {
				s.OptionalDoubleArrayStringUint16 = make([][]uint16, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint16
					elem = make([]uint16, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint16
						v, err := json.DecodeStringUint16(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringUint16 = append(s.OptionalDoubleArrayStringUint16, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_uint16\"")
			}
		case "optional_double_array_string_uint32":
			if err := func() error {
				s.OptionalDoubleArrayStringUint32 = make([][]uint32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint32
					elem = make([]uint32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint32
						v, err := json.DecodeStringUint32(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringUint32 = append(s.OptionalDoubleArrayStringUint32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_uint32\"")
			}
		case "optional_double_array_string_uint64":
			if err := func() error {
				s.OptionalDoubleArrayStringUint64 = make([][]uint64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint64
					elem = make([]uint64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint64
						v, err := json.DecodeStringUint64(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringUint64 = append(s.OptionalDoubleArrayStringUint64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_uint64\"")
			}
		case "optional_double_array_string_uint8":
			if err := func() error {
				s.OptionalDoubleArrayStringUint8 = make([][]uint8, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint8
					elem = make([]uint8, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint8
						v, err := json.DecodeStringUint8(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringUint8 = append(s.OptionalDoubleArrayStringUint8, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_uint8\"")
			}
		case "optional_double_array_string_unix":
			if err := func() error {
				s.OptionalDoubleArrayStringUnix = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeStringUnixSeconds(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringUnix = append(s.OptionalDoubleArrayStringUnix, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_unix\"")
			}
		case "optional_double_array_string_unix-micro":
			if err := func() error {
				s.OptionalDoubleArrayStringUnixMinusMicro = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeStringUnixMicro(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringUnixMinusMicro = append(s.OptionalDoubleArrayStringUnixMinusMicro, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_unix-micro\"")
			}
		case "optional_double_array_string_unix-milli":
			if err := func() error {
				s.OptionalDoubleArrayStringUnixMinusMilli = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeStringUnixMilli(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringUnixMinusMilli = append(s.OptionalDoubleArrayStringUnixMinusMilli, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_unix-milli\"")
			}
		case "optional_double_array_string_unix-nano":
			if err := func() error {
				s.OptionalDoubleArrayStringUnixMinusNano = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeStringUnixNano(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringUnixMinusNano = append(s.OptionalDoubleArrayStringUnixMinusNano, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_unix-nano\"")
			}
		case "optional_double_array_string_unix-seconds":
			if err := func() error {
				s.OptionalDoubleArrayStringUnixMinusSeconds = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeStringUnixSeconds(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringUnixMinusSeconds = append(s.OptionalDoubleArrayStringUnixMinusSeconds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_unix-seconds\"")
			}
		case "optional_double_array_string_uri":
			if err := func() error {
				s.OptionalDoubleArrayStringURI = make([][]url.URL, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []url.URL
					elem = make([]url.URL, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem url.URL
						v, err := json.DecodeURI(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringURI = append(s.OptionalDoubleArrayStringURI, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_uri\"")
			}
		case "optional_double_array_string_uuid":
			if err := func() error {
				s.OptionalDoubleArrayStringUUID = make([][]uuid.UUID, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uuid.UUID
					elem = make([]uuid.UUID, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uuid.UUID
						v, err := json.DecodeUUID(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringUUID = append(s.OptionalDoubleArrayStringUUID, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_uuid\"")
			}
		case "optional_integer":
			if err := func() error {
				s.OptionalInteger.Reset()
				if err := s.OptionalInteger.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer\"")
			}
		case "optional_integer_int16":
			if err := func() error {
				s.OptionalIntegerInt16.Reset()
				if err := s.OptionalIntegerInt16.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer_int16\"")
			}
		case "optional_integer_int32":
			if err := func() error {
				s.OptionalIntegerInt32.Reset()
				if err := s.OptionalIntegerInt32.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer_int32\"")
			}
		case "optional_integer_int64":
			if err := func() error {
				s.OptionalIntegerInt64.Reset()
				if err := s.OptionalIntegerInt64.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer_int64\"")
			}
		case "optional_integer_int8":
			if err := func() error {
				s.OptionalIntegerInt8.Reset()
				if err := s.OptionalIntegerInt8.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer_int8\"")
			}
		case "optional_integer_uint":
			if err := func() error {
				s.OptionalIntegerUint.Reset()
				if err := s.OptionalIntegerUint.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer_uint\"")
			}
		case "optional_integer_uint16":
			if err := func() error {
				s.OptionalIntegerUint16.Reset()
				if err := s.OptionalIntegerUint16.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer_uint16\"")
			}
		case "optional_integer_uint32":
			if err := func() error {
				s.OptionalIntegerUint32.Reset()
				if err := s.OptionalIntegerUint32.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer_uint32\"")
			}
		case "optional_integer_uint64":
			if err := func() error {
				s.OptionalIntegerUint64.Reset()
				if err := s.OptionalIntegerUint64.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer_uint64\"")
			}
		case "optional_integer_uint8":
			if err := func() error {
				s.OptionalIntegerUint8.Reset()
				if err := s.OptionalIntegerUint8.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer_uint8\"")
			}
		case "optional_integer_unix":
			if err := func() error {
				s.OptionalIntegerUnix.Reset()
				if err := s.OptionalIntegerUnix.Decode(d, json.DecodeUnixSeconds); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer_unix\"")
			}
		case "optional_integer_unix-micro":
			if err := func() error {
				s.OptionalIntegerUnixMinusMicro.Reset()
				if err := s.OptionalIntegerUnixMinusMicro.Decode(d, json.DecodeUnixMicro); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer_unix-micro\"")
			}
		case "optional_integer_unix-milli":
			if err := func() error {
				s.OptionalIntegerUnixMinusMilli.Reset()
				if err := s.OptionalIntegerUnixMinusMilli.Decode(d, json.DecodeUnixMilli); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer_unix-milli\"")
			}
		case "optional_integer_unix-nano":
			if err := func() error {
				s.OptionalIntegerUnixMinusNano.Reset()
				if err := s.OptionalIntegerUnixMinusNano.Decode(d, json.DecodeUnixNano); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer_unix-nano\"")
			}
		case "optional_integer_unix-seconds":
			if err := func() error {
				s.OptionalIntegerUnixMinusSeconds.Reset()
				if err := s.OptionalIntegerUnixMinusSeconds.Decode(d, json.DecodeUnixSeconds); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer_unix-seconds\"")
			}
		case "optional_null":
			if err := func() error {
				s.OptionalNull.Reset()
				if err := s.OptionalNull.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_null\"")
			}
		case "optional_number":
			if err := func() error {
				s.OptionalNumber.Reset()
				if err := s.OptionalNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_number\"")
			}
		case "optional_number_double":
			if err := func() error {
				s.OptionalNumberDouble.Reset()
				if err := s.OptionalNumberDouble.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_number_double\"")
			}
		case "optional_number_float":
			if err := func() error {
				s.OptionalNumberFloat.Reset()
				if err := s.OptionalNumberFloat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_number_float\"")
			}
		case "optional_number_int32":
			if err := func() error {
				s.OptionalNumberInt32.Reset()
				if err := s.OptionalNumberInt32.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_number_int32\"")
			}
		case "optional_number_int64":
			if err := func() error {
				s.OptionalNumberInt64.Reset()
				if err := s.OptionalNumberInt64.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_number_int64\"")
			}
		case "optional_string":
			if err := func() error {
				s.OptionalString.Reset()
				if err := s.OptionalString.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string\"")
			}
		case "optional_string_base64":
			if err := func() error {
				v, err := d.Base64()
				s.OptionalStringBase64 = []byte(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_base64\"")
			}
		case "optional_string_binary":
			if err := func() error {
				s.OptionalStringBinary.Reset()
				if err := s.OptionalStringBinary.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_binary\"")
			}
		case "optional_string_byte":
			if err := func() error {
				v, err := d.Base64()
				s.OptionalStringByte = []byte(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_byte\"")
			}
		case "optional_string_date":
			if err := func() error {
				s.OptionalStringDate.Reset()
				if err := s.OptionalStringDate.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_date\"")
			}
		case "optional_string_date-time":
			if err := func() error {
				s.OptionalStringDateMinusTime.Reset()
				if err := s.OptionalStringDateMinusTime.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_date-time\"")
			}
		case "optional_string_duration":
			if err := func() error {
				s.OptionalStringDuration.Reset()
				if err := s.OptionalStringDuration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_duration\"")
			}
		case "optional_string_email":
			if err := func() error {
				s.OptionalStringEmail.Reset()
				if err := s.OptionalStringEmail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_email\"")
			}
		case "optional_string_float32":
			if err := func() error {
				s.OptionalStringFloat32.Reset()
				if err := s.OptionalStringFloat32.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_float32\"")
			}
		case "optional_string_float64":
			if err := func() error {
				s.OptionalStringFloat64.Reset()
				if err := s.OptionalStringFloat64.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_float64\"")
			}
		case "optional_string_hostname":
			if err := func() error {
				s.OptionalStringHostname.Reset()
				if err := s.OptionalStringHostname.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_hostname\"")
			}
		case "optional_string_int":
			if err := func() error {
				s.OptionalStringInt.Reset()
				if err := s.OptionalStringInt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_int\"")
			}
		case "optional_string_int16":
			if err := func() error {
				s.OptionalStringInt16.Reset()
				if err := s.OptionalStringInt16.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_int16\"")
			}
		case "optional_string_int32":
			if err := func() error {
				s.OptionalStringInt32.Reset()
				if err := s.OptionalStringInt32.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_int32\"")
			}
		case "optional_string_int64":
			if err := func() error {
				s.OptionalStringInt64.Reset()
				if err := s.OptionalStringInt64.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_int64\"")
			}
		case "optional_string_int8":
			if err := func() error {
				s.OptionalStringInt8.Reset()
				if err := s.OptionalStringInt8.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_int8\"")
			}
		case "optional_string_ip":
			if err := func() error {
				s.OptionalStringIP.Reset()
				if err := s.OptionalStringIP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_ip\"")
			}
		case "optional_string_ipv4":
			if err := func() error {
				s.OptionalStringIpv4.Reset()
				if err := s.OptionalStringIpv4.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_ipv4\"")
			}
		case "optional_string_ipv6":
			if err := func() error {
				s.OptionalStringIpv6.Reset()
				if err := s.OptionalStringIpv6.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_ipv6\"")
			}
		case "optional_string_password":
			if err := func() error {
				s.OptionalStringPassword.Reset()
				if err := s.OptionalStringPassword.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_password\"")
			}
		case "optional_string_time":
			if err := func() error {
				s.OptionalStringTime.Reset()
				if err := s.OptionalStringTime.Decode(d, json.DecodeTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_time\"")
			}
		case "optional_string_uint":
			if err := func() error {
				s.OptionalStringUint.Reset()
				if err := s.OptionalStringUint.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_uint\"")
			}
		case "optional_string_uint16":
			if err := func() error {
				s.OptionalStringUint16.Reset()
				if err := s.OptionalStringUint16.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_uint16\"")
			}
		case "optional_string_uint32":
			if err := func() error {
				s.OptionalStringUint32.Reset()
				if err := s.OptionalStringUint32.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_uint32\"")
			}
		case "optional_string_uint64":
			if err := func() error {
				s.OptionalStringUint64.Reset()
				if err := s.OptionalStringUint64.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_uint64\"")
			}
		case "optional_string_uint8":
			if err := func() error {
				s.OptionalStringUint8.Reset()
				if err := s.OptionalStringUint8.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_uint8\"")
			}
		case "optional_string_unix":
			if err := func() error {
				s.OptionalStringUnix.Reset()
				if err := s.OptionalStringUnix.Decode(d, json.DecodeStringUnixSeconds); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_unix\"")
			}
		case "optional_string_unix-micro":
			if err := func() error {
				s.OptionalStringUnixMinusMicro.Reset()
				if err := s.OptionalStringUnixMinusMicro.Decode(d, json.DecodeStringUnixMicro); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_unix-micro\"")
			}
		case "optional_string_unix-milli":
			if err := func() error {
				s.OptionalStringUnixMinusMilli.Reset()
				if err := s.OptionalStringUnixMinusMilli.Decode(d, json.DecodeStringUnixMilli); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_unix-milli\"")
			}
		case "optional_string_unix-nano":
			if err := func() error {
				s.OptionalStringUnixMinusNano.Reset()
				if err := s.OptionalStringUnixMinusNano.Decode(d, json.DecodeStringUnixNano); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_unix-nano\"")
			}
		case "optional_string_unix-seconds":
			if err := func() error {
				s.OptionalStringUnixMinusSeconds.Reset()
				if err := s.OptionalStringUnixMinusSeconds.Decode(d, json.DecodeStringUnixSeconds); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_unix-seconds\"")
			}
		case "optional_string_uri":
			if err := func() error {
				s.OptionalStringURI.Reset()
				if err := s.OptionalStringURI.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_uri\"")
			}
		case "optional_string_uuid":
			if err := func() error {
				s.OptionalStringUUID.Reset()
				if err := s.OptionalStringUUID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_uuid\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TestRequestRequiredFormatTestReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [42]uint8{
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfTestRequestRequiredFormatTestReq) {
					name = jsonFieldsNameOfTestRequestRequiredFormatTestReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TestRequestRequiredFormatTestReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TestRequestRequiredFormatTestReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TestResponseEmptyStructOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TestResponseEmptyStructOK) encodeFields(e *jx.Encoder) {
}

var jsonFieldsNameOfTestResponseEmptyStructOK = [0]string{}

// Decode decodes TestResponseEmptyStructOK from json.
func (s *TestResponseEmptyStructOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TestResponseEmptyStructOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
	}); err != nil {
		return errors.Wrap(err, "decode TestResponseEmptyStructOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TestResponseEmptyStructOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TestResponseEmptyStructOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TestResponseFormatTestOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TestResponseFormatTestOK) encodeFields(e *jx.Encoder) {
	{
		if len(s.RequiredAny) != 0 {
			e.FieldStart("required_any")
			e.Raw(s.RequiredAny)
		}
	}
	{
		e.FieldStart("required_array_any")
		e.ArrStart()
		for _, elem := range s.RequiredArrayAny {
			if len(elem) != 0 {
				e.Raw(elem)
			}
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_boolean")
		e.ArrStart()
		for _, elem := range s.RequiredArrayBoolean {
			e.Bool(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_integer")
		e.ArrStart()
		for _, elem := range s.RequiredArrayInteger {
			e.Int(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_integer_int16")
		e.ArrStart()
		for _, elem := range s.RequiredArrayIntegerInt16 {
			e.Int16(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_integer_int32")
		e.ArrStart()
		for _, elem := range s.RequiredArrayIntegerInt32 {
			e.Int32(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_integer_int64")
		e.ArrStart()
		for _, elem := range s.RequiredArrayIntegerInt64 {
			e.Int64(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_integer_int8")
		e.ArrStart()
		for _, elem := range s.RequiredArrayIntegerInt8 {
			e.Int8(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_integer_uint")
		e.ArrStart()
		for _, elem := range s.RequiredArrayIntegerUint {
			e.UInt(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_integer_uint16")
		e.ArrStart()
		for _, elem := range s.RequiredArrayIntegerUint16 {
			e.UInt16(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_integer_uint32")
		e.ArrStart()
		for _, elem := range s.RequiredArrayIntegerUint32 {
			e.UInt32(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_integer_uint64")
		e.ArrStart()
		for _, elem := range s.RequiredArrayIntegerUint64 {
			e.UInt64(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_integer_uint8")
		e.ArrStart()
		for _, elem := range s.RequiredArrayIntegerUint8 {
			e.UInt8(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_integer_unix")
		e.ArrStart()
		for _, elem := range s.RequiredArrayIntegerUnix {
			json.EncodeUnixSeconds(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_integer_unix-micro")
		e.ArrStart()
		for _, elem := range s.RequiredArrayIntegerUnixMinusMicro {
			json.EncodeUnixMicro(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_integer_unix-milli")
		e.ArrStart()
		for _, elem := range s.RequiredArrayIntegerUnixMinusMilli {
			json.EncodeUnixMilli(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_integer_unix-nano")
		e.ArrStart()
		for _, elem := range s.RequiredArrayIntegerUnixMinusNano {
			json.EncodeUnixNano(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_integer_unix-seconds")
		e.ArrStart()
		for _, elem := range s.RequiredArrayIntegerUnixMinusSeconds {
			json.EncodeUnixSeconds(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_null")
		e.ArrStart()
		for _, elem := range s.RequiredArrayNull {
			_ = elem
			e.Null()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_number")
		e.ArrStart()
		for _, elem := range s.RequiredArrayNumber {
			e.Float64(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_number_double")
		e.ArrStart()
		for _, elem := range s.RequiredArrayNumberDouble {
			e.Float64(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_number_float")
		e.ArrStart()
		for _, elem := range s.RequiredArrayNumberFloat {
			e.Float32(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_number_int32")
		e.ArrStart()
		for _, elem := range s.RequiredArrayNumberInt32 {
			e.Int32(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_number_int64")
		e.ArrStart()
		for _, elem := range s.RequiredArrayNumberInt64 {
			e.Int64(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string")
		e.ArrStart()
		for _, elem := range s.RequiredArrayString {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_base64")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringBase64 {
			e.Base64(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_binary")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringBinary {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_byte")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringByte {
			e.Base64(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_date")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringDate {
			json.EncodeDate(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_date-time")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringDateMinusTime {
			json.EncodeDateTime(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_duration")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringDuration {
			json.EncodeDuration(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_email")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringEmail {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_float32")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringFloat32 {
			json.EncodeStringFloat32(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_float64")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringFloat64 {
			json.EncodeStringFloat64(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_hostname")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringHostname {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_int")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringInt {
			json.EncodeStringInt(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_int16")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringInt16 {
			json.EncodeStringInt16(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_int32")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringInt32 {
			json.EncodeStringInt32(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_int64")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringInt64 {
			json.EncodeStringInt64(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_int8")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringInt8 {
			json.EncodeStringInt8(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_ip")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringIP {
			json.EncodeIP(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_ipv4")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringIpv4 {
			json.EncodeIPv4(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_ipv6")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringIpv6 {
			json.EncodeIPv6(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_password")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringPassword {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_time")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringTime {
			json.EncodeTime(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_uint")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringUint {
			json.EncodeStringUint(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_uint16")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringUint16 {
			json.EncodeStringUint16(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_uint32")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringUint32 {
			json.EncodeStringUint32(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_uint64")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringUint64 {
			json.EncodeStringUint64(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_uint8")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringUint8 {
			json.EncodeStringUint8(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_unix")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringUnix {
			json.EncodeStringUnixSeconds(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_unix-micro")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringUnixMinusMicro {
			json.EncodeStringUnixMicro(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_unix-milli")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringUnixMinusMilli {
			json.EncodeStringUnixMilli(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_unix-nano")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringUnixMinusNano {
			json.EncodeStringUnixNano(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_unix-seconds")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringUnixMinusSeconds {
			json.EncodeStringUnixSeconds(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_uri")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringURI {
			json.EncodeURI(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_array_string_uuid")
		e.ArrStart()
		for _, elem := range s.RequiredArrayStringUUID {
			json.EncodeUUID(e, elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_boolean")
		e.Bool(s.RequiredBoolean)
	}
	{
		e.FieldStart("required_double_array_any")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayAny {
			e.ArrStart()
			for _, elem := range elem {
				if len(elem) != 0 {
					e.Raw(elem)
				}
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_boolean")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayBoolean {
			e.ArrStart()
			for _, elem := range elem {
				e.Bool(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_integer")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayInteger {
			e.ArrStart()
			for _, elem := range elem {
				e.Int(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_integer_int16")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayIntegerInt16 {
			e.ArrStart()
			for _, elem := range elem {
				e.Int16(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_integer_int32")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayIntegerInt32 {
			e.ArrStart()
			for _, elem := range elem {
				e.Int32(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_integer_int64")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayIntegerInt64 {
			e.ArrStart()
			for _, elem := range elem {
				e.Int64(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_integer_int8")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayIntegerInt8 {
			e.ArrStart()
			for _, elem := range elem {
				e.Int8(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_integer_uint")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayIntegerUint {
			e.ArrStart()
			for _, elem := range elem {
				e.UInt(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_integer_uint16")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayIntegerUint16 {
			e.ArrStart()
			for _, elem := range elem {
				e.UInt16(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_integer_uint32")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayIntegerUint32 {
			e.ArrStart()
			for _, elem := range elem {
				e.UInt32(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_integer_uint64")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayIntegerUint64 {
			e.ArrStart()
			for _, elem := range elem {
				e.UInt64(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_integer_uint8")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayIntegerUint8 {
			e.ArrStart()
			for _, elem := range elem {
				e.UInt8(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_integer_unix")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayIntegerUnix {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeUnixSeconds(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_integer_unix-micro")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayIntegerUnixMinusMicro {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeUnixMicro(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_integer_unix-milli")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayIntegerUnixMinusMilli {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeUnixMilli(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_integer_unix-nano")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayIntegerUnixMinusNano {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeUnixNano(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_integer_unix-seconds")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayIntegerUnixMinusSeconds {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeUnixSeconds(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_null")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayNull {
			e.ArrStart()
			for _, elem := range elem {
				_ = elem
				e.Null()
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_number")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayNumber {
			e.ArrStart()
			for _, elem := range elem {
				e.Float64(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_number_double")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayNumberDouble {
			e.ArrStart()
			for _, elem := range elem {
				e.Float64(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_number_float")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayNumberFloat {
			e.ArrStart()
			for _, elem := range elem {
				e.Float32(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_number_int32")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayNumberInt32 {
			e.ArrStart()
			for _, elem := range elem {
				e.Int32(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_number_int64")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayNumberInt64 {
			e.ArrStart()
			for _, elem := range elem {
				e.Int64(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayString {
			e.ArrStart()
			for _, elem := range elem {
				e.Str(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_base64")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringBase64 {
			e.ArrStart()
			for _, elem := range elem {
				e.Base64(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_binary")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringBinary {
			e.ArrStart()
			for _, elem := range elem {
				e.Str(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_byte")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringByte {
			e.ArrStart()
			for _, elem := range elem {
				e.Base64(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_date")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringDate {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeDate(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_date-time")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringDateMinusTime {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeDateTime(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_duration")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringDuration {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeDuration(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_email")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringEmail {
			e.ArrStart()
			for _, elem := range elem {
				e.Str(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_float32")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringFloat32 {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringFloat32(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_float64")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringFloat64 {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringFloat64(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_hostname")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringHostname {
			e.ArrStart()
			for _, elem := range elem {
				e.Str(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_int")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringInt {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringInt(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_int16")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringInt16 {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringInt16(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_int32")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringInt32 {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringInt32(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_int64")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringInt64 {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringInt64(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_int8")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringInt8 {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringInt8(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_ip")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringIP {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeIP(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_ipv4")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringIpv4 {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeIPv4(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_ipv6")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringIpv6 {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeIPv6(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_password")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringPassword {
			e.ArrStart()
			for _, elem := range elem {
				e.Str(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_time")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringTime {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeTime(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_uint")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringUint {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringUint(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_uint16")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringUint16 {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringUint16(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_uint32")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringUint32 {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringUint32(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_uint64")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringUint64 {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringUint64(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_uint8")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringUint8 {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringUint8(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_unix")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringUnix {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringUnixSeconds(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_unix-micro")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringUnixMinusMicro {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringUnixMicro(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_unix-milli")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringUnixMinusMilli {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringUnixMilli(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_unix-nano")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringUnixMinusNano {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringUnixNano(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_unix-seconds")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringUnixMinusSeconds {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringUnixSeconds(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_uri")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringURI {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeURI(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_double_array_string_uuid")
		e.ArrStart()
		for _, elem := range s.RequiredDoubleArrayStringUUID {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeUUID(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("required_integer")
		e.Int(s.RequiredInteger)
	}
	{
		e.FieldStart("required_integer_int16")
		e.Int16(s.RequiredIntegerInt16)
	}
	{
		e.FieldStart("required_integer_int32")
		e.Int32(s.RequiredIntegerInt32)
	}
	{
		e.FieldStart("required_integer_int64")
		e.Int64(s.RequiredIntegerInt64)
	}
	{
		e.FieldStart("required_integer_int8")
		e.Int8(s.RequiredIntegerInt8)
	}
	{
		e.FieldStart("required_integer_uint")
		e.UInt(s.RequiredIntegerUint)
	}
	{
		e.FieldStart("required_integer_uint16")
		e.UInt16(s.RequiredIntegerUint16)
	}
	{
		e.FieldStart("required_integer_uint32")
		e.UInt32(s.RequiredIntegerUint32)
	}
	{
		e.FieldStart("required_integer_uint64")
		e.UInt64(s.RequiredIntegerUint64)
	}
	{
		e.FieldStart("required_integer_uint8")
		e.UInt8(s.RequiredIntegerUint8)
	}
	{
		e.FieldStart("required_integer_unix")
		json.EncodeUnixSeconds(e, s.RequiredIntegerUnix)
	}
	{
		e.FieldStart("required_integer_unix-micro")
		json.EncodeUnixMicro(e, s.RequiredIntegerUnixMinusMicro)
	}
	{
		e.FieldStart("required_integer_unix-milli")
		json.EncodeUnixMilli(e, s.RequiredIntegerUnixMinusMilli)
	}
	{
		e.FieldStart("required_integer_unix-nano")
		json.EncodeUnixNano(e, s.RequiredIntegerUnixMinusNano)
	}
	{
		e.FieldStart("required_integer_unix-seconds")
		json.EncodeUnixSeconds(e, s.RequiredIntegerUnixMinusSeconds)
	}
	{
		_ = s.RequiredNull
		e.FieldStart("required_null")
		e.Null()
	}
	{
		e.FieldStart("required_number")
		e.Float64(s.RequiredNumber)
	}
	{
		e.FieldStart("required_number_double")
		e.Float64(s.RequiredNumberDouble)
	}
	{
		e.FieldStart("required_number_float")
		e.Float32(s.RequiredNumberFloat)
	}
	{
		e.FieldStart("required_number_int32")
		e.Int32(s.RequiredNumberInt32)
	}
	{
		e.FieldStart("required_number_int64")
		e.Int64(s.RequiredNumberInt64)
	}
	{
		e.FieldStart("required_string")
		e.Str(s.RequiredString)
	}
	{
		e.FieldStart("required_string_base64")
		e.Base64(s.RequiredStringBase64)
	}
	{
		e.FieldStart("required_string_binary")
		e.Str(s.RequiredStringBinary)
	}
	{
		e.FieldStart("required_string_byte")
		e.Base64(s.RequiredStringByte)
	}
	{
		e.FieldStart("required_string_date")
		json.EncodeDate(e, s.RequiredStringDate)
	}
	{
		e.FieldStart("required_string_date-time")
		json.EncodeDateTime(e, s.RequiredStringDateMinusTime)
	}
	{
		e.FieldStart("required_string_duration")
		json.EncodeDuration(e, s.RequiredStringDuration)
	}
	{
		e.FieldStart("required_string_email")
		e.Str(s.RequiredStringEmail)
	}
	{
		e.FieldStart("required_string_float32")
		json.EncodeStringFloat32(e, s.RequiredStringFloat32)
	}
	{
		e.FieldStart("required_string_float64")
		json.EncodeStringFloat64(e, s.RequiredStringFloat64)
	}
	{
		e.FieldStart("required_string_hostname")
		e.Str(s.RequiredStringHostname)
	}
	{
		e.FieldStart("required_string_int")
		json.EncodeStringInt(e, s.RequiredStringInt)
	}
	{
		e.FieldStart("required_string_int16")
		json.EncodeStringInt16(e, s.RequiredStringInt16)
	}
	{
		e.FieldStart("required_string_int32")
		json.EncodeStringInt32(e, s.RequiredStringInt32)
	}
	{
		e.FieldStart("required_string_int64")
		json.EncodeStringInt64(e, s.RequiredStringInt64)
	}
	{
		e.FieldStart("required_string_int8")
		json.EncodeStringInt8(e, s.RequiredStringInt8)
	}
	{
		e.FieldStart("required_string_ip")
		json.EncodeIP(e, s.RequiredStringIP)
	}
	{
		e.FieldStart("required_string_ipv4")
		json.EncodeIPv4(e, s.RequiredStringIpv4)
	}
	{
		e.FieldStart("required_string_ipv6")
		json.EncodeIPv6(e, s.RequiredStringIpv6)
	}
	{
		e.FieldStart("required_string_password")
		e.Str(s.RequiredStringPassword)
	}
	{
		e.FieldStart("required_string_time")
		json.EncodeTime(e, s.RequiredStringTime)
	}
	{
		e.FieldStart("required_string_uint")
		json.EncodeStringUint(e, s.RequiredStringUint)
	}
	{
		e.FieldStart("required_string_uint16")
		json.EncodeStringUint16(e, s.RequiredStringUint16)
	}
	{
		e.FieldStart("required_string_uint32")
		json.EncodeStringUint32(e, s.RequiredStringUint32)
	}
	{
		e.FieldStart("required_string_uint64")
		json.EncodeStringUint64(e, s.RequiredStringUint64)
	}
	{
		e.FieldStart("required_string_uint8")
		json.EncodeStringUint8(e, s.RequiredStringUint8)
	}
	{
		e.FieldStart("required_string_unix")
		json.EncodeStringUnixSeconds(e, s.RequiredStringUnix)
	}
	{
		e.FieldStart("required_string_unix-micro")
		json.EncodeStringUnixMicro(e, s.RequiredStringUnixMinusMicro)
	}
	{
		e.FieldStart("required_string_unix-milli")
		json.EncodeStringUnixMilli(e, s.RequiredStringUnixMinusMilli)
	}
	{
		e.FieldStart("required_string_unix-nano")
		json.EncodeStringUnixNano(e, s.RequiredStringUnixMinusNano)
	}
	{
		e.FieldStart("required_string_unix-seconds")
		json.EncodeStringUnixSeconds(e, s.RequiredStringUnixMinusSeconds)
	}
	{
		e.FieldStart("required_string_uri")
		json.EncodeURI(e, s.RequiredStringURI)
	}
	{
		e.FieldStart("required_string_uuid")
		json.EncodeUUID(e, s.RequiredStringUUID)
	}
	{
		if len(s.OptionalAny) != 0 {
			e.FieldStart("optional_any")
			e.Raw(s.OptionalAny)
		}
	}
	{
		if s.OptionalArrayAny != nil {
			e.FieldStart("optional_array_any")
			e.ArrStart()
			for _, elem := range s.OptionalArrayAny {
				if len(elem) != 0 {
					e.Raw(elem)
				}
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayBoolean != nil {
			e.FieldStart("optional_array_boolean")
			e.ArrStart()
			for _, elem := range s.OptionalArrayBoolean {
				e.Bool(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayInteger != nil {
			e.FieldStart("optional_array_integer")
			e.ArrStart()
			for _, elem := range s.OptionalArrayInteger {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayIntegerInt16 != nil {
			e.FieldStart("optional_array_integer_int16")
			e.ArrStart()
			for _, elem := range s.OptionalArrayIntegerInt16 {
				e.Int16(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayIntegerInt32 != nil {
			e.FieldStart("optional_array_integer_int32")
			e.ArrStart()
			for _, elem := range s.OptionalArrayIntegerInt32 {
				e.Int32(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayIntegerInt64 != nil {
			e.FieldStart("optional_array_integer_int64")
			e.ArrStart()
			for _, elem := range s.OptionalArrayIntegerInt64 {
				e.Int64(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayIntegerInt8 != nil {
			e.FieldStart("optional_array_integer_int8")
			e.ArrStart()
			for _, elem := range s.OptionalArrayIntegerInt8 {
				e.Int8(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayIntegerUint != nil {
			e.FieldStart("optional_array_integer_uint")
			e.ArrStart()
			for _, elem := range s.OptionalArrayIntegerUint {
				e.UInt(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayIntegerUint16 != nil {
			e.FieldStart("optional_array_integer_uint16")
			e.ArrStart()
			for _, elem := range s.OptionalArrayIntegerUint16 {
				e.UInt16(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayIntegerUint32 != nil {
			e.FieldStart("optional_array_integer_uint32")
			e.ArrStart()
			for _, elem := range s.OptionalArrayIntegerUint32 {
				e.UInt32(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayIntegerUint64 != nil {
			e.FieldStart("optional_array_integer_uint64")
			e.ArrStart()
			for _, elem := range s.OptionalArrayIntegerUint64 {
				e.UInt64(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayIntegerUint8 != nil {
			e.FieldStart("optional_array_integer_uint8")
			e.ArrStart()
			for _, elem := range s.OptionalArrayIntegerUint8 {
				e.UInt8(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayIntegerUnix != nil {
			e.FieldStart("optional_array_integer_unix")
			e.ArrStart()
			for _, elem := range s.OptionalArrayIntegerUnix {
				json.EncodeUnixSeconds(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayIntegerUnixMinusMicro != nil {
			e.FieldStart("optional_array_integer_unix-micro")
			e.ArrStart()
			for _, elem := range s.OptionalArrayIntegerUnixMinusMicro {
				json.EncodeUnixMicro(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayIntegerUnixMinusMilli != nil {
			e.FieldStart("optional_array_integer_unix-milli")
			e.ArrStart()
			for _, elem := range s.OptionalArrayIntegerUnixMinusMilli {
				json.EncodeUnixMilli(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayIntegerUnixMinusNano != nil {
			e.FieldStart("optional_array_integer_unix-nano")
			e.ArrStart()
			for _, elem := range s.OptionalArrayIntegerUnixMinusNano {
				json.EncodeUnixNano(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayIntegerUnixMinusSeconds != nil {
			e.FieldStart("optional_array_integer_unix-seconds")
			e.ArrStart()
			for _, elem := range s.OptionalArrayIntegerUnixMinusSeconds {
				json.EncodeUnixSeconds(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayNull != nil {
			e.FieldStart("optional_array_null")
			e.ArrStart()
			for _, elem := range s.OptionalArrayNull {
				_ = elem
				e.Null()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayNumber != nil {
			e.FieldStart("optional_array_number")
			e.ArrStart()
			for _, elem := range s.OptionalArrayNumber {
				e.Float64(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayNumberDouble != nil {
			e.FieldStart("optional_array_number_double")
			e.ArrStart()
			for _, elem := range s.OptionalArrayNumberDouble {
				e.Float64(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayNumberFloat != nil {
			e.FieldStart("optional_array_number_float")
			e.ArrStart()
			for _, elem := range s.OptionalArrayNumberFloat {
				e.Float32(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayNumberInt32 != nil {
			e.FieldStart("optional_array_number_int32")
			e.ArrStart()
			for _, elem := range s.OptionalArrayNumberInt32 {
				e.Int32(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayNumberInt64 != nil {
			e.FieldStart("optional_array_number_int64")
			e.ArrStart()
			for _, elem := range s.OptionalArrayNumberInt64 {
				e.Int64(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayString != nil {
			e.FieldStart("optional_array_string")
			e.ArrStart()
			for _, elem := range s.OptionalArrayString {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringBase64 != nil {
			e.FieldStart("optional_array_string_base64")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringBase64 {
				e.Base64(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringBinary != nil {
			e.FieldStart("optional_array_string_binary")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringBinary {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringByte != nil {
			e.FieldStart("optional_array_string_byte")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringByte {
				e.Base64(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringDate != nil {
			e.FieldStart("optional_array_string_date")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringDate {
				json.EncodeDate(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringDateMinusTime != nil {
			e.FieldStart("optional_array_string_date-time")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringDateMinusTime {
				json.EncodeDateTime(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringDuration != nil {
			e.FieldStart("optional_array_string_duration")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringDuration {
				json.EncodeDuration(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringEmail != nil {
			e.FieldStart("optional_array_string_email")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringEmail {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringFloat32 != nil {
			e.FieldStart("optional_array_string_float32")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringFloat32 {
				json.EncodeStringFloat32(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringFloat64 != nil {
			e.FieldStart("optional_array_string_float64")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringFloat64 {
				json.EncodeStringFloat64(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringHostname != nil {
			e.FieldStart("optional_array_string_hostname")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringHostname {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringInt != nil {
			e.FieldStart("optional_array_string_int")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringInt {
				json.EncodeStringInt(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringInt16 != nil {
			e.FieldStart("optional_array_string_int16")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringInt16 {
				json.EncodeStringInt16(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringInt32 != nil {
			e.FieldStart("optional_array_string_int32")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringInt32 {
				json.EncodeStringInt32(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringInt64 != nil {
			e.FieldStart("optional_array_string_int64")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringInt64 {
				json.EncodeStringInt64(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringInt8 != nil {
			e.FieldStart("optional_array_string_int8")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringInt8 {
				json.EncodeStringInt8(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringIP != nil {
			e.FieldStart("optional_array_string_ip")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringIP {
				json.EncodeIP(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringIpv4 != nil {
			e.FieldStart("optional_array_string_ipv4")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringIpv4 {
				json.EncodeIPv4(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringIpv6 != nil {
			e.FieldStart("optional_array_string_ipv6")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringIpv6 {
				json.EncodeIPv6(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringPassword != nil {
			e.FieldStart("optional_array_string_password")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringPassword {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringTime != nil {
			e.FieldStart("optional_array_string_time")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringTime {
				json.EncodeTime(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringUint != nil {
			e.FieldStart("optional_array_string_uint")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringUint {
				json.EncodeStringUint(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringUint16 != nil {
			e.FieldStart("optional_array_string_uint16")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringUint16 {
				json.EncodeStringUint16(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringUint32 != nil {
			e.FieldStart("optional_array_string_uint32")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringUint32 {
				json.EncodeStringUint32(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringUint64 != nil {
			e.FieldStart("optional_array_string_uint64")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringUint64 {
				json.EncodeStringUint64(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringUint8 != nil {
			e.FieldStart("optional_array_string_uint8")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringUint8 {
				json.EncodeStringUint8(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringUnix != nil {
			e.FieldStart("optional_array_string_unix")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringUnix {
				json.EncodeStringUnixSeconds(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringUnixMinusMicro != nil {
			e.FieldStart("optional_array_string_unix-micro")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringUnixMinusMicro {
				json.EncodeStringUnixMicro(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringUnixMinusMilli != nil {
			e.FieldStart("optional_array_string_unix-milli")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringUnixMinusMilli {
				json.EncodeStringUnixMilli(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringUnixMinusNano != nil {
			e.FieldStart("optional_array_string_unix-nano")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringUnixMinusNano {
				json.EncodeStringUnixNano(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringUnixMinusSeconds != nil {
			e.FieldStart("optional_array_string_unix-seconds")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringUnixMinusSeconds {
				json.EncodeStringUnixSeconds(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringURI != nil {
			e.FieldStart("optional_array_string_uri")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringURI {
				json.EncodeURI(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalArrayStringUUID != nil {
			e.FieldStart("optional_array_string_uuid")
			e.ArrStart()
			for _, elem := range s.OptionalArrayStringUUID {
				json.EncodeUUID(e, elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalBoolean.Set {
			e.FieldStart("optional_boolean")
			s.OptionalBoolean.Encode(e)
		}
	}
	{
		if s.OptionalDoubleArrayAny != nil {
			e.FieldStart("optional_double_array_any")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayAny {
				e.ArrStart()
				for _, elem := range elem {
					if len(elem) != 0 {
						e.Raw(elem)
					}
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayBoolean != nil {
			e.FieldStart("optional_double_array_boolean")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayBoolean {
				e.ArrStart()
				for _, elem := range elem {
					e.Bool(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayInteger != nil {
			e.FieldStart("optional_double_array_integer")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayInteger {
				e.ArrStart()
				for _, elem := range elem {
					e.Int(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayIntegerInt16 != nil {
			e.FieldStart("optional_double_array_integer_int16")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayIntegerInt16 {
				e.ArrStart()
				for _, elem := range elem {
					e.Int16(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayIntegerInt32 != nil {
			e.FieldStart("optional_double_array_integer_int32")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayIntegerInt32 {
				e.ArrStart()
				for _, elem := range elem {
					e.Int32(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayIntegerInt64 != nil {
			e.FieldStart("optional_double_array_integer_int64")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayIntegerInt64 {
				e.ArrStart()
				for _, elem := range elem {
					e.Int64(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayIntegerInt8 != nil {
			e.FieldStart("optional_double_array_integer_int8")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayIntegerInt8 {
				e.ArrStart()
				for _, elem := range elem {
					e.Int8(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayIntegerUint != nil {
			e.FieldStart("optional_double_array_integer_uint")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayIntegerUint {
				e.ArrStart()
				for _, elem := range elem {
					e.UInt(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayIntegerUint16 != nil {
			e.FieldStart("optional_double_array_integer_uint16")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayIntegerUint16 {
				e.ArrStart()
				for _, elem := range elem {
					e.UInt16(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayIntegerUint32 != nil {
			e.FieldStart("optional_double_array_integer_uint32")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayIntegerUint32 {
				e.ArrStart()
				for _, elem := range elem {
					e.UInt32(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayIntegerUint64 != nil {
			e.FieldStart("optional_double_array_integer_uint64")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayIntegerUint64 {
				e.ArrStart()
				for _, elem := range elem {
					e.UInt64(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayIntegerUint8 != nil {
			e.FieldStart("optional_double_array_integer_uint8")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayIntegerUint8 {
				e.ArrStart()
				for _, elem := range elem {
					e.UInt8(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayIntegerUnix != nil {
			e.FieldStart("optional_double_array_integer_unix")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayIntegerUnix {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeUnixSeconds(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayIntegerUnixMinusMicro != nil {
			e.FieldStart("optional_double_array_integer_unix-micro")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayIntegerUnixMinusMicro {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeUnixMicro(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayIntegerUnixMinusMilli != nil {
			e.FieldStart("optional_double_array_integer_unix-milli")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayIntegerUnixMinusMilli {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeUnixMilli(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayIntegerUnixMinusNano != nil {
			e.FieldStart("optional_double_array_integer_unix-nano")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayIntegerUnixMinusNano {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeUnixNano(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayIntegerUnixMinusSeconds != nil {
			e.FieldStart("optional_double_array_integer_unix-seconds")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayIntegerUnixMinusSeconds {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeUnixSeconds(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayNull != nil {
			e.FieldStart("optional_double_array_null")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayNull {
				e.ArrStart()
				for _, elem := range elem {
					_ = elem
					e.Null()
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayNumber != nil {
			e.FieldStart("optional_double_array_number")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayNumber {
				e.ArrStart()
				for _, elem := range elem {
					e.Float64(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayNumberDouble != nil {
			e.FieldStart("optional_double_array_number_double")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayNumberDouble {
				e.ArrStart()
				for _, elem := range elem {
					e.Float64(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayNumberFloat != nil {
			e.FieldStart("optional_double_array_number_float")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayNumberFloat {
				e.ArrStart()
				for _, elem := range elem {
					e.Float32(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayNumberInt32 != nil {
			e.FieldStart("optional_double_array_number_int32")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayNumberInt32 {
				e.ArrStart()
				for _, elem := range elem {
					e.Int32(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayNumberInt64 != nil {
			e.FieldStart("optional_double_array_number_int64")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayNumberInt64 {
				e.ArrStart()
				for _, elem := range elem {
					e.Int64(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayString != nil {
			e.FieldStart("optional_double_array_string")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayString {
				e.ArrStart()
				for _, elem := range elem {
					e.Str(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringBase64 != nil {
			e.FieldStart("optional_double_array_string_base64")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringBase64 {
				e.ArrStart()
				for _, elem := range elem {
					e.Base64(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringBinary != nil {
			e.FieldStart("optional_double_array_string_binary")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringBinary {
				e.ArrStart()
				for _, elem := range elem {
					e.Str(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringByte != nil {
			e.FieldStart("optional_double_array_string_byte")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringByte {
				e.ArrStart()
				for _, elem := range elem {
					e.Base64(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringDate != nil {
			e.FieldStart("optional_double_array_string_date")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringDate {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeDate(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringDateMinusTime != nil {
			e.FieldStart("optional_double_array_string_date-time")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringDateMinusTime {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeDateTime(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringDuration != nil {
			e.FieldStart("optional_double_array_string_duration")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringDuration {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeDuration(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringEmail != nil {
			e.FieldStart("optional_double_array_string_email")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringEmail {
				e.ArrStart()
				for _, elem := range elem {
					e.Str(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringFloat32 != nil {
			e.FieldStart("optional_double_array_string_float32")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringFloat32 {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringFloat32(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringFloat64 != nil {
			e.FieldStart("optional_double_array_string_float64")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringFloat64 {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringFloat64(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringHostname != nil {
			e.FieldStart("optional_double_array_string_hostname")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringHostname {
				e.ArrStart()
				for _, elem := range elem {
					e.Str(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringInt != nil {
			e.FieldStart("optional_double_array_string_int")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringInt {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringInt(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringInt16 != nil {
			e.FieldStart("optional_double_array_string_int16")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringInt16 {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringInt16(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringInt32 != nil {
			e.FieldStart("optional_double_array_string_int32")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringInt32 {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringInt32(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringInt64 != nil {
			e.FieldStart("optional_double_array_string_int64")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringInt64 {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringInt64(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringInt8 != nil {
			e.FieldStart("optional_double_array_string_int8")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringInt8 {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringInt8(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringIP != nil {
			e.FieldStart("optional_double_array_string_ip")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringIP {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeIP(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringIpv4 != nil {
			e.FieldStart("optional_double_array_string_ipv4")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringIpv4 {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeIPv4(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringIpv6 != nil {
			e.FieldStart("optional_double_array_string_ipv6")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringIpv6 {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeIPv6(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringPassword != nil {
			e.FieldStart("optional_double_array_string_password")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringPassword {
				e.ArrStart()
				for _, elem := range elem {
					e.Str(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringTime != nil {
			e.FieldStart("optional_double_array_string_time")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringTime {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeTime(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringUint != nil {
			e.FieldStart("optional_double_array_string_uint")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringUint {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringUint(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringUint16 != nil {
			e.FieldStart("optional_double_array_string_uint16")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringUint16 {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringUint16(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringUint32 != nil {
			e.FieldStart("optional_double_array_string_uint32")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringUint32 {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringUint32(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringUint64 != nil {
			e.FieldStart("optional_double_array_string_uint64")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringUint64 {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringUint64(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringUint8 != nil {
			e.FieldStart("optional_double_array_string_uint8")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringUint8 {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringUint8(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringUnix != nil {
			e.FieldStart("optional_double_array_string_unix")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringUnix {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringUnixSeconds(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringUnixMinusMicro != nil {
			e.FieldStart("optional_double_array_string_unix-micro")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringUnixMinusMicro {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringUnixMicro(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringUnixMinusMilli != nil {
			e.FieldStart("optional_double_array_string_unix-milli")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringUnixMinusMilli {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringUnixMilli(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringUnixMinusNano != nil {
			e.FieldStart("optional_double_array_string_unix-nano")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringUnixMinusNano {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringUnixNano(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringUnixMinusSeconds != nil {
			e.FieldStart("optional_double_array_string_unix-seconds")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringUnixMinusSeconds {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringUnixSeconds(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringURI != nil {
			e.FieldStart("optional_double_array_string_uri")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringURI {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeURI(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalDoubleArrayStringUUID != nil {
			e.FieldStart("optional_double_array_string_uuid")
			e.ArrStart()
			for _, elem := range s.OptionalDoubleArrayStringUUID {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeUUID(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	{
		if s.OptionalInteger.Set {
			e.FieldStart("optional_integer")
			s.OptionalInteger.Encode(e)
		}
	}
	{
		if s.OptionalIntegerInt16.Set {
			e.FieldStart("optional_integer_int16")
			s.OptionalIntegerInt16.Encode(e)
		}
	}
	{
		if s.OptionalIntegerInt32.Set {
			e.FieldStart("optional_integer_int32")
			s.OptionalIntegerInt32.Encode(e)
		}
	}
	{
		if s.OptionalIntegerInt64.Set {
			e.FieldStart("optional_integer_int64")
			s.OptionalIntegerInt64.Encode(e)
		}
	}
	{
		if s.OptionalIntegerInt8.Set {
			e.FieldStart("optional_integer_int8")
			s.OptionalIntegerInt8.Encode(e)
		}
	}
	{
		if s.OptionalIntegerUint.Set {
			e.FieldStart("optional_integer_uint")
			s.OptionalIntegerUint.Encode(e)
		}
	}
	{
		if s.OptionalIntegerUint16.Set {
			e.FieldStart("optional_integer_uint16")
			s.OptionalIntegerUint16.Encode(e)
		}
	}
	{
		if s.OptionalIntegerUint32.Set {
			e.FieldStart("optional_integer_uint32")
			s.OptionalIntegerUint32.Encode(e)
		}
	}
	{
		if s.OptionalIntegerUint64.Set {
			e.FieldStart("optional_integer_uint64")
			s.OptionalIntegerUint64.Encode(e)
		}
	}
	{
		if s.OptionalIntegerUint8.Set {
			e.FieldStart("optional_integer_uint8")
			s.OptionalIntegerUint8.Encode(e)
		}
	}
	{
		if s.OptionalIntegerUnix.Set {
			e.FieldStart("optional_integer_unix")
			s.OptionalIntegerUnix.Encode(e, json.EncodeUnixSeconds)
		}
	}
	{
		if s.OptionalIntegerUnixMinusMicro.Set {
			e.FieldStart("optional_integer_unix-micro")
			s.OptionalIntegerUnixMinusMicro.Encode(e, json.EncodeUnixMicro)
		}
	}
	{
		if s.OptionalIntegerUnixMinusMilli.Set {
			e.FieldStart("optional_integer_unix-milli")
			s.OptionalIntegerUnixMinusMilli.Encode(e, json.EncodeUnixMilli)
		}
	}
	{
		if s.OptionalIntegerUnixMinusNano.Set {
			e.FieldStart("optional_integer_unix-nano")
			s.OptionalIntegerUnixMinusNano.Encode(e, json.EncodeUnixNano)
		}
	}
	{
		if s.OptionalIntegerUnixMinusSeconds.Set {
			e.FieldStart("optional_integer_unix-seconds")
			s.OptionalIntegerUnixMinusSeconds.Encode(e, json.EncodeUnixSeconds)
		}
	}
	{
		if s.OptionalNull.Set {
			e.FieldStart("optional_null")
			s.OptionalNull.Encode(e)
		}
	}
	{
		if s.OptionalNumber.Set {
			e.FieldStart("optional_number")
			s.OptionalNumber.Encode(e)
		}
	}
	{
		if s.OptionalNumberDouble.Set {
			e.FieldStart("optional_number_double")
			s.OptionalNumberDouble.Encode(e)
		}
	}
	{
		if s.OptionalNumberFloat.Set {
			e.FieldStart("optional_number_float")
			s.OptionalNumberFloat.Encode(e)
		}
	}
	{
		if s.OptionalNumberInt32.Set {
			e.FieldStart("optional_number_int32")
			s.OptionalNumberInt32.Encode(e)
		}
	}
	{
		if s.OptionalNumberInt64.Set {
			e.FieldStart("optional_number_int64")
			s.OptionalNumberInt64.Encode(e)
		}
	}
	{
		if s.OptionalString.Set {
			e.FieldStart("optional_string")
			s.OptionalString.Encode(e)
		}
	}
	{
		e.FieldStart("optional_string_base64")
		e.Base64(s.OptionalStringBase64)
	}
	{
		if s.OptionalStringBinary.Set {
			e.FieldStart("optional_string_binary")
			s.OptionalStringBinary.Encode(e)
		}
	}
	{
		e.FieldStart("optional_string_byte")
		e.Base64(s.OptionalStringByte)
	}
	{
		if s.OptionalStringDate.Set {
			e.FieldStart("optional_string_date")
			s.OptionalStringDate.Encode(e, json.EncodeDate)
		}
	}
	{
		if s.OptionalStringDateMinusTime.Set {
			e.FieldStart("optional_string_date-time")
			s.OptionalStringDateMinusTime.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.OptionalStringDuration.Set {
			e.FieldStart("optional_string_duration")
			s.OptionalStringDuration.Encode(e)
		}
	}
	{
		if s.OptionalStringEmail.Set {
			e.FieldStart("optional_string_email")
			s.OptionalStringEmail.Encode(e)
		}
	}
	{
		if s.OptionalStringFloat32.Set {
			e.FieldStart("optional_string_float32")
			s.OptionalStringFloat32.Encode(e)
		}
	}
	{
		if s.OptionalStringFloat64.Set {
			e.FieldStart("optional_string_float64")
			s.OptionalStringFloat64.Encode(e)
		}
	}
	{
		if s.OptionalStringHostname.Set {
			e.FieldStart("optional_string_hostname")
			s.OptionalStringHostname.Encode(e)
		}
	}
	{
		if s.OptionalStringInt.Set {
			e.FieldStart("optional_string_int")
			s.OptionalStringInt.Encode(e)
		}
	}
	{
		if s.OptionalStringInt16.Set {
			e.FieldStart("optional_string_int16")
			s.OptionalStringInt16.Encode(e)
		}
	}
	{
		if s.OptionalStringInt32.Set {
			e.FieldStart("optional_string_int32")
			s.OptionalStringInt32.Encode(e)
		}
	}
	{
		if s.OptionalStringInt64.Set {
			e.FieldStart("optional_string_int64")
			s.OptionalStringInt64.Encode(e)
		}
	}
	{
		if s.OptionalStringInt8.Set {
			e.FieldStart("optional_string_int8")
			s.OptionalStringInt8.Encode(e)
		}
	}
	{
		if s.OptionalStringIP.Set {
			e.FieldStart("optional_string_ip")
			s.OptionalStringIP.Encode(e)
		}
	}
	{
		if s.OptionalStringIpv4.Set {
			e.FieldStart("optional_string_ipv4")
			s.OptionalStringIpv4.Encode(e)
		}
	}
	{
		if s.OptionalStringIpv6.Set {
			e.FieldStart("optional_string_ipv6")
			s.OptionalStringIpv6.Encode(e)
		}
	}
	{
		if s.OptionalStringPassword.Set {
			e.FieldStart("optional_string_password")
			s.OptionalStringPassword.Encode(e)
		}
	}
	{
		if s.OptionalStringTime.Set {
			e.FieldStart("optional_string_time")
			s.OptionalStringTime.Encode(e, json.EncodeTime)
		}
	}
	{
		if s.OptionalStringUint.Set {
			e.FieldStart("optional_string_uint")
			s.OptionalStringUint.Encode(e)
		}
	}
	{
		if s.OptionalStringUint16.Set {
			e.FieldStart("optional_string_uint16")
			s.OptionalStringUint16.Encode(e)
		}
	}
	{
		if s.OptionalStringUint32.Set {
			e.FieldStart("optional_string_uint32")
			s.OptionalStringUint32.Encode(e)
		}
	}
	{
		if s.OptionalStringUint64.Set {
			e.FieldStart("optional_string_uint64")
			s.OptionalStringUint64.Encode(e)
		}
	}
	{
		if s.OptionalStringUint8.Set {
			e.FieldStart("optional_string_uint8")
			s.OptionalStringUint8.Encode(e)
		}
	}
	{
		if s.OptionalStringUnix.Set {
			e.FieldStart("optional_string_unix")
			s.OptionalStringUnix.Encode(e, json.EncodeStringUnixSeconds)
		}
	}
	{
		if s.OptionalStringUnixMinusMicro.Set {
			e.FieldStart("optional_string_unix-micro")
			s.OptionalStringUnixMinusMicro.Encode(e, json.EncodeStringUnixMicro)
		}
	}
	{
		if s.OptionalStringUnixMinusMilli.Set {
			e.FieldStart("optional_string_unix-milli")
			s.OptionalStringUnixMinusMilli.Encode(e, json.EncodeStringUnixMilli)
		}
	}
	{
		if s.OptionalStringUnixMinusNano.Set {
			e.FieldStart("optional_string_unix-nano")
			s.OptionalStringUnixMinusNano.Encode(e, json.EncodeStringUnixNano)
		}
	}
	{
		if s.OptionalStringUnixMinusSeconds.Set {
			e.FieldStart("optional_string_unix-seconds")
			s.OptionalStringUnixMinusSeconds.Encode(e, json.EncodeStringUnixSeconds)
		}
	}
	{
		if s.OptionalStringURI.Set {
			e.FieldStart("optional_string_uri")
			s.OptionalStringURI.Encode(e)
		}
	}
	{
		if s.OptionalStringUUID.Set {
			e.FieldStart("optional_string_uuid")
			s.OptionalStringUUID.Encode(e)
		}
	}
}

var jsonFieldsNameOfTestResponseFormatTestOK = [336]string{
	0:   "required_any",
	1:   "required_array_any",
	2:   "required_array_boolean",
	3:   "required_array_integer",
	4:   "required_array_integer_int16",
	5:   "required_array_integer_int32",
	6:   "required_array_integer_int64",
	7:   "required_array_integer_int8",
	8:   "required_array_integer_uint",
	9:   "required_array_integer_uint16",
	10:  "required_array_integer_uint32",
	11:  "required_array_integer_uint64",
	12:  "required_array_integer_uint8",
	13:  "required_array_integer_unix",
	14:  "required_array_integer_unix-micro",
	15:  "required_array_integer_unix-milli",
	16:  "required_array_integer_unix-nano",
	17:  "required_array_integer_unix-seconds",
	18:  "required_array_null",
	19:  "required_array_number",
	20:  "required_array_number_double",
	21:  "required_array_number_float",
	22:  "required_array_number_int32",
	23:  "required_array_number_int64",
	24:  "required_array_string",
	25:  "required_array_string_base64",
	26:  "required_array_string_binary",
	27:  "required_array_string_byte",
	28:  "required_array_string_date",
	29:  "required_array_string_date-time",
	30:  "required_array_string_duration",
	31:  "required_array_string_email",
	32:  "required_array_string_float32",
	33:  "required_array_string_float64",
	34:  "required_array_string_hostname",
	35:  "required_array_string_int",
	36:  "required_array_string_int16",
	37:  "required_array_string_int32",
	38:  "required_array_string_int64",
	39:  "required_array_string_int8",
	40:  "required_array_string_ip",
	41:  "required_array_string_ipv4",
	42:  "required_array_string_ipv6",
	43:  "required_array_string_password",
	44:  "required_array_string_time",
	45:  "required_array_string_uint",
	46:  "required_array_string_uint16",
	47:  "required_array_string_uint32",
	48:  "required_array_string_uint64",
	49:  "required_array_string_uint8",
	50:  "required_array_string_unix",
	51:  "required_array_string_unix-micro",
	52:  "required_array_string_unix-milli",
	53:  "required_array_string_unix-nano",
	54:  "required_array_string_unix-seconds",
	55:  "required_array_string_uri",
	56:  "required_array_string_uuid",
	57:  "required_boolean",
	58:  "required_double_array_any",
	59:  "required_double_array_boolean",
	60:  "required_double_array_integer",
	61:  "required_double_array_integer_int16",
	62:  "required_double_array_integer_int32",
	63:  "required_double_array_integer_int64",
	64:  "required_double_array_integer_int8",
	65:  "required_double_array_integer_uint",
	66:  "required_double_array_integer_uint16",
	67:  "required_double_array_integer_uint32",
	68:  "required_double_array_integer_uint64",
	69:  "required_double_array_integer_uint8",
	70:  "required_double_array_integer_unix",
	71:  "required_double_array_integer_unix-micro",
	72:  "required_double_array_integer_unix-milli",
	73:  "required_double_array_integer_unix-nano",
	74:  "required_double_array_integer_unix-seconds",
	75:  "required_double_array_null",
	76:  "required_double_array_number",
	77:  "required_double_array_number_double",
	78:  "required_double_array_number_float",
	79:  "required_double_array_number_int32",
	80:  "required_double_array_number_int64",
	81:  "required_double_array_string",
	82:  "required_double_array_string_base64",
	83:  "required_double_array_string_binary",
	84:  "required_double_array_string_byte",
	85:  "required_double_array_string_date",
	86:  "required_double_array_string_date-time",
	87:  "required_double_array_string_duration",
	88:  "required_double_array_string_email",
	89:  "required_double_array_string_float32",
	90:  "required_double_array_string_float64",
	91:  "required_double_array_string_hostname",
	92:  "required_double_array_string_int",
	93:  "required_double_array_string_int16",
	94:  "required_double_array_string_int32",
	95:  "required_double_array_string_int64",
	96:  "required_double_array_string_int8",
	97:  "required_double_array_string_ip",
	98:  "required_double_array_string_ipv4",
	99:  "required_double_array_string_ipv6",
	100: "required_double_array_string_password",
	101: "required_double_array_string_time",
	102: "required_double_array_string_uint",
	103: "required_double_array_string_uint16",
	104: "required_double_array_string_uint32",
	105: "required_double_array_string_uint64",
	106: "required_double_array_string_uint8",
	107: "required_double_array_string_unix",
	108: "required_double_array_string_unix-micro",
	109: "required_double_array_string_unix-milli",
	110: "required_double_array_string_unix-nano",
	111: "required_double_array_string_unix-seconds",
	112: "required_double_array_string_uri",
	113: "required_double_array_string_uuid",
	114: "required_integer",
	115: "required_integer_int16",
	116: "required_integer_int32",
	117: "required_integer_int64",
	118: "required_integer_int8",
	119: "required_integer_uint",
	120: "required_integer_uint16",
	121: "required_integer_uint32",
	122: "required_integer_uint64",
	123: "required_integer_uint8",
	124: "required_integer_unix",
	125: "required_integer_unix-micro",
	126: "required_integer_unix-milli",
	127: "required_integer_unix-nano",
	128: "required_integer_unix-seconds",
	129: "required_null",
	130: "required_number",
	131: "required_number_double",
	132: "required_number_float",
	133: "required_number_int32",
	134: "required_number_int64",
	135: "required_string",
	136: "required_string_base64",
	137: "required_string_binary",
	138: "required_string_byte",
	139: "required_string_date",
	140: "required_string_date-time",
	141: "required_string_duration",
	142: "required_string_email",
	143: "required_string_float32",
	144: "required_string_float64",
	145: "required_string_hostname",
	146: "required_string_int",
	147: "required_string_int16",
	148: "required_string_int32",
	149: "required_string_int64",
	150: "required_string_int8",
	151: "required_string_ip",
	152: "required_string_ipv4",
	153: "required_string_ipv6",
	154: "required_string_password",
	155: "required_string_time",
	156: "required_string_uint",
	157: "required_string_uint16",
	158: "required_string_uint32",
	159: "required_string_uint64",
	160: "required_string_uint8",
	161: "required_string_unix",
	162: "required_string_unix-micro",
	163: "required_string_unix-milli",
	164: "required_string_unix-nano",
	165: "required_string_unix-seconds",
	166: "required_string_uri",
	167: "required_string_uuid",
	168: "optional_any",
	169: "optional_array_any",
	170: "optional_array_boolean",
	171: "optional_array_integer",
	172: "optional_array_integer_int16",
	173: "optional_array_integer_int32",
	174: "optional_array_integer_int64",
	175: "optional_array_integer_int8",
	176: "optional_array_integer_uint",
	177: "optional_array_integer_uint16",
	178: "optional_array_integer_uint32",
	179: "optional_array_integer_uint64",
	180: "optional_array_integer_uint8",
	181: "optional_array_integer_unix",
	182: "optional_array_integer_unix-micro",
	183: "optional_array_integer_unix-milli",
	184: "optional_array_integer_unix-nano",
	185: "optional_array_integer_unix-seconds",
	186: "optional_array_null",
	187: "optional_array_number",
	188: "optional_array_number_double",
	189: "optional_array_number_float",
	190: "optional_array_number_int32",
	191: "optional_array_number_int64",
	192: "optional_array_string",
	193: "optional_array_string_base64",
	194: "optional_array_string_binary",
	195: "optional_array_string_byte",
	196: "optional_array_string_date",
	197: "optional_array_string_date-time",
	198: "optional_array_string_duration",
	199: "optional_array_string_email",
	200: "optional_array_string_float32",
	201: "optional_array_string_float64",
	202: "optional_array_string_hostname",
	203: "optional_array_string_int",
	204: "optional_array_string_int16",
	205: "optional_array_string_int32",
	206: "optional_array_string_int64",
	207: "optional_array_string_int8",
	208: "optional_array_string_ip",
	209: "optional_array_string_ipv4",
	210: "optional_array_string_ipv6",
	211: "optional_array_string_password",
	212: "optional_array_string_time",
	213: "optional_array_string_uint",
	214: "optional_array_string_uint16",
	215: "optional_array_string_uint32",
	216: "optional_array_string_uint64",
	217: "optional_array_string_uint8",
	218: "optional_array_string_unix",
	219: "optional_array_string_unix-micro",
	220: "optional_array_string_unix-milli",
	221: "optional_array_string_unix-nano",
	222: "optional_array_string_unix-seconds",
	223: "optional_array_string_uri",
	224: "optional_array_string_uuid",
	225: "optional_boolean",
	226: "optional_double_array_any",
	227: "optional_double_array_boolean",
	228: "optional_double_array_integer",
	229: "optional_double_array_integer_int16",
	230: "optional_double_array_integer_int32",
	231: "optional_double_array_integer_int64",
	232: "optional_double_array_integer_int8",
	233: "optional_double_array_integer_uint",
	234: "optional_double_array_integer_uint16",
	235: "optional_double_array_integer_uint32",
	236: "optional_double_array_integer_uint64",
	237: "optional_double_array_integer_uint8",
	238: "optional_double_array_integer_unix",
	239: "optional_double_array_integer_unix-micro",
	240: "optional_double_array_integer_unix-milli",
	241: "optional_double_array_integer_unix-nano",
	242: "optional_double_array_integer_unix-seconds",
	243: "optional_double_array_null",
	244: "optional_double_array_number",
	245: "optional_double_array_number_double",
	246: "optional_double_array_number_float",
	247: "optional_double_array_number_int32",
	248: "optional_double_array_number_int64",
	249: "optional_double_array_string",
	250: "optional_double_array_string_base64",
	251: "optional_double_array_string_binary",
	252: "optional_double_array_string_byte",
	253: "optional_double_array_string_date",
	254: "optional_double_array_string_date-time",
	255: "optional_double_array_string_duration",
	256: "optional_double_array_string_email",
	257: "optional_double_array_string_float32",
	258: "optional_double_array_string_float64",
	259: "optional_double_array_string_hostname",
	260: "optional_double_array_string_int",
	261: "optional_double_array_string_int16",
	262: "optional_double_array_string_int32",
	263: "optional_double_array_string_int64",
	264: "optional_double_array_string_int8",
	265: "optional_double_array_string_ip",
	266: "optional_double_array_string_ipv4",
	267: "optional_double_array_string_ipv6",
	268: "optional_double_array_string_password",
	269: "optional_double_array_string_time",
	270: "optional_double_array_string_uint",
	271: "optional_double_array_string_uint16",
	272: "optional_double_array_string_uint32",
	273: "optional_double_array_string_uint64",
	274: "optional_double_array_string_uint8",
	275: "optional_double_array_string_unix",
	276: "optional_double_array_string_unix-micro",
	277: "optional_double_array_string_unix-milli",
	278: "optional_double_array_string_unix-nano",
	279: "optional_double_array_string_unix-seconds",
	280: "optional_double_array_string_uri",
	281: "optional_double_array_string_uuid",
	282: "optional_integer",
	283: "optional_integer_int16",
	284: "optional_integer_int32",
	285: "optional_integer_int64",
	286: "optional_integer_int8",
	287: "optional_integer_uint",
	288: "optional_integer_uint16",
	289: "optional_integer_uint32",
	290: "optional_integer_uint64",
	291: "optional_integer_uint8",
	292: "optional_integer_unix",
	293: "optional_integer_unix-micro",
	294: "optional_integer_unix-milli",
	295: "optional_integer_unix-nano",
	296: "optional_integer_unix-seconds",
	297: "optional_null",
	298: "optional_number",
	299: "optional_number_double",
	300: "optional_number_float",
	301: "optional_number_int32",
	302: "optional_number_int64",
	303: "optional_string",
	304: "optional_string_base64",
	305: "optional_string_binary",
	306: "optional_string_byte",
	307: "optional_string_date",
	308: "optional_string_date-time",
	309: "optional_string_duration",
	310: "optional_string_email",
	311: "optional_string_float32",
	312: "optional_string_float64",
	313: "optional_string_hostname",
	314: "optional_string_int",
	315: "optional_string_int16",
	316: "optional_string_int32",
	317: "optional_string_int64",
	318: "optional_string_int8",
	319: "optional_string_ip",
	320: "optional_string_ipv4",
	321: "optional_string_ipv6",
	322: "optional_string_password",
	323: "optional_string_time",
	324: "optional_string_uint",
	325: "optional_string_uint16",
	326: "optional_string_uint32",
	327: "optional_string_uint64",
	328: "optional_string_uint8",
	329: "optional_string_unix",
	330: "optional_string_unix-micro",
	331: "optional_string_unix-milli",
	332: "optional_string_unix-nano",
	333: "optional_string_unix-seconds",
	334: "optional_string_uri",
	335: "optional_string_uuid",
}

// Decode decodes TestResponseFormatTestOK from json.
func (s *TestResponseFormatTestOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TestResponseFormatTestOK to nil")
	}
	var requiredBitSet [42]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "required_any":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.RequiredAny = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_any\"")
			}
		case "required_array_any":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				s.RequiredArrayAny = make([]jx.Raw, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem jx.Raw
					v, err := d.RawAppend(nil)
					elem = jx.Raw(v)
					if err != nil {
						return err
					}
					s.RequiredArrayAny = append(s.RequiredArrayAny, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_any\"")
			}
		case "required_array_boolean":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				s.RequiredArrayBoolean = make([]bool, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem bool
					v, err := d.Bool()
					elem = bool(v)
					if err != nil {
						return err
					}
					s.RequiredArrayBoolean = append(s.RequiredArrayBoolean, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_boolean\"")
			}
		case "required_array_integer":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				s.RequiredArrayInteger = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.RequiredArrayInteger = append(s.RequiredArrayInteger, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer\"")
			}
		case "required_array_integer_int16":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				s.RequiredArrayIntegerInt16 = make([]int16, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int16
					v, err := d.Int16()
					elem = int16(v)
					if err != nil {
						return err
					}
					s.RequiredArrayIntegerInt16 = append(s.RequiredArrayIntegerInt16, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer_int16\"")
			}
		case "required_array_integer_int32":
			requiredBitSet[0] |= 1 << 5
			if err := func() error {
				s.RequiredArrayIntegerInt32 = make([]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int32
					v, err := d.Int32()
					elem = int32(v)
					if err != nil {
						return err
					}
					s.RequiredArrayIntegerInt32 = append(s.RequiredArrayIntegerInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer_int32\"")
			}
		case "required_array_integer_int64":
			requiredBitSet[0] |= 1 << 6
			if err := func() error {
				s.RequiredArrayIntegerInt64 = make([]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int64
					v, err := d.Int64()
					elem = int64(v)
					if err != nil {
						return err
					}
					s.RequiredArrayIntegerInt64 = append(s.RequiredArrayIntegerInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer_int64\"")
			}
		case "required_array_integer_int8":
			requiredBitSet[0] |= 1 << 7
			if err := func() error {
				s.RequiredArrayIntegerInt8 = make([]int8, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int8
					v, err := d.Int8()
					elem = int8(v)
					if err != nil {
						return err
					}
					s.RequiredArrayIntegerInt8 = append(s.RequiredArrayIntegerInt8, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer_int8\"")
			}
		case "required_array_integer_uint":
			requiredBitSet[1] |= 1 << 0
			if err := func() error {
				s.RequiredArrayIntegerUint = make([]uint, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint
					v, err := d.UInt()
					elem = uint(v)
					if err != nil {
						return err
					}
					s.RequiredArrayIntegerUint = append(s.RequiredArrayIntegerUint, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer_uint\"")
			}
		case "required_array_integer_uint16":
			requiredBitSet[1] |= 1 << 1
			if err := func() error {
				s.RequiredArrayIntegerUint16 = make([]uint16, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint16
					v, err := d.UInt16()
					elem = uint16(v)
					if err != nil {
						return err
					}
					s.RequiredArrayIntegerUint16 = append(s.RequiredArrayIntegerUint16, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer_uint16\"")
			}
		case "required_array_integer_uint32":
			requiredBitSet[1] |= 1 << 2
			if err := func() error {
				s.RequiredArrayIntegerUint32 = make([]uint32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint32
					v, err := d.UInt32()
					elem = uint32(v)
					if err != nil {
						return err
					}
					s.RequiredArrayIntegerUint32 = append(s.RequiredArrayIntegerUint32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer_uint32\"")
			}
		case "required_array_integer_uint64":
			requiredBitSet[1] |= 1 << 3
			if err := func() error {
				s.RequiredArrayIntegerUint64 = make([]uint64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint64
					v, err := d.UInt64()
					elem = uint64(v)
					if err != nil {
						return err
					}
					s.RequiredArrayIntegerUint64 = append(s.RequiredArrayIntegerUint64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer_uint64\"")
			}
		case "required_array_integer_uint8":
			requiredBitSet[1] |= 1 << 4
			if err := func() error {
				s.RequiredArrayIntegerUint8 = make([]uint8, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint8
					v, err := d.UInt8()
					elem = uint8(v)
					if err != nil {
						return err
					}
					s.RequiredArrayIntegerUint8 = append(s.RequiredArrayIntegerUint8, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer_uint8\"")
			}
		case "required_array_integer_unix":
			requiredBitSet[1] |= 1 << 5
			if err := func() error {
				s.RequiredArrayIntegerUnix = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeUnixSeconds(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayIntegerUnix = append(s.RequiredArrayIntegerUnix, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer_unix\"")
			}
		case "required_array_integer_unix-micro":
			requiredBitSet[1] |= 1 << 6
			if err := func() error {
				s.RequiredArrayIntegerUnixMinusMicro = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeUnixMicro(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayIntegerUnixMinusMicro = append(s.RequiredArrayIntegerUnixMinusMicro, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer_unix-micro\"")
			}
		case "required_array_integer_unix-milli":
			requiredBitSet[1] |= 1 << 7
			if err := func() error {
				s.RequiredArrayIntegerUnixMinusMilli = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeUnixMilli(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayIntegerUnixMinusMilli = append(s.RequiredArrayIntegerUnixMinusMilli, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer_unix-milli\"")
			}
		case "required_array_integer_unix-nano":
			requiredBitSet[2] |= 1 << 0
			if err := func() error {
				s.RequiredArrayIntegerUnixMinusNano = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeUnixNano(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayIntegerUnixMinusNano = append(s.RequiredArrayIntegerUnixMinusNano, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer_unix-nano\"")
			}
		case "required_array_integer_unix-seconds":
			requiredBitSet[2] |= 1 << 1
			if err := func() error {
				s.RequiredArrayIntegerUnixMinusSeconds = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeUnixSeconds(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayIntegerUnixMinusSeconds = append(s.RequiredArrayIntegerUnixMinusSeconds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_integer_unix-seconds\"")
			}
		case "required_array_null":
			requiredBitSet[2] |= 1 << 2
			if err := func() error {
				s.RequiredArrayNull = make([]struct{}, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem struct{}
					if err := d.Null(); err != nil {
						return err
					}
					s.RequiredArrayNull = append(s.RequiredArrayNull, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_null\"")
			}
		case "required_array_number":
			requiredBitSet[2] |= 1 << 3
			if err := func() error {
				s.RequiredArrayNumber = make([]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem float64
					v, err := d.Float64()
					elem = float64(v)
					if err != nil {
						return err
					}
					s.RequiredArrayNumber = append(s.RequiredArrayNumber, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_number\"")
			}
		case "required_array_number_double":
			requiredBitSet[2] |= 1 << 4
			if err := func() error {
				s.RequiredArrayNumberDouble = make([]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem float64
					v, err := d.Float64()
					elem = float64(v)
					if err != nil {
						return err
					}
					s.RequiredArrayNumberDouble = append(s.RequiredArrayNumberDouble, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_number_double\"")
			}
		case "required_array_number_float":
			requiredBitSet[2] |= 1 << 5
			if err := func() error {
				s.RequiredArrayNumberFloat = make([]float32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem float32
					v, err := d.Float32()
					elem = float32(v)
					if err != nil {
						return err
					}
					s.RequiredArrayNumberFloat = append(s.RequiredArrayNumberFloat, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_number_float\"")
			}
		case "required_array_number_int32":
			requiredBitSet[2] |= 1 << 6
			if err := func() error {
				s.RequiredArrayNumberInt32 = make([]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int32
					v, err := d.Int32()
					elem = int32(v)
					if err != nil {
						return err
					}
					s.RequiredArrayNumberInt32 = append(s.RequiredArrayNumberInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_number_int32\"")
			}
		case "required_array_number_int64":
			requiredBitSet[2] |= 1 << 7
			if err := func() error {
				s.RequiredArrayNumberInt64 = make([]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int64
					v, err := d.Int64()
					elem = int64(v)
					if err != nil {
						return err
					}
					s.RequiredArrayNumberInt64 = append(s.RequiredArrayNumberInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_number_int64\"")
			}
		case "required_array_string":
			requiredBitSet[3] |= 1 << 0
			if err := func() error {
				s.RequiredArrayString = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.RequiredArrayString = append(s.RequiredArrayString, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string\"")
			}
		case "required_array_string_base64":
			requiredBitSet[3] |= 1 << 1
			if err := func() error {
				s.RequiredArrayStringBase64 = make([][]byte, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []byte
					v, err := d.Base64()
					elem = []byte(v)
					if err != nil {
						return err
					}
					s.RequiredArrayStringBase64 = append(s.RequiredArrayStringBase64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_base64\"")
			}
		case "required_array_string_binary":
			requiredBitSet[3] |= 1 << 2
			if err := func() error {
				s.RequiredArrayStringBinary = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.RequiredArrayStringBinary = append(s.RequiredArrayStringBinary, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_binary\"")
			}
		case "required_array_string_byte":
			requiredBitSet[3] |= 1 << 3
			if err := func() error {
				s.RequiredArrayStringByte = make([][]byte, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []byte
					v, err := d.Base64()
					elem = []byte(v)
					if err != nil {
						return err
					}
					s.RequiredArrayStringByte = append(s.RequiredArrayStringByte, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_byte\"")
			}
		case "required_array_string_date":
			requiredBitSet[3] |= 1 << 4
			if err := func() error {
				s.RequiredArrayStringDate = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeDate(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringDate = append(s.RequiredArrayStringDate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_date\"")
			}
		case "required_array_string_date-time":
			requiredBitSet[3] |= 1 << 5
			if err := func() error {
				s.RequiredArrayStringDateMinusTime = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeDateTime(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringDateMinusTime = append(s.RequiredArrayStringDateMinusTime, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_date-time\"")
			}
		case "required_array_string_duration":
			requiredBitSet[3] |= 1 << 6
			if err := func() error {
				s.RequiredArrayStringDuration = make([]time.Duration, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Duration
					v, err := json.DecodeDuration(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringDuration = append(s.RequiredArrayStringDuration, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_duration\"")
			}
		case "required_array_string_email":
			requiredBitSet[3] |= 1 << 7
			if err := func() error {
				s.RequiredArrayStringEmail = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.RequiredArrayStringEmail = append(s.RequiredArrayStringEmail, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_email\"")
			}
		case "required_array_string_float32":
			requiredBitSet[4] |= 1 << 0
			if err := func() error {
				s.RequiredArrayStringFloat32 = make([]float32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem float32
					v, err := json.DecodeStringFloat32(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringFloat32 = append(s.RequiredArrayStringFloat32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_float32\"")
			}
		case "required_array_string_float64":
			requiredBitSet[4] |= 1 << 1
			if err := func() error {
				s.RequiredArrayStringFloat64 = make([]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem float64
					v, err := json.DecodeStringFloat64(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringFloat64 = append(s.RequiredArrayStringFloat64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_float64\"")
			}
		case "required_array_string_hostname":
			requiredBitSet[4] |= 1 << 2
			if err := func() error {
				s.RequiredArrayStringHostname = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.RequiredArrayStringHostname = append(s.RequiredArrayStringHostname, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_hostname\"")
			}
		case "required_array_string_int":
			requiredBitSet[4] |= 1 << 3
			if err := func() error {
				s.RequiredArrayStringInt = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := json.DecodeStringInt(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringInt = append(s.RequiredArrayStringInt, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_int\"")
			}
		case "required_array_string_int16":
			requiredBitSet[4] |= 1 << 4
			if err := func() error {
				s.RequiredArrayStringInt16 = make([]int16, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int16
					v, err := json.DecodeStringInt16(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringInt16 = append(s.RequiredArrayStringInt16, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_int16\"")
			}
		case "required_array_string_int32":
			requiredBitSet[4] |= 1 << 5
			if err := func() error {
				s.RequiredArrayStringInt32 = make([]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int32
					v, err := json.DecodeStringInt32(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringInt32 = append(s.RequiredArrayStringInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_int32\"")
			}
		case "required_array_string_int64":
			requiredBitSet[4] |= 1 << 6
			if err := func() error {
				s.RequiredArrayStringInt64 = make([]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int64
					v, err := json.DecodeStringInt64(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringInt64 = append(s.RequiredArrayStringInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_int64\"")
			}
		case "required_array_string_int8":
			requiredBitSet[4] |= 1 << 7
			if err := func() error {
				s.RequiredArrayStringInt8 = make([]int8, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int8
					v, err := json.DecodeStringInt8(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringInt8 = append(s.RequiredArrayStringInt8, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_int8\"")
			}
		case "required_array_string_ip":
			requiredBitSet[5] |= 1 << 0
			if err := func() error {
				s.RequiredArrayStringIP = make([]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem netip.Addr
					v, err := json.DecodeIP(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringIP = append(s.RequiredArrayStringIP, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_ip\"")
			}
		case "required_array_string_ipv4":
			requiredBitSet[5] |= 1 << 1
			if err := func() error {
				s.RequiredArrayStringIpv4 = make([]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem netip.Addr
					v, err := json.DecodeIPv4(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringIpv4 = append(s.RequiredArrayStringIpv4, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_ipv4\"")
			}
		case "required_array_string_ipv6":
			requiredBitSet[5] |= 1 << 2
			if err := func() error {
				s.RequiredArrayStringIpv6 = make([]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem netip.Addr
					v, err := json.DecodeIPv6(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringIpv6 = append(s.RequiredArrayStringIpv6, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_ipv6\"")
			}
		case "required_array_string_password":
			requiredBitSet[5] |= 1 << 3
			if err := func() error {
				s.RequiredArrayStringPassword = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.RequiredArrayStringPassword = append(s.RequiredArrayStringPassword, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_password\"")
			}
		case "required_array_string_time":
			requiredBitSet[5] |= 1 << 4
			if err := func() error {
				s.RequiredArrayStringTime = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeTime(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringTime = append(s.RequiredArrayStringTime, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_time\"")
			}
		case "required_array_string_uint":
			requiredBitSet[5] |= 1 << 5
			if err := func() error {
				s.RequiredArrayStringUint = make([]uint, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint
					v, err := json.DecodeStringUint(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringUint = append(s.RequiredArrayStringUint, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_uint\"")
			}
		case "required_array_string_uint16":
			requiredBitSet[5] |= 1 << 6
			if err := func() error {
				s.RequiredArrayStringUint16 = make([]uint16, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint16
					v, err := json.DecodeStringUint16(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringUint16 = append(s.RequiredArrayStringUint16, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_uint16\"")
			}
		case "required_array_string_uint32":
			requiredBitSet[5] |= 1 << 7
			if err := func() error {
				s.RequiredArrayStringUint32 = make([]uint32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint32
					v, err := json.DecodeStringUint32(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringUint32 = append(s.RequiredArrayStringUint32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_uint32\"")
			}
		case "required_array_string_uint64":
			requiredBitSet[6] |= 1 << 0
			if err := func() error {
				s.RequiredArrayStringUint64 = make([]uint64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint64
					v, err := json.DecodeStringUint64(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringUint64 = append(s.RequiredArrayStringUint64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_uint64\"")
			}
		case "required_array_string_uint8":
			requiredBitSet[6] |= 1 << 1
			if err := func() error {
				s.RequiredArrayStringUint8 = make([]uint8, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint8
					v, err := json.DecodeStringUint8(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringUint8 = append(s.RequiredArrayStringUint8, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_uint8\"")
			}
		case "required_array_string_unix":
			requiredBitSet[6] |= 1 << 2
			if err := func() error {
				s.RequiredArrayStringUnix = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeStringUnixSeconds(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringUnix = append(s.RequiredArrayStringUnix, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_unix\"")
			}
		case "required_array_string_unix-micro":
			requiredBitSet[6] |= 1 << 3
			if err := func() error {
				s.RequiredArrayStringUnixMinusMicro = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeStringUnixMicro(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringUnixMinusMicro = append(s.RequiredArrayStringUnixMinusMicro, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_unix-micro\"")
			}
		case "required_array_string_unix-milli":
			requiredBitSet[6] |= 1 << 4
			if err := func() error {
				s.RequiredArrayStringUnixMinusMilli = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeStringUnixMilli(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringUnixMinusMilli = append(s.RequiredArrayStringUnixMinusMilli, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_unix-milli\"")
			}
		case "required_array_string_unix-nano":
			requiredBitSet[6] |= 1 << 5
			if err := func() error {
				s.RequiredArrayStringUnixMinusNano = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeStringUnixNano(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringUnixMinusNano = append(s.RequiredArrayStringUnixMinusNano, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_unix-nano\"")
			}
		case "required_array_string_unix-seconds":
			requiredBitSet[6] |= 1 << 6
			if err := func() error {
				s.RequiredArrayStringUnixMinusSeconds = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeStringUnixSeconds(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringUnixMinusSeconds = append(s.RequiredArrayStringUnixMinusSeconds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_unix-seconds\"")
			}
		case "required_array_string_uri":
			requiredBitSet[6] |= 1 << 7
			if err := func() error {
				s.RequiredArrayStringURI = make([]url.URL, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem url.URL
					v, err := json.DecodeURI(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringURI = append(s.RequiredArrayStringURI, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_uri\"")
			}
		case "required_array_string_uuid":
			requiredBitSet[7] |= 1 << 0
			if err := func() error {
				s.RequiredArrayStringUUID = make([]uuid.UUID, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uuid.UUID
					v, err := json.DecodeUUID(d)
					elem = v
					if err != nil {
						return err
					}
					s.RequiredArrayStringUUID = append(s.RequiredArrayStringUUID, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_array_string_uuid\"")
			}
		case "required_boolean":
			requiredBitSet[7] |= 1 << 1
			if err := func() error {
				v, err := d.Bool()
				s.RequiredBoolean = bool(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_boolean\"")
			}
		case "required_double_array_any":
			requiredBitSet[7] |= 1 << 2
			if err := func() error {
				s.RequiredDoubleArrayAny = make([][]jx.Raw, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []jx.Raw
					elem = make([]jx.Raw, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem jx.Raw
						v, err := d.RawAppend(nil)
						elemElem = jx.Raw(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayAny = append(s.RequiredDoubleArrayAny, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_any\"")
			}
		case "required_double_array_boolean":
			requiredBitSet[7] |= 1 << 3
			if err := func() error {
				s.RequiredDoubleArrayBoolean = make([][]bool, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []bool
					elem = make([]bool, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem bool
						v, err := d.Bool()
						elemElem = bool(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayBoolean = append(s.RequiredDoubleArrayBoolean, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_boolean\"")
			}
		case "required_double_array_integer":
			requiredBitSet[7] |= 1 << 4
			if err := func() error {
				s.RequiredDoubleArrayInteger = make([][]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int
					elem = make([]int, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int
						v, err := d.Int()
						elemElem = int(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayInteger = append(s.RequiredDoubleArrayInteger, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer\"")
			}
		case "required_double_array_integer_int16":
			requiredBitSet[7] |= 1 << 5
			if err := func() error {
				s.RequiredDoubleArrayIntegerInt16 = make([][]int16, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int16
					elem = make([]int16, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int16
						v, err := d.Int16()
						elemElem = int16(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayIntegerInt16 = append(s.RequiredDoubleArrayIntegerInt16, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer_int16\"")
			}
		case "required_double_array_integer_int32":
			requiredBitSet[7] |= 1 << 6
			if err := func() error {
				s.RequiredDoubleArrayIntegerInt32 = make([][]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int32
					elem = make([]int32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int32
						v, err := d.Int32()
						elemElem = int32(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayIntegerInt32 = append(s.RequiredDoubleArrayIntegerInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer_int32\"")
			}
		case "required_double_array_integer_int64":
			requiredBitSet[7] |= 1 << 7
			if err := func() error {
				s.RequiredDoubleArrayIntegerInt64 = make([][]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int64
					elem = make([]int64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int64
						v, err := d.Int64()
						elemElem = int64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayIntegerInt64 = append(s.RequiredDoubleArrayIntegerInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer_int64\"")
			}
		case "required_double_array_integer_int8":
			requiredBitSet[8] |= 1 << 0
			if err := func() error {
				s.RequiredDoubleArrayIntegerInt8 = make([][]int8, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int8
					elem = make([]int8, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int8
						v, err := d.Int8()
						elemElem = int8(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayIntegerInt8 = append(s.RequiredDoubleArrayIntegerInt8, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer_int8\"")
			}
		case "required_double_array_integer_uint":
			requiredBitSet[8] |= 1 << 1
			if err := func() error {
				s.RequiredDoubleArrayIntegerUint = make([][]uint, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint
					elem = make([]uint, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint
						v, err := d.UInt()
						elemElem = uint(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayIntegerUint = append(s.RequiredDoubleArrayIntegerUint, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer_uint\"")
			}
		case "required_double_array_integer_uint16":
			requiredBitSet[8] |= 1 << 2
			if err := func() error {
				s.RequiredDoubleArrayIntegerUint16 = make([][]uint16, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint16
					elem = make([]uint16, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint16
						v, err := d.UInt16()
						elemElem = uint16(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayIntegerUint16 = append(s.RequiredDoubleArrayIntegerUint16, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer_uint16\"")
			}
		case "required_double_array_integer_uint32":
			requiredBitSet[8] |= 1 << 3
			if err := func() error {
				s.RequiredDoubleArrayIntegerUint32 = make([][]uint32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint32
					elem = make([]uint32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint32
						v, err := d.UInt32()
						elemElem = uint32(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayIntegerUint32 = append(s.RequiredDoubleArrayIntegerUint32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer_uint32\"")
			}
		case "required_double_array_integer_uint64":
			requiredBitSet[8] |= 1 << 4
			if err := func() error {
				s.RequiredDoubleArrayIntegerUint64 = make([][]uint64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint64
					elem = make([]uint64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint64
						v, err := d.UInt64()
						elemElem = uint64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayIntegerUint64 = append(s.RequiredDoubleArrayIntegerUint64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer_uint64\"")
			}
		case "required_double_array_integer_uint8":
			requiredBitSet[8] |= 1 << 5
			if err := func() error {
				s.RequiredDoubleArrayIntegerUint8 = make([][]uint8, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint8
					elem = make([]uint8, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint8
						v, err := d.UInt8()
						elemElem = uint8(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayIntegerUint8 = append(s.RequiredDoubleArrayIntegerUint8, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer_uint8\"")
			}
		case "required_double_array_integer_unix":
			requiredBitSet[8] |= 1 << 6
			if err := func() error {
				s.RequiredDoubleArrayIntegerUnix = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeUnixSeconds(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayIntegerUnix = append(s.RequiredDoubleArrayIntegerUnix, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer_unix\"")
			}
		case "required_double_array_integer_unix-micro":
			requiredBitSet[8] |= 1 << 7
			if err := func() error {
				s.RequiredDoubleArrayIntegerUnixMinusMicro = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeUnixMicro(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayIntegerUnixMinusMicro = append(s.RequiredDoubleArrayIntegerUnixMinusMicro, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer_unix-micro\"")
			}
		case "required_double_array_integer_unix-milli":
			requiredBitSet[9] |= 1 << 0
			if err := func() error {
				s.RequiredDoubleArrayIntegerUnixMinusMilli = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeUnixMilli(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayIntegerUnixMinusMilli = append(s.RequiredDoubleArrayIntegerUnixMinusMilli, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer_unix-milli\"")
			}
		case "required_double_array_integer_unix-nano":
			requiredBitSet[9] |= 1 << 1
			if err := func() error {
				s.RequiredDoubleArrayIntegerUnixMinusNano = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeUnixNano(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayIntegerUnixMinusNano = append(s.RequiredDoubleArrayIntegerUnixMinusNano, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer_unix-nano\"")
			}
		case "required_double_array_integer_unix-seconds":
			requiredBitSet[9] |= 1 << 2
			if err := func() error {
				s.RequiredDoubleArrayIntegerUnixMinusSeconds = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeUnixSeconds(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayIntegerUnixMinusSeconds = append(s.RequiredDoubleArrayIntegerUnixMinusSeconds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_integer_unix-seconds\"")
			}
		case "required_double_array_null":
			requiredBitSet[9] |= 1 << 3
			if err := func() error {
				s.RequiredDoubleArrayNull = make([][]struct{}, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []struct{}
					elem = make([]struct{}, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem struct{}
						if err := d.Null(); err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayNull = append(s.RequiredDoubleArrayNull, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_null\"")
			}
		case "required_double_array_number":
			requiredBitSet[9] |= 1 << 4
			if err := func() error {
				s.RequiredDoubleArrayNumber = make([][]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []float64
					elem = make([]float64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem float64
						v, err := d.Float64()
						elemElem = float64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayNumber = append(s.RequiredDoubleArrayNumber, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_number\"")
			}
		case "required_double_array_number_double":
			requiredBitSet[9] |= 1 << 5
			if err := func() error {
				s.RequiredDoubleArrayNumberDouble = make([][]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []float64
					elem = make([]float64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem float64
						v, err := d.Float64()
						elemElem = float64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayNumberDouble = append(s.RequiredDoubleArrayNumberDouble, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_number_double\"")
			}
		case "required_double_array_number_float":
			requiredBitSet[9] |= 1 << 6
			if err := func() error {
				s.RequiredDoubleArrayNumberFloat = make([][]float32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []float32
					elem = make([]float32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem float32
						v, err := d.Float32()
						elemElem = float32(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayNumberFloat = append(s.RequiredDoubleArrayNumberFloat, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_number_float\"")
			}
		case "required_double_array_number_int32":
			requiredBitSet[9] |= 1 << 7
			if err := func() error {
				s.RequiredDoubleArrayNumberInt32 = make([][]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int32
					elem = make([]int32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int32
						v, err := d.Int32()
						elemElem = int32(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayNumberInt32 = append(s.RequiredDoubleArrayNumberInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_number_int32\"")
			}
		case "required_double_array_number_int64":
			requiredBitSet[10] |= 1 << 0
			if err := func() error {
				s.RequiredDoubleArrayNumberInt64 = make([][]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int64
					elem = make([]int64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int64
						v, err := d.Int64()
						elemElem = int64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayNumberInt64 = append(s.RequiredDoubleArrayNumberInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_number_int64\"")
			}
		case "required_double_array_string":
			requiredBitSet[10] |= 1 << 1
			if err := func() error {
				s.RequiredDoubleArrayString = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayString = append(s.RequiredDoubleArrayString, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string\"")
			}
		case "required_double_array_string_base64":
			requiredBitSet[10] |= 1 << 2
			if err := func() error {
				s.RequiredDoubleArrayStringBase64 = make([][][]byte, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem [][]byte
					elem = make([][]byte, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem []byte
						v, err := d.Base64()
						elemElem = []byte(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringBase64 = append(s.RequiredDoubleArrayStringBase64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_base64\"")
			}
		case "required_double_array_string_binary":
			requiredBitSet[10] |= 1 << 3
			if err := func() error {
				s.RequiredDoubleArrayStringBinary = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringBinary = append(s.RequiredDoubleArrayStringBinary, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_binary\"")
			}
		case "required_double_array_string_byte":
			requiredBitSet[10] |= 1 << 4
			if err := func() error {
				s.RequiredDoubleArrayStringByte = make([][][]byte, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem [][]byte
					elem = make([][]byte, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem []byte
						v, err := d.Base64()
						elemElem = []byte(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringByte = append(s.RequiredDoubleArrayStringByte, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_byte\"")
			}
		case "required_double_array_string_date":
			requiredBitSet[10] |= 1 << 5
			if err := func() error {
				s.RequiredDoubleArrayStringDate = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeDate(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringDate = append(s.RequiredDoubleArrayStringDate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_date\"")
			}
		case "required_double_array_string_date-time":
			requiredBitSet[10] |= 1 << 6
			if err := func() error {
				s.RequiredDoubleArrayStringDateMinusTime = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeDateTime(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringDateMinusTime = append(s.RequiredDoubleArrayStringDateMinusTime, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_date-time\"")
			}
		case "required_double_array_string_duration":
			requiredBitSet[10] |= 1 << 7
			if err := func() error {
				s.RequiredDoubleArrayStringDuration = make([][]time.Duration, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Duration
					elem = make([]time.Duration, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Duration
						v, err := json.DecodeDuration(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringDuration = append(s.RequiredDoubleArrayStringDuration, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_duration\"")
			}
		case "required_double_array_string_email":
			requiredBitSet[11] |= 1 << 0
			if err := func() error {
				s.RequiredDoubleArrayStringEmail = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringEmail = append(s.RequiredDoubleArrayStringEmail, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_email\"")
			}
		case "required_double_array_string_float32":
			requiredBitSet[11] |= 1 << 1
			if err := func() error {
				s.RequiredDoubleArrayStringFloat32 = make([][]float32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []float32
					elem = make([]float32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem float32
						v, err := json.DecodeStringFloat32(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringFloat32 = append(s.RequiredDoubleArrayStringFloat32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_float32\"")
			}
		case "required_double_array_string_float64":
			requiredBitSet[11] |= 1 << 2
			if err := func() error {
				s.RequiredDoubleArrayStringFloat64 = make([][]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []float64
					elem = make([]float64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem float64
						v, err := json.DecodeStringFloat64(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringFloat64 = append(s.RequiredDoubleArrayStringFloat64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_float64\"")
			}
		case "required_double_array_string_hostname":
			requiredBitSet[11] |= 1 << 3
			if err := func() error {
				s.RequiredDoubleArrayStringHostname = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringHostname = append(s.RequiredDoubleArrayStringHostname, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_hostname\"")
			}
		case "required_double_array_string_int":
			requiredBitSet[11] |= 1 << 4
			if err := func() error {
				s.RequiredDoubleArrayStringInt = make([][]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int
					elem = make([]int, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int
						v, err := json.DecodeStringInt(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringInt = append(s.RequiredDoubleArrayStringInt, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_int\"")
			}
		case "required_double_array_string_int16":
			requiredBitSet[11] |= 1 << 5
			if err := func() error {
				s.RequiredDoubleArrayStringInt16 = make([][]int16, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int16
					elem = make([]int16, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int16
						v, err := json.DecodeStringInt16(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringInt16 = append(s.RequiredDoubleArrayStringInt16, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_int16\"")
			}
		case "required_double_array_string_int32":
			requiredBitSet[11] |= 1 << 6
			if err := func() error {
				s.RequiredDoubleArrayStringInt32 = make([][]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int32
					elem = make([]int32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int32
						v, err := json.DecodeStringInt32(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringInt32 = append(s.RequiredDoubleArrayStringInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_int32\"")
			}
		case "required_double_array_string_int64":
			requiredBitSet[11] |= 1 << 7
			if err := func() error {
				s.RequiredDoubleArrayStringInt64 = make([][]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int64
					elem = make([]int64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int64
						v, err := json.DecodeStringInt64(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringInt64 = append(s.RequiredDoubleArrayStringInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_int64\"")
			}
		case "required_double_array_string_int8":
			requiredBitSet[12] |= 1 << 0
			if err := func() error {
				s.RequiredDoubleArrayStringInt8 = make([][]int8, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int8
					elem = make([]int8, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int8
						v, err := json.DecodeStringInt8(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringInt8 = append(s.RequiredDoubleArrayStringInt8, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_int8\"")
			}
		case "required_double_array_string_ip":
			requiredBitSet[12] |= 1 << 1
			if err := func() error {
				s.RequiredDoubleArrayStringIP = make([][]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []netip.Addr
					elem = make([]netip.Addr, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem netip.Addr
						v, err := json.DecodeIP(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringIP = append(s.RequiredDoubleArrayStringIP, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_ip\"")
			}
		case "required_double_array_string_ipv4":
			requiredBitSet[12] |= 1 << 2
			if err := func() error {
				s.RequiredDoubleArrayStringIpv4 = make([][]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []netip.Addr
					elem = make([]netip.Addr, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem netip.Addr
						v, err := json.DecodeIPv4(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringIpv4 = append(s.RequiredDoubleArrayStringIpv4, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_ipv4\"")
			}
		case "required_double_array_string_ipv6":
			requiredBitSet[12] |= 1 << 3
			if err := func() error {
				s.RequiredDoubleArrayStringIpv6 = make([][]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []netip.Addr
					elem = make([]netip.Addr, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem netip.Addr
						v, err := json.DecodeIPv6(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringIpv6 = append(s.RequiredDoubleArrayStringIpv6, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_ipv6\"")
			}
		case "required_double_array_string_password":
			requiredBitSet[12] |= 1 << 4
			if err := func() error {
				s.RequiredDoubleArrayStringPassword = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringPassword = append(s.RequiredDoubleArrayStringPassword, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_password\"")
			}
		case "required_double_array_string_time":
			requiredBitSet[12] |= 1 << 5
			if err := func() error {
				s.RequiredDoubleArrayStringTime = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeTime(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringTime = append(s.RequiredDoubleArrayStringTime, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_time\"")
			}
		case "required_double_array_string_uint":
			requiredBitSet[12] |= 1 << 6
			if err := func() error {
				s.RequiredDoubleArrayStringUint = make([][]uint, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint
					elem = make([]uint, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint
						v, err := json.DecodeStringUint(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringUint = append(s.RequiredDoubleArrayStringUint, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_uint\"")
			}
		case "required_double_array_string_uint16":
			requiredBitSet[12] |= 1 << 7
			if err := func() error {
				s.RequiredDoubleArrayStringUint16 = make([][]uint16, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint16
					elem = make([]uint16, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint16
						v, err := json.DecodeStringUint16(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringUint16 = append(s.RequiredDoubleArrayStringUint16, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_uint16\"")
			}
		case "required_double_array_string_uint32":
			requiredBitSet[13] |= 1 << 0
			if err := func() error {
				s.RequiredDoubleArrayStringUint32 = make([][]uint32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint32
					elem = make([]uint32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint32
						v, err := json.DecodeStringUint32(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringUint32 = append(s.RequiredDoubleArrayStringUint32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_uint32\"")
			}
		case "required_double_array_string_uint64":
			requiredBitSet[13] |= 1 << 1
			if err := func() error {
				s.RequiredDoubleArrayStringUint64 = make([][]uint64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint64
					elem = make([]uint64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint64
						v, err := json.DecodeStringUint64(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringUint64 = append(s.RequiredDoubleArrayStringUint64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_uint64\"")
			}
		case "required_double_array_string_uint8":
			requiredBitSet[13] |= 1 << 2
			if err := func() error {
				s.RequiredDoubleArrayStringUint8 = make([][]uint8, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint8
					elem = make([]uint8, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint8
						v, err := json.DecodeStringUint8(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringUint8 = append(s.RequiredDoubleArrayStringUint8, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_uint8\"")
			}
		case "required_double_array_string_unix":
			requiredBitSet[13] |= 1 << 3
			if err := func() error {
				s.RequiredDoubleArrayStringUnix = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeStringUnixSeconds(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringUnix = append(s.RequiredDoubleArrayStringUnix, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_unix\"")
			}
		case "required_double_array_string_unix-micro":
			requiredBitSet[13] |= 1 << 4
			if err := func() error {
				s.RequiredDoubleArrayStringUnixMinusMicro = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeStringUnixMicro(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringUnixMinusMicro = append(s.RequiredDoubleArrayStringUnixMinusMicro, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_unix-micro\"")
			}
		case "required_double_array_string_unix-milli":
			requiredBitSet[13] |= 1 << 5
			if err := func() error {
				s.RequiredDoubleArrayStringUnixMinusMilli = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeStringUnixMilli(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringUnixMinusMilli = append(s.RequiredDoubleArrayStringUnixMinusMilli, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_unix-milli\"")
			}
		case "required_double_array_string_unix-nano":
			requiredBitSet[13] |= 1 << 6
			if err := func() error {
				s.RequiredDoubleArrayStringUnixMinusNano = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeStringUnixNano(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringUnixMinusNano = append(s.RequiredDoubleArrayStringUnixMinusNano, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_unix-nano\"")
			}
		case "required_double_array_string_unix-seconds":
			requiredBitSet[13] |= 1 << 7
			if err := func() error {
				s.RequiredDoubleArrayStringUnixMinusSeconds = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeStringUnixSeconds(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringUnixMinusSeconds = append(s.RequiredDoubleArrayStringUnixMinusSeconds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_unix-seconds\"")
			}
		case "required_double_array_string_uri":
			requiredBitSet[14] |= 1 << 0
			if err := func() error {
				s.RequiredDoubleArrayStringURI = make([][]url.URL, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []url.URL
					elem = make([]url.URL, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem url.URL
						v, err := json.DecodeURI(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringURI = append(s.RequiredDoubleArrayStringURI, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_uri\"")
			}
		case "required_double_array_string_uuid":
			requiredBitSet[14] |= 1 << 1
			if err := func() error {
				s.RequiredDoubleArrayStringUUID = make([][]uuid.UUID, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uuid.UUID
					elem = make([]uuid.UUID, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uuid.UUID
						v, err := json.DecodeUUID(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.RequiredDoubleArrayStringUUID = append(s.RequiredDoubleArrayStringUUID, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_double_array_string_uuid\"")
			}
		case "required_integer":
			requiredBitSet[14] |= 1 << 2
			if err := func() error {
				v, err := d.Int()
				s.RequiredInteger = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer\"")
			}
		case "required_integer_int16":
			requiredBitSet[14] |= 1 << 3
			if err := func() error {
				v, err := d.Int16()
				s.RequiredIntegerInt16 = int16(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer_int16\"")
			}
		case "required_integer_int32":
			requiredBitSet[14] |= 1 << 4
			if err := func() error {
				v, err := d.Int32()
				s.RequiredIntegerInt32 = int32(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer_int32\"")
			}
		case "required_integer_int64":
			requiredBitSet[14] |= 1 << 5
			if err := func() error {
				v, err := d.Int64()
				s.RequiredIntegerInt64 = int64(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer_int64\"")
			}
		case "required_integer_int8":
			requiredBitSet[14] |= 1 << 6
			if err := func() error {
				v, err := d.Int8()
				s.RequiredIntegerInt8 = int8(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer_int8\"")
			}
		case "required_integer_uint":
			requiredBitSet[14] |= 1 << 7
			if err := func() error {
				v, err := d.UInt()
				s.RequiredIntegerUint = uint(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer_uint\"")
			}
		case "required_integer_uint16":
			requiredBitSet[15] |= 1 << 0
			if err := func() error {
				v, err := d.UInt16()
				s.RequiredIntegerUint16 = uint16(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer_uint16\"")
			}
		case "required_integer_uint32":
			requiredBitSet[15] |= 1 << 1
			if err := func() error {
				v, err := d.UInt32()
				s.RequiredIntegerUint32 = uint32(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer_uint32\"")
			}
		case "required_integer_uint64":
			requiredBitSet[15] |= 1 << 2
			if err := func() error {
				v, err := d.UInt64()
				s.RequiredIntegerUint64 = uint64(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer_uint64\"")
			}
		case "required_integer_uint8":
			requiredBitSet[15] |= 1 << 3
			if err := func() error {
				v, err := d.UInt8()
				s.RequiredIntegerUint8 = uint8(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer_uint8\"")
			}
		case "required_integer_unix":
			requiredBitSet[15] |= 1 << 4
			if err := func() error {
				v, err := json.DecodeUnixSeconds(d)
				s.RequiredIntegerUnix = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer_unix\"")
			}
		case "required_integer_unix-micro":
			requiredBitSet[15] |= 1 << 5
			if err := func() error {
				v, err := json.DecodeUnixMicro(d)
				s.RequiredIntegerUnixMinusMicro = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer_unix-micro\"")
			}
		case "required_integer_unix-milli":
			requiredBitSet[15] |= 1 << 6
			if err := func() error {
				v, err := json.DecodeUnixMilli(d)
				s.RequiredIntegerUnixMinusMilli = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer_unix-milli\"")
			}
		case "required_integer_unix-nano":
			requiredBitSet[15] |= 1 << 7
			if err := func() error {
				v, err := json.DecodeUnixNano(d)
				s.RequiredIntegerUnixMinusNano = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer_unix-nano\"")
			}
		case "required_integer_unix-seconds":
			requiredBitSet[16] |= 1 << 0
			if err := func() error {
				v, err := json.DecodeUnixSeconds(d)
				s.RequiredIntegerUnixMinusSeconds = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_integer_unix-seconds\"")
			}
		case "required_null":
			requiredBitSet[16] |= 1 << 1
			if err := func() error {
				if err := d.Null(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_null\"")
			}
		case "required_number":
			requiredBitSet[16] |= 1 << 2
			if err := func() error {
				v, err := d.Float64()
				s.RequiredNumber = float64(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_number\"")
			}
		case "required_number_double":
			requiredBitSet[16] |= 1 << 3
			if err := func() error {
				v, err := d.Float64()
				s.RequiredNumberDouble = float64(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_number_double\"")
			}
		case "required_number_float":
			requiredBitSet[16] |= 1 << 4
			if err := func() error {
				v, err := d.Float32()
				s.RequiredNumberFloat = float32(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_number_float\"")
			}
		case "required_number_int32":
			requiredBitSet[16] |= 1 << 5
			if err := func() error {
				v, err := d.Int32()
				s.RequiredNumberInt32 = int32(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_number_int32\"")
			}
		case "required_number_int64":
			requiredBitSet[16] |= 1 << 6
			if err := func() error {
				v, err := d.Int64()
				s.RequiredNumberInt64 = int64(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_number_int64\"")
			}
		case "required_string":
			requiredBitSet[16] |= 1 << 7
			if err := func() error {
				v, err := d.Str()
				s.RequiredString = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string\"")
			}
		case "required_string_base64":
			requiredBitSet[17] |= 1 << 0
			if err := func() error {
				v, err := d.Base64()
				s.RequiredStringBase64 = []byte(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_base64\"")
			}
		case "required_string_binary":
			requiredBitSet[17] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.RequiredStringBinary = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_binary\"")
			}
		case "required_string_byte":
			requiredBitSet[17] |= 1 << 2
			if err := func() error {
				v, err := d.Base64()
				s.RequiredStringByte = []byte(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_byte\"")
			}
		case "required_string_date":
			requiredBitSet[17] |= 1 << 3
			if err := func() error {
				v, err := json.DecodeDate(d)
				s.RequiredStringDate = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_date\"")
			}
		case "required_string_date-time":
			requiredBitSet[17] |= 1 << 4
			if err := func() error {
				v, err := json.DecodeDateTime(d)
				s.RequiredStringDateMinusTime = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_date-time\"")
			}
		case "required_string_duration":
			requiredBitSet[17] |= 1 << 5
			if err := func() error {
				v, err := json.DecodeDuration(d)
				s.RequiredStringDuration = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_duration\"")
			}
		case "required_string_email":
			requiredBitSet[17] |= 1 << 6
			if err := func() error {
				v, err := d.Str()
				s.RequiredStringEmail = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_email\"")
			}
		case "required_string_float32":
			requiredBitSet[17] |= 1 << 7
			if err := func() error {
				v, err := json.DecodeStringFloat32(d)
				s.RequiredStringFloat32 = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_float32\"")
			}
		case "required_string_float64":
			requiredBitSet[18] |= 1 << 0
			if err := func() error {
				v, err := json.DecodeStringFloat64(d)
				s.RequiredStringFloat64 = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_float64\"")
			}
		case "required_string_hostname":
			requiredBitSet[18] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.RequiredStringHostname = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_hostname\"")
			}
		case "required_string_int":
			requiredBitSet[18] |= 1 << 2
			if err := func() error {
				v, err := json.DecodeStringInt(d)
				s.RequiredStringInt = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_int\"")
			}
		case "required_string_int16":
			requiredBitSet[18] |= 1 << 3
			if err := func() error {
				v, err := json.DecodeStringInt16(d)
				s.RequiredStringInt16 = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_int16\"")
			}
		case "required_string_int32":
			requiredBitSet[18] |= 1 << 4
			if err := func() error {
				v, err := json.DecodeStringInt32(d)
				s.RequiredStringInt32 = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_int32\"")
			}
		case "required_string_int64":
			requiredBitSet[18] |= 1 << 5
			if err := func() error {
				v, err := json.DecodeStringInt64(d)
				s.RequiredStringInt64 = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_int64\"")
			}
		case "required_string_int8":
			requiredBitSet[18] |= 1 << 6
			if err := func() error {
				v, err := json.DecodeStringInt8(d)
				s.RequiredStringInt8 = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_int8\"")
			}
		case "required_string_ip":
			requiredBitSet[18] |= 1 << 7
			if err := func() error {
				v, err := json.DecodeIP(d)
				s.RequiredStringIP = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_ip\"")
			}
		case "required_string_ipv4":
			requiredBitSet[19] |= 1 << 0
			if err := func() error {
				v, err := json.DecodeIPv4(d)
				s.RequiredStringIpv4 = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_ipv4\"")
			}
		case "required_string_ipv6":
			requiredBitSet[19] |= 1 << 1
			if err := func() error {
				v, err := json.DecodeIPv6(d)
				s.RequiredStringIpv6 = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_ipv6\"")
			}
		case "required_string_password":
			requiredBitSet[19] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.RequiredStringPassword = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_password\"")
			}
		case "required_string_time":
			requiredBitSet[19] |= 1 << 3
			if err := func() error {
				v, err := json.DecodeTime(d)
				s.RequiredStringTime = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_time\"")
			}
		case "required_string_uint":
			requiredBitSet[19] |= 1 << 4
			if err := func() error {
				v, err := json.DecodeStringUint(d)
				s.RequiredStringUint = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_uint\"")
			}
		case "required_string_uint16":
			requiredBitSet[19] |= 1 << 5
			if err := func() error {
				v, err := json.DecodeStringUint16(d)
				s.RequiredStringUint16 = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_uint16\"")
			}
		case "required_string_uint32":
			requiredBitSet[19] |= 1 << 6
			if err := func() error {
				v, err := json.DecodeStringUint32(d)
				s.RequiredStringUint32 = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_uint32\"")
			}
		case "required_string_uint64":
			requiredBitSet[19] |= 1 << 7
			if err := func() error {
				v, err := json.DecodeStringUint64(d)
				s.RequiredStringUint64 = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_uint64\"")
			}
		case "required_string_uint8":
			requiredBitSet[20] |= 1 << 0
			if err := func() error {
				v, err := json.DecodeStringUint8(d)
				s.RequiredStringUint8 = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_uint8\"")
			}
		case "required_string_unix":
			requiredBitSet[20] |= 1 << 1
			if err := func() error {
				v, err := json.DecodeStringUnixSeconds(d)
				s.RequiredStringUnix = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_unix\"")
			}
		case "required_string_unix-micro":
			requiredBitSet[20] |= 1 << 2
			if err := func() error {
				v, err := json.DecodeStringUnixMicro(d)
				s.RequiredStringUnixMinusMicro = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_unix-micro\"")
			}
		case "required_string_unix-milli":
			requiredBitSet[20] |= 1 << 3
			if err := func() error {
				v, err := json.DecodeStringUnixMilli(d)
				s.RequiredStringUnixMinusMilli = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_unix-milli\"")
			}
		case "required_string_unix-nano":
			requiredBitSet[20] |= 1 << 4
			if err := func() error {
				v, err := json.DecodeStringUnixNano(d)
				s.RequiredStringUnixMinusNano = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_unix-nano\"")
			}
		case "required_string_unix-seconds":
			requiredBitSet[20] |= 1 << 5
			if err := func() error {
				v, err := json.DecodeStringUnixSeconds(d)
				s.RequiredStringUnixMinusSeconds = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_unix-seconds\"")
			}
		case "required_string_uri":
			requiredBitSet[20] |= 1 << 6
			if err := func() error {
				v, err := json.DecodeURI(d)
				s.RequiredStringURI = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_uri\"")
			}
		case "required_string_uuid":
			requiredBitSet[20] |= 1 << 7
			if err := func() error {
				v, err := json.DecodeUUID(d)
				s.RequiredStringUUID = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required_string_uuid\"")
			}
		case "optional_any":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.OptionalAny = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_any\"")
			}
		case "optional_array_any":
			if err := func() error {
				s.OptionalArrayAny = make([]jx.Raw, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem jx.Raw
					v, err := d.RawAppend(nil)
					elem = jx.Raw(v)
					if err != nil {
						return err
					}
					s.OptionalArrayAny = append(s.OptionalArrayAny, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_any\"")
			}
		case "optional_array_boolean":
			if err := func() error {
				s.OptionalArrayBoolean = make([]bool, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem bool
					v, err := d.Bool()
					elem = bool(v)
					if err != nil {
						return err
					}
					s.OptionalArrayBoolean = append(s.OptionalArrayBoolean, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_boolean\"")
			}
		case "optional_array_integer":
			if err := func() error {
				s.OptionalArrayInteger = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := d.Int()
					elem = int(v)
					if err != nil {
						return err
					}
					s.OptionalArrayInteger = append(s.OptionalArrayInteger, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer\"")
			}
		case "optional_array_integer_int16":
			if err := func() error {
				s.OptionalArrayIntegerInt16 = make([]int16, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int16
					v, err := d.Int16()
					elem = int16(v)
					if err != nil {
						return err
					}
					s.OptionalArrayIntegerInt16 = append(s.OptionalArrayIntegerInt16, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer_int16\"")
			}
		case "optional_array_integer_int32":
			if err := func() error {
				s.OptionalArrayIntegerInt32 = make([]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int32
					v, err := d.Int32()
					elem = int32(v)
					if err != nil {
						return err
					}
					s.OptionalArrayIntegerInt32 = append(s.OptionalArrayIntegerInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer_int32\"")
			}
		case "optional_array_integer_int64":
			if err := func() error {
				s.OptionalArrayIntegerInt64 = make([]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int64
					v, err := d.Int64()
					elem = int64(v)
					if err != nil {
						return err
					}
					s.OptionalArrayIntegerInt64 = append(s.OptionalArrayIntegerInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer_int64\"")
			}
		case "optional_array_integer_int8":
			if err := func() error {
				s.OptionalArrayIntegerInt8 = make([]int8, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int8
					v, err := d.Int8()
					elem = int8(v)
					if err != nil {
						return err
					}
					s.OptionalArrayIntegerInt8 = append(s.OptionalArrayIntegerInt8, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer_int8\"")
			}
		case "optional_array_integer_uint":
			if err := func() error {
				s.OptionalArrayIntegerUint = make([]uint, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint
					v, err := d.UInt()
					elem = uint(v)
					if err != nil {
						return err
					}
					s.OptionalArrayIntegerUint = append(s.OptionalArrayIntegerUint, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer_uint\"")
			}
		case "optional_array_integer_uint16":
			if err := func() error {
				s.OptionalArrayIntegerUint16 = make([]uint16, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint16
					v, err := d.UInt16()
					elem = uint16(v)
					if err != nil {
						return err
					}
					s.OptionalArrayIntegerUint16 = append(s.OptionalArrayIntegerUint16, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer_uint16\"")
			}
		case "optional_array_integer_uint32":
			if err := func() error {
				s.OptionalArrayIntegerUint32 = make([]uint32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint32
					v, err := d.UInt32()
					elem = uint32(v)
					if err != nil {
						return err
					}
					s.OptionalArrayIntegerUint32 = append(s.OptionalArrayIntegerUint32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer_uint32\"")
			}
		case "optional_array_integer_uint64":
			if err := func() error {
				s.OptionalArrayIntegerUint64 = make([]uint64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint64
					v, err := d.UInt64()
					elem = uint64(v)
					if err != nil {
						return err
					}
					s.OptionalArrayIntegerUint64 = append(s.OptionalArrayIntegerUint64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer_uint64\"")
			}
		case "optional_array_integer_uint8":
			if err := func() error {
				s.OptionalArrayIntegerUint8 = make([]uint8, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint8
					v, err := d.UInt8()
					elem = uint8(v)
					if err != nil {
						return err
					}
					s.OptionalArrayIntegerUint8 = append(s.OptionalArrayIntegerUint8, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer_uint8\"")
			}
		case "optional_array_integer_unix":
			if err := func() error {
				s.OptionalArrayIntegerUnix = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeUnixSeconds(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayIntegerUnix = append(s.OptionalArrayIntegerUnix, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer_unix\"")
			}
		case "optional_array_integer_unix-micro":
			if err := func() error {
				s.OptionalArrayIntegerUnixMinusMicro = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeUnixMicro(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayIntegerUnixMinusMicro = append(s.OptionalArrayIntegerUnixMinusMicro, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer_unix-micro\"")
			}
		case "optional_array_integer_unix-milli":
			if err := func() error {
				s.OptionalArrayIntegerUnixMinusMilli = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeUnixMilli(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayIntegerUnixMinusMilli = append(s.OptionalArrayIntegerUnixMinusMilli, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer_unix-milli\"")
			}
		case "optional_array_integer_unix-nano":
			if err := func() error {
				s.OptionalArrayIntegerUnixMinusNano = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeUnixNano(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayIntegerUnixMinusNano = append(s.OptionalArrayIntegerUnixMinusNano, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer_unix-nano\"")
			}
		case "optional_array_integer_unix-seconds":
			if err := func() error {
				s.OptionalArrayIntegerUnixMinusSeconds = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeUnixSeconds(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayIntegerUnixMinusSeconds = append(s.OptionalArrayIntegerUnixMinusSeconds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_integer_unix-seconds\"")
			}
		case "optional_array_null":
			if err := func() error {
				s.OptionalArrayNull = make([]struct{}, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem struct{}
					if err := d.Null(); err != nil {
						return err
					}
					s.OptionalArrayNull = append(s.OptionalArrayNull, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_null\"")
			}
		case "optional_array_number":
			if err := func() error {
				s.OptionalArrayNumber = make([]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem float64
					v, err := d.Float64()
					elem = float64(v)
					if err != nil {
						return err
					}
					s.OptionalArrayNumber = append(s.OptionalArrayNumber, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_number\"")
			}
		case "optional_array_number_double":
			if err := func() error {
				s.OptionalArrayNumberDouble = make([]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem float64
					v, err := d.Float64()
					elem = float64(v)
					if err != nil {
						return err
					}
					s.OptionalArrayNumberDouble = append(s.OptionalArrayNumberDouble, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_number_double\"")
			}
		case "optional_array_number_float":
			if err := func() error {
				s.OptionalArrayNumberFloat = make([]float32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem float32
					v, err := d.Float32()
					elem = float32(v)
					if err != nil {
						return err
					}
					s.OptionalArrayNumberFloat = append(s.OptionalArrayNumberFloat, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_number_float\"")
			}
		case "optional_array_number_int32":
			if err := func() error {
				s.OptionalArrayNumberInt32 = make([]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int32
					v, err := d.Int32()
					elem = int32(v)
					if err != nil {
						return err
					}
					s.OptionalArrayNumberInt32 = append(s.OptionalArrayNumberInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_number_int32\"")
			}
		case "optional_array_number_int64":
			if err := func() error {
				s.OptionalArrayNumberInt64 = make([]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int64
					v, err := d.Int64()
					elem = int64(v)
					if err != nil {
						return err
					}
					s.OptionalArrayNumberInt64 = append(s.OptionalArrayNumberInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_number_int64\"")
			}
		case "optional_array_string":
			if err := func() error {
				s.OptionalArrayString = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.OptionalArrayString = append(s.OptionalArrayString, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string\"")
			}
		case "optional_array_string_base64":
			if err := func() error {
				s.OptionalArrayStringBase64 = make([][]byte, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []byte
					v, err := d.Base64()
					elem = []byte(v)
					if err != nil {
						return err
					}
					s.OptionalArrayStringBase64 = append(s.OptionalArrayStringBase64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_base64\"")
			}
		case "optional_array_string_binary":
			if err := func() error {
				s.OptionalArrayStringBinary = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.OptionalArrayStringBinary = append(s.OptionalArrayStringBinary, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_binary\"")
			}
		case "optional_array_string_byte":
			if err := func() error {
				s.OptionalArrayStringByte = make([][]byte, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []byte
					v, err := d.Base64()
					elem = []byte(v)
					if err != nil {
						return err
					}
					s.OptionalArrayStringByte = append(s.OptionalArrayStringByte, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_byte\"")
			}
		case "optional_array_string_date":
			if err := func() error {
				s.OptionalArrayStringDate = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeDate(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringDate = append(s.OptionalArrayStringDate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_date\"")
			}
		case "optional_array_string_date-time":
			if err := func() error {
				s.OptionalArrayStringDateMinusTime = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeDateTime(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringDateMinusTime = append(s.OptionalArrayStringDateMinusTime, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_date-time\"")
			}
		case "optional_array_string_duration":
			if err := func() error {
				s.OptionalArrayStringDuration = make([]time.Duration, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Duration
					v, err := json.DecodeDuration(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringDuration = append(s.OptionalArrayStringDuration, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_duration\"")
			}
		case "optional_array_string_email":
			if err := func() error {
				s.OptionalArrayStringEmail = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.OptionalArrayStringEmail = append(s.OptionalArrayStringEmail, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_email\"")
			}
		case "optional_array_string_float32":
			if err := func() error {
				s.OptionalArrayStringFloat32 = make([]float32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem float32
					v, err := json.DecodeStringFloat32(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringFloat32 = append(s.OptionalArrayStringFloat32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_float32\"")
			}
		case "optional_array_string_float64":
			if err := func() error {
				s.OptionalArrayStringFloat64 = make([]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem float64
					v, err := json.DecodeStringFloat64(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringFloat64 = append(s.OptionalArrayStringFloat64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_float64\"")
			}
		case "optional_array_string_hostname":
			if err := func() error {
				s.OptionalArrayStringHostname = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.OptionalArrayStringHostname = append(s.OptionalArrayStringHostname, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_hostname\"")
			}
		case "optional_array_string_int":
			if err := func() error {
				s.OptionalArrayStringInt = make([]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int
					v, err := json.DecodeStringInt(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringInt = append(s.OptionalArrayStringInt, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_int\"")
			}
		case "optional_array_string_int16":
			if err := func() error {
				s.OptionalArrayStringInt16 = make([]int16, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int16
					v, err := json.DecodeStringInt16(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringInt16 = append(s.OptionalArrayStringInt16, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_int16\"")
			}
		case "optional_array_string_int32":
			if err := func() error {
				s.OptionalArrayStringInt32 = make([]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int32
					v, err := json.DecodeStringInt32(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringInt32 = append(s.OptionalArrayStringInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_int32\"")
			}
		case "optional_array_string_int64":
			if err := func() error {
				s.OptionalArrayStringInt64 = make([]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int64
					v, err := json.DecodeStringInt64(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringInt64 = append(s.OptionalArrayStringInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_int64\"")
			}
		case "optional_array_string_int8":
			if err := func() error {
				s.OptionalArrayStringInt8 = make([]int8, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem int8
					v, err := json.DecodeStringInt8(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringInt8 = append(s.OptionalArrayStringInt8, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_int8\"")
			}
		case "optional_array_string_ip":
			if err := func() error {
				s.OptionalArrayStringIP = make([]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem netip.Addr
					v, err := json.DecodeIP(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringIP = append(s.OptionalArrayStringIP, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_ip\"")
			}
		case "optional_array_string_ipv4":
			if err := func() error {
				s.OptionalArrayStringIpv4 = make([]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem netip.Addr
					v, err := json.DecodeIPv4(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringIpv4 = append(s.OptionalArrayStringIpv4, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_ipv4\"")
			}
		case "optional_array_string_ipv6":
			if err := func() error {
				s.OptionalArrayStringIpv6 = make([]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem netip.Addr
					v, err := json.DecodeIPv6(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringIpv6 = append(s.OptionalArrayStringIpv6, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_ipv6\"")
			}
		case "optional_array_string_password":
			if err := func() error {
				s.OptionalArrayStringPassword = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.OptionalArrayStringPassword = append(s.OptionalArrayStringPassword, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_password\"")
			}
		case "optional_array_string_time":
			if err := func() error {
				s.OptionalArrayStringTime = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeTime(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringTime = append(s.OptionalArrayStringTime, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_time\"")
			}
		case "optional_array_string_uint":
			if err := func() error {
				s.OptionalArrayStringUint = make([]uint, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint
					v, err := json.DecodeStringUint(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringUint = append(s.OptionalArrayStringUint, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_uint\"")
			}
		case "optional_array_string_uint16":
			if err := func() error {
				s.OptionalArrayStringUint16 = make([]uint16, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint16
					v, err := json.DecodeStringUint16(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringUint16 = append(s.OptionalArrayStringUint16, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_uint16\"")
			}
		case "optional_array_string_uint32":
			if err := func() error {
				s.OptionalArrayStringUint32 = make([]uint32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint32
					v, err := json.DecodeStringUint32(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringUint32 = append(s.OptionalArrayStringUint32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_uint32\"")
			}
		case "optional_array_string_uint64":
			if err := func() error {
				s.OptionalArrayStringUint64 = make([]uint64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint64
					v, err := json.DecodeStringUint64(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringUint64 = append(s.OptionalArrayStringUint64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_uint64\"")
			}
		case "optional_array_string_uint8":
			if err := func() error {
				s.OptionalArrayStringUint8 = make([]uint8, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uint8
					v, err := json.DecodeStringUint8(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringUint8 = append(s.OptionalArrayStringUint8, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_uint8\"")
			}
		case "optional_array_string_unix":
			if err := func() error {
				s.OptionalArrayStringUnix = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeStringUnixSeconds(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringUnix = append(s.OptionalArrayStringUnix, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_unix\"")
			}
		case "optional_array_string_unix-micro":
			if err := func() error {
				s.OptionalArrayStringUnixMinusMicro = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeStringUnixMicro(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringUnixMinusMicro = append(s.OptionalArrayStringUnixMinusMicro, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_unix-micro\"")
			}
		case "optional_array_string_unix-milli":
			if err := func() error {
				s.OptionalArrayStringUnixMinusMilli = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeStringUnixMilli(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringUnixMinusMilli = append(s.OptionalArrayStringUnixMinusMilli, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_unix-milli\"")
			}
		case "optional_array_string_unix-nano":
			if err := func() error {
				s.OptionalArrayStringUnixMinusNano = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeStringUnixNano(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringUnixMinusNano = append(s.OptionalArrayStringUnixMinusNano, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_unix-nano\"")
			}
		case "optional_array_string_unix-seconds":
			if err := func() error {
				s.OptionalArrayStringUnixMinusSeconds = make([]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem time.Time
					v, err := json.DecodeStringUnixSeconds(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringUnixMinusSeconds = append(s.OptionalArrayStringUnixMinusSeconds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_unix-seconds\"")
			}
		case "optional_array_string_uri":
			if err := func() error {
				s.OptionalArrayStringURI = make([]url.URL, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem url.URL
					v, err := json.DecodeURI(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringURI = append(s.OptionalArrayStringURI, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_uri\"")
			}
		case "optional_array_string_uuid":
			if err := func() error {
				s.OptionalArrayStringUUID = make([]uuid.UUID, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uuid.UUID
					v, err := json.DecodeUUID(d)
					elem = v
					if err != nil {
						return err
					}
					s.OptionalArrayStringUUID = append(s.OptionalArrayStringUUID, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_array_string_uuid\"")
			}
		case "optional_boolean":
			if err := func() error {
				s.OptionalBoolean.Reset()
				if err := s.OptionalBoolean.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_boolean\"")
			}
		case "optional_double_array_any":
			if err := func() error {
				s.OptionalDoubleArrayAny = make([][]jx.Raw, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []jx.Raw
					elem = make([]jx.Raw, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem jx.Raw
						v, err := d.RawAppend(nil)
						elemElem = jx.Raw(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayAny = append(s.OptionalDoubleArrayAny, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_any\"")
			}
		case "optional_double_array_boolean":
			if err := func() error {
				s.OptionalDoubleArrayBoolean = make([][]bool, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []bool
					elem = make([]bool, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem bool
						v, err := d.Bool()
						elemElem = bool(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayBoolean = append(s.OptionalDoubleArrayBoolean, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_boolean\"")
			}
		case "optional_double_array_integer":
			if err := func() error {
				s.OptionalDoubleArrayInteger = make([][]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int
					elem = make([]int, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int
						v, err := d.Int()
						elemElem = int(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayInteger = append(s.OptionalDoubleArrayInteger, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer\"")
			}
		case "optional_double_array_integer_int16":
			if err := func() error {
				s.OptionalDoubleArrayIntegerInt16 = make([][]int16, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int16
					elem = make([]int16, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int16
						v, err := d.Int16()
						elemElem = int16(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayIntegerInt16 = append(s.OptionalDoubleArrayIntegerInt16, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer_int16\"")
			}
		case "optional_double_array_integer_int32":
			if err := func() error {
				s.OptionalDoubleArrayIntegerInt32 = make([][]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int32
					elem = make([]int32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int32
						v, err := d.Int32()
						elemElem = int32(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayIntegerInt32 = append(s.OptionalDoubleArrayIntegerInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer_int32\"")
			}
		case "optional_double_array_integer_int64":
			if err := func() error {
				s.OptionalDoubleArrayIntegerInt64 = make([][]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int64
					elem = make([]int64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int64
						v, err := d.Int64()
						elemElem = int64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayIntegerInt64 = append(s.OptionalDoubleArrayIntegerInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer_int64\"")
			}
		case "optional_double_array_integer_int8":
			if err := func() error {
				s.OptionalDoubleArrayIntegerInt8 = make([][]int8, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int8
					elem = make([]int8, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int8
						v, err := d.Int8()
						elemElem = int8(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayIntegerInt8 = append(s.OptionalDoubleArrayIntegerInt8, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer_int8\"")
			}
		case "optional_double_array_integer_uint":
			if err := func() error {
				s.OptionalDoubleArrayIntegerUint = make([][]uint, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint
					elem = make([]uint, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint
						v, err := d.UInt()
						elemElem = uint(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayIntegerUint = append(s.OptionalDoubleArrayIntegerUint, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer_uint\"")
			}
		case "optional_double_array_integer_uint16":
			if err := func() error {
				s.OptionalDoubleArrayIntegerUint16 = make([][]uint16, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint16
					elem = make([]uint16, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint16
						v, err := d.UInt16()
						elemElem = uint16(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayIntegerUint16 = append(s.OptionalDoubleArrayIntegerUint16, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer_uint16\"")
			}
		case "optional_double_array_integer_uint32":
			if err := func() error {
				s.OptionalDoubleArrayIntegerUint32 = make([][]uint32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint32
					elem = make([]uint32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint32
						v, err := d.UInt32()
						elemElem = uint32(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayIntegerUint32 = append(s.OptionalDoubleArrayIntegerUint32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer_uint32\"")
			}
		case "optional_double_array_integer_uint64":
			if err := func() error {
				s.OptionalDoubleArrayIntegerUint64 = make([][]uint64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint64
					elem = make([]uint64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint64
						v, err := d.UInt64()
						elemElem = uint64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayIntegerUint64 = append(s.OptionalDoubleArrayIntegerUint64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer_uint64\"")
			}
		case "optional_double_array_integer_uint8":
			if err := func() error {
				s.OptionalDoubleArrayIntegerUint8 = make([][]uint8, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint8
					elem = make([]uint8, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint8
						v, err := d.UInt8()
						elemElem = uint8(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayIntegerUint8 = append(s.OptionalDoubleArrayIntegerUint8, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer_uint8\"")
			}
		case "optional_double_array_integer_unix":
			if err := func() error {
				s.OptionalDoubleArrayIntegerUnix = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeUnixSeconds(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayIntegerUnix = append(s.OptionalDoubleArrayIntegerUnix, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer_unix\"")
			}
		case "optional_double_array_integer_unix-micro":
			if err := func() error {
				s.OptionalDoubleArrayIntegerUnixMinusMicro = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeUnixMicro(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayIntegerUnixMinusMicro = append(s.OptionalDoubleArrayIntegerUnixMinusMicro, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer_unix-micro\"")
			}
		case "optional_double_array_integer_unix-milli":
			if err := func() error {
				s.OptionalDoubleArrayIntegerUnixMinusMilli = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeUnixMilli(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayIntegerUnixMinusMilli = append(s.OptionalDoubleArrayIntegerUnixMinusMilli, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer_unix-milli\"")
			}
		case "optional_double_array_integer_unix-nano":
			if err := func() error {
				s.OptionalDoubleArrayIntegerUnixMinusNano = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeUnixNano(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayIntegerUnixMinusNano = append(s.OptionalDoubleArrayIntegerUnixMinusNano, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer_unix-nano\"")
			}
		case "optional_double_array_integer_unix-seconds":
			if err := func() error {
				s.OptionalDoubleArrayIntegerUnixMinusSeconds = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeUnixSeconds(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayIntegerUnixMinusSeconds = append(s.OptionalDoubleArrayIntegerUnixMinusSeconds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_integer_unix-seconds\"")
			}
		case "optional_double_array_null":
			if err := func() error {
				s.OptionalDoubleArrayNull = make([][]struct{}, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []struct{}
					elem = make([]struct{}, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem struct{}
						if err := d.Null(); err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayNull = append(s.OptionalDoubleArrayNull, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_null\"")
			}
		case "optional_double_array_number":
			if err := func() error {
				s.OptionalDoubleArrayNumber = make([][]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []float64
					elem = make([]float64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem float64
						v, err := d.Float64()
						elemElem = float64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayNumber = append(s.OptionalDoubleArrayNumber, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_number\"")
			}
		case "optional_double_array_number_double":
			if err := func() error {
				s.OptionalDoubleArrayNumberDouble = make([][]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []float64
					elem = make([]float64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem float64
						v, err := d.Float64()
						elemElem = float64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayNumberDouble = append(s.OptionalDoubleArrayNumberDouble, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_number_double\"")
			}
		case "optional_double_array_number_float":
			if err := func() error {
				s.OptionalDoubleArrayNumberFloat = make([][]float32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []float32
					elem = make([]float32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem float32
						v, err := d.Float32()
						elemElem = float32(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayNumberFloat = append(s.OptionalDoubleArrayNumberFloat, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_number_float\"")
			}
		case "optional_double_array_number_int32":
			if err := func() error {
				s.OptionalDoubleArrayNumberInt32 = make([][]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int32
					elem = make([]int32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int32
						v, err := d.Int32()
						elemElem = int32(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayNumberInt32 = append(s.OptionalDoubleArrayNumberInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_number_int32\"")
			}
		case "optional_double_array_number_int64":
			if err := func() error {
				s.OptionalDoubleArrayNumberInt64 = make([][]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int64
					elem = make([]int64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int64
						v, err := d.Int64()
						elemElem = int64(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayNumberInt64 = append(s.OptionalDoubleArrayNumberInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_number_int64\"")
			}
		case "optional_double_array_string":
			if err := func() error {
				s.OptionalDoubleArrayString = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayString = append(s.OptionalDoubleArrayString, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string\"")
			}
		case "optional_double_array_string_base64":
			if err := func() error {
				s.OptionalDoubleArrayStringBase64 = make([][][]byte, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem [][]byte
					elem = make([][]byte, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem []byte
						v, err := d.Base64()
						elemElem = []byte(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringBase64 = append(s.OptionalDoubleArrayStringBase64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_base64\"")
			}
		case "optional_double_array_string_binary":
			if err := func() error {
				s.OptionalDoubleArrayStringBinary = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringBinary = append(s.OptionalDoubleArrayStringBinary, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_binary\"")
			}
		case "optional_double_array_string_byte":
			if err := func() error {
				s.OptionalDoubleArrayStringByte = make([][][]byte, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem [][]byte
					elem = make([][]byte, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem []byte
						v, err := d.Base64()
						elemElem = []byte(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringByte = append(s.OptionalDoubleArrayStringByte, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_byte\"")
			}
		case "optional_double_array_string_date":
			if err := func() error {
				s.OptionalDoubleArrayStringDate = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeDate(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringDate = append(s.OptionalDoubleArrayStringDate, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_date\"")
			}
		case "optional_double_array_string_date-time":
			if err := func() error {
				s.OptionalDoubleArrayStringDateMinusTime = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeDateTime(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringDateMinusTime = append(s.OptionalDoubleArrayStringDateMinusTime, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_date-time\"")
			}
		case "optional_double_array_string_duration":
			if err := func() error {
				s.OptionalDoubleArrayStringDuration = make([][]time.Duration, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Duration
					elem = make([]time.Duration, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Duration
						v, err := json.DecodeDuration(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringDuration = append(s.OptionalDoubleArrayStringDuration, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_duration\"")
			}
		case "optional_double_array_string_email":
			if err := func() error {
				s.OptionalDoubleArrayStringEmail = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringEmail = append(s.OptionalDoubleArrayStringEmail, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_email\"")
			}
		case "optional_double_array_string_float32":
			if err := func() error {
				s.OptionalDoubleArrayStringFloat32 = make([][]float32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []float32
					elem = make([]float32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem float32
						v, err := json.DecodeStringFloat32(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringFloat32 = append(s.OptionalDoubleArrayStringFloat32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_float32\"")
			}
		case "optional_double_array_string_float64":
			if err := func() error {
				s.OptionalDoubleArrayStringFloat64 = make([][]float64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []float64
					elem = make([]float64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem float64
						v, err := json.DecodeStringFloat64(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringFloat64 = append(s.OptionalDoubleArrayStringFloat64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_float64\"")
			}
		case "optional_double_array_string_hostname":
			if err := func() error {
				s.OptionalDoubleArrayStringHostname = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringHostname = append(s.OptionalDoubleArrayStringHostname, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_hostname\"")
			}
		case "optional_double_array_string_int":
			if err := func() error {
				s.OptionalDoubleArrayStringInt = make([][]int, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int
					elem = make([]int, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int
						v, err := json.DecodeStringInt(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringInt = append(s.OptionalDoubleArrayStringInt, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_int\"")
			}
		case "optional_double_array_string_int16":
			if err := func() error {
				s.OptionalDoubleArrayStringInt16 = make([][]int16, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int16
					elem = make([]int16, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int16
						v, err := json.DecodeStringInt16(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringInt16 = append(s.OptionalDoubleArrayStringInt16, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_int16\"")
			}
		case "optional_double_array_string_int32":
			if err := func() error {
				s.OptionalDoubleArrayStringInt32 = make([][]int32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int32
					elem = make([]int32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int32
						v, err := json.DecodeStringInt32(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringInt32 = append(s.OptionalDoubleArrayStringInt32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_int32\"")
			}
		case "optional_double_array_string_int64":
			if err := func() error {
				s.OptionalDoubleArrayStringInt64 = make([][]int64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int64
					elem = make([]int64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int64
						v, err := json.DecodeStringInt64(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringInt64 = append(s.OptionalDoubleArrayStringInt64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_int64\"")
			}
		case "optional_double_array_string_int8":
			if err := func() error {
				s.OptionalDoubleArrayStringInt8 = make([][]int8, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []int8
					elem = make([]int8, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem int8
						v, err := json.DecodeStringInt8(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringInt8 = append(s.OptionalDoubleArrayStringInt8, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_int8\"")
			}
		case "optional_double_array_string_ip":
			if err := func() error {
				s.OptionalDoubleArrayStringIP = make([][]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []netip.Addr
					elem = make([]netip.Addr, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem netip.Addr
						v, err := json.DecodeIP(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringIP = append(s.OptionalDoubleArrayStringIP, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_ip\"")
			}
		case "optional_double_array_string_ipv4":
			if err := func() error {
				s.OptionalDoubleArrayStringIpv4 = make([][]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []netip.Addr
					elem = make([]netip.Addr, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem netip.Addr
						v, err := json.DecodeIPv4(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringIpv4 = append(s.OptionalDoubleArrayStringIpv4, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_ipv4\"")
			}
		case "optional_double_array_string_ipv6":
			if err := func() error {
				s.OptionalDoubleArrayStringIpv6 = make([][]netip.Addr, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []netip.Addr
					elem = make([]netip.Addr, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem netip.Addr
						v, err := json.DecodeIPv6(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringIpv6 = append(s.OptionalDoubleArrayStringIpv6, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_ipv6\"")
			}
		case "optional_double_array_string_password":
			if err := func() error {
				s.OptionalDoubleArrayStringPassword = make([][]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []string
					elem = make([]string, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem string
						v, err := d.Str()
						elemElem = string(v)
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringPassword = append(s.OptionalDoubleArrayStringPassword, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_password\"")
			}
		case "optional_double_array_string_time":
			if err := func() error {
				s.OptionalDoubleArrayStringTime = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeTime(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringTime = append(s.OptionalDoubleArrayStringTime, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_time\"")
			}
		case "optional_double_array_string_uint":
			if err := func() error {
				s.OptionalDoubleArrayStringUint = make([][]uint, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint
					elem = make([]uint, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint
						v, err := json.DecodeStringUint(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringUint = append(s.OptionalDoubleArrayStringUint, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_uint\"")
			}
		case "optional_double_array_string_uint16":
			if err := func() error {
				s.OptionalDoubleArrayStringUint16 = make([][]uint16, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint16
					elem = make([]uint16, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint16
						v, err := json.DecodeStringUint16(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringUint16 = append(s.OptionalDoubleArrayStringUint16, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_uint16\"")
			}
		case "optional_double_array_string_uint32":
			if err := func() error {
				s.OptionalDoubleArrayStringUint32 = make([][]uint32, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint32
					elem = make([]uint32, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint32
						v, err := json.DecodeStringUint32(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringUint32 = append(s.OptionalDoubleArrayStringUint32, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_uint32\"")
			}
		case "optional_double_array_string_uint64":
			if err := func() error {
				s.OptionalDoubleArrayStringUint64 = make([][]uint64, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint64
					elem = make([]uint64, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint64
						v, err := json.DecodeStringUint64(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringUint64 = append(s.OptionalDoubleArrayStringUint64, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_uint64\"")
			}
		case "optional_double_array_string_uint8":
			if err := func() error {
				s.OptionalDoubleArrayStringUint8 = make([][]uint8, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uint8
					elem = make([]uint8, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uint8
						v, err := json.DecodeStringUint8(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringUint8 = append(s.OptionalDoubleArrayStringUint8, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_uint8\"")
			}
		case "optional_double_array_string_unix":
			if err := func() error {
				s.OptionalDoubleArrayStringUnix = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeStringUnixSeconds(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringUnix = append(s.OptionalDoubleArrayStringUnix, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_unix\"")
			}
		case "optional_double_array_string_unix-micro":
			if err := func() error {
				s.OptionalDoubleArrayStringUnixMinusMicro = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeStringUnixMicro(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringUnixMinusMicro = append(s.OptionalDoubleArrayStringUnixMinusMicro, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_unix-micro\"")
			}
		case "optional_double_array_string_unix-milli":
			if err := func() error {
				s.OptionalDoubleArrayStringUnixMinusMilli = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeStringUnixMilli(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringUnixMinusMilli = append(s.OptionalDoubleArrayStringUnixMinusMilli, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_unix-milli\"")
			}
		case "optional_double_array_string_unix-nano":
			if err := func() error {
				s.OptionalDoubleArrayStringUnixMinusNano = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeStringUnixNano(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringUnixMinusNano = append(s.OptionalDoubleArrayStringUnixMinusNano, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_unix-nano\"")
			}
		case "optional_double_array_string_unix-seconds":
			if err := func() error {
				s.OptionalDoubleArrayStringUnixMinusSeconds = make([][]time.Time, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []time.Time
					elem = make([]time.Time, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem time.Time
						v, err := json.DecodeStringUnixSeconds(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringUnixMinusSeconds = append(s.OptionalDoubleArrayStringUnixMinusSeconds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_unix-seconds\"")
			}
		case "optional_double_array_string_uri":
			if err := func() error {
				s.OptionalDoubleArrayStringURI = make([][]url.URL, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []url.URL
					elem = make([]url.URL, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem url.URL
						v, err := json.DecodeURI(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringURI = append(s.OptionalDoubleArrayStringURI, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_uri\"")
			}
		case "optional_double_array_string_uuid":
			if err := func() error {
				s.OptionalDoubleArrayStringUUID = make([][]uuid.UUID, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem []uuid.UUID
					elem = make([]uuid.UUID, 0)
					if err := d.Arr(func(d *jx.Decoder) error {
						var elemElem uuid.UUID
						v, err := json.DecodeUUID(d)
						elemElem = v
						if err != nil {
							return err
						}
						elem = append(elem, elemElem)
						return nil
					}); err != nil {
						return err
					}
					s.OptionalDoubleArrayStringUUID = append(s.OptionalDoubleArrayStringUUID, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_double_array_string_uuid\"")
			}
		case "optional_integer":
			if err := func() error {
				s.OptionalInteger.Reset()
				if err := s.OptionalInteger.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer\"")
			}
		case "optional_integer_int16":
			if err := func() error {
				s.OptionalIntegerInt16.Reset()
				if err := s.OptionalIntegerInt16.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer_int16\"")
			}
		case "optional_integer_int32":
			if err := func() error {
				s.OptionalIntegerInt32.Reset()
				if err := s.OptionalIntegerInt32.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer_int32\"")
			}
		case "optional_integer_int64":
			if err := func() error {
				s.OptionalIntegerInt64.Reset()
				if err := s.OptionalIntegerInt64.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer_int64\"")
			}
		case "optional_integer_int8":
			if err := func() error {
				s.OptionalIntegerInt8.Reset()
				if err := s.OptionalIntegerInt8.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer_int8\"")
			}
		case "optional_integer_uint":
			if err := func() error {
				s.OptionalIntegerUint.Reset()
				if err := s.OptionalIntegerUint.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer_uint\"")
			}
		case "optional_integer_uint16":
			if err := func() error {
				s.OptionalIntegerUint16.Reset()
				if err := s.OptionalIntegerUint16.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer_uint16\"")
			}
		case "optional_integer_uint32":
			if err := func() error {
				s.OptionalIntegerUint32.Reset()
				if err := s.OptionalIntegerUint32.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer_uint32\"")
			}
		case "optional_integer_uint64":
			if err := func() error {
				s.OptionalIntegerUint64.Reset()
				if err := s.OptionalIntegerUint64.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer_uint64\"")
			}
		case "optional_integer_uint8":
			if err := func() error {
				s.OptionalIntegerUint8.Reset()
				if err := s.OptionalIntegerUint8.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer_uint8\"")
			}
		case "optional_integer_unix":
			if err := func() error {
				s.OptionalIntegerUnix.Reset()
				if err := s.OptionalIntegerUnix.Decode(d, json.DecodeUnixSeconds); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer_unix\"")
			}
		case "optional_integer_unix-micro":
			if err := func() error {
				s.OptionalIntegerUnixMinusMicro.Reset()
				if err := s.OptionalIntegerUnixMinusMicro.Decode(d, json.DecodeUnixMicro); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer_unix-micro\"")
			}
		case "optional_integer_unix-milli":
			if err := func() error {
				s.OptionalIntegerUnixMinusMilli.Reset()
				if err := s.OptionalIntegerUnixMinusMilli.Decode(d, json.DecodeUnixMilli); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer_unix-milli\"")
			}
		case "optional_integer_unix-nano":
			if err := func() error {
				s.OptionalIntegerUnixMinusNano.Reset()
				if err := s.OptionalIntegerUnixMinusNano.Decode(d, json.DecodeUnixNano); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer_unix-nano\"")
			}
		case "optional_integer_unix-seconds":
			if err := func() error {
				s.OptionalIntegerUnixMinusSeconds.Reset()
				if err := s.OptionalIntegerUnixMinusSeconds.Decode(d, json.DecodeUnixSeconds); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_integer_unix-seconds\"")
			}
		case "optional_null":
			if err := func() error {
				s.OptionalNull.Reset()
				if err := s.OptionalNull.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_null\"")
			}
		case "optional_number":
			if err := func() error {
				s.OptionalNumber.Reset()
				if err := s.OptionalNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_number\"")
			}
		case "optional_number_double":
			if err := func() error {
				s.OptionalNumberDouble.Reset()
				if err := s.OptionalNumberDouble.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_number_double\"")
			}
		case "optional_number_float":
			if err := func() error {
				s.OptionalNumberFloat.Reset()
				if err := s.OptionalNumberFloat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_number_float\"")
			}
		case "optional_number_int32":
			if err := func() error {
				s.OptionalNumberInt32.Reset()
				if err := s.OptionalNumberInt32.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_number_int32\"")
			}
		case "optional_number_int64":
			if err := func() error {
				s.OptionalNumberInt64.Reset()
				if err := s.OptionalNumberInt64.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_number_int64\"")
			}
		case "optional_string":
			if err := func() error {
				s.OptionalString.Reset()
				if err := s.OptionalString.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string\"")
			}
		case "optional_string_base64":
			if err := func() error {
				v, err := d.Base64()
				s.OptionalStringBase64 = []byte(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_base64\"")
			}
		case "optional_string_binary":
			if err := func() error {
				s.OptionalStringBinary.Reset()
				if err := s.OptionalStringBinary.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_binary\"")
			}
		case "optional_string_byte":
			if err := func() error {
				v, err := d.Base64()
				s.OptionalStringByte = []byte(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_byte\"")
			}
		case "optional_string_date":
			if err := func() error {
				s.OptionalStringDate.Reset()
				if err := s.OptionalStringDate.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_date\"")
			}
		case "optional_string_date-time":
			if err := func() error {
				s.OptionalStringDateMinusTime.Reset()
				if err := s.OptionalStringDateMinusTime.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_date-time\"")
			}
		case "optional_string_duration":
			if err := func() error {
				s.OptionalStringDuration.Reset()
				if err := s.OptionalStringDuration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_duration\"")
			}
		case "optional_string_email":
			if err := func() error {
				s.OptionalStringEmail.Reset()
				if err := s.OptionalStringEmail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_email\"")
			}
		case "optional_string_float32":
			if err := func() error {
				s.OptionalStringFloat32.Reset()
				if err := s.OptionalStringFloat32.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_float32\"")
			}
		case "optional_string_float64":
			if err := func() error {
				s.OptionalStringFloat64.Reset()
				if err := s.OptionalStringFloat64.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_float64\"")
			}
		case "optional_string_hostname":
			if err := func() error {
				s.OptionalStringHostname.Reset()
				if err := s.OptionalStringHostname.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_hostname\"")
			}
		case "optional_string_int":
			if err := func() error {
				s.OptionalStringInt.Reset()
				if err := s.OptionalStringInt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_int\"")
			}
		case "optional_string_int16":
			if err := func() error {
				s.OptionalStringInt16.Reset()
				if err := s.OptionalStringInt16.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_int16\"")
			}
		case "optional_string_int32":
			if err := func() error {
				s.OptionalStringInt32.Reset()
				if err := s.OptionalStringInt32.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_int32\"")
			}
		case "optional_string_int64":
			if err := func() error {
				s.OptionalStringInt64.Reset()
				if err := s.OptionalStringInt64.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_int64\"")
			}
		case "optional_string_int8":
			if err := func() error {
				s.OptionalStringInt8.Reset()
				if err := s.OptionalStringInt8.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_int8\"")
			}
		case "optional_string_ip":
			if err := func() error {
				s.OptionalStringIP.Reset()
				if err := s.OptionalStringIP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_ip\"")
			}
		case "optional_string_ipv4":
			if err := func() error {
				s.OptionalStringIpv4.Reset()
				if err := s.OptionalStringIpv4.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_ipv4\"")
			}
		case "optional_string_ipv6":
			if err := func() error {
				s.OptionalStringIpv6.Reset()
				if err := s.OptionalStringIpv6.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_ipv6\"")
			}
		case "optional_string_password":
			if err := func() error {
				s.OptionalStringPassword.Reset()
				if err := s.OptionalStringPassword.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_password\"")
			}
		case "optional_string_time":
			if err := func() error {
				s.OptionalStringTime.Reset()
				if err := s.OptionalStringTime.Decode(d, json.DecodeTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_time\"")
			}
		case "optional_string_uint":
			if err := func() error {
				s.OptionalStringUint.Reset()
				if err := s.OptionalStringUint.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_uint\"")
			}
		case "optional_string_uint16":
			if err := func() error {
				s.OptionalStringUint16.Reset()
				if err := s.OptionalStringUint16.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_uint16\"")
			}
		case "optional_string_uint32":
			if err := func() error {
				s.OptionalStringUint32.Reset()
				if err := s.OptionalStringUint32.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_uint32\"")
			}
		case "optional_string_uint64":
			if err := func() error {
				s.OptionalStringUint64.Reset()
				if err := s.OptionalStringUint64.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_uint64\"")
			}
		case "optional_string_uint8":
			if err := func() error {
				s.OptionalStringUint8.Reset()
				if err := s.OptionalStringUint8.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_uint8\"")
			}
		case "optional_string_unix":
			if err := func() error {
				s.OptionalStringUnix.Reset()
				if err := s.OptionalStringUnix.Decode(d, json.DecodeStringUnixSeconds); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_unix\"")
			}
		case "optional_string_unix-micro":
			if err := func() error {
				s.OptionalStringUnixMinusMicro.Reset()
				if err := s.OptionalStringUnixMinusMicro.Decode(d, json.DecodeStringUnixMicro); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_unix-micro\"")
			}
		case "optional_string_unix-milli":
			if err := func() error {
				s.OptionalStringUnixMinusMilli.Reset()
				if err := s.OptionalStringUnixMinusMilli.Decode(d, json.DecodeStringUnixMilli); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_unix-milli\"")
			}
		case "optional_string_unix-nano":
			if err := func() error {
				s.OptionalStringUnixMinusNano.Reset()
				if err := s.OptionalStringUnixMinusNano.Decode(d, json.DecodeStringUnixNano); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_unix-nano\"")
			}
		case "optional_string_unix-seconds":
			if err := func() error {
				s.OptionalStringUnixMinusSeconds.Reset()
				if err := s.OptionalStringUnixMinusSeconds.Decode(d, json.DecodeStringUnixSeconds); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_unix-seconds\"")
			}
		case "optional_string_uri":
			if err := func() error {
				s.OptionalStringURI.Reset()
				if err := s.OptionalStringURI.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_uri\"")
			}
		case "optional_string_uuid":
			if err := func() error {
				s.OptionalStringUUID.Reset()
				if err := s.OptionalStringUUID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"optional_string_uuid\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TestResponseFormatTestOK")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [42]uint8{
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b11111111,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfTestResponseFormatTestOK) {
					name = jsonFieldsNameOfTestResponseFormatTestOK[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TestResponseFormatTestOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TestResponseFormatTestOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

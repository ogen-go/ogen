// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"time"

	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"

	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/otelogen"
)

// HandleTestRequestAnyRequest handles test_request_Any operation.
//
// POST /test_request_Any
func (s *Server) handleTestRequestAnyRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_Any"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestAny",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestAnyRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestAny",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestAny(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestAnyResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestBooleanRequest handles test_request_boolean operation.
//
// POST /test_request_boolean
func (s *Server) handleTestRequestBooleanRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_boolean"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestBoolean",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestBooleanRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestBoolean",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestBoolean(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestBooleanResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestBooleanArrayRequest handles test_request_boolean_array operation.
//
// POST /test_request_boolean_array
func (s *Server) handleTestRequestBooleanArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_boolean_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestBooleanArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestBooleanArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestBooleanArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestBooleanArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestBooleanArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestBooleanArrayArrayRequest handles test_request_boolean_array_array operation.
//
// POST /test_request_boolean_array_array
func (s *Server) handleTestRequestBooleanArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_boolean_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestBooleanArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestBooleanArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestBooleanArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestBooleanArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestBooleanArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestBooleanNullableRequest handles test_request_boolean_nullable operation.
//
// POST /test_request_boolean_nullable
func (s *Server) handleTestRequestBooleanNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_boolean_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestBooleanNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestBooleanNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestBooleanNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestBooleanNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestBooleanNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestBooleanNullableArrayRequest handles test_request_boolean_nullable_array operation.
//
// POST /test_request_boolean_nullable_array
func (s *Server) handleTestRequestBooleanNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_boolean_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestBooleanNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestBooleanNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestBooleanNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestBooleanNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestBooleanNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestBooleanNullableArrayArrayRequest handles test_request_boolean_nullable_array_array operation.
//
// POST /test_request_boolean_nullable_array_array
func (s *Server) handleTestRequestBooleanNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_boolean_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestBooleanNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestBooleanNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestBooleanNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestBooleanNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestBooleanNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestEmptyStructRequest handles test_request_EmptyStruct operation.
//
// POST /test_request_EmptyStruct
func (s *Server) handleTestRequestEmptyStructRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_EmptyStruct"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestEmptyStruct",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestEmptyStructRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestEmptyStruct",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestEmptyStruct(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestEmptyStructResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestFormatTestRequest handles test_request_FormatTest operation.
//
// POST /test_request_FormatTest
func (s *Server) handleTestRequestFormatTestRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_FormatTest"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestFormatTest",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestFormatTestRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestFormatTest",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestFormatTest(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestFormatTestResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestIntegerRequest handles test_request_integer operation.
//
// POST /test_request_integer
func (s *Server) handleTestRequestIntegerRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestInteger",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestIntegerRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestInteger",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestInteger(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestIntegerResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestIntegerArrayRequest handles test_request_integer_array operation.
//
// POST /test_request_integer_array
func (s *Server) handleTestRequestIntegerArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestIntegerArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestIntegerArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestIntegerArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestIntegerArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestIntegerArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestIntegerArrayArrayRequest handles test_request_integer_array_array operation.
//
// POST /test_request_integer_array_array
func (s *Server) handleTestRequestIntegerArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestIntegerArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestIntegerArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestIntegerArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestIntegerArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestIntegerArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestIntegerInt32Request handles test_request_integer_int32 operation.
//
// POST /test_request_integer_int32
func (s *Server) handleTestRequestIntegerInt32Request(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_int32"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestIntegerInt32",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestIntegerInt32Request(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestIntegerInt32",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestIntegerInt32(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestIntegerInt32Response(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestIntegerInt32ArrayRequest handles test_request_integer_int32_array operation.
//
// POST /test_request_integer_int32_array
func (s *Server) handleTestRequestIntegerInt32ArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_int32_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestIntegerInt32Array",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestIntegerInt32ArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestIntegerInt32Array",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestIntegerInt32Array(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestIntegerInt32ArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestIntegerInt32ArrayArrayRequest handles test_request_integer_int32_array_array operation.
//
// POST /test_request_integer_int32_array_array
func (s *Server) handleTestRequestIntegerInt32ArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_int32_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestIntegerInt32ArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestIntegerInt32ArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestIntegerInt32ArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestIntegerInt32ArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestIntegerInt32ArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestIntegerInt32NullableRequest handles test_request_integer_int32_nullable operation.
//
// POST /test_request_integer_int32_nullable
func (s *Server) handleTestRequestIntegerInt32NullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_int32_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestIntegerInt32Nullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestIntegerInt32NullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestIntegerInt32Nullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestIntegerInt32Nullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestIntegerInt32NullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestIntegerInt32NullableArrayRequest handles test_request_integer_int32_nullable_array operation.
//
// POST /test_request_integer_int32_nullable_array
func (s *Server) handleTestRequestIntegerInt32NullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_int32_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestIntegerInt32NullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestIntegerInt32NullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestIntegerInt32NullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestIntegerInt32NullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestIntegerInt32NullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestIntegerInt32NullableArrayArrayRequest handles test_request_integer_int32_nullable_array_array operation.
//
// POST /test_request_integer_int32_nullable_array_array
func (s *Server) handleTestRequestIntegerInt32NullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_int32_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestIntegerInt32NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestIntegerInt32NullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestIntegerInt32NullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestIntegerInt32NullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestIntegerInt32NullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestIntegerInt64Request handles test_request_integer_int64 operation.
//
// POST /test_request_integer_int64
func (s *Server) handleTestRequestIntegerInt64Request(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_int64"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestIntegerInt64",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestIntegerInt64Request(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestIntegerInt64",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestIntegerInt64(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestIntegerInt64Response(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestIntegerInt64ArrayRequest handles test_request_integer_int64_array operation.
//
// POST /test_request_integer_int64_array
func (s *Server) handleTestRequestIntegerInt64ArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_int64_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestIntegerInt64Array",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestIntegerInt64ArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestIntegerInt64Array",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestIntegerInt64Array(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestIntegerInt64ArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestIntegerInt64ArrayArrayRequest handles test_request_integer_int64_array_array operation.
//
// POST /test_request_integer_int64_array_array
func (s *Server) handleTestRequestIntegerInt64ArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_int64_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestIntegerInt64ArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestIntegerInt64ArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestIntegerInt64ArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestIntegerInt64ArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestIntegerInt64ArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestIntegerInt64NullableRequest handles test_request_integer_int64_nullable operation.
//
// POST /test_request_integer_int64_nullable
func (s *Server) handleTestRequestIntegerInt64NullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_int64_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestIntegerInt64Nullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestIntegerInt64NullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestIntegerInt64Nullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestIntegerInt64Nullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestIntegerInt64NullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestIntegerInt64NullableArrayRequest handles test_request_integer_int64_nullable_array operation.
//
// POST /test_request_integer_int64_nullable_array
func (s *Server) handleTestRequestIntegerInt64NullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_int64_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestIntegerInt64NullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestIntegerInt64NullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestIntegerInt64NullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestIntegerInt64NullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestIntegerInt64NullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestIntegerInt64NullableArrayArrayRequest handles test_request_integer_int64_nullable_array_array operation.
//
// POST /test_request_integer_int64_nullable_array_array
func (s *Server) handleTestRequestIntegerInt64NullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_int64_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestIntegerInt64NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestIntegerInt64NullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestIntegerInt64NullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestIntegerInt64NullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestIntegerInt64NullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestIntegerNullableRequest handles test_request_integer_nullable operation.
//
// POST /test_request_integer_nullable
func (s *Server) handleTestRequestIntegerNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestIntegerNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestIntegerNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestIntegerNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestIntegerNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestIntegerNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestIntegerNullableArrayRequest handles test_request_integer_nullable_array operation.
//
// POST /test_request_integer_nullable_array
func (s *Server) handleTestRequestIntegerNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestIntegerNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestIntegerNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestIntegerNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestIntegerNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestIntegerNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestIntegerNullableArrayArrayRequest handles test_request_integer_nullable_array_array operation.
//
// POST /test_request_integer_nullable_array_array
func (s *Server) handleTestRequestIntegerNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_integer_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestIntegerNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestIntegerNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestIntegerNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestIntegerNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestIntegerNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestNullRequest handles test_request_null operation.
//
// POST /test_request_null
func (s *Server) handleTestRequestNullRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_null"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestNull",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestNullRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestNull",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestNull(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestNullResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestNullArrayRequest handles test_request_null_array operation.
//
// POST /test_request_null_array
func (s *Server) handleTestRequestNullArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_null_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestNullArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestNullArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestNullArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestNullArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestNullArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestNullArrayArrayRequest handles test_request_null_array_array operation.
//
// POST /test_request_null_array_array
func (s *Server) handleTestRequestNullArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_null_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestNullArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestNullArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestNullArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestNullArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestNullArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestNullNullableRequest handles test_request_null_nullable operation.
//
// POST /test_request_null_nullable
func (s *Server) handleTestRequestNullNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_null_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestNullNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestNullNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestNullNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestNullNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestNullNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestNullNullableArrayRequest handles test_request_null_nullable_array operation.
//
// POST /test_request_null_nullable_array
func (s *Server) handleTestRequestNullNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_null_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestNullNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestNullNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestNullNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestNullNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestNullNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestNullNullableArrayArrayRequest handles test_request_null_nullable_array_array operation.
//
// POST /test_request_null_nullable_array_array
func (s *Server) handleTestRequestNullNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_null_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestNullNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestNullNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestNullNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestNullNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestNullNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestNumberRequest handles test_request_number operation.
//
// POST /test_request_number
func (s *Server) handleTestRequestNumberRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestNumber",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestNumberRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestNumber",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestNumber(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestNumberResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestNumberArrayRequest handles test_request_number_array operation.
//
// POST /test_request_number_array
func (s *Server) handleTestRequestNumberArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestNumberArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestNumberArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestNumberArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestNumberArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestNumberArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestNumberArrayArrayRequest handles test_request_number_array_array operation.
//
// POST /test_request_number_array_array
func (s *Server) handleTestRequestNumberArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestNumberArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestNumberArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestNumberArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestNumberArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestNumberArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestNumberDoubleRequest handles test_request_number_double operation.
//
// POST /test_request_number_double
func (s *Server) handleTestRequestNumberDoubleRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_double"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestNumberDouble",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestNumberDoubleRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestNumberDouble",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestNumberDouble(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestNumberDoubleResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestNumberDoubleArrayRequest handles test_request_number_double_array operation.
//
// POST /test_request_number_double_array
func (s *Server) handleTestRequestNumberDoubleArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_double_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestNumberDoubleArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestNumberDoubleArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestNumberDoubleArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestNumberDoubleArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestNumberDoubleArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestNumberDoubleArrayArrayRequest handles test_request_number_double_array_array operation.
//
// POST /test_request_number_double_array_array
func (s *Server) handleTestRequestNumberDoubleArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_double_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestNumberDoubleArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestNumberDoubleArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestNumberDoubleArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestNumberDoubleArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestNumberDoubleArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestNumberDoubleNullableRequest handles test_request_number_double_nullable operation.
//
// POST /test_request_number_double_nullable
func (s *Server) handleTestRequestNumberDoubleNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_double_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestNumberDoubleNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestNumberDoubleNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestNumberDoubleNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestNumberDoubleNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestNumberDoubleNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestNumberDoubleNullableArrayRequest handles test_request_number_double_nullable_array operation.
//
// POST /test_request_number_double_nullable_array
func (s *Server) handleTestRequestNumberDoubleNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_double_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestNumberDoubleNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestNumberDoubleNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestNumberDoubleNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestNumberDoubleNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestNumberDoubleNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestNumberDoubleNullableArrayArrayRequest handles test_request_number_double_nullable_array_array operation.
//
// POST /test_request_number_double_nullable_array_array
func (s *Server) handleTestRequestNumberDoubleNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_double_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestNumberDoubleNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestNumberDoubleNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestNumberDoubleNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestNumberDoubleNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestNumberDoubleNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestNumberFloatRequest handles test_request_number_float operation.
//
// POST /test_request_number_float
func (s *Server) handleTestRequestNumberFloatRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_float"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestNumberFloat",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestNumberFloatRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestNumberFloat",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestNumberFloat(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestNumberFloatResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestNumberFloatArrayRequest handles test_request_number_float_array operation.
//
// POST /test_request_number_float_array
func (s *Server) handleTestRequestNumberFloatArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_float_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestNumberFloatArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestNumberFloatArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestNumberFloatArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestNumberFloatArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestNumberFloatArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestNumberFloatArrayArrayRequest handles test_request_number_float_array_array operation.
//
// POST /test_request_number_float_array_array
func (s *Server) handleTestRequestNumberFloatArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_float_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestNumberFloatArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestNumberFloatArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestNumberFloatArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestNumberFloatArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestNumberFloatArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestNumberFloatNullableRequest handles test_request_number_float_nullable operation.
//
// POST /test_request_number_float_nullable
func (s *Server) handleTestRequestNumberFloatNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_float_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestNumberFloatNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestNumberFloatNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestNumberFloatNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestNumberFloatNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestNumberFloatNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestNumberFloatNullableArrayRequest handles test_request_number_float_nullable_array operation.
//
// POST /test_request_number_float_nullable_array
func (s *Server) handleTestRequestNumberFloatNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_float_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestNumberFloatNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestNumberFloatNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestNumberFloatNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestNumberFloatNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestNumberFloatNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestNumberFloatNullableArrayArrayRequest handles test_request_number_float_nullable_array_array operation.
//
// POST /test_request_number_float_nullable_array_array
func (s *Server) handleTestRequestNumberFloatNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_float_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestNumberFloatNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestNumberFloatNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestNumberFloatNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestNumberFloatNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestNumberFloatNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestNumberInt32Request handles test_request_number_int32 operation.
//
// POST /test_request_number_int32
func (s *Server) handleTestRequestNumberInt32Request(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_int32"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestNumberInt32",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestNumberInt32Request(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestNumberInt32",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestNumberInt32(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestNumberInt32Response(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestNumberInt32ArrayRequest handles test_request_number_int32_array operation.
//
// POST /test_request_number_int32_array
func (s *Server) handleTestRequestNumberInt32ArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_int32_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestNumberInt32Array",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestNumberInt32ArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestNumberInt32Array",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestNumberInt32Array(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestNumberInt32ArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestNumberInt32ArrayArrayRequest handles test_request_number_int32_array_array operation.
//
// POST /test_request_number_int32_array_array
func (s *Server) handleTestRequestNumberInt32ArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_int32_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestNumberInt32ArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestNumberInt32ArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestNumberInt32ArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestNumberInt32ArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestNumberInt32ArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestNumberInt32NullableRequest handles test_request_number_int32_nullable operation.
//
// POST /test_request_number_int32_nullable
func (s *Server) handleTestRequestNumberInt32NullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_int32_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestNumberInt32Nullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestNumberInt32NullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestNumberInt32Nullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestNumberInt32Nullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestNumberInt32NullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestNumberInt32NullableArrayRequest handles test_request_number_int32_nullable_array operation.
//
// POST /test_request_number_int32_nullable_array
func (s *Server) handleTestRequestNumberInt32NullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_int32_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestNumberInt32NullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestNumberInt32NullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestNumberInt32NullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestNumberInt32NullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestNumberInt32NullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestNumberInt32NullableArrayArrayRequest handles test_request_number_int32_nullable_array_array operation.
//
// POST /test_request_number_int32_nullable_array_array
func (s *Server) handleTestRequestNumberInt32NullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_int32_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestNumberInt32NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestNumberInt32NullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestNumberInt32NullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestNumberInt32NullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestNumberInt32NullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestNumberInt64Request handles test_request_number_int64 operation.
//
// POST /test_request_number_int64
func (s *Server) handleTestRequestNumberInt64Request(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_int64"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestNumberInt64",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestNumberInt64Request(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestNumberInt64",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestNumberInt64(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestNumberInt64Response(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestNumberInt64ArrayRequest handles test_request_number_int64_array operation.
//
// POST /test_request_number_int64_array
func (s *Server) handleTestRequestNumberInt64ArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_int64_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestNumberInt64Array",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestNumberInt64ArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestNumberInt64Array",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestNumberInt64Array(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestNumberInt64ArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestNumberInt64ArrayArrayRequest handles test_request_number_int64_array_array operation.
//
// POST /test_request_number_int64_array_array
func (s *Server) handleTestRequestNumberInt64ArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_int64_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestNumberInt64ArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestNumberInt64ArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestNumberInt64ArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestNumberInt64ArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestNumberInt64ArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestNumberInt64NullableRequest handles test_request_number_int64_nullable operation.
//
// POST /test_request_number_int64_nullable
func (s *Server) handleTestRequestNumberInt64NullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_int64_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestNumberInt64Nullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestNumberInt64NullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestNumberInt64Nullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestNumberInt64Nullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestNumberInt64NullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestNumberInt64NullableArrayRequest handles test_request_number_int64_nullable_array operation.
//
// POST /test_request_number_int64_nullable_array
func (s *Server) handleTestRequestNumberInt64NullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_int64_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestNumberInt64NullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestNumberInt64NullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestNumberInt64NullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestNumberInt64NullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestNumberInt64NullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestNumberInt64NullableArrayArrayRequest handles test_request_number_int64_nullable_array_array operation.
//
// POST /test_request_number_int64_nullable_array_array
func (s *Server) handleTestRequestNumberInt64NullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_int64_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestNumberInt64NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestNumberInt64NullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestNumberInt64NullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestNumberInt64NullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestNumberInt64NullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestNumberNullableRequest handles test_request_number_nullable operation.
//
// POST /test_request_number_nullable
func (s *Server) handleTestRequestNumberNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestNumberNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestNumberNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestNumberNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestNumberNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestNumberNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestNumberNullableArrayRequest handles test_request_number_nullable_array operation.
//
// POST /test_request_number_nullable_array
func (s *Server) handleTestRequestNumberNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestNumberNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestNumberNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestNumberNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestNumberNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestNumberNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestNumberNullableArrayArrayRequest handles test_request_number_nullable_array_array operation.
//
// POST /test_request_number_nullable_array_array
func (s *Server) handleTestRequestNumberNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_number_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestNumberNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestNumberNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestNumberNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestNumberNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestNumberNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredAnyRequest handles test_request_required_Any operation.
//
// POST /test_request_required_Any
func (s *Server) handleTestRequestRequiredAnyRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_Any"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredAny",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredAnyRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredAny",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredAny(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredAnyResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredBooleanRequest handles test_request_required_boolean operation.
//
// POST /test_request_required_boolean
func (s *Server) handleTestRequestRequiredBooleanRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_boolean"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredBoolean",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredBooleanRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredBoolean",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredBoolean(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredBooleanResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredBooleanArrayRequest handles test_request_required_boolean_array operation.
//
// POST /test_request_required_boolean_array
func (s *Server) handleTestRequestRequiredBooleanArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_boolean_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredBooleanArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredBooleanArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredBooleanArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredBooleanArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredBooleanArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredBooleanArrayArrayRequest handles test_request_required_boolean_array_array operation.
//
// POST /test_request_required_boolean_array_array
func (s *Server) handleTestRequestRequiredBooleanArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_boolean_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredBooleanArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredBooleanArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredBooleanArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredBooleanArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredBooleanArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredBooleanNullableRequest handles test_request_required_boolean_nullable operation.
//
// POST /test_request_required_boolean_nullable
func (s *Server) handleTestRequestRequiredBooleanNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_boolean_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredBooleanNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredBooleanNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredBooleanNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredBooleanNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredBooleanNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredBooleanNullableArrayRequest handles test_request_required_boolean_nullable_array operation.
//
// POST /test_request_required_boolean_nullable_array
func (s *Server) handleTestRequestRequiredBooleanNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_boolean_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredBooleanNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredBooleanNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredBooleanNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredBooleanNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredBooleanNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredBooleanNullableArrayArrayRequest handles test_request_required_boolean_nullable_array_array operation.
//
// POST /test_request_required_boolean_nullable_array_array
func (s *Server) handleTestRequestRequiredBooleanNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_boolean_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredBooleanNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredBooleanNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredBooleanNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredBooleanNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredBooleanNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredEmptyStructRequest handles test_request_required_EmptyStruct operation.
//
// POST /test_request_required_EmptyStruct
func (s *Server) handleTestRequestRequiredEmptyStructRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_EmptyStruct"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredEmptyStruct",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredEmptyStructRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredEmptyStruct",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredEmptyStruct(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredEmptyStructResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredFormatTestRequest handles test_request_required_FormatTest operation.
//
// POST /test_request_required_FormatTest
func (s *Server) handleTestRequestRequiredFormatTestRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_FormatTest"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredFormatTest",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredFormatTestRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredFormatTest",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredFormatTest(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredFormatTestResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredIntegerRequest handles test_request_required_integer operation.
//
// POST /test_request_required_integer
func (s *Server) handleTestRequestRequiredIntegerRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredInteger",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredIntegerRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredInteger",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredInteger(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredIntegerResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredIntegerArrayRequest handles test_request_required_integer_array operation.
//
// POST /test_request_required_integer_array
func (s *Server) handleTestRequestRequiredIntegerArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredIntegerArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredIntegerArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredIntegerArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredIntegerArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredIntegerArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredIntegerArrayArrayRequest handles test_request_required_integer_array_array operation.
//
// POST /test_request_required_integer_array_array
func (s *Server) handleTestRequestRequiredIntegerArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredIntegerArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredIntegerArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredIntegerArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredIntegerArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredIntegerArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredIntegerInt32Request handles test_request_required_integer_int32 operation.
//
// POST /test_request_required_integer_int32
func (s *Server) handleTestRequestRequiredIntegerInt32Request(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_int32"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredIntegerInt32",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredIntegerInt32Request(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredIntegerInt32",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredIntegerInt32(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredIntegerInt32Response(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredIntegerInt32ArrayRequest handles test_request_required_integer_int32_array operation.
//
// POST /test_request_required_integer_int32_array
func (s *Server) handleTestRequestRequiredIntegerInt32ArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_int32_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredIntegerInt32Array",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredIntegerInt32ArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredIntegerInt32Array",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredIntegerInt32Array(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredIntegerInt32ArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredIntegerInt32ArrayArrayRequest handles test_request_required_integer_int32_array_array operation.
//
// POST /test_request_required_integer_int32_array_array
func (s *Server) handleTestRequestRequiredIntegerInt32ArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_int32_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredIntegerInt32ArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredIntegerInt32ArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredIntegerInt32ArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredIntegerInt32ArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredIntegerInt32ArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredIntegerInt32NullableRequest handles test_request_required_integer_int32_nullable operation.
//
// POST /test_request_required_integer_int32_nullable
func (s *Server) handleTestRequestRequiredIntegerInt32NullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_int32_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredIntegerInt32Nullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredIntegerInt32NullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredIntegerInt32Nullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredIntegerInt32Nullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredIntegerInt32NullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredIntegerInt32NullableArrayRequest handles test_request_required_integer_int32_nullable_array operation.
//
// POST /test_request_required_integer_int32_nullable_array
func (s *Server) handleTestRequestRequiredIntegerInt32NullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_int32_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredIntegerInt32NullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredIntegerInt32NullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredIntegerInt32NullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredIntegerInt32NullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredIntegerInt32NullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredIntegerInt32NullableArrayArrayRequest handles test_request_required_integer_int32_nullable_array_array operation.
//
// POST /test_request_required_integer_int32_nullable_array_array
func (s *Server) handleTestRequestRequiredIntegerInt32NullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_int32_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredIntegerInt32NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredIntegerInt32NullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredIntegerInt32NullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredIntegerInt32NullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredIntegerInt32NullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredIntegerInt64Request handles test_request_required_integer_int64 operation.
//
// POST /test_request_required_integer_int64
func (s *Server) handleTestRequestRequiredIntegerInt64Request(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_int64"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredIntegerInt64",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredIntegerInt64Request(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredIntegerInt64",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredIntegerInt64(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredIntegerInt64Response(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredIntegerInt64ArrayRequest handles test_request_required_integer_int64_array operation.
//
// POST /test_request_required_integer_int64_array
func (s *Server) handleTestRequestRequiredIntegerInt64ArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_int64_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredIntegerInt64Array",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredIntegerInt64ArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredIntegerInt64Array",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredIntegerInt64Array(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredIntegerInt64ArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredIntegerInt64ArrayArrayRequest handles test_request_required_integer_int64_array_array operation.
//
// POST /test_request_required_integer_int64_array_array
func (s *Server) handleTestRequestRequiredIntegerInt64ArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_int64_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredIntegerInt64ArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredIntegerInt64ArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredIntegerInt64ArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredIntegerInt64ArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredIntegerInt64ArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredIntegerInt64NullableRequest handles test_request_required_integer_int64_nullable operation.
//
// POST /test_request_required_integer_int64_nullable
func (s *Server) handleTestRequestRequiredIntegerInt64NullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_int64_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredIntegerInt64Nullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredIntegerInt64NullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredIntegerInt64Nullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredIntegerInt64Nullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredIntegerInt64NullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredIntegerInt64NullableArrayRequest handles test_request_required_integer_int64_nullable_array operation.
//
// POST /test_request_required_integer_int64_nullable_array
func (s *Server) handleTestRequestRequiredIntegerInt64NullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_int64_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredIntegerInt64NullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredIntegerInt64NullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredIntegerInt64NullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredIntegerInt64NullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredIntegerInt64NullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredIntegerInt64NullableArrayArrayRequest handles test_request_required_integer_int64_nullable_array_array operation.
//
// POST /test_request_required_integer_int64_nullable_array_array
func (s *Server) handleTestRequestRequiredIntegerInt64NullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_int64_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredIntegerInt64NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredIntegerInt64NullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredIntegerInt64NullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredIntegerInt64NullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredIntegerInt64NullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredIntegerNullableRequest handles test_request_required_integer_nullable operation.
//
// POST /test_request_required_integer_nullable
func (s *Server) handleTestRequestRequiredIntegerNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredIntegerNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredIntegerNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredIntegerNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredIntegerNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredIntegerNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredIntegerNullableArrayRequest handles test_request_required_integer_nullable_array operation.
//
// POST /test_request_required_integer_nullable_array
func (s *Server) handleTestRequestRequiredIntegerNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredIntegerNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredIntegerNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredIntegerNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredIntegerNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredIntegerNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredIntegerNullableArrayArrayRequest handles test_request_required_integer_nullable_array_array operation.
//
// POST /test_request_required_integer_nullable_array_array
func (s *Server) handleTestRequestRequiredIntegerNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_integer_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredIntegerNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredIntegerNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredIntegerNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredIntegerNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredIntegerNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredNullRequest handles test_request_required_null operation.
//
// POST /test_request_required_null
func (s *Server) handleTestRequestRequiredNullRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_null"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredNull",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredNullRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredNull",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredNull(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredNullResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredNullArrayRequest handles test_request_required_null_array operation.
//
// POST /test_request_required_null_array
func (s *Server) handleTestRequestRequiredNullArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_null_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredNullArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredNullArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredNullArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredNullArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredNullArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredNullArrayArrayRequest handles test_request_required_null_array_array operation.
//
// POST /test_request_required_null_array_array
func (s *Server) handleTestRequestRequiredNullArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_null_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredNullArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredNullArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredNullArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredNullArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredNullArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredNullNullableRequest handles test_request_required_null_nullable operation.
//
// POST /test_request_required_null_nullable
func (s *Server) handleTestRequestRequiredNullNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_null_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredNullNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredNullNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredNullNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredNullNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredNullNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredNullNullableArrayRequest handles test_request_required_null_nullable_array operation.
//
// POST /test_request_required_null_nullable_array
func (s *Server) handleTestRequestRequiredNullNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_null_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredNullNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredNullNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredNullNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredNullNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredNullNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredNullNullableArrayArrayRequest handles test_request_required_null_nullable_array_array operation.
//
// POST /test_request_required_null_nullable_array_array
func (s *Server) handleTestRequestRequiredNullNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_null_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredNullNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredNullNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredNullNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredNullNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredNullNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredNumberRequest handles test_request_required_number operation.
//
// POST /test_request_required_number
func (s *Server) handleTestRequestRequiredNumberRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredNumber",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredNumberRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredNumber",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredNumber(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredNumberResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredNumberArrayRequest handles test_request_required_number_array operation.
//
// POST /test_request_required_number_array
func (s *Server) handleTestRequestRequiredNumberArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredNumberArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredNumberArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredNumberArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredNumberArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredNumberArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredNumberArrayArrayRequest handles test_request_required_number_array_array operation.
//
// POST /test_request_required_number_array_array
func (s *Server) handleTestRequestRequiredNumberArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredNumberArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredNumberArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredNumberArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredNumberArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredNumberArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredNumberDoubleRequest handles test_request_required_number_double operation.
//
// POST /test_request_required_number_double
func (s *Server) handleTestRequestRequiredNumberDoubleRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_double"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredNumberDouble",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredNumberDoubleRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredNumberDouble",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredNumberDouble(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredNumberDoubleResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredNumberDoubleArrayRequest handles test_request_required_number_double_array operation.
//
// POST /test_request_required_number_double_array
func (s *Server) handleTestRequestRequiredNumberDoubleArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_double_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredNumberDoubleArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredNumberDoubleArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredNumberDoubleArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredNumberDoubleArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredNumberDoubleArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredNumberDoubleArrayArrayRequest handles test_request_required_number_double_array_array operation.
//
// POST /test_request_required_number_double_array_array
func (s *Server) handleTestRequestRequiredNumberDoubleArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_double_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredNumberDoubleArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredNumberDoubleArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredNumberDoubleArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredNumberDoubleArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredNumberDoubleArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredNumberDoubleNullableRequest handles test_request_required_number_double_nullable operation.
//
// POST /test_request_required_number_double_nullable
func (s *Server) handleTestRequestRequiredNumberDoubleNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_double_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredNumberDoubleNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredNumberDoubleNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredNumberDoubleNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredNumberDoubleNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredNumberDoubleNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredNumberDoubleNullableArrayRequest handles test_request_required_number_double_nullable_array operation.
//
// POST /test_request_required_number_double_nullable_array
func (s *Server) handleTestRequestRequiredNumberDoubleNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_double_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredNumberDoubleNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredNumberDoubleNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredNumberDoubleNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredNumberDoubleNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredNumberDoubleNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredNumberDoubleNullableArrayArrayRequest handles test_request_required_number_double_nullable_array_array operation.
//
// POST /test_request_required_number_double_nullable_array_array
func (s *Server) handleTestRequestRequiredNumberDoubleNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_double_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredNumberDoubleNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredNumberDoubleNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredNumberDoubleNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredNumberDoubleNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredNumberDoubleNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredNumberFloatRequest handles test_request_required_number_float operation.
//
// POST /test_request_required_number_float
func (s *Server) handleTestRequestRequiredNumberFloatRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_float"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredNumberFloat",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredNumberFloatRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredNumberFloat",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredNumberFloat(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredNumberFloatResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredNumberFloatArrayRequest handles test_request_required_number_float_array operation.
//
// POST /test_request_required_number_float_array
func (s *Server) handleTestRequestRequiredNumberFloatArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_float_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredNumberFloatArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredNumberFloatArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredNumberFloatArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredNumberFloatArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredNumberFloatArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredNumberFloatArrayArrayRequest handles test_request_required_number_float_array_array operation.
//
// POST /test_request_required_number_float_array_array
func (s *Server) handleTestRequestRequiredNumberFloatArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_float_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredNumberFloatArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredNumberFloatArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredNumberFloatArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredNumberFloatArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredNumberFloatArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredNumberFloatNullableRequest handles test_request_required_number_float_nullable operation.
//
// POST /test_request_required_number_float_nullable
func (s *Server) handleTestRequestRequiredNumberFloatNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_float_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredNumberFloatNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredNumberFloatNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredNumberFloatNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredNumberFloatNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredNumberFloatNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredNumberFloatNullableArrayRequest handles test_request_required_number_float_nullable_array operation.
//
// POST /test_request_required_number_float_nullable_array
func (s *Server) handleTestRequestRequiredNumberFloatNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_float_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredNumberFloatNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredNumberFloatNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredNumberFloatNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredNumberFloatNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredNumberFloatNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredNumberFloatNullableArrayArrayRequest handles test_request_required_number_float_nullable_array_array operation.
//
// POST /test_request_required_number_float_nullable_array_array
func (s *Server) handleTestRequestRequiredNumberFloatNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_float_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredNumberFloatNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredNumberFloatNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredNumberFloatNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredNumberFloatNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredNumberFloatNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredNumberInt32Request handles test_request_required_number_int32 operation.
//
// POST /test_request_required_number_int32
func (s *Server) handleTestRequestRequiredNumberInt32Request(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_int32"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredNumberInt32",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredNumberInt32Request(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredNumberInt32",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredNumberInt32(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredNumberInt32Response(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredNumberInt32ArrayRequest handles test_request_required_number_int32_array operation.
//
// POST /test_request_required_number_int32_array
func (s *Server) handleTestRequestRequiredNumberInt32ArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_int32_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredNumberInt32Array",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredNumberInt32ArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredNumberInt32Array",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredNumberInt32Array(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredNumberInt32ArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredNumberInt32ArrayArrayRequest handles test_request_required_number_int32_array_array operation.
//
// POST /test_request_required_number_int32_array_array
func (s *Server) handleTestRequestRequiredNumberInt32ArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_int32_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredNumberInt32ArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredNumberInt32ArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredNumberInt32ArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredNumberInt32ArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredNumberInt32ArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredNumberInt32NullableRequest handles test_request_required_number_int32_nullable operation.
//
// POST /test_request_required_number_int32_nullable
func (s *Server) handleTestRequestRequiredNumberInt32NullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_int32_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredNumberInt32Nullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredNumberInt32NullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredNumberInt32Nullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredNumberInt32Nullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredNumberInt32NullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredNumberInt32NullableArrayRequest handles test_request_required_number_int32_nullable_array operation.
//
// POST /test_request_required_number_int32_nullable_array
func (s *Server) handleTestRequestRequiredNumberInt32NullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_int32_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredNumberInt32NullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredNumberInt32NullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredNumberInt32NullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredNumberInt32NullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredNumberInt32NullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredNumberInt32NullableArrayArrayRequest handles test_request_required_number_int32_nullable_array_array operation.
//
// POST /test_request_required_number_int32_nullable_array_array
func (s *Server) handleTestRequestRequiredNumberInt32NullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_int32_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredNumberInt32NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredNumberInt32NullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredNumberInt32NullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredNumberInt32NullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredNumberInt32NullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredNumberInt64Request handles test_request_required_number_int64 operation.
//
// POST /test_request_required_number_int64
func (s *Server) handleTestRequestRequiredNumberInt64Request(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_int64"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredNumberInt64",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredNumberInt64Request(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredNumberInt64",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredNumberInt64(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredNumberInt64Response(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredNumberInt64ArrayRequest handles test_request_required_number_int64_array operation.
//
// POST /test_request_required_number_int64_array
func (s *Server) handleTestRequestRequiredNumberInt64ArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_int64_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredNumberInt64Array",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredNumberInt64ArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredNumberInt64Array",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredNumberInt64Array(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredNumberInt64ArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredNumberInt64ArrayArrayRequest handles test_request_required_number_int64_array_array operation.
//
// POST /test_request_required_number_int64_array_array
func (s *Server) handleTestRequestRequiredNumberInt64ArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_int64_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredNumberInt64ArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredNumberInt64ArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredNumberInt64ArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredNumberInt64ArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredNumberInt64ArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredNumberInt64NullableRequest handles test_request_required_number_int64_nullable operation.
//
// POST /test_request_required_number_int64_nullable
func (s *Server) handleTestRequestRequiredNumberInt64NullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_int64_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredNumberInt64Nullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredNumberInt64NullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredNumberInt64Nullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredNumberInt64Nullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredNumberInt64NullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredNumberInt64NullableArrayRequest handles test_request_required_number_int64_nullable_array operation.
//
// POST /test_request_required_number_int64_nullable_array
func (s *Server) handleTestRequestRequiredNumberInt64NullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_int64_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredNumberInt64NullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredNumberInt64NullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredNumberInt64NullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredNumberInt64NullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredNumberInt64NullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredNumberInt64NullableArrayArrayRequest handles test_request_required_number_int64_nullable_array_array operation.
//
// POST /test_request_required_number_int64_nullable_array_array
func (s *Server) handleTestRequestRequiredNumberInt64NullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_int64_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredNumberInt64NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredNumberInt64NullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredNumberInt64NullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredNumberInt64NullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredNumberInt64NullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredNumberNullableRequest handles test_request_required_number_nullable operation.
//
// POST /test_request_required_number_nullable
func (s *Server) handleTestRequestRequiredNumberNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredNumberNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredNumberNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredNumberNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredNumberNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredNumberNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredNumberNullableArrayRequest handles test_request_required_number_nullable_array operation.
//
// POST /test_request_required_number_nullable_array
func (s *Server) handleTestRequestRequiredNumberNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredNumberNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredNumberNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredNumberNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredNumberNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredNumberNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredNumberNullableArrayArrayRequest handles test_request_required_number_nullable_array_array operation.
//
// POST /test_request_required_number_nullable_array_array
func (s *Server) handleTestRequestRequiredNumberNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_number_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredNumberNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredNumberNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredNumberNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredNumberNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredNumberNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringRequest handles test_request_required_string operation.
//
// POST /test_request_required_string
func (s *Server) handleTestRequestRequiredStringRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredString",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredString",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredString(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringArrayRequest handles test_request_required_string_array operation.
//
// POST /test_request_required_string_array
func (s *Server) handleTestRequestRequiredStringArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringArrayArrayRequest handles test_request_required_string_array_array operation.
//
// POST /test_request_required_string_array_array
func (s *Server) handleTestRequestRequiredStringArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringBinaryRequest handles test_request_required_string_binary operation.
//
// POST /test_request_required_string_binary
func (s *Server) handleTestRequestRequiredStringBinaryRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_binary"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringBinary",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringBinaryRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringBinary",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringBinary(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringBinaryResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringBinaryArrayRequest handles test_request_required_string_binary_array operation.
//
// POST /test_request_required_string_binary_array
func (s *Server) handleTestRequestRequiredStringBinaryArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_binary_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringBinaryArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringBinaryArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringBinaryArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringBinaryArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringBinaryArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringBinaryArrayArrayRequest handles test_request_required_string_binary_array_array operation.
//
// POST /test_request_required_string_binary_array_array
func (s *Server) handleTestRequestRequiredStringBinaryArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_binary_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringBinaryArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringBinaryArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringBinaryArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringBinaryArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringBinaryArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringBinaryNullableRequest handles test_request_required_string_binary_nullable operation.
//
// POST /test_request_required_string_binary_nullable
func (s *Server) handleTestRequestRequiredStringBinaryNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_binary_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringBinaryNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringBinaryNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringBinaryNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringBinaryNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringBinaryNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringBinaryNullableArrayRequest handles test_request_required_string_binary_nullable_array operation.
//
// POST /test_request_required_string_binary_nullable_array
func (s *Server) handleTestRequestRequiredStringBinaryNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_binary_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringBinaryNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringBinaryNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringBinaryNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringBinaryNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringBinaryNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringBinaryNullableArrayArrayRequest handles test_request_required_string_binary_nullable_array_array operation.
//
// POST /test_request_required_string_binary_nullable_array_array
func (s *Server) handleTestRequestRequiredStringBinaryNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_binary_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringBinaryNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringBinaryNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringBinaryNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringBinaryNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringBinaryNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringByteRequest handles test_request_required_string_byte operation.
//
// POST /test_request_required_string_byte
func (s *Server) handleTestRequestRequiredStringByteRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_byte"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringByte",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringByteRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringByte",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringByte(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringByteResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringByteArrayRequest handles test_request_required_string_byte_array operation.
//
// POST /test_request_required_string_byte_array
func (s *Server) handleTestRequestRequiredStringByteArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_byte_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringByteArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringByteArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringByteArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringByteArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringByteArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringByteArrayArrayRequest handles test_request_required_string_byte_array_array operation.
//
// POST /test_request_required_string_byte_array_array
func (s *Server) handleTestRequestRequiredStringByteArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_byte_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringByteArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringByteArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringByteArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringByteArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringByteArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringByteNullableRequest handles test_request_required_string_byte_nullable operation.
//
// POST /test_request_required_string_byte_nullable
func (s *Server) handleTestRequestRequiredStringByteNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_byte_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringByteNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringByteNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringByteNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringByteNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringByteNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringByteNullableArrayRequest handles test_request_required_string_byte_nullable_array operation.
//
// POST /test_request_required_string_byte_nullable_array
func (s *Server) handleTestRequestRequiredStringByteNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_byte_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringByteNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringByteNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringByteNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringByteNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringByteNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringByteNullableArrayArrayRequest handles test_request_required_string_byte_nullable_array_array operation.
//
// POST /test_request_required_string_byte_nullable_array_array
func (s *Server) handleTestRequestRequiredStringByteNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_byte_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringByteNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringByteNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringByteNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringByteNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringByteNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringDateRequest handles test_request_required_string_date operation.
//
// POST /test_request_required_string_date
func (s *Server) handleTestRequestRequiredStringDateRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_date"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringDate",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringDateRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringDate",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringDate(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringDateResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringDateArrayRequest handles test_request_required_string_date_array operation.
//
// POST /test_request_required_string_date_array
func (s *Server) handleTestRequestRequiredStringDateArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_date_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringDateArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringDateArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringDateArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringDateArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringDateArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringDateArrayArrayRequest handles test_request_required_string_date_array_array operation.
//
// POST /test_request_required_string_date_array_array
func (s *Server) handleTestRequestRequiredStringDateArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_date_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringDateArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringDateArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringDateArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringDateArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringDateArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringDateNullableRequest handles test_request_required_string_date_nullable operation.
//
// POST /test_request_required_string_date_nullable
func (s *Server) handleTestRequestRequiredStringDateNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_date_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringDateNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringDateNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringDateNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringDateNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringDateNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringDateNullableArrayRequest handles test_request_required_string_date_nullable_array operation.
//
// POST /test_request_required_string_date_nullable_array
func (s *Server) handleTestRequestRequiredStringDateNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_date_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringDateNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringDateNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringDateNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringDateNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringDateNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringDateNullableArrayArrayRequest handles test_request_required_string_date_nullable_array_array operation.
//
// POST /test_request_required_string_date_nullable_array_array
func (s *Server) handleTestRequestRequiredStringDateNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_date_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringDateNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringDateNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringDateNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringDateNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringDateNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringDateTimeRequest handles test_request_required_string_date-time operation.
//
// POST /test_request_required_string_date-time
func (s *Server) handleTestRequestRequiredStringDateTimeRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_date-time"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringDateTime",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringDateTimeRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringDateTime",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringDateTime(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringDateTimeResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringDateTimeArrayRequest handles test_request_required_string_date-time_array operation.
//
// POST /test_request_required_string_date-time_array
func (s *Server) handleTestRequestRequiredStringDateTimeArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_date-time_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringDateTimeArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringDateTimeArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringDateTimeArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringDateTimeArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringDateTimeArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringDateTimeArrayArrayRequest handles test_request_required_string_date-time_array_array operation.
//
// POST /test_request_required_string_date-time_array_array
func (s *Server) handleTestRequestRequiredStringDateTimeArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_date-time_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringDateTimeArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringDateTimeArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringDateTimeArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringDateTimeArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringDateTimeArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringDateTimeNullableRequest handles test_request_required_string_date-time_nullable operation.
//
// POST /test_request_required_string_date-time_nullable
func (s *Server) handleTestRequestRequiredStringDateTimeNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_date-time_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringDateTimeNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringDateTimeNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringDateTimeNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringDateTimeNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringDateTimeNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringDateTimeNullableArrayRequest handles test_request_required_string_date-time_nullable_array operation.
//
// POST /test_request_required_string_date-time_nullable_array
func (s *Server) handleTestRequestRequiredStringDateTimeNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_date-time_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringDateTimeNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringDateTimeNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringDateTimeNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringDateTimeNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringDateTimeNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringDateTimeNullableArrayArrayRequest handles test_request_required_string_date-time_nullable_array_array operation.
//
// POST /test_request_required_string_date-time_nullable_array_array
func (s *Server) handleTestRequestRequiredStringDateTimeNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_date-time_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringDateTimeNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringDateTimeNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringDateTimeNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringDateTimeNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringDateTimeNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringDurationRequest handles test_request_required_string_duration operation.
//
// POST /test_request_required_string_duration
func (s *Server) handleTestRequestRequiredStringDurationRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_duration"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringDuration",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringDurationRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringDuration",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringDuration(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringDurationResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringDurationArrayRequest handles test_request_required_string_duration_array operation.
//
// POST /test_request_required_string_duration_array
func (s *Server) handleTestRequestRequiredStringDurationArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_duration_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringDurationArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringDurationArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringDurationArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringDurationArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringDurationArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringDurationArrayArrayRequest handles test_request_required_string_duration_array_array operation.
//
// POST /test_request_required_string_duration_array_array
func (s *Server) handleTestRequestRequiredStringDurationArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_duration_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringDurationArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringDurationArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringDurationArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringDurationArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringDurationArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringDurationNullableRequest handles test_request_required_string_duration_nullable operation.
//
// POST /test_request_required_string_duration_nullable
func (s *Server) handleTestRequestRequiredStringDurationNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_duration_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringDurationNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringDurationNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringDurationNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringDurationNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringDurationNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringDurationNullableArrayRequest handles test_request_required_string_duration_nullable_array operation.
//
// POST /test_request_required_string_duration_nullable_array
func (s *Server) handleTestRequestRequiredStringDurationNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_duration_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringDurationNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringDurationNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringDurationNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringDurationNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringDurationNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringDurationNullableArrayArrayRequest handles test_request_required_string_duration_nullable_array_array operation.
//
// POST /test_request_required_string_duration_nullable_array_array
func (s *Server) handleTestRequestRequiredStringDurationNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_duration_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringDurationNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringDurationNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringDurationNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringDurationNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringDurationNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringEmailRequest handles test_request_required_string_email operation.
//
// POST /test_request_required_string_email
func (s *Server) handleTestRequestRequiredStringEmailRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_email"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringEmail",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringEmailRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringEmail",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringEmail(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringEmailResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringEmailArrayRequest handles test_request_required_string_email_array operation.
//
// POST /test_request_required_string_email_array
func (s *Server) handleTestRequestRequiredStringEmailArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_email_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringEmailArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringEmailArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringEmailArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringEmailArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringEmailArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringEmailArrayArrayRequest handles test_request_required_string_email_array_array operation.
//
// POST /test_request_required_string_email_array_array
func (s *Server) handleTestRequestRequiredStringEmailArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_email_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringEmailArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringEmailArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringEmailArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringEmailArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringEmailArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringEmailNullableRequest handles test_request_required_string_email_nullable operation.
//
// POST /test_request_required_string_email_nullable
func (s *Server) handleTestRequestRequiredStringEmailNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_email_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringEmailNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringEmailNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringEmailNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringEmailNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringEmailNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringEmailNullableArrayRequest handles test_request_required_string_email_nullable_array operation.
//
// POST /test_request_required_string_email_nullable_array
func (s *Server) handleTestRequestRequiredStringEmailNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_email_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringEmailNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringEmailNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringEmailNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringEmailNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringEmailNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringEmailNullableArrayArrayRequest handles test_request_required_string_email_nullable_array_array operation.
//
// POST /test_request_required_string_email_nullable_array_array
func (s *Server) handleTestRequestRequiredStringEmailNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_email_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringEmailNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringEmailNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringEmailNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringEmailNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringEmailNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringHostnameRequest handles test_request_required_string_hostname operation.
//
// POST /test_request_required_string_hostname
func (s *Server) handleTestRequestRequiredStringHostnameRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_hostname"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringHostname",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringHostnameRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringHostname",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringHostname(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringHostnameResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringHostnameArrayRequest handles test_request_required_string_hostname_array operation.
//
// POST /test_request_required_string_hostname_array
func (s *Server) handleTestRequestRequiredStringHostnameArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_hostname_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringHostnameArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringHostnameArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringHostnameArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringHostnameArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringHostnameArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringHostnameArrayArrayRequest handles test_request_required_string_hostname_array_array operation.
//
// POST /test_request_required_string_hostname_array_array
func (s *Server) handleTestRequestRequiredStringHostnameArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_hostname_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringHostnameArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringHostnameArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringHostnameArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringHostnameArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringHostnameArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringHostnameNullableRequest handles test_request_required_string_hostname_nullable operation.
//
// POST /test_request_required_string_hostname_nullable
func (s *Server) handleTestRequestRequiredStringHostnameNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_hostname_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringHostnameNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringHostnameNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringHostnameNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringHostnameNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringHostnameNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringHostnameNullableArrayRequest handles test_request_required_string_hostname_nullable_array operation.
//
// POST /test_request_required_string_hostname_nullable_array
func (s *Server) handleTestRequestRequiredStringHostnameNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_hostname_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringHostnameNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringHostnameNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringHostnameNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringHostnameNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringHostnameNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringHostnameNullableArrayArrayRequest handles test_request_required_string_hostname_nullable_array_array operation.
//
// POST /test_request_required_string_hostname_nullable_array_array
func (s *Server) handleTestRequestRequiredStringHostnameNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_hostname_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringHostnameNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringHostnameNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringHostnameNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringHostnameNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringHostnameNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringIPRequest handles test_request_required_string_ip operation.
//
// POST /test_request_required_string_ip
func (s *Server) handleTestRequestRequiredStringIPRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ip"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringIP",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringIPRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringIP",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringIP(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringIPResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringIPArrayRequest handles test_request_required_string_ip_array operation.
//
// POST /test_request_required_string_ip_array
func (s *Server) handleTestRequestRequiredStringIPArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ip_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringIPArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringIPArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringIPArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringIPArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringIPArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringIPArrayArrayRequest handles test_request_required_string_ip_array_array operation.
//
// POST /test_request_required_string_ip_array_array
func (s *Server) handleTestRequestRequiredStringIPArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ip_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringIPArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringIPArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringIPArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringIPArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringIPArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringIPNullableRequest handles test_request_required_string_ip_nullable operation.
//
// POST /test_request_required_string_ip_nullable
func (s *Server) handleTestRequestRequiredStringIPNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ip_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringIPNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringIPNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringIPNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringIPNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringIPNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringIPNullableArrayRequest handles test_request_required_string_ip_nullable_array operation.
//
// POST /test_request_required_string_ip_nullable_array
func (s *Server) handleTestRequestRequiredStringIPNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ip_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringIPNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringIPNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringIPNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringIPNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringIPNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringIPNullableArrayArrayRequest handles test_request_required_string_ip_nullable_array_array operation.
//
// POST /test_request_required_string_ip_nullable_array_array
func (s *Server) handleTestRequestRequiredStringIPNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ip_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringIPNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringIPNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringIPNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringIPNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringIPNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringInt32Request handles test_request_required_string_int32 operation.
//
// POST /test_request_required_string_int32
func (s *Server) handleTestRequestRequiredStringInt32Request(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int32"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringInt32",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringInt32Request(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringInt32",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringInt32(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringInt32Response(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringInt32ArrayRequest handles test_request_required_string_int32_array operation.
//
// POST /test_request_required_string_int32_array
func (s *Server) handleTestRequestRequiredStringInt32ArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int32_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringInt32Array",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringInt32ArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringInt32Array",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringInt32Array(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringInt32ArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringInt32ArrayArrayRequest handles test_request_required_string_int32_array_array operation.
//
// POST /test_request_required_string_int32_array_array
func (s *Server) handleTestRequestRequiredStringInt32ArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int32_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringInt32ArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringInt32ArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringInt32ArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringInt32ArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringInt32ArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringInt32NullableRequest handles test_request_required_string_int32_nullable operation.
//
// POST /test_request_required_string_int32_nullable
func (s *Server) handleTestRequestRequiredStringInt32NullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int32_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringInt32Nullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringInt32NullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringInt32Nullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringInt32Nullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringInt32NullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringInt32NullableArrayRequest handles test_request_required_string_int32_nullable_array operation.
//
// POST /test_request_required_string_int32_nullable_array
func (s *Server) handleTestRequestRequiredStringInt32NullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int32_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringInt32NullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringInt32NullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringInt32NullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringInt32NullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringInt32NullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringInt32NullableArrayArrayRequest handles test_request_required_string_int32_nullable_array_array operation.
//
// POST /test_request_required_string_int32_nullable_array_array
func (s *Server) handleTestRequestRequiredStringInt32NullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int32_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringInt32NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringInt32NullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringInt32NullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringInt32NullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringInt32NullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringInt64Request handles test_request_required_string_int64 operation.
//
// POST /test_request_required_string_int64
func (s *Server) handleTestRequestRequiredStringInt64Request(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int64"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringInt64",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringInt64Request(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringInt64",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringInt64(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringInt64Response(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringInt64ArrayRequest handles test_request_required_string_int64_array operation.
//
// POST /test_request_required_string_int64_array
func (s *Server) handleTestRequestRequiredStringInt64ArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int64_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringInt64Array",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringInt64ArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringInt64Array",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringInt64Array(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringInt64ArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringInt64ArrayArrayRequest handles test_request_required_string_int64_array_array operation.
//
// POST /test_request_required_string_int64_array_array
func (s *Server) handleTestRequestRequiredStringInt64ArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int64_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringInt64ArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringInt64ArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringInt64ArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringInt64ArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringInt64ArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringInt64NullableRequest handles test_request_required_string_int64_nullable operation.
//
// POST /test_request_required_string_int64_nullable
func (s *Server) handleTestRequestRequiredStringInt64NullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int64_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringInt64Nullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringInt64NullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringInt64Nullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringInt64Nullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringInt64NullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringInt64NullableArrayRequest handles test_request_required_string_int64_nullable_array operation.
//
// POST /test_request_required_string_int64_nullable_array
func (s *Server) handleTestRequestRequiredStringInt64NullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int64_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringInt64NullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringInt64NullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringInt64NullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringInt64NullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringInt64NullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringInt64NullableArrayArrayRequest handles test_request_required_string_int64_nullable_array_array operation.
//
// POST /test_request_required_string_int64_nullable_array_array
func (s *Server) handleTestRequestRequiredStringInt64NullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_int64_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringInt64NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringInt64NullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringInt64NullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringInt64NullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringInt64NullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringIpv4Request handles test_request_required_string_ipv4 operation.
//
// POST /test_request_required_string_ipv4
func (s *Server) handleTestRequestRequiredStringIpv4Request(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ipv4"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringIpv4",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringIpv4Request(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringIpv4",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringIpv4(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringIpv4Response(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringIpv4ArrayRequest handles test_request_required_string_ipv4_array operation.
//
// POST /test_request_required_string_ipv4_array
func (s *Server) handleTestRequestRequiredStringIpv4ArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ipv4_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringIpv4Array",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringIpv4ArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringIpv4Array",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringIpv4Array(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringIpv4ArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringIpv4ArrayArrayRequest handles test_request_required_string_ipv4_array_array operation.
//
// POST /test_request_required_string_ipv4_array_array
func (s *Server) handleTestRequestRequiredStringIpv4ArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ipv4_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringIpv4ArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringIpv4ArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringIpv4ArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringIpv4ArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringIpv4ArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringIpv4NullableRequest handles test_request_required_string_ipv4_nullable operation.
//
// POST /test_request_required_string_ipv4_nullable
func (s *Server) handleTestRequestRequiredStringIpv4NullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ipv4_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringIpv4Nullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringIpv4NullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringIpv4Nullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringIpv4Nullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringIpv4NullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringIpv4NullableArrayRequest handles test_request_required_string_ipv4_nullable_array operation.
//
// POST /test_request_required_string_ipv4_nullable_array
func (s *Server) handleTestRequestRequiredStringIpv4NullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ipv4_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringIpv4NullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringIpv4NullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringIpv4NullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringIpv4NullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringIpv4NullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringIpv4NullableArrayArrayRequest handles test_request_required_string_ipv4_nullable_array_array operation.
//
// POST /test_request_required_string_ipv4_nullable_array_array
func (s *Server) handleTestRequestRequiredStringIpv4NullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ipv4_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringIpv4NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringIpv4NullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringIpv4NullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringIpv4NullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringIpv4NullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringIpv6Request handles test_request_required_string_ipv6 operation.
//
// POST /test_request_required_string_ipv6
func (s *Server) handleTestRequestRequiredStringIpv6Request(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ipv6"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringIpv6",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringIpv6Request(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringIpv6",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringIpv6(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringIpv6Response(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringIpv6ArrayRequest handles test_request_required_string_ipv6_array operation.
//
// POST /test_request_required_string_ipv6_array
func (s *Server) handleTestRequestRequiredStringIpv6ArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ipv6_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringIpv6Array",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringIpv6ArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringIpv6Array",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringIpv6Array(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringIpv6ArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringIpv6ArrayArrayRequest handles test_request_required_string_ipv6_array_array operation.
//
// POST /test_request_required_string_ipv6_array_array
func (s *Server) handleTestRequestRequiredStringIpv6ArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ipv6_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringIpv6ArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringIpv6ArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringIpv6ArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringIpv6ArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringIpv6ArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringIpv6NullableRequest handles test_request_required_string_ipv6_nullable operation.
//
// POST /test_request_required_string_ipv6_nullable
func (s *Server) handleTestRequestRequiredStringIpv6NullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ipv6_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringIpv6Nullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringIpv6NullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringIpv6Nullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringIpv6Nullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringIpv6NullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringIpv6NullableArrayRequest handles test_request_required_string_ipv6_nullable_array operation.
//
// POST /test_request_required_string_ipv6_nullable_array
func (s *Server) handleTestRequestRequiredStringIpv6NullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ipv6_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringIpv6NullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringIpv6NullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringIpv6NullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringIpv6NullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringIpv6NullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringIpv6NullableArrayArrayRequest handles test_request_required_string_ipv6_nullable_array_array operation.
//
// POST /test_request_required_string_ipv6_nullable_array_array
func (s *Server) handleTestRequestRequiredStringIpv6NullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_ipv6_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringIpv6NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringIpv6NullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringIpv6NullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringIpv6NullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringIpv6NullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringNullableRequest handles test_request_required_string_nullable operation.
//
// POST /test_request_required_string_nullable
func (s *Server) handleTestRequestRequiredStringNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringNullableArrayRequest handles test_request_required_string_nullable_array operation.
//
// POST /test_request_required_string_nullable_array
func (s *Server) handleTestRequestRequiredStringNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringNullableArrayArrayRequest handles test_request_required_string_nullable_array_array operation.
//
// POST /test_request_required_string_nullable_array_array
func (s *Server) handleTestRequestRequiredStringNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringPasswordRequest handles test_request_required_string_password operation.
//
// POST /test_request_required_string_password
func (s *Server) handleTestRequestRequiredStringPasswordRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_password"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringPassword",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringPasswordRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringPassword",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringPassword(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringPasswordResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringPasswordArrayRequest handles test_request_required_string_password_array operation.
//
// POST /test_request_required_string_password_array
func (s *Server) handleTestRequestRequiredStringPasswordArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_password_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringPasswordArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringPasswordArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringPasswordArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringPasswordArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringPasswordArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringPasswordArrayArrayRequest handles test_request_required_string_password_array_array operation.
//
// POST /test_request_required_string_password_array_array
func (s *Server) handleTestRequestRequiredStringPasswordArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_password_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringPasswordArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringPasswordArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringPasswordArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringPasswordArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringPasswordArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringPasswordNullableRequest handles test_request_required_string_password_nullable operation.
//
// POST /test_request_required_string_password_nullable
func (s *Server) handleTestRequestRequiredStringPasswordNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_password_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringPasswordNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringPasswordNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringPasswordNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringPasswordNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringPasswordNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringPasswordNullableArrayRequest handles test_request_required_string_password_nullable_array operation.
//
// POST /test_request_required_string_password_nullable_array
func (s *Server) handleTestRequestRequiredStringPasswordNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_password_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringPasswordNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringPasswordNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringPasswordNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringPasswordNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringPasswordNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringPasswordNullableArrayArrayRequest handles test_request_required_string_password_nullable_array_array operation.
//
// POST /test_request_required_string_password_nullable_array_array
func (s *Server) handleTestRequestRequiredStringPasswordNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_password_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringPasswordNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringPasswordNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringPasswordNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringPasswordNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringPasswordNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringTimeRequest handles test_request_required_string_time operation.
//
// POST /test_request_required_string_time
func (s *Server) handleTestRequestRequiredStringTimeRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_time"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringTime",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringTimeRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringTime",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringTime(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringTimeResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringTimeArrayRequest handles test_request_required_string_time_array operation.
//
// POST /test_request_required_string_time_array
func (s *Server) handleTestRequestRequiredStringTimeArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_time_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringTimeArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringTimeArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringTimeArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringTimeArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringTimeArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringTimeArrayArrayRequest handles test_request_required_string_time_array_array operation.
//
// POST /test_request_required_string_time_array_array
func (s *Server) handleTestRequestRequiredStringTimeArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_time_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringTimeArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringTimeArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringTimeArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringTimeArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringTimeArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringTimeNullableRequest handles test_request_required_string_time_nullable operation.
//
// POST /test_request_required_string_time_nullable
func (s *Server) handleTestRequestRequiredStringTimeNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_time_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringTimeNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringTimeNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringTimeNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringTimeNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringTimeNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringTimeNullableArrayRequest handles test_request_required_string_time_nullable_array operation.
//
// POST /test_request_required_string_time_nullable_array
func (s *Server) handleTestRequestRequiredStringTimeNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_time_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringTimeNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringTimeNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringTimeNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringTimeNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringTimeNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringTimeNullableArrayArrayRequest handles test_request_required_string_time_nullable_array_array operation.
//
// POST /test_request_required_string_time_nullable_array_array
func (s *Server) handleTestRequestRequiredStringTimeNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_time_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringTimeNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringTimeNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringTimeNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringTimeNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringTimeNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringURIRequest handles test_request_required_string_uri operation.
//
// POST /test_request_required_string_uri
func (s *Server) handleTestRequestRequiredStringURIRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uri"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringURI",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringURIRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringURI",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringURI(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringURIResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringURIArrayRequest handles test_request_required_string_uri_array operation.
//
// POST /test_request_required_string_uri_array
func (s *Server) handleTestRequestRequiredStringURIArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uri_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringURIArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringURIArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringURIArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringURIArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringURIArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringURIArrayArrayRequest handles test_request_required_string_uri_array_array operation.
//
// POST /test_request_required_string_uri_array_array
func (s *Server) handleTestRequestRequiredStringURIArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uri_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringURIArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringURIArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringURIArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringURIArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringURIArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringURINullableRequest handles test_request_required_string_uri_nullable operation.
//
// POST /test_request_required_string_uri_nullable
func (s *Server) handleTestRequestRequiredStringURINullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uri_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringURINullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringURINullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringURINullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringURINullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringURINullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringURINullableArrayRequest handles test_request_required_string_uri_nullable_array operation.
//
// POST /test_request_required_string_uri_nullable_array
func (s *Server) handleTestRequestRequiredStringURINullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uri_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringURINullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringURINullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringURINullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringURINullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringURINullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringURINullableArrayArrayRequest handles test_request_required_string_uri_nullable_array_array operation.
//
// POST /test_request_required_string_uri_nullable_array_array
func (s *Server) handleTestRequestRequiredStringURINullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uri_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringURINullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringURINullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringURINullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringURINullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringURINullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringUUIDRequest handles test_request_required_string_uuid operation.
//
// POST /test_request_required_string_uuid
func (s *Server) handleTestRequestRequiredStringUUIDRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uuid"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringUUID",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringUUIDRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringUUID",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringUUID(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringUUIDResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringUUIDArrayRequest handles test_request_required_string_uuid_array operation.
//
// POST /test_request_required_string_uuid_array
func (s *Server) handleTestRequestRequiredStringUUIDArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uuid_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringUUIDArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringUUIDArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringUUIDArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringUUIDArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringUUIDArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringUUIDArrayArrayRequest handles test_request_required_string_uuid_array_array operation.
//
// POST /test_request_required_string_uuid_array_array
func (s *Server) handleTestRequestRequiredStringUUIDArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uuid_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringUUIDArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringUUIDArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringUUIDArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringUUIDArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringUUIDArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringUUIDNullableRequest handles test_request_required_string_uuid_nullable operation.
//
// POST /test_request_required_string_uuid_nullable
func (s *Server) handleTestRequestRequiredStringUUIDNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uuid_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringUUIDNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringUUIDNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringUUIDNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringUUIDNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringUUIDNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringUUIDNullableArrayRequest handles test_request_required_string_uuid_nullable_array operation.
//
// POST /test_request_required_string_uuid_nullable_array
func (s *Server) handleTestRequestRequiredStringUUIDNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uuid_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringUUIDNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringUUIDNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringUUIDNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringUUIDNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringUUIDNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringUUIDNullableArrayArrayRequest handles test_request_required_string_uuid_nullable_array_array operation.
//
// POST /test_request_required_string_uuid_nullable_array_array
func (s *Server) handleTestRequestRequiredStringUUIDNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_uuid_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringUUIDNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringUUIDNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringUUIDNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringUUIDNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringUUIDNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringUnixRequest handles test_request_required_string_unix operation.
//
// POST /test_request_required_string_unix
func (s *Server) handleTestRequestRequiredStringUnixRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringUnix",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringUnixRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringUnix",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringUnix(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringUnixResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringUnixArrayRequest handles test_request_required_string_unix_array operation.
//
// POST /test_request_required_string_unix_array
func (s *Server) handleTestRequestRequiredStringUnixArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringUnixArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringUnixArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringUnixArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringUnixArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringUnixArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringUnixArrayArrayRequest handles test_request_required_string_unix_array_array operation.
//
// POST /test_request_required_string_unix_array_array
func (s *Server) handleTestRequestRequiredStringUnixArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringUnixArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringUnixArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringUnixArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringUnixArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringUnixArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringUnixMicroRequest handles test_request_required_string_unix-micro operation.
//
// POST /test_request_required_string_unix-micro
func (s *Server) handleTestRequestRequiredStringUnixMicroRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-micro"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringUnixMicro",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringUnixMicroRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringUnixMicro",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringUnixMicro(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringUnixMicroResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringUnixMicroArrayRequest handles test_request_required_string_unix-micro_array operation.
//
// POST /test_request_required_string_unix-micro_array
func (s *Server) handleTestRequestRequiredStringUnixMicroArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-micro_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringUnixMicroArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringUnixMicroArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringUnixMicroArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringUnixMicroArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringUnixMicroArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringUnixMicroArrayArrayRequest handles test_request_required_string_unix-micro_array_array operation.
//
// POST /test_request_required_string_unix-micro_array_array
func (s *Server) handleTestRequestRequiredStringUnixMicroArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-micro_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringUnixMicroArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringUnixMicroArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringUnixMicroArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringUnixMicroArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringUnixMicroArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringUnixMicroNullableRequest handles test_request_required_string_unix-micro_nullable operation.
//
// POST /test_request_required_string_unix-micro_nullable
func (s *Server) handleTestRequestRequiredStringUnixMicroNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-micro_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringUnixMicroNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringUnixMicroNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringUnixMicroNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringUnixMicroNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringUnixMicroNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringUnixMicroNullableArrayRequest handles test_request_required_string_unix-micro_nullable_array operation.
//
// POST /test_request_required_string_unix-micro_nullable_array
func (s *Server) handleTestRequestRequiredStringUnixMicroNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-micro_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringUnixMicroNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringUnixMicroNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringUnixMicroNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringUnixMicroNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringUnixMicroNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringUnixMicroNullableArrayArrayRequest handles test_request_required_string_unix-micro_nullable_array_array operation.
//
// POST /test_request_required_string_unix-micro_nullable_array_array
func (s *Server) handleTestRequestRequiredStringUnixMicroNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-micro_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringUnixMicroNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringUnixMicroNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringUnixMicroNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringUnixMicroNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringUnixMicroNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringUnixMilliRequest handles test_request_required_string_unix-milli operation.
//
// POST /test_request_required_string_unix-milli
func (s *Server) handleTestRequestRequiredStringUnixMilliRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-milli"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringUnixMilli",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringUnixMilliRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringUnixMilli",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringUnixMilli(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringUnixMilliResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringUnixMilliArrayRequest handles test_request_required_string_unix-milli_array operation.
//
// POST /test_request_required_string_unix-milli_array
func (s *Server) handleTestRequestRequiredStringUnixMilliArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-milli_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringUnixMilliArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringUnixMilliArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringUnixMilliArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringUnixMilliArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringUnixMilliArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringUnixMilliArrayArrayRequest handles test_request_required_string_unix-milli_array_array operation.
//
// POST /test_request_required_string_unix-milli_array_array
func (s *Server) handleTestRequestRequiredStringUnixMilliArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-milli_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringUnixMilliArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringUnixMilliArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringUnixMilliArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringUnixMilliArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringUnixMilliArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringUnixMilliNullableRequest handles test_request_required_string_unix-milli_nullable operation.
//
// POST /test_request_required_string_unix-milli_nullable
func (s *Server) handleTestRequestRequiredStringUnixMilliNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-milli_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringUnixMilliNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringUnixMilliNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringUnixMilliNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringUnixMilliNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringUnixMilliNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringUnixMilliNullableArrayRequest handles test_request_required_string_unix-milli_nullable_array operation.
//
// POST /test_request_required_string_unix-milli_nullable_array
func (s *Server) handleTestRequestRequiredStringUnixMilliNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-milli_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringUnixMilliNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringUnixMilliNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringUnixMilliNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringUnixMilliNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringUnixMilliNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringUnixMilliNullableArrayArrayRequest handles test_request_required_string_unix-milli_nullable_array_array operation.
//
// POST /test_request_required_string_unix-milli_nullable_array_array
func (s *Server) handleTestRequestRequiredStringUnixMilliNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-milli_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringUnixMilliNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringUnixMilliNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringUnixMilliNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringUnixMilliNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringUnixMilliNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringUnixNanoRequest handles test_request_required_string_unix-nano operation.
//
// POST /test_request_required_string_unix-nano
func (s *Server) handleTestRequestRequiredStringUnixNanoRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-nano"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringUnixNano",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringUnixNanoRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringUnixNano",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringUnixNano(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringUnixNanoResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringUnixNanoArrayRequest handles test_request_required_string_unix-nano_array operation.
//
// POST /test_request_required_string_unix-nano_array
func (s *Server) handleTestRequestRequiredStringUnixNanoArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-nano_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringUnixNanoArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringUnixNanoArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringUnixNanoArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringUnixNanoArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringUnixNanoArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringUnixNanoArrayArrayRequest handles test_request_required_string_unix-nano_array_array operation.
//
// POST /test_request_required_string_unix-nano_array_array
func (s *Server) handleTestRequestRequiredStringUnixNanoArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-nano_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringUnixNanoArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringUnixNanoArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringUnixNanoArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringUnixNanoArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringUnixNanoArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringUnixNanoNullableRequest handles test_request_required_string_unix-nano_nullable operation.
//
// POST /test_request_required_string_unix-nano_nullable
func (s *Server) handleTestRequestRequiredStringUnixNanoNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-nano_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringUnixNanoNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringUnixNanoNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringUnixNanoNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringUnixNanoNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringUnixNanoNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringUnixNanoNullableArrayRequest handles test_request_required_string_unix-nano_nullable_array operation.
//
// POST /test_request_required_string_unix-nano_nullable_array
func (s *Server) handleTestRequestRequiredStringUnixNanoNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-nano_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringUnixNanoNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringUnixNanoNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringUnixNanoNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringUnixNanoNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringUnixNanoNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringUnixNanoNullableArrayArrayRequest handles test_request_required_string_unix-nano_nullable_array_array operation.
//
// POST /test_request_required_string_unix-nano_nullable_array_array
func (s *Server) handleTestRequestRequiredStringUnixNanoNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-nano_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringUnixNanoNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringUnixNanoNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringUnixNanoNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringUnixNanoNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringUnixNanoNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringUnixNullableRequest handles test_request_required_string_unix_nullable operation.
//
// POST /test_request_required_string_unix_nullable
func (s *Server) handleTestRequestRequiredStringUnixNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringUnixNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringUnixNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringUnixNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringUnixNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringUnixNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringUnixNullableArrayRequest handles test_request_required_string_unix_nullable_array operation.
//
// POST /test_request_required_string_unix_nullable_array
func (s *Server) handleTestRequestRequiredStringUnixNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringUnixNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringUnixNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringUnixNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringUnixNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringUnixNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringUnixNullableArrayArrayRequest handles test_request_required_string_unix_nullable_array_array operation.
//
// POST /test_request_required_string_unix_nullable_array_array
func (s *Server) handleTestRequestRequiredStringUnixNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringUnixNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringUnixNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringUnixNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringUnixNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringUnixNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringUnixSecondsRequest handles test_request_required_string_unix-seconds operation.
//
// POST /test_request_required_string_unix-seconds
func (s *Server) handleTestRequestRequiredStringUnixSecondsRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-seconds"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringUnixSeconds",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringUnixSecondsRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringUnixSeconds",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringUnixSeconds(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringUnixSecondsResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringUnixSecondsArrayRequest handles test_request_required_string_unix-seconds_array operation.
//
// POST /test_request_required_string_unix-seconds_array
func (s *Server) handleTestRequestRequiredStringUnixSecondsArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-seconds_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringUnixSecondsArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringUnixSecondsArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringUnixSecondsArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringUnixSecondsArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringUnixSecondsArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringUnixSecondsArrayArrayRequest handles test_request_required_string_unix-seconds_array_array operation.
//
// POST /test_request_required_string_unix-seconds_array_array
func (s *Server) handleTestRequestRequiredStringUnixSecondsArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-seconds_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringUnixSecondsArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringUnixSecondsArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringUnixSecondsArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringUnixSecondsArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringUnixSecondsArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringUnixSecondsNullableRequest handles test_request_required_string_unix-seconds_nullable operation.
//
// POST /test_request_required_string_unix-seconds_nullable
func (s *Server) handleTestRequestRequiredStringUnixSecondsNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-seconds_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringUnixSecondsNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringUnixSecondsNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringUnixSecondsNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringUnixSecondsNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringUnixSecondsNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringUnixSecondsNullableArrayRequest handles test_request_required_string_unix-seconds_nullable_array operation.
//
// POST /test_request_required_string_unix-seconds_nullable_array
func (s *Server) handleTestRequestRequiredStringUnixSecondsNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-seconds_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringUnixSecondsNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringUnixSecondsNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringUnixSecondsNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringUnixSecondsNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringUnixSecondsNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestRequiredStringUnixSecondsNullableArrayArrayRequest handles test_request_required_string_unix-seconds_nullable_array_array operation.
//
// POST /test_request_required_string_unix-seconds_nullable_array_array
func (s *Server) handleTestRequestRequiredStringUnixSecondsNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_required_string_unix-seconds_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestRequiredStringUnixSecondsNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestRequiredStringUnixSecondsNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestRequiredStringUnixSecondsNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestRequiredStringUnixSecondsNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestRequiredStringUnixSecondsNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringRequest handles test_request_string operation.
//
// POST /test_request_string
func (s *Server) handleTestRequestStringRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestString",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestString",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestString(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringArrayRequest handles test_request_string_array operation.
//
// POST /test_request_string_array
func (s *Server) handleTestRequestStringArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringArrayArrayRequest handles test_request_string_array_array operation.
//
// POST /test_request_string_array_array
func (s *Server) handleTestRequestStringArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringBinaryRequest handles test_request_string_binary operation.
//
// POST /test_request_string_binary
func (s *Server) handleTestRequestStringBinaryRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_binary"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringBinary",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringBinaryRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringBinary",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringBinary(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringBinaryResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringBinaryArrayRequest handles test_request_string_binary_array operation.
//
// POST /test_request_string_binary_array
func (s *Server) handleTestRequestStringBinaryArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_binary_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringBinaryArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringBinaryArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringBinaryArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringBinaryArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringBinaryArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringBinaryArrayArrayRequest handles test_request_string_binary_array_array operation.
//
// POST /test_request_string_binary_array_array
func (s *Server) handleTestRequestStringBinaryArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_binary_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringBinaryArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringBinaryArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringBinaryArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringBinaryArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringBinaryArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringBinaryNullableRequest handles test_request_string_binary_nullable operation.
//
// POST /test_request_string_binary_nullable
func (s *Server) handleTestRequestStringBinaryNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_binary_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringBinaryNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringBinaryNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringBinaryNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringBinaryNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringBinaryNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringBinaryNullableArrayRequest handles test_request_string_binary_nullable_array operation.
//
// POST /test_request_string_binary_nullable_array
func (s *Server) handleTestRequestStringBinaryNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_binary_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringBinaryNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringBinaryNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringBinaryNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringBinaryNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringBinaryNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringBinaryNullableArrayArrayRequest handles test_request_string_binary_nullable_array_array operation.
//
// POST /test_request_string_binary_nullable_array_array
func (s *Server) handleTestRequestStringBinaryNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_binary_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringBinaryNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringBinaryNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringBinaryNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringBinaryNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringBinaryNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringByteRequest handles test_request_string_byte operation.
//
// POST /test_request_string_byte
func (s *Server) handleTestRequestStringByteRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_byte"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringByte",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringByteRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringByte",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringByte(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringByteResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringByteArrayRequest handles test_request_string_byte_array operation.
//
// POST /test_request_string_byte_array
func (s *Server) handleTestRequestStringByteArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_byte_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringByteArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringByteArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringByteArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringByteArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringByteArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringByteArrayArrayRequest handles test_request_string_byte_array_array operation.
//
// POST /test_request_string_byte_array_array
func (s *Server) handleTestRequestStringByteArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_byte_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringByteArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringByteArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringByteArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringByteArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringByteArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringByteNullableRequest handles test_request_string_byte_nullable operation.
//
// POST /test_request_string_byte_nullable
func (s *Server) handleTestRequestStringByteNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_byte_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringByteNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringByteNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringByteNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringByteNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringByteNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringByteNullableArrayRequest handles test_request_string_byte_nullable_array operation.
//
// POST /test_request_string_byte_nullable_array
func (s *Server) handleTestRequestStringByteNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_byte_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringByteNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringByteNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringByteNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringByteNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringByteNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringByteNullableArrayArrayRequest handles test_request_string_byte_nullable_array_array operation.
//
// POST /test_request_string_byte_nullable_array_array
func (s *Server) handleTestRequestStringByteNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_byte_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringByteNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringByteNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringByteNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringByteNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringByteNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringDateRequest handles test_request_string_date operation.
//
// POST /test_request_string_date
func (s *Server) handleTestRequestStringDateRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_date"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringDate",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringDateRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringDate",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringDate(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringDateResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringDateArrayRequest handles test_request_string_date_array operation.
//
// POST /test_request_string_date_array
func (s *Server) handleTestRequestStringDateArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_date_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringDateArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringDateArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringDateArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringDateArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringDateArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringDateArrayArrayRequest handles test_request_string_date_array_array operation.
//
// POST /test_request_string_date_array_array
func (s *Server) handleTestRequestStringDateArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_date_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringDateArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringDateArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringDateArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringDateArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringDateArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringDateNullableRequest handles test_request_string_date_nullable operation.
//
// POST /test_request_string_date_nullable
func (s *Server) handleTestRequestStringDateNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_date_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringDateNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringDateNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringDateNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringDateNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringDateNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringDateNullableArrayRequest handles test_request_string_date_nullable_array operation.
//
// POST /test_request_string_date_nullable_array
func (s *Server) handleTestRequestStringDateNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_date_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringDateNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringDateNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringDateNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringDateNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringDateNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringDateNullableArrayArrayRequest handles test_request_string_date_nullable_array_array operation.
//
// POST /test_request_string_date_nullable_array_array
func (s *Server) handleTestRequestStringDateNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_date_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringDateNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringDateNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringDateNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringDateNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringDateNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringDateTimeRequest handles test_request_string_date-time operation.
//
// POST /test_request_string_date-time
func (s *Server) handleTestRequestStringDateTimeRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_date-time"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringDateTime",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringDateTimeRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringDateTime",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringDateTime(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringDateTimeResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringDateTimeArrayRequest handles test_request_string_date-time_array operation.
//
// POST /test_request_string_date-time_array
func (s *Server) handleTestRequestStringDateTimeArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_date-time_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringDateTimeArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringDateTimeArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringDateTimeArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringDateTimeArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringDateTimeArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringDateTimeArrayArrayRequest handles test_request_string_date-time_array_array operation.
//
// POST /test_request_string_date-time_array_array
func (s *Server) handleTestRequestStringDateTimeArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_date-time_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringDateTimeArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringDateTimeArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringDateTimeArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringDateTimeArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringDateTimeArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringDateTimeNullableRequest handles test_request_string_date-time_nullable operation.
//
// POST /test_request_string_date-time_nullable
func (s *Server) handleTestRequestStringDateTimeNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_date-time_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringDateTimeNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringDateTimeNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringDateTimeNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringDateTimeNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringDateTimeNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringDateTimeNullableArrayRequest handles test_request_string_date-time_nullable_array operation.
//
// POST /test_request_string_date-time_nullable_array
func (s *Server) handleTestRequestStringDateTimeNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_date-time_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringDateTimeNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringDateTimeNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringDateTimeNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringDateTimeNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringDateTimeNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringDateTimeNullableArrayArrayRequest handles test_request_string_date-time_nullable_array_array operation.
//
// POST /test_request_string_date-time_nullable_array_array
func (s *Server) handleTestRequestStringDateTimeNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_date-time_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringDateTimeNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringDateTimeNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringDateTimeNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringDateTimeNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringDateTimeNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringDurationRequest handles test_request_string_duration operation.
//
// POST /test_request_string_duration
func (s *Server) handleTestRequestStringDurationRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_duration"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringDuration",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringDurationRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringDuration",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringDuration(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringDurationResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringDurationArrayRequest handles test_request_string_duration_array operation.
//
// POST /test_request_string_duration_array
func (s *Server) handleTestRequestStringDurationArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_duration_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringDurationArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringDurationArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringDurationArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringDurationArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringDurationArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringDurationArrayArrayRequest handles test_request_string_duration_array_array operation.
//
// POST /test_request_string_duration_array_array
func (s *Server) handleTestRequestStringDurationArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_duration_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringDurationArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringDurationArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringDurationArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringDurationArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringDurationArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringDurationNullableRequest handles test_request_string_duration_nullable operation.
//
// POST /test_request_string_duration_nullable
func (s *Server) handleTestRequestStringDurationNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_duration_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringDurationNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringDurationNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringDurationNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringDurationNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringDurationNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringDurationNullableArrayRequest handles test_request_string_duration_nullable_array operation.
//
// POST /test_request_string_duration_nullable_array
func (s *Server) handleTestRequestStringDurationNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_duration_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringDurationNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringDurationNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringDurationNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringDurationNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringDurationNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringDurationNullableArrayArrayRequest handles test_request_string_duration_nullable_array_array operation.
//
// POST /test_request_string_duration_nullable_array_array
func (s *Server) handleTestRequestStringDurationNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_duration_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringDurationNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringDurationNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringDurationNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringDurationNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringDurationNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringEmailRequest handles test_request_string_email operation.
//
// POST /test_request_string_email
func (s *Server) handleTestRequestStringEmailRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_email"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringEmail",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringEmailRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringEmail",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringEmail(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringEmailResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringEmailArrayRequest handles test_request_string_email_array operation.
//
// POST /test_request_string_email_array
func (s *Server) handleTestRequestStringEmailArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_email_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringEmailArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringEmailArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringEmailArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringEmailArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringEmailArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringEmailArrayArrayRequest handles test_request_string_email_array_array operation.
//
// POST /test_request_string_email_array_array
func (s *Server) handleTestRequestStringEmailArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_email_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringEmailArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringEmailArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringEmailArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringEmailArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringEmailArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringEmailNullableRequest handles test_request_string_email_nullable operation.
//
// POST /test_request_string_email_nullable
func (s *Server) handleTestRequestStringEmailNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_email_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringEmailNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringEmailNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringEmailNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringEmailNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringEmailNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringEmailNullableArrayRequest handles test_request_string_email_nullable_array operation.
//
// POST /test_request_string_email_nullable_array
func (s *Server) handleTestRequestStringEmailNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_email_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringEmailNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringEmailNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringEmailNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringEmailNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringEmailNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringEmailNullableArrayArrayRequest handles test_request_string_email_nullable_array_array operation.
//
// POST /test_request_string_email_nullable_array_array
func (s *Server) handleTestRequestStringEmailNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_email_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringEmailNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringEmailNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringEmailNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringEmailNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringEmailNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringHostnameRequest handles test_request_string_hostname operation.
//
// POST /test_request_string_hostname
func (s *Server) handleTestRequestStringHostnameRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_hostname"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringHostname",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringHostnameRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringHostname",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringHostname(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringHostnameResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringHostnameArrayRequest handles test_request_string_hostname_array operation.
//
// POST /test_request_string_hostname_array
func (s *Server) handleTestRequestStringHostnameArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_hostname_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringHostnameArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringHostnameArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringHostnameArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringHostnameArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringHostnameArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringHostnameArrayArrayRequest handles test_request_string_hostname_array_array operation.
//
// POST /test_request_string_hostname_array_array
func (s *Server) handleTestRequestStringHostnameArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_hostname_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringHostnameArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringHostnameArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringHostnameArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringHostnameArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringHostnameArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringHostnameNullableRequest handles test_request_string_hostname_nullable operation.
//
// POST /test_request_string_hostname_nullable
func (s *Server) handleTestRequestStringHostnameNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_hostname_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringHostnameNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringHostnameNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringHostnameNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringHostnameNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringHostnameNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringHostnameNullableArrayRequest handles test_request_string_hostname_nullable_array operation.
//
// POST /test_request_string_hostname_nullable_array
func (s *Server) handleTestRequestStringHostnameNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_hostname_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringHostnameNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringHostnameNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringHostnameNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringHostnameNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringHostnameNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringHostnameNullableArrayArrayRequest handles test_request_string_hostname_nullable_array_array operation.
//
// POST /test_request_string_hostname_nullable_array_array
func (s *Server) handleTestRequestStringHostnameNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_hostname_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringHostnameNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringHostnameNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringHostnameNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringHostnameNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringHostnameNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringIPRequest handles test_request_string_ip operation.
//
// POST /test_request_string_ip
func (s *Server) handleTestRequestStringIPRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ip"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringIP",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringIPRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringIP",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringIP(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringIPResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringIPArrayRequest handles test_request_string_ip_array operation.
//
// POST /test_request_string_ip_array
func (s *Server) handleTestRequestStringIPArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ip_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringIPArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringIPArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringIPArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringIPArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringIPArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringIPArrayArrayRequest handles test_request_string_ip_array_array operation.
//
// POST /test_request_string_ip_array_array
func (s *Server) handleTestRequestStringIPArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ip_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringIPArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringIPArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringIPArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringIPArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringIPArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringIPNullableRequest handles test_request_string_ip_nullable operation.
//
// POST /test_request_string_ip_nullable
func (s *Server) handleTestRequestStringIPNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ip_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringIPNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringIPNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringIPNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringIPNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringIPNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringIPNullableArrayRequest handles test_request_string_ip_nullable_array operation.
//
// POST /test_request_string_ip_nullable_array
func (s *Server) handleTestRequestStringIPNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ip_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringIPNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringIPNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringIPNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringIPNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringIPNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringIPNullableArrayArrayRequest handles test_request_string_ip_nullable_array_array operation.
//
// POST /test_request_string_ip_nullable_array_array
func (s *Server) handleTestRequestStringIPNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ip_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringIPNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringIPNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringIPNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringIPNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringIPNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringInt32Request handles test_request_string_int32 operation.
//
// POST /test_request_string_int32
func (s *Server) handleTestRequestStringInt32Request(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int32"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringInt32",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringInt32Request(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringInt32",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringInt32(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringInt32Response(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringInt32ArrayRequest handles test_request_string_int32_array operation.
//
// POST /test_request_string_int32_array
func (s *Server) handleTestRequestStringInt32ArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int32_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringInt32Array",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringInt32ArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringInt32Array",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringInt32Array(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringInt32ArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringInt32ArrayArrayRequest handles test_request_string_int32_array_array operation.
//
// POST /test_request_string_int32_array_array
func (s *Server) handleTestRequestStringInt32ArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int32_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringInt32ArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringInt32ArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringInt32ArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringInt32ArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringInt32ArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringInt32NullableRequest handles test_request_string_int32_nullable operation.
//
// POST /test_request_string_int32_nullable
func (s *Server) handleTestRequestStringInt32NullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int32_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringInt32Nullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringInt32NullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringInt32Nullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringInt32Nullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringInt32NullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringInt32NullableArrayRequest handles test_request_string_int32_nullable_array operation.
//
// POST /test_request_string_int32_nullable_array
func (s *Server) handleTestRequestStringInt32NullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int32_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringInt32NullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringInt32NullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringInt32NullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringInt32NullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringInt32NullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringInt32NullableArrayArrayRequest handles test_request_string_int32_nullable_array_array operation.
//
// POST /test_request_string_int32_nullable_array_array
func (s *Server) handleTestRequestStringInt32NullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int32_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringInt32NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringInt32NullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringInt32NullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringInt32NullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringInt32NullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringInt64Request handles test_request_string_int64 operation.
//
// POST /test_request_string_int64
func (s *Server) handleTestRequestStringInt64Request(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int64"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringInt64",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringInt64Request(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringInt64",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringInt64(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringInt64Response(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringInt64ArrayRequest handles test_request_string_int64_array operation.
//
// POST /test_request_string_int64_array
func (s *Server) handleTestRequestStringInt64ArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int64_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringInt64Array",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringInt64ArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringInt64Array",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringInt64Array(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringInt64ArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringInt64ArrayArrayRequest handles test_request_string_int64_array_array operation.
//
// POST /test_request_string_int64_array_array
func (s *Server) handleTestRequestStringInt64ArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int64_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringInt64ArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringInt64ArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringInt64ArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringInt64ArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringInt64ArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringInt64NullableRequest handles test_request_string_int64_nullable operation.
//
// POST /test_request_string_int64_nullable
func (s *Server) handleTestRequestStringInt64NullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int64_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringInt64Nullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringInt64NullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringInt64Nullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringInt64Nullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringInt64NullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringInt64NullableArrayRequest handles test_request_string_int64_nullable_array operation.
//
// POST /test_request_string_int64_nullable_array
func (s *Server) handleTestRequestStringInt64NullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int64_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringInt64NullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringInt64NullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringInt64NullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringInt64NullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringInt64NullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringInt64NullableArrayArrayRequest handles test_request_string_int64_nullable_array_array operation.
//
// POST /test_request_string_int64_nullable_array_array
func (s *Server) handleTestRequestStringInt64NullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_int64_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringInt64NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringInt64NullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringInt64NullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringInt64NullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringInt64NullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringIpv4Request handles test_request_string_ipv4 operation.
//
// POST /test_request_string_ipv4
func (s *Server) handleTestRequestStringIpv4Request(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ipv4"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringIpv4",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringIpv4Request(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringIpv4",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringIpv4(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringIpv4Response(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringIpv4ArrayRequest handles test_request_string_ipv4_array operation.
//
// POST /test_request_string_ipv4_array
func (s *Server) handleTestRequestStringIpv4ArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ipv4_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringIpv4Array",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringIpv4ArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringIpv4Array",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringIpv4Array(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringIpv4ArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringIpv4ArrayArrayRequest handles test_request_string_ipv4_array_array operation.
//
// POST /test_request_string_ipv4_array_array
func (s *Server) handleTestRequestStringIpv4ArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ipv4_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringIpv4ArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringIpv4ArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringIpv4ArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringIpv4ArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringIpv4ArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringIpv4NullableRequest handles test_request_string_ipv4_nullable operation.
//
// POST /test_request_string_ipv4_nullable
func (s *Server) handleTestRequestStringIpv4NullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ipv4_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringIpv4Nullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringIpv4NullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringIpv4Nullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringIpv4Nullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringIpv4NullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringIpv4NullableArrayRequest handles test_request_string_ipv4_nullable_array operation.
//
// POST /test_request_string_ipv4_nullable_array
func (s *Server) handleTestRequestStringIpv4NullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ipv4_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringIpv4NullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringIpv4NullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringIpv4NullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringIpv4NullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringIpv4NullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringIpv4NullableArrayArrayRequest handles test_request_string_ipv4_nullable_array_array operation.
//
// POST /test_request_string_ipv4_nullable_array_array
func (s *Server) handleTestRequestStringIpv4NullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ipv4_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringIpv4NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringIpv4NullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringIpv4NullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringIpv4NullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringIpv4NullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringIpv6Request handles test_request_string_ipv6 operation.
//
// POST /test_request_string_ipv6
func (s *Server) handleTestRequestStringIpv6Request(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ipv6"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringIpv6",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringIpv6Request(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringIpv6",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringIpv6(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringIpv6Response(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringIpv6ArrayRequest handles test_request_string_ipv6_array operation.
//
// POST /test_request_string_ipv6_array
func (s *Server) handleTestRequestStringIpv6ArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ipv6_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringIpv6Array",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringIpv6ArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringIpv6Array",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringIpv6Array(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringIpv6ArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringIpv6ArrayArrayRequest handles test_request_string_ipv6_array_array operation.
//
// POST /test_request_string_ipv6_array_array
func (s *Server) handleTestRequestStringIpv6ArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ipv6_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringIpv6ArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringIpv6ArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringIpv6ArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringIpv6ArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringIpv6ArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringIpv6NullableRequest handles test_request_string_ipv6_nullable operation.
//
// POST /test_request_string_ipv6_nullable
func (s *Server) handleTestRequestStringIpv6NullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ipv6_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringIpv6Nullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringIpv6NullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringIpv6Nullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringIpv6Nullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringIpv6NullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringIpv6NullableArrayRequest handles test_request_string_ipv6_nullable_array operation.
//
// POST /test_request_string_ipv6_nullable_array
func (s *Server) handleTestRequestStringIpv6NullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ipv6_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringIpv6NullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringIpv6NullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringIpv6NullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringIpv6NullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringIpv6NullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringIpv6NullableArrayArrayRequest handles test_request_string_ipv6_nullable_array_array operation.
//
// POST /test_request_string_ipv6_nullable_array_array
func (s *Server) handleTestRequestStringIpv6NullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_ipv6_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringIpv6NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringIpv6NullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringIpv6NullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringIpv6NullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringIpv6NullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringNullableRequest handles test_request_string_nullable operation.
//
// POST /test_request_string_nullable
func (s *Server) handleTestRequestStringNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringNullableArrayRequest handles test_request_string_nullable_array operation.
//
// POST /test_request_string_nullable_array
func (s *Server) handleTestRequestStringNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringNullableArrayArrayRequest handles test_request_string_nullable_array_array operation.
//
// POST /test_request_string_nullable_array_array
func (s *Server) handleTestRequestStringNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringPasswordRequest handles test_request_string_password operation.
//
// POST /test_request_string_password
func (s *Server) handleTestRequestStringPasswordRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_password"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringPassword",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringPasswordRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringPassword",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringPassword(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringPasswordResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringPasswordArrayRequest handles test_request_string_password_array operation.
//
// POST /test_request_string_password_array
func (s *Server) handleTestRequestStringPasswordArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_password_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringPasswordArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringPasswordArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringPasswordArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringPasswordArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringPasswordArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringPasswordArrayArrayRequest handles test_request_string_password_array_array operation.
//
// POST /test_request_string_password_array_array
func (s *Server) handleTestRequestStringPasswordArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_password_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringPasswordArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringPasswordArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringPasswordArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringPasswordArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringPasswordArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringPasswordNullableRequest handles test_request_string_password_nullable operation.
//
// POST /test_request_string_password_nullable
func (s *Server) handleTestRequestStringPasswordNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_password_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringPasswordNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringPasswordNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringPasswordNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringPasswordNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringPasswordNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringPasswordNullableArrayRequest handles test_request_string_password_nullable_array operation.
//
// POST /test_request_string_password_nullable_array
func (s *Server) handleTestRequestStringPasswordNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_password_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringPasswordNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringPasswordNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringPasswordNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringPasswordNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringPasswordNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringPasswordNullableArrayArrayRequest handles test_request_string_password_nullable_array_array operation.
//
// POST /test_request_string_password_nullable_array_array
func (s *Server) handleTestRequestStringPasswordNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_password_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringPasswordNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringPasswordNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringPasswordNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringPasswordNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringPasswordNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringTimeRequest handles test_request_string_time operation.
//
// POST /test_request_string_time
func (s *Server) handleTestRequestStringTimeRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_time"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringTime",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringTimeRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringTime",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringTime(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringTimeResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringTimeArrayRequest handles test_request_string_time_array operation.
//
// POST /test_request_string_time_array
func (s *Server) handleTestRequestStringTimeArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_time_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringTimeArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringTimeArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringTimeArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringTimeArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringTimeArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringTimeArrayArrayRequest handles test_request_string_time_array_array operation.
//
// POST /test_request_string_time_array_array
func (s *Server) handleTestRequestStringTimeArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_time_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringTimeArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringTimeArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringTimeArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringTimeArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringTimeArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringTimeNullableRequest handles test_request_string_time_nullable operation.
//
// POST /test_request_string_time_nullable
func (s *Server) handleTestRequestStringTimeNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_time_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringTimeNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringTimeNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringTimeNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringTimeNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringTimeNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringTimeNullableArrayRequest handles test_request_string_time_nullable_array operation.
//
// POST /test_request_string_time_nullable_array
func (s *Server) handleTestRequestStringTimeNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_time_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringTimeNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringTimeNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringTimeNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringTimeNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringTimeNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringTimeNullableArrayArrayRequest handles test_request_string_time_nullable_array_array operation.
//
// POST /test_request_string_time_nullable_array_array
func (s *Server) handleTestRequestStringTimeNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_time_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringTimeNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringTimeNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringTimeNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringTimeNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringTimeNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringURIRequest handles test_request_string_uri operation.
//
// POST /test_request_string_uri
func (s *Server) handleTestRequestStringURIRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uri"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringURI",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringURIRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringURI",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringURI(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringURIResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringURIArrayRequest handles test_request_string_uri_array operation.
//
// POST /test_request_string_uri_array
func (s *Server) handleTestRequestStringURIArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uri_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringURIArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringURIArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringURIArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringURIArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringURIArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringURIArrayArrayRequest handles test_request_string_uri_array_array operation.
//
// POST /test_request_string_uri_array_array
func (s *Server) handleTestRequestStringURIArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uri_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringURIArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringURIArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringURIArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringURIArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringURIArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringURINullableRequest handles test_request_string_uri_nullable operation.
//
// POST /test_request_string_uri_nullable
func (s *Server) handleTestRequestStringURINullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uri_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringURINullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringURINullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringURINullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringURINullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringURINullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringURINullableArrayRequest handles test_request_string_uri_nullable_array operation.
//
// POST /test_request_string_uri_nullable_array
func (s *Server) handleTestRequestStringURINullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uri_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringURINullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringURINullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringURINullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringURINullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringURINullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringURINullableArrayArrayRequest handles test_request_string_uri_nullable_array_array operation.
//
// POST /test_request_string_uri_nullable_array_array
func (s *Server) handleTestRequestStringURINullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uri_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringURINullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringURINullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringURINullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringURINullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringURINullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringUUIDRequest handles test_request_string_uuid operation.
//
// POST /test_request_string_uuid
func (s *Server) handleTestRequestStringUUIDRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uuid"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringUUID",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringUUIDRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringUUID",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringUUID(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringUUIDResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringUUIDArrayRequest handles test_request_string_uuid_array operation.
//
// POST /test_request_string_uuid_array
func (s *Server) handleTestRequestStringUUIDArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uuid_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringUUIDArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringUUIDArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringUUIDArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringUUIDArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringUUIDArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringUUIDArrayArrayRequest handles test_request_string_uuid_array_array operation.
//
// POST /test_request_string_uuid_array_array
func (s *Server) handleTestRequestStringUUIDArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uuid_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringUUIDArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringUUIDArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringUUIDArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringUUIDArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringUUIDArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringUUIDNullableRequest handles test_request_string_uuid_nullable operation.
//
// POST /test_request_string_uuid_nullable
func (s *Server) handleTestRequestStringUUIDNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uuid_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringUUIDNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringUUIDNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringUUIDNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringUUIDNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringUUIDNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringUUIDNullableArrayRequest handles test_request_string_uuid_nullable_array operation.
//
// POST /test_request_string_uuid_nullable_array
func (s *Server) handleTestRequestStringUUIDNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uuid_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringUUIDNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringUUIDNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringUUIDNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringUUIDNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringUUIDNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringUUIDNullableArrayArrayRequest handles test_request_string_uuid_nullable_array_array operation.
//
// POST /test_request_string_uuid_nullable_array_array
func (s *Server) handleTestRequestStringUUIDNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_uuid_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringUUIDNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringUUIDNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringUUIDNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringUUIDNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringUUIDNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringUnixRequest handles test_request_string_unix operation.
//
// POST /test_request_string_unix
func (s *Server) handleTestRequestStringUnixRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringUnix",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringUnixRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringUnix",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringUnix(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringUnixResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringUnixArrayRequest handles test_request_string_unix_array operation.
//
// POST /test_request_string_unix_array
func (s *Server) handleTestRequestStringUnixArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringUnixArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringUnixArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringUnixArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringUnixArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringUnixArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringUnixArrayArrayRequest handles test_request_string_unix_array_array operation.
//
// POST /test_request_string_unix_array_array
func (s *Server) handleTestRequestStringUnixArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringUnixArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringUnixArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringUnixArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringUnixArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringUnixArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringUnixMicroRequest handles test_request_string_unix-micro operation.
//
// POST /test_request_string_unix-micro
func (s *Server) handleTestRequestStringUnixMicroRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-micro"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringUnixMicro",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringUnixMicroRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringUnixMicro",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringUnixMicro(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringUnixMicroResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringUnixMicroArrayRequest handles test_request_string_unix-micro_array operation.
//
// POST /test_request_string_unix-micro_array
func (s *Server) handleTestRequestStringUnixMicroArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-micro_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringUnixMicroArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringUnixMicroArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringUnixMicroArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringUnixMicroArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringUnixMicroArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringUnixMicroArrayArrayRequest handles test_request_string_unix-micro_array_array operation.
//
// POST /test_request_string_unix-micro_array_array
func (s *Server) handleTestRequestStringUnixMicroArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-micro_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringUnixMicroArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringUnixMicroArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringUnixMicroArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringUnixMicroArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringUnixMicroArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringUnixMicroNullableRequest handles test_request_string_unix-micro_nullable operation.
//
// POST /test_request_string_unix-micro_nullable
func (s *Server) handleTestRequestStringUnixMicroNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-micro_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringUnixMicroNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringUnixMicroNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringUnixMicroNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringUnixMicroNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringUnixMicroNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringUnixMicroNullableArrayRequest handles test_request_string_unix-micro_nullable_array operation.
//
// POST /test_request_string_unix-micro_nullable_array
func (s *Server) handleTestRequestStringUnixMicroNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-micro_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringUnixMicroNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringUnixMicroNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringUnixMicroNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringUnixMicroNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringUnixMicroNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringUnixMicroNullableArrayArrayRequest handles test_request_string_unix-micro_nullable_array_array operation.
//
// POST /test_request_string_unix-micro_nullable_array_array
func (s *Server) handleTestRequestStringUnixMicroNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-micro_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringUnixMicroNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringUnixMicroNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringUnixMicroNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringUnixMicroNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringUnixMicroNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringUnixMilliRequest handles test_request_string_unix-milli operation.
//
// POST /test_request_string_unix-milli
func (s *Server) handleTestRequestStringUnixMilliRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-milli"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringUnixMilli",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringUnixMilliRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringUnixMilli",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringUnixMilli(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringUnixMilliResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringUnixMilliArrayRequest handles test_request_string_unix-milli_array operation.
//
// POST /test_request_string_unix-milli_array
func (s *Server) handleTestRequestStringUnixMilliArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-milli_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringUnixMilliArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringUnixMilliArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringUnixMilliArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringUnixMilliArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringUnixMilliArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringUnixMilliArrayArrayRequest handles test_request_string_unix-milli_array_array operation.
//
// POST /test_request_string_unix-milli_array_array
func (s *Server) handleTestRequestStringUnixMilliArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-milli_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringUnixMilliArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringUnixMilliArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringUnixMilliArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringUnixMilliArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringUnixMilliArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringUnixMilliNullableRequest handles test_request_string_unix-milli_nullable operation.
//
// POST /test_request_string_unix-milli_nullable
func (s *Server) handleTestRequestStringUnixMilliNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-milli_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringUnixMilliNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringUnixMilliNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringUnixMilliNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringUnixMilliNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringUnixMilliNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringUnixMilliNullableArrayRequest handles test_request_string_unix-milli_nullable_array operation.
//
// POST /test_request_string_unix-milli_nullable_array
func (s *Server) handleTestRequestStringUnixMilliNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-milli_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringUnixMilliNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringUnixMilliNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringUnixMilliNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringUnixMilliNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringUnixMilliNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringUnixMilliNullableArrayArrayRequest handles test_request_string_unix-milli_nullable_array_array operation.
//
// POST /test_request_string_unix-milli_nullable_array_array
func (s *Server) handleTestRequestStringUnixMilliNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-milli_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringUnixMilliNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringUnixMilliNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringUnixMilliNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringUnixMilliNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringUnixMilliNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringUnixNanoRequest handles test_request_string_unix-nano operation.
//
// POST /test_request_string_unix-nano
func (s *Server) handleTestRequestStringUnixNanoRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-nano"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringUnixNano",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringUnixNanoRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringUnixNano",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringUnixNano(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringUnixNanoResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringUnixNanoArrayRequest handles test_request_string_unix-nano_array operation.
//
// POST /test_request_string_unix-nano_array
func (s *Server) handleTestRequestStringUnixNanoArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-nano_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringUnixNanoArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringUnixNanoArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringUnixNanoArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringUnixNanoArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringUnixNanoArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringUnixNanoArrayArrayRequest handles test_request_string_unix-nano_array_array operation.
//
// POST /test_request_string_unix-nano_array_array
func (s *Server) handleTestRequestStringUnixNanoArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-nano_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringUnixNanoArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringUnixNanoArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringUnixNanoArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringUnixNanoArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringUnixNanoArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringUnixNanoNullableRequest handles test_request_string_unix-nano_nullable operation.
//
// POST /test_request_string_unix-nano_nullable
func (s *Server) handleTestRequestStringUnixNanoNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-nano_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringUnixNanoNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringUnixNanoNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringUnixNanoNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringUnixNanoNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringUnixNanoNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringUnixNanoNullableArrayRequest handles test_request_string_unix-nano_nullable_array operation.
//
// POST /test_request_string_unix-nano_nullable_array
func (s *Server) handleTestRequestStringUnixNanoNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-nano_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringUnixNanoNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringUnixNanoNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringUnixNanoNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringUnixNanoNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringUnixNanoNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringUnixNanoNullableArrayArrayRequest handles test_request_string_unix-nano_nullable_array_array operation.
//
// POST /test_request_string_unix-nano_nullable_array_array
func (s *Server) handleTestRequestStringUnixNanoNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-nano_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringUnixNanoNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringUnixNanoNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringUnixNanoNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringUnixNanoNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringUnixNanoNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringUnixNullableRequest handles test_request_string_unix_nullable operation.
//
// POST /test_request_string_unix_nullable
func (s *Server) handleTestRequestStringUnixNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringUnixNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringUnixNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringUnixNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringUnixNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringUnixNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringUnixNullableArrayRequest handles test_request_string_unix_nullable_array operation.
//
// POST /test_request_string_unix_nullable_array
func (s *Server) handleTestRequestStringUnixNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringUnixNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringUnixNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringUnixNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringUnixNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringUnixNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringUnixNullableArrayArrayRequest handles test_request_string_unix_nullable_array_array operation.
//
// POST /test_request_string_unix_nullable_array_array
func (s *Server) handleTestRequestStringUnixNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringUnixNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringUnixNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringUnixNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringUnixNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringUnixNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringUnixSecondsRequest handles test_request_string_unix-seconds operation.
//
// POST /test_request_string_unix-seconds
func (s *Server) handleTestRequestStringUnixSecondsRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-seconds"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringUnixSeconds",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringUnixSecondsRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringUnixSeconds",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringUnixSeconds(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringUnixSecondsResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringUnixSecondsArrayRequest handles test_request_string_unix-seconds_array operation.
//
// POST /test_request_string_unix-seconds_array
func (s *Server) handleTestRequestStringUnixSecondsArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-seconds_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringUnixSecondsArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringUnixSecondsArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringUnixSecondsArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringUnixSecondsArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringUnixSecondsArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringUnixSecondsArrayArrayRequest handles test_request_string_unix-seconds_array_array operation.
//
// POST /test_request_string_unix-seconds_array_array
func (s *Server) handleTestRequestStringUnixSecondsArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-seconds_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringUnixSecondsArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringUnixSecondsArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringUnixSecondsArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringUnixSecondsArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringUnixSecondsArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringUnixSecondsNullableRequest handles test_request_string_unix-seconds_nullable operation.
//
// POST /test_request_string_unix-seconds_nullable
func (s *Server) handleTestRequestStringUnixSecondsNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-seconds_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringUnixSecondsNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringUnixSecondsNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringUnixSecondsNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringUnixSecondsNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringUnixSecondsNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringUnixSecondsNullableArrayRequest handles test_request_string_unix-seconds_nullable_array operation.
//
// POST /test_request_string_unix-seconds_nullable_array
func (s *Server) handleTestRequestStringUnixSecondsNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-seconds_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringUnixSecondsNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringUnixSecondsNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringUnixSecondsNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringUnixSecondsNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringUnixSecondsNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestRequestStringUnixSecondsNullableArrayArrayRequest handles test_request_string_unix-seconds_nullable_array_array operation.
//
// POST /test_request_string_unix-seconds_nullable_array_array
func (s *Server) handleTestRequestStringUnixSecondsNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_request_string_unix-seconds_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestRequestStringUnixSecondsNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestRequestStringUnixSecondsNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestRequestStringUnixSecondsNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestRequestStringUnixSecondsNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestRequestStringUnixSecondsNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseAnyRequest handles test_response_Any operation.
//
// POST /test_response_Any
func (s *Server) handleTestResponseAnyRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_Any"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseAny",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseAnyRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseAny",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseAny(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseAnyResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseBooleanRequest handles test_response_boolean operation.
//
// POST /test_response_boolean
func (s *Server) handleTestResponseBooleanRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_boolean"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseBoolean",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseBooleanRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseBoolean",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseBoolean(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseBooleanResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseBooleanArrayRequest handles test_response_boolean_array operation.
//
// POST /test_response_boolean_array
func (s *Server) handleTestResponseBooleanArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_boolean_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseBooleanArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseBooleanArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseBooleanArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseBooleanArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseBooleanArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseBooleanArrayArrayRequest handles test_response_boolean_array_array operation.
//
// POST /test_response_boolean_array_array
func (s *Server) handleTestResponseBooleanArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_boolean_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseBooleanArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseBooleanArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseBooleanArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseBooleanArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseBooleanArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseBooleanNullableRequest handles test_response_boolean_nullable operation.
//
// POST /test_response_boolean_nullable
func (s *Server) handleTestResponseBooleanNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_boolean_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseBooleanNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseBooleanNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseBooleanNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseBooleanNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseBooleanNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseBooleanNullableArrayRequest handles test_response_boolean_nullable_array operation.
//
// POST /test_response_boolean_nullable_array
func (s *Server) handleTestResponseBooleanNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_boolean_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseBooleanNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseBooleanNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseBooleanNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseBooleanNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseBooleanNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseBooleanNullableArrayArrayRequest handles test_response_boolean_nullable_array_array operation.
//
// POST /test_response_boolean_nullable_array_array
func (s *Server) handleTestResponseBooleanNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_boolean_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseBooleanNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseBooleanNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseBooleanNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseBooleanNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseBooleanNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseEmptyStructRequest handles test_response_EmptyStruct operation.
//
// POST /test_response_EmptyStruct
func (s *Server) handleTestResponseEmptyStructRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_EmptyStruct"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseEmptyStruct",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseEmptyStructRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseEmptyStruct",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseEmptyStruct(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseEmptyStructResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseFormatTestRequest handles test_response_FormatTest operation.
//
// POST /test_response_FormatTest
func (s *Server) handleTestResponseFormatTestRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_FormatTest"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseFormatTest",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseFormatTestRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseFormatTest",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseFormatTest(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseFormatTestResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseIntegerRequest handles test_response_integer operation.
//
// POST /test_response_integer
func (s *Server) handleTestResponseIntegerRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseInteger",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseIntegerRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseInteger",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseInteger(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseIntegerResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseIntegerArrayRequest handles test_response_integer_array operation.
//
// POST /test_response_integer_array
func (s *Server) handleTestResponseIntegerArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseIntegerArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseIntegerArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseIntegerArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseIntegerArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseIntegerArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseIntegerArrayArrayRequest handles test_response_integer_array_array operation.
//
// POST /test_response_integer_array_array
func (s *Server) handleTestResponseIntegerArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseIntegerArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseIntegerArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseIntegerArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseIntegerArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseIntegerArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseIntegerInt32Request handles test_response_integer_int32 operation.
//
// POST /test_response_integer_int32
func (s *Server) handleTestResponseIntegerInt32Request(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_int32"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseIntegerInt32",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseIntegerInt32Request(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseIntegerInt32",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseIntegerInt32(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseIntegerInt32Response(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseIntegerInt32ArrayRequest handles test_response_integer_int32_array operation.
//
// POST /test_response_integer_int32_array
func (s *Server) handleTestResponseIntegerInt32ArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_int32_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseIntegerInt32Array",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseIntegerInt32ArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseIntegerInt32Array",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseIntegerInt32Array(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseIntegerInt32ArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseIntegerInt32ArrayArrayRequest handles test_response_integer_int32_array_array operation.
//
// POST /test_response_integer_int32_array_array
func (s *Server) handleTestResponseIntegerInt32ArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_int32_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseIntegerInt32ArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseIntegerInt32ArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseIntegerInt32ArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseIntegerInt32ArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseIntegerInt32ArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseIntegerInt32NullableRequest handles test_response_integer_int32_nullable operation.
//
// POST /test_response_integer_int32_nullable
func (s *Server) handleTestResponseIntegerInt32NullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_int32_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseIntegerInt32Nullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseIntegerInt32NullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseIntegerInt32Nullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseIntegerInt32Nullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseIntegerInt32NullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseIntegerInt32NullableArrayRequest handles test_response_integer_int32_nullable_array operation.
//
// POST /test_response_integer_int32_nullable_array
func (s *Server) handleTestResponseIntegerInt32NullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_int32_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseIntegerInt32NullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseIntegerInt32NullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseIntegerInt32NullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseIntegerInt32NullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseIntegerInt32NullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseIntegerInt32NullableArrayArrayRequest handles test_response_integer_int32_nullable_array_array operation.
//
// POST /test_response_integer_int32_nullable_array_array
func (s *Server) handleTestResponseIntegerInt32NullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_int32_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseIntegerInt32NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseIntegerInt32NullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseIntegerInt32NullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseIntegerInt32NullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseIntegerInt32NullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseIntegerInt64Request handles test_response_integer_int64 operation.
//
// POST /test_response_integer_int64
func (s *Server) handleTestResponseIntegerInt64Request(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_int64"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseIntegerInt64",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseIntegerInt64Request(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseIntegerInt64",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseIntegerInt64(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseIntegerInt64Response(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseIntegerInt64ArrayRequest handles test_response_integer_int64_array operation.
//
// POST /test_response_integer_int64_array
func (s *Server) handleTestResponseIntegerInt64ArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_int64_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseIntegerInt64Array",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseIntegerInt64ArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseIntegerInt64Array",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseIntegerInt64Array(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseIntegerInt64ArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseIntegerInt64ArrayArrayRequest handles test_response_integer_int64_array_array operation.
//
// POST /test_response_integer_int64_array_array
func (s *Server) handleTestResponseIntegerInt64ArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_int64_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseIntegerInt64ArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseIntegerInt64ArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseIntegerInt64ArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseIntegerInt64ArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseIntegerInt64ArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseIntegerInt64NullableRequest handles test_response_integer_int64_nullable operation.
//
// POST /test_response_integer_int64_nullable
func (s *Server) handleTestResponseIntegerInt64NullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_int64_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseIntegerInt64Nullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseIntegerInt64NullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseIntegerInt64Nullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseIntegerInt64Nullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseIntegerInt64NullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseIntegerInt64NullableArrayRequest handles test_response_integer_int64_nullable_array operation.
//
// POST /test_response_integer_int64_nullable_array
func (s *Server) handleTestResponseIntegerInt64NullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_int64_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseIntegerInt64NullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseIntegerInt64NullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseIntegerInt64NullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseIntegerInt64NullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseIntegerInt64NullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseIntegerInt64NullableArrayArrayRequest handles test_response_integer_int64_nullable_array_array operation.
//
// POST /test_response_integer_int64_nullable_array_array
func (s *Server) handleTestResponseIntegerInt64NullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_int64_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseIntegerInt64NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseIntegerInt64NullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseIntegerInt64NullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseIntegerInt64NullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseIntegerInt64NullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseIntegerNullableRequest handles test_response_integer_nullable operation.
//
// POST /test_response_integer_nullable
func (s *Server) handleTestResponseIntegerNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseIntegerNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseIntegerNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseIntegerNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseIntegerNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseIntegerNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseIntegerNullableArrayRequest handles test_response_integer_nullable_array operation.
//
// POST /test_response_integer_nullable_array
func (s *Server) handleTestResponseIntegerNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseIntegerNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseIntegerNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseIntegerNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseIntegerNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseIntegerNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseIntegerNullableArrayArrayRequest handles test_response_integer_nullable_array_array operation.
//
// POST /test_response_integer_nullable_array_array
func (s *Server) handleTestResponseIntegerNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_integer_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseIntegerNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseIntegerNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseIntegerNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseIntegerNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseIntegerNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseNullRequest handles test_response_null operation.
//
// POST /test_response_null
func (s *Server) handleTestResponseNullRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_null"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseNull",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseNullRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseNull",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseNull(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseNullResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseNullArrayRequest handles test_response_null_array operation.
//
// POST /test_response_null_array
func (s *Server) handleTestResponseNullArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_null_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseNullArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseNullArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseNullArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseNullArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseNullArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseNullArrayArrayRequest handles test_response_null_array_array operation.
//
// POST /test_response_null_array_array
func (s *Server) handleTestResponseNullArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_null_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseNullArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseNullArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseNullArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseNullArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseNullArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseNullNullableRequest handles test_response_null_nullable operation.
//
// POST /test_response_null_nullable
func (s *Server) handleTestResponseNullNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_null_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseNullNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseNullNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseNullNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseNullNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseNullNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseNullNullableArrayRequest handles test_response_null_nullable_array operation.
//
// POST /test_response_null_nullable_array
func (s *Server) handleTestResponseNullNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_null_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseNullNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseNullNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseNullNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseNullNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseNullNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseNullNullableArrayArrayRequest handles test_response_null_nullable_array_array operation.
//
// POST /test_response_null_nullable_array_array
func (s *Server) handleTestResponseNullNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_null_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseNullNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseNullNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseNullNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseNullNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseNullNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseNumberRequest handles test_response_number operation.
//
// POST /test_response_number
func (s *Server) handleTestResponseNumberRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseNumber",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseNumberRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseNumber",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseNumber(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseNumberResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseNumberArrayRequest handles test_response_number_array operation.
//
// POST /test_response_number_array
func (s *Server) handleTestResponseNumberArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseNumberArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseNumberArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseNumberArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseNumberArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseNumberArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseNumberArrayArrayRequest handles test_response_number_array_array operation.
//
// POST /test_response_number_array_array
func (s *Server) handleTestResponseNumberArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseNumberArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseNumberArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseNumberArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseNumberArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseNumberArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseNumberDoubleRequest handles test_response_number_double operation.
//
// POST /test_response_number_double
func (s *Server) handleTestResponseNumberDoubleRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_double"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseNumberDouble",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseNumberDoubleRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseNumberDouble",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseNumberDouble(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseNumberDoubleResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseNumberDoubleArrayRequest handles test_response_number_double_array operation.
//
// POST /test_response_number_double_array
func (s *Server) handleTestResponseNumberDoubleArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_double_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseNumberDoubleArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseNumberDoubleArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseNumberDoubleArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseNumberDoubleArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseNumberDoubleArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseNumberDoubleArrayArrayRequest handles test_response_number_double_array_array operation.
//
// POST /test_response_number_double_array_array
func (s *Server) handleTestResponseNumberDoubleArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_double_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseNumberDoubleArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseNumberDoubleArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseNumberDoubleArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseNumberDoubleArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseNumberDoubleArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseNumberDoubleNullableRequest handles test_response_number_double_nullable operation.
//
// POST /test_response_number_double_nullable
func (s *Server) handleTestResponseNumberDoubleNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_double_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseNumberDoubleNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseNumberDoubleNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseNumberDoubleNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseNumberDoubleNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseNumberDoubleNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseNumberDoubleNullableArrayRequest handles test_response_number_double_nullable_array operation.
//
// POST /test_response_number_double_nullable_array
func (s *Server) handleTestResponseNumberDoubleNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_double_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseNumberDoubleNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseNumberDoubleNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseNumberDoubleNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseNumberDoubleNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseNumberDoubleNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseNumberDoubleNullableArrayArrayRequest handles test_response_number_double_nullable_array_array operation.
//
// POST /test_response_number_double_nullable_array_array
func (s *Server) handleTestResponseNumberDoubleNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_double_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseNumberDoubleNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseNumberDoubleNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseNumberDoubleNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseNumberDoubleNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseNumberDoubleNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseNumberFloatRequest handles test_response_number_float operation.
//
// POST /test_response_number_float
func (s *Server) handleTestResponseNumberFloatRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_float"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseNumberFloat",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseNumberFloatRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseNumberFloat",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseNumberFloat(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseNumberFloatResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseNumberFloatArrayRequest handles test_response_number_float_array operation.
//
// POST /test_response_number_float_array
func (s *Server) handleTestResponseNumberFloatArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_float_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseNumberFloatArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseNumberFloatArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseNumberFloatArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseNumberFloatArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseNumberFloatArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseNumberFloatArrayArrayRequest handles test_response_number_float_array_array operation.
//
// POST /test_response_number_float_array_array
func (s *Server) handleTestResponseNumberFloatArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_float_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseNumberFloatArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseNumberFloatArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseNumberFloatArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseNumberFloatArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseNumberFloatArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseNumberFloatNullableRequest handles test_response_number_float_nullable operation.
//
// POST /test_response_number_float_nullable
func (s *Server) handleTestResponseNumberFloatNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_float_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseNumberFloatNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseNumberFloatNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseNumberFloatNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseNumberFloatNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseNumberFloatNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseNumberFloatNullableArrayRequest handles test_response_number_float_nullable_array operation.
//
// POST /test_response_number_float_nullable_array
func (s *Server) handleTestResponseNumberFloatNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_float_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseNumberFloatNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseNumberFloatNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseNumberFloatNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseNumberFloatNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseNumberFloatNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseNumberFloatNullableArrayArrayRequest handles test_response_number_float_nullable_array_array operation.
//
// POST /test_response_number_float_nullable_array_array
func (s *Server) handleTestResponseNumberFloatNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_float_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseNumberFloatNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseNumberFloatNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseNumberFloatNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseNumberFloatNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseNumberFloatNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseNumberInt32Request handles test_response_number_int32 operation.
//
// POST /test_response_number_int32
func (s *Server) handleTestResponseNumberInt32Request(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_int32"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseNumberInt32",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseNumberInt32Request(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseNumberInt32",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseNumberInt32(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseNumberInt32Response(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseNumberInt32ArrayRequest handles test_response_number_int32_array operation.
//
// POST /test_response_number_int32_array
func (s *Server) handleTestResponseNumberInt32ArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_int32_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseNumberInt32Array",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseNumberInt32ArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseNumberInt32Array",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseNumberInt32Array(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseNumberInt32ArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseNumberInt32ArrayArrayRequest handles test_response_number_int32_array_array operation.
//
// POST /test_response_number_int32_array_array
func (s *Server) handleTestResponseNumberInt32ArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_int32_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseNumberInt32ArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseNumberInt32ArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseNumberInt32ArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseNumberInt32ArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseNumberInt32ArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseNumberInt32NullableRequest handles test_response_number_int32_nullable operation.
//
// POST /test_response_number_int32_nullable
func (s *Server) handleTestResponseNumberInt32NullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_int32_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseNumberInt32Nullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseNumberInt32NullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseNumberInt32Nullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseNumberInt32Nullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseNumberInt32NullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseNumberInt32NullableArrayRequest handles test_response_number_int32_nullable_array operation.
//
// POST /test_response_number_int32_nullable_array
func (s *Server) handleTestResponseNumberInt32NullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_int32_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseNumberInt32NullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseNumberInt32NullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseNumberInt32NullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseNumberInt32NullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseNumberInt32NullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseNumberInt32NullableArrayArrayRequest handles test_response_number_int32_nullable_array_array operation.
//
// POST /test_response_number_int32_nullable_array_array
func (s *Server) handleTestResponseNumberInt32NullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_int32_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseNumberInt32NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseNumberInt32NullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseNumberInt32NullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseNumberInt32NullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseNumberInt32NullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseNumberInt64Request handles test_response_number_int64 operation.
//
// POST /test_response_number_int64
func (s *Server) handleTestResponseNumberInt64Request(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_int64"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseNumberInt64",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseNumberInt64Request(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseNumberInt64",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseNumberInt64(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseNumberInt64Response(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseNumberInt64ArrayRequest handles test_response_number_int64_array operation.
//
// POST /test_response_number_int64_array
func (s *Server) handleTestResponseNumberInt64ArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_int64_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseNumberInt64Array",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseNumberInt64ArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseNumberInt64Array",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseNumberInt64Array(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseNumberInt64ArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseNumberInt64ArrayArrayRequest handles test_response_number_int64_array_array operation.
//
// POST /test_response_number_int64_array_array
func (s *Server) handleTestResponseNumberInt64ArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_int64_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseNumberInt64ArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseNumberInt64ArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseNumberInt64ArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseNumberInt64ArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseNumberInt64ArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseNumberInt64NullableRequest handles test_response_number_int64_nullable operation.
//
// POST /test_response_number_int64_nullable
func (s *Server) handleTestResponseNumberInt64NullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_int64_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseNumberInt64Nullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseNumberInt64NullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseNumberInt64Nullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseNumberInt64Nullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseNumberInt64NullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseNumberInt64NullableArrayRequest handles test_response_number_int64_nullable_array operation.
//
// POST /test_response_number_int64_nullable_array
func (s *Server) handleTestResponseNumberInt64NullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_int64_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseNumberInt64NullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseNumberInt64NullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseNumberInt64NullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseNumberInt64NullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseNumberInt64NullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseNumberInt64NullableArrayArrayRequest handles test_response_number_int64_nullable_array_array operation.
//
// POST /test_response_number_int64_nullable_array_array
func (s *Server) handleTestResponseNumberInt64NullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_int64_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseNumberInt64NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseNumberInt64NullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseNumberInt64NullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseNumberInt64NullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseNumberInt64NullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseNumberNullableRequest handles test_response_number_nullable operation.
//
// POST /test_response_number_nullable
func (s *Server) handleTestResponseNumberNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseNumberNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseNumberNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseNumberNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseNumberNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseNumberNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseNumberNullableArrayRequest handles test_response_number_nullable_array operation.
//
// POST /test_response_number_nullable_array
func (s *Server) handleTestResponseNumberNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseNumberNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseNumberNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseNumberNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseNumberNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseNumberNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseNumberNullableArrayArrayRequest handles test_response_number_nullable_array_array operation.
//
// POST /test_response_number_nullable_array_array
func (s *Server) handleTestResponseNumberNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_number_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseNumberNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseNumberNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseNumberNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseNumberNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseNumberNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringRequest handles test_response_string operation.
//
// POST /test_response_string
func (s *Server) handleTestResponseStringRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseString",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseString",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseString(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringArrayRequest handles test_response_string_array operation.
//
// POST /test_response_string_array
func (s *Server) handleTestResponseStringArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringArrayArrayRequest handles test_response_string_array_array operation.
//
// POST /test_response_string_array_array
func (s *Server) handleTestResponseStringArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringBinaryRequest handles test_response_string_binary operation.
//
// POST /test_response_string_binary
func (s *Server) handleTestResponseStringBinaryRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_binary"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringBinary",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringBinaryRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringBinary",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringBinary(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringBinaryResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringBinaryArrayRequest handles test_response_string_binary_array operation.
//
// POST /test_response_string_binary_array
func (s *Server) handleTestResponseStringBinaryArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_binary_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringBinaryArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringBinaryArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringBinaryArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringBinaryArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringBinaryArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringBinaryArrayArrayRequest handles test_response_string_binary_array_array operation.
//
// POST /test_response_string_binary_array_array
func (s *Server) handleTestResponseStringBinaryArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_binary_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringBinaryArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringBinaryArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringBinaryArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringBinaryArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringBinaryArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringBinaryNullableRequest handles test_response_string_binary_nullable operation.
//
// POST /test_response_string_binary_nullable
func (s *Server) handleTestResponseStringBinaryNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_binary_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringBinaryNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringBinaryNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringBinaryNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringBinaryNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringBinaryNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringBinaryNullableArrayRequest handles test_response_string_binary_nullable_array operation.
//
// POST /test_response_string_binary_nullable_array
func (s *Server) handleTestResponseStringBinaryNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_binary_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringBinaryNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringBinaryNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringBinaryNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringBinaryNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringBinaryNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringBinaryNullableArrayArrayRequest handles test_response_string_binary_nullable_array_array operation.
//
// POST /test_response_string_binary_nullable_array_array
func (s *Server) handleTestResponseStringBinaryNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_binary_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringBinaryNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringBinaryNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringBinaryNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringBinaryNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringBinaryNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringByteRequest handles test_response_string_byte operation.
//
// POST /test_response_string_byte
func (s *Server) handleTestResponseStringByteRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_byte"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringByte",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringByteRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringByte",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringByte(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringByteResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringByteArrayRequest handles test_response_string_byte_array operation.
//
// POST /test_response_string_byte_array
func (s *Server) handleTestResponseStringByteArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_byte_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringByteArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringByteArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringByteArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringByteArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringByteArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringByteArrayArrayRequest handles test_response_string_byte_array_array operation.
//
// POST /test_response_string_byte_array_array
func (s *Server) handleTestResponseStringByteArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_byte_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringByteArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringByteArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringByteArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringByteArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringByteArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringByteNullableRequest handles test_response_string_byte_nullable operation.
//
// POST /test_response_string_byte_nullable
func (s *Server) handleTestResponseStringByteNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_byte_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringByteNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringByteNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringByteNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringByteNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringByteNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringByteNullableArrayRequest handles test_response_string_byte_nullable_array operation.
//
// POST /test_response_string_byte_nullable_array
func (s *Server) handleTestResponseStringByteNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_byte_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringByteNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringByteNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringByteNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringByteNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringByteNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringByteNullableArrayArrayRequest handles test_response_string_byte_nullable_array_array operation.
//
// POST /test_response_string_byte_nullable_array_array
func (s *Server) handleTestResponseStringByteNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_byte_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringByteNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringByteNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringByteNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringByteNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringByteNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringDateRequest handles test_response_string_date operation.
//
// POST /test_response_string_date
func (s *Server) handleTestResponseStringDateRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_date"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringDate",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringDateRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringDate",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringDate(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringDateResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringDateArrayRequest handles test_response_string_date_array operation.
//
// POST /test_response_string_date_array
func (s *Server) handleTestResponseStringDateArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_date_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringDateArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringDateArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringDateArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringDateArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringDateArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringDateArrayArrayRequest handles test_response_string_date_array_array operation.
//
// POST /test_response_string_date_array_array
func (s *Server) handleTestResponseStringDateArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_date_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringDateArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringDateArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringDateArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringDateArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringDateArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringDateNullableRequest handles test_response_string_date_nullable operation.
//
// POST /test_response_string_date_nullable
func (s *Server) handleTestResponseStringDateNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_date_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringDateNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringDateNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringDateNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringDateNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringDateNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringDateNullableArrayRequest handles test_response_string_date_nullable_array operation.
//
// POST /test_response_string_date_nullable_array
func (s *Server) handleTestResponseStringDateNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_date_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringDateNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringDateNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringDateNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringDateNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringDateNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringDateNullableArrayArrayRequest handles test_response_string_date_nullable_array_array operation.
//
// POST /test_response_string_date_nullable_array_array
func (s *Server) handleTestResponseStringDateNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_date_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringDateNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringDateNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringDateNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringDateNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringDateNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringDateTimeRequest handles test_response_string_date-time operation.
//
// POST /test_response_string_date-time
func (s *Server) handleTestResponseStringDateTimeRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_date-time"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringDateTime",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringDateTimeRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringDateTime",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringDateTime(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringDateTimeResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringDateTimeArrayRequest handles test_response_string_date-time_array operation.
//
// POST /test_response_string_date-time_array
func (s *Server) handleTestResponseStringDateTimeArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_date-time_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringDateTimeArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringDateTimeArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringDateTimeArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringDateTimeArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringDateTimeArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringDateTimeArrayArrayRequest handles test_response_string_date-time_array_array operation.
//
// POST /test_response_string_date-time_array_array
func (s *Server) handleTestResponseStringDateTimeArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_date-time_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringDateTimeArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringDateTimeArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringDateTimeArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringDateTimeArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringDateTimeArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringDateTimeNullableRequest handles test_response_string_date-time_nullable operation.
//
// POST /test_response_string_date-time_nullable
func (s *Server) handleTestResponseStringDateTimeNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_date-time_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringDateTimeNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringDateTimeNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringDateTimeNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringDateTimeNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringDateTimeNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringDateTimeNullableArrayRequest handles test_response_string_date-time_nullable_array operation.
//
// POST /test_response_string_date-time_nullable_array
func (s *Server) handleTestResponseStringDateTimeNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_date-time_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringDateTimeNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringDateTimeNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringDateTimeNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringDateTimeNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringDateTimeNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringDateTimeNullableArrayArrayRequest handles test_response_string_date-time_nullable_array_array operation.
//
// POST /test_response_string_date-time_nullable_array_array
func (s *Server) handleTestResponseStringDateTimeNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_date-time_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringDateTimeNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringDateTimeNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringDateTimeNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringDateTimeNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringDateTimeNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringDurationRequest handles test_response_string_duration operation.
//
// POST /test_response_string_duration
func (s *Server) handleTestResponseStringDurationRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_duration"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringDuration",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringDurationRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringDuration",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringDuration(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringDurationResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringDurationArrayRequest handles test_response_string_duration_array operation.
//
// POST /test_response_string_duration_array
func (s *Server) handleTestResponseStringDurationArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_duration_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringDurationArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringDurationArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringDurationArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringDurationArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringDurationArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringDurationArrayArrayRequest handles test_response_string_duration_array_array operation.
//
// POST /test_response_string_duration_array_array
func (s *Server) handleTestResponseStringDurationArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_duration_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringDurationArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringDurationArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringDurationArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringDurationArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringDurationArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringDurationNullableRequest handles test_response_string_duration_nullable operation.
//
// POST /test_response_string_duration_nullable
func (s *Server) handleTestResponseStringDurationNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_duration_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringDurationNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringDurationNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringDurationNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringDurationNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringDurationNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringDurationNullableArrayRequest handles test_response_string_duration_nullable_array operation.
//
// POST /test_response_string_duration_nullable_array
func (s *Server) handleTestResponseStringDurationNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_duration_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringDurationNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringDurationNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringDurationNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringDurationNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringDurationNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringDurationNullableArrayArrayRequest handles test_response_string_duration_nullable_array_array operation.
//
// POST /test_response_string_duration_nullable_array_array
func (s *Server) handleTestResponseStringDurationNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_duration_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringDurationNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringDurationNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringDurationNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringDurationNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringDurationNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringEmailRequest handles test_response_string_email operation.
//
// POST /test_response_string_email
func (s *Server) handleTestResponseStringEmailRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_email"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringEmail",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringEmailRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringEmail",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringEmail(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringEmailResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringEmailArrayRequest handles test_response_string_email_array operation.
//
// POST /test_response_string_email_array
func (s *Server) handleTestResponseStringEmailArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_email_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringEmailArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringEmailArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringEmailArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringEmailArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringEmailArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringEmailArrayArrayRequest handles test_response_string_email_array_array operation.
//
// POST /test_response_string_email_array_array
func (s *Server) handleTestResponseStringEmailArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_email_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringEmailArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringEmailArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringEmailArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringEmailArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringEmailArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringEmailNullableRequest handles test_response_string_email_nullable operation.
//
// POST /test_response_string_email_nullable
func (s *Server) handleTestResponseStringEmailNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_email_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringEmailNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringEmailNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringEmailNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringEmailNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringEmailNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringEmailNullableArrayRequest handles test_response_string_email_nullable_array operation.
//
// POST /test_response_string_email_nullable_array
func (s *Server) handleTestResponseStringEmailNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_email_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringEmailNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringEmailNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringEmailNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringEmailNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringEmailNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringEmailNullableArrayArrayRequest handles test_response_string_email_nullable_array_array operation.
//
// POST /test_response_string_email_nullable_array_array
func (s *Server) handleTestResponseStringEmailNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_email_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringEmailNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringEmailNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringEmailNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringEmailNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringEmailNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringHostnameRequest handles test_response_string_hostname operation.
//
// POST /test_response_string_hostname
func (s *Server) handleTestResponseStringHostnameRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_hostname"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringHostname",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringHostnameRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringHostname",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringHostname(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringHostnameResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringHostnameArrayRequest handles test_response_string_hostname_array operation.
//
// POST /test_response_string_hostname_array
func (s *Server) handleTestResponseStringHostnameArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_hostname_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringHostnameArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringHostnameArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringHostnameArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringHostnameArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringHostnameArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringHostnameArrayArrayRequest handles test_response_string_hostname_array_array operation.
//
// POST /test_response_string_hostname_array_array
func (s *Server) handleTestResponseStringHostnameArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_hostname_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringHostnameArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringHostnameArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringHostnameArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringHostnameArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringHostnameArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringHostnameNullableRequest handles test_response_string_hostname_nullable operation.
//
// POST /test_response_string_hostname_nullable
func (s *Server) handleTestResponseStringHostnameNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_hostname_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringHostnameNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringHostnameNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringHostnameNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringHostnameNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringHostnameNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringHostnameNullableArrayRequest handles test_response_string_hostname_nullable_array operation.
//
// POST /test_response_string_hostname_nullable_array
func (s *Server) handleTestResponseStringHostnameNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_hostname_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringHostnameNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringHostnameNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringHostnameNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringHostnameNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringHostnameNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringHostnameNullableArrayArrayRequest handles test_response_string_hostname_nullable_array_array operation.
//
// POST /test_response_string_hostname_nullable_array_array
func (s *Server) handleTestResponseStringHostnameNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_hostname_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringHostnameNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringHostnameNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringHostnameNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringHostnameNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringHostnameNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringIPRequest handles test_response_string_ip operation.
//
// POST /test_response_string_ip
func (s *Server) handleTestResponseStringIPRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ip"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringIP",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringIPRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringIP",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringIP(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringIPResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringIPArrayRequest handles test_response_string_ip_array operation.
//
// POST /test_response_string_ip_array
func (s *Server) handleTestResponseStringIPArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ip_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringIPArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringIPArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringIPArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringIPArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringIPArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringIPArrayArrayRequest handles test_response_string_ip_array_array operation.
//
// POST /test_response_string_ip_array_array
func (s *Server) handleTestResponseStringIPArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ip_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringIPArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringIPArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringIPArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringIPArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringIPArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringIPNullableRequest handles test_response_string_ip_nullable operation.
//
// POST /test_response_string_ip_nullable
func (s *Server) handleTestResponseStringIPNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ip_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringIPNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringIPNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringIPNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringIPNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringIPNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringIPNullableArrayRequest handles test_response_string_ip_nullable_array operation.
//
// POST /test_response_string_ip_nullable_array
func (s *Server) handleTestResponseStringIPNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ip_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringIPNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringIPNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringIPNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringIPNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringIPNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringIPNullableArrayArrayRequest handles test_response_string_ip_nullable_array_array operation.
//
// POST /test_response_string_ip_nullable_array_array
func (s *Server) handleTestResponseStringIPNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ip_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringIPNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringIPNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringIPNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringIPNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringIPNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringInt32Request handles test_response_string_int32 operation.
//
// POST /test_response_string_int32
func (s *Server) handleTestResponseStringInt32Request(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int32"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringInt32",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringInt32Request(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringInt32",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringInt32(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringInt32Response(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringInt32ArrayRequest handles test_response_string_int32_array operation.
//
// POST /test_response_string_int32_array
func (s *Server) handleTestResponseStringInt32ArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int32_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringInt32Array",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringInt32ArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringInt32Array",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringInt32Array(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringInt32ArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringInt32ArrayArrayRequest handles test_response_string_int32_array_array operation.
//
// POST /test_response_string_int32_array_array
func (s *Server) handleTestResponseStringInt32ArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int32_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringInt32ArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringInt32ArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringInt32ArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringInt32ArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringInt32ArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringInt32NullableRequest handles test_response_string_int32_nullable operation.
//
// POST /test_response_string_int32_nullable
func (s *Server) handleTestResponseStringInt32NullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int32_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringInt32Nullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringInt32NullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringInt32Nullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringInt32Nullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringInt32NullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringInt32NullableArrayRequest handles test_response_string_int32_nullable_array operation.
//
// POST /test_response_string_int32_nullable_array
func (s *Server) handleTestResponseStringInt32NullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int32_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringInt32NullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringInt32NullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringInt32NullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringInt32NullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringInt32NullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringInt32NullableArrayArrayRequest handles test_response_string_int32_nullable_array_array operation.
//
// POST /test_response_string_int32_nullable_array_array
func (s *Server) handleTestResponseStringInt32NullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int32_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringInt32NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringInt32NullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringInt32NullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringInt32NullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringInt32NullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringInt64Request handles test_response_string_int64 operation.
//
// POST /test_response_string_int64
func (s *Server) handleTestResponseStringInt64Request(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int64"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringInt64",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringInt64Request(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringInt64",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringInt64(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringInt64Response(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringInt64ArrayRequest handles test_response_string_int64_array operation.
//
// POST /test_response_string_int64_array
func (s *Server) handleTestResponseStringInt64ArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int64_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringInt64Array",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringInt64ArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringInt64Array",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringInt64Array(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringInt64ArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringInt64ArrayArrayRequest handles test_response_string_int64_array_array operation.
//
// POST /test_response_string_int64_array_array
func (s *Server) handleTestResponseStringInt64ArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int64_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringInt64ArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringInt64ArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringInt64ArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringInt64ArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringInt64ArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringInt64NullableRequest handles test_response_string_int64_nullable operation.
//
// POST /test_response_string_int64_nullable
func (s *Server) handleTestResponseStringInt64NullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int64_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringInt64Nullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringInt64NullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringInt64Nullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringInt64Nullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringInt64NullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringInt64NullableArrayRequest handles test_response_string_int64_nullable_array operation.
//
// POST /test_response_string_int64_nullable_array
func (s *Server) handleTestResponseStringInt64NullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int64_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringInt64NullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringInt64NullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringInt64NullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringInt64NullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringInt64NullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringInt64NullableArrayArrayRequest handles test_response_string_int64_nullable_array_array operation.
//
// POST /test_response_string_int64_nullable_array_array
func (s *Server) handleTestResponseStringInt64NullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_int64_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringInt64NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringInt64NullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringInt64NullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringInt64NullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringInt64NullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringIpv4Request handles test_response_string_ipv4 operation.
//
// POST /test_response_string_ipv4
func (s *Server) handleTestResponseStringIpv4Request(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ipv4"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringIpv4",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringIpv4Request(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringIpv4",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringIpv4(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringIpv4Response(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringIpv4ArrayRequest handles test_response_string_ipv4_array operation.
//
// POST /test_response_string_ipv4_array
func (s *Server) handleTestResponseStringIpv4ArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ipv4_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringIpv4Array",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringIpv4ArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringIpv4Array",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringIpv4Array(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringIpv4ArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringIpv4ArrayArrayRequest handles test_response_string_ipv4_array_array operation.
//
// POST /test_response_string_ipv4_array_array
func (s *Server) handleTestResponseStringIpv4ArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ipv4_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringIpv4ArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringIpv4ArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringIpv4ArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringIpv4ArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringIpv4ArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringIpv4NullableRequest handles test_response_string_ipv4_nullable operation.
//
// POST /test_response_string_ipv4_nullable
func (s *Server) handleTestResponseStringIpv4NullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ipv4_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringIpv4Nullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringIpv4NullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringIpv4Nullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringIpv4Nullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringIpv4NullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringIpv4NullableArrayRequest handles test_response_string_ipv4_nullable_array operation.
//
// POST /test_response_string_ipv4_nullable_array
func (s *Server) handleTestResponseStringIpv4NullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ipv4_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringIpv4NullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringIpv4NullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringIpv4NullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringIpv4NullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringIpv4NullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringIpv4NullableArrayArrayRequest handles test_response_string_ipv4_nullable_array_array operation.
//
// POST /test_response_string_ipv4_nullable_array_array
func (s *Server) handleTestResponseStringIpv4NullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ipv4_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringIpv4NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringIpv4NullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringIpv4NullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringIpv4NullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringIpv4NullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringIpv6Request handles test_response_string_ipv6 operation.
//
// POST /test_response_string_ipv6
func (s *Server) handleTestResponseStringIpv6Request(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ipv6"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringIpv6",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringIpv6Request(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringIpv6",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringIpv6(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringIpv6Response(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringIpv6ArrayRequest handles test_response_string_ipv6_array operation.
//
// POST /test_response_string_ipv6_array
func (s *Server) handleTestResponseStringIpv6ArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ipv6_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringIpv6Array",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringIpv6ArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringIpv6Array",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringIpv6Array(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringIpv6ArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringIpv6ArrayArrayRequest handles test_response_string_ipv6_array_array operation.
//
// POST /test_response_string_ipv6_array_array
func (s *Server) handleTestResponseStringIpv6ArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ipv6_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringIpv6ArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringIpv6ArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringIpv6ArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringIpv6ArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringIpv6ArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringIpv6NullableRequest handles test_response_string_ipv6_nullable operation.
//
// POST /test_response_string_ipv6_nullable
func (s *Server) handleTestResponseStringIpv6NullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ipv6_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringIpv6Nullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringIpv6NullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringIpv6Nullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringIpv6Nullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringIpv6NullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringIpv6NullableArrayRequest handles test_response_string_ipv6_nullable_array operation.
//
// POST /test_response_string_ipv6_nullable_array
func (s *Server) handleTestResponseStringIpv6NullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ipv6_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringIpv6NullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringIpv6NullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringIpv6NullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringIpv6NullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringIpv6NullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringIpv6NullableArrayArrayRequest handles test_response_string_ipv6_nullable_array_array operation.
//
// POST /test_response_string_ipv6_nullable_array_array
func (s *Server) handleTestResponseStringIpv6NullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_ipv6_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringIpv6NullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringIpv6NullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringIpv6NullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringIpv6NullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringIpv6NullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringNullableRequest handles test_response_string_nullable operation.
//
// POST /test_response_string_nullable
func (s *Server) handleTestResponseStringNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringNullableArrayRequest handles test_response_string_nullable_array operation.
//
// POST /test_response_string_nullable_array
func (s *Server) handleTestResponseStringNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringNullableArrayArrayRequest handles test_response_string_nullable_array_array operation.
//
// POST /test_response_string_nullable_array_array
func (s *Server) handleTestResponseStringNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringPasswordRequest handles test_response_string_password operation.
//
// POST /test_response_string_password
func (s *Server) handleTestResponseStringPasswordRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_password"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringPassword",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringPasswordRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringPassword",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringPassword(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringPasswordResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringPasswordArrayRequest handles test_response_string_password_array operation.
//
// POST /test_response_string_password_array
func (s *Server) handleTestResponseStringPasswordArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_password_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringPasswordArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringPasswordArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringPasswordArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringPasswordArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringPasswordArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringPasswordArrayArrayRequest handles test_response_string_password_array_array operation.
//
// POST /test_response_string_password_array_array
func (s *Server) handleTestResponseStringPasswordArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_password_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringPasswordArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringPasswordArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringPasswordArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringPasswordArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringPasswordArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringPasswordNullableRequest handles test_response_string_password_nullable operation.
//
// POST /test_response_string_password_nullable
func (s *Server) handleTestResponseStringPasswordNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_password_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringPasswordNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringPasswordNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringPasswordNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringPasswordNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringPasswordNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringPasswordNullableArrayRequest handles test_response_string_password_nullable_array operation.
//
// POST /test_response_string_password_nullable_array
func (s *Server) handleTestResponseStringPasswordNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_password_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringPasswordNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringPasswordNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringPasswordNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringPasswordNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringPasswordNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringPasswordNullableArrayArrayRequest handles test_response_string_password_nullable_array_array operation.
//
// POST /test_response_string_password_nullable_array_array
func (s *Server) handleTestResponseStringPasswordNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_password_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringPasswordNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringPasswordNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringPasswordNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringPasswordNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringPasswordNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringTimeRequest handles test_response_string_time operation.
//
// POST /test_response_string_time
func (s *Server) handleTestResponseStringTimeRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_time"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringTime",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringTimeRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringTime",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringTime(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringTimeResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringTimeArrayRequest handles test_response_string_time_array operation.
//
// POST /test_response_string_time_array
func (s *Server) handleTestResponseStringTimeArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_time_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringTimeArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringTimeArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringTimeArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringTimeArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringTimeArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringTimeArrayArrayRequest handles test_response_string_time_array_array operation.
//
// POST /test_response_string_time_array_array
func (s *Server) handleTestResponseStringTimeArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_time_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringTimeArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringTimeArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringTimeArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringTimeArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringTimeArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringTimeNullableRequest handles test_response_string_time_nullable operation.
//
// POST /test_response_string_time_nullable
func (s *Server) handleTestResponseStringTimeNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_time_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringTimeNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringTimeNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringTimeNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringTimeNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringTimeNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringTimeNullableArrayRequest handles test_response_string_time_nullable_array operation.
//
// POST /test_response_string_time_nullable_array
func (s *Server) handleTestResponseStringTimeNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_time_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringTimeNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringTimeNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringTimeNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringTimeNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringTimeNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringTimeNullableArrayArrayRequest handles test_response_string_time_nullable_array_array operation.
//
// POST /test_response_string_time_nullable_array_array
func (s *Server) handleTestResponseStringTimeNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_time_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringTimeNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringTimeNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringTimeNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringTimeNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringTimeNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringURIRequest handles test_response_string_uri operation.
//
// POST /test_response_string_uri
func (s *Server) handleTestResponseStringURIRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uri"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringURI",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringURIRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringURI",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringURI(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringURIResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringURIArrayRequest handles test_response_string_uri_array operation.
//
// POST /test_response_string_uri_array
func (s *Server) handleTestResponseStringURIArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uri_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringURIArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringURIArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringURIArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringURIArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringURIArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringURIArrayArrayRequest handles test_response_string_uri_array_array operation.
//
// POST /test_response_string_uri_array_array
func (s *Server) handleTestResponseStringURIArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uri_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringURIArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringURIArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringURIArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringURIArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringURIArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringURINullableRequest handles test_response_string_uri_nullable operation.
//
// POST /test_response_string_uri_nullable
func (s *Server) handleTestResponseStringURINullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uri_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringURINullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringURINullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringURINullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringURINullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringURINullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringURINullableArrayRequest handles test_response_string_uri_nullable_array operation.
//
// POST /test_response_string_uri_nullable_array
func (s *Server) handleTestResponseStringURINullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uri_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringURINullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringURINullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringURINullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringURINullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringURINullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringURINullableArrayArrayRequest handles test_response_string_uri_nullable_array_array operation.
//
// POST /test_response_string_uri_nullable_array_array
func (s *Server) handleTestResponseStringURINullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uri_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringURINullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringURINullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringURINullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringURINullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringURINullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringUUIDRequest handles test_response_string_uuid operation.
//
// POST /test_response_string_uuid
func (s *Server) handleTestResponseStringUUIDRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uuid"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringUUID",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringUUIDRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringUUID",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringUUID(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringUUIDResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringUUIDArrayRequest handles test_response_string_uuid_array operation.
//
// POST /test_response_string_uuid_array
func (s *Server) handleTestResponseStringUUIDArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uuid_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringUUIDArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringUUIDArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringUUIDArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringUUIDArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringUUIDArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringUUIDArrayArrayRequest handles test_response_string_uuid_array_array operation.
//
// POST /test_response_string_uuid_array_array
func (s *Server) handleTestResponseStringUUIDArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uuid_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringUUIDArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringUUIDArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringUUIDArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringUUIDArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringUUIDArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringUUIDNullableRequest handles test_response_string_uuid_nullable operation.
//
// POST /test_response_string_uuid_nullable
func (s *Server) handleTestResponseStringUUIDNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uuid_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringUUIDNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringUUIDNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringUUIDNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringUUIDNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringUUIDNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringUUIDNullableArrayRequest handles test_response_string_uuid_nullable_array operation.
//
// POST /test_response_string_uuid_nullable_array
func (s *Server) handleTestResponseStringUUIDNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uuid_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringUUIDNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringUUIDNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringUUIDNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringUUIDNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringUUIDNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringUUIDNullableArrayArrayRequest handles test_response_string_uuid_nullable_array_array operation.
//
// POST /test_response_string_uuid_nullable_array_array
func (s *Server) handleTestResponseStringUUIDNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_uuid_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringUUIDNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringUUIDNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringUUIDNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringUUIDNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringUUIDNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringUnixRequest handles test_response_string_unix operation.
//
// POST /test_response_string_unix
func (s *Server) handleTestResponseStringUnixRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringUnix",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringUnixRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringUnix",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringUnix(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringUnixResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringUnixArrayRequest handles test_response_string_unix_array operation.
//
// POST /test_response_string_unix_array
func (s *Server) handleTestResponseStringUnixArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringUnixArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringUnixArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringUnixArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringUnixArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringUnixArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringUnixArrayArrayRequest handles test_response_string_unix_array_array operation.
//
// POST /test_response_string_unix_array_array
func (s *Server) handleTestResponseStringUnixArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringUnixArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringUnixArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringUnixArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringUnixArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringUnixArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringUnixMicroRequest handles test_response_string_unix-micro operation.
//
// POST /test_response_string_unix-micro
func (s *Server) handleTestResponseStringUnixMicroRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-micro"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringUnixMicro",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringUnixMicroRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringUnixMicro",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringUnixMicro(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringUnixMicroResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringUnixMicroArrayRequest handles test_response_string_unix-micro_array operation.
//
// POST /test_response_string_unix-micro_array
func (s *Server) handleTestResponseStringUnixMicroArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-micro_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringUnixMicroArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringUnixMicroArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringUnixMicroArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringUnixMicroArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringUnixMicroArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringUnixMicroArrayArrayRequest handles test_response_string_unix-micro_array_array operation.
//
// POST /test_response_string_unix-micro_array_array
func (s *Server) handleTestResponseStringUnixMicroArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-micro_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringUnixMicroArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringUnixMicroArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringUnixMicroArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringUnixMicroArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringUnixMicroArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringUnixMicroNullableRequest handles test_response_string_unix-micro_nullable operation.
//
// POST /test_response_string_unix-micro_nullable
func (s *Server) handleTestResponseStringUnixMicroNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-micro_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringUnixMicroNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringUnixMicroNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringUnixMicroNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringUnixMicroNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringUnixMicroNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringUnixMicroNullableArrayRequest handles test_response_string_unix-micro_nullable_array operation.
//
// POST /test_response_string_unix-micro_nullable_array
func (s *Server) handleTestResponseStringUnixMicroNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-micro_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringUnixMicroNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringUnixMicroNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringUnixMicroNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringUnixMicroNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringUnixMicroNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringUnixMicroNullableArrayArrayRequest handles test_response_string_unix-micro_nullable_array_array operation.
//
// POST /test_response_string_unix-micro_nullable_array_array
func (s *Server) handleTestResponseStringUnixMicroNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-micro_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringUnixMicroNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringUnixMicroNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringUnixMicroNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringUnixMicroNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringUnixMicroNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringUnixMilliRequest handles test_response_string_unix-milli operation.
//
// POST /test_response_string_unix-milli
func (s *Server) handleTestResponseStringUnixMilliRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-milli"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringUnixMilli",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringUnixMilliRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringUnixMilli",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringUnixMilli(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringUnixMilliResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringUnixMilliArrayRequest handles test_response_string_unix-milli_array operation.
//
// POST /test_response_string_unix-milli_array
func (s *Server) handleTestResponseStringUnixMilliArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-milli_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringUnixMilliArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringUnixMilliArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringUnixMilliArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringUnixMilliArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringUnixMilliArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringUnixMilliArrayArrayRequest handles test_response_string_unix-milli_array_array operation.
//
// POST /test_response_string_unix-milli_array_array
func (s *Server) handleTestResponseStringUnixMilliArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-milli_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringUnixMilliArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringUnixMilliArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringUnixMilliArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringUnixMilliArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringUnixMilliArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringUnixMilliNullableRequest handles test_response_string_unix-milli_nullable operation.
//
// POST /test_response_string_unix-milli_nullable
func (s *Server) handleTestResponseStringUnixMilliNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-milli_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringUnixMilliNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringUnixMilliNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringUnixMilliNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringUnixMilliNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringUnixMilliNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringUnixMilliNullableArrayRequest handles test_response_string_unix-milli_nullable_array operation.
//
// POST /test_response_string_unix-milli_nullable_array
func (s *Server) handleTestResponseStringUnixMilliNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-milli_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringUnixMilliNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringUnixMilliNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringUnixMilliNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringUnixMilliNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringUnixMilliNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringUnixMilliNullableArrayArrayRequest handles test_response_string_unix-milli_nullable_array_array operation.
//
// POST /test_response_string_unix-milli_nullable_array_array
func (s *Server) handleTestResponseStringUnixMilliNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-milli_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringUnixMilliNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringUnixMilliNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringUnixMilliNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringUnixMilliNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringUnixMilliNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringUnixNanoRequest handles test_response_string_unix-nano operation.
//
// POST /test_response_string_unix-nano
func (s *Server) handleTestResponseStringUnixNanoRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-nano"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringUnixNano",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringUnixNanoRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringUnixNano",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringUnixNano(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringUnixNanoResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringUnixNanoArrayRequest handles test_response_string_unix-nano_array operation.
//
// POST /test_response_string_unix-nano_array
func (s *Server) handleTestResponseStringUnixNanoArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-nano_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringUnixNanoArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringUnixNanoArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringUnixNanoArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringUnixNanoArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringUnixNanoArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringUnixNanoArrayArrayRequest handles test_response_string_unix-nano_array_array operation.
//
// POST /test_response_string_unix-nano_array_array
func (s *Server) handleTestResponseStringUnixNanoArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-nano_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringUnixNanoArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringUnixNanoArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringUnixNanoArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringUnixNanoArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringUnixNanoArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringUnixNanoNullableRequest handles test_response_string_unix-nano_nullable operation.
//
// POST /test_response_string_unix-nano_nullable
func (s *Server) handleTestResponseStringUnixNanoNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-nano_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringUnixNanoNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringUnixNanoNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringUnixNanoNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringUnixNanoNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringUnixNanoNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringUnixNanoNullableArrayRequest handles test_response_string_unix-nano_nullable_array operation.
//
// POST /test_response_string_unix-nano_nullable_array
func (s *Server) handleTestResponseStringUnixNanoNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-nano_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringUnixNanoNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringUnixNanoNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringUnixNanoNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringUnixNanoNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringUnixNanoNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringUnixNanoNullableArrayArrayRequest handles test_response_string_unix-nano_nullable_array_array operation.
//
// POST /test_response_string_unix-nano_nullable_array_array
func (s *Server) handleTestResponseStringUnixNanoNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-nano_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringUnixNanoNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringUnixNanoNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringUnixNanoNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringUnixNanoNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringUnixNanoNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringUnixNullableRequest handles test_response_string_unix_nullable operation.
//
// POST /test_response_string_unix_nullable
func (s *Server) handleTestResponseStringUnixNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringUnixNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringUnixNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringUnixNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringUnixNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringUnixNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringUnixNullableArrayRequest handles test_response_string_unix_nullable_array operation.
//
// POST /test_response_string_unix_nullable_array
func (s *Server) handleTestResponseStringUnixNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringUnixNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringUnixNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringUnixNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringUnixNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringUnixNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringUnixNullableArrayArrayRequest handles test_response_string_unix_nullable_array_array operation.
//
// POST /test_response_string_unix_nullable_array_array
func (s *Server) handleTestResponseStringUnixNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringUnixNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringUnixNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringUnixNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringUnixNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringUnixNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringUnixSecondsRequest handles test_response_string_unix-seconds operation.
//
// POST /test_response_string_unix-seconds
func (s *Server) handleTestResponseStringUnixSecondsRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-seconds"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringUnixSeconds",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringUnixSecondsRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringUnixSeconds",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringUnixSeconds(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringUnixSecondsResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringUnixSecondsArrayRequest handles test_response_string_unix-seconds_array operation.
//
// POST /test_response_string_unix-seconds_array
func (s *Server) handleTestResponseStringUnixSecondsArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-seconds_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringUnixSecondsArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringUnixSecondsArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringUnixSecondsArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringUnixSecondsArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringUnixSecondsArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringUnixSecondsArrayArrayRequest handles test_response_string_unix-seconds_array_array operation.
//
// POST /test_response_string_unix-seconds_array_array
func (s *Server) handleTestResponseStringUnixSecondsArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-seconds_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringUnixSecondsArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringUnixSecondsArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringUnixSecondsArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringUnixSecondsArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringUnixSecondsArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringUnixSecondsNullableRequest handles test_response_string_unix-seconds_nullable operation.
//
// POST /test_response_string_unix-seconds_nullable
func (s *Server) handleTestResponseStringUnixSecondsNullableRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-seconds_nullable"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringUnixSecondsNullable",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringUnixSecondsNullableRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringUnixSecondsNullable",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringUnixSecondsNullable(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringUnixSecondsNullableResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringUnixSecondsNullableArrayRequest handles test_response_string_unix-seconds_nullable_array operation.
//
// POST /test_response_string_unix-seconds_nullable_array
func (s *Server) handleTestResponseStringUnixSecondsNullableArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-seconds_nullable_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringUnixSecondsNullableArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringUnixSecondsNullableArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringUnixSecondsNullableArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringUnixSecondsNullableArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringUnixSecondsNullableArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

// HandleTestResponseStringUnixSecondsNullableArrayArrayRequest handles test_response_string_unix-seconds_nullable_array_array operation.
//
// POST /test_response_string_unix-seconds_nullable_array_array
func (s *Server) handleTestResponseStringUnixSecondsNullableArrayArrayRequest(args [0]string, w http.ResponseWriter, r *http.Request) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("test_response_string_unix-seconds_nullable_array_array"),
	}
	ctx, span := s.cfg.Tracer.Start(r.Context(), "TestResponseStringUnixSecondsNullableArrayArray",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindServer),
	)
	s.requests.Add(ctx, 1, otelAttrs...)
	defer span.End()

	var err error
	request, err := decodeTestResponseStringUnixSecondsNullableArrayArrayRequest(r, span)
	if err != nil {
		err = &ogenerrors.DecodeRequestError{
			Operation: "TestResponseStringUnixSecondsNullableArrayArray",
			Err:       err,
		}
		s.badRequest(ctx, w, r, span, otelAttrs, err)
		return
	}

	response, err := s.h.TestResponseStringUnixSecondsNullableArrayArray(ctx, request)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Internal")
		s.errors.Add(ctx, 1, otelAttrs...)
		s.cfg.ErrorHandler(ctx, w, r, err)
		return
	}

	if err := encodeTestResponseStringUnixSecondsNullableArrayArrayResponse(response, w, span); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, "Response")
		s.errors.Add(ctx, 1, otelAttrs...)
		return
	}
	elapsedDuration := time.Since(startTime)
	s.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
}

func (s *Server) badRequest(
	ctx context.Context,
	w http.ResponseWriter,
	r *http.Request,
	span trace.Span,
	otelAttrs []attribute.KeyValue,
	err error,
) {
	span.RecordError(err)
	span.SetStatus(codes.Error, "BadRequest")
	s.errors.Add(ctx, 1, otelAttrs...)
	s.cfg.ErrorHandler(ctx, w, r, err)
}

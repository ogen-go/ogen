// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"
	"net"
	"net/http"
	"net/netip"
	"net/url"
	"time"

	"github.com/go-faster/errors"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// TestQueryParameterParams is parameters of test_query_parameter operation.
type TestQueryParameterParams struct {
	Boolean                 bool
	BooleanArray            []bool
	Integer                 int
	IntegerArray            []int
	IntegerInt16            int16
	IntegerInt16Array       []int16
	IntegerInt32            int32
	IntegerInt32Array       []int32
	IntegerInt64            int64
	IntegerInt64Array       []int64
	IntegerInt8             int8
	IntegerInt8Array        []int8
	IntegerUint             uint
	IntegerUint16           uint16
	IntegerUint16Array      []uint16
	IntegerUint32           uint32
	IntegerUint32Array      []uint32
	IntegerUint64           uint64
	IntegerUint64Array      []uint64
	IntegerUint8            uint8
	IntegerUint8Array       []uint8
	IntegerUintArray        []uint
	IntegerUnix             time.Time
	IntegerUnixMicro        time.Time
	IntegerUnixMicroArray   []time.Time
	IntegerUnixMilli        time.Time
	IntegerUnixMilliArray   []time.Time
	IntegerUnixNano         time.Time
	IntegerUnixNanoArray    []time.Time
	IntegerUnixSeconds      time.Time
	IntegerUnixSecondsArray []time.Time
	IntegerUnixArray        []time.Time
	Number                  float64
	NumberArray             []float64
	NumberDouble            float64
	NumberDoubleArray       []float64
	NumberFloat             float32
	NumberFloatArray        []float32
	NumberInt32             int32
	NumberInt32Array        []int32
	NumberInt64             int64
	NumberInt64Array        []int64
	String                  string
	StringArray             []string
	StringBase64            []byte
	StringBase64Array       [][]byte
	StringBinary            string
	StringBinaryArray       []string
	StringByte              []byte
	StringByteArray         [][]byte
	StringDate              time.Time
	StringDateTime          time.Time
	StringDateTimeArray     []time.Time
	StringDateArray         []time.Time
	StringDuration          time.Duration
	StringDurationArray     []time.Duration
	StringEmail             string
	StringEmailArray        []string
	StringFloat32           float32
	StringFloat32Array      []float32
	StringFloat64           float64
	StringFloat64Array      []float64
	StringHostname          string
	StringHostnameArray     []string
	StringInt               int
	StringInt16             int16
	StringInt16Array        []int16
	StringInt32             int32
	StringInt32Array        []int32
	StringInt64             int64
	StringInt64Array        []int64
	StringInt8              int8
	StringInt8Array         []int8
	StringIntArray          []int
	StringIP                netip.Addr
	StringIPArray           []netip.Addr
	StringIpv4              netip.Addr
	StringIpv4Array         []netip.Addr
	StringIpv6              netip.Addr
	StringIpv6Array         []netip.Addr
	StringMAC               net.HardwareAddr
	StringMACArray          []net.HardwareAddr
	StringPassword          string
	StringPasswordArray     []string
	StringTime              time.Time
	StringTimeArray         []time.Time
	StringUint              uint
	StringUint16            uint16
	StringUint16Array       []uint16
	StringUint32            uint32
	StringUint32Array       []uint32
	StringUint64            uint64
	StringUint64Array       []uint64
	StringUint8             uint8
	StringUint8Array        []uint8
	StringUintArray         []uint
	StringUnix              time.Time
	StringUnixMicro         time.Time
	StringUnixMicroArray    []time.Time
	StringUnixMilli         time.Time
	StringUnixMilliArray    []time.Time
	StringUnixNano          time.Time
	StringUnixNanoArray     []time.Time
	StringUnixSeconds       time.Time
	StringUnixSecondsArray  []time.Time
	StringUnixArray         []time.Time
	StringURI               url.URL
	StringURIArray          []url.URL
	StringUUID              uuid.UUID
	StringUUIDArray         []uuid.UUID
}

func unpackTestQueryParameterParams(packed middleware.Parameters) (params TestQueryParameterParams) {
	{
		key := middleware.ParameterKey{
			Name: "boolean",
			In:   "query",
		}
		params.Boolean = packed[key].(bool)
	}
	{
		key := middleware.ParameterKey{
			Name: "boolean_array",
			In:   "query",
		}
		params.BooleanArray = packed[key].([]bool)
	}
	{
		key := middleware.ParameterKey{
			Name: "integer",
			In:   "query",
		}
		params.Integer = packed[key].(int)
	}
	{
		key := middleware.ParameterKey{
			Name: "integer_array",
			In:   "query",
		}
		params.IntegerArray = packed[key].([]int)
	}
	{
		key := middleware.ParameterKey{
			Name: "integer_int16",
			In:   "query",
		}
		params.IntegerInt16 = packed[key].(int16)
	}
	{
		key := middleware.ParameterKey{
			Name: "integer_int16_array",
			In:   "query",
		}
		params.IntegerInt16Array = packed[key].([]int16)
	}
	{
		key := middleware.ParameterKey{
			Name: "integer_int32",
			In:   "query",
		}
		params.IntegerInt32 = packed[key].(int32)
	}
	{
		key := middleware.ParameterKey{
			Name: "integer_int32_array",
			In:   "query",
		}
		params.IntegerInt32Array = packed[key].([]int32)
	}
	{
		key := middleware.ParameterKey{
			Name: "integer_int64",
			In:   "query",
		}
		params.IntegerInt64 = packed[key].(int64)
	}
	{
		key := middleware.ParameterKey{
			Name: "integer_int64_array",
			In:   "query",
		}
		params.IntegerInt64Array = packed[key].([]int64)
	}
	{
		key := middleware.ParameterKey{
			Name: "integer_int8",
			In:   "query",
		}
		params.IntegerInt8 = packed[key].(int8)
	}
	{
		key := middleware.ParameterKey{
			Name: "integer_int8_array",
			In:   "query",
		}
		params.IntegerInt8Array = packed[key].([]int8)
	}
	{
		key := middleware.ParameterKey{
			Name: "integer_uint",
			In:   "query",
		}
		params.IntegerUint = packed[key].(uint)
	}
	{
		key := middleware.ParameterKey{
			Name: "integer_uint16",
			In:   "query",
		}
		params.IntegerUint16 = packed[key].(uint16)
	}
	{
		key := middleware.ParameterKey{
			Name: "integer_uint16_array",
			In:   "query",
		}
		params.IntegerUint16Array = packed[key].([]uint16)
	}
	{
		key := middleware.ParameterKey{
			Name: "integer_uint32",
			In:   "query",
		}
		params.IntegerUint32 = packed[key].(uint32)
	}
	{
		key := middleware.ParameterKey{
			Name: "integer_uint32_array",
			In:   "query",
		}
		params.IntegerUint32Array = packed[key].([]uint32)
	}
	{
		key := middleware.ParameterKey{
			Name: "integer_uint64",
			In:   "query",
		}
		params.IntegerUint64 = packed[key].(uint64)
	}
	{
		key := middleware.ParameterKey{
			Name: "integer_uint64_array",
			In:   "query",
		}
		params.IntegerUint64Array = packed[key].([]uint64)
	}
	{
		key := middleware.ParameterKey{
			Name: "integer_uint8",
			In:   "query",
		}
		params.IntegerUint8 = packed[key].(uint8)
	}
	{
		key := middleware.ParameterKey{
			Name: "integer_uint8_array",
			In:   "query",
		}
		params.IntegerUint8Array = packed[key].([]uint8)
	}
	{
		key := middleware.ParameterKey{
			Name: "integer_uint_array",
			In:   "query",
		}
		params.IntegerUintArray = packed[key].([]uint)
	}
	{
		key := middleware.ParameterKey{
			Name: "integer_unix",
			In:   "query",
		}
		params.IntegerUnix = packed[key].(time.Time)
	}
	{
		key := middleware.ParameterKey{
			Name: "integer_unix-micro",
			In:   "query",
		}
		params.IntegerUnixMicro = packed[key].(time.Time)
	}
	{
		key := middleware.ParameterKey{
			Name: "integer_unix-micro_array",
			In:   "query",
		}
		params.IntegerUnixMicroArray = packed[key].([]time.Time)
	}
	{
		key := middleware.ParameterKey{
			Name: "integer_unix-milli",
			In:   "query",
		}
		params.IntegerUnixMilli = packed[key].(time.Time)
	}
	{
		key := middleware.ParameterKey{
			Name: "integer_unix-milli_array",
			In:   "query",
		}
		params.IntegerUnixMilliArray = packed[key].([]time.Time)
	}
	{
		key := middleware.ParameterKey{
			Name: "integer_unix-nano",
			In:   "query",
		}
		params.IntegerUnixNano = packed[key].(time.Time)
	}
	{
		key := middleware.ParameterKey{
			Name: "integer_unix-nano_array",
			In:   "query",
		}
		params.IntegerUnixNanoArray = packed[key].([]time.Time)
	}
	{
		key := middleware.ParameterKey{
			Name: "integer_unix-seconds",
			In:   "query",
		}
		params.IntegerUnixSeconds = packed[key].(time.Time)
	}
	{
		key := middleware.ParameterKey{
			Name: "integer_unix-seconds_array",
			In:   "query",
		}
		params.IntegerUnixSecondsArray = packed[key].([]time.Time)
	}
	{
		key := middleware.ParameterKey{
			Name: "integer_unix_array",
			In:   "query",
		}
		params.IntegerUnixArray = packed[key].([]time.Time)
	}
	{
		key := middleware.ParameterKey{
			Name: "number",
			In:   "query",
		}
		params.Number = packed[key].(float64)
	}
	{
		key := middleware.ParameterKey{
			Name: "number_array",
			In:   "query",
		}
		params.NumberArray = packed[key].([]float64)
	}
	{
		key := middleware.ParameterKey{
			Name: "number_double",
			In:   "query",
		}
		params.NumberDouble = packed[key].(float64)
	}
	{
		key := middleware.ParameterKey{
			Name: "number_double_array",
			In:   "query",
		}
		params.NumberDoubleArray = packed[key].([]float64)
	}
	{
		key := middleware.ParameterKey{
			Name: "number_float",
			In:   "query",
		}
		params.NumberFloat = packed[key].(float32)
	}
	{
		key := middleware.ParameterKey{
			Name: "number_float_array",
			In:   "query",
		}
		params.NumberFloatArray = packed[key].([]float32)
	}
	{
		key := middleware.ParameterKey{
			Name: "number_int32",
			In:   "query",
		}
		params.NumberInt32 = packed[key].(int32)
	}
	{
		key := middleware.ParameterKey{
			Name: "number_int32_array",
			In:   "query",
		}
		params.NumberInt32Array = packed[key].([]int32)
	}
	{
		key := middleware.ParameterKey{
			Name: "number_int64",
			In:   "query",
		}
		params.NumberInt64 = packed[key].(int64)
	}
	{
		key := middleware.ParameterKey{
			Name: "number_int64_array",
			In:   "query",
		}
		params.NumberInt64Array = packed[key].([]int64)
	}
	{
		key := middleware.ParameterKey{
			Name: "string",
			In:   "query",
		}
		params.String = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_array",
			In:   "query",
		}
		params.StringArray = packed[key].([]string)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_base64",
			In:   "query",
		}
		params.StringBase64 = packed[key].([]byte)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_base64_array",
			In:   "query",
		}
		params.StringBase64Array = packed[key].([][]byte)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_binary",
			In:   "query",
		}
		params.StringBinary = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_binary_array",
			In:   "query",
		}
		params.StringBinaryArray = packed[key].([]string)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_byte",
			In:   "query",
		}
		params.StringByte = packed[key].([]byte)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_byte_array",
			In:   "query",
		}
		params.StringByteArray = packed[key].([][]byte)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_date",
			In:   "query",
		}
		params.StringDate = packed[key].(time.Time)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_date-time",
			In:   "query",
		}
		params.StringDateTime = packed[key].(time.Time)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_date-time_array",
			In:   "query",
		}
		params.StringDateTimeArray = packed[key].([]time.Time)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_date_array",
			In:   "query",
		}
		params.StringDateArray = packed[key].([]time.Time)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_duration",
			In:   "query",
		}
		params.StringDuration = packed[key].(time.Duration)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_duration_array",
			In:   "query",
		}
		params.StringDurationArray = packed[key].([]time.Duration)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_email",
			In:   "query",
		}
		params.StringEmail = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_email_array",
			In:   "query",
		}
		params.StringEmailArray = packed[key].([]string)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_float32",
			In:   "query",
		}
		params.StringFloat32 = packed[key].(float32)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_float32_array",
			In:   "query",
		}
		params.StringFloat32Array = packed[key].([]float32)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_float64",
			In:   "query",
		}
		params.StringFloat64 = packed[key].(float64)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_float64_array",
			In:   "query",
		}
		params.StringFloat64Array = packed[key].([]float64)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_hostname",
			In:   "query",
		}
		params.StringHostname = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_hostname_array",
			In:   "query",
		}
		params.StringHostnameArray = packed[key].([]string)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_int",
			In:   "query",
		}
		params.StringInt = packed[key].(int)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_int16",
			In:   "query",
		}
		params.StringInt16 = packed[key].(int16)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_int16_array",
			In:   "query",
		}
		params.StringInt16Array = packed[key].([]int16)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_int32",
			In:   "query",
		}
		params.StringInt32 = packed[key].(int32)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_int32_array",
			In:   "query",
		}
		params.StringInt32Array = packed[key].([]int32)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_int64",
			In:   "query",
		}
		params.StringInt64 = packed[key].(int64)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_int64_array",
			In:   "query",
		}
		params.StringInt64Array = packed[key].([]int64)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_int8",
			In:   "query",
		}
		params.StringInt8 = packed[key].(int8)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_int8_array",
			In:   "query",
		}
		params.StringInt8Array = packed[key].([]int8)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_int_array",
			In:   "query",
		}
		params.StringIntArray = packed[key].([]int)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_ip",
			In:   "query",
		}
		params.StringIP = packed[key].(netip.Addr)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_ip_array",
			In:   "query",
		}
		params.StringIPArray = packed[key].([]netip.Addr)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_ipv4",
			In:   "query",
		}
		params.StringIpv4 = packed[key].(netip.Addr)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_ipv4_array",
			In:   "query",
		}
		params.StringIpv4Array = packed[key].([]netip.Addr)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_ipv6",
			In:   "query",
		}
		params.StringIpv6 = packed[key].(netip.Addr)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_ipv6_array",
			In:   "query",
		}
		params.StringIpv6Array = packed[key].([]netip.Addr)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_mac",
			In:   "query",
		}
		params.StringMAC = packed[key].(net.HardwareAddr)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_mac_array",
			In:   "query",
		}
		params.StringMACArray = packed[key].([]net.HardwareAddr)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_password",
			In:   "query",
		}
		params.StringPassword = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_password_array",
			In:   "query",
		}
		params.StringPasswordArray = packed[key].([]string)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_time",
			In:   "query",
		}
		params.StringTime = packed[key].(time.Time)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_time_array",
			In:   "query",
		}
		params.StringTimeArray = packed[key].([]time.Time)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_uint",
			In:   "query",
		}
		params.StringUint = packed[key].(uint)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_uint16",
			In:   "query",
		}
		params.StringUint16 = packed[key].(uint16)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_uint16_array",
			In:   "query",
		}
		params.StringUint16Array = packed[key].([]uint16)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_uint32",
			In:   "query",
		}
		params.StringUint32 = packed[key].(uint32)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_uint32_array",
			In:   "query",
		}
		params.StringUint32Array = packed[key].([]uint32)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_uint64",
			In:   "query",
		}
		params.StringUint64 = packed[key].(uint64)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_uint64_array",
			In:   "query",
		}
		params.StringUint64Array = packed[key].([]uint64)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_uint8",
			In:   "query",
		}
		params.StringUint8 = packed[key].(uint8)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_uint8_array",
			In:   "query",
		}
		params.StringUint8Array = packed[key].([]uint8)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_uint_array",
			In:   "query",
		}
		params.StringUintArray = packed[key].([]uint)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_unix",
			In:   "query",
		}
		params.StringUnix = packed[key].(time.Time)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_unix-micro",
			In:   "query",
		}
		params.StringUnixMicro = packed[key].(time.Time)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_unix-micro_array",
			In:   "query",
		}
		params.StringUnixMicroArray = packed[key].([]time.Time)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_unix-milli",
			In:   "query",
		}
		params.StringUnixMilli = packed[key].(time.Time)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_unix-milli_array",
			In:   "query",
		}
		params.StringUnixMilliArray = packed[key].([]time.Time)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_unix-nano",
			In:   "query",
		}
		params.StringUnixNano = packed[key].(time.Time)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_unix-nano_array",
			In:   "query",
		}
		params.StringUnixNanoArray = packed[key].([]time.Time)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_unix-seconds",
			In:   "query",
		}
		params.StringUnixSeconds = packed[key].(time.Time)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_unix-seconds_array",
			In:   "query",
		}
		params.StringUnixSecondsArray = packed[key].([]time.Time)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_unix_array",
			In:   "query",
		}
		params.StringUnixArray = packed[key].([]time.Time)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_uri",
			In:   "query",
		}
		params.StringURI = packed[key].(url.URL)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_uri_array",
			In:   "query",
		}
		params.StringURIArray = packed[key].([]url.URL)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_uuid",
			In:   "query",
		}
		params.StringUUID = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "string_uuid_array",
			In:   "query",
		}
		params.StringUUIDArray = packed[key].([]uuid.UUID)
	}
	return params
}

func decodeTestQueryParameterParams(args [0]string, argsEscaped bool, r *http.Request) (params TestQueryParameterParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: boolean.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "boolean",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToBool(val)
				if err != nil {
					return err
				}

				params.Boolean = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "boolean",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: boolean_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "boolean_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotBooleanArrayVal bool
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToBool(val)
						if err != nil {
							return err
						}

						paramsDotBooleanArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.BooleanArray = append(params.BooleanArray, paramsDotBooleanArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.BooleanArray == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "boolean_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: integer.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "integer",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.Integer = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "integer",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: integer_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "integer_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotIntegerArrayVal int
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToInt(val)
						if err != nil {
							return err
						}

						paramsDotIntegerArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.IntegerArray = append(params.IntegerArray, paramsDotIntegerArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.IntegerArray == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "integer_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: integer_int16.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "integer_int16",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt16(val)
				if err != nil {
					return err
				}

				params.IntegerInt16 = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "integer_int16",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: integer_int16_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "integer_int16_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotIntegerInt16ArrayVal int16
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToInt16(val)
						if err != nil {
							return err
						}

						paramsDotIntegerInt16ArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.IntegerInt16Array = append(params.IntegerInt16Array, paramsDotIntegerInt16ArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.IntegerInt16Array == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "integer_int16_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: integer_int32.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "integer_int32",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt32(val)
				if err != nil {
					return err
				}

				params.IntegerInt32 = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "integer_int32",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: integer_int32_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "integer_int32_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotIntegerInt32ArrayVal int32
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToInt32(val)
						if err != nil {
							return err
						}

						paramsDotIntegerInt32ArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.IntegerInt32Array = append(params.IntegerInt32Array, paramsDotIntegerInt32ArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.IntegerInt32Array == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "integer_int32_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: integer_int64.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "integer_int64",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.IntegerInt64 = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "integer_int64",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: integer_int64_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "integer_int64_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotIntegerInt64ArrayVal int64
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToInt64(val)
						if err != nil {
							return err
						}

						paramsDotIntegerInt64ArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.IntegerInt64Array = append(params.IntegerInt64Array, paramsDotIntegerInt64ArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.IntegerInt64Array == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "integer_int64_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: integer_int8.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "integer_int8",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt8(val)
				if err != nil {
					return err
				}

				params.IntegerInt8 = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "integer_int8",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: integer_int8_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "integer_int8_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotIntegerInt8ArrayVal int8
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToInt8(val)
						if err != nil {
							return err
						}

						paramsDotIntegerInt8ArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.IntegerInt8Array = append(params.IntegerInt8Array, paramsDotIntegerInt8ArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.IntegerInt8Array == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "integer_int8_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: integer_uint.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "integer_uint",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint(val)
				if err != nil {
					return err
				}

				params.IntegerUint = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "integer_uint",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: integer_uint16.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "integer_uint16",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint16(val)
				if err != nil {
					return err
				}

				params.IntegerUint16 = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "integer_uint16",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: integer_uint16_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "integer_uint16_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotIntegerUint16ArrayVal uint16
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToUint16(val)
						if err != nil {
							return err
						}

						paramsDotIntegerUint16ArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.IntegerUint16Array = append(params.IntegerUint16Array, paramsDotIntegerUint16ArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.IntegerUint16Array == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "integer_uint16_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: integer_uint32.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "integer_uint32",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint32(val)
				if err != nil {
					return err
				}

				params.IntegerUint32 = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "integer_uint32",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: integer_uint32_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "integer_uint32_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotIntegerUint32ArrayVal uint32
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToUint32(val)
						if err != nil {
							return err
						}

						paramsDotIntegerUint32ArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.IntegerUint32Array = append(params.IntegerUint32Array, paramsDotIntegerUint32ArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.IntegerUint32Array == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "integer_uint32_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: integer_uint64.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "integer_uint64",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint64(val)
				if err != nil {
					return err
				}

				params.IntegerUint64 = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "integer_uint64",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: integer_uint64_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "integer_uint64_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotIntegerUint64ArrayVal uint64
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToUint64(val)
						if err != nil {
							return err
						}

						paramsDotIntegerUint64ArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.IntegerUint64Array = append(params.IntegerUint64Array, paramsDotIntegerUint64ArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.IntegerUint64Array == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "integer_uint64_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: integer_uint8.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "integer_uint8",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUint8(val)
				if err != nil {
					return err
				}

				params.IntegerUint8 = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "integer_uint8",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: integer_uint8_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "integer_uint8_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotIntegerUint8ArrayVal uint8
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToUint8(val)
						if err != nil {
							return err
						}

						paramsDotIntegerUint8ArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.IntegerUint8Array = append(params.IntegerUint8Array, paramsDotIntegerUint8ArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.IntegerUint8Array == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "integer_uint8_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: integer_uint_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "integer_uint_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotIntegerUintArrayVal uint
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToUint(val)
						if err != nil {
							return err
						}

						paramsDotIntegerUintArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.IntegerUintArray = append(params.IntegerUintArray, paramsDotIntegerUintArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.IntegerUintArray == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "integer_uint_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: integer_unix.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "integer_unix",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUnixSeconds(val)
				if err != nil {
					return err
				}

				params.IntegerUnix = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "integer_unix",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: integer_unix-micro.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "integer_unix-micro",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUnixMicro(val)
				if err != nil {
					return err
				}

				params.IntegerUnixMicro = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "integer_unix-micro",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: integer_unix-micro_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "integer_unix-micro_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotIntegerUnixMicroArrayVal time.Time
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToUnixMicro(val)
						if err != nil {
							return err
						}

						paramsDotIntegerUnixMicroArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.IntegerUnixMicroArray = append(params.IntegerUnixMicroArray, paramsDotIntegerUnixMicroArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.IntegerUnixMicroArray == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "integer_unix-micro_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: integer_unix-milli.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "integer_unix-milli",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUnixMilli(val)
				if err != nil {
					return err
				}

				params.IntegerUnixMilli = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "integer_unix-milli",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: integer_unix-milli_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "integer_unix-milli_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotIntegerUnixMilliArrayVal time.Time
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToUnixMilli(val)
						if err != nil {
							return err
						}

						paramsDotIntegerUnixMilliArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.IntegerUnixMilliArray = append(params.IntegerUnixMilliArray, paramsDotIntegerUnixMilliArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.IntegerUnixMilliArray == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "integer_unix-milli_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: integer_unix-nano.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "integer_unix-nano",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUnixNano(val)
				if err != nil {
					return err
				}

				params.IntegerUnixNano = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "integer_unix-nano",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: integer_unix-nano_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "integer_unix-nano_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotIntegerUnixNanoArrayVal time.Time
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToUnixNano(val)
						if err != nil {
							return err
						}

						paramsDotIntegerUnixNanoArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.IntegerUnixNanoArray = append(params.IntegerUnixNanoArray, paramsDotIntegerUnixNanoArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.IntegerUnixNanoArray == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "integer_unix-nano_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: integer_unix-seconds.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "integer_unix-seconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUnixSeconds(val)
				if err != nil {
					return err
				}

				params.IntegerUnixSeconds = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "integer_unix-seconds",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: integer_unix-seconds_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "integer_unix-seconds_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotIntegerUnixSecondsArrayVal time.Time
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToUnixSeconds(val)
						if err != nil {
							return err
						}

						paramsDotIntegerUnixSecondsArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.IntegerUnixSecondsArray = append(params.IntegerUnixSecondsArray, paramsDotIntegerUnixSecondsArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.IntegerUnixSecondsArray == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "integer_unix-seconds_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: integer_unix_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "integer_unix_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotIntegerUnixArrayVal time.Time
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToUnixSeconds(val)
						if err != nil {
							return err
						}

						paramsDotIntegerUnixArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.IntegerUnixArray = append(params.IntegerUnixArray, paramsDotIntegerUnixArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.IntegerUnixArray == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "integer_unix_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: number.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "number",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToFloat64(val)
				if err != nil {
					return err
				}

				params.Number = c
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(params.Number)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "number",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: number_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "number_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotNumberArrayVal float64
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToFloat64(val)
						if err != nil {
							return err
						}

						paramsDotNumberArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.NumberArray = append(params.NumberArray, paramsDotNumberArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.NumberArray == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range params.NumberArray {
					if err := func() error {
						if err := (validate.Float{}).Validate(float64(elem)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "number_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: number_double.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "number_double",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToFloat64(val)
				if err != nil {
					return err
				}

				params.NumberDouble = c
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(params.NumberDouble)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "number_double",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: number_double_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "number_double_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotNumberDoubleArrayVal float64
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToFloat64(val)
						if err != nil {
							return err
						}

						paramsDotNumberDoubleArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.NumberDoubleArray = append(params.NumberDoubleArray, paramsDotNumberDoubleArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.NumberDoubleArray == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range params.NumberDoubleArray {
					if err := func() error {
						if err := (validate.Float{}).Validate(float64(elem)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "number_double_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: number_float.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "number_float",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToFloat32(val)
				if err != nil {
					return err
				}

				params.NumberFloat = c
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(params.NumberFloat)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "number_float",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: number_float_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "number_float_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotNumberFloatArrayVal float32
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToFloat32(val)
						if err != nil {
							return err
						}

						paramsDotNumberFloatArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.NumberFloatArray = append(params.NumberFloatArray, paramsDotNumberFloatArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.NumberFloatArray == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range params.NumberFloatArray {
					if err := func() error {
						if err := (validate.Float{}).Validate(float64(elem)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "number_float_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: number_int32.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "number_int32",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt32(val)
				if err != nil {
					return err
				}

				params.NumberInt32 = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "number_int32",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: number_int32_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "number_int32_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotNumberInt32ArrayVal int32
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToInt32(val)
						if err != nil {
							return err
						}

						paramsDotNumberInt32ArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.NumberInt32Array = append(params.NumberInt32Array, paramsDotNumberInt32ArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.NumberInt32Array == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "number_int32_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: number_int64.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "number_int64",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.NumberInt64 = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "number_int64",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: number_int64_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "number_int64_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotNumberInt64ArrayVal int64
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToInt64(val)
						if err != nil {
							return err
						}

						paramsDotNumberInt64ArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.NumberInt64Array = append(params.NumberInt64Array, paramsDotNumberInt64ArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.NumberInt64Array == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "number_int64_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.String = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringArrayVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotStringArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringArray = append(params.StringArray, paramsDotStringArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.StringArray == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_base64.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_base64",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToBytes(val)
				if err != nil {
					return err
				}

				params.StringBase64 = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_base64",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_base64_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_base64_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringBase64ArrayVal []byte
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToBytes(val)
						if err != nil {
							return err
						}

						paramsDotStringBase64ArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringBase64Array = append(params.StringBase64Array, paramsDotStringBase64ArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.StringBase64Array == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_base64_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_binary.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_binary",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.StringBinary = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_binary",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_binary_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_binary_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringBinaryArrayVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotStringBinaryArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringBinaryArray = append(params.StringBinaryArray, paramsDotStringBinaryArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.StringBinaryArray == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_binary_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_byte.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_byte",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToBytes(val)
				if err != nil {
					return err
				}

				params.StringByte = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_byte",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_byte_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_byte_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringByteArrayVal []byte
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToBytes(val)
						if err != nil {
							return err
						}

						paramsDotStringByteArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringByteArray = append(params.StringByteArray, paramsDotStringByteArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.StringByteArray == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_byte_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_date.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_date",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToDate(val)
				if err != nil {
					return err
				}

				params.StringDate = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_date",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_date-time.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_date-time",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToDateTime(val)
				if err != nil {
					return err
				}

				params.StringDateTime = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_date-time",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_date-time_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_date-time_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringDateTimeArrayVal time.Time
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToDateTime(val)
						if err != nil {
							return err
						}

						paramsDotStringDateTimeArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringDateTimeArray = append(params.StringDateTimeArray, paramsDotStringDateTimeArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.StringDateTimeArray == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_date-time_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_date_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_date_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringDateArrayVal time.Time
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToDate(val)
						if err != nil {
							return err
						}

						paramsDotStringDateArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringDateArray = append(params.StringDateArray, paramsDotStringDateArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.StringDateArray == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_date_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_duration.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_duration",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToDuration(val)
				if err != nil {
					return err
				}

				params.StringDuration = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_duration",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_duration_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_duration_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringDurationArrayVal time.Duration
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToDuration(val)
						if err != nil {
							return err
						}

						paramsDotStringDurationArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringDurationArray = append(params.StringDurationArray, paramsDotStringDurationArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.StringDurationArray == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_duration_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_email.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_email",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.StringEmail = c
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        true,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(params.StringEmail)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_email",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_email_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_email_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringEmailArrayVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotStringEmailArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringEmailArray = append(params.StringEmailArray, paramsDotStringEmailArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.StringEmailArray == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range params.StringEmailArray {
					if err := func() error {
						if err := (validate.String{
							MinLength:    0,
							MinLengthSet: false,
							MaxLength:    0,
							MaxLengthSet: false,
							Email:        true,
							Hostname:     false,
							Regex:        nil,
						}).Validate(string(elem)); err != nil {
							return errors.Wrap(err, "string")
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_email_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_float32.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_float32",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToFloat32(val)
				if err != nil {
					return err
				}

				params.StringFloat32 = c
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.Float{}).ValidateStringified(float64(params.StringFloat32)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_float32",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_float32_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_float32_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringFloat32ArrayVal float32
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToFloat32(val)
						if err != nil {
							return err
						}

						paramsDotStringFloat32ArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringFloat32Array = append(params.StringFloat32Array, paramsDotStringFloat32ArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.StringFloat32Array == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range params.StringFloat32Array {
					if err := func() error {
						if err := (validate.Float{}).ValidateStringified(float64(elem)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_float32_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_float64.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_float64",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToFloat64(val)
				if err != nil {
					return err
				}

				params.StringFloat64 = c
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.Float{}).ValidateStringified(float64(params.StringFloat64)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_float64",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_float64_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_float64_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringFloat64ArrayVal float64
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToFloat64(val)
						if err != nil {
							return err
						}

						paramsDotStringFloat64ArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringFloat64Array = append(params.StringFloat64Array, paramsDotStringFloat64ArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.StringFloat64Array == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range params.StringFloat64Array {
					if err := func() error {
						if err := (validate.Float{}).ValidateStringified(float64(elem)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_float64_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_hostname.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_hostname",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.StringHostname = c
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        false,
					Hostname:     true,
					Regex:        nil,
				}).Validate(string(params.StringHostname)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_hostname",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_hostname_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_hostname_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringHostnameArrayVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotStringHostnameArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringHostnameArray = append(params.StringHostnameArray, paramsDotStringHostnameArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.StringHostnameArray == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range params.StringHostnameArray {
					if err := func() error {
						if err := (validate.String{
							MinLength:    0,
							MinLengthSet: false,
							MaxLength:    0,
							MaxLengthSet: false,
							Email:        false,
							Hostname:     true,
							Regex:        nil,
						}).Validate(string(elem)); err != nil {
							return errors.Wrap(err, "string")
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_hostname_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_int.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_int",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.StringInt = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_int",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_int16.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_int16",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToStringInt16(val)
				if err != nil {
					return err
				}

				params.StringInt16 = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_int16",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_int16_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_int16_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringInt16ArrayVal int16
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToStringInt16(val)
						if err != nil {
							return err
						}

						paramsDotStringInt16ArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringInt16Array = append(params.StringInt16Array, paramsDotStringInt16ArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.StringInt16Array == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_int16_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_int32.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_int32",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToStringInt32(val)
				if err != nil {
					return err
				}

				params.StringInt32 = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_int32",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_int32_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_int32_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringInt32ArrayVal int32
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToStringInt32(val)
						if err != nil {
							return err
						}

						paramsDotStringInt32ArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringInt32Array = append(params.StringInt32Array, paramsDotStringInt32ArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.StringInt32Array == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_int32_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_int64.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_int64",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToStringInt64(val)
				if err != nil {
					return err
				}

				params.StringInt64 = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_int64",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_int64_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_int64_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringInt64ArrayVal int64
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToStringInt64(val)
						if err != nil {
							return err
						}

						paramsDotStringInt64ArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringInt64Array = append(params.StringInt64Array, paramsDotStringInt64ArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.StringInt64Array == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_int64_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_int8.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_int8",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToStringInt8(val)
				if err != nil {
					return err
				}

				params.StringInt8 = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_int8",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_int8_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_int8_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringInt8ArrayVal int8
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToStringInt8(val)
						if err != nil {
							return err
						}

						paramsDotStringInt8ArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringInt8Array = append(params.StringInt8Array, paramsDotStringInt8ArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.StringInt8Array == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_int8_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_int_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_int_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringIntArrayVal int
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToInt(val)
						if err != nil {
							return err
						}

						paramsDotStringIntArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringIntArray = append(params.StringIntArray, paramsDotStringIntArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.StringIntArray == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_int_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_ip.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_ip",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToAddr(val)
				if err != nil {
					return err
				}

				params.StringIP = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_ip",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_ip_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_ip_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringIPArrayVal netip.Addr
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToAddr(val)
						if err != nil {
							return err
						}

						paramsDotStringIPArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringIPArray = append(params.StringIPArray, paramsDotStringIPArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.StringIPArray == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_ip_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_ipv4.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_ipv4",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToAddr(val)
				if err != nil {
					return err
				}

				params.StringIpv4 = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_ipv4",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_ipv4_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_ipv4_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringIpv4ArrayVal netip.Addr
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToAddr(val)
						if err != nil {
							return err
						}

						paramsDotStringIpv4ArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringIpv4Array = append(params.StringIpv4Array, paramsDotStringIpv4ArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.StringIpv4Array == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_ipv4_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_ipv6.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_ipv6",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToAddr(val)
				if err != nil {
					return err
				}

				params.StringIpv6 = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_ipv6",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_ipv6_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_ipv6_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringIpv6ArrayVal netip.Addr
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToAddr(val)
						if err != nil {
							return err
						}

						paramsDotStringIpv6ArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringIpv6Array = append(params.StringIpv6Array, paramsDotStringIpv6ArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.StringIpv6Array == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_ipv6_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_mac.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_mac",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToMAC(val)
				if err != nil {
					return err
				}

				params.StringMAC = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_mac",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_mac_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_mac_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringMACArrayVal net.HardwareAddr
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToMAC(val)
						if err != nil {
							return err
						}

						paramsDotStringMACArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringMACArray = append(params.StringMACArray, paramsDotStringMACArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.StringMACArray == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_mac_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_password.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_password",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.StringPassword = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_password",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_password_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_password_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringPasswordArrayVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotStringPasswordArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringPasswordArray = append(params.StringPasswordArray, paramsDotStringPasswordArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.StringPasswordArray == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_password_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_time.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_time",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToTime(val)
				if err != nil {
					return err
				}

				params.StringTime = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_time",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_time_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_time_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringTimeArrayVal time.Time
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToTime(val)
						if err != nil {
							return err
						}

						paramsDotStringTimeArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringTimeArray = append(params.StringTimeArray, paramsDotStringTimeArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.StringTimeArray == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_time_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_uint.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_uint",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToStringUint(val)
				if err != nil {
					return err
				}

				params.StringUint = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_uint",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_uint16.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_uint16",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToStringUint16(val)
				if err != nil {
					return err
				}

				params.StringUint16 = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_uint16",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_uint16_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_uint16_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringUint16ArrayVal uint16
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToStringUint16(val)
						if err != nil {
							return err
						}

						paramsDotStringUint16ArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringUint16Array = append(params.StringUint16Array, paramsDotStringUint16ArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.StringUint16Array == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_uint16_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_uint32.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_uint32",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToStringUint32(val)
				if err != nil {
					return err
				}

				params.StringUint32 = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_uint32",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_uint32_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_uint32_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringUint32ArrayVal uint32
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToStringUint32(val)
						if err != nil {
							return err
						}

						paramsDotStringUint32ArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringUint32Array = append(params.StringUint32Array, paramsDotStringUint32ArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.StringUint32Array == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_uint32_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_uint64.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_uint64",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToStringUint64(val)
				if err != nil {
					return err
				}

				params.StringUint64 = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_uint64",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_uint64_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_uint64_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringUint64ArrayVal uint64
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToStringUint64(val)
						if err != nil {
							return err
						}

						paramsDotStringUint64ArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringUint64Array = append(params.StringUint64Array, paramsDotStringUint64ArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.StringUint64Array == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_uint64_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_uint8.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_uint8",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToStringUint8(val)
				if err != nil {
					return err
				}

				params.StringUint8 = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_uint8",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_uint8_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_uint8_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringUint8ArrayVal uint8
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToStringUint8(val)
						if err != nil {
							return err
						}

						paramsDotStringUint8ArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringUint8Array = append(params.StringUint8Array, paramsDotStringUint8ArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.StringUint8Array == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_uint8_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_uint_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_uint_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringUintArrayVal uint
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToStringUint(val)
						if err != nil {
							return err
						}

						paramsDotStringUintArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringUintArray = append(params.StringUintArray, paramsDotStringUintArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.StringUintArray == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_uint_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_unix.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_unix",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUnixSeconds(val)
				if err != nil {
					return err
				}

				params.StringUnix = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_unix",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_unix-micro.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_unix-micro",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUnixMicro(val)
				if err != nil {
					return err
				}

				params.StringUnixMicro = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_unix-micro",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_unix-micro_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_unix-micro_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringUnixMicroArrayVal time.Time
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToUnixMicro(val)
						if err != nil {
							return err
						}

						paramsDotStringUnixMicroArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringUnixMicroArray = append(params.StringUnixMicroArray, paramsDotStringUnixMicroArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.StringUnixMicroArray == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_unix-micro_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_unix-milli.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_unix-milli",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUnixMilli(val)
				if err != nil {
					return err
				}

				params.StringUnixMilli = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_unix-milli",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_unix-milli_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_unix-milli_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringUnixMilliArrayVal time.Time
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToUnixMilli(val)
						if err != nil {
							return err
						}

						paramsDotStringUnixMilliArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringUnixMilliArray = append(params.StringUnixMilliArray, paramsDotStringUnixMilliArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.StringUnixMilliArray == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_unix-milli_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_unix-nano.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_unix-nano",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUnixNano(val)
				if err != nil {
					return err
				}

				params.StringUnixNano = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_unix-nano",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_unix-nano_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_unix-nano_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringUnixNanoArrayVal time.Time
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToUnixNano(val)
						if err != nil {
							return err
						}

						paramsDotStringUnixNanoArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringUnixNanoArray = append(params.StringUnixNanoArray, paramsDotStringUnixNanoArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.StringUnixNanoArray == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_unix-nano_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_unix-seconds.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_unix-seconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUnixSeconds(val)
				if err != nil {
					return err
				}

				params.StringUnixSeconds = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_unix-seconds",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_unix-seconds_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_unix-seconds_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringUnixSecondsArrayVal time.Time
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToUnixSeconds(val)
						if err != nil {
							return err
						}

						paramsDotStringUnixSecondsArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringUnixSecondsArray = append(params.StringUnixSecondsArray, paramsDotStringUnixSecondsArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.StringUnixSecondsArray == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_unix-seconds_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_unix_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_unix_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringUnixArrayVal time.Time
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToUnixSeconds(val)
						if err != nil {
							return err
						}

						paramsDotStringUnixArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringUnixArray = append(params.StringUnixArray, paramsDotStringUnixArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.StringUnixArray == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_unix_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_uri.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_uri",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToURL(val)
				if err != nil {
					return err
				}

				params.StringURI = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_uri",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_uri_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_uri_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringURIArrayVal url.URL
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToURL(val)
						if err != nil {
							return err
						}

						paramsDotStringURIArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringURIArray = append(params.StringURIArray, paramsDotStringURIArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.StringURIArray == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_uri_array",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_uuid.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_uuid",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.StringUUID = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_uuid",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: string_uuid_array.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "string_uuid_array",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotStringUUIDArrayVal uuid.UUID
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToUUID(val)
						if err != nil {
							return err
						}

						paramsDotStringUUIDArrayVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.StringUUIDArray = append(params.StringUUIDArray, paramsDotStringUUIDArrayVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.StringUUIDArray == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "string_uuid_array",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

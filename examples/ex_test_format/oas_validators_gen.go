// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/validate"
)

func (s TestRequestFormatTestReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.RequiredArrayAny == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_any",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayBoolean == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_boolean",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayInteger == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_integer",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayIntegerInt32 == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_integer_int32",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayIntegerInt64 == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_integer_int64",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayNull == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_null",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayNumber == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredArrayNumber {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(elem)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_number",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayNumberDouble == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredArrayNumberDouble {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(elem)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_number_double",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayNumberFloat == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredArrayNumberFloat {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(elem)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_number_float",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayNumberInt32 == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_number_int32",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayNumberInt64 == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_number_int64",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayString == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringBinary == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_binary",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringByte == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_byte",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringDate == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_date",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringDateMinusTime == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_date-time",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringDuration == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_duration",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringEmail == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredArrayStringEmail {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        true,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(elem)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_email",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringHostname == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredArrayStringHostname {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        false,
					Hostname:     true,
					Regex:        nil,
				}).Validate(string(elem)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_hostname",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringInt32 == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_int32",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringInt64 == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_int64",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringIP == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_ip",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringIpv4 == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_ipv4",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringIpv6 == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_ipv6",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringPassword == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_password",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringTime == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_time",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringUnix == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_unix",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringUnixMinusMicro == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_unix-micro",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringUnixMinusMilli == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_unix-milli",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringUnixMinusNano == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_unix-nano",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringUnixMinusSeconds == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_unix-seconds",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringURI == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_uri",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringUUID == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_uuid",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayAny == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayAny {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_any",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayBoolean == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayBoolean {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_boolean",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayInteger == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayInteger {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_integer",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayIntegerInt32 == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayIntegerInt32 {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_integer_int32",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayIntegerInt64 == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayIntegerInt64 {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_integer_int64",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayNull == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayNull {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_null",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayNumber == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayNumber {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range elem {
					if err := func() error {
						if err := (validate.Float{}).Validate(float64(elem)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil // return 1
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_number",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayNumberDouble == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayNumberDouble {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range elem {
					if err := func() error {
						if err := (validate.Float{}).Validate(float64(elem)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil // return 1
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_number_double",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayNumberFloat == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayNumberFloat {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range elem {
					if err := func() error {
						if err := (validate.Float{}).Validate(float64(elem)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil // return 1
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_number_float",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayNumberInt32 == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayNumberInt32 {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_number_int32",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayNumberInt64 == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayNumberInt64 {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_number_int64",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayString == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayString {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringBinary == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringBinary {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_binary",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringByte == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringByte {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_byte",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringDate == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringDate {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_date",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringDateMinusTime == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringDateMinusTime {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_date-time",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringDuration == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringDuration {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_duration",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringEmail == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringEmail {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range elem {
					if err := func() error {
						if err := (validate.String{
							MinLength:    0,
							MinLengthSet: false,
							MaxLength:    0,
							MaxLengthSet: false,
							Email:        true,
							Hostname:     false,
							Regex:        nil,
						}).Validate(string(elem)); err != nil {
							return errors.Wrap(err, "string")
						}
						return nil // return 1
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_email",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringHostname == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringHostname {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range elem {
					if err := func() error {
						if err := (validate.String{
							MinLength:    0,
							MinLengthSet: false,
							MaxLength:    0,
							MaxLengthSet: false,
							Email:        false,
							Hostname:     true,
							Regex:        nil,
						}).Validate(string(elem)); err != nil {
							return errors.Wrap(err, "string")
						}
						return nil // return 1
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_hostname",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringInt32 == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringInt32 {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_int32",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringInt64 == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringInt64 {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_int64",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringIP == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringIP {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_ip",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringIpv4 == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringIpv4 {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_ipv4",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringIpv6 == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringIpv6 {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_ipv6",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringPassword == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringPassword {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_password",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringTime == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringTime {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_time",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringUnix == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringUnix {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_unix",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringUnixMinusMicro == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringUnixMinusMicro {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_unix-micro",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringUnixMinusMilli == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringUnixMinusMilli {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_unix-milli",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringUnixMinusNano == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringUnixMinusNano {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_unix-nano",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringUnixMinusSeconds == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringUnixMinusSeconds {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_unix-seconds",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringURI == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringURI {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_uri",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringUUID == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringUUID {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_uuid",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.RequiredNumber)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_number",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.RequiredNumberDouble)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_number_double",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.RequiredNumberFloat)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_number_float",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        true,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.RequiredStringEmail)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_string_email",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        false,
			Hostname:     true,
			Regex:        nil,
		}).Validate(string(s.RequiredStringHostname)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_string_hostname",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalArrayNumber {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(elem)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_array_number",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalArrayNumberDouble {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(elem)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_array_number_double",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalArrayNumberFloat {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(elem)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_array_number_float",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalArrayStringEmail {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        true,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(elem)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_array_string_email",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalArrayStringHostname {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        false,
					Hostname:     true,
					Regex:        nil,
				}).Validate(string(elem)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_array_string_hostname",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayAny {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_any",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayBoolean {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_boolean",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayInteger {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_integer",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayIntegerInt32 {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_integer_int32",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayIntegerInt64 {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_integer_int64",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayNull {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_null",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayNumber {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range elem {
					if err := func() error {
						if err := (validate.Float{}).Validate(float64(elem)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil // return 1
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_number",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayNumberDouble {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range elem {
					if err := func() error {
						if err := (validate.Float{}).Validate(float64(elem)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil // return 1
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_number_double",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayNumberFloat {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range elem {
					if err := func() error {
						if err := (validate.Float{}).Validate(float64(elem)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil // return 1
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_number_float",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayNumberInt32 {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_number_int32",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayNumberInt64 {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_number_int64",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayString {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringBinary {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_binary",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringByte {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_byte",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringDate {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_date",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringDateMinusTime {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_date-time",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringDuration {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_duration",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringEmail {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range elem {
					if err := func() error {
						if err := (validate.String{
							MinLength:    0,
							MinLengthSet: false,
							MaxLength:    0,
							MaxLengthSet: false,
							Email:        true,
							Hostname:     false,
							Regex:        nil,
						}).Validate(string(elem)); err != nil {
							return errors.Wrap(err, "string")
						}
						return nil // return 1
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_email",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringHostname {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range elem {
					if err := func() error {
						if err := (validate.String{
							MinLength:    0,
							MinLengthSet: false,
							MaxLength:    0,
							MaxLengthSet: false,
							Email:        false,
							Hostname:     true,
							Regex:        nil,
						}).Validate(string(elem)); err != nil {
							return errors.Wrap(err, "string")
						}
						return nil // return 1
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_hostname",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringInt32 {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_int32",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringInt64 {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_int64",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringIP {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_ip",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringIpv4 {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_ipv4",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringIpv6 {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_ipv6",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringPassword {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_password",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringTime {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_time",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringUnix {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_unix",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringUnixMinusMicro {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_unix-micro",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringUnixMinusMilli {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_unix-milli",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringUnixMinusNano {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_unix-nano",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringUnixMinusSeconds {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_unix-seconds",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringURI {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_uri",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringUUID {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_uuid",
			Error: err,
		})
	}
	if err := func() error {
		if s.OptionalNumber.Set {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(s.OptionalNumber.Value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_number",
			Error: err,
		})
	}
	if err := func() error {
		if s.OptionalNumberDouble.Set {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(s.OptionalNumberDouble.Value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_number_double",
			Error: err,
		})
	}
	if err := func() error {
		if s.OptionalNumberFloat.Set {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(s.OptionalNumberFloat.Value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_number_float",
			Error: err,
		})
	}
	if err := func() error {
		if s.OptionalStringEmail.Set {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        true,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(s.OptionalStringEmail.Value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_string_email",
			Error: err,
		})
	}
	if err := func() error {
		if s.OptionalStringHostname.Set {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        false,
					Hostname:     true,
					Regex:        nil,
				}).Validate(string(s.OptionalStringHostname.Value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_string_hostname",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s TestRequestRequiredFormatTestReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.RequiredArrayAny == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_any",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayBoolean == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_boolean",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayInteger == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_integer",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayIntegerInt32 == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_integer_int32",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayIntegerInt64 == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_integer_int64",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayNull == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_null",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayNumber == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredArrayNumber {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(elem)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_number",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayNumberDouble == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredArrayNumberDouble {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(elem)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_number_double",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayNumberFloat == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredArrayNumberFloat {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(elem)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_number_float",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayNumberInt32 == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_number_int32",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayNumberInt64 == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_number_int64",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayString == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringBinary == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_binary",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringByte == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_byte",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringDate == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_date",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringDateMinusTime == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_date-time",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringDuration == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_duration",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringEmail == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredArrayStringEmail {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        true,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(elem)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_email",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringHostname == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredArrayStringHostname {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        false,
					Hostname:     true,
					Regex:        nil,
				}).Validate(string(elem)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_hostname",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringInt32 == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_int32",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringInt64 == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_int64",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringIP == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_ip",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringIpv4 == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_ipv4",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringIpv6 == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_ipv6",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringPassword == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_password",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringTime == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_time",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringUnix == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_unix",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringUnixMinusMicro == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_unix-micro",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringUnixMinusMilli == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_unix-milli",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringUnixMinusNano == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_unix-nano",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringUnixMinusSeconds == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_unix-seconds",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringURI == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_uri",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringUUID == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_uuid",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayAny == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayAny {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_any",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayBoolean == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayBoolean {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_boolean",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayInteger == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayInteger {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_integer",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayIntegerInt32 == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayIntegerInt32 {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_integer_int32",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayIntegerInt64 == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayIntegerInt64 {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_integer_int64",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayNull == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayNull {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_null",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayNumber == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayNumber {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range elem {
					if err := func() error {
						if err := (validate.Float{}).Validate(float64(elem)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil // return 1
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_number",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayNumberDouble == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayNumberDouble {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range elem {
					if err := func() error {
						if err := (validate.Float{}).Validate(float64(elem)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil // return 1
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_number_double",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayNumberFloat == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayNumberFloat {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range elem {
					if err := func() error {
						if err := (validate.Float{}).Validate(float64(elem)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil // return 1
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_number_float",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayNumberInt32 == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayNumberInt32 {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_number_int32",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayNumberInt64 == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayNumberInt64 {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_number_int64",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayString == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayString {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringBinary == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringBinary {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_binary",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringByte == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringByte {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_byte",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringDate == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringDate {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_date",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringDateMinusTime == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringDateMinusTime {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_date-time",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringDuration == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringDuration {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_duration",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringEmail == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringEmail {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range elem {
					if err := func() error {
						if err := (validate.String{
							MinLength:    0,
							MinLengthSet: false,
							MaxLength:    0,
							MaxLengthSet: false,
							Email:        true,
							Hostname:     false,
							Regex:        nil,
						}).Validate(string(elem)); err != nil {
							return errors.Wrap(err, "string")
						}
						return nil // return 1
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_email",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringHostname == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringHostname {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range elem {
					if err := func() error {
						if err := (validate.String{
							MinLength:    0,
							MinLengthSet: false,
							MaxLength:    0,
							MaxLengthSet: false,
							Email:        false,
							Hostname:     true,
							Regex:        nil,
						}).Validate(string(elem)); err != nil {
							return errors.Wrap(err, "string")
						}
						return nil // return 1
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_hostname",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringInt32 == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringInt32 {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_int32",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringInt64 == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringInt64 {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_int64",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringIP == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringIP {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_ip",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringIpv4 == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringIpv4 {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_ipv4",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringIpv6 == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringIpv6 {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_ipv6",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringPassword == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringPassword {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_password",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringTime == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringTime {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_time",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringUnix == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringUnix {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_unix",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringUnixMinusMicro == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringUnixMinusMicro {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_unix-micro",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringUnixMinusMilli == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringUnixMinusMilli {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_unix-milli",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringUnixMinusNano == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringUnixMinusNano {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_unix-nano",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringUnixMinusSeconds == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringUnixMinusSeconds {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_unix-seconds",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringURI == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringURI {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_uri",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringUUID == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringUUID {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_uuid",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.RequiredNumber)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_number",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.RequiredNumberDouble)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_number_double",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.RequiredNumberFloat)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_number_float",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        true,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.RequiredStringEmail)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_string_email",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        false,
			Hostname:     true,
			Regex:        nil,
		}).Validate(string(s.RequiredStringHostname)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_string_hostname",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalArrayNumber {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(elem)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_array_number",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalArrayNumberDouble {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(elem)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_array_number_double",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalArrayNumberFloat {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(elem)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_array_number_float",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalArrayStringEmail {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        true,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(elem)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_array_string_email",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalArrayStringHostname {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        false,
					Hostname:     true,
					Regex:        nil,
				}).Validate(string(elem)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_array_string_hostname",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayAny {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_any",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayBoolean {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_boolean",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayInteger {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_integer",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayIntegerInt32 {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_integer_int32",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayIntegerInt64 {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_integer_int64",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayNull {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_null",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayNumber {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range elem {
					if err := func() error {
						if err := (validate.Float{}).Validate(float64(elem)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil // return 1
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_number",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayNumberDouble {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range elem {
					if err := func() error {
						if err := (validate.Float{}).Validate(float64(elem)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil // return 1
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_number_double",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayNumberFloat {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range elem {
					if err := func() error {
						if err := (validate.Float{}).Validate(float64(elem)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil // return 1
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_number_float",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayNumberInt32 {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_number_int32",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayNumberInt64 {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_number_int64",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayString {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringBinary {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_binary",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringByte {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_byte",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringDate {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_date",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringDateMinusTime {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_date-time",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringDuration {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_duration",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringEmail {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range elem {
					if err := func() error {
						if err := (validate.String{
							MinLength:    0,
							MinLengthSet: false,
							MaxLength:    0,
							MaxLengthSet: false,
							Email:        true,
							Hostname:     false,
							Regex:        nil,
						}).Validate(string(elem)); err != nil {
							return errors.Wrap(err, "string")
						}
						return nil // return 1
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_email",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringHostname {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range elem {
					if err := func() error {
						if err := (validate.String{
							MinLength:    0,
							MinLengthSet: false,
							MaxLength:    0,
							MaxLengthSet: false,
							Email:        false,
							Hostname:     true,
							Regex:        nil,
						}).Validate(string(elem)); err != nil {
							return errors.Wrap(err, "string")
						}
						return nil // return 1
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_hostname",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringInt32 {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_int32",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringInt64 {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_int64",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringIP {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_ip",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringIpv4 {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_ipv4",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringIpv6 {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_ipv6",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringPassword {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_password",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringTime {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_time",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringUnix {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_unix",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringUnixMinusMicro {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_unix-micro",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringUnixMinusMilli {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_unix-milli",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringUnixMinusNano {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_unix-nano",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringUnixMinusSeconds {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_unix-seconds",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringURI {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_uri",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringUUID {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_uuid",
			Error: err,
		})
	}
	if err := func() error {
		if s.OptionalNumber.Set {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(s.OptionalNumber.Value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_number",
			Error: err,
		})
	}
	if err := func() error {
		if s.OptionalNumberDouble.Set {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(s.OptionalNumberDouble.Value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_number_double",
			Error: err,
		})
	}
	if err := func() error {
		if s.OptionalNumberFloat.Set {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(s.OptionalNumberFloat.Value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_number_float",
			Error: err,
		})
	}
	if err := func() error {
		if s.OptionalStringEmail.Set {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        true,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(s.OptionalStringEmail.Value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_string_email",
			Error: err,
		})
	}
	if err := func() error {
		if s.OptionalStringHostname.Set {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        false,
					Hostname:     true,
					Regex:        nil,
				}).Validate(string(s.OptionalStringHostname.Value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_string_hostname",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s TestResponseFormatTestOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.RequiredArrayAny == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_any",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayBoolean == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_boolean",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayInteger == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_integer",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayIntegerInt32 == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_integer_int32",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayIntegerInt64 == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_integer_int64",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayNull == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_null",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayNumber == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredArrayNumber {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(elem)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_number",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayNumberDouble == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredArrayNumberDouble {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(elem)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_number_double",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayNumberFloat == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredArrayNumberFloat {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(elem)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_number_float",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayNumberInt32 == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_number_int32",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayNumberInt64 == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_number_int64",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayString == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringBinary == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_binary",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringByte == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_byte",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringDate == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_date",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringDateMinusTime == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_date-time",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringDuration == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_duration",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringEmail == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredArrayStringEmail {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        true,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(elem)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_email",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringHostname == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredArrayStringHostname {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        false,
					Hostname:     true,
					Regex:        nil,
				}).Validate(string(elem)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_hostname",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringInt32 == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_int32",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringInt64 == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_int64",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringIP == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_ip",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringIpv4 == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_ipv4",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringIpv6 == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_ipv6",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringPassword == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_password",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringTime == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_time",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringUnix == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_unix",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringUnixMinusMicro == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_unix-micro",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringUnixMinusMilli == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_unix-milli",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringUnixMinusNano == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_unix-nano",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringUnixMinusSeconds == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_unix-seconds",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringURI == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_uri",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredArrayStringUUID == nil {
			return errors.New("nil is invalid value")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_array_string_uuid",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayAny == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayAny {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_any",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayBoolean == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayBoolean {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_boolean",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayInteger == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayInteger {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_integer",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayIntegerInt32 == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayIntegerInt32 {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_integer_int32",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayIntegerInt64 == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayIntegerInt64 {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_integer_int64",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayNull == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayNull {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_null",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayNumber == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayNumber {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range elem {
					if err := func() error {
						if err := (validate.Float{}).Validate(float64(elem)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil // return 1
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_number",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayNumberDouble == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayNumberDouble {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range elem {
					if err := func() error {
						if err := (validate.Float{}).Validate(float64(elem)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil // return 1
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_number_double",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayNumberFloat == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayNumberFloat {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range elem {
					if err := func() error {
						if err := (validate.Float{}).Validate(float64(elem)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil // return 1
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_number_float",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayNumberInt32 == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayNumberInt32 {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_number_int32",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayNumberInt64 == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayNumberInt64 {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_number_int64",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayString == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayString {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringBinary == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringBinary {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_binary",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringByte == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringByte {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_byte",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringDate == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringDate {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_date",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringDateMinusTime == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringDateMinusTime {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_date-time",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringDuration == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringDuration {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_duration",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringEmail == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringEmail {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range elem {
					if err := func() error {
						if err := (validate.String{
							MinLength:    0,
							MinLengthSet: false,
							MaxLength:    0,
							MaxLengthSet: false,
							Email:        true,
							Hostname:     false,
							Regex:        nil,
						}).Validate(string(elem)); err != nil {
							return errors.Wrap(err, "string")
						}
						return nil // return 1
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_email",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringHostname == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringHostname {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range elem {
					if err := func() error {
						if err := (validate.String{
							MinLength:    0,
							MinLengthSet: false,
							MaxLength:    0,
							MaxLengthSet: false,
							Email:        false,
							Hostname:     true,
							Regex:        nil,
						}).Validate(string(elem)); err != nil {
							return errors.Wrap(err, "string")
						}
						return nil // return 1
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_hostname",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringInt32 == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringInt32 {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_int32",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringInt64 == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringInt64 {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_int64",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringIP == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringIP {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_ip",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringIpv4 == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringIpv4 {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_ipv4",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringIpv6 == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringIpv6 {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_ipv6",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringPassword == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringPassword {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_password",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringTime == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringTime {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_time",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringUnix == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringUnix {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_unix",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringUnixMinusMicro == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringUnixMinusMicro {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_unix-micro",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringUnixMinusMilli == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringUnixMinusMilli {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_unix-milli",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringUnixMinusNano == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringUnixMinusNano {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_unix-nano",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringUnixMinusSeconds == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringUnixMinusSeconds {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_unix-seconds",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringURI == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringURI {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_uri",
			Error: err,
		})
	}
	if err := func() error {
		if s.RequiredDoubleArrayStringUUID == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RequiredDoubleArrayStringUUID {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_double_array_string_uuid",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.RequiredNumber)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_number",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.RequiredNumberDouble)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_number_double",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.RequiredNumberFloat)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_number_float",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        true,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.RequiredStringEmail)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_string_email",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    0,
			MaxLengthSet: false,
			Email:        false,
			Hostname:     true,
			Regex:        nil,
		}).Validate(string(s.RequiredStringHostname)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "required_string_hostname",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalArrayNumber {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(elem)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_array_number",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalArrayNumberDouble {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(elem)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_array_number_double",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalArrayNumberFloat {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(elem)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_array_number_float",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalArrayStringEmail {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        true,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(elem)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_array_string_email",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalArrayStringHostname {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        false,
					Hostname:     true,
					Regex:        nil,
				}).Validate(string(elem)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_array_string_hostname",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayAny {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_any",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayBoolean {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_boolean",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayInteger {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_integer",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayIntegerInt32 {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_integer_int32",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayIntegerInt64 {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_integer_int64",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayNull {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_null",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayNumber {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range elem {
					if err := func() error {
						if err := (validate.Float{}).Validate(float64(elem)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil // return 1
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_number",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayNumberDouble {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range elem {
					if err := func() error {
						if err := (validate.Float{}).Validate(float64(elem)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil // return 1
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_number_double",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayNumberFloat {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range elem {
					if err := func() error {
						if err := (validate.Float{}).Validate(float64(elem)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil // return 1
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_number_float",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayNumberInt32 {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_number_int32",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayNumberInt64 {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_number_int64",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayString {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringBinary {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_binary",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringByte {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_byte",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringDate {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_date",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringDateMinusTime {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_date-time",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringDuration {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_duration",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringEmail {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range elem {
					if err := func() error {
						if err := (validate.String{
							MinLength:    0,
							MinLengthSet: false,
							MaxLength:    0,
							MaxLengthSet: false,
							Email:        true,
							Hostname:     false,
							Regex:        nil,
						}).Validate(string(elem)); err != nil {
							return errors.Wrap(err, "string")
						}
						return nil // return 1
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_email",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringHostname {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range elem {
					if err := func() error {
						if err := (validate.String{
							MinLength:    0,
							MinLengthSet: false,
							MaxLength:    0,
							MaxLengthSet: false,
							Email:        false,
							Hostname:     true,
							Regex:        nil,
						}).Validate(string(elem)); err != nil {
							return errors.Wrap(err, "string")
						}
						return nil // return 1
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_hostname",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringInt32 {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_int32",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringInt64 {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_int64",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringIP {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_ip",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringIpv4 {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_ipv4",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringIpv6 {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_ipv6",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringPassword {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_password",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringTime {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_time",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringUnix {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_unix",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringUnixMinusMicro {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_unix-micro",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringUnixMinusMilli {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_unix-milli",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringUnixMinusNano {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_unix-nano",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringUnixMinusSeconds {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_unix-seconds",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringURI {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_uri",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.OptionalDoubleArrayStringUUID {
			if err := func() error {
				if elem == nil {
					return errors.New("nil is invalid value")
				}
				return nil // return 1
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_double_array_string_uuid",
			Error: err,
		})
	}
	if err := func() error {
		if s.OptionalNumber.Set {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(s.OptionalNumber.Value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_number",
			Error: err,
		})
	}
	if err := func() error {
		if s.OptionalNumberDouble.Set {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(s.OptionalNumberDouble.Value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_number_double",
			Error: err,
		})
	}
	if err := func() error {
		if s.OptionalNumberFloat.Set {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(s.OptionalNumberFloat.Value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_number_float",
			Error: err,
		})
	}
	if err := func() error {
		if s.OptionalStringEmail.Set {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        true,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(s.OptionalStringEmail.Value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_string_email",
			Error: err,
		})
	}
	if err := func() error {
		if s.OptionalStringHostname.Set {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        false,
					Hostname:     true,
					Regex:        nil,
				}).Validate(string(s.OptionalStringHostname.Value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil // return 1
			}(); err != nil {
				return err
			}
		}
		return nil // return 2
		return nil // return 1
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "optional_string_hostname",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

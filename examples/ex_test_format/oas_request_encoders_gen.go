// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"net/http"
	"net/netip"
	"net/url"
	"time"

	"github.com/go-faster/jx"
	"github.com/google/uuid"

	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
)

func encodeTestQueryParameterRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestAnyRequest(
	req jx.Raw,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if len(req) != 0 {
			e.Raw(req)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestBooleanRequest(
	req OptBool,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestBooleanArrayRequest(
	req []bool,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.Bool(elem)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestBooleanArrayArrayRequest(
	req [][]bool,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					e.Bool(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestBooleanNullableRequest(
	req OptNilBool,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestBooleanNullableArrayRequest(
	req []NilBool,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestBooleanNullableArrayArrayRequest(
	req [][]NilBool,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					elem.Encode(e)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestEmptyStructRequest(
	req *TestRequestEmptyStructReq,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestFormatTestRequest(
	req OptTestRequestFormatTestReq,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestIntegerRequest(
	req OptInt,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestIntegerArrayRequest(
	req []int,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.Int(elem)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestIntegerArrayArrayRequest(
	req [][]int,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					e.Int(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestIntegerInt32Request(
	req OptInt32,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestIntegerInt32ArrayRequest(
	req []int32,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.Int32(elem)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestIntegerInt32ArrayArrayRequest(
	req [][]int32,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					e.Int32(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestIntegerInt32NullableRequest(
	req OptNilInt32,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestIntegerInt32NullableArrayRequest(
	req []NilInt32,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestIntegerInt32NullableArrayArrayRequest(
	req [][]NilInt32,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					elem.Encode(e)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestIntegerInt64Request(
	req OptInt64,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestIntegerInt64ArrayRequest(
	req []int64,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.Int64(elem)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestIntegerInt64ArrayArrayRequest(
	req [][]int64,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					e.Int64(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestIntegerInt64NullableRequest(
	req OptNilInt64,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestIntegerInt64NullableArrayRequest(
	req []NilInt64,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestIntegerInt64NullableArrayArrayRequest(
	req [][]NilInt64,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					elem.Encode(e)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestIntegerNullableRequest(
	req OptNilInt,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestIntegerNullableArrayRequest(
	req []NilInt,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestIntegerNullableArrayArrayRequest(
	req [][]NilInt,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					elem.Encode(e)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestNullRequest(
	req OptNull,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestNullArrayRequest(
	req []struct{},
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				_ = elem
				e.Null()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestNullArrayArrayRequest(
	req [][]struct{},
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					_ = elem
					e.Null()
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestNullNullableRequest(
	req OptNull,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestNullNullableArrayRequest(
	req []struct{},
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				_ = elem
				e.Null()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestNullNullableArrayArrayRequest(
	req [][]struct{},
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					_ = elem
					e.Null()
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestNumberRequest(
	req OptFloat64,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestNumberArrayRequest(
	req []float64,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.Float64(elem)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestNumberArrayArrayRequest(
	req [][]float64,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					e.Float64(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestNumberDoubleRequest(
	req OptFloat64,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestNumberDoubleArrayRequest(
	req []float64,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.Float64(elem)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestNumberDoubleArrayArrayRequest(
	req [][]float64,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					e.Float64(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestNumberDoubleNullableRequest(
	req OptNilFloat64,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestNumberDoubleNullableArrayRequest(
	req []NilFloat64,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestNumberDoubleNullableArrayArrayRequest(
	req [][]NilFloat64,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					elem.Encode(e)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestNumberFloatRequest(
	req OptFloat32,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestNumberFloatArrayRequest(
	req []float32,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.Float32(elem)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestNumberFloatArrayArrayRequest(
	req [][]float32,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					e.Float32(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestNumberFloatNullableRequest(
	req OptNilFloat32,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestNumberFloatNullableArrayRequest(
	req []NilFloat32,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestNumberFloatNullableArrayArrayRequest(
	req [][]NilFloat32,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					elem.Encode(e)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestNumberInt32Request(
	req OptInt32,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestNumberInt32ArrayRequest(
	req []int32,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.Int32(elem)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestNumberInt32ArrayArrayRequest(
	req [][]int32,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					e.Int32(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestNumberInt32NullableRequest(
	req OptNilInt32,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestNumberInt32NullableArrayRequest(
	req []NilInt32,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestNumberInt32NullableArrayArrayRequest(
	req [][]NilInt32,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					elem.Encode(e)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestNumberInt64Request(
	req OptInt64,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestNumberInt64ArrayRequest(
	req []int64,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.Int64(elem)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestNumberInt64ArrayArrayRequest(
	req [][]int64,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					e.Int64(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestNumberInt64NullableRequest(
	req OptNilInt64,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestNumberInt64NullableArrayRequest(
	req []NilInt64,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestNumberInt64NullableArrayArrayRequest(
	req [][]NilInt64,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					elem.Encode(e)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestNumberNullableRequest(
	req OptNilFloat64,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestNumberNullableArrayRequest(
	req []NilFloat64,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestNumberNullableArrayArrayRequest(
	req [][]NilFloat64,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					elem.Encode(e)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredAnyRequest(
	req jx.Raw,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if len(req) != 0 {
			e.Raw(req)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredBooleanRequest(
	req bool,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Bool(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredBooleanArrayRequest(
	req []bool,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.Bool(elem)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredBooleanArrayArrayRequest(
	req [][]bool,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				e.Bool(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredBooleanNullableRequest(
	req NilBool,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredBooleanNullableArrayRequest(
	req []NilBool,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredBooleanNullableArrayArrayRequest(
	req [][]NilBool,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredEmptyStructRequest(
	req TestRequestRequiredEmptyStructReq,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredFormatTestRequest(
	req TestRequestRequiredFormatTestReq,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredIntegerRequest(
	req int,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Int(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredIntegerArrayRequest(
	req []int,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.Int(elem)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredIntegerArrayArrayRequest(
	req [][]int,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				e.Int(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredIntegerInt32Request(
	req int32,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Int32(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredIntegerInt32ArrayRequest(
	req []int32,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.Int32(elem)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredIntegerInt32ArrayArrayRequest(
	req [][]int32,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				e.Int32(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredIntegerInt32NullableRequest(
	req NilInt32,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredIntegerInt32NullableArrayRequest(
	req []NilInt32,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredIntegerInt32NullableArrayArrayRequest(
	req [][]NilInt32,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredIntegerInt64Request(
	req int64,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Int64(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredIntegerInt64ArrayRequest(
	req []int64,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.Int64(elem)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredIntegerInt64ArrayArrayRequest(
	req [][]int64,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				e.Int64(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredIntegerInt64NullableRequest(
	req NilInt64,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredIntegerInt64NullableArrayRequest(
	req []NilInt64,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredIntegerInt64NullableArrayArrayRequest(
	req [][]NilInt64,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredIntegerNullableRequest(
	req NilInt,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredIntegerNullableArrayRequest(
	req []NilInt,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredIntegerNullableArrayArrayRequest(
	req [][]NilInt,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredNullRequest(
	req struct{},
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		_ = req
		e.Null()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredNullArrayRequest(
	req []struct{},
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			_ = elem
			e.Null()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredNullArrayArrayRequest(
	req [][]struct{},
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				_ = elem
				e.Null()
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredNullNullableRequest(
	req struct{},
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		_ = req
		e.Null()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredNullNullableArrayRequest(
	req []struct{},
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			_ = elem
			e.Null()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredNullNullableArrayArrayRequest(
	req [][]struct{},
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				_ = elem
				e.Null()
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredNumberRequest(
	req float64,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Float64(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredNumberArrayRequest(
	req []float64,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.Float64(elem)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredNumberArrayArrayRequest(
	req [][]float64,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				e.Float64(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredNumberDoubleRequest(
	req float64,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Float64(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredNumberDoubleArrayRequest(
	req []float64,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.Float64(elem)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredNumberDoubleArrayArrayRequest(
	req [][]float64,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				e.Float64(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredNumberDoubleNullableRequest(
	req NilFloat64,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredNumberDoubleNullableArrayRequest(
	req []NilFloat64,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredNumberDoubleNullableArrayArrayRequest(
	req [][]NilFloat64,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredNumberFloatRequest(
	req float32,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Float32(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredNumberFloatArrayRequest(
	req []float32,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.Float32(elem)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredNumberFloatArrayArrayRequest(
	req [][]float32,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				e.Float32(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredNumberFloatNullableRequest(
	req NilFloat32,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredNumberFloatNullableArrayRequest(
	req []NilFloat32,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredNumberFloatNullableArrayArrayRequest(
	req [][]NilFloat32,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredNumberInt32Request(
	req int32,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Int32(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredNumberInt32ArrayRequest(
	req []int32,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.Int32(elem)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredNumberInt32ArrayArrayRequest(
	req [][]int32,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				e.Int32(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredNumberInt32NullableRequest(
	req NilInt32,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredNumberInt32NullableArrayRequest(
	req []NilInt32,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredNumberInt32NullableArrayArrayRequest(
	req [][]NilInt32,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredNumberInt64Request(
	req int64,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Int64(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredNumberInt64ArrayRequest(
	req []int64,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.Int64(elem)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredNumberInt64ArrayArrayRequest(
	req [][]int64,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				e.Int64(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredNumberInt64NullableRequest(
	req NilInt64,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredNumberInt64NullableArrayRequest(
	req []NilInt64,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredNumberInt64NullableArrayArrayRequest(
	req [][]NilInt64,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredNumberNullableRequest(
	req NilFloat64,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredNumberNullableArrayRequest(
	req []NilFloat64,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredNumberNullableArrayArrayRequest(
	req [][]NilFloat64,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringArrayRequest(
	req []string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringArrayArrayRequest(
	req [][]string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				e.Str(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringBinaryRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringBinaryArrayRequest(
	req []string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringBinaryArrayArrayRequest(
	req [][]string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				e.Str(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringBinaryNullableRequest(
	req NilString,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringBinaryNullableArrayRequest(
	req []NilString,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringBinaryNullableArrayArrayRequest(
	req [][]NilString,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringByteRequest(
	req []byte,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Base64(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringByteArrayRequest(
	req [][]byte,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.Base64(elem)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringByteArrayArrayRequest(
	req [][][]byte,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				e.Base64(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringByteNullableRequest(
	req []byte,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Base64(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringByteNullableArrayRequest(
	req [][]byte,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.Base64(elem)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringByteNullableArrayArrayRequest(
	req [][][]byte,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				e.Base64(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringDateRequest(
	req time.Time,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		json.EncodeDate(e, req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringDateArrayRequest(
	req []time.Time,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			json.EncodeDate(e, elem)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringDateArrayArrayRequest(
	req [][]time.Time,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeDate(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringDateNullableRequest(
	req NilDate,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		req.Encode(e, json.EncodeDate)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringDateNullableArrayRequest(
	req []NilDate,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			elem.Encode(e, json.EncodeDate)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringDateNullableArrayArrayRequest(
	req [][]NilDate,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				elem.Encode(e, json.EncodeDate)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringDateTimeRequest(
	req time.Time,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		json.EncodeDateTime(e, req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringDateTimeArrayRequest(
	req []time.Time,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			json.EncodeDateTime(e, elem)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringDateTimeArrayArrayRequest(
	req [][]time.Time,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeDateTime(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringDateTimeNullableRequest(
	req NilDateTime,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		req.Encode(e, json.EncodeDateTime)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringDateTimeNullableArrayRequest(
	req []NilDateTime,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			elem.Encode(e, json.EncodeDateTime)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringDateTimeNullableArrayArrayRequest(
	req [][]NilDateTime,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				elem.Encode(e, json.EncodeDateTime)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringDurationRequest(
	req time.Duration,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		json.EncodeDuration(e, req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringDurationArrayRequest(
	req []time.Duration,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			json.EncodeDuration(e, elem)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringDurationArrayArrayRequest(
	req [][]time.Duration,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeDuration(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringDurationNullableRequest(
	req NilDuration,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringDurationNullableArrayRequest(
	req []NilDuration,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringDurationNullableArrayArrayRequest(
	req [][]NilDuration,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringEmailRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringEmailArrayRequest(
	req []string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringEmailArrayArrayRequest(
	req [][]string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				e.Str(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringEmailNullableRequest(
	req NilString,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringEmailNullableArrayRequest(
	req []NilString,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringEmailNullableArrayArrayRequest(
	req [][]NilString,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringHostnameRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringHostnameArrayRequest(
	req []string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringHostnameArrayArrayRequest(
	req [][]string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				e.Str(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringHostnameNullableRequest(
	req NilString,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringHostnameNullableArrayRequest(
	req []NilString,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringHostnameNullableArrayArrayRequest(
	req [][]NilString,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringIPRequest(
	req netip.Addr,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		json.EncodeIP(e, req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringIPArrayRequest(
	req []netip.Addr,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			json.EncodeIP(e, elem)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringIPArrayArrayRequest(
	req [][]netip.Addr,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeIP(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringIPNullableRequest(
	req NilIP,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringIPNullableArrayRequest(
	req []NilIP,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringIPNullableArrayArrayRequest(
	req [][]NilIP,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringInt32Request(
	req int32,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		json.EncodeStringInt32(e, req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringInt32ArrayRequest(
	req []int32,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			json.EncodeStringInt32(e, elem)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringInt32ArrayArrayRequest(
	req [][]int32,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringInt32(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringInt32NullableRequest(
	req NilStringInt32,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringInt32NullableArrayRequest(
	req []NilStringInt32,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringInt32NullableArrayArrayRequest(
	req [][]NilStringInt32,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringInt64Request(
	req int64,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		json.EncodeStringInt64(e, req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringInt64ArrayRequest(
	req []int64,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			json.EncodeStringInt64(e, elem)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringInt64ArrayArrayRequest(
	req [][]int64,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeStringInt64(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringInt64NullableRequest(
	req NilStringInt64,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringInt64NullableArrayRequest(
	req []NilStringInt64,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringInt64NullableArrayArrayRequest(
	req [][]NilStringInt64,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringIpv4Request(
	req netip.Addr,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		json.EncodeIP(e, req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringIpv4ArrayRequest(
	req []netip.Addr,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			json.EncodeIP(e, elem)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringIpv4ArrayArrayRequest(
	req [][]netip.Addr,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeIP(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringIpv4NullableRequest(
	req NilIPv4,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringIpv4NullableArrayRequest(
	req []NilIPv4,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringIpv4NullableArrayArrayRequest(
	req [][]NilIPv4,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringIpv6Request(
	req netip.Addr,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		json.EncodeIP(e, req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringIpv6ArrayRequest(
	req []netip.Addr,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			json.EncodeIP(e, elem)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringIpv6ArrayArrayRequest(
	req [][]netip.Addr,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeIP(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringIpv6NullableRequest(
	req NilIPv6,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringIpv6NullableArrayRequest(
	req []NilIPv6,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringIpv6NullableArrayArrayRequest(
	req [][]NilIPv6,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringNullableRequest(
	req NilString,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringNullableArrayRequest(
	req []NilString,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringNullableArrayArrayRequest(
	req [][]NilString,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringPasswordRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringPasswordArrayRequest(
	req []string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringPasswordArrayArrayRequest(
	req [][]string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				e.Str(elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringPasswordNullableRequest(
	req NilString,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringPasswordNullableArrayRequest(
	req []NilString,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringPasswordNullableArrayArrayRequest(
	req [][]NilString,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringTimeRequest(
	req time.Time,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		json.EncodeTime(e, req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringTimeArrayRequest(
	req []time.Time,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			json.EncodeTime(e, elem)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringTimeArrayArrayRequest(
	req [][]time.Time,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeTime(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringTimeNullableRequest(
	req NilTime,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		req.Encode(e, json.EncodeTime)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringTimeNullableArrayRequest(
	req []NilTime,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			elem.Encode(e, json.EncodeTime)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringTimeNullableArrayArrayRequest(
	req [][]NilTime,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				elem.Encode(e, json.EncodeTime)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringURIRequest(
	req url.URL,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		json.EncodeURI(e, req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringURIArrayRequest(
	req []url.URL,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			json.EncodeURI(e, elem)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringURIArrayArrayRequest(
	req [][]url.URL,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeURI(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringURINullableRequest(
	req NilURI,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringURINullableArrayRequest(
	req []NilURI,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringURINullableArrayArrayRequest(
	req [][]NilURI,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringUUIDRequest(
	req uuid.UUID,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		json.EncodeUUID(e, req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringUUIDArrayRequest(
	req []uuid.UUID,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			json.EncodeUUID(e, elem)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringUUIDArrayArrayRequest(
	req [][]uuid.UUID,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeUUID(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringUUIDNullableRequest(
	req NilUUID,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringUUIDNullableArrayRequest(
	req []NilUUID,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringUUIDNullableArrayArrayRequest(
	req [][]NilUUID,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringUnixRequest(
	req time.Time,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		json.EncodeUnixSeconds(e, req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringUnixArrayRequest(
	req []time.Time,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			json.EncodeUnixSeconds(e, elem)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringUnixArrayArrayRequest(
	req [][]time.Time,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeUnixSeconds(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringUnixMicroRequest(
	req time.Time,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		json.EncodeUnixMicro(e, req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringUnixMicroArrayRequest(
	req []time.Time,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			json.EncodeUnixMicro(e, elem)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringUnixMicroArrayArrayRequest(
	req [][]time.Time,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeUnixMicro(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringUnixMicroNullableRequest(
	req NilUnixMicro,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		req.Encode(e, json.EncodeUnixMicro)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringUnixMicroNullableArrayRequest(
	req []NilUnixMicro,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			elem.Encode(e, json.EncodeUnixMicro)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringUnixMicroNullableArrayArrayRequest(
	req [][]NilUnixMicro,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				elem.Encode(e, json.EncodeUnixMicro)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringUnixMilliRequest(
	req time.Time,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		json.EncodeUnixMilli(e, req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringUnixMilliArrayRequest(
	req []time.Time,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			json.EncodeUnixMilli(e, elem)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringUnixMilliArrayArrayRequest(
	req [][]time.Time,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeUnixMilli(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringUnixMilliNullableRequest(
	req NilUnixMilli,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		req.Encode(e, json.EncodeUnixMilli)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringUnixMilliNullableArrayRequest(
	req []NilUnixMilli,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			elem.Encode(e, json.EncodeUnixMilli)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringUnixMilliNullableArrayArrayRequest(
	req [][]NilUnixMilli,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				elem.Encode(e, json.EncodeUnixMilli)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringUnixNanoRequest(
	req time.Time,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		json.EncodeUnixNano(e, req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringUnixNanoArrayRequest(
	req []time.Time,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			json.EncodeUnixNano(e, elem)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringUnixNanoArrayArrayRequest(
	req [][]time.Time,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeUnixNano(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringUnixNanoNullableRequest(
	req NilUnixNano,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		req.Encode(e, json.EncodeUnixNano)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringUnixNanoNullableArrayRequest(
	req []NilUnixNano,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			elem.Encode(e, json.EncodeUnixNano)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringUnixNanoNullableArrayArrayRequest(
	req [][]NilUnixNano,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				elem.Encode(e, json.EncodeUnixNano)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringUnixNullableRequest(
	req NilUnixSeconds,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		req.Encode(e, json.EncodeUnixSeconds)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringUnixNullableArrayRequest(
	req []NilUnixSeconds,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			elem.Encode(e, json.EncodeUnixSeconds)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringUnixNullableArrayArrayRequest(
	req [][]NilUnixSeconds,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				elem.Encode(e, json.EncodeUnixSeconds)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringUnixSecondsRequest(
	req time.Time,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		json.EncodeUnixSeconds(e, req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringUnixSecondsArrayRequest(
	req []time.Time,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			json.EncodeUnixSeconds(e, elem)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringUnixSecondsArrayArrayRequest(
	req [][]time.Time,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				json.EncodeUnixSeconds(e, elem)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringUnixSecondsNullableRequest(
	req NilUnixSeconds,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		req.Encode(e, json.EncodeUnixSeconds)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringUnixSecondsNullableArrayRequest(
	req []NilUnixSeconds,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			elem.Encode(e, json.EncodeUnixSeconds)
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestRequiredStringUnixSecondsNullableArrayArrayRequest(
	req [][]NilUnixSeconds,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.ArrStart()
		for _, elem := range req {
			e.ArrStart()
			for _, elem := range elem {
				elem.Encode(e, json.EncodeUnixSeconds)
			}
			e.ArrEnd()
		}
		e.ArrEnd()
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringRequest(
	req OptString,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringArrayRequest(
	req []string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringArrayArrayRequest(
	req [][]string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					e.Str(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringBinaryRequest(
	req OptString,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringBinaryArrayRequest(
	req []string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringBinaryArrayArrayRequest(
	req [][]string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					e.Str(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringBinaryNullableRequest(
	req OptNilString,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringBinaryNullableArrayRequest(
	req []NilString,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringBinaryNullableArrayArrayRequest(
	req [][]NilString,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					elem.Encode(e)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringByteRequest(
	req []byte,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Base64(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringByteArrayRequest(
	req [][]byte,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.Base64(elem)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringByteArrayArrayRequest(
	req [][][]byte,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					e.Base64(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringByteNullableRequest(
	req OptNilByte,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringByteNullableArrayRequest(
	req [][]byte,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.Base64(elem)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringByteNullableArrayArrayRequest(
	req [][][]byte,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					e.Base64(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringDateRequest(
	req OptDate,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e, json.EncodeDate)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringDateArrayRequest(
	req []time.Time,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				json.EncodeDate(e, elem)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringDateArrayArrayRequest(
	req [][]time.Time,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeDate(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringDateNullableRequest(
	req OptNilDate,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e, json.EncodeDate)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringDateNullableArrayRequest(
	req []NilDate,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				elem.Encode(e, json.EncodeDate)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringDateNullableArrayArrayRequest(
	req [][]NilDate,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					elem.Encode(e, json.EncodeDate)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringDateTimeRequest(
	req OptDateTime,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e, json.EncodeDateTime)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringDateTimeArrayRequest(
	req []time.Time,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				json.EncodeDateTime(e, elem)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringDateTimeArrayArrayRequest(
	req [][]time.Time,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeDateTime(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringDateTimeNullableRequest(
	req OptNilDateTime,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e, json.EncodeDateTime)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringDateTimeNullableArrayRequest(
	req []NilDateTime,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				elem.Encode(e, json.EncodeDateTime)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringDateTimeNullableArrayArrayRequest(
	req [][]NilDateTime,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					elem.Encode(e, json.EncodeDateTime)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringDurationRequest(
	req OptDuration,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringDurationArrayRequest(
	req []time.Duration,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				json.EncodeDuration(e, elem)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringDurationArrayArrayRequest(
	req [][]time.Duration,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeDuration(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringDurationNullableRequest(
	req OptNilDuration,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringDurationNullableArrayRequest(
	req []NilDuration,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringDurationNullableArrayArrayRequest(
	req [][]NilDuration,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					elem.Encode(e)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringEmailRequest(
	req OptString,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringEmailArrayRequest(
	req []string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringEmailArrayArrayRequest(
	req [][]string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					e.Str(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringEmailNullableRequest(
	req OptNilString,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringEmailNullableArrayRequest(
	req []NilString,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringEmailNullableArrayArrayRequest(
	req [][]NilString,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					elem.Encode(e)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringHostnameRequest(
	req OptString,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringHostnameArrayRequest(
	req []string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringHostnameArrayArrayRequest(
	req [][]string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					e.Str(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringHostnameNullableRequest(
	req OptNilString,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringHostnameNullableArrayRequest(
	req []NilString,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringHostnameNullableArrayArrayRequest(
	req [][]NilString,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					elem.Encode(e)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringIPRequest(
	req OptIP,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringIPArrayRequest(
	req []netip.Addr,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				json.EncodeIP(e, elem)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringIPArrayArrayRequest(
	req [][]netip.Addr,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeIP(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringIPNullableRequest(
	req OptNilIP,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringIPNullableArrayRequest(
	req []NilIP,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringIPNullableArrayArrayRequest(
	req [][]NilIP,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					elem.Encode(e)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringInt32Request(
	req OptStringInt32,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringInt32ArrayRequest(
	req []int32,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				json.EncodeStringInt32(e, elem)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringInt32ArrayArrayRequest(
	req [][]int32,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringInt32(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringInt32NullableRequest(
	req OptNilStringInt32,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringInt32NullableArrayRequest(
	req []NilStringInt32,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringInt32NullableArrayArrayRequest(
	req [][]NilStringInt32,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					elem.Encode(e)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringInt64Request(
	req OptStringInt64,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringInt64ArrayRequest(
	req []int64,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				json.EncodeStringInt64(e, elem)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringInt64ArrayArrayRequest(
	req [][]int64,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeStringInt64(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringInt64NullableRequest(
	req OptNilStringInt64,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringInt64NullableArrayRequest(
	req []NilStringInt64,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringInt64NullableArrayArrayRequest(
	req [][]NilStringInt64,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					elem.Encode(e)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringIpv4Request(
	req OptIPv4,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringIpv4ArrayRequest(
	req []netip.Addr,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				json.EncodeIP(e, elem)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringIpv4ArrayArrayRequest(
	req [][]netip.Addr,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeIP(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringIpv4NullableRequest(
	req OptNilIPv4,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringIpv4NullableArrayRequest(
	req []NilIPv4,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringIpv4NullableArrayArrayRequest(
	req [][]NilIPv4,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					elem.Encode(e)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringIpv6Request(
	req OptIPv6,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringIpv6ArrayRequest(
	req []netip.Addr,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				json.EncodeIP(e, elem)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringIpv6ArrayArrayRequest(
	req [][]netip.Addr,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeIP(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringIpv6NullableRequest(
	req OptNilIPv6,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringIpv6NullableArrayRequest(
	req []NilIPv6,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringIpv6NullableArrayArrayRequest(
	req [][]NilIPv6,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					elem.Encode(e)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringNullableRequest(
	req OptNilString,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringNullableArrayRequest(
	req []NilString,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringNullableArrayArrayRequest(
	req [][]NilString,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					elem.Encode(e)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringPasswordRequest(
	req OptString,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringPasswordArrayRequest(
	req []string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringPasswordArrayArrayRequest(
	req [][]string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					e.Str(elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringPasswordNullableRequest(
	req OptNilString,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringPasswordNullableArrayRequest(
	req []NilString,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringPasswordNullableArrayArrayRequest(
	req [][]NilString,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					elem.Encode(e)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringTimeRequest(
	req OptTime,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e, json.EncodeTime)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringTimeArrayRequest(
	req []time.Time,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				json.EncodeTime(e, elem)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringTimeArrayArrayRequest(
	req [][]time.Time,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeTime(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringTimeNullableRequest(
	req OptNilTime,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e, json.EncodeTime)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringTimeNullableArrayRequest(
	req []NilTime,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				elem.Encode(e, json.EncodeTime)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringTimeNullableArrayArrayRequest(
	req [][]NilTime,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					elem.Encode(e, json.EncodeTime)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringURIRequest(
	req OptURI,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringURIArrayRequest(
	req []url.URL,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				json.EncodeURI(e, elem)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringURIArrayArrayRequest(
	req [][]url.URL,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeURI(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringURINullableRequest(
	req OptNilURI,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringURINullableArrayRequest(
	req []NilURI,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringURINullableArrayArrayRequest(
	req [][]NilURI,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					elem.Encode(e)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringUUIDRequest(
	req OptUUID,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringUUIDArrayRequest(
	req []uuid.UUID,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				json.EncodeUUID(e, elem)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringUUIDArrayArrayRequest(
	req [][]uuid.UUID,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeUUID(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringUUIDNullableRequest(
	req OptNilUUID,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringUUIDNullableArrayRequest(
	req []NilUUID,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringUUIDNullableArrayArrayRequest(
	req [][]NilUUID,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					elem.Encode(e)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringUnixRequest(
	req OptUnixSeconds,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e, json.EncodeUnixSeconds)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringUnixArrayRequest(
	req []time.Time,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				json.EncodeUnixSeconds(e, elem)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringUnixArrayArrayRequest(
	req [][]time.Time,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeUnixSeconds(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringUnixMicroRequest(
	req OptUnixMicro,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e, json.EncodeUnixMicro)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringUnixMicroArrayRequest(
	req []time.Time,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				json.EncodeUnixMicro(e, elem)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringUnixMicroArrayArrayRequest(
	req [][]time.Time,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeUnixMicro(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringUnixMicroNullableRequest(
	req OptNilUnixMicro,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e, json.EncodeUnixMicro)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringUnixMicroNullableArrayRequest(
	req []NilUnixMicro,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				elem.Encode(e, json.EncodeUnixMicro)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringUnixMicroNullableArrayArrayRequest(
	req [][]NilUnixMicro,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					elem.Encode(e, json.EncodeUnixMicro)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringUnixMilliRequest(
	req OptUnixMilli,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e, json.EncodeUnixMilli)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringUnixMilliArrayRequest(
	req []time.Time,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				json.EncodeUnixMilli(e, elem)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringUnixMilliArrayArrayRequest(
	req [][]time.Time,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeUnixMilli(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringUnixMilliNullableRequest(
	req OptNilUnixMilli,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e, json.EncodeUnixMilli)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringUnixMilliNullableArrayRequest(
	req []NilUnixMilli,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				elem.Encode(e, json.EncodeUnixMilli)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringUnixMilliNullableArrayArrayRequest(
	req [][]NilUnixMilli,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					elem.Encode(e, json.EncodeUnixMilli)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringUnixNanoRequest(
	req OptUnixNano,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e, json.EncodeUnixNano)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringUnixNanoArrayRequest(
	req []time.Time,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				json.EncodeUnixNano(e, elem)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringUnixNanoArrayArrayRequest(
	req [][]time.Time,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeUnixNano(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringUnixNanoNullableRequest(
	req OptNilUnixNano,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e, json.EncodeUnixNano)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringUnixNanoNullableArrayRequest(
	req []NilUnixNano,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				elem.Encode(e, json.EncodeUnixNano)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringUnixNanoNullableArrayArrayRequest(
	req [][]NilUnixNano,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					elem.Encode(e, json.EncodeUnixNano)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringUnixNullableRequest(
	req OptNilUnixSeconds,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e, json.EncodeUnixSeconds)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringUnixNullableArrayRequest(
	req []NilUnixSeconds,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				elem.Encode(e, json.EncodeUnixSeconds)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringUnixNullableArrayArrayRequest(
	req [][]NilUnixSeconds,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					elem.Encode(e, json.EncodeUnixSeconds)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringUnixSecondsRequest(
	req OptUnixSeconds,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e, json.EncodeUnixSeconds)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringUnixSecondsArrayRequest(
	req []time.Time,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				json.EncodeUnixSeconds(e, elem)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringUnixSecondsArrayArrayRequest(
	req [][]time.Time,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					json.EncodeUnixSeconds(e, elem)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringUnixSecondsNullableRequest(
	req OptNilUnixSeconds,
	r *http.Request,
) error {
	const contentType = "application/json"
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e, json.EncodeUnixSeconds)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringUnixSecondsNullableArrayRequest(
	req []NilUnixSeconds,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				elem.Encode(e, json.EncodeUnixSeconds)
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestRequestStringUnixSecondsNullableArrayArrayRequest(
	req [][]NilUnixSeconds,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		if req != nil {
			e.ArrStart()
			for _, elem := range req {
				e.ArrStart()
				for _, elem := range elem {
					elem.Encode(e, json.EncodeUnixSeconds)
				}
				e.ArrEnd()
			}
			e.ArrEnd()
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseAnyRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseBooleanRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseBooleanArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseBooleanArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseBooleanNullableRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseBooleanNullableArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseBooleanNullableArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseEmptyStructRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseFormatTestRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseIntegerRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseIntegerArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseIntegerArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseIntegerInt32Request(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseIntegerInt32ArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseIntegerInt32ArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseIntegerInt32NullableRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseIntegerInt32NullableArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseIntegerInt32NullableArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseIntegerInt64Request(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseIntegerInt64ArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseIntegerInt64ArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseIntegerInt64NullableRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseIntegerInt64NullableArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseIntegerInt64NullableArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseIntegerNullableRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseIntegerNullableArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseIntegerNullableArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseNullRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseNullArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseNullArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseNullNullableRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseNullNullableArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseNullNullableArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseNumberRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseNumberArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseNumberArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseNumberDoubleRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseNumberDoubleArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseNumberDoubleArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseNumberDoubleNullableRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseNumberDoubleNullableArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseNumberDoubleNullableArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseNumberFloatRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseNumberFloatArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseNumberFloatArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseNumberFloatNullableRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseNumberFloatNullableArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseNumberFloatNullableArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseNumberInt32Request(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseNumberInt32ArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseNumberInt32ArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseNumberInt32NullableRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseNumberInt32NullableArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseNumberInt32NullableArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseNumberInt64Request(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseNumberInt64ArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseNumberInt64ArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseNumberInt64NullableRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseNumberInt64NullableArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseNumberInt64NullableArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseNumberNullableRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseNumberNullableArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseNumberNullableArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringBinaryRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringBinaryArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringBinaryArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringBinaryNullableRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringBinaryNullableArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringBinaryNullableArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringByteRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringByteArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringByteArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringByteNullableRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringByteNullableArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringByteNullableArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringDateRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringDateArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringDateArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringDateNullableRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringDateNullableArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringDateNullableArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringDateTimeRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringDateTimeArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringDateTimeArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringDateTimeNullableRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringDateTimeNullableArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringDateTimeNullableArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringDurationRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringDurationArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringDurationArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringDurationNullableRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringDurationNullableArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringDurationNullableArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringEmailRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringEmailArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringEmailArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringEmailNullableRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringEmailNullableArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringEmailNullableArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringHostnameRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringHostnameArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringHostnameArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringHostnameNullableRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringHostnameNullableArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringHostnameNullableArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringIPRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringIPArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringIPArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringIPNullableRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringIPNullableArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringIPNullableArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringInt32Request(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringInt32ArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringInt32ArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringInt32NullableRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringInt32NullableArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringInt32NullableArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringInt64Request(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringInt64ArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringInt64ArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringInt64NullableRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringInt64NullableArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringInt64NullableArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringIpv4Request(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringIpv4ArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringIpv4ArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringIpv4NullableRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringIpv4NullableArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringIpv4NullableArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringIpv6Request(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringIpv6ArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringIpv6ArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringIpv6NullableRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringIpv6NullableArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringIpv6NullableArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringNullableRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringNullableArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringNullableArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringPasswordRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringPasswordArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringPasswordArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringPasswordNullableRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringPasswordNullableArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringPasswordNullableArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringTimeRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringTimeArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringTimeArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringTimeNullableRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringTimeNullableArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringTimeNullableArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringURIRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringURIArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringURIArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringURINullableRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringURINullableArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringURINullableArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringUUIDRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringUUIDArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringUUIDArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringUUIDNullableRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringUUIDNullableArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringUUIDNullableArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringUnixRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringUnixArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringUnixArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringUnixMicroRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringUnixMicroArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringUnixMicroArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringUnixMicroNullableRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringUnixMicroNullableArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringUnixMicroNullableArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringUnixMilliRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringUnixMilliArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringUnixMilliArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringUnixMilliNullableRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringUnixMilliNullableArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringUnixMilliNullableArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringUnixNanoRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringUnixNanoArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringUnixNanoArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringUnixNanoNullableRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringUnixNanoNullableArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringUnixNanoNullableArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringUnixNullableRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringUnixNullableArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringUnixNullableArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringUnixSecondsRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringUnixSecondsArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringUnixSecondsArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringUnixSecondsNullableRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringUnixSecondsNullableArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}
func encodeTestResponseStringUnixSecondsNullableArrayArrayRequest(
	req string,
	r *http.Request,
) error {
	const contentType = "application/json"
	e := jx.GetEncoder()
	{
		e.Str(req)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), contentType)
	return nil
}

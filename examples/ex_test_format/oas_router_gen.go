// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/test_"
			if l := len("/test_"); len(elem) >= l && elem[0:l] == "/test_" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'q': // Prefix: "query_parameter"
				if l := len("query_parameter"); len(elem) >= l && elem[0:l] == "query_parameter" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "POST":
						s.handleTestQueryParameterRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "POST")
					}

					return
				}
			case 'r': // Prefix: "re"
				if l := len("re"); len(elem) >= l && elem[0:l] == "re" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'q': // Prefix: "quest_"
					if l := len("quest_"); len(elem) >= l && elem[0:l] == "quest_" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'A': // Prefix: "Any"
						if l := len("Any"); len(elem) >= l && elem[0:l] == "Any" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleTestRequestAnyRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					case 'E': // Prefix: "EmptyStruct"
						if l := len("EmptyStruct"); len(elem) >= l && elem[0:l] == "EmptyStruct" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleTestRequestEmptyStructRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					case 'F': // Prefix: "FormatTest"
						if l := len("FormatTest"); len(elem) >= l && elem[0:l] == "FormatTest" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleTestRequestFormatTestRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					case 'b': // Prefix: "boolean"
						if l := len("boolean"); len(elem) >= l && elem[0:l] == "boolean" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "POST":
								s.handleTestRequestBooleanRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
						switch elem[0] {
						case '_': // Prefix: "_"
							if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "array"
								if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleTestRequestBooleanArrayRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleTestRequestBooleanArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
								}
							case 'n': // Prefix: "nullable"
								if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleTestRequestBooleanNullableRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestBooleanNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleTestRequestBooleanNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
									}
								}
							}
						}
					case 'i': // Prefix: "integer"
						if l := len("integer"); len(elem) >= l && elem[0:l] == "integer" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "POST":
								s.handleTestRequestIntegerRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
						switch elem[0] {
						case '_': // Prefix: "_"
							if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "array"
								if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleTestRequestIntegerArrayRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleTestRequestIntegerArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
								}
							case 'i': // Prefix: "int"
								if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case '1': // Prefix: "16"
									if l := len("16"); len(elem) >= l && elem[0:l] == "16" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestIntegerInt16Request([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestIntegerInt16ArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestIntegerInt16ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestIntegerInt16NullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestIntegerInt16NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestIntegerInt16NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											}
										}
									}
								case '3': // Prefix: "32"
									if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestIntegerInt32Request([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestIntegerInt32ArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestIntegerInt32ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestIntegerInt32NullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestIntegerInt32NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestIntegerInt32NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											}
										}
									}
								case '6': // Prefix: "64"
									if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestIntegerInt64Request([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestIntegerInt64ArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestIntegerInt64ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestIntegerInt64NullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestIntegerInt64NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestIntegerInt64NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											}
										}
									}
								case '8': // Prefix: "8"
									if l := len("8"); len(elem) >= l && elem[0:l] == "8" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestIntegerInt8Request([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestIntegerInt8ArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestIntegerInt8ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestIntegerInt8NullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestIntegerInt8NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestIntegerInt8NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											}
										}
									}
								}
							case 'n': // Prefix: "nullable"
								if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleTestRequestIntegerNullableRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestIntegerNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleTestRequestIntegerNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
									}
								}
							case 'u': // Prefix: "u"
								if l := len("u"); len(elem) >= l && elem[0:l] == "u" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'i': // Prefix: "int"
									if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestIntegerUintRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '1': // Prefix: "16"
										if l := len("16"); len(elem) >= l && elem[0:l] == "16" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestIntegerUint16Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestIntegerUint16ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestIntegerUint16ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestIntegerUint16NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestIntegerUint16NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestIntegerUint16NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												}
											}
										}
									case '3': // Prefix: "32"
										if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestIntegerUint32Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestIntegerUint32ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestIntegerUint32ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestIntegerUint32NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestIntegerUint32NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestIntegerUint32NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												}
											}
										}
									case '6': // Prefix: "64"
										if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestIntegerUint64Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestIntegerUint64ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestIntegerUint64ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestIntegerUint64NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestIntegerUint64NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestIntegerUint64NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												}
											}
										}
									case '8': // Prefix: "8"
										if l := len("8"); len(elem) >= l && elem[0:l] == "8" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestIntegerUint8Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestIntegerUint8ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestIntegerUint8ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestIntegerUint8NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestIntegerUint8NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestIntegerUint8NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												}
											}
										}
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestIntegerUintArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestIntegerUintArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestIntegerUintNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestIntegerUintNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestIntegerUintNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											}
										}
									}
								case 'n': // Prefix: "nix"
									if l := len("nix"); len(elem) >= l && elem[0:l] == "nix" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestIntegerUnixRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '-': // Prefix: "-"
										if l := len("-"); len(elem) >= l && elem[0:l] == "-" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'm': // Prefix: "mi"
											if l := len("mi"); len(elem) >= l && elem[0:l] == "mi" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'c': // Prefix: "cro"
												if l := len("cro"); len(elem) >= l && elem[0:l] == "cro" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestIntegerUnixMicroRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_"
													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"
														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestIntegerUnixMicroArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestIntegerUnixMicroArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
														}
													case 'n': // Prefix: "nullable"
														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestIntegerUnixMicroNullableRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch r.Method {
																case "POST":
																	s.handleTestRequestIntegerUnixMicroNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
															switch elem[0] {
															case '_': // Prefix: "_array"
																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch r.Method {
																	case "POST":
																		s.handleTestRequestIntegerUnixMicroNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																	default:
																		s.notAllowed(w, r, "POST")
																	}

																	return
																}
															}
														}
													}
												}
											case 'l': // Prefix: "lli"
												if l := len("lli"); len(elem) >= l && elem[0:l] == "lli" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestIntegerUnixMilliRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_"
													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"
														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestIntegerUnixMilliArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestIntegerUnixMilliArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
														}
													case 'n': // Prefix: "nullable"
														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestIntegerUnixMilliNullableRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch r.Method {
																case "POST":
																	s.handleTestRequestIntegerUnixMilliNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
															switch elem[0] {
															case '_': // Prefix: "_array"
																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch r.Method {
																	case "POST":
																		s.handleTestRequestIntegerUnixMilliNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																	default:
																		s.notAllowed(w, r, "POST")
																	}

																	return
																}
															}
														}
													}
												}
											}
										case 'n': // Prefix: "nano"
											if l := len("nano"); len(elem) >= l && elem[0:l] == "nano" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestIntegerUnixNanoRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestIntegerUnixNanoArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestIntegerUnixNanoArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestIntegerUnixNanoNullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestIntegerUnixNanoNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestIntegerUnixNanoNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
														}
													}
												}
											}
										case 's': // Prefix: "seconds"
											if l := len("seconds"); len(elem) >= l && elem[0:l] == "seconds" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestIntegerUnixSecondsRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestIntegerUnixSecondsArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestIntegerUnixSecondsArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestIntegerUnixSecondsNullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestIntegerUnixSecondsNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestIntegerUnixSecondsNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
														}
													}
												}
											}
										}
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestIntegerUnixArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestIntegerUnixArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestIntegerUnixNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestIntegerUnixNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestIntegerUnixNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											}
										}
									}
								}
							}
						}
					case 'n': // Prefix: "nu"
						if l := len("nu"); len(elem) >= l && elem[0:l] == "nu" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'l': // Prefix: "ll"
							if l := len("ll"); len(elem) >= l && elem[0:l] == "ll" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "POST":
									s.handleTestRequestNullRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestNullArrayRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleTestRequestNullArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestNullNullableRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestNullNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "POST":
													s.handleTestRequestNullNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
										}
									}
								}
							}
						case 'm': // Prefix: "mber"
							if l := len("mber"); len(elem) >= l && elem[0:l] == "mber" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "POST":
									s.handleTestRequestNumberRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestNumberArrayRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleTestRequestNumberArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
									}
								case 'd': // Prefix: "double"
									if l := len("double"); len(elem) >= l && elem[0:l] == "double" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestNumberDoubleRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestNumberDoubleArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestNumberDoubleArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestNumberDoubleNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestNumberDoubleNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestNumberDoubleNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											}
										}
									}
								case 'f': // Prefix: "float"
									if l := len("float"); len(elem) >= l && elem[0:l] == "float" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestNumberFloatRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestNumberFloatArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestNumberFloatArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestNumberFloatNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestNumberFloatNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestNumberFloatNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											}
										}
									}
								case 'i': // Prefix: "int"
									if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '3': // Prefix: "32"
										if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestNumberInt32Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestNumberInt32ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestNumberInt32ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestNumberInt32NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestNumberInt32NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestNumberInt32NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												}
											}
										}
									case '6': // Prefix: "64"
										if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestNumberInt64Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestNumberInt64ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestNumberInt64ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestNumberInt64NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestNumberInt64NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestNumberInt64NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												}
											}
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestNumberNullableRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestNumberNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "POST":
													s.handleTestRequestNumberNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
										}
									}
								}
							}
						}
					case 'r': // Prefix: "required_"
						if l := len("required_"); len(elem) >= l && elem[0:l] == "required_" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'A': // Prefix: "Any"
							if l := len("Any"); len(elem) >= l && elem[0:l] == "Any" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleTestRequestRequiredAnyRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
						case 'E': // Prefix: "EmptyStruct"
							if l := len("EmptyStruct"); len(elem) >= l && elem[0:l] == "EmptyStruct" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleTestRequestRequiredEmptyStructRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
						case 'F': // Prefix: "FormatTest"
							if l := len("FormatTest"); len(elem) >= l && elem[0:l] == "FormatTest" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleTestRequestRequiredFormatTestRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
						case 'b': // Prefix: "boolean"
							if l := len("boolean"); len(elem) >= l && elem[0:l] == "boolean" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "POST":
									s.handleTestRequestRequiredBooleanRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestRequiredBooleanArrayRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredBooleanArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestRequiredBooleanNullableRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredBooleanNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredBooleanNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
										}
									}
								}
							}
						case 'i': // Prefix: "integer"
							if l := len("integer"); len(elem) >= l && elem[0:l] == "integer" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "POST":
									s.handleTestRequestRequiredIntegerRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestRequiredIntegerArrayRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredIntegerArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
									}
								case 'i': // Prefix: "int"
									if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '1': // Prefix: "16"
										if l := len("16"); len(elem) >= l && elem[0:l] == "16" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredIntegerInt16Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredIntegerInt16ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredIntegerInt16ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredIntegerInt16NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredIntegerInt16NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredIntegerInt16NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												}
											}
										}
									case '3': // Prefix: "32"
										if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredIntegerInt32Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredIntegerInt32ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredIntegerInt32ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredIntegerInt32NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredIntegerInt32NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredIntegerInt32NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												}
											}
										}
									case '6': // Prefix: "64"
										if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredIntegerInt64Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredIntegerInt64ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredIntegerInt64ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredIntegerInt64NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredIntegerInt64NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredIntegerInt64NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												}
											}
										}
									case '8': // Prefix: "8"
										if l := len("8"); len(elem) >= l && elem[0:l] == "8" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredIntegerInt8Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredIntegerInt8ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredIntegerInt8ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredIntegerInt8NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredIntegerInt8NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredIntegerInt8NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												}
											}
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestRequiredIntegerNullableRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredIntegerNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredIntegerNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
										}
									}
								case 'u': // Prefix: "u"
									if l := len("u"); len(elem) >= l && elem[0:l] == "u" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'i': // Prefix: "int"
										if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredIntegerUintRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '1': // Prefix: "16"
											if l := len("16"); len(elem) >= l && elem[0:l] == "16" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredIntegerUint16Request([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredIntegerUint16ArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredIntegerUint16ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredIntegerUint16NullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredIntegerUint16NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredIntegerUint16NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
														}
													}
												}
											}
										case '3': // Prefix: "32"
											if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredIntegerUint32Request([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredIntegerUint32ArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredIntegerUint32ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredIntegerUint32NullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredIntegerUint32NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredIntegerUint32NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
														}
													}
												}
											}
										case '6': // Prefix: "64"
											if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredIntegerUint64Request([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredIntegerUint64ArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredIntegerUint64ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredIntegerUint64NullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredIntegerUint64NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredIntegerUint64NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
														}
													}
												}
											}
										case '8': // Prefix: "8"
											if l := len("8"); len(elem) >= l && elem[0:l] == "8" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredIntegerUint8Request([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredIntegerUint8ArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredIntegerUint8ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredIntegerUint8NullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredIntegerUint8NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredIntegerUint8NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
														}
													}
												}
											}
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredIntegerUintArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredIntegerUintArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredIntegerUintNullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredIntegerUintNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredIntegerUintNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												}
											}
										}
									case 'n': // Prefix: "nix"
										if l := len("nix"); len(elem) >= l && elem[0:l] == "nix" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredIntegerUnixRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '-': // Prefix: "-"
											if l := len("-"); len(elem) >= l && elem[0:l] == "-" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'm': // Prefix: "mi"
												if l := len("mi"); len(elem) >= l && elem[0:l] == "mi" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'c': // Prefix: "cro"
													if l := len("cro"); len(elem) >= l && elem[0:l] == "cro" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredIntegerUnixMicroRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_"
														if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															break
														}
														switch elem[0] {
														case 'a': // Prefix: "array"
															if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredIntegerUnixMicroArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
															switch elem[0] {
															case '_': // Prefix: "_array"
																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch r.Method {
																	case "POST":
																		s.handleTestRequestRequiredIntegerUnixMicroArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																	default:
																		s.notAllowed(w, r, "POST")
																	}

																	return
																}
															}
														case 'n': // Prefix: "nullable"
															if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredIntegerUnixMicroNullableRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
															switch elem[0] {
															case '_': // Prefix: "_array"
																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	switch r.Method {
																	case "POST":
																		s.handleTestRequestRequiredIntegerUnixMicroNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
																	default:
																		s.notAllowed(w, r, "POST")
																	}

																	return
																}
																switch elem[0] {
																case '_': // Prefix: "_array"
																	if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																		elem = elem[l:]
																	} else {
																		break
																	}

																	if len(elem) == 0 {
																		// Leaf node.
																		switch r.Method {
																		case "POST":
																			s.handleTestRequestRequiredIntegerUnixMicroNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																		default:
																			s.notAllowed(w, r, "POST")
																		}

																		return
																	}
																}
															}
														}
													}
												case 'l': // Prefix: "lli"
													if l := len("lli"); len(elem) >= l && elem[0:l] == "lli" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredIntegerUnixMilliRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_"
														if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															break
														}
														switch elem[0] {
														case 'a': // Prefix: "array"
															if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredIntegerUnixMilliArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
															switch elem[0] {
															case '_': // Prefix: "_array"
																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch r.Method {
																	case "POST":
																		s.handleTestRequestRequiredIntegerUnixMilliArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																	default:
																		s.notAllowed(w, r, "POST")
																	}

																	return
																}
															}
														case 'n': // Prefix: "nullable"
															if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredIntegerUnixMilliNullableRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
															switch elem[0] {
															case '_': // Prefix: "_array"
																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	switch r.Method {
																	case "POST":
																		s.handleTestRequestRequiredIntegerUnixMilliNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
																	default:
																		s.notAllowed(w, r, "POST")
																	}

																	return
																}
																switch elem[0] {
																case '_': // Prefix: "_array"
																	if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																		elem = elem[l:]
																	} else {
																		break
																	}

																	if len(elem) == 0 {
																		// Leaf node.
																		switch r.Method {
																		case "POST":
																			s.handleTestRequestRequiredIntegerUnixMilliNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																		default:
																			s.notAllowed(w, r, "POST")
																		}

																		return
																	}
																}
															}
														}
													}
												}
											case 'n': // Prefix: "nano"
												if l := len("nano"); len(elem) >= l && elem[0:l] == "nano" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredIntegerUnixNanoRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_"
													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"
														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredIntegerUnixNanoArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredIntegerUnixNanoArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
														}
													case 'n': // Prefix: "nullable"
														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredIntegerUnixNanoNullableRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredIntegerUnixNanoNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
															switch elem[0] {
															case '_': // Prefix: "_array"
																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch r.Method {
																	case "POST":
																		s.handleTestRequestRequiredIntegerUnixNanoNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																	default:
																		s.notAllowed(w, r, "POST")
																	}

																	return
																}
															}
														}
													}
												}
											case 's': // Prefix: "seconds"
												if l := len("seconds"); len(elem) >= l && elem[0:l] == "seconds" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredIntegerUnixSecondsRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_"
													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"
														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredIntegerUnixSecondsArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredIntegerUnixSecondsArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
														}
													case 'n': // Prefix: "nullable"
														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredIntegerUnixSecondsNullableRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredIntegerUnixSecondsNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
															switch elem[0] {
															case '_': // Prefix: "_array"
																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch r.Method {
																	case "POST":
																		s.handleTestRequestRequiredIntegerUnixSecondsNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																	default:
																		s.notAllowed(w, r, "POST")
																	}

																	return
																}
															}
														}
													}
												}
											}
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredIntegerUnixArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredIntegerUnixArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredIntegerUnixNullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredIntegerUnixNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredIntegerUnixNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												}
											}
										}
									}
								}
							}
						case 'n': // Prefix: "nu"
							if l := len("nu"); len(elem) >= l && elem[0:l] == "nu" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'l': // Prefix: "ll"
								if l := len("ll"); len(elem) >= l && elem[0:l] == "ll" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleTestRequestRequiredNullRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredNullArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredNullArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredNullNullableRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredNullNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredNullNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										}
									}
								}
							case 'm': // Prefix: "mber"
								if l := len("mber"); len(elem) >= l && elem[0:l] == "mber" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleTestRequestRequiredNumberRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredNumberArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredNumberArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
										}
									case 'd': // Prefix: "double"
										if l := len("double"); len(elem) >= l && elem[0:l] == "double" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredNumberDoubleRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredNumberDoubleArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredNumberDoubleArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredNumberDoubleNullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredNumberDoubleNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredNumberDoubleNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												}
											}
										}
									case 'f': // Prefix: "float"
										if l := len("float"); len(elem) >= l && elem[0:l] == "float" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredNumberFloatRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredNumberFloatArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredNumberFloatArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredNumberFloatNullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredNumberFloatNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredNumberFloatNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												}
											}
										}
									case 'i': // Prefix: "int"
										if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '3': // Prefix: "32"
											if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredNumberInt32Request([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredNumberInt32ArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredNumberInt32ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredNumberInt32NullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredNumberInt32NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredNumberInt32NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
														}
													}
												}
											}
										case '6': // Prefix: "64"
											if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredNumberInt64Request([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredNumberInt64ArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredNumberInt64ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredNumberInt64NullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredNumberInt64NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredNumberInt64NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
														}
													}
												}
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredNumberNullableRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredNumberNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredNumberNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										}
									}
								}
							}
						case 's': // Prefix: "string"
							if l := len("string"); len(elem) >= l && elem[0:l] == "string" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "POST":
									s.handleTestRequestRequiredStringRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestRequiredStringArrayRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredStringArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
									}
								case 'b': // Prefix: "b"
									if l := len("b"); len(elem) >= l && elem[0:l] == "b" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "ase64"
										if l := len("ase64"); len(elem) >= l && elem[0:l] == "ase64" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredStringBase64Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringBase64ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringBase64ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringBase64NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringBase64NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringBase64NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												}
											}
										}
									case 'i': // Prefix: "inary"
										if l := len("inary"); len(elem) >= l && elem[0:l] == "inary" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredStringBinaryRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringBinaryArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringBinaryArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringBinaryNullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringBinaryNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringBinaryNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												}
											}
										}
									case 'y': // Prefix: "yte"
										if l := len("yte"); len(elem) >= l && elem[0:l] == "yte" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredStringByteRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringByteArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringByteArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringByteNullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringByteNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringByteNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												}
											}
										}
									}
								case 'd': // Prefix: "d"
									if l := len("d"); len(elem) >= l && elem[0:l] == "d" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "ate"
										if l := len("ate"); len(elem) >= l && elem[0:l] == "ate" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredStringDateRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '-': // Prefix: "-time"
											if l := len("-time"); len(elem) >= l && elem[0:l] == "-time" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredStringDateTimeRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringDateTimeArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringDateTimeArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringDateTimeNullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringDateTimeNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredStringDateTimeNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
														}
													}
												}
											}
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringDateArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringDateArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringDateNullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringDateNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringDateNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												}
											}
										}
									case 'u': // Prefix: "uration"
										if l := len("uration"); len(elem) >= l && elem[0:l] == "uration" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredStringDurationRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringDurationArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringDurationArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringDurationNullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringDurationNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringDurationNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												}
											}
										}
									}
								case 'e': // Prefix: "email"
									if l := len("email"); len(elem) >= l && elem[0:l] == "email" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestRequiredStringEmailRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredStringEmailArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringEmailArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredStringEmailNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringEmailNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringEmailNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											}
										}
									}
								case 'f': // Prefix: "float"
									if l := len("float"); len(elem) >= l && elem[0:l] == "float" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '3': // Prefix: "32"
										if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredStringFloat32Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringFloat32ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringFloat32ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringFloat32NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringFloat32NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringFloat32NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												}
											}
										}
									case '6': // Prefix: "64"
										if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredStringFloat64Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringFloat64ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringFloat64ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringFloat64NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringFloat64NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringFloat64NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												}
											}
										}
									}
								case 'h': // Prefix: "hostname"
									if l := len("hostname"); len(elem) >= l && elem[0:l] == "hostname" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestRequiredStringHostnameRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredStringHostnameArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringHostnameArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredStringHostnameNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringHostnameNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringHostnameNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											}
										}
									}
								case 'i': // Prefix: "i"
									if l := len("i"); len(elem) >= l && elem[0:l] == "i" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'n': // Prefix: "nt"
										if l := len("nt"); len(elem) >= l && elem[0:l] == "nt" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredStringIntRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '1': // Prefix: "16"
											if l := len("16"); len(elem) >= l && elem[0:l] == "16" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredStringInt16Request([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringInt16ArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringInt16ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringInt16NullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringInt16NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredStringInt16NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
														}
													}
												}
											}
										case '3': // Prefix: "32"
											if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredStringInt32Request([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringInt32ArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringInt32ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringInt32NullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringInt32NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredStringInt32NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
														}
													}
												}
											}
										case '6': // Prefix: "64"
											if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredStringInt64Request([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringInt64ArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringInt64ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringInt64NullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringInt64NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredStringInt64NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
														}
													}
												}
											}
										case '8': // Prefix: "8"
											if l := len("8"); len(elem) >= l && elem[0:l] == "8" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredStringInt8Request([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringInt8ArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringInt8ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringInt8NullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringInt8NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredStringInt8NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
														}
													}
												}
											}
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringIntArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringIntArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringIntNullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringIntNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringIntNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												}
											}
										}
									case 'p': // Prefix: "p"
										if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredStringIPRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringIPArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringIPArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringIPNullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringIPNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringIPNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												}
											}
										case 'v': // Prefix: "v"
											if l := len("v"); len(elem) >= l && elem[0:l] == "v" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case '4': // Prefix: "4"
												if l := len("4"); len(elem) >= l && elem[0:l] == "4" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringIpv4Request([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_"
													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"
														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringIpv4ArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredStringIpv4ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
														}
													case 'n': // Prefix: "nullable"
														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringIpv4NullableRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredStringIpv4NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
															switch elem[0] {
															case '_': // Prefix: "_array"
																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch r.Method {
																	case "POST":
																		s.handleTestRequestRequiredStringIpv4NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																	default:
																		s.notAllowed(w, r, "POST")
																	}

																	return
																}
															}
														}
													}
												}
											case '6': // Prefix: "6"
												if l := len("6"); len(elem) >= l && elem[0:l] == "6" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringIpv6Request([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_"
													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"
														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringIpv6ArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredStringIpv6ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
														}
													case 'n': // Prefix: "nullable"
														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringIpv6NullableRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredStringIpv6NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
															switch elem[0] {
															case '_': // Prefix: "_array"
																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch r.Method {
																	case "POST":
																		s.handleTestRequestRequiredStringIpv6NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																	default:
																		s.notAllowed(w, r, "POST")
																	}

																	return
																}
															}
														}
													}
												}
											}
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestRequiredStringNullableRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredStringNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredStringNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
										}
									}
								case 'p': // Prefix: "password"
									if l := len("password"); len(elem) >= l && elem[0:l] == "password" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestRequiredStringPasswordRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredStringPasswordArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringPasswordArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredStringPasswordNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringPasswordNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringPasswordNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											}
										}
									}
								case 't': // Prefix: "time"
									if l := len("time"); len(elem) >= l && elem[0:l] == "time" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestRequiredStringTimeRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredStringTimeArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringTimeArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredStringTimeNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringTimeNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringTimeNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											}
										}
									}
								case 'u': // Prefix: "u"
									if l := len("u"); len(elem) >= l && elem[0:l] == "u" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'i': // Prefix: "int"
										if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredStringUintRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '1': // Prefix: "16"
											if l := len("16"); len(elem) >= l && elem[0:l] == "16" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredStringUint16Request([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringUint16ArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringUint16ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringUint16NullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringUint16NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredStringUint16NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
														}
													}
												}
											}
										case '3': // Prefix: "32"
											if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredStringUint32Request([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringUint32ArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringUint32ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringUint32NullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringUint32NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredStringUint32NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
														}
													}
												}
											}
										case '6': // Prefix: "64"
											if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredStringUint64Request([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringUint64ArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringUint64ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringUint64NullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringUint64NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredStringUint64NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
														}
													}
												}
											}
										case '8': // Prefix: "8"
											if l := len("8"); len(elem) >= l && elem[0:l] == "8" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredStringUint8Request([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringUint8ArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringUint8ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringUint8NullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringUint8NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredStringUint8NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
														}
													}
												}
											}
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringUintArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringUintArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringUintNullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringUintNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringUintNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												}
											}
										}
									case 'n': // Prefix: "nix"
										if l := len("nix"); len(elem) >= l && elem[0:l] == "nix" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredStringUnixRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '-': // Prefix: "-"
											if l := len("-"); len(elem) >= l && elem[0:l] == "-" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'm': // Prefix: "mi"
												if l := len("mi"); len(elem) >= l && elem[0:l] == "mi" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'c': // Prefix: "cro"
													if l := len("cro"); len(elem) >= l && elem[0:l] == "cro" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringUnixMicroRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_"
														if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															break
														}
														switch elem[0] {
														case 'a': // Prefix: "array"
															if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredStringUnixMicroArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
															switch elem[0] {
															case '_': // Prefix: "_array"
																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch r.Method {
																	case "POST":
																		s.handleTestRequestRequiredStringUnixMicroArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																	default:
																		s.notAllowed(w, r, "POST")
																	}

																	return
																}
															}
														case 'n': // Prefix: "nullable"
															if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredStringUnixMicroNullableRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
															switch elem[0] {
															case '_': // Prefix: "_array"
																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	switch r.Method {
																	case "POST":
																		s.handleTestRequestRequiredStringUnixMicroNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
																	default:
																		s.notAllowed(w, r, "POST")
																	}

																	return
																}
																switch elem[0] {
																case '_': // Prefix: "_array"
																	if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																		elem = elem[l:]
																	} else {
																		break
																	}

																	if len(elem) == 0 {
																		// Leaf node.
																		switch r.Method {
																		case "POST":
																			s.handleTestRequestRequiredStringUnixMicroNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																		default:
																			s.notAllowed(w, r, "POST")
																		}

																		return
																	}
																}
															}
														}
													}
												case 'l': // Prefix: "lli"
													if l := len("lli"); len(elem) >= l && elem[0:l] == "lli" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringUnixMilliRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_"
														if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															break
														}
														switch elem[0] {
														case 'a': // Prefix: "array"
															if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredStringUnixMilliArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
															switch elem[0] {
															case '_': // Prefix: "_array"
																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch r.Method {
																	case "POST":
																		s.handleTestRequestRequiredStringUnixMilliArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																	default:
																		s.notAllowed(w, r, "POST")
																	}

																	return
																}
															}
														case 'n': // Prefix: "nullable"
															if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredStringUnixMilliNullableRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
															switch elem[0] {
															case '_': // Prefix: "_array"
																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	switch r.Method {
																	case "POST":
																		s.handleTestRequestRequiredStringUnixMilliNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
																	default:
																		s.notAllowed(w, r, "POST")
																	}

																	return
																}
																switch elem[0] {
																case '_': // Prefix: "_array"
																	if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																		elem = elem[l:]
																	} else {
																		break
																	}

																	if len(elem) == 0 {
																		// Leaf node.
																		switch r.Method {
																		case "POST":
																			s.handleTestRequestRequiredStringUnixMilliNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																		default:
																			s.notAllowed(w, r, "POST")
																		}

																		return
																	}
																}
															}
														}
													}
												}
											case 'n': // Prefix: "nano"
												if l := len("nano"); len(elem) >= l && elem[0:l] == "nano" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringUnixNanoRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_"
													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"
														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringUnixNanoArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredStringUnixNanoArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
														}
													case 'n': // Prefix: "nullable"
														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringUnixNanoNullableRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredStringUnixNanoNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
															switch elem[0] {
															case '_': // Prefix: "_array"
																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch r.Method {
																	case "POST":
																		s.handleTestRequestRequiredStringUnixNanoNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																	default:
																		s.notAllowed(w, r, "POST")
																	}

																	return
																}
															}
														}
													}
												}
											case 's': // Prefix: "seconds"
												if l := len("seconds"); len(elem) >= l && elem[0:l] == "seconds" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringUnixSecondsRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_"
													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"
														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringUnixSecondsArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredStringUnixSecondsArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
														}
													case 'n': // Prefix: "nullable"
														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringUnixSecondsNullableRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredStringUnixSecondsNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
															switch elem[0] {
															case '_': // Prefix: "_array"
																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch r.Method {
																	case "POST":
																		s.handleTestRequestRequiredStringUnixSecondsNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																	default:
																		s.notAllowed(w, r, "POST")
																	}

																	return
																}
															}
														}
													}
												}
											}
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringUnixArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringUnixArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringUnixNullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringUnixNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringUnixNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												}
											}
										}
									case 'r': // Prefix: "ri"
										if l := len("ri"); len(elem) >= l && elem[0:l] == "ri" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredStringURIRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringURIArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringURIArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringURINullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringURINullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringURINullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												}
											}
										}
									case 'u': // Prefix: "uid"
										if l := len("uid"); len(elem) >= l && elem[0:l] == "uid" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredStringUUIDRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringUUIDArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringUUIDArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringUUIDNullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringUUIDNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringUUIDNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												}
											}
										}
									}
								}
							}
						}
					case 's': // Prefix: "string"
						if l := len("string"); len(elem) >= l && elem[0:l] == "string" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "POST":
								s.handleTestRequestStringRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
						switch elem[0] {
						case '_': // Prefix: "_"
							if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "array"
								if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleTestRequestStringArrayRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleTestRequestStringArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
								}
							case 'b': // Prefix: "b"
								if l := len("b"); len(elem) >= l && elem[0:l] == "b" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "ase64"
									if l := len("ase64"); len(elem) >= l && elem[0:l] == "ase64" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestStringBase64Request([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringBase64ArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestStringBase64ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringBase64NullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringBase64NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestStringBase64NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											}
										}
									}
								case 'i': // Prefix: "inary"
									if l := len("inary"); len(elem) >= l && elem[0:l] == "inary" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestStringBinaryRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringBinaryArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestStringBinaryArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringBinaryNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringBinaryNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestStringBinaryNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											}
										}
									}
								case 'y': // Prefix: "yte"
									if l := len("yte"); len(elem) >= l && elem[0:l] == "yte" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestStringByteRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringByteArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestStringByteArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringByteNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringByteNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestStringByteNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											}
										}
									}
								}
							case 'd': // Prefix: "d"
								if l := len("d"); len(elem) >= l && elem[0:l] == "d" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "ate"
									if l := len("ate"); len(elem) >= l && elem[0:l] == "ate" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestStringDateRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '-': // Prefix: "-time"
										if l := len("-time"); len(elem) >= l && elem[0:l] == "-time" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestStringDateTimeRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringDateTimeArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestStringDateTimeArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringDateTimeNullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestStringDateTimeNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestStringDateTimeNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												}
											}
										}
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringDateArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestStringDateArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringDateNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringDateNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestStringDateNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											}
										}
									}
								case 'u': // Prefix: "uration"
									if l := len("uration"); len(elem) >= l && elem[0:l] == "uration" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestStringDurationRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringDurationArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestStringDurationArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringDurationNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringDurationNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestStringDurationNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											}
										}
									}
								}
							case 'e': // Prefix: "email"
								if l := len("email"); len(elem) >= l && elem[0:l] == "email" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleTestRequestStringEmailRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestStringEmailArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "POST":
													s.handleTestRequestStringEmailArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestStringEmailNullableRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringEmailNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestStringEmailNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										}
									}
								}
							case 'f': // Prefix: "float"
								if l := len("float"); len(elem) >= l && elem[0:l] == "float" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case '3': // Prefix: "32"
									if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestStringFloat32Request([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringFloat32ArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestStringFloat32ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringFloat32NullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringFloat32NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestStringFloat32NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											}
										}
									}
								case '6': // Prefix: "64"
									if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestStringFloat64Request([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringFloat64ArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestStringFloat64ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringFloat64NullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringFloat64NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestStringFloat64NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											}
										}
									}
								}
							case 'h': // Prefix: "hostname"
								if l := len("hostname"); len(elem) >= l && elem[0:l] == "hostname" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleTestRequestStringHostnameRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestStringHostnameArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "POST":
													s.handleTestRequestStringHostnameArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestStringHostnameNullableRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringHostnameNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestStringHostnameNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										}
									}
								}
							case 'i': // Prefix: "i"
								if l := len("i"); len(elem) >= l && elem[0:l] == "i" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'n': // Prefix: "nt"
									if l := len("nt"); len(elem) >= l && elem[0:l] == "nt" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestStringIntRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '1': // Prefix: "16"
										if l := len("16"); len(elem) >= l && elem[0:l] == "16" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestStringInt16Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringInt16ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestStringInt16ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringInt16NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestStringInt16NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestStringInt16NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												}
											}
										}
									case '3': // Prefix: "32"
										if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestStringInt32Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringInt32ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestStringInt32ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringInt32NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestStringInt32NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestStringInt32NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												}
											}
										}
									case '6': // Prefix: "64"
										if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestStringInt64Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringInt64ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestStringInt64ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringInt64NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestStringInt64NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestStringInt64NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												}
											}
										}
									case '8': // Prefix: "8"
										if l := len("8"); len(elem) >= l && elem[0:l] == "8" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestStringInt8Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringInt8ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestStringInt8ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringInt8NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestStringInt8NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestStringInt8NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												}
											}
										}
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringIntArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestStringIntArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringIntNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringIntNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestStringIntNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											}
										}
									}
								case 'p': // Prefix: "p"
									if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestStringIPRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringIPArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestStringIPArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringIPNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringIPNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestStringIPNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											}
										}
									case 'v': // Prefix: "v"
										if l := len("v"); len(elem) >= l && elem[0:l] == "v" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '4': // Prefix: "4"
											if l := len("4"); len(elem) >= l && elem[0:l] == "4" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringIpv4Request([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestStringIpv4ArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestStringIpv4ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestStringIpv4NullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestStringIpv4NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestStringIpv4NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
														}
													}
												}
											}
										case '6': // Prefix: "6"
											if l := len("6"); len(elem) >= l && elem[0:l] == "6" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringIpv6Request([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestStringIpv6ArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestStringIpv6ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestStringIpv6NullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestStringIpv6NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestStringIpv6NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
														}
													}
												}
											}
										}
									}
								}
							case 'n': // Prefix: "nullable"
								if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleTestRequestStringNullableRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestStringNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleTestRequestStringNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
									}
								}
							case 'p': // Prefix: "password"
								if l := len("password"); len(elem) >= l && elem[0:l] == "password" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleTestRequestStringPasswordRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestStringPasswordArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "POST":
													s.handleTestRequestStringPasswordArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestStringPasswordNullableRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringPasswordNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestStringPasswordNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										}
									}
								}
							case 't': // Prefix: "time"
								if l := len("time"); len(elem) >= l && elem[0:l] == "time" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleTestRequestStringTimeRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestStringTimeArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "POST":
													s.handleTestRequestStringTimeArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestStringTimeNullableRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringTimeNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestStringTimeNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										}
									}
								}
							case 'u': // Prefix: "u"
								if l := len("u"); len(elem) >= l && elem[0:l] == "u" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'i': // Prefix: "int"
									if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestStringUintRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '1': // Prefix: "16"
										if l := len("16"); len(elem) >= l && elem[0:l] == "16" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestStringUint16Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringUint16ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestStringUint16ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringUint16NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestStringUint16NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestStringUint16NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												}
											}
										}
									case '3': // Prefix: "32"
										if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestStringUint32Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringUint32ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestStringUint32ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringUint32NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestStringUint32NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestStringUint32NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												}
											}
										}
									case '6': // Prefix: "64"
										if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestStringUint64Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringUint64ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestStringUint64ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringUint64NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestStringUint64NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestStringUint64NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												}
											}
										}
									case '8': // Prefix: "8"
										if l := len("8"); len(elem) >= l && elem[0:l] == "8" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestStringUint8Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringUint8ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestStringUint8ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringUint8NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestStringUint8NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestStringUint8NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												}
											}
										}
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringUintArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestStringUintArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringUintNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringUintNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestStringUintNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											}
										}
									}
								case 'n': // Prefix: "nix"
									if l := len("nix"); len(elem) >= l && elem[0:l] == "nix" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestStringUnixRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '-': // Prefix: "-"
										if l := len("-"); len(elem) >= l && elem[0:l] == "-" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'm': // Prefix: "mi"
											if l := len("mi"); len(elem) >= l && elem[0:l] == "mi" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'c': // Prefix: "cro"
												if l := len("cro"); len(elem) >= l && elem[0:l] == "cro" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringUnixMicroRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_"
													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"
														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestStringUnixMicroArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestStringUnixMicroArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
														}
													case 'n': // Prefix: "nullable"
														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestStringUnixMicroNullableRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch r.Method {
																case "POST":
																	s.handleTestRequestStringUnixMicroNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
															switch elem[0] {
															case '_': // Prefix: "_array"
																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch r.Method {
																	case "POST":
																		s.handleTestRequestStringUnixMicroNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																	default:
																		s.notAllowed(w, r, "POST")
																	}

																	return
																}
															}
														}
													}
												}
											case 'l': // Prefix: "lli"
												if l := len("lli"); len(elem) >= l && elem[0:l] == "lli" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringUnixMilliRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_"
													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"
														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestStringUnixMilliArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestStringUnixMilliArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
														}
													case 'n': // Prefix: "nullable"
														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestStringUnixMilliNullableRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch r.Method {
																case "POST":
																	s.handleTestRequestStringUnixMilliNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
															switch elem[0] {
															case '_': // Prefix: "_array"
																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch r.Method {
																	case "POST":
																		s.handleTestRequestStringUnixMilliNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																	default:
																		s.notAllowed(w, r, "POST")
																	}

																	return
																}
															}
														}
													}
												}
											}
										case 'n': // Prefix: "nano"
											if l := len("nano"); len(elem) >= l && elem[0:l] == "nano" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringUnixNanoRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestStringUnixNanoArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestStringUnixNanoArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestStringUnixNanoNullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestStringUnixNanoNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestStringUnixNanoNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
														}
													}
												}
											}
										case 's': // Prefix: "seconds"
											if l := len("seconds"); len(elem) >= l && elem[0:l] == "seconds" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringUnixSecondsRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestStringUnixSecondsArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestStringUnixSecondsArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestStringUnixSecondsNullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestStringUnixSecondsNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestStringUnixSecondsNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
														}
													}
												}
											}
										}
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringUnixArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestStringUnixArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringUnixNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringUnixNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestStringUnixNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											}
										}
									}
								case 'r': // Prefix: "ri"
									if l := len("ri"); len(elem) >= l && elem[0:l] == "ri" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestStringURIRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringURIArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestStringURIArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringURINullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringURINullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestStringURINullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											}
										}
									}
								case 'u': // Prefix: "uid"
									if l := len("uid"); len(elem) >= l && elem[0:l] == "uid" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestStringUUIDRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringUUIDArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestStringUUIDArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringUUIDNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringUUIDNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestStringUUIDNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											}
										}
									}
								}
							}
						}
					}
				case 's': // Prefix: "sponse_"
					if l := len("sponse_"); len(elem) >= l && elem[0:l] == "sponse_" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'A': // Prefix: "Any"
						if l := len("Any"); len(elem) >= l && elem[0:l] == "Any" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleTestResponseAnyRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					case 'E': // Prefix: "EmptyStruct"
						if l := len("EmptyStruct"); len(elem) >= l && elem[0:l] == "EmptyStruct" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleTestResponseEmptyStructRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					case 'F': // Prefix: "FormatTest"
						if l := len("FormatTest"); len(elem) >= l && elem[0:l] == "FormatTest" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleTestResponseFormatTestRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					case 'b': // Prefix: "boolean"
						if l := len("boolean"); len(elem) >= l && elem[0:l] == "boolean" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "POST":
								s.handleTestResponseBooleanRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
						switch elem[0] {
						case '_': // Prefix: "_"
							if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "array"
								if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleTestResponseBooleanArrayRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleTestResponseBooleanArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
								}
							case 'n': // Prefix: "nullable"
								if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleTestResponseBooleanNullableRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseBooleanNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleTestResponseBooleanNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
									}
								}
							}
						}
					case 'i': // Prefix: "integer"
						if l := len("integer"); len(elem) >= l && elem[0:l] == "integer" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "POST":
								s.handleTestResponseIntegerRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
						switch elem[0] {
						case '_': // Prefix: "_"
							if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "array"
								if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleTestResponseIntegerArrayRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleTestResponseIntegerArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
								}
							case 'i': // Prefix: "int"
								if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case '1': // Prefix: "16"
									if l := len("16"); len(elem) >= l && elem[0:l] == "16" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseIntegerInt16Request([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseIntegerInt16ArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestResponseIntegerInt16ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseIntegerInt16NullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseIntegerInt16NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseIntegerInt16NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											}
										}
									}
								case '3': // Prefix: "32"
									if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseIntegerInt32Request([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseIntegerInt32ArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestResponseIntegerInt32ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseIntegerInt32NullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseIntegerInt32NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseIntegerInt32NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											}
										}
									}
								case '6': // Prefix: "64"
									if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseIntegerInt64Request([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseIntegerInt64ArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestResponseIntegerInt64ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseIntegerInt64NullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseIntegerInt64NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseIntegerInt64NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											}
										}
									}
								case '8': // Prefix: "8"
									if l := len("8"); len(elem) >= l && elem[0:l] == "8" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseIntegerInt8Request([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseIntegerInt8ArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestResponseIntegerInt8ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseIntegerInt8NullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseIntegerInt8NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseIntegerInt8NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											}
										}
									}
								}
							case 'n': // Prefix: "nullable"
								if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleTestResponseIntegerNullableRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseIntegerNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleTestResponseIntegerNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
									}
								}
							case 'u': // Prefix: "u"
								if l := len("u"); len(elem) >= l && elem[0:l] == "u" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'i': // Prefix: "int"
									if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseIntegerUintRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '1': // Prefix: "16"
										if l := len("16"); len(elem) >= l && elem[0:l] == "16" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestResponseIntegerUint16Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseIntegerUint16ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseIntegerUint16ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseIntegerUint16NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseIntegerUint16NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestResponseIntegerUint16NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												}
											}
										}
									case '3': // Prefix: "32"
										if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestResponseIntegerUint32Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseIntegerUint32ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseIntegerUint32ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseIntegerUint32NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseIntegerUint32NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestResponseIntegerUint32NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												}
											}
										}
									case '6': // Prefix: "64"
										if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestResponseIntegerUint64Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseIntegerUint64ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseIntegerUint64ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseIntegerUint64NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseIntegerUint64NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestResponseIntegerUint64NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												}
											}
										}
									case '8': // Prefix: "8"
										if l := len("8"); len(elem) >= l && elem[0:l] == "8" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestResponseIntegerUint8Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseIntegerUint8ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseIntegerUint8ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseIntegerUint8NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseIntegerUint8NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestResponseIntegerUint8NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												}
											}
										}
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseIntegerUintArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestResponseIntegerUintArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseIntegerUintNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseIntegerUintNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseIntegerUintNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											}
										}
									}
								case 'n': // Prefix: "nix"
									if l := len("nix"); len(elem) >= l && elem[0:l] == "nix" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseIntegerUnixRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '-': // Prefix: "-"
										if l := len("-"); len(elem) >= l && elem[0:l] == "-" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'm': // Prefix: "mi"
											if l := len("mi"); len(elem) >= l && elem[0:l] == "mi" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'c': // Prefix: "cro"
												if l := len("cro"); len(elem) >= l && elem[0:l] == "cro" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseIntegerUnixMicroRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_"
													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"
														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestResponseIntegerUnixMicroArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestResponseIntegerUnixMicroArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
														}
													case 'n': // Prefix: "nullable"
														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestResponseIntegerUnixMicroNullableRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch r.Method {
																case "POST":
																	s.handleTestResponseIntegerUnixMicroNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
															switch elem[0] {
															case '_': // Prefix: "_array"
																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch r.Method {
																	case "POST":
																		s.handleTestResponseIntegerUnixMicroNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																	default:
																		s.notAllowed(w, r, "POST")
																	}

																	return
																}
															}
														}
													}
												}
											case 'l': // Prefix: "lli"
												if l := len("lli"); len(elem) >= l && elem[0:l] == "lli" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseIntegerUnixMilliRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_"
													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"
														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestResponseIntegerUnixMilliArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestResponseIntegerUnixMilliArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
														}
													case 'n': // Prefix: "nullable"
														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestResponseIntegerUnixMilliNullableRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch r.Method {
																case "POST":
																	s.handleTestResponseIntegerUnixMilliNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
															switch elem[0] {
															case '_': // Prefix: "_array"
																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch r.Method {
																	case "POST":
																		s.handleTestResponseIntegerUnixMilliNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																	default:
																		s.notAllowed(w, r, "POST")
																	}

																	return
																}
															}
														}
													}
												}
											}
										case 'n': // Prefix: "nano"
											if l := len("nano"); len(elem) >= l && elem[0:l] == "nano" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseIntegerUnixNanoRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseIntegerUnixNanoArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestResponseIntegerUnixNanoArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseIntegerUnixNanoNullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestResponseIntegerUnixNanoNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestResponseIntegerUnixNanoNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
														}
													}
												}
											}
										case 's': // Prefix: "seconds"
											if l := len("seconds"); len(elem) >= l && elem[0:l] == "seconds" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseIntegerUnixSecondsRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseIntegerUnixSecondsArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestResponseIntegerUnixSecondsArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseIntegerUnixSecondsNullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestResponseIntegerUnixSecondsNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestResponseIntegerUnixSecondsNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
														}
													}
												}
											}
										}
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseIntegerUnixArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestResponseIntegerUnixArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseIntegerUnixNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseIntegerUnixNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseIntegerUnixNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											}
										}
									}
								}
							}
						}
					case 'n': // Prefix: "nu"
						if l := len("nu"); len(elem) >= l && elem[0:l] == "nu" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'l': // Prefix: "ll"
							if l := len("ll"); len(elem) >= l && elem[0:l] == "ll" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "POST":
									s.handleTestResponseNullRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseNullArrayRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleTestResponseNullArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseNullNullableRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestResponseNullNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "POST":
													s.handleTestResponseNullNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
										}
									}
								}
							}
						case 'm': // Prefix: "mber"
							if l := len("mber"); len(elem) >= l && elem[0:l] == "mber" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "POST":
									s.handleTestResponseNumberRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseNumberArrayRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleTestResponseNumberArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
									}
								case 'd': // Prefix: "double"
									if l := len("double"); len(elem) >= l && elem[0:l] == "double" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseNumberDoubleRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseNumberDoubleArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestResponseNumberDoubleArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseNumberDoubleNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseNumberDoubleNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseNumberDoubleNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											}
										}
									}
								case 'f': // Prefix: "float"
									if l := len("float"); len(elem) >= l && elem[0:l] == "float" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseNumberFloatRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseNumberFloatArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestResponseNumberFloatArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseNumberFloatNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseNumberFloatNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseNumberFloatNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											}
										}
									}
								case 'i': // Prefix: "int"
									if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '3': // Prefix: "32"
										if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestResponseNumberInt32Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseNumberInt32ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseNumberInt32ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseNumberInt32NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseNumberInt32NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestResponseNumberInt32NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												}
											}
										}
									case '6': // Prefix: "64"
										if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestResponseNumberInt64Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseNumberInt64ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseNumberInt64ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseNumberInt64NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseNumberInt64NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestResponseNumberInt64NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												}
											}
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseNumberNullableRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestResponseNumberNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "POST":
													s.handleTestResponseNumberNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
										}
									}
								}
							}
						}
					case 's': // Prefix: "string"
						if l := len("string"); len(elem) >= l && elem[0:l] == "string" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "POST":
								s.handleTestResponseStringRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
						switch elem[0] {
						case '_': // Prefix: "_"
							if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "array"
								if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleTestResponseStringArrayRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleTestResponseStringArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
								}
							case 'b': // Prefix: "b"
								if l := len("b"); len(elem) >= l && elem[0:l] == "b" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "ase64"
									if l := len("ase64"); len(elem) >= l && elem[0:l] == "ase64" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseStringBase64Request([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringBase64ArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestResponseStringBase64ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringBase64NullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringBase64NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseStringBase64NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											}
										}
									}
								case 'i': // Prefix: "inary"
									if l := len("inary"); len(elem) >= l && elem[0:l] == "inary" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseStringBinaryRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringBinaryArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestResponseStringBinaryArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringBinaryNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringBinaryNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseStringBinaryNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											}
										}
									}
								case 'y': // Prefix: "yte"
									if l := len("yte"); len(elem) >= l && elem[0:l] == "yte" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseStringByteRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringByteArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestResponseStringByteArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringByteNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringByteNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseStringByteNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											}
										}
									}
								}
							case 'd': // Prefix: "d"
								if l := len("d"); len(elem) >= l && elem[0:l] == "d" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "ate"
									if l := len("ate"); len(elem) >= l && elem[0:l] == "ate" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseStringDateRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '-': // Prefix: "-time"
										if l := len("-time"); len(elem) >= l && elem[0:l] == "-time" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestResponseStringDateTimeRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringDateTimeArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseStringDateTimeArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringDateTimeNullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseStringDateTimeNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestResponseStringDateTimeNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												}
											}
										}
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringDateArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestResponseStringDateArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringDateNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringDateNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseStringDateNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											}
										}
									}
								case 'u': // Prefix: "uration"
									if l := len("uration"); len(elem) >= l && elem[0:l] == "uration" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseStringDurationRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringDurationArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestResponseStringDurationArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringDurationNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringDurationNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseStringDurationNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											}
										}
									}
								}
							case 'e': // Prefix: "email"
								if l := len("email"); len(elem) >= l && elem[0:l] == "email" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleTestResponseStringEmailRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestResponseStringEmailArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "POST":
													s.handleTestResponseStringEmailArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestResponseStringEmailNullableRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringEmailNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestResponseStringEmailNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										}
									}
								}
							case 'f': // Prefix: "float"
								if l := len("float"); len(elem) >= l && elem[0:l] == "float" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case '3': // Prefix: "32"
									if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseStringFloat32Request([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringFloat32ArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestResponseStringFloat32ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringFloat32NullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringFloat32NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseStringFloat32NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											}
										}
									}
								case '6': // Prefix: "64"
									if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseStringFloat64Request([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringFloat64ArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestResponseStringFloat64ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringFloat64NullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringFloat64NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseStringFloat64NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											}
										}
									}
								}
							case 'h': // Prefix: "hostname"
								if l := len("hostname"); len(elem) >= l && elem[0:l] == "hostname" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleTestResponseStringHostnameRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestResponseStringHostnameArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "POST":
													s.handleTestResponseStringHostnameArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestResponseStringHostnameNullableRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringHostnameNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestResponseStringHostnameNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										}
									}
								}
							case 'i': // Prefix: "i"
								if l := len("i"); len(elem) >= l && elem[0:l] == "i" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'n': // Prefix: "nt"
									if l := len("nt"); len(elem) >= l && elem[0:l] == "nt" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseStringIntRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '1': // Prefix: "16"
										if l := len("16"); len(elem) >= l && elem[0:l] == "16" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestResponseStringInt16Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringInt16ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseStringInt16ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringInt16NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseStringInt16NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestResponseStringInt16NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												}
											}
										}
									case '3': // Prefix: "32"
										if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestResponseStringInt32Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringInt32ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseStringInt32ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringInt32NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseStringInt32NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestResponseStringInt32NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												}
											}
										}
									case '6': // Prefix: "64"
										if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestResponseStringInt64Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringInt64ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseStringInt64ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringInt64NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseStringInt64NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestResponseStringInt64NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												}
											}
										}
									case '8': // Prefix: "8"
										if l := len("8"); len(elem) >= l && elem[0:l] == "8" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestResponseStringInt8Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringInt8ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseStringInt8ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringInt8NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseStringInt8NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestResponseStringInt8NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												}
											}
										}
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringIntArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestResponseStringIntArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringIntNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringIntNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseStringIntNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											}
										}
									}
								case 'p': // Prefix: "p"
									if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseStringIPRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringIPArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestResponseStringIPArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringIPNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringIPNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseStringIPNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											}
										}
									case 'v': // Prefix: "v"
										if l := len("v"); len(elem) >= l && elem[0:l] == "v" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '4': // Prefix: "4"
											if l := len("4"); len(elem) >= l && elem[0:l] == "4" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringIpv4Request([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseStringIpv4ArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestResponseStringIpv4ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseStringIpv4NullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestResponseStringIpv4NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestResponseStringIpv4NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
														}
													}
												}
											}
										case '6': // Prefix: "6"
											if l := len("6"); len(elem) >= l && elem[0:l] == "6" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringIpv6Request([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseStringIpv6ArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestResponseStringIpv6ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseStringIpv6NullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestResponseStringIpv6NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestResponseStringIpv6NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
														}
													}
												}
											}
										}
									}
								}
							case 'n': // Prefix: "nullable"
								if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleTestResponseStringNullableRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseStringNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleTestResponseStringNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
									}
								}
							case 'p': // Prefix: "password"
								if l := len("password"); len(elem) >= l && elem[0:l] == "password" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleTestResponseStringPasswordRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestResponseStringPasswordArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "POST":
													s.handleTestResponseStringPasswordArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestResponseStringPasswordNullableRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringPasswordNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestResponseStringPasswordNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										}
									}
								}
							case 't': // Prefix: "time"
								if l := len("time"); len(elem) >= l && elem[0:l] == "time" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleTestResponseStringTimeRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestResponseStringTimeArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "POST":
													s.handleTestResponseStringTimeArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestResponseStringTimeNullableRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringTimeNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestResponseStringTimeNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										}
									}
								}
							case 'u': // Prefix: "u"
								if l := len("u"); len(elem) >= l && elem[0:l] == "u" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'i': // Prefix: "int"
									if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseStringUintRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '1': // Prefix: "16"
										if l := len("16"); len(elem) >= l && elem[0:l] == "16" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestResponseStringUint16Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringUint16ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseStringUint16ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringUint16NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseStringUint16NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestResponseStringUint16NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												}
											}
										}
									case '3': // Prefix: "32"
										if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestResponseStringUint32Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringUint32ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseStringUint32ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringUint32NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseStringUint32NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestResponseStringUint32NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												}
											}
										}
									case '6': // Prefix: "64"
										if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestResponseStringUint64Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringUint64ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseStringUint64ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringUint64NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseStringUint64NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestResponseStringUint64NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												}
											}
										}
									case '8': // Prefix: "8"
										if l := len("8"); len(elem) >= l && elem[0:l] == "8" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestResponseStringUint8Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringUint8ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseStringUint8ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringUint8NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseStringUint8NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestResponseStringUint8NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												}
											}
										}
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringUintArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestResponseStringUintArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringUintNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringUintNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseStringUintNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											}
										}
									}
								case 'n': // Prefix: "nix"
									if l := len("nix"); len(elem) >= l && elem[0:l] == "nix" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseStringUnixRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '-': // Prefix: "-"
										if l := len("-"); len(elem) >= l && elem[0:l] == "-" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'm': // Prefix: "mi"
											if l := len("mi"); len(elem) >= l && elem[0:l] == "mi" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'c': // Prefix: "cro"
												if l := len("cro"); len(elem) >= l && elem[0:l] == "cro" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringUnixMicroRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_"
													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"
														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestResponseStringUnixMicroArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestResponseStringUnixMicroArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
														}
													case 'n': // Prefix: "nullable"
														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestResponseStringUnixMicroNullableRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch r.Method {
																case "POST":
																	s.handleTestResponseStringUnixMicroNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
															switch elem[0] {
															case '_': // Prefix: "_array"
																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch r.Method {
																	case "POST":
																		s.handleTestResponseStringUnixMicroNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																	default:
																		s.notAllowed(w, r, "POST")
																	}

																	return
																}
															}
														}
													}
												}
											case 'l': // Prefix: "lli"
												if l := len("lli"); len(elem) >= l && elem[0:l] == "lli" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringUnixMilliRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_"
													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"
														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestResponseStringUnixMilliArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestResponseStringUnixMilliArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
														}
													case 'n': // Prefix: "nullable"
														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestResponseStringUnixMilliNullableRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch r.Method {
																case "POST":
																	s.handleTestResponseStringUnixMilliNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
															switch elem[0] {
															case '_': // Prefix: "_array"
																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch r.Method {
																	case "POST":
																		s.handleTestResponseStringUnixMilliNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																	default:
																		s.notAllowed(w, r, "POST")
																	}

																	return
																}
															}
														}
													}
												}
											}
										case 'n': // Prefix: "nano"
											if l := len("nano"); len(elem) >= l && elem[0:l] == "nano" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringUnixNanoRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseStringUnixNanoArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestResponseStringUnixNanoArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseStringUnixNanoNullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestResponseStringUnixNanoNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestResponseStringUnixNanoNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
														}
													}
												}
											}
										case 's': // Prefix: "seconds"
											if l := len("seconds"); len(elem) >= l && elem[0:l] == "seconds" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringUnixSecondsRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseStringUnixSecondsArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestResponseStringUnixSecondsArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseStringUnixSecondsNullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestResponseStringUnixSecondsNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestResponseStringUnixSecondsNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
														}
													}
												}
											}
										}
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringUnixArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestResponseStringUnixArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringUnixNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringUnixNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseStringUnixNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											}
										}
									}
								case 'r': // Prefix: "ri"
									if l := len("ri"); len(elem) >= l && elem[0:l] == "ri" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseStringURIRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringURIArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestResponseStringURIArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringURINullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringURINullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseStringURINullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											}
										}
									}
								case 'u': // Prefix: "uid"
									if l := len("uid"); len(elem) >= l && elem[0:l] == "uid" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseStringUUIDRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringUUIDArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestResponseStringUUIDArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringUUIDNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringUUIDNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseStringUUIDNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [0]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil { // if NO error
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/test_"
			if l := len("/test_"); len(elem) >= l && elem[0:l] == "/test_" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'q': // Prefix: "query_parameter"
				if l := len("query_parameter"); len(elem) >= l && elem[0:l] == "query_parameter" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "POST":
						// Leaf: TestQueryParameter
						r.name = "TestQueryParameter"
						r.summary = ""
						r.operationID = "test_query_parameter"
						r.pathPattern = "/test_query_parameter"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
			case 'r': // Prefix: "re"
				if l := len("re"); len(elem) >= l && elem[0:l] == "re" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'q': // Prefix: "quest_"
					if l := len("quest_"); len(elem) >= l && elem[0:l] == "quest_" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'A': // Prefix: "Any"
						if l := len("Any"); len(elem) >= l && elem[0:l] == "Any" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: TestRequestAny
								r.name = "TestRequestAny"
								r.summary = ""
								r.operationID = "test_request_Any"
								r.pathPattern = "/test_request_Any"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					case 'E': // Prefix: "EmptyStruct"
						if l := len("EmptyStruct"); len(elem) >= l && elem[0:l] == "EmptyStruct" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: TestRequestEmptyStruct
								r.name = "TestRequestEmptyStruct"
								r.summary = ""
								r.operationID = "test_request_EmptyStruct"
								r.pathPattern = "/test_request_EmptyStruct"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					case 'F': // Prefix: "FormatTest"
						if l := len("FormatTest"); len(elem) >= l && elem[0:l] == "FormatTest" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: TestRequestFormatTest
								r.name = "TestRequestFormatTest"
								r.summary = ""
								r.operationID = "test_request_FormatTest"
								r.pathPattern = "/test_request_FormatTest"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					case 'b': // Prefix: "boolean"
						if l := len("boolean"); len(elem) >= l && elem[0:l] == "boolean" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								r.name = "TestRequestBoolean"
								r.summary = ""
								r.operationID = "test_request_boolean"
								r.pathPattern = "/test_request_boolean"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '_': // Prefix: "_"
							if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "array"
								if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = "TestRequestBooleanArray"
										r.summary = ""
										r.operationID = "test_request_boolean_array"
										r.pathPattern = "/test_request_boolean_array"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											// Leaf: TestRequestBooleanArrayArray
											r.name = "TestRequestBooleanArrayArray"
											r.summary = ""
											r.operationID = "test_request_boolean_array_array"
											r.pathPattern = "/test_request_boolean_array_array"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
								}
							case 'n': // Prefix: "nullable"
								if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = "TestRequestBooleanNullable"
										r.summary = ""
										r.operationID = "test_request_boolean_nullable"
										r.pathPattern = "/test_request_boolean_nullable"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestRequestBooleanNullableArray"
											r.summary = ""
											r.operationID = "test_request_boolean_nullable_array"
											r.pathPattern = "/test_request_boolean_nullable_array"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												// Leaf: TestRequestBooleanNullableArrayArray
												r.name = "TestRequestBooleanNullableArrayArray"
												r.summary = ""
												r.operationID = "test_request_boolean_nullable_array_array"
												r.pathPattern = "/test_request_boolean_nullable_array_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
									}
								}
							}
						}
					case 'i': // Prefix: "integer"
						if l := len("integer"); len(elem) >= l && elem[0:l] == "integer" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								r.name = "TestRequestInteger"
								r.summary = ""
								r.operationID = "test_request_integer"
								r.pathPattern = "/test_request_integer"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '_': // Prefix: "_"
							if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "array"
								if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = "TestRequestIntegerArray"
										r.summary = ""
										r.operationID = "test_request_integer_array"
										r.pathPattern = "/test_request_integer_array"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											// Leaf: TestRequestIntegerArrayArray
											r.name = "TestRequestIntegerArrayArray"
											r.summary = ""
											r.operationID = "test_request_integer_array_array"
											r.pathPattern = "/test_request_integer_array_array"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
								}
							case 'i': // Prefix: "int"
								if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case '1': // Prefix: "16"
									if l := len("16"); len(elem) >= l && elem[0:l] == "16" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestRequestIntegerInt16"
											r.summary = ""
											r.operationID = "test_request_integer_int16"
											r.pathPattern = "/test_request_integer_int16"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestIntegerInt16Array"
													r.summary = ""
													r.operationID = "test_request_integer_int16_array"
													r.pathPattern = "/test_request_integer_int16_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestRequestIntegerInt16ArrayArray
														r.name = "TestRequestIntegerInt16ArrayArray"
														r.summary = ""
														r.operationID = "test_request_integer_int16_array_array"
														r.pathPattern = "/test_request_integer_int16_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestIntegerInt16Nullable"
													r.summary = ""
													r.operationID = "test_request_integer_int16_nullable"
													r.pathPattern = "/test_request_integer_int16_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestIntegerInt16NullableArray"
														r.summary = ""
														r.operationID = "test_request_integer_int16_nullable_array"
														r.pathPattern = "/test_request_integer_int16_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestIntegerInt16NullableArrayArray
															r.name = "TestRequestIntegerInt16NullableArrayArray"
															r.summary = ""
															r.operationID = "test_request_integer_int16_nullable_array_array"
															r.pathPattern = "/test_request_integer_int16_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											}
										}
									}
								case '3': // Prefix: "32"
									if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestRequestIntegerInt32"
											r.summary = ""
											r.operationID = "test_request_integer_int32"
											r.pathPattern = "/test_request_integer_int32"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestIntegerInt32Array"
													r.summary = ""
													r.operationID = "test_request_integer_int32_array"
													r.pathPattern = "/test_request_integer_int32_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestRequestIntegerInt32ArrayArray
														r.name = "TestRequestIntegerInt32ArrayArray"
														r.summary = ""
														r.operationID = "test_request_integer_int32_array_array"
														r.pathPattern = "/test_request_integer_int32_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestIntegerInt32Nullable"
													r.summary = ""
													r.operationID = "test_request_integer_int32_nullable"
													r.pathPattern = "/test_request_integer_int32_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestIntegerInt32NullableArray"
														r.summary = ""
														r.operationID = "test_request_integer_int32_nullable_array"
														r.pathPattern = "/test_request_integer_int32_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestIntegerInt32NullableArrayArray
															r.name = "TestRequestIntegerInt32NullableArrayArray"
															r.summary = ""
															r.operationID = "test_request_integer_int32_nullable_array_array"
															r.pathPattern = "/test_request_integer_int32_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											}
										}
									}
								case '6': // Prefix: "64"
									if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestRequestIntegerInt64"
											r.summary = ""
											r.operationID = "test_request_integer_int64"
											r.pathPattern = "/test_request_integer_int64"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestIntegerInt64Array"
													r.summary = ""
													r.operationID = "test_request_integer_int64_array"
													r.pathPattern = "/test_request_integer_int64_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestRequestIntegerInt64ArrayArray
														r.name = "TestRequestIntegerInt64ArrayArray"
														r.summary = ""
														r.operationID = "test_request_integer_int64_array_array"
														r.pathPattern = "/test_request_integer_int64_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestIntegerInt64Nullable"
													r.summary = ""
													r.operationID = "test_request_integer_int64_nullable"
													r.pathPattern = "/test_request_integer_int64_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestIntegerInt64NullableArray"
														r.summary = ""
														r.operationID = "test_request_integer_int64_nullable_array"
														r.pathPattern = "/test_request_integer_int64_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestIntegerInt64NullableArrayArray
															r.name = "TestRequestIntegerInt64NullableArrayArray"
															r.summary = ""
															r.operationID = "test_request_integer_int64_nullable_array_array"
															r.pathPattern = "/test_request_integer_int64_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											}
										}
									}
								case '8': // Prefix: "8"
									if l := len("8"); len(elem) >= l && elem[0:l] == "8" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestRequestIntegerInt8"
											r.summary = ""
											r.operationID = "test_request_integer_int8"
											r.pathPattern = "/test_request_integer_int8"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestIntegerInt8Array"
													r.summary = ""
													r.operationID = "test_request_integer_int8_array"
													r.pathPattern = "/test_request_integer_int8_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestRequestIntegerInt8ArrayArray
														r.name = "TestRequestIntegerInt8ArrayArray"
														r.summary = ""
														r.operationID = "test_request_integer_int8_array_array"
														r.pathPattern = "/test_request_integer_int8_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestIntegerInt8Nullable"
													r.summary = ""
													r.operationID = "test_request_integer_int8_nullable"
													r.pathPattern = "/test_request_integer_int8_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestIntegerInt8NullableArray"
														r.summary = ""
														r.operationID = "test_request_integer_int8_nullable_array"
														r.pathPattern = "/test_request_integer_int8_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestIntegerInt8NullableArrayArray
															r.name = "TestRequestIntegerInt8NullableArrayArray"
															r.summary = ""
															r.operationID = "test_request_integer_int8_nullable_array_array"
															r.pathPattern = "/test_request_integer_int8_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											}
										}
									}
								}
							case 'n': // Prefix: "nullable"
								if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = "TestRequestIntegerNullable"
										r.summary = ""
										r.operationID = "test_request_integer_nullable"
										r.pathPattern = "/test_request_integer_nullable"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestRequestIntegerNullableArray"
											r.summary = ""
											r.operationID = "test_request_integer_nullable_array"
											r.pathPattern = "/test_request_integer_nullable_array"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												// Leaf: TestRequestIntegerNullableArrayArray
												r.name = "TestRequestIntegerNullableArrayArray"
												r.summary = ""
												r.operationID = "test_request_integer_nullable_array_array"
												r.pathPattern = "/test_request_integer_nullable_array_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
									}
								}
							case 'u': // Prefix: "u"
								if l := len("u"); len(elem) >= l && elem[0:l] == "u" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'i': // Prefix: "int"
									if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestRequestIntegerUint"
											r.summary = ""
											r.operationID = "test_request_integer_uint"
											r.pathPattern = "/test_request_integer_uint"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '1': // Prefix: "16"
										if l := len("16"); len(elem) >= l && elem[0:l] == "16" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestIntegerUint16"
												r.summary = ""
												r.operationID = "test_request_integer_uint16"
												r.pathPattern = "/test_request_integer_uint16"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestIntegerUint16Array"
														r.summary = ""
														r.operationID = "test_request_integer_uint16_array"
														r.pathPattern = "/test_request_integer_uint16_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestIntegerUint16ArrayArray
															r.name = "TestRequestIntegerUint16ArrayArray"
															r.summary = ""
															r.operationID = "test_request_integer_uint16_array_array"
															r.pathPattern = "/test_request_integer_uint16_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestIntegerUint16Nullable"
														r.summary = ""
														r.operationID = "test_request_integer_uint16_nullable"
														r.pathPattern = "/test_request_integer_uint16_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestIntegerUint16NullableArray"
															r.summary = ""
															r.operationID = "test_request_integer_uint16_nullable_array"
															r.pathPattern = "/test_request_integer_uint16_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestIntegerUint16NullableArrayArray
																r.name = "TestRequestIntegerUint16NullableArrayArray"
																r.summary = ""
																r.operationID = "test_request_integer_uint16_nullable_array_array"
																r.pathPattern = "/test_request_integer_uint16_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										}
									case '3': // Prefix: "32"
										if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestIntegerUint32"
												r.summary = ""
												r.operationID = "test_request_integer_uint32"
												r.pathPattern = "/test_request_integer_uint32"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestIntegerUint32Array"
														r.summary = ""
														r.operationID = "test_request_integer_uint32_array"
														r.pathPattern = "/test_request_integer_uint32_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestIntegerUint32ArrayArray
															r.name = "TestRequestIntegerUint32ArrayArray"
															r.summary = ""
															r.operationID = "test_request_integer_uint32_array_array"
															r.pathPattern = "/test_request_integer_uint32_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestIntegerUint32Nullable"
														r.summary = ""
														r.operationID = "test_request_integer_uint32_nullable"
														r.pathPattern = "/test_request_integer_uint32_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestIntegerUint32NullableArray"
															r.summary = ""
															r.operationID = "test_request_integer_uint32_nullable_array"
															r.pathPattern = "/test_request_integer_uint32_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestIntegerUint32NullableArrayArray
																r.name = "TestRequestIntegerUint32NullableArrayArray"
																r.summary = ""
																r.operationID = "test_request_integer_uint32_nullable_array_array"
																r.pathPattern = "/test_request_integer_uint32_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										}
									case '6': // Prefix: "64"
										if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestIntegerUint64"
												r.summary = ""
												r.operationID = "test_request_integer_uint64"
												r.pathPattern = "/test_request_integer_uint64"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestIntegerUint64Array"
														r.summary = ""
														r.operationID = "test_request_integer_uint64_array"
														r.pathPattern = "/test_request_integer_uint64_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestIntegerUint64ArrayArray
															r.name = "TestRequestIntegerUint64ArrayArray"
															r.summary = ""
															r.operationID = "test_request_integer_uint64_array_array"
															r.pathPattern = "/test_request_integer_uint64_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestIntegerUint64Nullable"
														r.summary = ""
														r.operationID = "test_request_integer_uint64_nullable"
														r.pathPattern = "/test_request_integer_uint64_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestIntegerUint64NullableArray"
															r.summary = ""
															r.operationID = "test_request_integer_uint64_nullable_array"
															r.pathPattern = "/test_request_integer_uint64_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestIntegerUint64NullableArrayArray
																r.name = "TestRequestIntegerUint64NullableArrayArray"
																r.summary = ""
																r.operationID = "test_request_integer_uint64_nullable_array_array"
																r.pathPattern = "/test_request_integer_uint64_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										}
									case '8': // Prefix: "8"
										if l := len("8"); len(elem) >= l && elem[0:l] == "8" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestIntegerUint8"
												r.summary = ""
												r.operationID = "test_request_integer_uint8"
												r.pathPattern = "/test_request_integer_uint8"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestIntegerUint8Array"
														r.summary = ""
														r.operationID = "test_request_integer_uint8_array"
														r.pathPattern = "/test_request_integer_uint8_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestIntegerUint8ArrayArray
															r.name = "TestRequestIntegerUint8ArrayArray"
															r.summary = ""
															r.operationID = "test_request_integer_uint8_array_array"
															r.pathPattern = "/test_request_integer_uint8_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestIntegerUint8Nullable"
														r.summary = ""
														r.operationID = "test_request_integer_uint8_nullable"
														r.pathPattern = "/test_request_integer_uint8_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestIntegerUint8NullableArray"
															r.summary = ""
															r.operationID = "test_request_integer_uint8_nullable_array"
															r.pathPattern = "/test_request_integer_uint8_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestIntegerUint8NullableArrayArray
																r.name = "TestRequestIntegerUint8NullableArrayArray"
																r.summary = ""
																r.operationID = "test_request_integer_uint8_nullable_array_array"
																r.pathPattern = "/test_request_integer_uint8_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										}
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestIntegerUintArray"
													r.summary = ""
													r.operationID = "test_request_integer_uint_array"
													r.pathPattern = "/test_request_integer_uint_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestRequestIntegerUintArrayArray
														r.name = "TestRequestIntegerUintArrayArray"
														r.summary = ""
														r.operationID = "test_request_integer_uint_array_array"
														r.pathPattern = "/test_request_integer_uint_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestIntegerUintNullable"
													r.summary = ""
													r.operationID = "test_request_integer_uint_nullable"
													r.pathPattern = "/test_request_integer_uint_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestIntegerUintNullableArray"
														r.summary = ""
														r.operationID = "test_request_integer_uint_nullable_array"
														r.pathPattern = "/test_request_integer_uint_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestIntegerUintNullableArrayArray
															r.name = "TestRequestIntegerUintNullableArrayArray"
															r.summary = ""
															r.operationID = "test_request_integer_uint_nullable_array_array"
															r.pathPattern = "/test_request_integer_uint_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											}
										}
									}
								case 'n': // Prefix: "nix"
									if l := len("nix"); len(elem) >= l && elem[0:l] == "nix" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestRequestIntegerUnix"
											r.summary = ""
											r.operationID = "test_request_integer_unix"
											r.pathPattern = "/test_request_integer_unix"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '-': // Prefix: "-"
										if l := len("-"); len(elem) >= l && elem[0:l] == "-" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'm': // Prefix: "mi"
											if l := len("mi"); len(elem) >= l && elem[0:l] == "mi" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'c': // Prefix: "cro"
												if l := len("cro"); len(elem) >= l && elem[0:l] == "cro" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestIntegerUnixMicro"
														r.summary = ""
														r.operationID = "test_request_integer_unix-micro"
														r.pathPattern = "/test_request_integer_unix-micro"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_"
													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"
														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestRequestIntegerUnixMicroArray"
																r.summary = ""
																r.operationID = "test_request_integer_unix-micro_array"
																r.pathPattern = "/test_request_integer_unix-micro_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	// Leaf: TestRequestIntegerUnixMicroArrayArray
																	r.name = "TestRequestIntegerUnixMicroArrayArray"
																	r.summary = ""
																	r.operationID = "test_request_integer_unix-micro_array_array"
																	r.pathPattern = "/test_request_integer_unix-micro_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
														}
													case 'n': // Prefix: "nullable"
														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestRequestIntegerUnixMicroNullable"
																r.summary = ""
																r.operationID = "test_request_integer_unix-micro_nullable"
																r.pathPattern = "/test_request_integer_unix-micro_nullable"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	r.name = "TestRequestIntegerUnixMicroNullableArray"
																	r.summary = ""
																	r.operationID = "test_request_integer_unix-micro_nullable_array"
																	r.pathPattern = "/test_request_integer_unix-micro_nullable_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
															switch elem[0] {
															case '_': // Prefix: "_array"
																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	switch method {
																	case "POST":
																		// Leaf: TestRequestIntegerUnixMicroNullableArrayArray
																		r.name = "TestRequestIntegerUnixMicroNullableArrayArray"
																		r.summary = ""
																		r.operationID = "test_request_integer_unix-micro_nullable_array_array"
																		r.pathPattern = "/test_request_integer_unix-micro_nullable_array_array"
																		r.args = args
																		r.count = 0
																		return r, true
																	default:
																		return
																	}
																}
															}
														}
													}
												}
											case 'l': // Prefix: "lli"
												if l := len("lli"); len(elem) >= l && elem[0:l] == "lli" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestIntegerUnixMilli"
														r.summary = ""
														r.operationID = "test_request_integer_unix-milli"
														r.pathPattern = "/test_request_integer_unix-milli"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_"
													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"
														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestRequestIntegerUnixMilliArray"
																r.summary = ""
																r.operationID = "test_request_integer_unix-milli_array"
																r.pathPattern = "/test_request_integer_unix-milli_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	// Leaf: TestRequestIntegerUnixMilliArrayArray
																	r.name = "TestRequestIntegerUnixMilliArrayArray"
																	r.summary = ""
																	r.operationID = "test_request_integer_unix-milli_array_array"
																	r.pathPattern = "/test_request_integer_unix-milli_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
														}
													case 'n': // Prefix: "nullable"
														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestRequestIntegerUnixMilliNullable"
																r.summary = ""
																r.operationID = "test_request_integer_unix-milli_nullable"
																r.pathPattern = "/test_request_integer_unix-milli_nullable"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	r.name = "TestRequestIntegerUnixMilliNullableArray"
																	r.summary = ""
																	r.operationID = "test_request_integer_unix-milli_nullable_array"
																	r.pathPattern = "/test_request_integer_unix-milli_nullable_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
															switch elem[0] {
															case '_': // Prefix: "_array"
																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	switch method {
																	case "POST":
																		// Leaf: TestRequestIntegerUnixMilliNullableArrayArray
																		r.name = "TestRequestIntegerUnixMilliNullableArrayArray"
																		r.summary = ""
																		r.operationID = "test_request_integer_unix-milli_nullable_array_array"
																		r.pathPattern = "/test_request_integer_unix-milli_nullable_array_array"
																		r.args = args
																		r.count = 0
																		return r, true
																	default:
																		return
																	}
																}
															}
														}
													}
												}
											}
										case 'n': // Prefix: "nano"
											if l := len("nano"); len(elem) >= l && elem[0:l] == "nano" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestIntegerUnixNano"
													r.summary = ""
													r.operationID = "test_request_integer_unix-nano"
													r.pathPattern = "/test_request_integer_unix-nano"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestIntegerUnixNanoArray"
															r.summary = ""
															r.operationID = "test_request_integer_unix-nano_array"
															r.pathPattern = "/test_request_integer_unix-nano_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestIntegerUnixNanoArrayArray
																r.name = "TestRequestIntegerUnixNanoArrayArray"
																r.summary = ""
																r.operationID = "test_request_integer_unix-nano_array_array"
																r.pathPattern = "/test_request_integer_unix-nano_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestIntegerUnixNanoNullable"
															r.summary = ""
															r.operationID = "test_request_integer_unix-nano_nullable"
															r.pathPattern = "/test_request_integer_unix-nano_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestRequestIntegerUnixNanoNullableArray"
																r.summary = ""
																r.operationID = "test_request_integer_unix-nano_nullable_array"
																r.pathPattern = "/test_request_integer_unix-nano_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	// Leaf: TestRequestIntegerUnixNanoNullableArrayArray
																	r.name = "TestRequestIntegerUnixNanoNullableArrayArray"
																	r.summary = ""
																	r.operationID = "test_request_integer_unix-nano_nullable_array_array"
																	r.pathPattern = "/test_request_integer_unix-nano_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
														}
													}
												}
											}
										case 's': // Prefix: "seconds"
											if l := len("seconds"); len(elem) >= l && elem[0:l] == "seconds" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestIntegerUnixSeconds"
													r.summary = ""
													r.operationID = "test_request_integer_unix-seconds"
													r.pathPattern = "/test_request_integer_unix-seconds"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestIntegerUnixSecondsArray"
															r.summary = ""
															r.operationID = "test_request_integer_unix-seconds_array"
															r.pathPattern = "/test_request_integer_unix-seconds_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestIntegerUnixSecondsArrayArray
																r.name = "TestRequestIntegerUnixSecondsArrayArray"
																r.summary = ""
																r.operationID = "test_request_integer_unix-seconds_array_array"
																r.pathPattern = "/test_request_integer_unix-seconds_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestIntegerUnixSecondsNullable"
															r.summary = ""
															r.operationID = "test_request_integer_unix-seconds_nullable"
															r.pathPattern = "/test_request_integer_unix-seconds_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestRequestIntegerUnixSecondsNullableArray"
																r.summary = ""
																r.operationID = "test_request_integer_unix-seconds_nullable_array"
																r.pathPattern = "/test_request_integer_unix-seconds_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	// Leaf: TestRequestIntegerUnixSecondsNullableArrayArray
																	r.name = "TestRequestIntegerUnixSecondsNullableArrayArray"
																	r.summary = ""
																	r.operationID = "test_request_integer_unix-seconds_nullable_array_array"
																	r.pathPattern = "/test_request_integer_unix-seconds_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
														}
													}
												}
											}
										}
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestIntegerUnixArray"
													r.summary = ""
													r.operationID = "test_request_integer_unix_array"
													r.pathPattern = "/test_request_integer_unix_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestRequestIntegerUnixArrayArray
														r.name = "TestRequestIntegerUnixArrayArray"
														r.summary = ""
														r.operationID = "test_request_integer_unix_array_array"
														r.pathPattern = "/test_request_integer_unix_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestIntegerUnixNullable"
													r.summary = ""
													r.operationID = "test_request_integer_unix_nullable"
													r.pathPattern = "/test_request_integer_unix_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestIntegerUnixNullableArray"
														r.summary = ""
														r.operationID = "test_request_integer_unix_nullable_array"
														r.pathPattern = "/test_request_integer_unix_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestIntegerUnixNullableArrayArray
															r.name = "TestRequestIntegerUnixNullableArrayArray"
															r.summary = ""
															r.operationID = "test_request_integer_unix_nullable_array_array"
															r.pathPattern = "/test_request_integer_unix_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											}
										}
									}
								}
							}
						}
					case 'n': // Prefix: "nu"
						if l := len("nu"); len(elem) >= l && elem[0:l] == "nu" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'l': // Prefix: "ll"
							if l := len("ll"); len(elem) >= l && elem[0:l] == "ll" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									r.name = "TestRequestNull"
									r.summary = ""
									r.operationID = "test_request_null"
									r.pathPattern = "/test_request_null"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestRequestNullArray"
											r.summary = ""
											r.operationID = "test_request_null_array"
											r.pathPattern = "/test_request_null_array"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												// Leaf: TestRequestNullArrayArray
												r.name = "TestRequestNullArrayArray"
												r.summary = ""
												r.operationID = "test_request_null_array_array"
												r.pathPattern = "/test_request_null_array_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestRequestNullNullable"
											r.summary = ""
											r.operationID = "test_request_null_nullable"
											r.pathPattern = "/test_request_null_nullable"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestNullNullableArray"
												r.summary = ""
												r.operationID = "test_request_null_nullable_array"
												r.pathPattern = "/test_request_null_nullable_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													// Leaf: TestRequestNullNullableArrayArray
													r.name = "TestRequestNullNullableArrayArray"
													r.summary = ""
													r.operationID = "test_request_null_nullable_array_array"
													r.pathPattern = "/test_request_null_nullable_array_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
										}
									}
								}
							}
						case 'm': // Prefix: "mber"
							if l := len("mber"); len(elem) >= l && elem[0:l] == "mber" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									r.name = "TestRequestNumber"
									r.summary = ""
									r.operationID = "test_request_number"
									r.pathPattern = "/test_request_number"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestRequestNumberArray"
											r.summary = ""
											r.operationID = "test_request_number_array"
											r.pathPattern = "/test_request_number_array"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												// Leaf: TestRequestNumberArrayArray
												r.name = "TestRequestNumberArrayArray"
												r.summary = ""
												r.operationID = "test_request_number_array_array"
												r.pathPattern = "/test_request_number_array_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
									}
								case 'd': // Prefix: "double"
									if l := len("double"); len(elem) >= l && elem[0:l] == "double" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestRequestNumberDouble"
											r.summary = ""
											r.operationID = "test_request_number_double"
											r.pathPattern = "/test_request_number_double"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestNumberDoubleArray"
													r.summary = ""
													r.operationID = "test_request_number_double_array"
													r.pathPattern = "/test_request_number_double_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestRequestNumberDoubleArrayArray
														r.name = "TestRequestNumberDoubleArrayArray"
														r.summary = ""
														r.operationID = "test_request_number_double_array_array"
														r.pathPattern = "/test_request_number_double_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestNumberDoubleNullable"
													r.summary = ""
													r.operationID = "test_request_number_double_nullable"
													r.pathPattern = "/test_request_number_double_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestNumberDoubleNullableArray"
														r.summary = ""
														r.operationID = "test_request_number_double_nullable_array"
														r.pathPattern = "/test_request_number_double_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestNumberDoubleNullableArrayArray
															r.name = "TestRequestNumberDoubleNullableArrayArray"
															r.summary = ""
															r.operationID = "test_request_number_double_nullable_array_array"
															r.pathPattern = "/test_request_number_double_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											}
										}
									}
								case 'f': // Prefix: "float"
									if l := len("float"); len(elem) >= l && elem[0:l] == "float" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestRequestNumberFloat"
											r.summary = ""
											r.operationID = "test_request_number_float"
											r.pathPattern = "/test_request_number_float"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestNumberFloatArray"
													r.summary = ""
													r.operationID = "test_request_number_float_array"
													r.pathPattern = "/test_request_number_float_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestRequestNumberFloatArrayArray
														r.name = "TestRequestNumberFloatArrayArray"
														r.summary = ""
														r.operationID = "test_request_number_float_array_array"
														r.pathPattern = "/test_request_number_float_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestNumberFloatNullable"
													r.summary = ""
													r.operationID = "test_request_number_float_nullable"
													r.pathPattern = "/test_request_number_float_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestNumberFloatNullableArray"
														r.summary = ""
														r.operationID = "test_request_number_float_nullable_array"
														r.pathPattern = "/test_request_number_float_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestNumberFloatNullableArrayArray
															r.name = "TestRequestNumberFloatNullableArrayArray"
															r.summary = ""
															r.operationID = "test_request_number_float_nullable_array_array"
															r.pathPattern = "/test_request_number_float_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											}
										}
									}
								case 'i': // Prefix: "int"
									if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '3': // Prefix: "32"
										if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestNumberInt32"
												r.summary = ""
												r.operationID = "test_request_number_int32"
												r.pathPattern = "/test_request_number_int32"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestNumberInt32Array"
														r.summary = ""
														r.operationID = "test_request_number_int32_array"
														r.pathPattern = "/test_request_number_int32_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestNumberInt32ArrayArray
															r.name = "TestRequestNumberInt32ArrayArray"
															r.summary = ""
															r.operationID = "test_request_number_int32_array_array"
															r.pathPattern = "/test_request_number_int32_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestNumberInt32Nullable"
														r.summary = ""
														r.operationID = "test_request_number_int32_nullable"
														r.pathPattern = "/test_request_number_int32_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestNumberInt32NullableArray"
															r.summary = ""
															r.operationID = "test_request_number_int32_nullable_array"
															r.pathPattern = "/test_request_number_int32_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestNumberInt32NullableArrayArray
																r.name = "TestRequestNumberInt32NullableArrayArray"
																r.summary = ""
																r.operationID = "test_request_number_int32_nullable_array_array"
																r.pathPattern = "/test_request_number_int32_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										}
									case '6': // Prefix: "64"
										if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestNumberInt64"
												r.summary = ""
												r.operationID = "test_request_number_int64"
												r.pathPattern = "/test_request_number_int64"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestNumberInt64Array"
														r.summary = ""
														r.operationID = "test_request_number_int64_array"
														r.pathPattern = "/test_request_number_int64_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestNumberInt64ArrayArray
															r.name = "TestRequestNumberInt64ArrayArray"
															r.summary = ""
															r.operationID = "test_request_number_int64_array_array"
															r.pathPattern = "/test_request_number_int64_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestNumberInt64Nullable"
														r.summary = ""
														r.operationID = "test_request_number_int64_nullable"
														r.pathPattern = "/test_request_number_int64_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestNumberInt64NullableArray"
															r.summary = ""
															r.operationID = "test_request_number_int64_nullable_array"
															r.pathPattern = "/test_request_number_int64_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestNumberInt64NullableArrayArray
																r.name = "TestRequestNumberInt64NullableArrayArray"
																r.summary = ""
																r.operationID = "test_request_number_int64_nullable_array_array"
																r.pathPattern = "/test_request_number_int64_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestRequestNumberNullable"
											r.summary = ""
											r.operationID = "test_request_number_nullable"
											r.pathPattern = "/test_request_number_nullable"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestNumberNullableArray"
												r.summary = ""
												r.operationID = "test_request_number_nullable_array"
												r.pathPattern = "/test_request_number_nullable_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													// Leaf: TestRequestNumberNullableArrayArray
													r.name = "TestRequestNumberNullableArrayArray"
													r.summary = ""
													r.operationID = "test_request_number_nullable_array_array"
													r.pathPattern = "/test_request_number_nullable_array_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
										}
									}
								}
							}
						}
					case 'r': // Prefix: "required_"
						if l := len("required_"); len(elem) >= l && elem[0:l] == "required_" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'A': // Prefix: "Any"
							if l := len("Any"); len(elem) >= l && elem[0:l] == "Any" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									// Leaf: TestRequestRequiredAny
									r.name = "TestRequestRequiredAny"
									r.summary = ""
									r.operationID = "test_request_required_Any"
									r.pathPattern = "/test_request_required_Any"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
						case 'E': // Prefix: "EmptyStruct"
							if l := len("EmptyStruct"); len(elem) >= l && elem[0:l] == "EmptyStruct" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									// Leaf: TestRequestRequiredEmptyStruct
									r.name = "TestRequestRequiredEmptyStruct"
									r.summary = ""
									r.operationID = "test_request_required_EmptyStruct"
									r.pathPattern = "/test_request_required_EmptyStruct"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
						case 'F': // Prefix: "FormatTest"
							if l := len("FormatTest"); len(elem) >= l && elem[0:l] == "FormatTest" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									// Leaf: TestRequestRequiredFormatTest
									r.name = "TestRequestRequiredFormatTest"
									r.summary = ""
									r.operationID = "test_request_required_FormatTest"
									r.pathPattern = "/test_request_required_FormatTest"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
						case 'b': // Prefix: "boolean"
							if l := len("boolean"); len(elem) >= l && elem[0:l] == "boolean" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									r.name = "TestRequestRequiredBoolean"
									r.summary = ""
									r.operationID = "test_request_required_boolean"
									r.pathPattern = "/test_request_required_boolean"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestRequestRequiredBooleanArray"
											r.summary = ""
											r.operationID = "test_request_required_boolean_array"
											r.pathPattern = "/test_request_required_boolean_array"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												// Leaf: TestRequestRequiredBooleanArrayArray
												r.name = "TestRequestRequiredBooleanArrayArray"
												r.summary = ""
												r.operationID = "test_request_required_boolean_array_array"
												r.pathPattern = "/test_request_required_boolean_array_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestRequestRequiredBooleanNullable"
											r.summary = ""
											r.operationID = "test_request_required_boolean_nullable"
											r.pathPattern = "/test_request_required_boolean_nullable"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestRequiredBooleanNullableArray"
												r.summary = ""
												r.operationID = "test_request_required_boolean_nullable_array"
												r.pathPattern = "/test_request_required_boolean_nullable_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													// Leaf: TestRequestRequiredBooleanNullableArrayArray
													r.name = "TestRequestRequiredBooleanNullableArrayArray"
													r.summary = ""
													r.operationID = "test_request_required_boolean_nullable_array_array"
													r.pathPattern = "/test_request_required_boolean_nullable_array_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
										}
									}
								}
							}
						case 'i': // Prefix: "integer"
							if l := len("integer"); len(elem) >= l && elem[0:l] == "integer" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									r.name = "TestRequestRequiredInteger"
									r.summary = ""
									r.operationID = "test_request_required_integer"
									r.pathPattern = "/test_request_required_integer"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestRequestRequiredIntegerArray"
											r.summary = ""
											r.operationID = "test_request_required_integer_array"
											r.pathPattern = "/test_request_required_integer_array"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												// Leaf: TestRequestRequiredIntegerArrayArray
												r.name = "TestRequestRequiredIntegerArrayArray"
												r.summary = ""
												r.operationID = "test_request_required_integer_array_array"
												r.pathPattern = "/test_request_required_integer_array_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
									}
								case 'i': // Prefix: "int"
									if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '1': // Prefix: "16"
										if l := len("16"); len(elem) >= l && elem[0:l] == "16" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestRequiredIntegerInt16"
												r.summary = ""
												r.operationID = "test_request_required_integer_int16"
												r.pathPattern = "/test_request_required_integer_int16"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestRequiredIntegerInt16Array"
														r.summary = ""
														r.operationID = "test_request_required_integer_int16_array"
														r.pathPattern = "/test_request_required_integer_int16_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestRequiredIntegerInt16ArrayArray
															r.name = "TestRequestRequiredIntegerInt16ArrayArray"
															r.summary = ""
															r.operationID = "test_request_required_integer_int16_array_array"
															r.pathPattern = "/test_request_required_integer_int16_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestRequiredIntegerInt16Nullable"
														r.summary = ""
														r.operationID = "test_request_required_integer_int16_nullable"
														r.pathPattern = "/test_request_required_integer_int16_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredIntegerInt16NullableArray"
															r.summary = ""
															r.operationID = "test_request_required_integer_int16_nullable_array"
															r.pathPattern = "/test_request_required_integer_int16_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestRequiredIntegerInt16NullableArrayArray
																r.name = "TestRequestRequiredIntegerInt16NullableArrayArray"
																r.summary = ""
																r.operationID = "test_request_required_integer_int16_nullable_array_array"
																r.pathPattern = "/test_request_required_integer_int16_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										}
									case '3': // Prefix: "32"
										if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestRequiredIntegerInt32"
												r.summary = ""
												r.operationID = "test_request_required_integer_int32"
												r.pathPattern = "/test_request_required_integer_int32"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestRequiredIntegerInt32Array"
														r.summary = ""
														r.operationID = "test_request_required_integer_int32_array"
														r.pathPattern = "/test_request_required_integer_int32_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestRequiredIntegerInt32ArrayArray
															r.name = "TestRequestRequiredIntegerInt32ArrayArray"
															r.summary = ""
															r.operationID = "test_request_required_integer_int32_array_array"
															r.pathPattern = "/test_request_required_integer_int32_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestRequiredIntegerInt32Nullable"
														r.summary = ""
														r.operationID = "test_request_required_integer_int32_nullable"
														r.pathPattern = "/test_request_required_integer_int32_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredIntegerInt32NullableArray"
															r.summary = ""
															r.operationID = "test_request_required_integer_int32_nullable_array"
															r.pathPattern = "/test_request_required_integer_int32_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestRequiredIntegerInt32NullableArrayArray
																r.name = "TestRequestRequiredIntegerInt32NullableArrayArray"
																r.summary = ""
																r.operationID = "test_request_required_integer_int32_nullable_array_array"
																r.pathPattern = "/test_request_required_integer_int32_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										}
									case '6': // Prefix: "64"
										if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestRequiredIntegerInt64"
												r.summary = ""
												r.operationID = "test_request_required_integer_int64"
												r.pathPattern = "/test_request_required_integer_int64"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestRequiredIntegerInt64Array"
														r.summary = ""
														r.operationID = "test_request_required_integer_int64_array"
														r.pathPattern = "/test_request_required_integer_int64_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestRequiredIntegerInt64ArrayArray
															r.name = "TestRequestRequiredIntegerInt64ArrayArray"
															r.summary = ""
															r.operationID = "test_request_required_integer_int64_array_array"
															r.pathPattern = "/test_request_required_integer_int64_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestRequiredIntegerInt64Nullable"
														r.summary = ""
														r.operationID = "test_request_required_integer_int64_nullable"
														r.pathPattern = "/test_request_required_integer_int64_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredIntegerInt64NullableArray"
															r.summary = ""
															r.operationID = "test_request_required_integer_int64_nullable_array"
															r.pathPattern = "/test_request_required_integer_int64_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestRequiredIntegerInt64NullableArrayArray
																r.name = "TestRequestRequiredIntegerInt64NullableArrayArray"
																r.summary = ""
																r.operationID = "test_request_required_integer_int64_nullable_array_array"
																r.pathPattern = "/test_request_required_integer_int64_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										}
									case '8': // Prefix: "8"
										if l := len("8"); len(elem) >= l && elem[0:l] == "8" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestRequiredIntegerInt8"
												r.summary = ""
												r.operationID = "test_request_required_integer_int8"
												r.pathPattern = "/test_request_required_integer_int8"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestRequiredIntegerInt8Array"
														r.summary = ""
														r.operationID = "test_request_required_integer_int8_array"
														r.pathPattern = "/test_request_required_integer_int8_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestRequiredIntegerInt8ArrayArray
															r.name = "TestRequestRequiredIntegerInt8ArrayArray"
															r.summary = ""
															r.operationID = "test_request_required_integer_int8_array_array"
															r.pathPattern = "/test_request_required_integer_int8_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestRequiredIntegerInt8Nullable"
														r.summary = ""
														r.operationID = "test_request_required_integer_int8_nullable"
														r.pathPattern = "/test_request_required_integer_int8_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredIntegerInt8NullableArray"
															r.summary = ""
															r.operationID = "test_request_required_integer_int8_nullable_array"
															r.pathPattern = "/test_request_required_integer_int8_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestRequiredIntegerInt8NullableArrayArray
																r.name = "TestRequestRequiredIntegerInt8NullableArrayArray"
																r.summary = ""
																r.operationID = "test_request_required_integer_int8_nullable_array_array"
																r.pathPattern = "/test_request_required_integer_int8_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestRequestRequiredIntegerNullable"
											r.summary = ""
											r.operationID = "test_request_required_integer_nullable"
											r.pathPattern = "/test_request_required_integer_nullable"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestRequiredIntegerNullableArray"
												r.summary = ""
												r.operationID = "test_request_required_integer_nullable_array"
												r.pathPattern = "/test_request_required_integer_nullable_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													// Leaf: TestRequestRequiredIntegerNullableArrayArray
													r.name = "TestRequestRequiredIntegerNullableArrayArray"
													r.summary = ""
													r.operationID = "test_request_required_integer_nullable_array_array"
													r.pathPattern = "/test_request_required_integer_nullable_array_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
										}
									}
								case 'u': // Prefix: "u"
									if l := len("u"); len(elem) >= l && elem[0:l] == "u" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'i': // Prefix: "int"
										if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestRequiredIntegerUint"
												r.summary = ""
												r.operationID = "test_request_required_integer_uint"
												r.pathPattern = "/test_request_required_integer_uint"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '1': // Prefix: "16"
											if l := len("16"); len(elem) >= l && elem[0:l] == "16" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestRequiredIntegerUint16"
													r.summary = ""
													r.operationID = "test_request_required_integer_uint16"
													r.pathPattern = "/test_request_required_integer_uint16"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredIntegerUint16Array"
															r.summary = ""
															r.operationID = "test_request_required_integer_uint16_array"
															r.pathPattern = "/test_request_required_integer_uint16_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestRequiredIntegerUint16ArrayArray
																r.name = "TestRequestRequiredIntegerUint16ArrayArray"
																r.summary = ""
																r.operationID = "test_request_required_integer_uint16_array_array"
																r.pathPattern = "/test_request_required_integer_uint16_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredIntegerUint16Nullable"
															r.summary = ""
															r.operationID = "test_request_required_integer_uint16_nullable"
															r.pathPattern = "/test_request_required_integer_uint16_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestRequestRequiredIntegerUint16NullableArray"
																r.summary = ""
																r.operationID = "test_request_required_integer_uint16_nullable_array"
																r.pathPattern = "/test_request_required_integer_uint16_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	// Leaf: TestRequestRequiredIntegerUint16NullableArrayArray
																	r.name = "TestRequestRequiredIntegerUint16NullableArrayArray"
																	r.summary = ""
																	r.operationID = "test_request_required_integer_uint16_nullable_array_array"
																	r.pathPattern = "/test_request_required_integer_uint16_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
														}
													}
												}
											}
										case '3': // Prefix: "32"
											if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestRequiredIntegerUint32"
													r.summary = ""
													r.operationID = "test_request_required_integer_uint32"
													r.pathPattern = "/test_request_required_integer_uint32"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredIntegerUint32Array"
															r.summary = ""
															r.operationID = "test_request_required_integer_uint32_array"
															r.pathPattern = "/test_request_required_integer_uint32_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestRequiredIntegerUint32ArrayArray
																r.name = "TestRequestRequiredIntegerUint32ArrayArray"
																r.summary = ""
																r.operationID = "test_request_required_integer_uint32_array_array"
																r.pathPattern = "/test_request_required_integer_uint32_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredIntegerUint32Nullable"
															r.summary = ""
															r.operationID = "test_request_required_integer_uint32_nullable"
															r.pathPattern = "/test_request_required_integer_uint32_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestRequestRequiredIntegerUint32NullableArray"
																r.summary = ""
																r.operationID = "test_request_required_integer_uint32_nullable_array"
																r.pathPattern = "/test_request_required_integer_uint32_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	// Leaf: TestRequestRequiredIntegerUint32NullableArrayArray
																	r.name = "TestRequestRequiredIntegerUint32NullableArrayArray"
																	r.summary = ""
																	r.operationID = "test_request_required_integer_uint32_nullable_array_array"
																	r.pathPattern = "/test_request_required_integer_uint32_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
														}
													}
												}
											}
										case '6': // Prefix: "64"
											if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestRequiredIntegerUint64"
													r.summary = ""
													r.operationID = "test_request_required_integer_uint64"
													r.pathPattern = "/test_request_required_integer_uint64"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredIntegerUint64Array"
															r.summary = ""
															r.operationID = "test_request_required_integer_uint64_array"
															r.pathPattern = "/test_request_required_integer_uint64_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestRequiredIntegerUint64ArrayArray
																r.name = "TestRequestRequiredIntegerUint64ArrayArray"
																r.summary = ""
																r.operationID = "test_request_required_integer_uint64_array_array"
																r.pathPattern = "/test_request_required_integer_uint64_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredIntegerUint64Nullable"
															r.summary = ""
															r.operationID = "test_request_required_integer_uint64_nullable"
															r.pathPattern = "/test_request_required_integer_uint64_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestRequestRequiredIntegerUint64NullableArray"
																r.summary = ""
																r.operationID = "test_request_required_integer_uint64_nullable_array"
																r.pathPattern = "/test_request_required_integer_uint64_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	// Leaf: TestRequestRequiredIntegerUint64NullableArrayArray
																	r.name = "TestRequestRequiredIntegerUint64NullableArrayArray"
																	r.summary = ""
																	r.operationID = "test_request_required_integer_uint64_nullable_array_array"
																	r.pathPattern = "/test_request_required_integer_uint64_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
														}
													}
												}
											}
										case '8': // Prefix: "8"
											if l := len("8"); len(elem) >= l && elem[0:l] == "8" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestRequiredIntegerUint8"
													r.summary = ""
													r.operationID = "test_request_required_integer_uint8"
													r.pathPattern = "/test_request_required_integer_uint8"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredIntegerUint8Array"
															r.summary = ""
															r.operationID = "test_request_required_integer_uint8_array"
															r.pathPattern = "/test_request_required_integer_uint8_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestRequiredIntegerUint8ArrayArray
																r.name = "TestRequestRequiredIntegerUint8ArrayArray"
																r.summary = ""
																r.operationID = "test_request_required_integer_uint8_array_array"
																r.pathPattern = "/test_request_required_integer_uint8_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredIntegerUint8Nullable"
															r.summary = ""
															r.operationID = "test_request_required_integer_uint8_nullable"
															r.pathPattern = "/test_request_required_integer_uint8_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestRequestRequiredIntegerUint8NullableArray"
																r.summary = ""
																r.operationID = "test_request_required_integer_uint8_nullable_array"
																r.pathPattern = "/test_request_required_integer_uint8_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	// Leaf: TestRequestRequiredIntegerUint8NullableArrayArray
																	r.name = "TestRequestRequiredIntegerUint8NullableArrayArray"
																	r.summary = ""
																	r.operationID = "test_request_required_integer_uint8_nullable_array_array"
																	r.pathPattern = "/test_request_required_integer_uint8_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
														}
													}
												}
											}
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestRequiredIntegerUintArray"
														r.summary = ""
														r.operationID = "test_request_required_integer_uint_array"
														r.pathPattern = "/test_request_required_integer_uint_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestRequiredIntegerUintArrayArray
															r.name = "TestRequestRequiredIntegerUintArrayArray"
															r.summary = ""
															r.operationID = "test_request_required_integer_uint_array_array"
															r.pathPattern = "/test_request_required_integer_uint_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestRequiredIntegerUintNullable"
														r.summary = ""
														r.operationID = "test_request_required_integer_uint_nullable"
														r.pathPattern = "/test_request_required_integer_uint_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredIntegerUintNullableArray"
															r.summary = ""
															r.operationID = "test_request_required_integer_uint_nullable_array"
															r.pathPattern = "/test_request_required_integer_uint_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestRequiredIntegerUintNullableArrayArray
																r.name = "TestRequestRequiredIntegerUintNullableArrayArray"
																r.summary = ""
																r.operationID = "test_request_required_integer_uint_nullable_array_array"
																r.pathPattern = "/test_request_required_integer_uint_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										}
									case 'n': // Prefix: "nix"
										if l := len("nix"); len(elem) >= l && elem[0:l] == "nix" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestRequiredIntegerUnix"
												r.summary = ""
												r.operationID = "test_request_required_integer_unix"
												r.pathPattern = "/test_request_required_integer_unix"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '-': // Prefix: "-"
											if l := len("-"); len(elem) >= l && elem[0:l] == "-" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'm': // Prefix: "mi"
												if l := len("mi"); len(elem) >= l && elem[0:l] == "mi" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'c': // Prefix: "cro"
													if l := len("cro"); len(elem) >= l && elem[0:l] == "cro" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredIntegerUnixMicro"
															r.summary = ""
															r.operationID = "test_request_required_integer_unix-micro"
															r.pathPattern = "/test_request_required_integer_unix-micro"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_"
														if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															break
														}
														switch elem[0] {
														case 'a': // Prefix: "array"
															if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	r.name = "TestRequestRequiredIntegerUnixMicroArray"
																	r.summary = ""
																	r.operationID = "test_request_required_integer_unix-micro_array"
																	r.pathPattern = "/test_request_required_integer_unix-micro_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
															switch elem[0] {
															case '_': // Prefix: "_array"
																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	switch method {
																	case "POST":
																		// Leaf: TestRequestRequiredIntegerUnixMicroArrayArray
																		r.name = "TestRequestRequiredIntegerUnixMicroArrayArray"
																		r.summary = ""
																		r.operationID = "test_request_required_integer_unix-micro_array_array"
																		r.pathPattern = "/test_request_required_integer_unix-micro_array_array"
																		r.args = args
																		r.count = 0
																		return r, true
																	default:
																		return
																	}
																}
															}
														case 'n': // Prefix: "nullable"
															if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	r.name = "TestRequestRequiredIntegerUnixMicroNullable"
																	r.summary = ""
																	r.operationID = "test_request_required_integer_unix-micro_nullable"
																	r.pathPattern = "/test_request_required_integer_unix-micro_nullable"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
															switch elem[0] {
															case '_': // Prefix: "_array"
																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	switch method {
																	case "POST":
																		r.name = "TestRequestRequiredIntegerUnixMicroNullableArray"
																		r.summary = ""
																		r.operationID = "test_request_required_integer_unix-micro_nullable_array"
																		r.pathPattern = "/test_request_required_integer_unix-micro_nullable_array"
																		r.args = args
																		r.count = 0
																		return r, true
																	default:
																		return
																	}
																}
																switch elem[0] {
																case '_': // Prefix: "_array"
																	if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																		elem = elem[l:]
																	} else {
																		break
																	}

																	if len(elem) == 0 {
																		switch method {
																		case "POST":
																			// Leaf: TestRequestRequiredIntegerUnixMicroNullableArrayArray
																			r.name = "TestRequestRequiredIntegerUnixMicroNullableArrayArray"
																			r.summary = ""
																			r.operationID = "test_request_required_integer_unix-micro_nullable_array_array"
																			r.pathPattern = "/test_request_required_integer_unix-micro_nullable_array_array"
																			r.args = args
																			r.count = 0
																			return r, true
																		default:
																			return
																		}
																	}
																}
															}
														}
													}
												case 'l': // Prefix: "lli"
													if l := len("lli"); len(elem) >= l && elem[0:l] == "lli" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredIntegerUnixMilli"
															r.summary = ""
															r.operationID = "test_request_required_integer_unix-milli"
															r.pathPattern = "/test_request_required_integer_unix-milli"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_"
														if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															break
														}
														switch elem[0] {
														case 'a': // Prefix: "array"
															if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	r.name = "TestRequestRequiredIntegerUnixMilliArray"
																	r.summary = ""
																	r.operationID = "test_request_required_integer_unix-milli_array"
																	r.pathPattern = "/test_request_required_integer_unix-milli_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
															switch elem[0] {
															case '_': // Prefix: "_array"
																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	switch method {
																	case "POST":
																		// Leaf: TestRequestRequiredIntegerUnixMilliArrayArray
																		r.name = "TestRequestRequiredIntegerUnixMilliArrayArray"
																		r.summary = ""
																		r.operationID = "test_request_required_integer_unix-milli_array_array"
																		r.pathPattern = "/test_request_required_integer_unix-milli_array_array"
																		r.args = args
																		r.count = 0
																		return r, true
																	default:
																		return
																	}
																}
															}
														case 'n': // Prefix: "nullable"
															if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	r.name = "TestRequestRequiredIntegerUnixMilliNullable"
																	r.summary = ""
																	r.operationID = "test_request_required_integer_unix-milli_nullable"
																	r.pathPattern = "/test_request_required_integer_unix-milli_nullable"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
															switch elem[0] {
															case '_': // Prefix: "_array"
																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	switch method {
																	case "POST":
																		r.name = "TestRequestRequiredIntegerUnixMilliNullableArray"
																		r.summary = ""
																		r.operationID = "test_request_required_integer_unix-milli_nullable_array"
																		r.pathPattern = "/test_request_required_integer_unix-milli_nullable_array"
																		r.args = args
																		r.count = 0
																		return r, true
																	default:
																		return
																	}
																}
																switch elem[0] {
																case '_': // Prefix: "_array"
																	if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																		elem = elem[l:]
																	} else {
																		break
																	}

																	if len(elem) == 0 {
																		switch method {
																		case "POST":
																			// Leaf: TestRequestRequiredIntegerUnixMilliNullableArrayArray
																			r.name = "TestRequestRequiredIntegerUnixMilliNullableArrayArray"
																			r.summary = ""
																			r.operationID = "test_request_required_integer_unix-milli_nullable_array_array"
																			r.pathPattern = "/test_request_required_integer_unix-milli_nullable_array_array"
																			r.args = args
																			r.count = 0
																			return r, true
																		default:
																			return
																		}
																	}
																}
															}
														}
													}
												}
											case 'n': // Prefix: "nano"
												if l := len("nano"); len(elem) >= l && elem[0:l] == "nano" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestRequiredIntegerUnixNano"
														r.summary = ""
														r.operationID = "test_request_required_integer_unix-nano"
														r.pathPattern = "/test_request_required_integer_unix-nano"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_"
													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"
														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestRequestRequiredIntegerUnixNanoArray"
																r.summary = ""
																r.operationID = "test_request_required_integer_unix-nano_array"
																r.pathPattern = "/test_request_required_integer_unix-nano_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	// Leaf: TestRequestRequiredIntegerUnixNanoArrayArray
																	r.name = "TestRequestRequiredIntegerUnixNanoArrayArray"
																	r.summary = ""
																	r.operationID = "test_request_required_integer_unix-nano_array_array"
																	r.pathPattern = "/test_request_required_integer_unix-nano_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
														}
													case 'n': // Prefix: "nullable"
														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestRequestRequiredIntegerUnixNanoNullable"
																r.summary = ""
																r.operationID = "test_request_required_integer_unix-nano_nullable"
																r.pathPattern = "/test_request_required_integer_unix-nano_nullable"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	r.name = "TestRequestRequiredIntegerUnixNanoNullableArray"
																	r.summary = ""
																	r.operationID = "test_request_required_integer_unix-nano_nullable_array"
																	r.pathPattern = "/test_request_required_integer_unix-nano_nullable_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
															switch elem[0] {
															case '_': // Prefix: "_array"
																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	switch method {
																	case "POST":
																		// Leaf: TestRequestRequiredIntegerUnixNanoNullableArrayArray
																		r.name = "TestRequestRequiredIntegerUnixNanoNullableArrayArray"
																		r.summary = ""
																		r.operationID = "test_request_required_integer_unix-nano_nullable_array_array"
																		r.pathPattern = "/test_request_required_integer_unix-nano_nullable_array_array"
																		r.args = args
																		r.count = 0
																		return r, true
																	default:
																		return
																	}
																}
															}
														}
													}
												}
											case 's': // Prefix: "seconds"
												if l := len("seconds"); len(elem) >= l && elem[0:l] == "seconds" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestRequiredIntegerUnixSeconds"
														r.summary = ""
														r.operationID = "test_request_required_integer_unix-seconds"
														r.pathPattern = "/test_request_required_integer_unix-seconds"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_"
													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"
														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestRequestRequiredIntegerUnixSecondsArray"
																r.summary = ""
																r.operationID = "test_request_required_integer_unix-seconds_array"
																r.pathPattern = "/test_request_required_integer_unix-seconds_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	// Leaf: TestRequestRequiredIntegerUnixSecondsArrayArray
																	r.name = "TestRequestRequiredIntegerUnixSecondsArrayArray"
																	r.summary = ""
																	r.operationID = "test_request_required_integer_unix-seconds_array_array"
																	r.pathPattern = "/test_request_required_integer_unix-seconds_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
														}
													case 'n': // Prefix: "nullable"
														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestRequestRequiredIntegerUnixSecondsNullable"
																r.summary = ""
																r.operationID = "test_request_required_integer_unix-seconds_nullable"
																r.pathPattern = "/test_request_required_integer_unix-seconds_nullable"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	r.name = "TestRequestRequiredIntegerUnixSecondsNullableArray"
																	r.summary = ""
																	r.operationID = "test_request_required_integer_unix-seconds_nullable_array"
																	r.pathPattern = "/test_request_required_integer_unix-seconds_nullable_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
															switch elem[0] {
															case '_': // Prefix: "_array"
																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	switch method {
																	case "POST":
																		// Leaf: TestRequestRequiredIntegerUnixSecondsNullableArrayArray
																		r.name = "TestRequestRequiredIntegerUnixSecondsNullableArrayArray"
																		r.summary = ""
																		r.operationID = "test_request_required_integer_unix-seconds_nullable_array_array"
																		r.pathPattern = "/test_request_required_integer_unix-seconds_nullable_array_array"
																		r.args = args
																		r.count = 0
																		return r, true
																	default:
																		return
																	}
																}
															}
														}
													}
												}
											}
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestRequiredIntegerUnixArray"
														r.summary = ""
														r.operationID = "test_request_required_integer_unix_array"
														r.pathPattern = "/test_request_required_integer_unix_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestRequiredIntegerUnixArrayArray
															r.name = "TestRequestRequiredIntegerUnixArrayArray"
															r.summary = ""
															r.operationID = "test_request_required_integer_unix_array_array"
															r.pathPattern = "/test_request_required_integer_unix_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestRequiredIntegerUnixNullable"
														r.summary = ""
														r.operationID = "test_request_required_integer_unix_nullable"
														r.pathPattern = "/test_request_required_integer_unix_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredIntegerUnixNullableArray"
															r.summary = ""
															r.operationID = "test_request_required_integer_unix_nullable_array"
															r.pathPattern = "/test_request_required_integer_unix_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestRequiredIntegerUnixNullableArrayArray
																r.name = "TestRequestRequiredIntegerUnixNullableArrayArray"
																r.summary = ""
																r.operationID = "test_request_required_integer_unix_nullable_array_array"
																r.pathPattern = "/test_request_required_integer_unix_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										}
									}
								}
							}
						case 'n': // Prefix: "nu"
							if l := len("nu"); len(elem) >= l && elem[0:l] == "nu" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'l': // Prefix: "ll"
								if l := len("ll"); len(elem) >= l && elem[0:l] == "ll" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = "TestRequestRequiredNull"
										r.summary = ""
										r.operationID = "test_request_required_null"
										r.pathPattern = "/test_request_required_null"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestRequiredNullArray"
												r.summary = ""
												r.operationID = "test_request_required_null_array"
												r.pathPattern = "/test_request_required_null_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													// Leaf: TestRequestRequiredNullArrayArray
													r.name = "TestRequestRequiredNullArrayArray"
													r.summary = ""
													r.operationID = "test_request_required_null_array_array"
													r.pathPattern = "/test_request_required_null_array_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestRequiredNullNullable"
												r.summary = ""
												r.operationID = "test_request_required_null_nullable"
												r.pathPattern = "/test_request_required_null_nullable"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestRequiredNullNullableArray"
													r.summary = ""
													r.operationID = "test_request_required_null_nullable_array"
													r.pathPattern = "/test_request_required_null_nullable_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestRequestRequiredNullNullableArrayArray
														r.name = "TestRequestRequiredNullNullableArrayArray"
														r.summary = ""
														r.operationID = "test_request_required_null_nullable_array_array"
														r.pathPattern = "/test_request_required_null_nullable_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										}
									}
								}
							case 'm': // Prefix: "mber"
								if l := len("mber"); len(elem) >= l && elem[0:l] == "mber" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = "TestRequestRequiredNumber"
										r.summary = ""
										r.operationID = "test_request_required_number"
										r.pathPattern = "/test_request_required_number"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestRequiredNumberArray"
												r.summary = ""
												r.operationID = "test_request_required_number_array"
												r.pathPattern = "/test_request_required_number_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													// Leaf: TestRequestRequiredNumberArrayArray
													r.name = "TestRequestRequiredNumberArrayArray"
													r.summary = ""
													r.operationID = "test_request_required_number_array_array"
													r.pathPattern = "/test_request_required_number_array_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
										}
									case 'd': // Prefix: "double"
										if l := len("double"); len(elem) >= l && elem[0:l] == "double" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestRequiredNumberDouble"
												r.summary = ""
												r.operationID = "test_request_required_number_double"
												r.pathPattern = "/test_request_required_number_double"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestRequiredNumberDoubleArray"
														r.summary = ""
														r.operationID = "test_request_required_number_double_array"
														r.pathPattern = "/test_request_required_number_double_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestRequiredNumberDoubleArrayArray
															r.name = "TestRequestRequiredNumberDoubleArrayArray"
															r.summary = ""
															r.operationID = "test_request_required_number_double_array_array"
															r.pathPattern = "/test_request_required_number_double_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestRequiredNumberDoubleNullable"
														r.summary = ""
														r.operationID = "test_request_required_number_double_nullable"
														r.pathPattern = "/test_request_required_number_double_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredNumberDoubleNullableArray"
															r.summary = ""
															r.operationID = "test_request_required_number_double_nullable_array"
															r.pathPattern = "/test_request_required_number_double_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestRequiredNumberDoubleNullableArrayArray
																r.name = "TestRequestRequiredNumberDoubleNullableArrayArray"
																r.summary = ""
																r.operationID = "test_request_required_number_double_nullable_array_array"
																r.pathPattern = "/test_request_required_number_double_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										}
									case 'f': // Prefix: "float"
										if l := len("float"); len(elem) >= l && elem[0:l] == "float" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestRequiredNumberFloat"
												r.summary = ""
												r.operationID = "test_request_required_number_float"
												r.pathPattern = "/test_request_required_number_float"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestRequiredNumberFloatArray"
														r.summary = ""
														r.operationID = "test_request_required_number_float_array"
														r.pathPattern = "/test_request_required_number_float_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestRequiredNumberFloatArrayArray
															r.name = "TestRequestRequiredNumberFloatArrayArray"
															r.summary = ""
															r.operationID = "test_request_required_number_float_array_array"
															r.pathPattern = "/test_request_required_number_float_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestRequiredNumberFloatNullable"
														r.summary = ""
														r.operationID = "test_request_required_number_float_nullable"
														r.pathPattern = "/test_request_required_number_float_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredNumberFloatNullableArray"
															r.summary = ""
															r.operationID = "test_request_required_number_float_nullable_array"
															r.pathPattern = "/test_request_required_number_float_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestRequiredNumberFloatNullableArrayArray
																r.name = "TestRequestRequiredNumberFloatNullableArrayArray"
																r.summary = ""
																r.operationID = "test_request_required_number_float_nullable_array_array"
																r.pathPattern = "/test_request_required_number_float_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										}
									case 'i': // Prefix: "int"
										if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '3': // Prefix: "32"
											if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestRequiredNumberInt32"
													r.summary = ""
													r.operationID = "test_request_required_number_int32"
													r.pathPattern = "/test_request_required_number_int32"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredNumberInt32Array"
															r.summary = ""
															r.operationID = "test_request_required_number_int32_array"
															r.pathPattern = "/test_request_required_number_int32_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestRequiredNumberInt32ArrayArray
																r.name = "TestRequestRequiredNumberInt32ArrayArray"
																r.summary = ""
																r.operationID = "test_request_required_number_int32_array_array"
																r.pathPattern = "/test_request_required_number_int32_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredNumberInt32Nullable"
															r.summary = ""
															r.operationID = "test_request_required_number_int32_nullable"
															r.pathPattern = "/test_request_required_number_int32_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestRequestRequiredNumberInt32NullableArray"
																r.summary = ""
																r.operationID = "test_request_required_number_int32_nullable_array"
																r.pathPattern = "/test_request_required_number_int32_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	// Leaf: TestRequestRequiredNumberInt32NullableArrayArray
																	r.name = "TestRequestRequiredNumberInt32NullableArrayArray"
																	r.summary = ""
																	r.operationID = "test_request_required_number_int32_nullable_array_array"
																	r.pathPattern = "/test_request_required_number_int32_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
														}
													}
												}
											}
										case '6': // Prefix: "64"
											if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestRequiredNumberInt64"
													r.summary = ""
													r.operationID = "test_request_required_number_int64"
													r.pathPattern = "/test_request_required_number_int64"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredNumberInt64Array"
															r.summary = ""
															r.operationID = "test_request_required_number_int64_array"
															r.pathPattern = "/test_request_required_number_int64_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestRequiredNumberInt64ArrayArray
																r.name = "TestRequestRequiredNumberInt64ArrayArray"
																r.summary = ""
																r.operationID = "test_request_required_number_int64_array_array"
																r.pathPattern = "/test_request_required_number_int64_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredNumberInt64Nullable"
															r.summary = ""
															r.operationID = "test_request_required_number_int64_nullable"
															r.pathPattern = "/test_request_required_number_int64_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestRequestRequiredNumberInt64NullableArray"
																r.summary = ""
																r.operationID = "test_request_required_number_int64_nullable_array"
																r.pathPattern = "/test_request_required_number_int64_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	// Leaf: TestRequestRequiredNumberInt64NullableArrayArray
																	r.name = "TestRequestRequiredNumberInt64NullableArrayArray"
																	r.summary = ""
																	r.operationID = "test_request_required_number_int64_nullable_array_array"
																	r.pathPattern = "/test_request_required_number_int64_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
														}
													}
												}
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestRequiredNumberNullable"
												r.summary = ""
												r.operationID = "test_request_required_number_nullable"
												r.pathPattern = "/test_request_required_number_nullable"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestRequiredNumberNullableArray"
													r.summary = ""
													r.operationID = "test_request_required_number_nullable_array"
													r.pathPattern = "/test_request_required_number_nullable_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestRequestRequiredNumberNullableArrayArray
														r.name = "TestRequestRequiredNumberNullableArrayArray"
														r.summary = ""
														r.operationID = "test_request_required_number_nullable_array_array"
														r.pathPattern = "/test_request_required_number_nullable_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										}
									}
								}
							}
						case 's': // Prefix: "string"
							if l := len("string"); len(elem) >= l && elem[0:l] == "string" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									r.name = "TestRequestRequiredString"
									r.summary = ""
									r.operationID = "test_request_required_string"
									r.pathPattern = "/test_request_required_string"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestRequestRequiredStringArray"
											r.summary = ""
											r.operationID = "test_request_required_string_array"
											r.pathPattern = "/test_request_required_string_array"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												// Leaf: TestRequestRequiredStringArrayArray
												r.name = "TestRequestRequiredStringArrayArray"
												r.summary = ""
												r.operationID = "test_request_required_string_array_array"
												r.pathPattern = "/test_request_required_string_array_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
									}
								case 'b': // Prefix: "b"
									if l := len("b"); len(elem) >= l && elem[0:l] == "b" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "ase64"
										if l := len("ase64"); len(elem) >= l && elem[0:l] == "ase64" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestRequiredStringBase64"
												r.summary = ""
												r.operationID = "test_request_required_string_base64"
												r.pathPattern = "/test_request_required_string_base64"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestRequiredStringBase64Array"
														r.summary = ""
														r.operationID = "test_request_required_string_base64_array"
														r.pathPattern = "/test_request_required_string_base64_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestRequiredStringBase64ArrayArray
															r.name = "TestRequestRequiredStringBase64ArrayArray"
															r.summary = ""
															r.operationID = "test_request_required_string_base64_array_array"
															r.pathPattern = "/test_request_required_string_base64_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestRequiredStringBase64Nullable"
														r.summary = ""
														r.operationID = "test_request_required_string_base64_nullable"
														r.pathPattern = "/test_request_required_string_base64_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredStringBase64NullableArray"
															r.summary = ""
															r.operationID = "test_request_required_string_base64_nullable_array"
															r.pathPattern = "/test_request_required_string_base64_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestRequiredStringBase64NullableArrayArray
																r.name = "TestRequestRequiredStringBase64NullableArrayArray"
																r.summary = ""
																r.operationID = "test_request_required_string_base64_nullable_array_array"
																r.pathPattern = "/test_request_required_string_base64_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										}
									case 'i': // Prefix: "inary"
										if l := len("inary"); len(elem) >= l && elem[0:l] == "inary" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestRequiredStringBinary"
												r.summary = ""
												r.operationID = "test_request_required_string_binary"
												r.pathPattern = "/test_request_required_string_binary"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestRequiredStringBinaryArray"
														r.summary = ""
														r.operationID = "test_request_required_string_binary_array"
														r.pathPattern = "/test_request_required_string_binary_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestRequiredStringBinaryArrayArray
															r.name = "TestRequestRequiredStringBinaryArrayArray"
															r.summary = ""
															r.operationID = "test_request_required_string_binary_array_array"
															r.pathPattern = "/test_request_required_string_binary_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestRequiredStringBinaryNullable"
														r.summary = ""
														r.operationID = "test_request_required_string_binary_nullable"
														r.pathPattern = "/test_request_required_string_binary_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredStringBinaryNullableArray"
															r.summary = ""
															r.operationID = "test_request_required_string_binary_nullable_array"
															r.pathPattern = "/test_request_required_string_binary_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestRequiredStringBinaryNullableArrayArray
																r.name = "TestRequestRequiredStringBinaryNullableArrayArray"
																r.summary = ""
																r.operationID = "test_request_required_string_binary_nullable_array_array"
																r.pathPattern = "/test_request_required_string_binary_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										}
									case 'y': // Prefix: "yte"
										if l := len("yte"); len(elem) >= l && elem[0:l] == "yte" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestRequiredStringByte"
												r.summary = ""
												r.operationID = "test_request_required_string_byte"
												r.pathPattern = "/test_request_required_string_byte"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestRequiredStringByteArray"
														r.summary = ""
														r.operationID = "test_request_required_string_byte_array"
														r.pathPattern = "/test_request_required_string_byte_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestRequiredStringByteArrayArray
															r.name = "TestRequestRequiredStringByteArrayArray"
															r.summary = ""
															r.operationID = "test_request_required_string_byte_array_array"
															r.pathPattern = "/test_request_required_string_byte_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestRequiredStringByteNullable"
														r.summary = ""
														r.operationID = "test_request_required_string_byte_nullable"
														r.pathPattern = "/test_request_required_string_byte_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredStringByteNullableArray"
															r.summary = ""
															r.operationID = "test_request_required_string_byte_nullable_array"
															r.pathPattern = "/test_request_required_string_byte_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestRequiredStringByteNullableArrayArray
																r.name = "TestRequestRequiredStringByteNullableArrayArray"
																r.summary = ""
																r.operationID = "test_request_required_string_byte_nullable_array_array"
																r.pathPattern = "/test_request_required_string_byte_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										}
									}
								case 'd': // Prefix: "d"
									if l := len("d"); len(elem) >= l && elem[0:l] == "d" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "ate"
										if l := len("ate"); len(elem) >= l && elem[0:l] == "ate" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestRequiredStringDate"
												r.summary = ""
												r.operationID = "test_request_required_string_date"
												r.pathPattern = "/test_request_required_string_date"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '-': // Prefix: "-time"
											if l := len("-time"); len(elem) >= l && elem[0:l] == "-time" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestRequiredStringDateTime"
													r.summary = ""
													r.operationID = "test_request_required_string_date-time"
													r.pathPattern = "/test_request_required_string_date-time"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredStringDateTimeArray"
															r.summary = ""
															r.operationID = "test_request_required_string_date-time_array"
															r.pathPattern = "/test_request_required_string_date-time_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestRequiredStringDateTimeArrayArray
																r.name = "TestRequestRequiredStringDateTimeArrayArray"
																r.summary = ""
																r.operationID = "test_request_required_string_date-time_array_array"
																r.pathPattern = "/test_request_required_string_date-time_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredStringDateTimeNullable"
															r.summary = ""
															r.operationID = "test_request_required_string_date-time_nullable"
															r.pathPattern = "/test_request_required_string_date-time_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestRequestRequiredStringDateTimeNullableArray"
																r.summary = ""
																r.operationID = "test_request_required_string_date-time_nullable_array"
																r.pathPattern = "/test_request_required_string_date-time_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	// Leaf: TestRequestRequiredStringDateTimeNullableArrayArray
																	r.name = "TestRequestRequiredStringDateTimeNullableArrayArray"
																	r.summary = ""
																	r.operationID = "test_request_required_string_date-time_nullable_array_array"
																	r.pathPattern = "/test_request_required_string_date-time_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
														}
													}
												}
											}
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestRequiredStringDateArray"
														r.summary = ""
														r.operationID = "test_request_required_string_date_array"
														r.pathPattern = "/test_request_required_string_date_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestRequiredStringDateArrayArray
															r.name = "TestRequestRequiredStringDateArrayArray"
															r.summary = ""
															r.operationID = "test_request_required_string_date_array_array"
															r.pathPattern = "/test_request_required_string_date_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestRequiredStringDateNullable"
														r.summary = ""
														r.operationID = "test_request_required_string_date_nullable"
														r.pathPattern = "/test_request_required_string_date_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredStringDateNullableArray"
															r.summary = ""
															r.operationID = "test_request_required_string_date_nullable_array"
															r.pathPattern = "/test_request_required_string_date_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestRequiredStringDateNullableArrayArray
																r.name = "TestRequestRequiredStringDateNullableArrayArray"
																r.summary = ""
																r.operationID = "test_request_required_string_date_nullable_array_array"
																r.pathPattern = "/test_request_required_string_date_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										}
									case 'u': // Prefix: "uration"
										if l := len("uration"); len(elem) >= l && elem[0:l] == "uration" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestRequiredStringDuration"
												r.summary = ""
												r.operationID = "test_request_required_string_duration"
												r.pathPattern = "/test_request_required_string_duration"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestRequiredStringDurationArray"
														r.summary = ""
														r.operationID = "test_request_required_string_duration_array"
														r.pathPattern = "/test_request_required_string_duration_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestRequiredStringDurationArrayArray
															r.name = "TestRequestRequiredStringDurationArrayArray"
															r.summary = ""
															r.operationID = "test_request_required_string_duration_array_array"
															r.pathPattern = "/test_request_required_string_duration_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestRequiredStringDurationNullable"
														r.summary = ""
														r.operationID = "test_request_required_string_duration_nullable"
														r.pathPattern = "/test_request_required_string_duration_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredStringDurationNullableArray"
															r.summary = ""
															r.operationID = "test_request_required_string_duration_nullable_array"
															r.pathPattern = "/test_request_required_string_duration_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestRequiredStringDurationNullableArrayArray
																r.name = "TestRequestRequiredStringDurationNullableArrayArray"
																r.summary = ""
																r.operationID = "test_request_required_string_duration_nullable_array_array"
																r.pathPattern = "/test_request_required_string_duration_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										}
									}
								case 'e': // Prefix: "email"
									if l := len("email"); len(elem) >= l && elem[0:l] == "email" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestRequestRequiredStringEmail"
											r.summary = ""
											r.operationID = "test_request_required_string_email"
											r.pathPattern = "/test_request_required_string_email"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestRequiredStringEmailArray"
													r.summary = ""
													r.operationID = "test_request_required_string_email_array"
													r.pathPattern = "/test_request_required_string_email_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestRequestRequiredStringEmailArrayArray
														r.name = "TestRequestRequiredStringEmailArrayArray"
														r.summary = ""
														r.operationID = "test_request_required_string_email_array_array"
														r.pathPattern = "/test_request_required_string_email_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestRequiredStringEmailNullable"
													r.summary = ""
													r.operationID = "test_request_required_string_email_nullable"
													r.pathPattern = "/test_request_required_string_email_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestRequiredStringEmailNullableArray"
														r.summary = ""
														r.operationID = "test_request_required_string_email_nullable_array"
														r.pathPattern = "/test_request_required_string_email_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestRequiredStringEmailNullableArrayArray
															r.name = "TestRequestRequiredStringEmailNullableArrayArray"
															r.summary = ""
															r.operationID = "test_request_required_string_email_nullable_array_array"
															r.pathPattern = "/test_request_required_string_email_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											}
										}
									}
								case 'f': // Prefix: "float"
									if l := len("float"); len(elem) >= l && elem[0:l] == "float" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '3': // Prefix: "32"
										if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestRequiredStringFloat32"
												r.summary = ""
												r.operationID = "test_request_required_string_float32"
												r.pathPattern = "/test_request_required_string_float32"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestRequiredStringFloat32Array"
														r.summary = ""
														r.operationID = "test_request_required_string_float32_array"
														r.pathPattern = "/test_request_required_string_float32_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestRequiredStringFloat32ArrayArray
															r.name = "TestRequestRequiredStringFloat32ArrayArray"
															r.summary = ""
															r.operationID = "test_request_required_string_float32_array_array"
															r.pathPattern = "/test_request_required_string_float32_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestRequiredStringFloat32Nullable"
														r.summary = ""
														r.operationID = "test_request_required_string_float32_nullable"
														r.pathPattern = "/test_request_required_string_float32_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredStringFloat32NullableArray"
															r.summary = ""
															r.operationID = "test_request_required_string_float32_nullable_array"
															r.pathPattern = "/test_request_required_string_float32_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestRequiredStringFloat32NullableArrayArray
																r.name = "TestRequestRequiredStringFloat32NullableArrayArray"
																r.summary = ""
																r.operationID = "test_request_required_string_float32_nullable_array_array"
																r.pathPattern = "/test_request_required_string_float32_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										}
									case '6': // Prefix: "64"
										if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestRequiredStringFloat64"
												r.summary = ""
												r.operationID = "test_request_required_string_float64"
												r.pathPattern = "/test_request_required_string_float64"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestRequiredStringFloat64Array"
														r.summary = ""
														r.operationID = "test_request_required_string_float64_array"
														r.pathPattern = "/test_request_required_string_float64_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestRequiredStringFloat64ArrayArray
															r.name = "TestRequestRequiredStringFloat64ArrayArray"
															r.summary = ""
															r.operationID = "test_request_required_string_float64_array_array"
															r.pathPattern = "/test_request_required_string_float64_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestRequiredStringFloat64Nullable"
														r.summary = ""
														r.operationID = "test_request_required_string_float64_nullable"
														r.pathPattern = "/test_request_required_string_float64_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredStringFloat64NullableArray"
															r.summary = ""
															r.operationID = "test_request_required_string_float64_nullable_array"
															r.pathPattern = "/test_request_required_string_float64_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestRequiredStringFloat64NullableArrayArray
																r.name = "TestRequestRequiredStringFloat64NullableArrayArray"
																r.summary = ""
																r.operationID = "test_request_required_string_float64_nullable_array_array"
																r.pathPattern = "/test_request_required_string_float64_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										}
									}
								case 'h': // Prefix: "hostname"
									if l := len("hostname"); len(elem) >= l && elem[0:l] == "hostname" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestRequestRequiredStringHostname"
											r.summary = ""
											r.operationID = "test_request_required_string_hostname"
											r.pathPattern = "/test_request_required_string_hostname"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestRequiredStringHostnameArray"
													r.summary = ""
													r.operationID = "test_request_required_string_hostname_array"
													r.pathPattern = "/test_request_required_string_hostname_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestRequestRequiredStringHostnameArrayArray
														r.name = "TestRequestRequiredStringHostnameArrayArray"
														r.summary = ""
														r.operationID = "test_request_required_string_hostname_array_array"
														r.pathPattern = "/test_request_required_string_hostname_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestRequiredStringHostnameNullable"
													r.summary = ""
													r.operationID = "test_request_required_string_hostname_nullable"
													r.pathPattern = "/test_request_required_string_hostname_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestRequiredStringHostnameNullableArray"
														r.summary = ""
														r.operationID = "test_request_required_string_hostname_nullable_array"
														r.pathPattern = "/test_request_required_string_hostname_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestRequiredStringHostnameNullableArrayArray
															r.name = "TestRequestRequiredStringHostnameNullableArrayArray"
															r.summary = ""
															r.operationID = "test_request_required_string_hostname_nullable_array_array"
															r.pathPattern = "/test_request_required_string_hostname_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											}
										}
									}
								case 'i': // Prefix: "i"
									if l := len("i"); len(elem) >= l && elem[0:l] == "i" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'n': // Prefix: "nt"
										if l := len("nt"); len(elem) >= l && elem[0:l] == "nt" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestRequiredStringInt"
												r.summary = ""
												r.operationID = "test_request_required_string_int"
												r.pathPattern = "/test_request_required_string_int"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '1': // Prefix: "16"
											if l := len("16"); len(elem) >= l && elem[0:l] == "16" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestRequiredStringInt16"
													r.summary = ""
													r.operationID = "test_request_required_string_int16"
													r.pathPattern = "/test_request_required_string_int16"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredStringInt16Array"
															r.summary = ""
															r.operationID = "test_request_required_string_int16_array"
															r.pathPattern = "/test_request_required_string_int16_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestRequiredStringInt16ArrayArray
																r.name = "TestRequestRequiredStringInt16ArrayArray"
																r.summary = ""
																r.operationID = "test_request_required_string_int16_array_array"
																r.pathPattern = "/test_request_required_string_int16_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredStringInt16Nullable"
															r.summary = ""
															r.operationID = "test_request_required_string_int16_nullable"
															r.pathPattern = "/test_request_required_string_int16_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestRequestRequiredStringInt16NullableArray"
																r.summary = ""
																r.operationID = "test_request_required_string_int16_nullable_array"
																r.pathPattern = "/test_request_required_string_int16_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	// Leaf: TestRequestRequiredStringInt16NullableArrayArray
																	r.name = "TestRequestRequiredStringInt16NullableArrayArray"
																	r.summary = ""
																	r.operationID = "test_request_required_string_int16_nullable_array_array"
																	r.pathPattern = "/test_request_required_string_int16_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
														}
													}
												}
											}
										case '3': // Prefix: "32"
											if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestRequiredStringInt32"
													r.summary = ""
													r.operationID = "test_request_required_string_int32"
													r.pathPattern = "/test_request_required_string_int32"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredStringInt32Array"
															r.summary = ""
															r.operationID = "test_request_required_string_int32_array"
															r.pathPattern = "/test_request_required_string_int32_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestRequiredStringInt32ArrayArray
																r.name = "TestRequestRequiredStringInt32ArrayArray"
																r.summary = ""
																r.operationID = "test_request_required_string_int32_array_array"
																r.pathPattern = "/test_request_required_string_int32_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredStringInt32Nullable"
															r.summary = ""
															r.operationID = "test_request_required_string_int32_nullable"
															r.pathPattern = "/test_request_required_string_int32_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestRequestRequiredStringInt32NullableArray"
																r.summary = ""
																r.operationID = "test_request_required_string_int32_nullable_array"
																r.pathPattern = "/test_request_required_string_int32_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	// Leaf: TestRequestRequiredStringInt32NullableArrayArray
																	r.name = "TestRequestRequiredStringInt32NullableArrayArray"
																	r.summary = ""
																	r.operationID = "test_request_required_string_int32_nullable_array_array"
																	r.pathPattern = "/test_request_required_string_int32_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
														}
													}
												}
											}
										case '6': // Prefix: "64"
											if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestRequiredStringInt64"
													r.summary = ""
													r.operationID = "test_request_required_string_int64"
													r.pathPattern = "/test_request_required_string_int64"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredStringInt64Array"
															r.summary = ""
															r.operationID = "test_request_required_string_int64_array"
															r.pathPattern = "/test_request_required_string_int64_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestRequiredStringInt64ArrayArray
																r.name = "TestRequestRequiredStringInt64ArrayArray"
																r.summary = ""
																r.operationID = "test_request_required_string_int64_array_array"
																r.pathPattern = "/test_request_required_string_int64_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredStringInt64Nullable"
															r.summary = ""
															r.operationID = "test_request_required_string_int64_nullable"
															r.pathPattern = "/test_request_required_string_int64_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestRequestRequiredStringInt64NullableArray"
																r.summary = ""
																r.operationID = "test_request_required_string_int64_nullable_array"
																r.pathPattern = "/test_request_required_string_int64_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	// Leaf: TestRequestRequiredStringInt64NullableArrayArray
																	r.name = "TestRequestRequiredStringInt64NullableArrayArray"
																	r.summary = ""
																	r.operationID = "test_request_required_string_int64_nullable_array_array"
																	r.pathPattern = "/test_request_required_string_int64_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
														}
													}
												}
											}
										case '8': // Prefix: "8"
											if l := len("8"); len(elem) >= l && elem[0:l] == "8" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestRequiredStringInt8"
													r.summary = ""
													r.operationID = "test_request_required_string_int8"
													r.pathPattern = "/test_request_required_string_int8"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredStringInt8Array"
															r.summary = ""
															r.operationID = "test_request_required_string_int8_array"
															r.pathPattern = "/test_request_required_string_int8_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestRequiredStringInt8ArrayArray
																r.name = "TestRequestRequiredStringInt8ArrayArray"
																r.summary = ""
																r.operationID = "test_request_required_string_int8_array_array"
																r.pathPattern = "/test_request_required_string_int8_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredStringInt8Nullable"
															r.summary = ""
															r.operationID = "test_request_required_string_int8_nullable"
															r.pathPattern = "/test_request_required_string_int8_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestRequestRequiredStringInt8NullableArray"
																r.summary = ""
																r.operationID = "test_request_required_string_int8_nullable_array"
																r.pathPattern = "/test_request_required_string_int8_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	// Leaf: TestRequestRequiredStringInt8NullableArrayArray
																	r.name = "TestRequestRequiredStringInt8NullableArrayArray"
																	r.summary = ""
																	r.operationID = "test_request_required_string_int8_nullable_array_array"
																	r.pathPattern = "/test_request_required_string_int8_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
														}
													}
												}
											}
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestRequiredStringIntArray"
														r.summary = ""
														r.operationID = "test_request_required_string_int_array"
														r.pathPattern = "/test_request_required_string_int_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestRequiredStringIntArrayArray
															r.name = "TestRequestRequiredStringIntArrayArray"
															r.summary = ""
															r.operationID = "test_request_required_string_int_array_array"
															r.pathPattern = "/test_request_required_string_int_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestRequiredStringIntNullable"
														r.summary = ""
														r.operationID = "test_request_required_string_int_nullable"
														r.pathPattern = "/test_request_required_string_int_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredStringIntNullableArray"
															r.summary = ""
															r.operationID = "test_request_required_string_int_nullable_array"
															r.pathPattern = "/test_request_required_string_int_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestRequiredStringIntNullableArrayArray
																r.name = "TestRequestRequiredStringIntNullableArrayArray"
																r.summary = ""
																r.operationID = "test_request_required_string_int_nullable_array_array"
																r.pathPattern = "/test_request_required_string_int_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										}
									case 'p': // Prefix: "p"
										if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestRequiredStringIP"
												r.summary = ""
												r.operationID = "test_request_required_string_ip"
												r.pathPattern = "/test_request_required_string_ip"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestRequiredStringIPArray"
														r.summary = ""
														r.operationID = "test_request_required_string_ip_array"
														r.pathPattern = "/test_request_required_string_ip_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestRequiredStringIPArrayArray
															r.name = "TestRequestRequiredStringIPArrayArray"
															r.summary = ""
															r.operationID = "test_request_required_string_ip_array_array"
															r.pathPattern = "/test_request_required_string_ip_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestRequiredStringIPNullable"
														r.summary = ""
														r.operationID = "test_request_required_string_ip_nullable"
														r.pathPattern = "/test_request_required_string_ip_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredStringIPNullableArray"
															r.summary = ""
															r.operationID = "test_request_required_string_ip_nullable_array"
															r.pathPattern = "/test_request_required_string_ip_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestRequiredStringIPNullableArrayArray
																r.name = "TestRequestRequiredStringIPNullableArrayArray"
																r.summary = ""
																r.operationID = "test_request_required_string_ip_nullable_array_array"
																r.pathPattern = "/test_request_required_string_ip_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										case 'v': // Prefix: "v"
											if l := len("v"); len(elem) >= l && elem[0:l] == "v" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case '4': // Prefix: "4"
												if l := len("4"); len(elem) >= l && elem[0:l] == "4" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestRequiredStringIpv4"
														r.summary = ""
														r.operationID = "test_request_required_string_ipv4"
														r.pathPattern = "/test_request_required_string_ipv4"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_"
													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"
														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestRequestRequiredStringIpv4Array"
																r.summary = ""
																r.operationID = "test_request_required_string_ipv4_array"
																r.pathPattern = "/test_request_required_string_ipv4_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	// Leaf: TestRequestRequiredStringIpv4ArrayArray
																	r.name = "TestRequestRequiredStringIpv4ArrayArray"
																	r.summary = ""
																	r.operationID = "test_request_required_string_ipv4_array_array"
																	r.pathPattern = "/test_request_required_string_ipv4_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
														}
													case 'n': // Prefix: "nullable"
														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestRequestRequiredStringIpv4Nullable"
																r.summary = ""
																r.operationID = "test_request_required_string_ipv4_nullable"
																r.pathPattern = "/test_request_required_string_ipv4_nullable"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	r.name = "TestRequestRequiredStringIpv4NullableArray"
																	r.summary = ""
																	r.operationID = "test_request_required_string_ipv4_nullable_array"
																	r.pathPattern = "/test_request_required_string_ipv4_nullable_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
															switch elem[0] {
															case '_': // Prefix: "_array"
																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	switch method {
																	case "POST":
																		// Leaf: TestRequestRequiredStringIpv4NullableArrayArray
																		r.name = "TestRequestRequiredStringIpv4NullableArrayArray"
																		r.summary = ""
																		r.operationID = "test_request_required_string_ipv4_nullable_array_array"
																		r.pathPattern = "/test_request_required_string_ipv4_nullable_array_array"
																		r.args = args
																		r.count = 0
																		return r, true
																	default:
																		return
																	}
																}
															}
														}
													}
												}
											case '6': // Prefix: "6"
												if l := len("6"); len(elem) >= l && elem[0:l] == "6" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestRequiredStringIpv6"
														r.summary = ""
														r.operationID = "test_request_required_string_ipv6"
														r.pathPattern = "/test_request_required_string_ipv6"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_"
													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"
														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestRequestRequiredStringIpv6Array"
																r.summary = ""
																r.operationID = "test_request_required_string_ipv6_array"
																r.pathPattern = "/test_request_required_string_ipv6_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	// Leaf: TestRequestRequiredStringIpv6ArrayArray
																	r.name = "TestRequestRequiredStringIpv6ArrayArray"
																	r.summary = ""
																	r.operationID = "test_request_required_string_ipv6_array_array"
																	r.pathPattern = "/test_request_required_string_ipv6_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
														}
													case 'n': // Prefix: "nullable"
														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestRequestRequiredStringIpv6Nullable"
																r.summary = ""
																r.operationID = "test_request_required_string_ipv6_nullable"
																r.pathPattern = "/test_request_required_string_ipv6_nullable"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	r.name = "TestRequestRequiredStringIpv6NullableArray"
																	r.summary = ""
																	r.operationID = "test_request_required_string_ipv6_nullable_array"
																	r.pathPattern = "/test_request_required_string_ipv6_nullable_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
															switch elem[0] {
															case '_': // Prefix: "_array"
																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	switch method {
																	case "POST":
																		// Leaf: TestRequestRequiredStringIpv6NullableArrayArray
																		r.name = "TestRequestRequiredStringIpv6NullableArrayArray"
																		r.summary = ""
																		r.operationID = "test_request_required_string_ipv6_nullable_array_array"
																		r.pathPattern = "/test_request_required_string_ipv6_nullable_array_array"
																		r.args = args
																		r.count = 0
																		return r, true
																	default:
																		return
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestRequestRequiredStringNullable"
											r.summary = ""
											r.operationID = "test_request_required_string_nullable"
											r.pathPattern = "/test_request_required_string_nullable"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestRequiredStringNullableArray"
												r.summary = ""
												r.operationID = "test_request_required_string_nullable_array"
												r.pathPattern = "/test_request_required_string_nullable_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													// Leaf: TestRequestRequiredStringNullableArrayArray
													r.name = "TestRequestRequiredStringNullableArrayArray"
													r.summary = ""
													r.operationID = "test_request_required_string_nullable_array_array"
													r.pathPattern = "/test_request_required_string_nullable_array_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
										}
									}
								case 'p': // Prefix: "password"
									if l := len("password"); len(elem) >= l && elem[0:l] == "password" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestRequestRequiredStringPassword"
											r.summary = ""
											r.operationID = "test_request_required_string_password"
											r.pathPattern = "/test_request_required_string_password"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestRequiredStringPasswordArray"
													r.summary = ""
													r.operationID = "test_request_required_string_password_array"
													r.pathPattern = "/test_request_required_string_password_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestRequestRequiredStringPasswordArrayArray
														r.name = "TestRequestRequiredStringPasswordArrayArray"
														r.summary = ""
														r.operationID = "test_request_required_string_password_array_array"
														r.pathPattern = "/test_request_required_string_password_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestRequiredStringPasswordNullable"
													r.summary = ""
													r.operationID = "test_request_required_string_password_nullable"
													r.pathPattern = "/test_request_required_string_password_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestRequiredStringPasswordNullableArray"
														r.summary = ""
														r.operationID = "test_request_required_string_password_nullable_array"
														r.pathPattern = "/test_request_required_string_password_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestRequiredStringPasswordNullableArrayArray
															r.name = "TestRequestRequiredStringPasswordNullableArrayArray"
															r.summary = ""
															r.operationID = "test_request_required_string_password_nullable_array_array"
															r.pathPattern = "/test_request_required_string_password_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											}
										}
									}
								case 't': // Prefix: "time"
									if l := len("time"); len(elem) >= l && elem[0:l] == "time" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestRequestRequiredStringTime"
											r.summary = ""
											r.operationID = "test_request_required_string_time"
											r.pathPattern = "/test_request_required_string_time"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestRequiredStringTimeArray"
													r.summary = ""
													r.operationID = "test_request_required_string_time_array"
													r.pathPattern = "/test_request_required_string_time_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestRequestRequiredStringTimeArrayArray
														r.name = "TestRequestRequiredStringTimeArrayArray"
														r.summary = ""
														r.operationID = "test_request_required_string_time_array_array"
														r.pathPattern = "/test_request_required_string_time_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestRequiredStringTimeNullable"
													r.summary = ""
													r.operationID = "test_request_required_string_time_nullable"
													r.pathPattern = "/test_request_required_string_time_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestRequiredStringTimeNullableArray"
														r.summary = ""
														r.operationID = "test_request_required_string_time_nullable_array"
														r.pathPattern = "/test_request_required_string_time_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestRequiredStringTimeNullableArrayArray
															r.name = "TestRequestRequiredStringTimeNullableArrayArray"
															r.summary = ""
															r.operationID = "test_request_required_string_time_nullable_array_array"
															r.pathPattern = "/test_request_required_string_time_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											}
										}
									}
								case 'u': // Prefix: "u"
									if l := len("u"); len(elem) >= l && elem[0:l] == "u" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'i': // Prefix: "int"
										if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestRequiredStringUint"
												r.summary = ""
												r.operationID = "test_request_required_string_uint"
												r.pathPattern = "/test_request_required_string_uint"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '1': // Prefix: "16"
											if l := len("16"); len(elem) >= l && elem[0:l] == "16" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestRequiredStringUint16"
													r.summary = ""
													r.operationID = "test_request_required_string_uint16"
													r.pathPattern = "/test_request_required_string_uint16"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredStringUint16Array"
															r.summary = ""
															r.operationID = "test_request_required_string_uint16_array"
															r.pathPattern = "/test_request_required_string_uint16_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestRequiredStringUint16ArrayArray
																r.name = "TestRequestRequiredStringUint16ArrayArray"
																r.summary = ""
																r.operationID = "test_request_required_string_uint16_array_array"
																r.pathPattern = "/test_request_required_string_uint16_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredStringUint16Nullable"
															r.summary = ""
															r.operationID = "test_request_required_string_uint16_nullable"
															r.pathPattern = "/test_request_required_string_uint16_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestRequestRequiredStringUint16NullableArray"
																r.summary = ""
																r.operationID = "test_request_required_string_uint16_nullable_array"
																r.pathPattern = "/test_request_required_string_uint16_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	// Leaf: TestRequestRequiredStringUint16NullableArrayArray
																	r.name = "TestRequestRequiredStringUint16NullableArrayArray"
																	r.summary = ""
																	r.operationID = "test_request_required_string_uint16_nullable_array_array"
																	r.pathPattern = "/test_request_required_string_uint16_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
														}
													}
												}
											}
										case '3': // Prefix: "32"
											if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestRequiredStringUint32"
													r.summary = ""
													r.operationID = "test_request_required_string_uint32"
													r.pathPattern = "/test_request_required_string_uint32"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredStringUint32Array"
															r.summary = ""
															r.operationID = "test_request_required_string_uint32_array"
															r.pathPattern = "/test_request_required_string_uint32_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestRequiredStringUint32ArrayArray
																r.name = "TestRequestRequiredStringUint32ArrayArray"
																r.summary = ""
																r.operationID = "test_request_required_string_uint32_array_array"
																r.pathPattern = "/test_request_required_string_uint32_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredStringUint32Nullable"
															r.summary = ""
															r.operationID = "test_request_required_string_uint32_nullable"
															r.pathPattern = "/test_request_required_string_uint32_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestRequestRequiredStringUint32NullableArray"
																r.summary = ""
																r.operationID = "test_request_required_string_uint32_nullable_array"
																r.pathPattern = "/test_request_required_string_uint32_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	// Leaf: TestRequestRequiredStringUint32NullableArrayArray
																	r.name = "TestRequestRequiredStringUint32NullableArrayArray"
																	r.summary = ""
																	r.operationID = "test_request_required_string_uint32_nullable_array_array"
																	r.pathPattern = "/test_request_required_string_uint32_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
														}
													}
												}
											}
										case '6': // Prefix: "64"
											if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestRequiredStringUint64"
													r.summary = ""
													r.operationID = "test_request_required_string_uint64"
													r.pathPattern = "/test_request_required_string_uint64"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredStringUint64Array"
															r.summary = ""
															r.operationID = "test_request_required_string_uint64_array"
															r.pathPattern = "/test_request_required_string_uint64_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestRequiredStringUint64ArrayArray
																r.name = "TestRequestRequiredStringUint64ArrayArray"
																r.summary = ""
																r.operationID = "test_request_required_string_uint64_array_array"
																r.pathPattern = "/test_request_required_string_uint64_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredStringUint64Nullable"
															r.summary = ""
															r.operationID = "test_request_required_string_uint64_nullable"
															r.pathPattern = "/test_request_required_string_uint64_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestRequestRequiredStringUint64NullableArray"
																r.summary = ""
																r.operationID = "test_request_required_string_uint64_nullable_array"
																r.pathPattern = "/test_request_required_string_uint64_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	// Leaf: TestRequestRequiredStringUint64NullableArrayArray
																	r.name = "TestRequestRequiredStringUint64NullableArrayArray"
																	r.summary = ""
																	r.operationID = "test_request_required_string_uint64_nullable_array_array"
																	r.pathPattern = "/test_request_required_string_uint64_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
														}
													}
												}
											}
										case '8': // Prefix: "8"
											if l := len("8"); len(elem) >= l && elem[0:l] == "8" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestRequiredStringUint8"
													r.summary = ""
													r.operationID = "test_request_required_string_uint8"
													r.pathPattern = "/test_request_required_string_uint8"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredStringUint8Array"
															r.summary = ""
															r.operationID = "test_request_required_string_uint8_array"
															r.pathPattern = "/test_request_required_string_uint8_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestRequiredStringUint8ArrayArray
																r.name = "TestRequestRequiredStringUint8ArrayArray"
																r.summary = ""
																r.operationID = "test_request_required_string_uint8_array_array"
																r.pathPattern = "/test_request_required_string_uint8_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredStringUint8Nullable"
															r.summary = ""
															r.operationID = "test_request_required_string_uint8_nullable"
															r.pathPattern = "/test_request_required_string_uint8_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestRequestRequiredStringUint8NullableArray"
																r.summary = ""
																r.operationID = "test_request_required_string_uint8_nullable_array"
																r.pathPattern = "/test_request_required_string_uint8_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	// Leaf: TestRequestRequiredStringUint8NullableArrayArray
																	r.name = "TestRequestRequiredStringUint8NullableArrayArray"
																	r.summary = ""
																	r.operationID = "test_request_required_string_uint8_nullable_array_array"
																	r.pathPattern = "/test_request_required_string_uint8_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
														}
													}
												}
											}
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestRequiredStringUintArray"
														r.summary = ""
														r.operationID = "test_request_required_string_uint_array"
														r.pathPattern = "/test_request_required_string_uint_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestRequiredStringUintArrayArray
															r.name = "TestRequestRequiredStringUintArrayArray"
															r.summary = ""
															r.operationID = "test_request_required_string_uint_array_array"
															r.pathPattern = "/test_request_required_string_uint_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestRequiredStringUintNullable"
														r.summary = ""
														r.operationID = "test_request_required_string_uint_nullable"
														r.pathPattern = "/test_request_required_string_uint_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredStringUintNullableArray"
															r.summary = ""
															r.operationID = "test_request_required_string_uint_nullable_array"
															r.pathPattern = "/test_request_required_string_uint_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestRequiredStringUintNullableArrayArray
																r.name = "TestRequestRequiredStringUintNullableArrayArray"
																r.summary = ""
																r.operationID = "test_request_required_string_uint_nullable_array_array"
																r.pathPattern = "/test_request_required_string_uint_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										}
									case 'n': // Prefix: "nix"
										if l := len("nix"); len(elem) >= l && elem[0:l] == "nix" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestRequiredStringUnix"
												r.summary = ""
												r.operationID = "test_request_required_string_unix"
												r.pathPattern = "/test_request_required_string_unix"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '-': // Prefix: "-"
											if l := len("-"); len(elem) >= l && elem[0:l] == "-" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'm': // Prefix: "mi"
												if l := len("mi"); len(elem) >= l && elem[0:l] == "mi" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'c': // Prefix: "cro"
													if l := len("cro"); len(elem) >= l && elem[0:l] == "cro" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredStringUnixMicro"
															r.summary = ""
															r.operationID = "test_request_required_string_unix-micro"
															r.pathPattern = "/test_request_required_string_unix-micro"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_"
														if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															break
														}
														switch elem[0] {
														case 'a': // Prefix: "array"
															if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	r.name = "TestRequestRequiredStringUnixMicroArray"
																	r.summary = ""
																	r.operationID = "test_request_required_string_unix-micro_array"
																	r.pathPattern = "/test_request_required_string_unix-micro_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
															switch elem[0] {
															case '_': // Prefix: "_array"
																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	switch method {
																	case "POST":
																		// Leaf: TestRequestRequiredStringUnixMicroArrayArray
																		r.name = "TestRequestRequiredStringUnixMicroArrayArray"
																		r.summary = ""
																		r.operationID = "test_request_required_string_unix-micro_array_array"
																		r.pathPattern = "/test_request_required_string_unix-micro_array_array"
																		r.args = args
																		r.count = 0
																		return r, true
																	default:
																		return
																	}
																}
															}
														case 'n': // Prefix: "nullable"
															if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	r.name = "TestRequestRequiredStringUnixMicroNullable"
																	r.summary = ""
																	r.operationID = "test_request_required_string_unix-micro_nullable"
																	r.pathPattern = "/test_request_required_string_unix-micro_nullable"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
															switch elem[0] {
															case '_': // Prefix: "_array"
																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	switch method {
																	case "POST":
																		r.name = "TestRequestRequiredStringUnixMicroNullableArray"
																		r.summary = ""
																		r.operationID = "test_request_required_string_unix-micro_nullable_array"
																		r.pathPattern = "/test_request_required_string_unix-micro_nullable_array"
																		r.args = args
																		r.count = 0
																		return r, true
																	default:
																		return
																	}
																}
																switch elem[0] {
																case '_': // Prefix: "_array"
																	if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																		elem = elem[l:]
																	} else {
																		break
																	}

																	if len(elem) == 0 {
																		switch method {
																		case "POST":
																			// Leaf: TestRequestRequiredStringUnixMicroNullableArrayArray
																			r.name = "TestRequestRequiredStringUnixMicroNullableArrayArray"
																			r.summary = ""
																			r.operationID = "test_request_required_string_unix-micro_nullable_array_array"
																			r.pathPattern = "/test_request_required_string_unix-micro_nullable_array_array"
																			r.args = args
																			r.count = 0
																			return r, true
																		default:
																			return
																		}
																	}
																}
															}
														}
													}
												case 'l': // Prefix: "lli"
													if l := len("lli"); len(elem) >= l && elem[0:l] == "lli" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredStringUnixMilli"
															r.summary = ""
															r.operationID = "test_request_required_string_unix-milli"
															r.pathPattern = "/test_request_required_string_unix-milli"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_"
														if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															break
														}
														switch elem[0] {
														case 'a': // Prefix: "array"
															if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	r.name = "TestRequestRequiredStringUnixMilliArray"
																	r.summary = ""
																	r.operationID = "test_request_required_string_unix-milli_array"
																	r.pathPattern = "/test_request_required_string_unix-milli_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
															switch elem[0] {
															case '_': // Prefix: "_array"
																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	switch method {
																	case "POST":
																		// Leaf: TestRequestRequiredStringUnixMilliArrayArray
																		r.name = "TestRequestRequiredStringUnixMilliArrayArray"
																		r.summary = ""
																		r.operationID = "test_request_required_string_unix-milli_array_array"
																		r.pathPattern = "/test_request_required_string_unix-milli_array_array"
																		r.args = args
																		r.count = 0
																		return r, true
																	default:
																		return
																	}
																}
															}
														case 'n': // Prefix: "nullable"
															if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	r.name = "TestRequestRequiredStringUnixMilliNullable"
																	r.summary = ""
																	r.operationID = "test_request_required_string_unix-milli_nullable"
																	r.pathPattern = "/test_request_required_string_unix-milli_nullable"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
															switch elem[0] {
															case '_': // Prefix: "_array"
																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	switch method {
																	case "POST":
																		r.name = "TestRequestRequiredStringUnixMilliNullableArray"
																		r.summary = ""
																		r.operationID = "test_request_required_string_unix-milli_nullable_array"
																		r.pathPattern = "/test_request_required_string_unix-milli_nullable_array"
																		r.args = args
																		r.count = 0
																		return r, true
																	default:
																		return
																	}
																}
																switch elem[0] {
																case '_': // Prefix: "_array"
																	if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																		elem = elem[l:]
																	} else {
																		break
																	}

																	if len(elem) == 0 {
																		switch method {
																		case "POST":
																			// Leaf: TestRequestRequiredStringUnixMilliNullableArrayArray
																			r.name = "TestRequestRequiredStringUnixMilliNullableArrayArray"
																			r.summary = ""
																			r.operationID = "test_request_required_string_unix-milli_nullable_array_array"
																			r.pathPattern = "/test_request_required_string_unix-milli_nullable_array_array"
																			r.args = args
																			r.count = 0
																			return r, true
																		default:
																			return
																		}
																	}
																}
															}
														}
													}
												}
											case 'n': // Prefix: "nano"
												if l := len("nano"); len(elem) >= l && elem[0:l] == "nano" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestRequiredStringUnixNano"
														r.summary = ""
														r.operationID = "test_request_required_string_unix-nano"
														r.pathPattern = "/test_request_required_string_unix-nano"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_"
													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"
														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestRequestRequiredStringUnixNanoArray"
																r.summary = ""
																r.operationID = "test_request_required_string_unix-nano_array"
																r.pathPattern = "/test_request_required_string_unix-nano_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	// Leaf: TestRequestRequiredStringUnixNanoArrayArray
																	r.name = "TestRequestRequiredStringUnixNanoArrayArray"
																	r.summary = ""
																	r.operationID = "test_request_required_string_unix-nano_array_array"
																	r.pathPattern = "/test_request_required_string_unix-nano_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
														}
													case 'n': // Prefix: "nullable"
														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestRequestRequiredStringUnixNanoNullable"
																r.summary = ""
																r.operationID = "test_request_required_string_unix-nano_nullable"
																r.pathPattern = "/test_request_required_string_unix-nano_nullable"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	r.name = "TestRequestRequiredStringUnixNanoNullableArray"
																	r.summary = ""
																	r.operationID = "test_request_required_string_unix-nano_nullable_array"
																	r.pathPattern = "/test_request_required_string_unix-nano_nullable_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
															switch elem[0] {
															case '_': // Prefix: "_array"
																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	switch method {
																	case "POST":
																		// Leaf: TestRequestRequiredStringUnixNanoNullableArrayArray
																		r.name = "TestRequestRequiredStringUnixNanoNullableArrayArray"
																		r.summary = ""
																		r.operationID = "test_request_required_string_unix-nano_nullable_array_array"
																		r.pathPattern = "/test_request_required_string_unix-nano_nullable_array_array"
																		r.args = args
																		r.count = 0
																		return r, true
																	default:
																		return
																	}
																}
															}
														}
													}
												}
											case 's': // Prefix: "seconds"
												if l := len("seconds"); len(elem) >= l && elem[0:l] == "seconds" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestRequiredStringUnixSeconds"
														r.summary = ""
														r.operationID = "test_request_required_string_unix-seconds"
														r.pathPattern = "/test_request_required_string_unix-seconds"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_"
													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"
														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestRequestRequiredStringUnixSecondsArray"
																r.summary = ""
																r.operationID = "test_request_required_string_unix-seconds_array"
																r.pathPattern = "/test_request_required_string_unix-seconds_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	// Leaf: TestRequestRequiredStringUnixSecondsArrayArray
																	r.name = "TestRequestRequiredStringUnixSecondsArrayArray"
																	r.summary = ""
																	r.operationID = "test_request_required_string_unix-seconds_array_array"
																	r.pathPattern = "/test_request_required_string_unix-seconds_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
														}
													case 'n': // Prefix: "nullable"
														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestRequestRequiredStringUnixSecondsNullable"
																r.summary = ""
																r.operationID = "test_request_required_string_unix-seconds_nullable"
																r.pathPattern = "/test_request_required_string_unix-seconds_nullable"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	r.name = "TestRequestRequiredStringUnixSecondsNullableArray"
																	r.summary = ""
																	r.operationID = "test_request_required_string_unix-seconds_nullable_array"
																	r.pathPattern = "/test_request_required_string_unix-seconds_nullable_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
															switch elem[0] {
															case '_': // Prefix: "_array"
																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	switch method {
																	case "POST":
																		// Leaf: TestRequestRequiredStringUnixSecondsNullableArrayArray
																		r.name = "TestRequestRequiredStringUnixSecondsNullableArrayArray"
																		r.summary = ""
																		r.operationID = "test_request_required_string_unix-seconds_nullable_array_array"
																		r.pathPattern = "/test_request_required_string_unix-seconds_nullable_array_array"
																		r.args = args
																		r.count = 0
																		return r, true
																	default:
																		return
																	}
																}
															}
														}
													}
												}
											}
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestRequiredStringUnixArray"
														r.summary = ""
														r.operationID = "test_request_required_string_unix_array"
														r.pathPattern = "/test_request_required_string_unix_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestRequiredStringUnixArrayArray
															r.name = "TestRequestRequiredStringUnixArrayArray"
															r.summary = ""
															r.operationID = "test_request_required_string_unix_array_array"
															r.pathPattern = "/test_request_required_string_unix_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestRequiredStringUnixNullable"
														r.summary = ""
														r.operationID = "test_request_required_string_unix_nullable"
														r.pathPattern = "/test_request_required_string_unix_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredStringUnixNullableArray"
															r.summary = ""
															r.operationID = "test_request_required_string_unix_nullable_array"
															r.pathPattern = "/test_request_required_string_unix_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestRequiredStringUnixNullableArrayArray
																r.name = "TestRequestRequiredStringUnixNullableArrayArray"
																r.summary = ""
																r.operationID = "test_request_required_string_unix_nullable_array_array"
																r.pathPattern = "/test_request_required_string_unix_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										}
									case 'r': // Prefix: "ri"
										if l := len("ri"); len(elem) >= l && elem[0:l] == "ri" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestRequiredStringURI"
												r.summary = ""
												r.operationID = "test_request_required_string_uri"
												r.pathPattern = "/test_request_required_string_uri"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestRequiredStringURIArray"
														r.summary = ""
														r.operationID = "test_request_required_string_uri_array"
														r.pathPattern = "/test_request_required_string_uri_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestRequiredStringURIArrayArray
															r.name = "TestRequestRequiredStringURIArrayArray"
															r.summary = ""
															r.operationID = "test_request_required_string_uri_array_array"
															r.pathPattern = "/test_request_required_string_uri_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestRequiredStringURINullable"
														r.summary = ""
														r.operationID = "test_request_required_string_uri_nullable"
														r.pathPattern = "/test_request_required_string_uri_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredStringURINullableArray"
															r.summary = ""
															r.operationID = "test_request_required_string_uri_nullable_array"
															r.pathPattern = "/test_request_required_string_uri_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestRequiredStringURINullableArrayArray
																r.name = "TestRequestRequiredStringURINullableArrayArray"
																r.summary = ""
																r.operationID = "test_request_required_string_uri_nullable_array_array"
																r.pathPattern = "/test_request_required_string_uri_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										}
									case 'u': // Prefix: "uid"
										if l := len("uid"); len(elem) >= l && elem[0:l] == "uid" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestRequiredStringUUID"
												r.summary = ""
												r.operationID = "test_request_required_string_uuid"
												r.pathPattern = "/test_request_required_string_uuid"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestRequiredStringUUIDArray"
														r.summary = ""
														r.operationID = "test_request_required_string_uuid_array"
														r.pathPattern = "/test_request_required_string_uuid_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestRequiredStringUUIDArrayArray
															r.name = "TestRequestRequiredStringUUIDArrayArray"
															r.summary = ""
															r.operationID = "test_request_required_string_uuid_array_array"
															r.pathPattern = "/test_request_required_string_uuid_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestRequiredStringUUIDNullable"
														r.summary = ""
														r.operationID = "test_request_required_string_uuid_nullable"
														r.pathPattern = "/test_request_required_string_uuid_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestRequiredStringUUIDNullableArray"
															r.summary = ""
															r.operationID = "test_request_required_string_uuid_nullable_array"
															r.pathPattern = "/test_request_required_string_uuid_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestRequiredStringUUIDNullableArrayArray
																r.name = "TestRequestRequiredStringUUIDNullableArrayArray"
																r.summary = ""
																r.operationID = "test_request_required_string_uuid_nullable_array_array"
																r.pathPattern = "/test_request_required_string_uuid_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					case 's': // Prefix: "string"
						if l := len("string"); len(elem) >= l && elem[0:l] == "string" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								r.name = "TestRequestString"
								r.summary = ""
								r.operationID = "test_request_string"
								r.pathPattern = "/test_request_string"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '_': // Prefix: "_"
							if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "array"
								if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = "TestRequestStringArray"
										r.summary = ""
										r.operationID = "test_request_string_array"
										r.pathPattern = "/test_request_string_array"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											// Leaf: TestRequestStringArrayArray
											r.name = "TestRequestStringArrayArray"
											r.summary = ""
											r.operationID = "test_request_string_array_array"
											r.pathPattern = "/test_request_string_array_array"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
								}
							case 'b': // Prefix: "b"
								if l := len("b"); len(elem) >= l && elem[0:l] == "b" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "ase64"
									if l := len("ase64"); len(elem) >= l && elem[0:l] == "ase64" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestRequestStringBase64"
											r.summary = ""
											r.operationID = "test_request_string_base64"
											r.pathPattern = "/test_request_string_base64"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestStringBase64Array"
													r.summary = ""
													r.operationID = "test_request_string_base64_array"
													r.pathPattern = "/test_request_string_base64_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestRequestStringBase64ArrayArray
														r.name = "TestRequestStringBase64ArrayArray"
														r.summary = ""
														r.operationID = "test_request_string_base64_array_array"
														r.pathPattern = "/test_request_string_base64_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestStringBase64Nullable"
													r.summary = ""
													r.operationID = "test_request_string_base64_nullable"
													r.pathPattern = "/test_request_string_base64_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestStringBase64NullableArray"
														r.summary = ""
														r.operationID = "test_request_string_base64_nullable_array"
														r.pathPattern = "/test_request_string_base64_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestStringBase64NullableArrayArray
															r.name = "TestRequestStringBase64NullableArrayArray"
															r.summary = ""
															r.operationID = "test_request_string_base64_nullable_array_array"
															r.pathPattern = "/test_request_string_base64_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											}
										}
									}
								case 'i': // Prefix: "inary"
									if l := len("inary"); len(elem) >= l && elem[0:l] == "inary" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestRequestStringBinary"
											r.summary = ""
											r.operationID = "test_request_string_binary"
											r.pathPattern = "/test_request_string_binary"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestStringBinaryArray"
													r.summary = ""
													r.operationID = "test_request_string_binary_array"
													r.pathPattern = "/test_request_string_binary_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestRequestStringBinaryArrayArray
														r.name = "TestRequestStringBinaryArrayArray"
														r.summary = ""
														r.operationID = "test_request_string_binary_array_array"
														r.pathPattern = "/test_request_string_binary_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestStringBinaryNullable"
													r.summary = ""
													r.operationID = "test_request_string_binary_nullable"
													r.pathPattern = "/test_request_string_binary_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestStringBinaryNullableArray"
														r.summary = ""
														r.operationID = "test_request_string_binary_nullable_array"
														r.pathPattern = "/test_request_string_binary_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestStringBinaryNullableArrayArray
															r.name = "TestRequestStringBinaryNullableArrayArray"
															r.summary = ""
															r.operationID = "test_request_string_binary_nullable_array_array"
															r.pathPattern = "/test_request_string_binary_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											}
										}
									}
								case 'y': // Prefix: "yte"
									if l := len("yte"); len(elem) >= l && elem[0:l] == "yte" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestRequestStringByte"
											r.summary = ""
											r.operationID = "test_request_string_byte"
											r.pathPattern = "/test_request_string_byte"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestStringByteArray"
													r.summary = ""
													r.operationID = "test_request_string_byte_array"
													r.pathPattern = "/test_request_string_byte_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestRequestStringByteArrayArray
														r.name = "TestRequestStringByteArrayArray"
														r.summary = ""
														r.operationID = "test_request_string_byte_array_array"
														r.pathPattern = "/test_request_string_byte_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestStringByteNullable"
													r.summary = ""
													r.operationID = "test_request_string_byte_nullable"
													r.pathPattern = "/test_request_string_byte_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestStringByteNullableArray"
														r.summary = ""
														r.operationID = "test_request_string_byte_nullable_array"
														r.pathPattern = "/test_request_string_byte_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestStringByteNullableArrayArray
															r.name = "TestRequestStringByteNullableArrayArray"
															r.summary = ""
															r.operationID = "test_request_string_byte_nullable_array_array"
															r.pathPattern = "/test_request_string_byte_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											}
										}
									}
								}
							case 'd': // Prefix: "d"
								if l := len("d"); len(elem) >= l && elem[0:l] == "d" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "ate"
									if l := len("ate"); len(elem) >= l && elem[0:l] == "ate" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestRequestStringDate"
											r.summary = ""
											r.operationID = "test_request_string_date"
											r.pathPattern = "/test_request_string_date"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '-': // Prefix: "-time"
										if l := len("-time"); len(elem) >= l && elem[0:l] == "-time" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestStringDateTime"
												r.summary = ""
												r.operationID = "test_request_string_date-time"
												r.pathPattern = "/test_request_string_date-time"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestStringDateTimeArray"
														r.summary = ""
														r.operationID = "test_request_string_date-time_array"
														r.pathPattern = "/test_request_string_date-time_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestStringDateTimeArrayArray
															r.name = "TestRequestStringDateTimeArrayArray"
															r.summary = ""
															r.operationID = "test_request_string_date-time_array_array"
															r.pathPattern = "/test_request_string_date-time_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestStringDateTimeNullable"
														r.summary = ""
														r.operationID = "test_request_string_date-time_nullable"
														r.pathPattern = "/test_request_string_date-time_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestStringDateTimeNullableArray"
															r.summary = ""
															r.operationID = "test_request_string_date-time_nullable_array"
															r.pathPattern = "/test_request_string_date-time_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestStringDateTimeNullableArrayArray
																r.name = "TestRequestStringDateTimeNullableArrayArray"
																r.summary = ""
																r.operationID = "test_request_string_date-time_nullable_array_array"
																r.pathPattern = "/test_request_string_date-time_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										}
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestStringDateArray"
													r.summary = ""
													r.operationID = "test_request_string_date_array"
													r.pathPattern = "/test_request_string_date_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestRequestStringDateArrayArray
														r.name = "TestRequestStringDateArrayArray"
														r.summary = ""
														r.operationID = "test_request_string_date_array_array"
														r.pathPattern = "/test_request_string_date_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestStringDateNullable"
													r.summary = ""
													r.operationID = "test_request_string_date_nullable"
													r.pathPattern = "/test_request_string_date_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestStringDateNullableArray"
														r.summary = ""
														r.operationID = "test_request_string_date_nullable_array"
														r.pathPattern = "/test_request_string_date_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestStringDateNullableArrayArray
															r.name = "TestRequestStringDateNullableArrayArray"
															r.summary = ""
															r.operationID = "test_request_string_date_nullable_array_array"
															r.pathPattern = "/test_request_string_date_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											}
										}
									}
								case 'u': // Prefix: "uration"
									if l := len("uration"); len(elem) >= l && elem[0:l] == "uration" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestRequestStringDuration"
											r.summary = ""
											r.operationID = "test_request_string_duration"
											r.pathPattern = "/test_request_string_duration"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestStringDurationArray"
													r.summary = ""
													r.operationID = "test_request_string_duration_array"
													r.pathPattern = "/test_request_string_duration_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestRequestStringDurationArrayArray
														r.name = "TestRequestStringDurationArrayArray"
														r.summary = ""
														r.operationID = "test_request_string_duration_array_array"
														r.pathPattern = "/test_request_string_duration_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestStringDurationNullable"
													r.summary = ""
													r.operationID = "test_request_string_duration_nullable"
													r.pathPattern = "/test_request_string_duration_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestStringDurationNullableArray"
														r.summary = ""
														r.operationID = "test_request_string_duration_nullable_array"
														r.pathPattern = "/test_request_string_duration_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestStringDurationNullableArrayArray
															r.name = "TestRequestStringDurationNullableArrayArray"
															r.summary = ""
															r.operationID = "test_request_string_duration_nullable_array_array"
															r.pathPattern = "/test_request_string_duration_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											}
										}
									}
								}
							case 'e': // Prefix: "email"
								if l := len("email"); len(elem) >= l && elem[0:l] == "email" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = "TestRequestStringEmail"
										r.summary = ""
										r.operationID = "test_request_string_email"
										r.pathPattern = "/test_request_string_email"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestStringEmailArray"
												r.summary = ""
												r.operationID = "test_request_string_email_array"
												r.pathPattern = "/test_request_string_email_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													// Leaf: TestRequestStringEmailArrayArray
													r.name = "TestRequestStringEmailArrayArray"
													r.summary = ""
													r.operationID = "test_request_string_email_array_array"
													r.pathPattern = "/test_request_string_email_array_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestStringEmailNullable"
												r.summary = ""
												r.operationID = "test_request_string_email_nullable"
												r.pathPattern = "/test_request_string_email_nullable"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestStringEmailNullableArray"
													r.summary = ""
													r.operationID = "test_request_string_email_nullable_array"
													r.pathPattern = "/test_request_string_email_nullable_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestRequestStringEmailNullableArrayArray
														r.name = "TestRequestStringEmailNullableArrayArray"
														r.summary = ""
														r.operationID = "test_request_string_email_nullable_array_array"
														r.pathPattern = "/test_request_string_email_nullable_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										}
									}
								}
							case 'f': // Prefix: "float"
								if l := len("float"); len(elem) >= l && elem[0:l] == "float" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case '3': // Prefix: "32"
									if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestRequestStringFloat32"
											r.summary = ""
											r.operationID = "test_request_string_float32"
											r.pathPattern = "/test_request_string_float32"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestStringFloat32Array"
													r.summary = ""
													r.operationID = "test_request_string_float32_array"
													r.pathPattern = "/test_request_string_float32_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestRequestStringFloat32ArrayArray
														r.name = "TestRequestStringFloat32ArrayArray"
														r.summary = ""
														r.operationID = "test_request_string_float32_array_array"
														r.pathPattern = "/test_request_string_float32_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestStringFloat32Nullable"
													r.summary = ""
													r.operationID = "test_request_string_float32_nullable"
													r.pathPattern = "/test_request_string_float32_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestStringFloat32NullableArray"
														r.summary = ""
														r.operationID = "test_request_string_float32_nullable_array"
														r.pathPattern = "/test_request_string_float32_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestStringFloat32NullableArrayArray
															r.name = "TestRequestStringFloat32NullableArrayArray"
															r.summary = ""
															r.operationID = "test_request_string_float32_nullable_array_array"
															r.pathPattern = "/test_request_string_float32_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											}
										}
									}
								case '6': // Prefix: "64"
									if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestRequestStringFloat64"
											r.summary = ""
											r.operationID = "test_request_string_float64"
											r.pathPattern = "/test_request_string_float64"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestStringFloat64Array"
													r.summary = ""
													r.operationID = "test_request_string_float64_array"
													r.pathPattern = "/test_request_string_float64_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestRequestStringFloat64ArrayArray
														r.name = "TestRequestStringFloat64ArrayArray"
														r.summary = ""
														r.operationID = "test_request_string_float64_array_array"
														r.pathPattern = "/test_request_string_float64_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestStringFloat64Nullable"
													r.summary = ""
													r.operationID = "test_request_string_float64_nullable"
													r.pathPattern = "/test_request_string_float64_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestStringFloat64NullableArray"
														r.summary = ""
														r.operationID = "test_request_string_float64_nullable_array"
														r.pathPattern = "/test_request_string_float64_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestStringFloat64NullableArrayArray
															r.name = "TestRequestStringFloat64NullableArrayArray"
															r.summary = ""
															r.operationID = "test_request_string_float64_nullable_array_array"
															r.pathPattern = "/test_request_string_float64_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											}
										}
									}
								}
							case 'h': // Prefix: "hostname"
								if l := len("hostname"); len(elem) >= l && elem[0:l] == "hostname" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = "TestRequestStringHostname"
										r.summary = ""
										r.operationID = "test_request_string_hostname"
										r.pathPattern = "/test_request_string_hostname"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestStringHostnameArray"
												r.summary = ""
												r.operationID = "test_request_string_hostname_array"
												r.pathPattern = "/test_request_string_hostname_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													// Leaf: TestRequestStringHostnameArrayArray
													r.name = "TestRequestStringHostnameArrayArray"
													r.summary = ""
													r.operationID = "test_request_string_hostname_array_array"
													r.pathPattern = "/test_request_string_hostname_array_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestStringHostnameNullable"
												r.summary = ""
												r.operationID = "test_request_string_hostname_nullable"
												r.pathPattern = "/test_request_string_hostname_nullable"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestStringHostnameNullableArray"
													r.summary = ""
													r.operationID = "test_request_string_hostname_nullable_array"
													r.pathPattern = "/test_request_string_hostname_nullable_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestRequestStringHostnameNullableArrayArray
														r.name = "TestRequestStringHostnameNullableArrayArray"
														r.summary = ""
														r.operationID = "test_request_string_hostname_nullable_array_array"
														r.pathPattern = "/test_request_string_hostname_nullable_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										}
									}
								}
							case 'i': // Prefix: "i"
								if l := len("i"); len(elem) >= l && elem[0:l] == "i" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'n': // Prefix: "nt"
									if l := len("nt"); len(elem) >= l && elem[0:l] == "nt" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestRequestStringInt"
											r.summary = ""
											r.operationID = "test_request_string_int"
											r.pathPattern = "/test_request_string_int"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '1': // Prefix: "16"
										if l := len("16"); len(elem) >= l && elem[0:l] == "16" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestStringInt16"
												r.summary = ""
												r.operationID = "test_request_string_int16"
												r.pathPattern = "/test_request_string_int16"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestStringInt16Array"
														r.summary = ""
														r.operationID = "test_request_string_int16_array"
														r.pathPattern = "/test_request_string_int16_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestStringInt16ArrayArray
															r.name = "TestRequestStringInt16ArrayArray"
															r.summary = ""
															r.operationID = "test_request_string_int16_array_array"
															r.pathPattern = "/test_request_string_int16_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestStringInt16Nullable"
														r.summary = ""
														r.operationID = "test_request_string_int16_nullable"
														r.pathPattern = "/test_request_string_int16_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestStringInt16NullableArray"
															r.summary = ""
															r.operationID = "test_request_string_int16_nullable_array"
															r.pathPattern = "/test_request_string_int16_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestStringInt16NullableArrayArray
																r.name = "TestRequestStringInt16NullableArrayArray"
																r.summary = ""
																r.operationID = "test_request_string_int16_nullable_array_array"
																r.pathPattern = "/test_request_string_int16_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										}
									case '3': // Prefix: "32"
										if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestStringInt32"
												r.summary = ""
												r.operationID = "test_request_string_int32"
												r.pathPattern = "/test_request_string_int32"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestStringInt32Array"
														r.summary = ""
														r.operationID = "test_request_string_int32_array"
														r.pathPattern = "/test_request_string_int32_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestStringInt32ArrayArray
															r.name = "TestRequestStringInt32ArrayArray"
															r.summary = ""
															r.operationID = "test_request_string_int32_array_array"
															r.pathPattern = "/test_request_string_int32_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestStringInt32Nullable"
														r.summary = ""
														r.operationID = "test_request_string_int32_nullable"
														r.pathPattern = "/test_request_string_int32_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestStringInt32NullableArray"
															r.summary = ""
															r.operationID = "test_request_string_int32_nullable_array"
															r.pathPattern = "/test_request_string_int32_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestStringInt32NullableArrayArray
																r.name = "TestRequestStringInt32NullableArrayArray"
																r.summary = ""
																r.operationID = "test_request_string_int32_nullable_array_array"
																r.pathPattern = "/test_request_string_int32_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										}
									case '6': // Prefix: "64"
										if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestStringInt64"
												r.summary = ""
												r.operationID = "test_request_string_int64"
												r.pathPattern = "/test_request_string_int64"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestStringInt64Array"
														r.summary = ""
														r.operationID = "test_request_string_int64_array"
														r.pathPattern = "/test_request_string_int64_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestStringInt64ArrayArray
															r.name = "TestRequestStringInt64ArrayArray"
															r.summary = ""
															r.operationID = "test_request_string_int64_array_array"
															r.pathPattern = "/test_request_string_int64_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestStringInt64Nullable"
														r.summary = ""
														r.operationID = "test_request_string_int64_nullable"
														r.pathPattern = "/test_request_string_int64_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestStringInt64NullableArray"
															r.summary = ""
															r.operationID = "test_request_string_int64_nullable_array"
															r.pathPattern = "/test_request_string_int64_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestStringInt64NullableArrayArray
																r.name = "TestRequestStringInt64NullableArrayArray"
																r.summary = ""
																r.operationID = "test_request_string_int64_nullable_array_array"
																r.pathPattern = "/test_request_string_int64_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										}
									case '8': // Prefix: "8"
										if l := len("8"); len(elem) >= l && elem[0:l] == "8" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestStringInt8"
												r.summary = ""
												r.operationID = "test_request_string_int8"
												r.pathPattern = "/test_request_string_int8"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestStringInt8Array"
														r.summary = ""
														r.operationID = "test_request_string_int8_array"
														r.pathPattern = "/test_request_string_int8_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestStringInt8ArrayArray
															r.name = "TestRequestStringInt8ArrayArray"
															r.summary = ""
															r.operationID = "test_request_string_int8_array_array"
															r.pathPattern = "/test_request_string_int8_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestStringInt8Nullable"
														r.summary = ""
														r.operationID = "test_request_string_int8_nullable"
														r.pathPattern = "/test_request_string_int8_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestStringInt8NullableArray"
															r.summary = ""
															r.operationID = "test_request_string_int8_nullable_array"
															r.pathPattern = "/test_request_string_int8_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestStringInt8NullableArrayArray
																r.name = "TestRequestStringInt8NullableArrayArray"
																r.summary = ""
																r.operationID = "test_request_string_int8_nullable_array_array"
																r.pathPattern = "/test_request_string_int8_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										}
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestStringIntArray"
													r.summary = ""
													r.operationID = "test_request_string_int_array"
													r.pathPattern = "/test_request_string_int_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestRequestStringIntArrayArray
														r.name = "TestRequestStringIntArrayArray"
														r.summary = ""
														r.operationID = "test_request_string_int_array_array"
														r.pathPattern = "/test_request_string_int_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestStringIntNullable"
													r.summary = ""
													r.operationID = "test_request_string_int_nullable"
													r.pathPattern = "/test_request_string_int_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestStringIntNullableArray"
														r.summary = ""
														r.operationID = "test_request_string_int_nullable_array"
														r.pathPattern = "/test_request_string_int_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestStringIntNullableArrayArray
															r.name = "TestRequestStringIntNullableArrayArray"
															r.summary = ""
															r.operationID = "test_request_string_int_nullable_array_array"
															r.pathPattern = "/test_request_string_int_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											}
										}
									}
								case 'p': // Prefix: "p"
									if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestRequestStringIP"
											r.summary = ""
											r.operationID = "test_request_string_ip"
											r.pathPattern = "/test_request_string_ip"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestStringIPArray"
													r.summary = ""
													r.operationID = "test_request_string_ip_array"
													r.pathPattern = "/test_request_string_ip_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestRequestStringIPArrayArray
														r.name = "TestRequestStringIPArrayArray"
														r.summary = ""
														r.operationID = "test_request_string_ip_array_array"
														r.pathPattern = "/test_request_string_ip_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestStringIPNullable"
													r.summary = ""
													r.operationID = "test_request_string_ip_nullable"
													r.pathPattern = "/test_request_string_ip_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestStringIPNullableArray"
														r.summary = ""
														r.operationID = "test_request_string_ip_nullable_array"
														r.pathPattern = "/test_request_string_ip_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestStringIPNullableArrayArray
															r.name = "TestRequestStringIPNullableArrayArray"
															r.summary = ""
															r.operationID = "test_request_string_ip_nullable_array_array"
															r.pathPattern = "/test_request_string_ip_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											}
										}
									case 'v': // Prefix: "v"
										if l := len("v"); len(elem) >= l && elem[0:l] == "v" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '4': // Prefix: "4"
											if l := len("4"); len(elem) >= l && elem[0:l] == "4" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestStringIpv4"
													r.summary = ""
													r.operationID = "test_request_string_ipv4"
													r.pathPattern = "/test_request_string_ipv4"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestStringIpv4Array"
															r.summary = ""
															r.operationID = "test_request_string_ipv4_array"
															r.pathPattern = "/test_request_string_ipv4_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestStringIpv4ArrayArray
																r.name = "TestRequestStringIpv4ArrayArray"
																r.summary = ""
																r.operationID = "test_request_string_ipv4_array_array"
																r.pathPattern = "/test_request_string_ipv4_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestStringIpv4Nullable"
															r.summary = ""
															r.operationID = "test_request_string_ipv4_nullable"
															r.pathPattern = "/test_request_string_ipv4_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestRequestStringIpv4NullableArray"
																r.summary = ""
																r.operationID = "test_request_string_ipv4_nullable_array"
																r.pathPattern = "/test_request_string_ipv4_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	// Leaf: TestRequestStringIpv4NullableArrayArray
																	r.name = "TestRequestStringIpv4NullableArrayArray"
																	r.summary = ""
																	r.operationID = "test_request_string_ipv4_nullable_array_array"
																	r.pathPattern = "/test_request_string_ipv4_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
														}
													}
												}
											}
										case '6': // Prefix: "6"
											if l := len("6"); len(elem) >= l && elem[0:l] == "6" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestStringIpv6"
													r.summary = ""
													r.operationID = "test_request_string_ipv6"
													r.pathPattern = "/test_request_string_ipv6"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestStringIpv6Array"
															r.summary = ""
															r.operationID = "test_request_string_ipv6_array"
															r.pathPattern = "/test_request_string_ipv6_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestStringIpv6ArrayArray
																r.name = "TestRequestStringIpv6ArrayArray"
																r.summary = ""
																r.operationID = "test_request_string_ipv6_array_array"
																r.pathPattern = "/test_request_string_ipv6_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestStringIpv6Nullable"
															r.summary = ""
															r.operationID = "test_request_string_ipv6_nullable"
															r.pathPattern = "/test_request_string_ipv6_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestRequestStringIpv6NullableArray"
																r.summary = ""
																r.operationID = "test_request_string_ipv6_nullable_array"
																r.pathPattern = "/test_request_string_ipv6_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	// Leaf: TestRequestStringIpv6NullableArrayArray
																	r.name = "TestRequestStringIpv6NullableArrayArray"
																	r.summary = ""
																	r.operationID = "test_request_string_ipv6_nullable_array_array"
																	r.pathPattern = "/test_request_string_ipv6_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
														}
													}
												}
											}
										}
									}
								}
							case 'n': // Prefix: "nullable"
								if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = "TestRequestStringNullable"
										r.summary = ""
										r.operationID = "test_request_string_nullable"
										r.pathPattern = "/test_request_string_nullable"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestRequestStringNullableArray"
											r.summary = ""
											r.operationID = "test_request_string_nullable_array"
											r.pathPattern = "/test_request_string_nullable_array"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												// Leaf: TestRequestStringNullableArrayArray
												r.name = "TestRequestStringNullableArrayArray"
												r.summary = ""
												r.operationID = "test_request_string_nullable_array_array"
												r.pathPattern = "/test_request_string_nullable_array_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
									}
								}
							case 'p': // Prefix: "password"
								if l := len("password"); len(elem) >= l && elem[0:l] == "password" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = "TestRequestStringPassword"
										r.summary = ""
										r.operationID = "test_request_string_password"
										r.pathPattern = "/test_request_string_password"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestStringPasswordArray"
												r.summary = ""
												r.operationID = "test_request_string_password_array"
												r.pathPattern = "/test_request_string_password_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													// Leaf: TestRequestStringPasswordArrayArray
													r.name = "TestRequestStringPasswordArrayArray"
													r.summary = ""
													r.operationID = "test_request_string_password_array_array"
													r.pathPattern = "/test_request_string_password_array_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestStringPasswordNullable"
												r.summary = ""
												r.operationID = "test_request_string_password_nullable"
												r.pathPattern = "/test_request_string_password_nullable"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestStringPasswordNullableArray"
													r.summary = ""
													r.operationID = "test_request_string_password_nullable_array"
													r.pathPattern = "/test_request_string_password_nullable_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestRequestStringPasswordNullableArrayArray
														r.name = "TestRequestStringPasswordNullableArrayArray"
														r.summary = ""
														r.operationID = "test_request_string_password_nullable_array_array"
														r.pathPattern = "/test_request_string_password_nullable_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										}
									}
								}
							case 't': // Prefix: "time"
								if l := len("time"); len(elem) >= l && elem[0:l] == "time" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = "TestRequestStringTime"
										r.summary = ""
										r.operationID = "test_request_string_time"
										r.pathPattern = "/test_request_string_time"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestStringTimeArray"
												r.summary = ""
												r.operationID = "test_request_string_time_array"
												r.pathPattern = "/test_request_string_time_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													// Leaf: TestRequestStringTimeArrayArray
													r.name = "TestRequestStringTimeArrayArray"
													r.summary = ""
													r.operationID = "test_request_string_time_array_array"
													r.pathPattern = "/test_request_string_time_array_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestStringTimeNullable"
												r.summary = ""
												r.operationID = "test_request_string_time_nullable"
												r.pathPattern = "/test_request_string_time_nullable"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestStringTimeNullableArray"
													r.summary = ""
													r.operationID = "test_request_string_time_nullable_array"
													r.pathPattern = "/test_request_string_time_nullable_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestRequestStringTimeNullableArrayArray
														r.name = "TestRequestStringTimeNullableArrayArray"
														r.summary = ""
														r.operationID = "test_request_string_time_nullable_array_array"
														r.pathPattern = "/test_request_string_time_nullable_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										}
									}
								}
							case 'u': // Prefix: "u"
								if l := len("u"); len(elem) >= l && elem[0:l] == "u" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'i': // Prefix: "int"
									if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestRequestStringUint"
											r.summary = ""
											r.operationID = "test_request_string_uint"
											r.pathPattern = "/test_request_string_uint"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '1': // Prefix: "16"
										if l := len("16"); len(elem) >= l && elem[0:l] == "16" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestStringUint16"
												r.summary = ""
												r.operationID = "test_request_string_uint16"
												r.pathPattern = "/test_request_string_uint16"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestStringUint16Array"
														r.summary = ""
														r.operationID = "test_request_string_uint16_array"
														r.pathPattern = "/test_request_string_uint16_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestStringUint16ArrayArray
															r.name = "TestRequestStringUint16ArrayArray"
															r.summary = ""
															r.operationID = "test_request_string_uint16_array_array"
															r.pathPattern = "/test_request_string_uint16_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestStringUint16Nullable"
														r.summary = ""
														r.operationID = "test_request_string_uint16_nullable"
														r.pathPattern = "/test_request_string_uint16_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestStringUint16NullableArray"
															r.summary = ""
															r.operationID = "test_request_string_uint16_nullable_array"
															r.pathPattern = "/test_request_string_uint16_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestStringUint16NullableArrayArray
																r.name = "TestRequestStringUint16NullableArrayArray"
																r.summary = ""
																r.operationID = "test_request_string_uint16_nullable_array_array"
																r.pathPattern = "/test_request_string_uint16_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										}
									case '3': // Prefix: "32"
										if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestStringUint32"
												r.summary = ""
												r.operationID = "test_request_string_uint32"
												r.pathPattern = "/test_request_string_uint32"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestStringUint32Array"
														r.summary = ""
														r.operationID = "test_request_string_uint32_array"
														r.pathPattern = "/test_request_string_uint32_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestStringUint32ArrayArray
															r.name = "TestRequestStringUint32ArrayArray"
															r.summary = ""
															r.operationID = "test_request_string_uint32_array_array"
															r.pathPattern = "/test_request_string_uint32_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestStringUint32Nullable"
														r.summary = ""
														r.operationID = "test_request_string_uint32_nullable"
														r.pathPattern = "/test_request_string_uint32_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestStringUint32NullableArray"
															r.summary = ""
															r.operationID = "test_request_string_uint32_nullable_array"
															r.pathPattern = "/test_request_string_uint32_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestStringUint32NullableArrayArray
																r.name = "TestRequestStringUint32NullableArrayArray"
																r.summary = ""
																r.operationID = "test_request_string_uint32_nullable_array_array"
																r.pathPattern = "/test_request_string_uint32_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										}
									case '6': // Prefix: "64"
										if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestStringUint64"
												r.summary = ""
												r.operationID = "test_request_string_uint64"
												r.pathPattern = "/test_request_string_uint64"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestStringUint64Array"
														r.summary = ""
														r.operationID = "test_request_string_uint64_array"
														r.pathPattern = "/test_request_string_uint64_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestStringUint64ArrayArray
															r.name = "TestRequestStringUint64ArrayArray"
															r.summary = ""
															r.operationID = "test_request_string_uint64_array_array"
															r.pathPattern = "/test_request_string_uint64_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestStringUint64Nullable"
														r.summary = ""
														r.operationID = "test_request_string_uint64_nullable"
														r.pathPattern = "/test_request_string_uint64_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestStringUint64NullableArray"
															r.summary = ""
															r.operationID = "test_request_string_uint64_nullable_array"
															r.pathPattern = "/test_request_string_uint64_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestStringUint64NullableArrayArray
																r.name = "TestRequestStringUint64NullableArrayArray"
																r.summary = ""
																r.operationID = "test_request_string_uint64_nullable_array_array"
																r.pathPattern = "/test_request_string_uint64_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										}
									case '8': // Prefix: "8"
										if l := len("8"); len(elem) >= l && elem[0:l] == "8" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestRequestStringUint8"
												r.summary = ""
												r.operationID = "test_request_string_uint8"
												r.pathPattern = "/test_request_string_uint8"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestStringUint8Array"
														r.summary = ""
														r.operationID = "test_request_string_uint8_array"
														r.pathPattern = "/test_request_string_uint8_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestStringUint8ArrayArray
															r.name = "TestRequestStringUint8ArrayArray"
															r.summary = ""
															r.operationID = "test_request_string_uint8_array_array"
															r.pathPattern = "/test_request_string_uint8_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestStringUint8Nullable"
														r.summary = ""
														r.operationID = "test_request_string_uint8_nullable"
														r.pathPattern = "/test_request_string_uint8_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestStringUint8NullableArray"
															r.summary = ""
															r.operationID = "test_request_string_uint8_nullable_array"
															r.pathPattern = "/test_request_string_uint8_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestStringUint8NullableArrayArray
																r.name = "TestRequestStringUint8NullableArrayArray"
																r.summary = ""
																r.operationID = "test_request_string_uint8_nullable_array_array"
																r.pathPattern = "/test_request_string_uint8_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										}
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestStringUintArray"
													r.summary = ""
													r.operationID = "test_request_string_uint_array"
													r.pathPattern = "/test_request_string_uint_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestRequestStringUintArrayArray
														r.name = "TestRequestStringUintArrayArray"
														r.summary = ""
														r.operationID = "test_request_string_uint_array_array"
														r.pathPattern = "/test_request_string_uint_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestStringUintNullable"
													r.summary = ""
													r.operationID = "test_request_string_uint_nullable"
													r.pathPattern = "/test_request_string_uint_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestStringUintNullableArray"
														r.summary = ""
														r.operationID = "test_request_string_uint_nullable_array"
														r.pathPattern = "/test_request_string_uint_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestStringUintNullableArrayArray
															r.name = "TestRequestStringUintNullableArrayArray"
															r.summary = ""
															r.operationID = "test_request_string_uint_nullable_array_array"
															r.pathPattern = "/test_request_string_uint_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											}
										}
									}
								case 'n': // Prefix: "nix"
									if l := len("nix"); len(elem) >= l && elem[0:l] == "nix" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestRequestStringUnix"
											r.summary = ""
											r.operationID = "test_request_string_unix"
											r.pathPattern = "/test_request_string_unix"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '-': // Prefix: "-"
										if l := len("-"); len(elem) >= l && elem[0:l] == "-" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'm': // Prefix: "mi"
											if l := len("mi"); len(elem) >= l && elem[0:l] == "mi" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'c': // Prefix: "cro"
												if l := len("cro"); len(elem) >= l && elem[0:l] == "cro" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestStringUnixMicro"
														r.summary = ""
														r.operationID = "test_request_string_unix-micro"
														r.pathPattern = "/test_request_string_unix-micro"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_"
													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"
														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestRequestStringUnixMicroArray"
																r.summary = ""
																r.operationID = "test_request_string_unix-micro_array"
																r.pathPattern = "/test_request_string_unix-micro_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	// Leaf: TestRequestStringUnixMicroArrayArray
																	r.name = "TestRequestStringUnixMicroArrayArray"
																	r.summary = ""
																	r.operationID = "test_request_string_unix-micro_array_array"
																	r.pathPattern = "/test_request_string_unix-micro_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
														}
													case 'n': // Prefix: "nullable"
														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestRequestStringUnixMicroNullable"
																r.summary = ""
																r.operationID = "test_request_string_unix-micro_nullable"
																r.pathPattern = "/test_request_string_unix-micro_nullable"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	r.name = "TestRequestStringUnixMicroNullableArray"
																	r.summary = ""
																	r.operationID = "test_request_string_unix-micro_nullable_array"
																	r.pathPattern = "/test_request_string_unix-micro_nullable_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
															switch elem[0] {
															case '_': // Prefix: "_array"
																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	switch method {
																	case "POST":
																		// Leaf: TestRequestStringUnixMicroNullableArrayArray
																		r.name = "TestRequestStringUnixMicroNullableArrayArray"
																		r.summary = ""
																		r.operationID = "test_request_string_unix-micro_nullable_array_array"
																		r.pathPattern = "/test_request_string_unix-micro_nullable_array_array"
																		r.args = args
																		r.count = 0
																		return r, true
																	default:
																		return
																	}
																}
															}
														}
													}
												}
											case 'l': // Prefix: "lli"
												if l := len("lli"); len(elem) >= l && elem[0:l] == "lli" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestStringUnixMilli"
														r.summary = ""
														r.operationID = "test_request_string_unix-milli"
														r.pathPattern = "/test_request_string_unix-milli"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_"
													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"
														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestRequestStringUnixMilliArray"
																r.summary = ""
																r.operationID = "test_request_string_unix-milli_array"
																r.pathPattern = "/test_request_string_unix-milli_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	// Leaf: TestRequestStringUnixMilliArrayArray
																	r.name = "TestRequestStringUnixMilliArrayArray"
																	r.summary = ""
																	r.operationID = "test_request_string_unix-milli_array_array"
																	r.pathPattern = "/test_request_string_unix-milli_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
														}
													case 'n': // Prefix: "nullable"
														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestRequestStringUnixMilliNullable"
																r.summary = ""
																r.operationID = "test_request_string_unix-milli_nullable"
																r.pathPattern = "/test_request_string_unix-milli_nullable"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	r.name = "TestRequestStringUnixMilliNullableArray"
																	r.summary = ""
																	r.operationID = "test_request_string_unix-milli_nullable_array"
																	r.pathPattern = "/test_request_string_unix-milli_nullable_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
															switch elem[0] {
															case '_': // Prefix: "_array"
																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	switch method {
																	case "POST":
																		// Leaf: TestRequestStringUnixMilliNullableArrayArray
																		r.name = "TestRequestStringUnixMilliNullableArrayArray"
																		r.summary = ""
																		r.operationID = "test_request_string_unix-milli_nullable_array_array"
																		r.pathPattern = "/test_request_string_unix-milli_nullable_array_array"
																		r.args = args
																		r.count = 0
																		return r, true
																	default:
																		return
																	}
																}
															}
														}
													}
												}
											}
										case 'n': // Prefix: "nano"
											if l := len("nano"); len(elem) >= l && elem[0:l] == "nano" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestStringUnixNano"
													r.summary = ""
													r.operationID = "test_request_string_unix-nano"
													r.pathPattern = "/test_request_string_unix-nano"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestStringUnixNanoArray"
															r.summary = ""
															r.operationID = "test_request_string_unix-nano_array"
															r.pathPattern = "/test_request_string_unix-nano_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestStringUnixNanoArrayArray
																r.name = "TestRequestStringUnixNanoArrayArray"
																r.summary = ""
																r.operationID = "test_request_string_unix-nano_array_array"
																r.pathPattern = "/test_request_string_unix-nano_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestStringUnixNanoNullable"
															r.summary = ""
															r.operationID = "test_request_string_unix-nano_nullable"
															r.pathPattern = "/test_request_string_unix-nano_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestRequestStringUnixNanoNullableArray"
																r.summary = ""
																r.operationID = "test_request_string_unix-nano_nullable_array"
																r.pathPattern = "/test_request_string_unix-nano_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	// Leaf: TestRequestStringUnixNanoNullableArrayArray
																	r.name = "TestRequestStringUnixNanoNullableArrayArray"
																	r.summary = ""
																	r.operationID = "test_request_string_unix-nano_nullable_array_array"
																	r.pathPattern = "/test_request_string_unix-nano_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
														}
													}
												}
											}
										case 's': // Prefix: "seconds"
											if l := len("seconds"); len(elem) >= l && elem[0:l] == "seconds" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestStringUnixSeconds"
													r.summary = ""
													r.operationID = "test_request_string_unix-seconds"
													r.pathPattern = "/test_request_string_unix-seconds"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestStringUnixSecondsArray"
															r.summary = ""
															r.operationID = "test_request_string_unix-seconds_array"
															r.pathPattern = "/test_request_string_unix-seconds_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestRequestStringUnixSecondsArrayArray
																r.name = "TestRequestStringUnixSecondsArrayArray"
																r.summary = ""
																r.operationID = "test_request_string_unix-seconds_array_array"
																r.pathPattern = "/test_request_string_unix-seconds_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestRequestStringUnixSecondsNullable"
															r.summary = ""
															r.operationID = "test_request_string_unix-seconds_nullable"
															r.pathPattern = "/test_request_string_unix-seconds_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestRequestStringUnixSecondsNullableArray"
																r.summary = ""
																r.operationID = "test_request_string_unix-seconds_nullable_array"
																r.pathPattern = "/test_request_string_unix-seconds_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	// Leaf: TestRequestStringUnixSecondsNullableArrayArray
																	r.name = "TestRequestStringUnixSecondsNullableArrayArray"
																	r.summary = ""
																	r.operationID = "test_request_string_unix-seconds_nullable_array_array"
																	r.pathPattern = "/test_request_string_unix-seconds_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
														}
													}
												}
											}
										}
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestStringUnixArray"
													r.summary = ""
													r.operationID = "test_request_string_unix_array"
													r.pathPattern = "/test_request_string_unix_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestRequestStringUnixArrayArray
														r.name = "TestRequestStringUnixArrayArray"
														r.summary = ""
														r.operationID = "test_request_string_unix_array_array"
														r.pathPattern = "/test_request_string_unix_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestStringUnixNullable"
													r.summary = ""
													r.operationID = "test_request_string_unix_nullable"
													r.pathPattern = "/test_request_string_unix_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestStringUnixNullableArray"
														r.summary = ""
														r.operationID = "test_request_string_unix_nullable_array"
														r.pathPattern = "/test_request_string_unix_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestStringUnixNullableArrayArray
															r.name = "TestRequestStringUnixNullableArrayArray"
															r.summary = ""
															r.operationID = "test_request_string_unix_nullable_array_array"
															r.pathPattern = "/test_request_string_unix_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											}
										}
									}
								case 'r': // Prefix: "ri"
									if l := len("ri"); len(elem) >= l && elem[0:l] == "ri" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestRequestStringURI"
											r.summary = ""
											r.operationID = "test_request_string_uri"
											r.pathPattern = "/test_request_string_uri"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestStringURIArray"
													r.summary = ""
													r.operationID = "test_request_string_uri_array"
													r.pathPattern = "/test_request_string_uri_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestRequestStringURIArrayArray
														r.name = "TestRequestStringURIArrayArray"
														r.summary = ""
														r.operationID = "test_request_string_uri_array_array"
														r.pathPattern = "/test_request_string_uri_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestStringURINullable"
													r.summary = ""
													r.operationID = "test_request_string_uri_nullable"
													r.pathPattern = "/test_request_string_uri_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestStringURINullableArray"
														r.summary = ""
														r.operationID = "test_request_string_uri_nullable_array"
														r.pathPattern = "/test_request_string_uri_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestStringURINullableArrayArray
															r.name = "TestRequestStringURINullableArrayArray"
															r.summary = ""
															r.operationID = "test_request_string_uri_nullable_array_array"
															r.pathPattern = "/test_request_string_uri_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											}
										}
									}
								case 'u': // Prefix: "uid"
									if l := len("uid"); len(elem) >= l && elem[0:l] == "uid" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestRequestStringUUID"
											r.summary = ""
											r.operationID = "test_request_string_uuid"
											r.pathPattern = "/test_request_string_uuid"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestStringUUIDArray"
													r.summary = ""
													r.operationID = "test_request_string_uuid_array"
													r.pathPattern = "/test_request_string_uuid_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestRequestStringUUIDArrayArray
														r.name = "TestRequestStringUUIDArrayArray"
														r.summary = ""
														r.operationID = "test_request_string_uuid_array_array"
														r.pathPattern = "/test_request_string_uuid_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestRequestStringUUIDNullable"
													r.summary = ""
													r.operationID = "test_request_string_uuid_nullable"
													r.pathPattern = "/test_request_string_uuid_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestRequestStringUUIDNullableArray"
														r.summary = ""
														r.operationID = "test_request_string_uuid_nullable_array"
														r.pathPattern = "/test_request_string_uuid_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestRequestStringUUIDNullableArrayArray
															r.name = "TestRequestStringUUIDNullableArrayArray"
															r.summary = ""
															r.operationID = "test_request_string_uuid_nullable_array_array"
															r.pathPattern = "/test_request_string_uuid_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				case 's': // Prefix: "sponse_"
					if l := len("sponse_"); len(elem) >= l && elem[0:l] == "sponse_" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'A': // Prefix: "Any"
						if l := len("Any"); len(elem) >= l && elem[0:l] == "Any" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: TestResponseAny
								r.name = "TestResponseAny"
								r.summary = ""
								r.operationID = "test_response_Any"
								r.pathPattern = "/test_response_Any"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					case 'E': // Prefix: "EmptyStruct"
						if l := len("EmptyStruct"); len(elem) >= l && elem[0:l] == "EmptyStruct" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: TestResponseEmptyStruct
								r.name = "TestResponseEmptyStruct"
								r.summary = ""
								r.operationID = "test_response_EmptyStruct"
								r.pathPattern = "/test_response_EmptyStruct"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					case 'F': // Prefix: "FormatTest"
						if l := len("FormatTest"); len(elem) >= l && elem[0:l] == "FormatTest" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: TestResponseFormatTest
								r.name = "TestResponseFormatTest"
								r.summary = ""
								r.operationID = "test_response_FormatTest"
								r.pathPattern = "/test_response_FormatTest"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					case 'b': // Prefix: "boolean"
						if l := len("boolean"); len(elem) >= l && elem[0:l] == "boolean" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								r.name = "TestResponseBoolean"
								r.summary = ""
								r.operationID = "test_response_boolean"
								r.pathPattern = "/test_response_boolean"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '_': // Prefix: "_"
							if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "array"
								if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = "TestResponseBooleanArray"
										r.summary = ""
										r.operationID = "test_response_boolean_array"
										r.pathPattern = "/test_response_boolean_array"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											// Leaf: TestResponseBooleanArrayArray
											r.name = "TestResponseBooleanArrayArray"
											r.summary = ""
											r.operationID = "test_response_boolean_array_array"
											r.pathPattern = "/test_response_boolean_array_array"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
								}
							case 'n': // Prefix: "nullable"
								if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = "TestResponseBooleanNullable"
										r.summary = ""
										r.operationID = "test_response_boolean_nullable"
										r.pathPattern = "/test_response_boolean_nullable"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestResponseBooleanNullableArray"
											r.summary = ""
											r.operationID = "test_response_boolean_nullable_array"
											r.pathPattern = "/test_response_boolean_nullable_array"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												// Leaf: TestResponseBooleanNullableArrayArray
												r.name = "TestResponseBooleanNullableArrayArray"
												r.summary = ""
												r.operationID = "test_response_boolean_nullable_array_array"
												r.pathPattern = "/test_response_boolean_nullable_array_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
									}
								}
							}
						}
					case 'i': // Prefix: "integer"
						if l := len("integer"); len(elem) >= l && elem[0:l] == "integer" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								r.name = "TestResponseInteger"
								r.summary = ""
								r.operationID = "test_response_integer"
								r.pathPattern = "/test_response_integer"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '_': // Prefix: "_"
							if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "array"
								if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = "TestResponseIntegerArray"
										r.summary = ""
										r.operationID = "test_response_integer_array"
										r.pathPattern = "/test_response_integer_array"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											// Leaf: TestResponseIntegerArrayArray
											r.name = "TestResponseIntegerArrayArray"
											r.summary = ""
											r.operationID = "test_response_integer_array_array"
											r.pathPattern = "/test_response_integer_array_array"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
								}
							case 'i': // Prefix: "int"
								if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case '1': // Prefix: "16"
									if l := len("16"); len(elem) >= l && elem[0:l] == "16" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestResponseIntegerInt16"
											r.summary = ""
											r.operationID = "test_response_integer_int16"
											r.pathPattern = "/test_response_integer_int16"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestResponseIntegerInt16Array"
													r.summary = ""
													r.operationID = "test_response_integer_int16_array"
													r.pathPattern = "/test_response_integer_int16_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestResponseIntegerInt16ArrayArray
														r.name = "TestResponseIntegerInt16ArrayArray"
														r.summary = ""
														r.operationID = "test_response_integer_int16_array_array"
														r.pathPattern = "/test_response_integer_int16_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestResponseIntegerInt16Nullable"
													r.summary = ""
													r.operationID = "test_response_integer_int16_nullable"
													r.pathPattern = "/test_response_integer_int16_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseIntegerInt16NullableArray"
														r.summary = ""
														r.operationID = "test_response_integer_int16_nullable_array"
														r.pathPattern = "/test_response_integer_int16_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestResponseIntegerInt16NullableArrayArray
															r.name = "TestResponseIntegerInt16NullableArrayArray"
															r.summary = ""
															r.operationID = "test_response_integer_int16_nullable_array_array"
															r.pathPattern = "/test_response_integer_int16_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											}
										}
									}
								case '3': // Prefix: "32"
									if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestResponseIntegerInt32"
											r.summary = ""
											r.operationID = "test_response_integer_int32"
											r.pathPattern = "/test_response_integer_int32"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestResponseIntegerInt32Array"
													r.summary = ""
													r.operationID = "test_response_integer_int32_array"
													r.pathPattern = "/test_response_integer_int32_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestResponseIntegerInt32ArrayArray
														r.name = "TestResponseIntegerInt32ArrayArray"
														r.summary = ""
														r.operationID = "test_response_integer_int32_array_array"
														r.pathPattern = "/test_response_integer_int32_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestResponseIntegerInt32Nullable"
													r.summary = ""
													r.operationID = "test_response_integer_int32_nullable"
													r.pathPattern = "/test_response_integer_int32_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseIntegerInt32NullableArray"
														r.summary = ""
														r.operationID = "test_response_integer_int32_nullable_array"
														r.pathPattern = "/test_response_integer_int32_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestResponseIntegerInt32NullableArrayArray
															r.name = "TestResponseIntegerInt32NullableArrayArray"
															r.summary = ""
															r.operationID = "test_response_integer_int32_nullable_array_array"
															r.pathPattern = "/test_response_integer_int32_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											}
										}
									}
								case '6': // Prefix: "64"
									if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestResponseIntegerInt64"
											r.summary = ""
											r.operationID = "test_response_integer_int64"
											r.pathPattern = "/test_response_integer_int64"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestResponseIntegerInt64Array"
													r.summary = ""
													r.operationID = "test_response_integer_int64_array"
													r.pathPattern = "/test_response_integer_int64_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestResponseIntegerInt64ArrayArray
														r.name = "TestResponseIntegerInt64ArrayArray"
														r.summary = ""
														r.operationID = "test_response_integer_int64_array_array"
														r.pathPattern = "/test_response_integer_int64_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestResponseIntegerInt64Nullable"
													r.summary = ""
													r.operationID = "test_response_integer_int64_nullable"
													r.pathPattern = "/test_response_integer_int64_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseIntegerInt64NullableArray"
														r.summary = ""
														r.operationID = "test_response_integer_int64_nullable_array"
														r.pathPattern = "/test_response_integer_int64_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestResponseIntegerInt64NullableArrayArray
															r.name = "TestResponseIntegerInt64NullableArrayArray"
															r.summary = ""
															r.operationID = "test_response_integer_int64_nullable_array_array"
															r.pathPattern = "/test_response_integer_int64_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											}
										}
									}
								case '8': // Prefix: "8"
									if l := len("8"); len(elem) >= l && elem[0:l] == "8" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestResponseIntegerInt8"
											r.summary = ""
											r.operationID = "test_response_integer_int8"
											r.pathPattern = "/test_response_integer_int8"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestResponseIntegerInt8Array"
													r.summary = ""
													r.operationID = "test_response_integer_int8_array"
													r.pathPattern = "/test_response_integer_int8_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestResponseIntegerInt8ArrayArray
														r.name = "TestResponseIntegerInt8ArrayArray"
														r.summary = ""
														r.operationID = "test_response_integer_int8_array_array"
														r.pathPattern = "/test_response_integer_int8_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestResponseIntegerInt8Nullable"
													r.summary = ""
													r.operationID = "test_response_integer_int8_nullable"
													r.pathPattern = "/test_response_integer_int8_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseIntegerInt8NullableArray"
														r.summary = ""
														r.operationID = "test_response_integer_int8_nullable_array"
														r.pathPattern = "/test_response_integer_int8_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestResponseIntegerInt8NullableArrayArray
															r.name = "TestResponseIntegerInt8NullableArrayArray"
															r.summary = ""
															r.operationID = "test_response_integer_int8_nullable_array_array"
															r.pathPattern = "/test_response_integer_int8_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											}
										}
									}
								}
							case 'n': // Prefix: "nullable"
								if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = "TestResponseIntegerNullable"
										r.summary = ""
										r.operationID = "test_response_integer_nullable"
										r.pathPattern = "/test_response_integer_nullable"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestResponseIntegerNullableArray"
											r.summary = ""
											r.operationID = "test_response_integer_nullable_array"
											r.pathPattern = "/test_response_integer_nullable_array"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												// Leaf: TestResponseIntegerNullableArrayArray
												r.name = "TestResponseIntegerNullableArrayArray"
												r.summary = ""
												r.operationID = "test_response_integer_nullable_array_array"
												r.pathPattern = "/test_response_integer_nullable_array_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
									}
								}
							case 'u': // Prefix: "u"
								if l := len("u"); len(elem) >= l && elem[0:l] == "u" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'i': // Prefix: "int"
									if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestResponseIntegerUint"
											r.summary = ""
											r.operationID = "test_response_integer_uint"
											r.pathPattern = "/test_response_integer_uint"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '1': // Prefix: "16"
										if l := len("16"); len(elem) >= l && elem[0:l] == "16" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestResponseIntegerUint16"
												r.summary = ""
												r.operationID = "test_response_integer_uint16"
												r.pathPattern = "/test_response_integer_uint16"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseIntegerUint16Array"
														r.summary = ""
														r.operationID = "test_response_integer_uint16_array"
														r.pathPattern = "/test_response_integer_uint16_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestResponseIntegerUint16ArrayArray
															r.name = "TestResponseIntegerUint16ArrayArray"
															r.summary = ""
															r.operationID = "test_response_integer_uint16_array_array"
															r.pathPattern = "/test_response_integer_uint16_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseIntegerUint16Nullable"
														r.summary = ""
														r.operationID = "test_response_integer_uint16_nullable"
														r.pathPattern = "/test_response_integer_uint16_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestResponseIntegerUint16NullableArray"
															r.summary = ""
															r.operationID = "test_response_integer_uint16_nullable_array"
															r.pathPattern = "/test_response_integer_uint16_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestResponseIntegerUint16NullableArrayArray
																r.name = "TestResponseIntegerUint16NullableArrayArray"
																r.summary = ""
																r.operationID = "test_response_integer_uint16_nullable_array_array"
																r.pathPattern = "/test_response_integer_uint16_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										}
									case '3': // Prefix: "32"
										if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestResponseIntegerUint32"
												r.summary = ""
												r.operationID = "test_response_integer_uint32"
												r.pathPattern = "/test_response_integer_uint32"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseIntegerUint32Array"
														r.summary = ""
														r.operationID = "test_response_integer_uint32_array"
														r.pathPattern = "/test_response_integer_uint32_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestResponseIntegerUint32ArrayArray
															r.name = "TestResponseIntegerUint32ArrayArray"
															r.summary = ""
															r.operationID = "test_response_integer_uint32_array_array"
															r.pathPattern = "/test_response_integer_uint32_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseIntegerUint32Nullable"
														r.summary = ""
														r.operationID = "test_response_integer_uint32_nullable"
														r.pathPattern = "/test_response_integer_uint32_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestResponseIntegerUint32NullableArray"
															r.summary = ""
															r.operationID = "test_response_integer_uint32_nullable_array"
															r.pathPattern = "/test_response_integer_uint32_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestResponseIntegerUint32NullableArrayArray
																r.name = "TestResponseIntegerUint32NullableArrayArray"
																r.summary = ""
																r.operationID = "test_response_integer_uint32_nullable_array_array"
																r.pathPattern = "/test_response_integer_uint32_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										}
									case '6': // Prefix: "64"
										if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestResponseIntegerUint64"
												r.summary = ""
												r.operationID = "test_response_integer_uint64"
												r.pathPattern = "/test_response_integer_uint64"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseIntegerUint64Array"
														r.summary = ""
														r.operationID = "test_response_integer_uint64_array"
														r.pathPattern = "/test_response_integer_uint64_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestResponseIntegerUint64ArrayArray
															r.name = "TestResponseIntegerUint64ArrayArray"
															r.summary = ""
															r.operationID = "test_response_integer_uint64_array_array"
															r.pathPattern = "/test_response_integer_uint64_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseIntegerUint64Nullable"
														r.summary = ""
														r.operationID = "test_response_integer_uint64_nullable"
														r.pathPattern = "/test_response_integer_uint64_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestResponseIntegerUint64NullableArray"
															r.summary = ""
															r.operationID = "test_response_integer_uint64_nullable_array"
															r.pathPattern = "/test_response_integer_uint64_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestResponseIntegerUint64NullableArrayArray
																r.name = "TestResponseIntegerUint64NullableArrayArray"
																r.summary = ""
																r.operationID = "test_response_integer_uint64_nullable_array_array"
																r.pathPattern = "/test_response_integer_uint64_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										}
									case '8': // Prefix: "8"
										if l := len("8"); len(elem) >= l && elem[0:l] == "8" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestResponseIntegerUint8"
												r.summary = ""
												r.operationID = "test_response_integer_uint8"
												r.pathPattern = "/test_response_integer_uint8"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseIntegerUint8Array"
														r.summary = ""
														r.operationID = "test_response_integer_uint8_array"
														r.pathPattern = "/test_response_integer_uint8_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestResponseIntegerUint8ArrayArray
															r.name = "TestResponseIntegerUint8ArrayArray"
															r.summary = ""
															r.operationID = "test_response_integer_uint8_array_array"
															r.pathPattern = "/test_response_integer_uint8_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseIntegerUint8Nullable"
														r.summary = ""
														r.operationID = "test_response_integer_uint8_nullable"
														r.pathPattern = "/test_response_integer_uint8_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestResponseIntegerUint8NullableArray"
															r.summary = ""
															r.operationID = "test_response_integer_uint8_nullable_array"
															r.pathPattern = "/test_response_integer_uint8_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestResponseIntegerUint8NullableArrayArray
																r.name = "TestResponseIntegerUint8NullableArrayArray"
																r.summary = ""
																r.operationID = "test_response_integer_uint8_nullable_array_array"
																r.pathPattern = "/test_response_integer_uint8_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										}
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestResponseIntegerUintArray"
													r.summary = ""
													r.operationID = "test_response_integer_uint_array"
													r.pathPattern = "/test_response_integer_uint_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestResponseIntegerUintArrayArray
														r.name = "TestResponseIntegerUintArrayArray"
														r.summary = ""
														r.operationID = "test_response_integer_uint_array_array"
														r.pathPattern = "/test_response_integer_uint_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestResponseIntegerUintNullable"
													r.summary = ""
													r.operationID = "test_response_integer_uint_nullable"
													r.pathPattern = "/test_response_integer_uint_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseIntegerUintNullableArray"
														r.summary = ""
														r.operationID = "test_response_integer_uint_nullable_array"
														r.pathPattern = "/test_response_integer_uint_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestResponseIntegerUintNullableArrayArray
															r.name = "TestResponseIntegerUintNullableArrayArray"
															r.summary = ""
															r.operationID = "test_response_integer_uint_nullable_array_array"
															r.pathPattern = "/test_response_integer_uint_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											}
										}
									}
								case 'n': // Prefix: "nix"
									if l := len("nix"); len(elem) >= l && elem[0:l] == "nix" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestResponseIntegerUnix"
											r.summary = ""
											r.operationID = "test_response_integer_unix"
											r.pathPattern = "/test_response_integer_unix"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '-': // Prefix: "-"
										if l := len("-"); len(elem) >= l && elem[0:l] == "-" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'm': // Prefix: "mi"
											if l := len("mi"); len(elem) >= l && elem[0:l] == "mi" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'c': // Prefix: "cro"
												if l := len("cro"); len(elem) >= l && elem[0:l] == "cro" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseIntegerUnixMicro"
														r.summary = ""
														r.operationID = "test_response_integer_unix-micro"
														r.pathPattern = "/test_response_integer_unix-micro"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_"
													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"
														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestResponseIntegerUnixMicroArray"
																r.summary = ""
																r.operationID = "test_response_integer_unix-micro_array"
																r.pathPattern = "/test_response_integer_unix-micro_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	// Leaf: TestResponseIntegerUnixMicroArrayArray
																	r.name = "TestResponseIntegerUnixMicroArrayArray"
																	r.summary = ""
																	r.operationID = "test_response_integer_unix-micro_array_array"
																	r.pathPattern = "/test_response_integer_unix-micro_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
														}
													case 'n': // Prefix: "nullable"
														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestResponseIntegerUnixMicroNullable"
																r.summary = ""
																r.operationID = "test_response_integer_unix-micro_nullable"
																r.pathPattern = "/test_response_integer_unix-micro_nullable"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	r.name = "TestResponseIntegerUnixMicroNullableArray"
																	r.summary = ""
																	r.operationID = "test_response_integer_unix-micro_nullable_array"
																	r.pathPattern = "/test_response_integer_unix-micro_nullable_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
															switch elem[0] {
															case '_': // Prefix: "_array"
																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	switch method {
																	case "POST":
																		// Leaf: TestResponseIntegerUnixMicroNullableArrayArray
																		r.name = "TestResponseIntegerUnixMicroNullableArrayArray"
																		r.summary = ""
																		r.operationID = "test_response_integer_unix-micro_nullable_array_array"
																		r.pathPattern = "/test_response_integer_unix-micro_nullable_array_array"
																		r.args = args
																		r.count = 0
																		return r, true
																	default:
																		return
																	}
																}
															}
														}
													}
												}
											case 'l': // Prefix: "lli"
												if l := len("lli"); len(elem) >= l && elem[0:l] == "lli" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseIntegerUnixMilli"
														r.summary = ""
														r.operationID = "test_response_integer_unix-milli"
														r.pathPattern = "/test_response_integer_unix-milli"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_"
													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"
														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestResponseIntegerUnixMilliArray"
																r.summary = ""
																r.operationID = "test_response_integer_unix-milli_array"
																r.pathPattern = "/test_response_integer_unix-milli_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	// Leaf: TestResponseIntegerUnixMilliArrayArray
																	r.name = "TestResponseIntegerUnixMilliArrayArray"
																	r.summary = ""
																	r.operationID = "test_response_integer_unix-milli_array_array"
																	r.pathPattern = "/test_response_integer_unix-milli_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
														}
													case 'n': // Prefix: "nullable"
														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestResponseIntegerUnixMilliNullable"
																r.summary = ""
																r.operationID = "test_response_integer_unix-milli_nullable"
																r.pathPattern = "/test_response_integer_unix-milli_nullable"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	r.name = "TestResponseIntegerUnixMilliNullableArray"
																	r.summary = ""
																	r.operationID = "test_response_integer_unix-milli_nullable_array"
																	r.pathPattern = "/test_response_integer_unix-milli_nullable_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
															switch elem[0] {
															case '_': // Prefix: "_array"
																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	switch method {
																	case "POST":
																		// Leaf: TestResponseIntegerUnixMilliNullableArrayArray
																		r.name = "TestResponseIntegerUnixMilliNullableArrayArray"
																		r.summary = ""
																		r.operationID = "test_response_integer_unix-milli_nullable_array_array"
																		r.pathPattern = "/test_response_integer_unix-milli_nullable_array_array"
																		r.args = args
																		r.count = 0
																		return r, true
																	default:
																		return
																	}
																}
															}
														}
													}
												}
											}
										case 'n': // Prefix: "nano"
											if l := len("nano"); len(elem) >= l && elem[0:l] == "nano" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestResponseIntegerUnixNano"
													r.summary = ""
													r.operationID = "test_response_integer_unix-nano"
													r.pathPattern = "/test_response_integer_unix-nano"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestResponseIntegerUnixNanoArray"
															r.summary = ""
															r.operationID = "test_response_integer_unix-nano_array"
															r.pathPattern = "/test_response_integer_unix-nano_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestResponseIntegerUnixNanoArrayArray
																r.name = "TestResponseIntegerUnixNanoArrayArray"
																r.summary = ""
																r.operationID = "test_response_integer_unix-nano_array_array"
																r.pathPattern = "/test_response_integer_unix-nano_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestResponseIntegerUnixNanoNullable"
															r.summary = ""
															r.operationID = "test_response_integer_unix-nano_nullable"
															r.pathPattern = "/test_response_integer_unix-nano_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestResponseIntegerUnixNanoNullableArray"
																r.summary = ""
																r.operationID = "test_response_integer_unix-nano_nullable_array"
																r.pathPattern = "/test_response_integer_unix-nano_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	// Leaf: TestResponseIntegerUnixNanoNullableArrayArray
																	r.name = "TestResponseIntegerUnixNanoNullableArrayArray"
																	r.summary = ""
																	r.operationID = "test_response_integer_unix-nano_nullable_array_array"
																	r.pathPattern = "/test_response_integer_unix-nano_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
														}
													}
												}
											}
										case 's': // Prefix: "seconds"
											if l := len("seconds"); len(elem) >= l && elem[0:l] == "seconds" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestResponseIntegerUnixSeconds"
													r.summary = ""
													r.operationID = "test_response_integer_unix-seconds"
													r.pathPattern = "/test_response_integer_unix-seconds"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestResponseIntegerUnixSecondsArray"
															r.summary = ""
															r.operationID = "test_response_integer_unix-seconds_array"
															r.pathPattern = "/test_response_integer_unix-seconds_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestResponseIntegerUnixSecondsArrayArray
																r.name = "TestResponseIntegerUnixSecondsArrayArray"
																r.summary = ""
																r.operationID = "test_response_integer_unix-seconds_array_array"
																r.pathPattern = "/test_response_integer_unix-seconds_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestResponseIntegerUnixSecondsNullable"
															r.summary = ""
															r.operationID = "test_response_integer_unix-seconds_nullable"
															r.pathPattern = "/test_response_integer_unix-seconds_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestResponseIntegerUnixSecondsNullableArray"
																r.summary = ""
																r.operationID = "test_response_integer_unix-seconds_nullable_array"
																r.pathPattern = "/test_response_integer_unix-seconds_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	// Leaf: TestResponseIntegerUnixSecondsNullableArrayArray
																	r.name = "TestResponseIntegerUnixSecondsNullableArrayArray"
																	r.summary = ""
																	r.operationID = "test_response_integer_unix-seconds_nullable_array_array"
																	r.pathPattern = "/test_response_integer_unix-seconds_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
														}
													}
												}
											}
										}
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestResponseIntegerUnixArray"
													r.summary = ""
													r.operationID = "test_response_integer_unix_array"
													r.pathPattern = "/test_response_integer_unix_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestResponseIntegerUnixArrayArray
														r.name = "TestResponseIntegerUnixArrayArray"
														r.summary = ""
														r.operationID = "test_response_integer_unix_array_array"
														r.pathPattern = "/test_response_integer_unix_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestResponseIntegerUnixNullable"
													r.summary = ""
													r.operationID = "test_response_integer_unix_nullable"
													r.pathPattern = "/test_response_integer_unix_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseIntegerUnixNullableArray"
														r.summary = ""
														r.operationID = "test_response_integer_unix_nullable_array"
														r.pathPattern = "/test_response_integer_unix_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestResponseIntegerUnixNullableArrayArray
															r.name = "TestResponseIntegerUnixNullableArrayArray"
															r.summary = ""
															r.operationID = "test_response_integer_unix_nullable_array_array"
															r.pathPattern = "/test_response_integer_unix_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											}
										}
									}
								}
							}
						}
					case 'n': // Prefix: "nu"
						if l := len("nu"); len(elem) >= l && elem[0:l] == "nu" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'l': // Prefix: "ll"
							if l := len("ll"); len(elem) >= l && elem[0:l] == "ll" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									r.name = "TestResponseNull"
									r.summary = ""
									r.operationID = "test_response_null"
									r.pathPattern = "/test_response_null"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestResponseNullArray"
											r.summary = ""
											r.operationID = "test_response_null_array"
											r.pathPattern = "/test_response_null_array"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												// Leaf: TestResponseNullArrayArray
												r.name = "TestResponseNullArrayArray"
												r.summary = ""
												r.operationID = "test_response_null_array_array"
												r.pathPattern = "/test_response_null_array_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestResponseNullNullable"
											r.summary = ""
											r.operationID = "test_response_null_nullable"
											r.pathPattern = "/test_response_null_nullable"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestResponseNullNullableArray"
												r.summary = ""
												r.operationID = "test_response_null_nullable_array"
												r.pathPattern = "/test_response_null_nullable_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													// Leaf: TestResponseNullNullableArrayArray
													r.name = "TestResponseNullNullableArrayArray"
													r.summary = ""
													r.operationID = "test_response_null_nullable_array_array"
													r.pathPattern = "/test_response_null_nullable_array_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
										}
									}
								}
							}
						case 'm': // Prefix: "mber"
							if l := len("mber"); len(elem) >= l && elem[0:l] == "mber" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									r.name = "TestResponseNumber"
									r.summary = ""
									r.operationID = "test_response_number"
									r.pathPattern = "/test_response_number"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '_': // Prefix: "_"
								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "array"
									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestResponseNumberArray"
											r.summary = ""
											r.operationID = "test_response_number_array"
											r.pathPattern = "/test_response_number_array"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												// Leaf: TestResponseNumberArrayArray
												r.name = "TestResponseNumberArrayArray"
												r.summary = ""
												r.operationID = "test_response_number_array_array"
												r.pathPattern = "/test_response_number_array_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
									}
								case 'd': // Prefix: "double"
									if l := len("double"); len(elem) >= l && elem[0:l] == "double" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestResponseNumberDouble"
											r.summary = ""
											r.operationID = "test_response_number_double"
											r.pathPattern = "/test_response_number_double"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestResponseNumberDoubleArray"
													r.summary = ""
													r.operationID = "test_response_number_double_array"
													r.pathPattern = "/test_response_number_double_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestResponseNumberDoubleArrayArray
														r.name = "TestResponseNumberDoubleArrayArray"
														r.summary = ""
														r.operationID = "test_response_number_double_array_array"
														r.pathPattern = "/test_response_number_double_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestResponseNumberDoubleNullable"
													r.summary = ""
													r.operationID = "test_response_number_double_nullable"
													r.pathPattern = "/test_response_number_double_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseNumberDoubleNullableArray"
														r.summary = ""
														r.operationID = "test_response_number_double_nullable_array"
														r.pathPattern = "/test_response_number_double_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestResponseNumberDoubleNullableArrayArray
															r.name = "TestResponseNumberDoubleNullableArrayArray"
															r.summary = ""
															r.operationID = "test_response_number_double_nullable_array_array"
															r.pathPattern = "/test_response_number_double_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											}
										}
									}
								case 'f': // Prefix: "float"
									if l := len("float"); len(elem) >= l && elem[0:l] == "float" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestResponseNumberFloat"
											r.summary = ""
											r.operationID = "test_response_number_float"
											r.pathPattern = "/test_response_number_float"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestResponseNumberFloatArray"
													r.summary = ""
													r.operationID = "test_response_number_float_array"
													r.pathPattern = "/test_response_number_float_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestResponseNumberFloatArrayArray
														r.name = "TestResponseNumberFloatArrayArray"
														r.summary = ""
														r.operationID = "test_response_number_float_array_array"
														r.pathPattern = "/test_response_number_float_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestResponseNumberFloatNullable"
													r.summary = ""
													r.operationID = "test_response_number_float_nullable"
													r.pathPattern = "/test_response_number_float_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseNumberFloatNullableArray"
														r.summary = ""
														r.operationID = "test_response_number_float_nullable_array"
														r.pathPattern = "/test_response_number_float_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestResponseNumberFloatNullableArrayArray
															r.name = "TestResponseNumberFloatNullableArrayArray"
															r.summary = ""
															r.operationID = "test_response_number_float_nullable_array_array"
															r.pathPattern = "/test_response_number_float_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											}
										}
									}
								case 'i': // Prefix: "int"
									if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '3': // Prefix: "32"
										if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestResponseNumberInt32"
												r.summary = ""
												r.operationID = "test_response_number_int32"
												r.pathPattern = "/test_response_number_int32"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseNumberInt32Array"
														r.summary = ""
														r.operationID = "test_response_number_int32_array"
														r.pathPattern = "/test_response_number_int32_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestResponseNumberInt32ArrayArray
															r.name = "TestResponseNumberInt32ArrayArray"
															r.summary = ""
															r.operationID = "test_response_number_int32_array_array"
															r.pathPattern = "/test_response_number_int32_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseNumberInt32Nullable"
														r.summary = ""
														r.operationID = "test_response_number_int32_nullable"
														r.pathPattern = "/test_response_number_int32_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestResponseNumberInt32NullableArray"
															r.summary = ""
															r.operationID = "test_response_number_int32_nullable_array"
															r.pathPattern = "/test_response_number_int32_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestResponseNumberInt32NullableArrayArray
																r.name = "TestResponseNumberInt32NullableArrayArray"
																r.summary = ""
																r.operationID = "test_response_number_int32_nullable_array_array"
																r.pathPattern = "/test_response_number_int32_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										}
									case '6': // Prefix: "64"
										if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestResponseNumberInt64"
												r.summary = ""
												r.operationID = "test_response_number_int64"
												r.pathPattern = "/test_response_number_int64"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseNumberInt64Array"
														r.summary = ""
														r.operationID = "test_response_number_int64_array"
														r.pathPattern = "/test_response_number_int64_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestResponseNumberInt64ArrayArray
															r.name = "TestResponseNumberInt64ArrayArray"
															r.summary = ""
															r.operationID = "test_response_number_int64_array_array"
															r.pathPattern = "/test_response_number_int64_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseNumberInt64Nullable"
														r.summary = ""
														r.operationID = "test_response_number_int64_nullable"
														r.pathPattern = "/test_response_number_int64_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestResponseNumberInt64NullableArray"
															r.summary = ""
															r.operationID = "test_response_number_int64_nullable_array"
															r.pathPattern = "/test_response_number_int64_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestResponseNumberInt64NullableArrayArray
																r.name = "TestResponseNumberInt64NullableArrayArray"
																r.summary = ""
																r.operationID = "test_response_number_int64_nullable_array_array"
																r.pathPattern = "/test_response_number_int64_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										}
									}
								case 'n': // Prefix: "nullable"
									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestResponseNumberNullable"
											r.summary = ""
											r.operationID = "test_response_number_nullable"
											r.pathPattern = "/test_response_number_nullable"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestResponseNumberNullableArray"
												r.summary = ""
												r.operationID = "test_response_number_nullable_array"
												r.pathPattern = "/test_response_number_nullable_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													// Leaf: TestResponseNumberNullableArrayArray
													r.name = "TestResponseNumberNullableArrayArray"
													r.summary = ""
													r.operationID = "test_response_number_nullable_array_array"
													r.pathPattern = "/test_response_number_nullable_array_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
										}
									}
								}
							}
						}
					case 's': // Prefix: "string"
						if l := len("string"); len(elem) >= l && elem[0:l] == "string" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								r.name = "TestResponseString"
								r.summary = ""
								r.operationID = "test_response_string"
								r.pathPattern = "/test_response_string"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '_': // Prefix: "_"
							if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "array"
								if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = "TestResponseStringArray"
										r.summary = ""
										r.operationID = "test_response_string_array"
										r.pathPattern = "/test_response_string_array"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											// Leaf: TestResponseStringArrayArray
											r.name = "TestResponseStringArrayArray"
											r.summary = ""
											r.operationID = "test_response_string_array_array"
											r.pathPattern = "/test_response_string_array_array"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
								}
							case 'b': // Prefix: "b"
								if l := len("b"); len(elem) >= l && elem[0:l] == "b" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "ase64"
									if l := len("ase64"); len(elem) >= l && elem[0:l] == "ase64" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestResponseStringBase64"
											r.summary = ""
											r.operationID = "test_response_string_base64"
											r.pathPattern = "/test_response_string_base64"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestResponseStringBase64Array"
													r.summary = ""
													r.operationID = "test_response_string_base64_array"
													r.pathPattern = "/test_response_string_base64_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestResponseStringBase64ArrayArray
														r.name = "TestResponseStringBase64ArrayArray"
														r.summary = ""
														r.operationID = "test_response_string_base64_array_array"
														r.pathPattern = "/test_response_string_base64_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestResponseStringBase64Nullable"
													r.summary = ""
													r.operationID = "test_response_string_base64_nullable"
													r.pathPattern = "/test_response_string_base64_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseStringBase64NullableArray"
														r.summary = ""
														r.operationID = "test_response_string_base64_nullable_array"
														r.pathPattern = "/test_response_string_base64_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestResponseStringBase64NullableArrayArray
															r.name = "TestResponseStringBase64NullableArrayArray"
															r.summary = ""
															r.operationID = "test_response_string_base64_nullable_array_array"
															r.pathPattern = "/test_response_string_base64_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											}
										}
									}
								case 'i': // Prefix: "inary"
									if l := len("inary"); len(elem) >= l && elem[0:l] == "inary" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestResponseStringBinary"
											r.summary = ""
											r.operationID = "test_response_string_binary"
											r.pathPattern = "/test_response_string_binary"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestResponseStringBinaryArray"
													r.summary = ""
													r.operationID = "test_response_string_binary_array"
													r.pathPattern = "/test_response_string_binary_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestResponseStringBinaryArrayArray
														r.name = "TestResponseStringBinaryArrayArray"
														r.summary = ""
														r.operationID = "test_response_string_binary_array_array"
														r.pathPattern = "/test_response_string_binary_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestResponseStringBinaryNullable"
													r.summary = ""
													r.operationID = "test_response_string_binary_nullable"
													r.pathPattern = "/test_response_string_binary_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseStringBinaryNullableArray"
														r.summary = ""
														r.operationID = "test_response_string_binary_nullable_array"
														r.pathPattern = "/test_response_string_binary_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestResponseStringBinaryNullableArrayArray
															r.name = "TestResponseStringBinaryNullableArrayArray"
															r.summary = ""
															r.operationID = "test_response_string_binary_nullable_array_array"
															r.pathPattern = "/test_response_string_binary_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											}
										}
									}
								case 'y': // Prefix: "yte"
									if l := len("yte"); len(elem) >= l && elem[0:l] == "yte" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestResponseStringByte"
											r.summary = ""
											r.operationID = "test_response_string_byte"
											r.pathPattern = "/test_response_string_byte"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestResponseStringByteArray"
													r.summary = ""
													r.operationID = "test_response_string_byte_array"
													r.pathPattern = "/test_response_string_byte_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestResponseStringByteArrayArray
														r.name = "TestResponseStringByteArrayArray"
														r.summary = ""
														r.operationID = "test_response_string_byte_array_array"
														r.pathPattern = "/test_response_string_byte_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestResponseStringByteNullable"
													r.summary = ""
													r.operationID = "test_response_string_byte_nullable"
													r.pathPattern = "/test_response_string_byte_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseStringByteNullableArray"
														r.summary = ""
														r.operationID = "test_response_string_byte_nullable_array"
														r.pathPattern = "/test_response_string_byte_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestResponseStringByteNullableArrayArray
															r.name = "TestResponseStringByteNullableArrayArray"
															r.summary = ""
															r.operationID = "test_response_string_byte_nullable_array_array"
															r.pathPattern = "/test_response_string_byte_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											}
										}
									}
								}
							case 'd': // Prefix: "d"
								if l := len("d"); len(elem) >= l && elem[0:l] == "d" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "ate"
									if l := len("ate"); len(elem) >= l && elem[0:l] == "ate" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestResponseStringDate"
											r.summary = ""
											r.operationID = "test_response_string_date"
											r.pathPattern = "/test_response_string_date"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '-': // Prefix: "-time"
										if l := len("-time"); len(elem) >= l && elem[0:l] == "-time" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestResponseStringDateTime"
												r.summary = ""
												r.operationID = "test_response_string_date-time"
												r.pathPattern = "/test_response_string_date-time"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseStringDateTimeArray"
														r.summary = ""
														r.operationID = "test_response_string_date-time_array"
														r.pathPattern = "/test_response_string_date-time_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestResponseStringDateTimeArrayArray
															r.name = "TestResponseStringDateTimeArrayArray"
															r.summary = ""
															r.operationID = "test_response_string_date-time_array_array"
															r.pathPattern = "/test_response_string_date-time_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseStringDateTimeNullable"
														r.summary = ""
														r.operationID = "test_response_string_date-time_nullable"
														r.pathPattern = "/test_response_string_date-time_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestResponseStringDateTimeNullableArray"
															r.summary = ""
															r.operationID = "test_response_string_date-time_nullable_array"
															r.pathPattern = "/test_response_string_date-time_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestResponseStringDateTimeNullableArrayArray
																r.name = "TestResponseStringDateTimeNullableArrayArray"
																r.summary = ""
																r.operationID = "test_response_string_date-time_nullable_array_array"
																r.pathPattern = "/test_response_string_date-time_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										}
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestResponseStringDateArray"
													r.summary = ""
													r.operationID = "test_response_string_date_array"
													r.pathPattern = "/test_response_string_date_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestResponseStringDateArrayArray
														r.name = "TestResponseStringDateArrayArray"
														r.summary = ""
														r.operationID = "test_response_string_date_array_array"
														r.pathPattern = "/test_response_string_date_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestResponseStringDateNullable"
													r.summary = ""
													r.operationID = "test_response_string_date_nullable"
													r.pathPattern = "/test_response_string_date_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseStringDateNullableArray"
														r.summary = ""
														r.operationID = "test_response_string_date_nullable_array"
														r.pathPattern = "/test_response_string_date_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestResponseStringDateNullableArrayArray
															r.name = "TestResponseStringDateNullableArrayArray"
															r.summary = ""
															r.operationID = "test_response_string_date_nullable_array_array"
															r.pathPattern = "/test_response_string_date_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											}
										}
									}
								case 'u': // Prefix: "uration"
									if l := len("uration"); len(elem) >= l && elem[0:l] == "uration" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestResponseStringDuration"
											r.summary = ""
											r.operationID = "test_response_string_duration"
											r.pathPattern = "/test_response_string_duration"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestResponseStringDurationArray"
													r.summary = ""
													r.operationID = "test_response_string_duration_array"
													r.pathPattern = "/test_response_string_duration_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestResponseStringDurationArrayArray
														r.name = "TestResponseStringDurationArrayArray"
														r.summary = ""
														r.operationID = "test_response_string_duration_array_array"
														r.pathPattern = "/test_response_string_duration_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestResponseStringDurationNullable"
													r.summary = ""
													r.operationID = "test_response_string_duration_nullable"
													r.pathPattern = "/test_response_string_duration_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseStringDurationNullableArray"
														r.summary = ""
														r.operationID = "test_response_string_duration_nullable_array"
														r.pathPattern = "/test_response_string_duration_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestResponseStringDurationNullableArrayArray
															r.name = "TestResponseStringDurationNullableArrayArray"
															r.summary = ""
															r.operationID = "test_response_string_duration_nullable_array_array"
															r.pathPattern = "/test_response_string_duration_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											}
										}
									}
								}
							case 'e': // Prefix: "email"
								if l := len("email"); len(elem) >= l && elem[0:l] == "email" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = "TestResponseStringEmail"
										r.summary = ""
										r.operationID = "test_response_string_email"
										r.pathPattern = "/test_response_string_email"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestResponseStringEmailArray"
												r.summary = ""
												r.operationID = "test_response_string_email_array"
												r.pathPattern = "/test_response_string_email_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													// Leaf: TestResponseStringEmailArrayArray
													r.name = "TestResponseStringEmailArrayArray"
													r.summary = ""
													r.operationID = "test_response_string_email_array_array"
													r.pathPattern = "/test_response_string_email_array_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestResponseStringEmailNullable"
												r.summary = ""
												r.operationID = "test_response_string_email_nullable"
												r.pathPattern = "/test_response_string_email_nullable"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestResponseStringEmailNullableArray"
													r.summary = ""
													r.operationID = "test_response_string_email_nullable_array"
													r.pathPattern = "/test_response_string_email_nullable_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestResponseStringEmailNullableArrayArray
														r.name = "TestResponseStringEmailNullableArrayArray"
														r.summary = ""
														r.operationID = "test_response_string_email_nullable_array_array"
														r.pathPattern = "/test_response_string_email_nullable_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										}
									}
								}
							case 'f': // Prefix: "float"
								if l := len("float"); len(elem) >= l && elem[0:l] == "float" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case '3': // Prefix: "32"
									if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestResponseStringFloat32"
											r.summary = ""
											r.operationID = "test_response_string_float32"
											r.pathPattern = "/test_response_string_float32"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestResponseStringFloat32Array"
													r.summary = ""
													r.operationID = "test_response_string_float32_array"
													r.pathPattern = "/test_response_string_float32_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestResponseStringFloat32ArrayArray
														r.name = "TestResponseStringFloat32ArrayArray"
														r.summary = ""
														r.operationID = "test_response_string_float32_array_array"
														r.pathPattern = "/test_response_string_float32_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestResponseStringFloat32Nullable"
													r.summary = ""
													r.operationID = "test_response_string_float32_nullable"
													r.pathPattern = "/test_response_string_float32_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseStringFloat32NullableArray"
														r.summary = ""
														r.operationID = "test_response_string_float32_nullable_array"
														r.pathPattern = "/test_response_string_float32_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestResponseStringFloat32NullableArrayArray
															r.name = "TestResponseStringFloat32NullableArrayArray"
															r.summary = ""
															r.operationID = "test_response_string_float32_nullable_array_array"
															r.pathPattern = "/test_response_string_float32_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											}
										}
									}
								case '6': // Prefix: "64"
									if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestResponseStringFloat64"
											r.summary = ""
											r.operationID = "test_response_string_float64"
											r.pathPattern = "/test_response_string_float64"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestResponseStringFloat64Array"
													r.summary = ""
													r.operationID = "test_response_string_float64_array"
													r.pathPattern = "/test_response_string_float64_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestResponseStringFloat64ArrayArray
														r.name = "TestResponseStringFloat64ArrayArray"
														r.summary = ""
														r.operationID = "test_response_string_float64_array_array"
														r.pathPattern = "/test_response_string_float64_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestResponseStringFloat64Nullable"
													r.summary = ""
													r.operationID = "test_response_string_float64_nullable"
													r.pathPattern = "/test_response_string_float64_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseStringFloat64NullableArray"
														r.summary = ""
														r.operationID = "test_response_string_float64_nullable_array"
														r.pathPattern = "/test_response_string_float64_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestResponseStringFloat64NullableArrayArray
															r.name = "TestResponseStringFloat64NullableArrayArray"
															r.summary = ""
															r.operationID = "test_response_string_float64_nullable_array_array"
															r.pathPattern = "/test_response_string_float64_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											}
										}
									}
								}
							case 'h': // Prefix: "hostname"
								if l := len("hostname"); len(elem) >= l && elem[0:l] == "hostname" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = "TestResponseStringHostname"
										r.summary = ""
										r.operationID = "test_response_string_hostname"
										r.pathPattern = "/test_response_string_hostname"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestResponseStringHostnameArray"
												r.summary = ""
												r.operationID = "test_response_string_hostname_array"
												r.pathPattern = "/test_response_string_hostname_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													// Leaf: TestResponseStringHostnameArrayArray
													r.name = "TestResponseStringHostnameArrayArray"
													r.summary = ""
													r.operationID = "test_response_string_hostname_array_array"
													r.pathPattern = "/test_response_string_hostname_array_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestResponseStringHostnameNullable"
												r.summary = ""
												r.operationID = "test_response_string_hostname_nullable"
												r.pathPattern = "/test_response_string_hostname_nullable"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestResponseStringHostnameNullableArray"
													r.summary = ""
													r.operationID = "test_response_string_hostname_nullable_array"
													r.pathPattern = "/test_response_string_hostname_nullable_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestResponseStringHostnameNullableArrayArray
														r.name = "TestResponseStringHostnameNullableArrayArray"
														r.summary = ""
														r.operationID = "test_response_string_hostname_nullable_array_array"
														r.pathPattern = "/test_response_string_hostname_nullable_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										}
									}
								}
							case 'i': // Prefix: "i"
								if l := len("i"); len(elem) >= l && elem[0:l] == "i" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'n': // Prefix: "nt"
									if l := len("nt"); len(elem) >= l && elem[0:l] == "nt" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestResponseStringInt"
											r.summary = ""
											r.operationID = "test_response_string_int"
											r.pathPattern = "/test_response_string_int"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '1': // Prefix: "16"
										if l := len("16"); len(elem) >= l && elem[0:l] == "16" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestResponseStringInt16"
												r.summary = ""
												r.operationID = "test_response_string_int16"
												r.pathPattern = "/test_response_string_int16"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseStringInt16Array"
														r.summary = ""
														r.operationID = "test_response_string_int16_array"
														r.pathPattern = "/test_response_string_int16_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestResponseStringInt16ArrayArray
															r.name = "TestResponseStringInt16ArrayArray"
															r.summary = ""
															r.operationID = "test_response_string_int16_array_array"
															r.pathPattern = "/test_response_string_int16_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseStringInt16Nullable"
														r.summary = ""
														r.operationID = "test_response_string_int16_nullable"
														r.pathPattern = "/test_response_string_int16_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestResponseStringInt16NullableArray"
															r.summary = ""
															r.operationID = "test_response_string_int16_nullable_array"
															r.pathPattern = "/test_response_string_int16_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestResponseStringInt16NullableArrayArray
																r.name = "TestResponseStringInt16NullableArrayArray"
																r.summary = ""
																r.operationID = "test_response_string_int16_nullable_array_array"
																r.pathPattern = "/test_response_string_int16_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										}
									case '3': // Prefix: "32"
										if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestResponseStringInt32"
												r.summary = ""
												r.operationID = "test_response_string_int32"
												r.pathPattern = "/test_response_string_int32"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseStringInt32Array"
														r.summary = ""
														r.operationID = "test_response_string_int32_array"
														r.pathPattern = "/test_response_string_int32_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestResponseStringInt32ArrayArray
															r.name = "TestResponseStringInt32ArrayArray"
															r.summary = ""
															r.operationID = "test_response_string_int32_array_array"
															r.pathPattern = "/test_response_string_int32_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseStringInt32Nullable"
														r.summary = ""
														r.operationID = "test_response_string_int32_nullable"
														r.pathPattern = "/test_response_string_int32_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestResponseStringInt32NullableArray"
															r.summary = ""
															r.operationID = "test_response_string_int32_nullable_array"
															r.pathPattern = "/test_response_string_int32_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestResponseStringInt32NullableArrayArray
																r.name = "TestResponseStringInt32NullableArrayArray"
																r.summary = ""
																r.operationID = "test_response_string_int32_nullable_array_array"
																r.pathPattern = "/test_response_string_int32_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										}
									case '6': // Prefix: "64"
										if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestResponseStringInt64"
												r.summary = ""
												r.operationID = "test_response_string_int64"
												r.pathPattern = "/test_response_string_int64"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseStringInt64Array"
														r.summary = ""
														r.operationID = "test_response_string_int64_array"
														r.pathPattern = "/test_response_string_int64_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestResponseStringInt64ArrayArray
															r.name = "TestResponseStringInt64ArrayArray"
															r.summary = ""
															r.operationID = "test_response_string_int64_array_array"
															r.pathPattern = "/test_response_string_int64_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseStringInt64Nullable"
														r.summary = ""
														r.operationID = "test_response_string_int64_nullable"
														r.pathPattern = "/test_response_string_int64_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestResponseStringInt64NullableArray"
															r.summary = ""
															r.operationID = "test_response_string_int64_nullable_array"
															r.pathPattern = "/test_response_string_int64_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestResponseStringInt64NullableArrayArray
																r.name = "TestResponseStringInt64NullableArrayArray"
																r.summary = ""
																r.operationID = "test_response_string_int64_nullable_array_array"
																r.pathPattern = "/test_response_string_int64_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										}
									case '8': // Prefix: "8"
										if l := len("8"); len(elem) >= l && elem[0:l] == "8" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestResponseStringInt8"
												r.summary = ""
												r.operationID = "test_response_string_int8"
												r.pathPattern = "/test_response_string_int8"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseStringInt8Array"
														r.summary = ""
														r.operationID = "test_response_string_int8_array"
														r.pathPattern = "/test_response_string_int8_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestResponseStringInt8ArrayArray
															r.name = "TestResponseStringInt8ArrayArray"
															r.summary = ""
															r.operationID = "test_response_string_int8_array_array"
															r.pathPattern = "/test_response_string_int8_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseStringInt8Nullable"
														r.summary = ""
														r.operationID = "test_response_string_int8_nullable"
														r.pathPattern = "/test_response_string_int8_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestResponseStringInt8NullableArray"
															r.summary = ""
															r.operationID = "test_response_string_int8_nullable_array"
															r.pathPattern = "/test_response_string_int8_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestResponseStringInt8NullableArrayArray
																r.name = "TestResponseStringInt8NullableArrayArray"
																r.summary = ""
																r.operationID = "test_response_string_int8_nullable_array_array"
																r.pathPattern = "/test_response_string_int8_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										}
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestResponseStringIntArray"
													r.summary = ""
													r.operationID = "test_response_string_int_array"
													r.pathPattern = "/test_response_string_int_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestResponseStringIntArrayArray
														r.name = "TestResponseStringIntArrayArray"
														r.summary = ""
														r.operationID = "test_response_string_int_array_array"
														r.pathPattern = "/test_response_string_int_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestResponseStringIntNullable"
													r.summary = ""
													r.operationID = "test_response_string_int_nullable"
													r.pathPattern = "/test_response_string_int_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseStringIntNullableArray"
														r.summary = ""
														r.operationID = "test_response_string_int_nullable_array"
														r.pathPattern = "/test_response_string_int_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestResponseStringIntNullableArrayArray
															r.name = "TestResponseStringIntNullableArrayArray"
															r.summary = ""
															r.operationID = "test_response_string_int_nullable_array_array"
															r.pathPattern = "/test_response_string_int_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											}
										}
									}
								case 'p': // Prefix: "p"
									if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestResponseStringIP"
											r.summary = ""
											r.operationID = "test_response_string_ip"
											r.pathPattern = "/test_response_string_ip"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestResponseStringIPArray"
													r.summary = ""
													r.operationID = "test_response_string_ip_array"
													r.pathPattern = "/test_response_string_ip_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestResponseStringIPArrayArray
														r.name = "TestResponseStringIPArrayArray"
														r.summary = ""
														r.operationID = "test_response_string_ip_array_array"
														r.pathPattern = "/test_response_string_ip_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestResponseStringIPNullable"
													r.summary = ""
													r.operationID = "test_response_string_ip_nullable"
													r.pathPattern = "/test_response_string_ip_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseStringIPNullableArray"
														r.summary = ""
														r.operationID = "test_response_string_ip_nullable_array"
														r.pathPattern = "/test_response_string_ip_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestResponseStringIPNullableArrayArray
															r.name = "TestResponseStringIPNullableArrayArray"
															r.summary = ""
															r.operationID = "test_response_string_ip_nullable_array_array"
															r.pathPattern = "/test_response_string_ip_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											}
										}
									case 'v': // Prefix: "v"
										if l := len("v"); len(elem) >= l && elem[0:l] == "v" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '4': // Prefix: "4"
											if l := len("4"); len(elem) >= l && elem[0:l] == "4" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestResponseStringIpv4"
													r.summary = ""
													r.operationID = "test_response_string_ipv4"
													r.pathPattern = "/test_response_string_ipv4"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestResponseStringIpv4Array"
															r.summary = ""
															r.operationID = "test_response_string_ipv4_array"
															r.pathPattern = "/test_response_string_ipv4_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestResponseStringIpv4ArrayArray
																r.name = "TestResponseStringIpv4ArrayArray"
																r.summary = ""
																r.operationID = "test_response_string_ipv4_array_array"
																r.pathPattern = "/test_response_string_ipv4_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestResponseStringIpv4Nullable"
															r.summary = ""
															r.operationID = "test_response_string_ipv4_nullable"
															r.pathPattern = "/test_response_string_ipv4_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestResponseStringIpv4NullableArray"
																r.summary = ""
																r.operationID = "test_response_string_ipv4_nullable_array"
																r.pathPattern = "/test_response_string_ipv4_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	// Leaf: TestResponseStringIpv4NullableArrayArray
																	r.name = "TestResponseStringIpv4NullableArrayArray"
																	r.summary = ""
																	r.operationID = "test_response_string_ipv4_nullable_array_array"
																	r.pathPattern = "/test_response_string_ipv4_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
														}
													}
												}
											}
										case '6': // Prefix: "6"
											if l := len("6"); len(elem) >= l && elem[0:l] == "6" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestResponseStringIpv6"
													r.summary = ""
													r.operationID = "test_response_string_ipv6"
													r.pathPattern = "/test_response_string_ipv6"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestResponseStringIpv6Array"
															r.summary = ""
															r.operationID = "test_response_string_ipv6_array"
															r.pathPattern = "/test_response_string_ipv6_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestResponseStringIpv6ArrayArray
																r.name = "TestResponseStringIpv6ArrayArray"
																r.summary = ""
																r.operationID = "test_response_string_ipv6_array_array"
																r.pathPattern = "/test_response_string_ipv6_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestResponseStringIpv6Nullable"
															r.summary = ""
															r.operationID = "test_response_string_ipv6_nullable"
															r.pathPattern = "/test_response_string_ipv6_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestResponseStringIpv6NullableArray"
																r.summary = ""
																r.operationID = "test_response_string_ipv6_nullable_array"
																r.pathPattern = "/test_response_string_ipv6_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	// Leaf: TestResponseStringIpv6NullableArrayArray
																	r.name = "TestResponseStringIpv6NullableArrayArray"
																	r.summary = ""
																	r.operationID = "test_response_string_ipv6_nullable_array_array"
																	r.pathPattern = "/test_response_string_ipv6_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
														}
													}
												}
											}
										}
									}
								}
							case 'n': // Prefix: "nullable"
								if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = "TestResponseStringNullable"
										r.summary = ""
										r.operationID = "test_response_string_nullable"
										r.pathPattern = "/test_response_string_nullable"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '_': // Prefix: "_array"
									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestResponseStringNullableArray"
											r.summary = ""
											r.operationID = "test_response_string_nullable_array"
											r.pathPattern = "/test_response_string_nullable_array"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_array"
										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												// Leaf: TestResponseStringNullableArrayArray
												r.name = "TestResponseStringNullableArrayArray"
												r.summary = ""
												r.operationID = "test_response_string_nullable_array_array"
												r.pathPattern = "/test_response_string_nullable_array_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
									}
								}
							case 'p': // Prefix: "password"
								if l := len("password"); len(elem) >= l && elem[0:l] == "password" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = "TestResponseStringPassword"
										r.summary = ""
										r.operationID = "test_response_string_password"
										r.pathPattern = "/test_response_string_password"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestResponseStringPasswordArray"
												r.summary = ""
												r.operationID = "test_response_string_password_array"
												r.pathPattern = "/test_response_string_password_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													// Leaf: TestResponseStringPasswordArrayArray
													r.name = "TestResponseStringPasswordArrayArray"
													r.summary = ""
													r.operationID = "test_response_string_password_array_array"
													r.pathPattern = "/test_response_string_password_array_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestResponseStringPasswordNullable"
												r.summary = ""
												r.operationID = "test_response_string_password_nullable"
												r.pathPattern = "/test_response_string_password_nullable"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestResponseStringPasswordNullableArray"
													r.summary = ""
													r.operationID = "test_response_string_password_nullable_array"
													r.pathPattern = "/test_response_string_password_nullable_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestResponseStringPasswordNullableArrayArray
														r.name = "TestResponseStringPasswordNullableArrayArray"
														r.summary = ""
														r.operationID = "test_response_string_password_nullable_array_array"
														r.pathPattern = "/test_response_string_password_nullable_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										}
									}
								}
							case 't': // Prefix: "time"
								if l := len("time"); len(elem) >= l && elem[0:l] == "time" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = "TestResponseStringTime"
										r.summary = ""
										r.operationID = "test_response_string_time"
										r.pathPattern = "/test_response_string_time"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '_': // Prefix: "_"
									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "array"
										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestResponseStringTimeArray"
												r.summary = ""
												r.operationID = "test_response_string_time_array"
												r.pathPattern = "/test_response_string_time_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													// Leaf: TestResponseStringTimeArrayArray
													r.name = "TestResponseStringTimeArrayArray"
													r.summary = ""
													r.operationID = "test_response_string_time_array_array"
													r.pathPattern = "/test_response_string_time_array_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
										}
									case 'n': // Prefix: "nullable"
										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestResponseStringTimeNullable"
												r.summary = ""
												r.operationID = "test_response_string_time_nullable"
												r.pathPattern = "/test_response_string_time_nullable"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"
											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestResponseStringTimeNullableArray"
													r.summary = ""
													r.operationID = "test_response_string_time_nullable_array"
													r.pathPattern = "/test_response_string_time_nullable_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestResponseStringTimeNullableArrayArray
														r.name = "TestResponseStringTimeNullableArrayArray"
														r.summary = ""
														r.operationID = "test_response_string_time_nullable_array_array"
														r.pathPattern = "/test_response_string_time_nullable_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										}
									}
								}
							case 'u': // Prefix: "u"
								if l := len("u"); len(elem) >= l && elem[0:l] == "u" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'i': // Prefix: "int"
									if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestResponseStringUint"
											r.summary = ""
											r.operationID = "test_response_string_uint"
											r.pathPattern = "/test_response_string_uint"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '1': // Prefix: "16"
										if l := len("16"); len(elem) >= l && elem[0:l] == "16" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestResponseStringUint16"
												r.summary = ""
												r.operationID = "test_response_string_uint16"
												r.pathPattern = "/test_response_string_uint16"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseStringUint16Array"
														r.summary = ""
														r.operationID = "test_response_string_uint16_array"
														r.pathPattern = "/test_response_string_uint16_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestResponseStringUint16ArrayArray
															r.name = "TestResponseStringUint16ArrayArray"
															r.summary = ""
															r.operationID = "test_response_string_uint16_array_array"
															r.pathPattern = "/test_response_string_uint16_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseStringUint16Nullable"
														r.summary = ""
														r.operationID = "test_response_string_uint16_nullable"
														r.pathPattern = "/test_response_string_uint16_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestResponseStringUint16NullableArray"
															r.summary = ""
															r.operationID = "test_response_string_uint16_nullable_array"
															r.pathPattern = "/test_response_string_uint16_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestResponseStringUint16NullableArrayArray
																r.name = "TestResponseStringUint16NullableArrayArray"
																r.summary = ""
																r.operationID = "test_response_string_uint16_nullable_array_array"
																r.pathPattern = "/test_response_string_uint16_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										}
									case '3': // Prefix: "32"
										if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestResponseStringUint32"
												r.summary = ""
												r.operationID = "test_response_string_uint32"
												r.pathPattern = "/test_response_string_uint32"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseStringUint32Array"
														r.summary = ""
														r.operationID = "test_response_string_uint32_array"
														r.pathPattern = "/test_response_string_uint32_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestResponseStringUint32ArrayArray
															r.name = "TestResponseStringUint32ArrayArray"
															r.summary = ""
															r.operationID = "test_response_string_uint32_array_array"
															r.pathPattern = "/test_response_string_uint32_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseStringUint32Nullable"
														r.summary = ""
														r.operationID = "test_response_string_uint32_nullable"
														r.pathPattern = "/test_response_string_uint32_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestResponseStringUint32NullableArray"
															r.summary = ""
															r.operationID = "test_response_string_uint32_nullable_array"
															r.pathPattern = "/test_response_string_uint32_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestResponseStringUint32NullableArrayArray
																r.name = "TestResponseStringUint32NullableArrayArray"
																r.summary = ""
																r.operationID = "test_response_string_uint32_nullable_array_array"
																r.pathPattern = "/test_response_string_uint32_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										}
									case '6': // Prefix: "64"
										if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestResponseStringUint64"
												r.summary = ""
												r.operationID = "test_response_string_uint64"
												r.pathPattern = "/test_response_string_uint64"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseStringUint64Array"
														r.summary = ""
														r.operationID = "test_response_string_uint64_array"
														r.pathPattern = "/test_response_string_uint64_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestResponseStringUint64ArrayArray
															r.name = "TestResponseStringUint64ArrayArray"
															r.summary = ""
															r.operationID = "test_response_string_uint64_array_array"
															r.pathPattern = "/test_response_string_uint64_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseStringUint64Nullable"
														r.summary = ""
														r.operationID = "test_response_string_uint64_nullable"
														r.pathPattern = "/test_response_string_uint64_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestResponseStringUint64NullableArray"
															r.summary = ""
															r.operationID = "test_response_string_uint64_nullable_array"
															r.pathPattern = "/test_response_string_uint64_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestResponseStringUint64NullableArrayArray
																r.name = "TestResponseStringUint64NullableArrayArray"
																r.summary = ""
																r.operationID = "test_response_string_uint64_nullable_array_array"
																r.pathPattern = "/test_response_string_uint64_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										}
									case '8': // Prefix: "8"
										if l := len("8"); len(elem) >= l && elem[0:l] == "8" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = "TestResponseStringUint8"
												r.summary = ""
												r.operationID = "test_response_string_uint8"
												r.pathPattern = "/test_response_string_uint8"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"
											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"
												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseStringUint8Array"
														r.summary = ""
														r.operationID = "test_response_string_uint8_array"
														r.pathPattern = "/test_response_string_uint8_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestResponseStringUint8ArrayArray
															r.name = "TestResponseStringUint8ArrayArray"
															r.summary = ""
															r.operationID = "test_response_string_uint8_array_array"
															r.pathPattern = "/test_response_string_uint8_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											case 'n': // Prefix: "nullable"
												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseStringUint8Nullable"
														r.summary = ""
														r.operationID = "test_response_string_uint8_nullable"
														r.pathPattern = "/test_response_string_uint8_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestResponseStringUint8NullableArray"
															r.summary = ""
															r.operationID = "test_response_string_uint8_nullable_array"
															r.pathPattern = "/test_response_string_uint8_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestResponseStringUint8NullableArrayArray
																r.name = "TestResponseStringUint8NullableArrayArray"
																r.summary = ""
																r.operationID = "test_response_string_uint8_nullable_array_array"
																r.pathPattern = "/test_response_string_uint8_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												}
											}
										}
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestResponseStringUintArray"
													r.summary = ""
													r.operationID = "test_response_string_uint_array"
													r.pathPattern = "/test_response_string_uint_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestResponseStringUintArrayArray
														r.name = "TestResponseStringUintArrayArray"
														r.summary = ""
														r.operationID = "test_response_string_uint_array_array"
														r.pathPattern = "/test_response_string_uint_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestResponseStringUintNullable"
													r.summary = ""
													r.operationID = "test_response_string_uint_nullable"
													r.pathPattern = "/test_response_string_uint_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseStringUintNullableArray"
														r.summary = ""
														r.operationID = "test_response_string_uint_nullable_array"
														r.pathPattern = "/test_response_string_uint_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestResponseStringUintNullableArrayArray
															r.name = "TestResponseStringUintNullableArrayArray"
															r.summary = ""
															r.operationID = "test_response_string_uint_nullable_array_array"
															r.pathPattern = "/test_response_string_uint_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											}
										}
									}
								case 'n': // Prefix: "nix"
									if l := len("nix"); len(elem) >= l && elem[0:l] == "nix" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestResponseStringUnix"
											r.summary = ""
											r.operationID = "test_response_string_unix"
											r.pathPattern = "/test_response_string_unix"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '-': // Prefix: "-"
										if l := len("-"); len(elem) >= l && elem[0:l] == "-" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'm': // Prefix: "mi"
											if l := len("mi"); len(elem) >= l && elem[0:l] == "mi" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'c': // Prefix: "cro"
												if l := len("cro"); len(elem) >= l && elem[0:l] == "cro" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseStringUnixMicro"
														r.summary = ""
														r.operationID = "test_response_string_unix-micro"
														r.pathPattern = "/test_response_string_unix-micro"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_"
													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"
														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestResponseStringUnixMicroArray"
																r.summary = ""
																r.operationID = "test_response_string_unix-micro_array"
																r.pathPattern = "/test_response_string_unix-micro_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	// Leaf: TestResponseStringUnixMicroArrayArray
																	r.name = "TestResponseStringUnixMicroArrayArray"
																	r.summary = ""
																	r.operationID = "test_response_string_unix-micro_array_array"
																	r.pathPattern = "/test_response_string_unix-micro_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
														}
													case 'n': // Prefix: "nullable"
														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestResponseStringUnixMicroNullable"
																r.summary = ""
																r.operationID = "test_response_string_unix-micro_nullable"
																r.pathPattern = "/test_response_string_unix-micro_nullable"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	r.name = "TestResponseStringUnixMicroNullableArray"
																	r.summary = ""
																	r.operationID = "test_response_string_unix-micro_nullable_array"
																	r.pathPattern = "/test_response_string_unix-micro_nullable_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
															switch elem[0] {
															case '_': // Prefix: "_array"
																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	switch method {
																	case "POST":
																		// Leaf: TestResponseStringUnixMicroNullableArrayArray
																		r.name = "TestResponseStringUnixMicroNullableArrayArray"
																		r.summary = ""
																		r.operationID = "test_response_string_unix-micro_nullable_array_array"
																		r.pathPattern = "/test_response_string_unix-micro_nullable_array_array"
																		r.args = args
																		r.count = 0
																		return r, true
																	default:
																		return
																	}
																}
															}
														}
													}
												}
											case 'l': // Prefix: "lli"
												if l := len("lli"); len(elem) >= l && elem[0:l] == "lli" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseStringUnixMilli"
														r.summary = ""
														r.operationID = "test_response_string_unix-milli"
														r.pathPattern = "/test_response_string_unix-milli"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_"
													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"
														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestResponseStringUnixMilliArray"
																r.summary = ""
																r.operationID = "test_response_string_unix-milli_array"
																r.pathPattern = "/test_response_string_unix-milli_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	// Leaf: TestResponseStringUnixMilliArrayArray
																	r.name = "TestResponseStringUnixMilliArrayArray"
																	r.summary = ""
																	r.operationID = "test_response_string_unix-milli_array_array"
																	r.pathPattern = "/test_response_string_unix-milli_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
														}
													case 'n': // Prefix: "nullable"
														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestResponseStringUnixMilliNullable"
																r.summary = ""
																r.operationID = "test_response_string_unix-milli_nullable"
																r.pathPattern = "/test_response_string_unix-milli_nullable"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	r.name = "TestResponseStringUnixMilliNullableArray"
																	r.summary = ""
																	r.operationID = "test_response_string_unix-milli_nullable_array"
																	r.pathPattern = "/test_response_string_unix-milli_nullable_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
															switch elem[0] {
															case '_': // Prefix: "_array"
																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	switch method {
																	case "POST":
																		// Leaf: TestResponseStringUnixMilliNullableArrayArray
																		r.name = "TestResponseStringUnixMilliNullableArrayArray"
																		r.summary = ""
																		r.operationID = "test_response_string_unix-milli_nullable_array_array"
																		r.pathPattern = "/test_response_string_unix-milli_nullable_array_array"
																		r.args = args
																		r.count = 0
																		return r, true
																	default:
																		return
																	}
																}
															}
														}
													}
												}
											}
										case 'n': // Prefix: "nano"
											if l := len("nano"); len(elem) >= l && elem[0:l] == "nano" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestResponseStringUnixNano"
													r.summary = ""
													r.operationID = "test_response_string_unix-nano"
													r.pathPattern = "/test_response_string_unix-nano"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestResponseStringUnixNanoArray"
															r.summary = ""
															r.operationID = "test_response_string_unix-nano_array"
															r.pathPattern = "/test_response_string_unix-nano_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestResponseStringUnixNanoArrayArray
																r.name = "TestResponseStringUnixNanoArrayArray"
																r.summary = ""
																r.operationID = "test_response_string_unix-nano_array_array"
																r.pathPattern = "/test_response_string_unix-nano_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestResponseStringUnixNanoNullable"
															r.summary = ""
															r.operationID = "test_response_string_unix-nano_nullable"
															r.pathPattern = "/test_response_string_unix-nano_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestResponseStringUnixNanoNullableArray"
																r.summary = ""
																r.operationID = "test_response_string_unix-nano_nullable_array"
																r.pathPattern = "/test_response_string_unix-nano_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	// Leaf: TestResponseStringUnixNanoNullableArrayArray
																	r.name = "TestResponseStringUnixNanoNullableArrayArray"
																	r.summary = ""
																	r.operationID = "test_response_string_unix-nano_nullable_array_array"
																	r.pathPattern = "/test_response_string_unix-nano_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
														}
													}
												}
											}
										case 's': // Prefix: "seconds"
											if l := len("seconds"); len(elem) >= l && elem[0:l] == "seconds" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestResponseStringUnixSeconds"
													r.summary = ""
													r.operationID = "test_response_string_unix-seconds"
													r.pathPattern = "/test_response_string_unix-seconds"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"
												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"
													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestResponseStringUnixSecondsArray"
															r.summary = ""
															r.operationID = "test_response_string_unix-seconds_array"
															r.pathPattern = "/test_response_string_unix-seconds_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																// Leaf: TestResponseStringUnixSecondsArrayArray
																r.name = "TestResponseStringUnixSecondsArrayArray"
																r.summary = ""
																r.operationID = "test_response_string_unix-seconds_array_array"
																r.pathPattern = "/test_response_string_unix-seconds_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
													}
												case 'n': // Prefix: "nullable"
													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = "TestResponseStringUnixSecondsNullable"
															r.summary = ""
															r.operationID = "test_response_string_unix-seconds_nullable"
															r.pathPattern = "/test_response_string_unix-seconds_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"
														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = "TestResponseStringUnixSecondsNullableArray"
																r.summary = ""
																r.operationID = "test_response_string_unix-seconds_nullable_array"
																r.pathPattern = "/test_response_string_unix-seconds_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"
															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	// Leaf: TestResponseStringUnixSecondsNullableArrayArray
																	r.name = "TestResponseStringUnixSecondsNullableArrayArray"
																	r.summary = ""
																	r.operationID = "test_response_string_unix-seconds_nullable_array_array"
																	r.pathPattern = "/test_response_string_unix-seconds_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
														}
													}
												}
											}
										}
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestResponseStringUnixArray"
													r.summary = ""
													r.operationID = "test_response_string_unix_array"
													r.pathPattern = "/test_response_string_unix_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestResponseStringUnixArrayArray
														r.name = "TestResponseStringUnixArrayArray"
														r.summary = ""
														r.operationID = "test_response_string_unix_array_array"
														r.pathPattern = "/test_response_string_unix_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestResponseStringUnixNullable"
													r.summary = ""
													r.operationID = "test_response_string_unix_nullable"
													r.pathPattern = "/test_response_string_unix_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseStringUnixNullableArray"
														r.summary = ""
														r.operationID = "test_response_string_unix_nullable_array"
														r.pathPattern = "/test_response_string_unix_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestResponseStringUnixNullableArrayArray
															r.name = "TestResponseStringUnixNullableArrayArray"
															r.summary = ""
															r.operationID = "test_response_string_unix_nullable_array_array"
															r.pathPattern = "/test_response_string_unix_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											}
										}
									}
								case 'r': // Prefix: "ri"
									if l := len("ri"); len(elem) >= l && elem[0:l] == "ri" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestResponseStringURI"
											r.summary = ""
											r.operationID = "test_response_string_uri"
											r.pathPattern = "/test_response_string_uri"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestResponseStringURIArray"
													r.summary = ""
													r.operationID = "test_response_string_uri_array"
													r.pathPattern = "/test_response_string_uri_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestResponseStringURIArrayArray
														r.name = "TestResponseStringURIArrayArray"
														r.summary = ""
														r.operationID = "test_response_string_uri_array_array"
														r.pathPattern = "/test_response_string_uri_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestResponseStringURINullable"
													r.summary = ""
													r.operationID = "test_response_string_uri_nullable"
													r.pathPattern = "/test_response_string_uri_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseStringURINullableArray"
														r.summary = ""
														r.operationID = "test_response_string_uri_nullable_array"
														r.pathPattern = "/test_response_string_uri_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestResponseStringURINullableArrayArray
															r.name = "TestResponseStringURINullableArrayArray"
															r.summary = ""
															r.operationID = "test_response_string_uri_nullable_array_array"
															r.pathPattern = "/test_response_string_uri_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											}
										}
									}
								case 'u': // Prefix: "uid"
									if l := len("uid"); len(elem) >= l && elem[0:l] == "uid" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = "TestResponseStringUUID"
											r.summary = ""
											r.operationID = "test_response_string_uuid"
											r.pathPattern = "/test_response_string_uuid"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"
										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"
											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestResponseStringUUIDArray"
													r.summary = ""
													r.operationID = "test_response_string_uuid_array"
													r.pathPattern = "/test_response_string_uuid_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														// Leaf: TestResponseStringUUIDArrayArray
														r.name = "TestResponseStringUUIDArrayArray"
														r.summary = ""
														r.operationID = "test_response_string_uuid_array_array"
														r.pathPattern = "/test_response_string_uuid_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
											}
										case 'n': // Prefix: "nullable"
											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = "TestResponseStringUUIDNullable"
													r.summary = ""
													r.operationID = "test_response_string_uuid_nullable"
													r.pathPattern = "/test_response_string_uuid_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"
												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = "TestResponseStringUUIDNullableArray"
														r.summary = ""
														r.operationID = "test_response_string_uuid_nullable_array"
														r.pathPattern = "/test_response_string_uuid_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"
													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															// Leaf: TestResponseStringUUIDNullableArrayArray
															r.name = "TestResponseStringUUIDNullableArrayArray"
															r.summary = ""
															r.operationID = "test_response_string_uuid_nullable_array_array"
															r.pathPattern = "/test_response_string_uuid_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return r, false
}

// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/test_"

			if l := len("/test_"); len(elem) >= l && elem[0:l] == "/test_" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'q': // Prefix: "query_parameter"

				if l := len("query_parameter"); len(elem) >= l && elem[0:l] == "query_parameter" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "POST":
						s.handleTestQueryParameterRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "POST")
					}

					return
				}

			case 'r': // Prefix: "re"

				if l := len("re"); len(elem) >= l && elem[0:l] == "re" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'q': // Prefix: "quest_"

					if l := len("quest_"); len(elem) >= l && elem[0:l] == "quest_" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'A': // Prefix: "Any"

						if l := len("Any"); len(elem) >= l && elem[0:l] == "Any" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleTestRequestAnyRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

					case 'E': // Prefix: "EmptyStruct"

						if l := len("EmptyStruct"); len(elem) >= l && elem[0:l] == "EmptyStruct" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleTestRequestEmptyStructRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

					case 'F': // Prefix: "FormatTest"

						if l := len("FormatTest"); len(elem) >= l && elem[0:l] == "FormatTest" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleTestRequestFormatTestRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

					case 'b': // Prefix: "boolean"

						if l := len("boolean"); len(elem) >= l && elem[0:l] == "boolean" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "POST":
								s.handleTestRequestBooleanRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
						switch elem[0] {
						case '_': // Prefix: "_"

							if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "array"

								if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleTestRequestBooleanArrayRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_array"

									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleTestRequestBooleanArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}

								}

							case 'n': // Prefix: "nullable"

								if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleTestRequestBooleanNullableRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_array"

									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestBooleanNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"

										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleTestRequestBooleanNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}

									}

								}

							}

						}

					case 'i': // Prefix: "integer"

						if l := len("integer"); len(elem) >= l && elem[0:l] == "integer" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "POST":
								s.handleTestRequestIntegerRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
						switch elem[0] {
						case '_': // Prefix: "_"

							if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "array"

								if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleTestRequestIntegerArrayRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_array"

									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleTestRequestIntegerArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}

								}

							case 'i': // Prefix: "int"

								if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case '1': // Prefix: "16"

									if l := len("16"); len(elem) >= l && elem[0:l] == "16" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestIntegerInt16Request([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestIntegerInt16ArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestIntegerInt16ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestIntegerInt16NullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestIntegerInt16NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestIntegerInt16NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											}

										}

									}

								case '3': // Prefix: "32"

									if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestIntegerInt32Request([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestIntegerInt32ArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestIntegerInt32ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestIntegerInt32NullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestIntegerInt32NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestIntegerInt32NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											}

										}

									}

								case '6': // Prefix: "64"

									if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestIntegerInt64Request([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestIntegerInt64ArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestIntegerInt64ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestIntegerInt64NullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestIntegerInt64NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestIntegerInt64NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											}

										}

									}

								case '8': // Prefix: "8"

									if l := len("8"); len(elem) >= l && elem[0:l] == "8" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestIntegerInt8Request([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestIntegerInt8ArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestIntegerInt8ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestIntegerInt8NullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestIntegerInt8NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestIntegerInt8NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											}

										}

									}

								}

							case 'n': // Prefix: "nullable"

								if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleTestRequestIntegerNullableRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_array"

									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestIntegerNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"

										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleTestRequestIntegerNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}

									}

								}

							case 'u': // Prefix: "u"

								if l := len("u"); len(elem) >= l && elem[0:l] == "u" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'i': // Prefix: "int"

									if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestIntegerUintRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '1': // Prefix: "16"

										if l := len("16"); len(elem) >= l && elem[0:l] == "16" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestIntegerUint16Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestIntegerUint16ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestIntegerUint16ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestIntegerUint16NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestIntegerUint16NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestIntegerUint16NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												}

											}

										}

									case '3': // Prefix: "32"

										if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestIntegerUint32Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestIntegerUint32ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestIntegerUint32ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestIntegerUint32NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestIntegerUint32NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestIntegerUint32NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												}

											}

										}

									case '6': // Prefix: "64"

										if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestIntegerUint64Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestIntegerUint64ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestIntegerUint64ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestIntegerUint64NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestIntegerUint64NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestIntegerUint64NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												}

											}

										}

									case '8': // Prefix: "8"

										if l := len("8"); len(elem) >= l && elem[0:l] == "8" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestIntegerUint8Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestIntegerUint8ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestIntegerUint8ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestIntegerUint8NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestIntegerUint8NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestIntegerUint8NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												}

											}

										}

									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestIntegerUintArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestIntegerUintArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestIntegerUintNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestIntegerUintNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestIntegerUintNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											}

										}

									}

								case 'n': // Prefix: "nix"

									if l := len("nix"); len(elem) >= l && elem[0:l] == "nix" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestIntegerUnixRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '-': // Prefix: "-"

										if l := len("-"); len(elem) >= l && elem[0:l] == "-" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'm': // Prefix: "mi"

											if l := len("mi"); len(elem) >= l && elem[0:l] == "mi" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'c': // Prefix: "cro"

												if l := len("cro"); len(elem) >= l && elem[0:l] == "cro" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestIntegerUnixMicroRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_"

													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"

														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestIntegerUnixMicroArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestIntegerUnixMicroArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}

														}

													case 'n': // Prefix: "nullable"

														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestIntegerUnixMicroNullableRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch r.Method {
																case "POST":
																	s.handleTestRequestIntegerUnixMicroNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
															switch elem[0] {
															case '_': // Prefix: "_array"

																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch r.Method {
																	case "POST":
																		s.handleTestRequestIntegerUnixMicroNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																	default:
																		s.notAllowed(w, r, "POST")
																	}

																	return
																}

															}

														}

													}

												}

											case 'l': // Prefix: "lli"

												if l := len("lli"); len(elem) >= l && elem[0:l] == "lli" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestIntegerUnixMilliRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_"

													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"

														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestIntegerUnixMilliArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestIntegerUnixMilliArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}

														}

													case 'n': // Prefix: "nullable"

														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestIntegerUnixMilliNullableRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch r.Method {
																case "POST":
																	s.handleTestRequestIntegerUnixMilliNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
															switch elem[0] {
															case '_': // Prefix: "_array"

																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch r.Method {
																	case "POST":
																		s.handleTestRequestIntegerUnixMilliNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																	default:
																		s.notAllowed(w, r, "POST")
																	}

																	return
																}

															}

														}

													}

												}

											}

										case 'n': // Prefix: "nano"

											if l := len("nano"); len(elem) >= l && elem[0:l] == "nano" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestIntegerUnixNanoRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestIntegerUnixNanoArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestIntegerUnixNanoArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestIntegerUnixNanoNullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestIntegerUnixNanoNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestIntegerUnixNanoNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}

														}

													}

												}

											}

										case 's': // Prefix: "seconds"

											if l := len("seconds"); len(elem) >= l && elem[0:l] == "seconds" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestIntegerUnixSecondsRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestIntegerUnixSecondsArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestIntegerUnixSecondsArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestIntegerUnixSecondsNullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestIntegerUnixSecondsNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestIntegerUnixSecondsNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}

														}

													}

												}

											}

										}

									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestIntegerUnixArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestIntegerUnixArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestIntegerUnixNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestIntegerUnixNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestIntegerUnixNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											}

										}

									}

								}

							}

						}

					case 'n': // Prefix: "nu"

						if l := len("nu"); len(elem) >= l && elem[0:l] == "nu" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'l': // Prefix: "ll"

							if l := len("ll"); len(elem) >= l && elem[0:l] == "ll" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "POST":
									s.handleTestRequestNullRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_"

								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "array"

									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestNullArrayRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"

										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleTestRequestNullArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}

									}

								case 'n': // Prefix: "nullable"

									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestNullNullableRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"

										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestNullNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "POST":
													s.handleTestRequestNullNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}

										}

									}

								}

							}

						case 'm': // Prefix: "mber"

							if l := len("mber"); len(elem) >= l && elem[0:l] == "mber" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "POST":
									s.handleTestRequestNumberRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_"

								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "array"

									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestNumberArrayRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"

										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleTestRequestNumberArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}

									}

								case 'd': // Prefix: "double"

									if l := len("double"); len(elem) >= l && elem[0:l] == "double" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestNumberDoubleRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestNumberDoubleArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestNumberDoubleArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestNumberDoubleNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestNumberDoubleNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestNumberDoubleNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											}

										}

									}

								case 'f': // Prefix: "float"

									if l := len("float"); len(elem) >= l && elem[0:l] == "float" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestNumberFloatRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestNumberFloatArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestNumberFloatArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestNumberFloatNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestNumberFloatNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestNumberFloatNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											}

										}

									}

								case 'i': // Prefix: "int"

									if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '3': // Prefix: "32"

										if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestNumberInt32Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestNumberInt32ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestNumberInt32ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestNumberInt32NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestNumberInt32NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestNumberInt32NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												}

											}

										}

									case '6': // Prefix: "64"

										if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestNumberInt64Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestNumberInt64ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestNumberInt64ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestNumberInt64NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestNumberInt64NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestNumberInt64NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												}

											}

										}

									}

								case 'n': // Prefix: "nullable"

									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestNumberNullableRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"

										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestNumberNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "POST":
													s.handleTestRequestNumberNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}

										}

									}

								}

							}

						}

					case 'r': // Prefix: "required_"

						if l := len("required_"); len(elem) >= l && elem[0:l] == "required_" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'A': // Prefix: "Any"

							if l := len("Any"); len(elem) >= l && elem[0:l] == "Any" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleTestRequestRequiredAnyRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

						case 'E': // Prefix: "EmptyStruct"

							if l := len("EmptyStruct"); len(elem) >= l && elem[0:l] == "EmptyStruct" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleTestRequestRequiredEmptyStructRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

						case 'F': // Prefix: "FormatTest"

							if l := len("FormatTest"); len(elem) >= l && elem[0:l] == "FormatTest" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleTestRequestRequiredFormatTestRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

						case 'b': // Prefix: "boolean"

							if l := len("boolean"); len(elem) >= l && elem[0:l] == "boolean" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "POST":
									s.handleTestRequestRequiredBooleanRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_"

								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "array"

									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestRequiredBooleanArrayRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"

										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredBooleanArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}

									}

								case 'n': // Prefix: "nullable"

									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestRequiredBooleanNullableRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"

										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredBooleanNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredBooleanNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}

										}

									}

								}

							}

						case 'i': // Prefix: "integer"

							if l := len("integer"); len(elem) >= l && elem[0:l] == "integer" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "POST":
									s.handleTestRequestRequiredIntegerRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_"

								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "array"

									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestRequiredIntegerArrayRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"

										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredIntegerArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}

									}

								case 'i': // Prefix: "int"

									if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '1': // Prefix: "16"

										if l := len("16"); len(elem) >= l && elem[0:l] == "16" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredIntegerInt16Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredIntegerInt16ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredIntegerInt16ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredIntegerInt16NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredIntegerInt16NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredIntegerInt16NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												}

											}

										}

									case '3': // Prefix: "32"

										if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredIntegerInt32Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredIntegerInt32ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredIntegerInt32ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredIntegerInt32NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredIntegerInt32NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredIntegerInt32NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												}

											}

										}

									case '6': // Prefix: "64"

										if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredIntegerInt64Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredIntegerInt64ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredIntegerInt64ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredIntegerInt64NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredIntegerInt64NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredIntegerInt64NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												}

											}

										}

									case '8': // Prefix: "8"

										if l := len("8"); len(elem) >= l && elem[0:l] == "8" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredIntegerInt8Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredIntegerInt8ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredIntegerInt8ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredIntegerInt8NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredIntegerInt8NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredIntegerInt8NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												}

											}

										}

									}

								case 'n': // Prefix: "nullable"

									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestRequiredIntegerNullableRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"

										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredIntegerNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredIntegerNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}

										}

									}

								case 'u': // Prefix: "u"

									if l := len("u"); len(elem) >= l && elem[0:l] == "u" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'i': // Prefix: "int"

										if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredIntegerUintRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '1': // Prefix: "16"

											if l := len("16"); len(elem) >= l && elem[0:l] == "16" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredIntegerUint16Request([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredIntegerUint16ArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredIntegerUint16ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredIntegerUint16NullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredIntegerUint16NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredIntegerUint16NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}

														}

													}

												}

											}

										case '3': // Prefix: "32"

											if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredIntegerUint32Request([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredIntegerUint32ArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredIntegerUint32ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredIntegerUint32NullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredIntegerUint32NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredIntegerUint32NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}

														}

													}

												}

											}

										case '6': // Prefix: "64"

											if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredIntegerUint64Request([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredIntegerUint64ArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredIntegerUint64ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredIntegerUint64NullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredIntegerUint64NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredIntegerUint64NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}

														}

													}

												}

											}

										case '8': // Prefix: "8"

											if l := len("8"); len(elem) >= l && elem[0:l] == "8" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredIntegerUint8Request([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredIntegerUint8ArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredIntegerUint8ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredIntegerUint8NullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredIntegerUint8NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredIntegerUint8NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}

														}

													}

												}

											}

										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredIntegerUintArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredIntegerUintArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredIntegerUintNullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredIntegerUintNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredIntegerUintNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												}

											}

										}

									case 'n': // Prefix: "nix"

										if l := len("nix"); len(elem) >= l && elem[0:l] == "nix" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredIntegerUnixRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '-': // Prefix: "-"

											if l := len("-"); len(elem) >= l && elem[0:l] == "-" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'm': // Prefix: "mi"

												if l := len("mi"); len(elem) >= l && elem[0:l] == "mi" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'c': // Prefix: "cro"

													if l := len("cro"); len(elem) >= l && elem[0:l] == "cro" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredIntegerUnixMicroRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_"

														if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															break
														}
														switch elem[0] {
														case 'a': // Prefix: "array"

															if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredIntegerUnixMicroArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
															switch elem[0] {
															case '_': // Prefix: "_array"

																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch r.Method {
																	case "POST":
																		s.handleTestRequestRequiredIntegerUnixMicroArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																	default:
																		s.notAllowed(w, r, "POST")
																	}

																	return
																}

															}

														case 'n': // Prefix: "nullable"

															if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredIntegerUnixMicroNullableRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
															switch elem[0] {
															case '_': // Prefix: "_array"

																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	switch r.Method {
																	case "POST":
																		s.handleTestRequestRequiredIntegerUnixMicroNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
																	default:
																		s.notAllowed(w, r, "POST")
																	}

																	return
																}
																switch elem[0] {
																case '_': // Prefix: "_array"

																	if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																		elem = elem[l:]
																	} else {
																		break
																	}

																	if len(elem) == 0 {
																		// Leaf node.
																		switch r.Method {
																		case "POST":
																			s.handleTestRequestRequiredIntegerUnixMicroNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																		default:
																			s.notAllowed(w, r, "POST")
																		}

																		return
																	}

																}

															}

														}

													}

												case 'l': // Prefix: "lli"

													if l := len("lli"); len(elem) >= l && elem[0:l] == "lli" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredIntegerUnixMilliRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_"

														if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															break
														}
														switch elem[0] {
														case 'a': // Prefix: "array"

															if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredIntegerUnixMilliArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
															switch elem[0] {
															case '_': // Prefix: "_array"

																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch r.Method {
																	case "POST":
																		s.handleTestRequestRequiredIntegerUnixMilliArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																	default:
																		s.notAllowed(w, r, "POST")
																	}

																	return
																}

															}

														case 'n': // Prefix: "nullable"

															if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredIntegerUnixMilliNullableRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
															switch elem[0] {
															case '_': // Prefix: "_array"

																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	switch r.Method {
																	case "POST":
																		s.handleTestRequestRequiredIntegerUnixMilliNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
																	default:
																		s.notAllowed(w, r, "POST")
																	}

																	return
																}
																switch elem[0] {
																case '_': // Prefix: "_array"

																	if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																		elem = elem[l:]
																	} else {
																		break
																	}

																	if len(elem) == 0 {
																		// Leaf node.
																		switch r.Method {
																		case "POST":
																			s.handleTestRequestRequiredIntegerUnixMilliNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																		default:
																			s.notAllowed(w, r, "POST")
																		}

																		return
																	}

																}

															}

														}

													}

												}

											case 'n': // Prefix: "nano"

												if l := len("nano"); len(elem) >= l && elem[0:l] == "nano" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredIntegerUnixNanoRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_"

													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"

														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredIntegerUnixNanoArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredIntegerUnixNanoArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}

														}

													case 'n': // Prefix: "nullable"

														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredIntegerUnixNanoNullableRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredIntegerUnixNanoNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
															switch elem[0] {
															case '_': // Prefix: "_array"

																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch r.Method {
																	case "POST":
																		s.handleTestRequestRequiredIntegerUnixNanoNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																	default:
																		s.notAllowed(w, r, "POST")
																	}

																	return
																}

															}

														}

													}

												}

											case 's': // Prefix: "seconds"

												if l := len("seconds"); len(elem) >= l && elem[0:l] == "seconds" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredIntegerUnixSecondsRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_"

													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"

														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredIntegerUnixSecondsArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredIntegerUnixSecondsArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}

														}

													case 'n': // Prefix: "nullable"

														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredIntegerUnixSecondsNullableRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredIntegerUnixSecondsNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
															switch elem[0] {
															case '_': // Prefix: "_array"

																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch r.Method {
																	case "POST":
																		s.handleTestRequestRequiredIntegerUnixSecondsNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																	default:
																		s.notAllowed(w, r, "POST")
																	}

																	return
																}

															}

														}

													}

												}

											}

										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredIntegerUnixArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredIntegerUnixArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredIntegerUnixNullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredIntegerUnixNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredIntegerUnixNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												}

											}

										}

									}

								}

							}

						case 'n': // Prefix: "nu"

							if l := len("nu"); len(elem) >= l && elem[0:l] == "nu" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'l': // Prefix: "ll"

								if l := len("ll"); len(elem) >= l && elem[0:l] == "ll" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleTestRequestRequiredNullRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"

									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "array"

										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredNullArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredNullArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}

										}

									case 'n': // Prefix: "nullable"

										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredNullNullableRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredNullNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredNullNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										}

									}

								}

							case 'm': // Prefix: "mber"

								if l := len("mber"); len(elem) >= l && elem[0:l] == "mber" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleTestRequestRequiredNumberRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"

									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "array"

										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredNumberArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredNumberArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}

										}

									case 'd': // Prefix: "double"

										if l := len("double"); len(elem) >= l && elem[0:l] == "double" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredNumberDoubleRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredNumberDoubleArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredNumberDoubleArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredNumberDoubleNullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredNumberDoubleNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredNumberDoubleNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												}

											}

										}

									case 'f': // Prefix: "float"

										if l := len("float"); len(elem) >= l && elem[0:l] == "float" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredNumberFloatRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredNumberFloatArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredNumberFloatArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredNumberFloatNullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredNumberFloatNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredNumberFloatNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												}

											}

										}

									case 'i': // Prefix: "int"

										if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '3': // Prefix: "32"

											if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredNumberInt32Request([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredNumberInt32ArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredNumberInt32ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredNumberInt32NullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredNumberInt32NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredNumberInt32NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}

														}

													}

												}

											}

										case '6': // Prefix: "64"

											if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredNumberInt64Request([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredNumberInt64ArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredNumberInt64ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredNumberInt64NullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredNumberInt64NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredNumberInt64NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}

														}

													}

												}

											}

										}

									case 'n': // Prefix: "nullable"

										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredNumberNullableRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredNumberNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredNumberNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										}

									}

								}

							}

						case 's': // Prefix: "string"

							if l := len("string"); len(elem) >= l && elem[0:l] == "string" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "POST":
									s.handleTestRequestRequiredStringRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_"

								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "array"

									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestRequiredStringArrayRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"

										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredStringArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}

									}

								case 'b': // Prefix: "b"

									if l := len("b"); len(elem) >= l && elem[0:l] == "b" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "ase64"

										if l := len("ase64"); len(elem) >= l && elem[0:l] == "ase64" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredStringBase64Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringBase64ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringBase64ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringBase64NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringBase64NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringBase64NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												}

											}

										}

									case 'i': // Prefix: "inary"

										if l := len("inary"); len(elem) >= l && elem[0:l] == "inary" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredStringBinaryRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringBinaryArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringBinaryArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringBinaryNullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringBinaryNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringBinaryNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												}

											}

										}

									case 'y': // Prefix: "yte"

										if l := len("yte"); len(elem) >= l && elem[0:l] == "yte" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredStringByteRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringByteArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringByteArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringByteNullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringByteNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringByteNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												}

											}

										}

									}

								case 'd': // Prefix: "d"

									if l := len("d"); len(elem) >= l && elem[0:l] == "d" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "ate"

										if l := len("ate"); len(elem) >= l && elem[0:l] == "ate" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredStringDateRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '-': // Prefix: "-time"

											if l := len("-time"); len(elem) >= l && elem[0:l] == "-time" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredStringDateTimeRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringDateTimeArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringDateTimeArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringDateTimeNullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringDateTimeNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredStringDateTimeNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}

														}

													}

												}

											}

										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringDateArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringDateArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringDateNullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringDateNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringDateNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												}

											}

										}

									case 'u': // Prefix: "uration"

										if l := len("uration"); len(elem) >= l && elem[0:l] == "uration" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredStringDurationRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringDurationArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringDurationArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringDurationNullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringDurationNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringDurationNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												}

											}

										}

									}

								case 'e': // Prefix: "email"

									if l := len("email"); len(elem) >= l && elem[0:l] == "email" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestRequiredStringEmailRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredStringEmailArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringEmailArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredStringEmailNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringEmailNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringEmailNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											}

										}

									}

								case 'f': // Prefix: "float"

									if l := len("float"); len(elem) >= l && elem[0:l] == "float" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '3': // Prefix: "32"

										if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredStringFloat32Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringFloat32ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringFloat32ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringFloat32NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringFloat32NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringFloat32NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												}

											}

										}

									case '6': // Prefix: "64"

										if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredStringFloat64Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringFloat64ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringFloat64ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringFloat64NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringFloat64NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringFloat64NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												}

											}

										}

									}

								case 'h': // Prefix: "hostname"

									if l := len("hostname"); len(elem) >= l && elem[0:l] == "hostname" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestRequiredStringHostnameRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredStringHostnameArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringHostnameArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredStringHostnameNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringHostnameNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringHostnameNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											}

										}

									}

								case 'i': // Prefix: "i"

									if l := len("i"); len(elem) >= l && elem[0:l] == "i" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'n': // Prefix: "nt"

										if l := len("nt"); len(elem) >= l && elem[0:l] == "nt" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredStringIntRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '1': // Prefix: "16"

											if l := len("16"); len(elem) >= l && elem[0:l] == "16" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredStringInt16Request([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringInt16ArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringInt16ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringInt16NullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringInt16NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredStringInt16NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}

														}

													}

												}

											}

										case '3': // Prefix: "32"

											if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredStringInt32Request([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringInt32ArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringInt32ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringInt32NullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringInt32NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredStringInt32NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}

														}

													}

												}

											}

										case '6': // Prefix: "64"

											if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredStringInt64Request([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringInt64ArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringInt64ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringInt64NullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringInt64NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredStringInt64NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}

														}

													}

												}

											}

										case '8': // Prefix: "8"

											if l := len("8"); len(elem) >= l && elem[0:l] == "8" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredStringInt8Request([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringInt8ArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringInt8ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringInt8NullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringInt8NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredStringInt8NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}

														}

													}

												}

											}

										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringIntArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringIntArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringIntNullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringIntNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringIntNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												}

											}

										}

									case 'p': // Prefix: "p"

										if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredStringIPRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringIPArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringIPArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringIPNullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringIPNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringIPNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												}

											}

										case 'v': // Prefix: "v"

											if l := len("v"); len(elem) >= l && elem[0:l] == "v" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case '4': // Prefix: "4"

												if l := len("4"); len(elem) >= l && elem[0:l] == "4" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringIpv4Request([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_"

													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"

														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringIpv4ArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredStringIpv4ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}

														}

													case 'n': // Prefix: "nullable"

														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringIpv4NullableRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredStringIpv4NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
															switch elem[0] {
															case '_': // Prefix: "_array"

																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch r.Method {
																	case "POST":
																		s.handleTestRequestRequiredStringIpv4NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																	default:
																		s.notAllowed(w, r, "POST")
																	}

																	return
																}

															}

														}

													}

												}

											case '6': // Prefix: "6"

												if l := len("6"); len(elem) >= l && elem[0:l] == "6" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringIpv6Request([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_"

													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"

														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringIpv6ArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredStringIpv6ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}

														}

													case 'n': // Prefix: "nullable"

														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringIpv6NullableRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredStringIpv6NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
															switch elem[0] {
															case '_': // Prefix: "_array"

																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch r.Method {
																	case "POST":
																		s.handleTestRequestRequiredStringIpv6NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																	default:
																		s.notAllowed(w, r, "POST")
																	}

																	return
																}

															}

														}

													}

												}

											}

										}

									}

								case 'm': // Prefix: "mac"

									if l := len("mac"); len(elem) >= l && elem[0:l] == "mac" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestRequiredStringMACRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredStringMACArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringMACArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredStringMACNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringMACNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringMACNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											}

										}

									}

								case 'n': // Prefix: "nullable"

									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestRequiredStringNullableRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"

										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredStringNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredStringNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}

										}

									}

								case 'p': // Prefix: "password"

									if l := len("password"); len(elem) >= l && elem[0:l] == "password" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestRequiredStringPasswordRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredStringPasswordArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringPasswordArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredStringPasswordNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringPasswordNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringPasswordNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											}

										}

									}

								case 't': // Prefix: "time"

									if l := len("time"); len(elem) >= l && elem[0:l] == "time" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestRequiredStringTimeRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredStringTimeArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringTimeArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredStringTimeNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringTimeNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringTimeNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											}

										}

									}

								case 'u': // Prefix: "u"

									if l := len("u"); len(elem) >= l && elem[0:l] == "u" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'i': // Prefix: "int"

										if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredStringUintRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '1': // Prefix: "16"

											if l := len("16"); len(elem) >= l && elem[0:l] == "16" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredStringUint16Request([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringUint16ArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringUint16ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringUint16NullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringUint16NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredStringUint16NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}

														}

													}

												}

											}

										case '3': // Prefix: "32"

											if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredStringUint32Request([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringUint32ArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringUint32ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringUint32NullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringUint32NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredStringUint32NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}

														}

													}

												}

											}

										case '6': // Prefix: "64"

											if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredStringUint64Request([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringUint64ArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringUint64ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringUint64NullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringUint64NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredStringUint64NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}

														}

													}

												}

											}

										case '8': // Prefix: "8"

											if l := len("8"); len(elem) >= l && elem[0:l] == "8" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestRequiredStringUint8Request([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringUint8ArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringUint8ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringUint8NullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringUint8NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredStringUint8NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}

														}

													}

												}

											}

										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringUintArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringUintArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringUintNullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringUintNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringUintNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												}

											}

										}

									case 'n': // Prefix: "nix"

										if l := len("nix"); len(elem) >= l && elem[0:l] == "nix" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredStringUnixRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '-': // Prefix: "-"

											if l := len("-"); len(elem) >= l && elem[0:l] == "-" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'm': // Prefix: "mi"

												if l := len("mi"); len(elem) >= l && elem[0:l] == "mi" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'c': // Prefix: "cro"

													if l := len("cro"); len(elem) >= l && elem[0:l] == "cro" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringUnixMicroRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_"

														if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															break
														}
														switch elem[0] {
														case 'a': // Prefix: "array"

															if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredStringUnixMicroArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
															switch elem[0] {
															case '_': // Prefix: "_array"

																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch r.Method {
																	case "POST":
																		s.handleTestRequestRequiredStringUnixMicroArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																	default:
																		s.notAllowed(w, r, "POST")
																	}

																	return
																}

															}

														case 'n': // Prefix: "nullable"

															if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredStringUnixMicroNullableRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
															switch elem[0] {
															case '_': // Prefix: "_array"

																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	switch r.Method {
																	case "POST":
																		s.handleTestRequestRequiredStringUnixMicroNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
																	default:
																		s.notAllowed(w, r, "POST")
																	}

																	return
																}
																switch elem[0] {
																case '_': // Prefix: "_array"

																	if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																		elem = elem[l:]
																	} else {
																		break
																	}

																	if len(elem) == 0 {
																		// Leaf node.
																		switch r.Method {
																		case "POST":
																			s.handleTestRequestRequiredStringUnixMicroNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																		default:
																			s.notAllowed(w, r, "POST")
																		}

																		return
																	}

																}

															}

														}

													}

												case 'l': // Prefix: "lli"

													if l := len("lli"); len(elem) >= l && elem[0:l] == "lli" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringUnixMilliRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_"

														if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															break
														}
														switch elem[0] {
														case 'a': // Prefix: "array"

															if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredStringUnixMilliArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
															switch elem[0] {
															case '_': // Prefix: "_array"

																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch r.Method {
																	case "POST":
																		s.handleTestRequestRequiredStringUnixMilliArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																	default:
																		s.notAllowed(w, r, "POST")
																	}

																	return
																}

															}

														case 'n': // Prefix: "nullable"

															if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredStringUnixMilliNullableRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
															switch elem[0] {
															case '_': // Prefix: "_array"

																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	switch r.Method {
																	case "POST":
																		s.handleTestRequestRequiredStringUnixMilliNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
																	default:
																		s.notAllowed(w, r, "POST")
																	}

																	return
																}
																switch elem[0] {
																case '_': // Prefix: "_array"

																	if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																		elem = elem[l:]
																	} else {
																		break
																	}

																	if len(elem) == 0 {
																		// Leaf node.
																		switch r.Method {
																		case "POST":
																			s.handleTestRequestRequiredStringUnixMilliNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																		default:
																			s.notAllowed(w, r, "POST")
																		}

																		return
																	}

																}

															}

														}

													}

												}

											case 'n': // Prefix: "nano"

												if l := len("nano"); len(elem) >= l && elem[0:l] == "nano" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringUnixNanoRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_"

													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"

														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringUnixNanoArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredStringUnixNanoArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}

														}

													case 'n': // Prefix: "nullable"

														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringUnixNanoNullableRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredStringUnixNanoNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
															switch elem[0] {
															case '_': // Prefix: "_array"

																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch r.Method {
																	case "POST":
																		s.handleTestRequestRequiredStringUnixNanoNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																	default:
																		s.notAllowed(w, r, "POST")
																	}

																	return
																}

															}

														}

													}

												}

											case 's': // Prefix: "seconds"

												if l := len("seconds"); len(elem) >= l && elem[0:l] == "seconds" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringUnixSecondsRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_"

													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"

														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringUnixSecondsArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredStringUnixSecondsArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}

														}

													case 'n': // Prefix: "nullable"

														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringUnixSecondsNullableRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch r.Method {
																case "POST":
																	s.handleTestRequestRequiredStringUnixSecondsNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
															switch elem[0] {
															case '_': // Prefix: "_array"

																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch r.Method {
																	case "POST":
																		s.handleTestRequestRequiredStringUnixSecondsNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																	default:
																		s.notAllowed(w, r, "POST")
																	}

																	return
																}

															}

														}

													}

												}

											}

										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringUnixArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringUnixArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringUnixNullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringUnixNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringUnixNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												}

											}

										}

									case 'r': // Prefix: "ri"

										if l := len("ri"); len(elem) >= l && elem[0:l] == "ri" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredStringURIRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringURIArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringURIArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringURINullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringURINullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringURINullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												}

											}

										}

									case 'u': // Prefix: "uid"

										if l := len("uid"); len(elem) >= l && elem[0:l] == "uid" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestRequiredStringUUIDRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringUUIDArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringUUIDArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestRequiredStringUUIDNullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestRequiredStringUUIDNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestRequiredStringUUIDNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												}

											}

										}

									}

								}

							}

						}

					case 's': // Prefix: "string"

						if l := len("string"); len(elem) >= l && elem[0:l] == "string" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "POST":
								s.handleTestRequestStringRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
						switch elem[0] {
						case '_': // Prefix: "_"

							if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "array"

								if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleTestRequestStringArrayRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_array"

									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleTestRequestStringArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}

								}

							case 'b': // Prefix: "b"

								if l := len("b"); len(elem) >= l && elem[0:l] == "b" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "ase64"

									if l := len("ase64"); len(elem) >= l && elem[0:l] == "ase64" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestStringBase64Request([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringBase64ArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestStringBase64ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringBase64NullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringBase64NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestStringBase64NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											}

										}

									}

								case 'i': // Prefix: "inary"

									if l := len("inary"); len(elem) >= l && elem[0:l] == "inary" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestStringBinaryRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringBinaryArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestStringBinaryArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringBinaryNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringBinaryNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestStringBinaryNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											}

										}

									}

								case 'y': // Prefix: "yte"

									if l := len("yte"); len(elem) >= l && elem[0:l] == "yte" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestStringByteRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringByteArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestStringByteArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringByteNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringByteNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestStringByteNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											}

										}

									}

								}

							case 'd': // Prefix: "d"

								if l := len("d"); len(elem) >= l && elem[0:l] == "d" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "ate"

									if l := len("ate"); len(elem) >= l && elem[0:l] == "ate" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestStringDateRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '-': // Prefix: "-time"

										if l := len("-time"); len(elem) >= l && elem[0:l] == "-time" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestStringDateTimeRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringDateTimeArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestStringDateTimeArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringDateTimeNullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestStringDateTimeNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestStringDateTimeNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												}

											}

										}

									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringDateArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestStringDateArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringDateNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringDateNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestStringDateNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											}

										}

									}

								case 'u': // Prefix: "uration"

									if l := len("uration"); len(elem) >= l && elem[0:l] == "uration" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestStringDurationRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringDurationArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestStringDurationArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringDurationNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringDurationNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestStringDurationNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											}

										}

									}

								}

							case 'e': // Prefix: "email"

								if l := len("email"); len(elem) >= l && elem[0:l] == "email" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleTestRequestStringEmailRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"

									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "array"

										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestStringEmailArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "POST":
													s.handleTestRequestStringEmailArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}

										}

									case 'n': // Prefix: "nullable"

										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestStringEmailNullableRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringEmailNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestStringEmailNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										}

									}

								}

							case 'f': // Prefix: "float"

								if l := len("float"); len(elem) >= l && elem[0:l] == "float" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case '3': // Prefix: "32"

									if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestStringFloat32Request([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringFloat32ArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestStringFloat32ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringFloat32NullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringFloat32NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestStringFloat32NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											}

										}

									}

								case '6': // Prefix: "64"

									if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestStringFloat64Request([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringFloat64ArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestStringFloat64ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringFloat64NullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringFloat64NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestStringFloat64NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											}

										}

									}

								}

							case 'h': // Prefix: "hostname"

								if l := len("hostname"); len(elem) >= l && elem[0:l] == "hostname" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleTestRequestStringHostnameRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"

									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "array"

										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestStringHostnameArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "POST":
													s.handleTestRequestStringHostnameArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}

										}

									case 'n': // Prefix: "nullable"

										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestStringHostnameNullableRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringHostnameNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestStringHostnameNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										}

									}

								}

							case 'i': // Prefix: "i"

								if l := len("i"); len(elem) >= l && elem[0:l] == "i" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'n': // Prefix: "nt"

									if l := len("nt"); len(elem) >= l && elem[0:l] == "nt" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestStringIntRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '1': // Prefix: "16"

										if l := len("16"); len(elem) >= l && elem[0:l] == "16" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestStringInt16Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringInt16ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestStringInt16ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringInt16NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestStringInt16NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestStringInt16NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												}

											}

										}

									case '3': // Prefix: "32"

										if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestStringInt32Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringInt32ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestStringInt32ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringInt32NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestStringInt32NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestStringInt32NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												}

											}

										}

									case '6': // Prefix: "64"

										if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestStringInt64Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringInt64ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestStringInt64ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringInt64NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestStringInt64NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestStringInt64NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												}

											}

										}

									case '8': // Prefix: "8"

										if l := len("8"); len(elem) >= l && elem[0:l] == "8" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestStringInt8Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringInt8ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestStringInt8ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringInt8NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestStringInt8NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestStringInt8NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												}

											}

										}

									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringIntArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestStringIntArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringIntNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringIntNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestStringIntNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											}

										}

									}

								case 'p': // Prefix: "p"

									if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestStringIPRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringIPArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestStringIPArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringIPNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringIPNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestStringIPNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											}

										}

									case 'v': // Prefix: "v"

										if l := len("v"); len(elem) >= l && elem[0:l] == "v" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '4': // Prefix: "4"

											if l := len("4"); len(elem) >= l && elem[0:l] == "4" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringIpv4Request([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestStringIpv4ArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestStringIpv4ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestStringIpv4NullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestStringIpv4NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestStringIpv4NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}

														}

													}

												}

											}

										case '6': // Prefix: "6"

											if l := len("6"); len(elem) >= l && elem[0:l] == "6" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringIpv6Request([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestStringIpv6ArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestStringIpv6ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestStringIpv6NullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestStringIpv6NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestStringIpv6NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}

														}

													}

												}

											}

										}

									}

								}

							case 'm': // Prefix: "mac"

								if l := len("mac"); len(elem) >= l && elem[0:l] == "mac" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleTestRequestStringMACRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"

									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "array"

										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestStringMACArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "POST":
													s.handleTestRequestStringMACArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}

										}

									case 'n': // Prefix: "nullable"

										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestStringMACNullableRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringMACNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestStringMACNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										}

									}

								}

							case 'n': // Prefix: "nullable"

								if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleTestRequestStringNullableRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_array"

									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestStringNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"

										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleTestRequestStringNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}

									}

								}

							case 'p': // Prefix: "password"

								if l := len("password"); len(elem) >= l && elem[0:l] == "password" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleTestRequestStringPasswordRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"

									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "array"

										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestStringPasswordArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "POST":
													s.handleTestRequestStringPasswordArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}

										}

									case 'n': // Prefix: "nullable"

										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestStringPasswordNullableRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringPasswordNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestStringPasswordNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										}

									}

								}

							case 't': // Prefix: "time"

								if l := len("time"); len(elem) >= l && elem[0:l] == "time" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleTestRequestStringTimeRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"

									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "array"

										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestStringTimeArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "POST":
													s.handleTestRequestStringTimeArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}

										}

									case 'n': // Prefix: "nullable"

										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestStringTimeNullableRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringTimeNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestStringTimeNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										}

									}

								}

							case 'u': // Prefix: "u"

								if l := len("u"); len(elem) >= l && elem[0:l] == "u" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'i': // Prefix: "int"

									if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestStringUintRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '1': // Prefix: "16"

										if l := len("16"); len(elem) >= l && elem[0:l] == "16" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestStringUint16Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringUint16ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestStringUint16ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringUint16NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestStringUint16NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestStringUint16NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												}

											}

										}

									case '3': // Prefix: "32"

										if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestStringUint32Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringUint32ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestStringUint32ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringUint32NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestStringUint32NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestStringUint32NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												}

											}

										}

									case '6': // Prefix: "64"

										if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestStringUint64Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringUint64ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestStringUint64ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringUint64NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestStringUint64NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestStringUint64NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												}

											}

										}

									case '8': // Prefix: "8"

										if l := len("8"); len(elem) >= l && elem[0:l] == "8" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestRequestStringUint8Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringUint8ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestStringUint8ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringUint8NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestStringUint8NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestStringUint8NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												}

											}

										}

									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringUintArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestStringUintArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringUintNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringUintNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestStringUintNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											}

										}

									}

								case 'n': // Prefix: "nix"

									if l := len("nix"); len(elem) >= l && elem[0:l] == "nix" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestStringUnixRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '-': // Prefix: "-"

										if l := len("-"); len(elem) >= l && elem[0:l] == "-" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'm': // Prefix: "mi"

											if l := len("mi"); len(elem) >= l && elem[0:l] == "mi" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'c': // Prefix: "cro"

												if l := len("cro"); len(elem) >= l && elem[0:l] == "cro" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringUnixMicroRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_"

													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"

														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestStringUnixMicroArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestStringUnixMicroArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}

														}

													case 'n': // Prefix: "nullable"

														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestStringUnixMicroNullableRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch r.Method {
																case "POST":
																	s.handleTestRequestStringUnixMicroNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
															switch elem[0] {
															case '_': // Prefix: "_array"

																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch r.Method {
																	case "POST":
																		s.handleTestRequestStringUnixMicroNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																	default:
																		s.notAllowed(w, r, "POST")
																	}

																	return
																}

															}

														}

													}

												}

											case 'l': // Prefix: "lli"

												if l := len("lli"); len(elem) >= l && elem[0:l] == "lli" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringUnixMilliRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_"

													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"

														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestStringUnixMilliArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestStringUnixMilliArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}

														}

													case 'n': // Prefix: "nullable"

														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestStringUnixMilliNullableRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch r.Method {
																case "POST":
																	s.handleTestRequestStringUnixMilliNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
															switch elem[0] {
															case '_': // Prefix: "_array"

																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch r.Method {
																	case "POST":
																		s.handleTestRequestStringUnixMilliNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																	default:
																		s.notAllowed(w, r, "POST")
																	}

																	return
																}

															}

														}

													}

												}

											}

										case 'n': // Prefix: "nano"

											if l := len("nano"); len(elem) >= l && elem[0:l] == "nano" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringUnixNanoRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestStringUnixNanoArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestStringUnixNanoArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestStringUnixNanoNullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestStringUnixNanoNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestStringUnixNanoNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}

														}

													}

												}

											}

										case 's': // Prefix: "seconds"

											if l := len("seconds"); len(elem) >= l && elem[0:l] == "seconds" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringUnixSecondsRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestStringUnixSecondsArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestRequestStringUnixSecondsArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestRequestStringUnixSecondsNullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestRequestStringUnixSecondsNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestRequestStringUnixSecondsNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}

														}

													}

												}

											}

										}

									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringUnixArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestStringUnixArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringUnixNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringUnixNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestStringUnixNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											}

										}

									}

								case 'r': // Prefix: "ri"

									if l := len("ri"); len(elem) >= l && elem[0:l] == "ri" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestStringURIRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringURIArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestStringURIArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringURINullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringURINullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestStringURINullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											}

										}

									}

								case 'u': // Prefix: "uid"

									if l := len("uid"); len(elem) >= l && elem[0:l] == "uid" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestRequestStringUUIDRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringUUIDArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestRequestStringUUIDArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestRequestStringUUIDNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestRequestStringUUIDNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestRequestStringUUIDNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											}

										}

									}

								}

							}

						}

					}

				case 's': // Prefix: "sponse_"

					if l := len("sponse_"); len(elem) >= l && elem[0:l] == "sponse_" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'A': // Prefix: "Any"

						if l := len("Any"); len(elem) >= l && elem[0:l] == "Any" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleTestResponseAnyRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

					case 'E': // Prefix: "EmptyStruct"

						if l := len("EmptyStruct"); len(elem) >= l && elem[0:l] == "EmptyStruct" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleTestResponseEmptyStructRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

					case 'F': // Prefix: "FormatTest"

						if l := len("FormatTest"); len(elem) >= l && elem[0:l] == "FormatTest" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleTestResponseFormatTestRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

					case 'b': // Prefix: "boolean"

						if l := len("boolean"); len(elem) >= l && elem[0:l] == "boolean" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "POST":
								s.handleTestResponseBooleanRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
						switch elem[0] {
						case '_': // Prefix: "_"

							if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "array"

								if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleTestResponseBooleanArrayRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_array"

									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleTestResponseBooleanArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}

								}

							case 'n': // Prefix: "nullable"

								if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleTestResponseBooleanNullableRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_array"

									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseBooleanNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"

										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleTestResponseBooleanNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}

									}

								}

							}

						}

					case 'i': // Prefix: "integer"

						if l := len("integer"); len(elem) >= l && elem[0:l] == "integer" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "POST":
								s.handleTestResponseIntegerRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
						switch elem[0] {
						case '_': // Prefix: "_"

							if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "array"

								if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleTestResponseIntegerArrayRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_array"

									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleTestResponseIntegerArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}

								}

							case 'i': // Prefix: "int"

								if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case '1': // Prefix: "16"

									if l := len("16"); len(elem) >= l && elem[0:l] == "16" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseIntegerInt16Request([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseIntegerInt16ArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestResponseIntegerInt16ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseIntegerInt16NullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseIntegerInt16NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseIntegerInt16NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											}

										}

									}

								case '3': // Prefix: "32"

									if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseIntegerInt32Request([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseIntegerInt32ArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestResponseIntegerInt32ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseIntegerInt32NullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseIntegerInt32NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseIntegerInt32NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											}

										}

									}

								case '6': // Prefix: "64"

									if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseIntegerInt64Request([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseIntegerInt64ArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestResponseIntegerInt64ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseIntegerInt64NullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseIntegerInt64NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseIntegerInt64NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											}

										}

									}

								case '8': // Prefix: "8"

									if l := len("8"); len(elem) >= l && elem[0:l] == "8" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseIntegerInt8Request([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseIntegerInt8ArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestResponseIntegerInt8ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseIntegerInt8NullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseIntegerInt8NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseIntegerInt8NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											}

										}

									}

								}

							case 'n': // Prefix: "nullable"

								if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleTestResponseIntegerNullableRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_array"

									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseIntegerNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"

										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleTestResponseIntegerNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}

									}

								}

							case 'u': // Prefix: "u"

								if l := len("u"); len(elem) >= l && elem[0:l] == "u" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'i': // Prefix: "int"

									if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseIntegerUintRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '1': // Prefix: "16"

										if l := len("16"); len(elem) >= l && elem[0:l] == "16" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestResponseIntegerUint16Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseIntegerUint16ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseIntegerUint16ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseIntegerUint16NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseIntegerUint16NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestResponseIntegerUint16NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												}

											}

										}

									case '3': // Prefix: "32"

										if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestResponseIntegerUint32Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseIntegerUint32ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseIntegerUint32ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseIntegerUint32NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseIntegerUint32NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestResponseIntegerUint32NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												}

											}

										}

									case '6': // Prefix: "64"

										if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestResponseIntegerUint64Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseIntegerUint64ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseIntegerUint64ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseIntegerUint64NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseIntegerUint64NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestResponseIntegerUint64NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												}

											}

										}

									case '8': // Prefix: "8"

										if l := len("8"); len(elem) >= l && elem[0:l] == "8" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestResponseIntegerUint8Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseIntegerUint8ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseIntegerUint8ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseIntegerUint8NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseIntegerUint8NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestResponseIntegerUint8NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												}

											}

										}

									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseIntegerUintArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestResponseIntegerUintArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseIntegerUintNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseIntegerUintNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseIntegerUintNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											}

										}

									}

								case 'n': // Prefix: "nix"

									if l := len("nix"); len(elem) >= l && elem[0:l] == "nix" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseIntegerUnixRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '-': // Prefix: "-"

										if l := len("-"); len(elem) >= l && elem[0:l] == "-" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'm': // Prefix: "mi"

											if l := len("mi"); len(elem) >= l && elem[0:l] == "mi" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'c': // Prefix: "cro"

												if l := len("cro"); len(elem) >= l && elem[0:l] == "cro" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseIntegerUnixMicroRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_"

													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"

														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestResponseIntegerUnixMicroArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestResponseIntegerUnixMicroArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}

														}

													case 'n': // Prefix: "nullable"

														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestResponseIntegerUnixMicroNullableRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch r.Method {
																case "POST":
																	s.handleTestResponseIntegerUnixMicroNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
															switch elem[0] {
															case '_': // Prefix: "_array"

																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch r.Method {
																	case "POST":
																		s.handleTestResponseIntegerUnixMicroNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																	default:
																		s.notAllowed(w, r, "POST")
																	}

																	return
																}

															}

														}

													}

												}

											case 'l': // Prefix: "lli"

												if l := len("lli"); len(elem) >= l && elem[0:l] == "lli" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseIntegerUnixMilliRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_"

													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"

														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestResponseIntegerUnixMilliArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestResponseIntegerUnixMilliArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}

														}

													case 'n': // Prefix: "nullable"

														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestResponseIntegerUnixMilliNullableRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch r.Method {
																case "POST":
																	s.handleTestResponseIntegerUnixMilliNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
															switch elem[0] {
															case '_': // Prefix: "_array"

																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch r.Method {
																	case "POST":
																		s.handleTestResponseIntegerUnixMilliNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																	default:
																		s.notAllowed(w, r, "POST")
																	}

																	return
																}

															}

														}

													}

												}

											}

										case 'n': // Prefix: "nano"

											if l := len("nano"); len(elem) >= l && elem[0:l] == "nano" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseIntegerUnixNanoRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseIntegerUnixNanoArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestResponseIntegerUnixNanoArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseIntegerUnixNanoNullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestResponseIntegerUnixNanoNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestResponseIntegerUnixNanoNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}

														}

													}

												}

											}

										case 's': // Prefix: "seconds"

											if l := len("seconds"); len(elem) >= l && elem[0:l] == "seconds" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseIntegerUnixSecondsRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseIntegerUnixSecondsArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestResponseIntegerUnixSecondsArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseIntegerUnixSecondsNullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestResponseIntegerUnixSecondsNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestResponseIntegerUnixSecondsNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}

														}

													}

												}

											}

										}

									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseIntegerUnixArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestResponseIntegerUnixArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseIntegerUnixNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseIntegerUnixNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseIntegerUnixNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											}

										}

									}

								}

							}

						}

					case 'n': // Prefix: "nu"

						if l := len("nu"); len(elem) >= l && elem[0:l] == "nu" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'l': // Prefix: "ll"

							if l := len("ll"); len(elem) >= l && elem[0:l] == "ll" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "POST":
									s.handleTestResponseNullRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_"

								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "array"

									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseNullArrayRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"

										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleTestResponseNullArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}

									}

								case 'n': // Prefix: "nullable"

									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseNullNullableRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"

										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestResponseNullNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "POST":
													s.handleTestResponseNullNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}

										}

									}

								}

							}

						case 'm': // Prefix: "mber"

							if l := len("mber"); len(elem) >= l && elem[0:l] == "mber" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "POST":
									s.handleTestResponseNumberRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
							switch elem[0] {
							case '_': // Prefix: "_"

								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "array"

									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseNumberArrayRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"

										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleTestResponseNumberArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}

									}

								case 'd': // Prefix: "double"

									if l := len("double"); len(elem) >= l && elem[0:l] == "double" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseNumberDoubleRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseNumberDoubleArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestResponseNumberDoubleArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseNumberDoubleNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseNumberDoubleNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseNumberDoubleNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											}

										}

									}

								case 'f': // Prefix: "float"

									if l := len("float"); len(elem) >= l && elem[0:l] == "float" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseNumberFloatRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseNumberFloatArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestResponseNumberFloatArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseNumberFloatNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseNumberFloatNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseNumberFloatNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											}

										}

									}

								case 'i': // Prefix: "int"

									if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '3': // Prefix: "32"

										if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestResponseNumberInt32Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseNumberInt32ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseNumberInt32ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseNumberInt32NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseNumberInt32NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestResponseNumberInt32NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												}

											}

										}

									case '6': // Prefix: "64"

										if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestResponseNumberInt64Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseNumberInt64ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseNumberInt64ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseNumberInt64NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseNumberInt64NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestResponseNumberInt64NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												}

											}

										}

									}

								case 'n': // Prefix: "nullable"

									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseNumberNullableRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"

										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestResponseNumberNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "POST":
													s.handleTestResponseNumberNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}

										}

									}

								}

							}

						}

					case 's': // Prefix: "string"

						if l := len("string"); len(elem) >= l && elem[0:l] == "string" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "POST":
								s.handleTestResponseStringRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
						switch elem[0] {
						case '_': // Prefix: "_"

							if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "array"

								if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleTestResponseStringArrayRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_array"

									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleTestResponseStringArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}

								}

							case 'b': // Prefix: "b"

								if l := len("b"); len(elem) >= l && elem[0:l] == "b" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "ase64"

									if l := len("ase64"); len(elem) >= l && elem[0:l] == "ase64" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseStringBase64Request([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringBase64ArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestResponseStringBase64ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringBase64NullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringBase64NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseStringBase64NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											}

										}

									}

								case 'i': // Prefix: "inary"

									if l := len("inary"); len(elem) >= l && elem[0:l] == "inary" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseStringBinaryRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringBinaryArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestResponseStringBinaryArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringBinaryNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringBinaryNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseStringBinaryNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											}

										}

									}

								case 'y': // Prefix: "yte"

									if l := len("yte"); len(elem) >= l && elem[0:l] == "yte" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseStringByteRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringByteArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestResponseStringByteArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringByteNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringByteNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseStringByteNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											}

										}

									}

								}

							case 'd': // Prefix: "d"

								if l := len("d"); len(elem) >= l && elem[0:l] == "d" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "ate"

									if l := len("ate"); len(elem) >= l && elem[0:l] == "ate" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseStringDateRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '-': // Prefix: "-time"

										if l := len("-time"); len(elem) >= l && elem[0:l] == "-time" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestResponseStringDateTimeRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringDateTimeArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseStringDateTimeArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringDateTimeNullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseStringDateTimeNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestResponseStringDateTimeNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												}

											}

										}

									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringDateArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestResponseStringDateArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringDateNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringDateNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseStringDateNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											}

										}

									}

								case 'u': // Prefix: "uration"

									if l := len("uration"); len(elem) >= l && elem[0:l] == "uration" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseStringDurationRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringDurationArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestResponseStringDurationArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringDurationNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringDurationNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseStringDurationNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											}

										}

									}

								}

							case 'e': // Prefix: "email"

								if l := len("email"); len(elem) >= l && elem[0:l] == "email" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleTestResponseStringEmailRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"

									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "array"

										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestResponseStringEmailArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "POST":
													s.handleTestResponseStringEmailArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}

										}

									case 'n': // Prefix: "nullable"

										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestResponseStringEmailNullableRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringEmailNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestResponseStringEmailNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										}

									}

								}

							case 'f': // Prefix: "float"

								if l := len("float"); len(elem) >= l && elem[0:l] == "float" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case '3': // Prefix: "32"

									if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseStringFloat32Request([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringFloat32ArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestResponseStringFloat32ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringFloat32NullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringFloat32NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseStringFloat32NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											}

										}

									}

								case '6': // Prefix: "64"

									if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseStringFloat64Request([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringFloat64ArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestResponseStringFloat64ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringFloat64NullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringFloat64NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseStringFloat64NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											}

										}

									}

								}

							case 'h': // Prefix: "hostname"

								if l := len("hostname"); len(elem) >= l && elem[0:l] == "hostname" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleTestResponseStringHostnameRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"

									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "array"

										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestResponseStringHostnameArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "POST":
													s.handleTestResponseStringHostnameArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}

										}

									case 'n': // Prefix: "nullable"

										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestResponseStringHostnameNullableRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringHostnameNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestResponseStringHostnameNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										}

									}

								}

							case 'i': // Prefix: "i"

								if l := len("i"); len(elem) >= l && elem[0:l] == "i" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'n': // Prefix: "nt"

									if l := len("nt"); len(elem) >= l && elem[0:l] == "nt" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseStringIntRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '1': // Prefix: "16"

										if l := len("16"); len(elem) >= l && elem[0:l] == "16" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestResponseStringInt16Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringInt16ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseStringInt16ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringInt16NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseStringInt16NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestResponseStringInt16NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												}

											}

										}

									case '3': // Prefix: "32"

										if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestResponseStringInt32Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringInt32ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseStringInt32ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringInt32NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseStringInt32NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestResponseStringInt32NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												}

											}

										}

									case '6': // Prefix: "64"

										if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestResponseStringInt64Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringInt64ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseStringInt64ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringInt64NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseStringInt64NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestResponseStringInt64NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												}

											}

										}

									case '8': // Prefix: "8"

										if l := len("8"); len(elem) >= l && elem[0:l] == "8" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestResponseStringInt8Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringInt8ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseStringInt8ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringInt8NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseStringInt8NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestResponseStringInt8NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												}

											}

										}

									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringIntArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestResponseStringIntArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringIntNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringIntNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseStringIntNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											}

										}

									}

								case 'p': // Prefix: "p"

									if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseStringIPRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringIPArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestResponseStringIPArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringIPNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringIPNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseStringIPNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											}

										}

									case 'v': // Prefix: "v"

										if l := len("v"); len(elem) >= l && elem[0:l] == "v" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '4': // Prefix: "4"

											if l := len("4"); len(elem) >= l && elem[0:l] == "4" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringIpv4Request([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseStringIpv4ArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestResponseStringIpv4ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseStringIpv4NullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestResponseStringIpv4NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestResponseStringIpv4NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}

														}

													}

												}

											}

										case '6': // Prefix: "6"

											if l := len("6"); len(elem) >= l && elem[0:l] == "6" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringIpv6Request([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseStringIpv6ArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestResponseStringIpv6ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseStringIpv6NullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestResponseStringIpv6NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestResponseStringIpv6NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}

														}

													}

												}

											}

										}

									}

								}

							case 'm': // Prefix: "mac"

								if l := len("mac"); len(elem) >= l && elem[0:l] == "mac" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleTestResponseStringMACRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"

									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "array"

										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestResponseStringMACArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "POST":
													s.handleTestResponseStringMACArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}

										}

									case 'n': // Prefix: "nullable"

										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestResponseStringMACNullableRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringMACNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestResponseStringMACNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										}

									}

								}

							case 'n': // Prefix: "nullable"

								if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleTestResponseStringNullableRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_array"

									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseStringNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_array"

										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleTestResponseStringNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}

									}

								}

							case 'p': // Prefix: "password"

								if l := len("password"); len(elem) >= l && elem[0:l] == "password" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleTestResponseStringPasswordRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"

									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "array"

										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestResponseStringPasswordArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "POST":
													s.handleTestResponseStringPasswordArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}

										}

									case 'n': // Prefix: "nullable"

										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestResponseStringPasswordNullableRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringPasswordNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestResponseStringPasswordNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										}

									}

								}

							case 't': // Prefix: "time"

								if l := len("time"); len(elem) >= l && elem[0:l] == "time" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleTestResponseStringTimeRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '_': // Prefix: "_"

									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "array"

										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestResponseStringTimeArrayRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "POST":
													s.handleTestResponseStringTimeArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}

										}

									case 'n': // Prefix: "nullable"

										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestResponseStringTimeNullableRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringTimeNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestResponseStringTimeNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										}

									}

								}

							case 'u': // Prefix: "u"

								if l := len("u"); len(elem) >= l && elem[0:l] == "u" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'i': // Prefix: "int"

									if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseStringUintRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '1': // Prefix: "16"

										if l := len("16"); len(elem) >= l && elem[0:l] == "16" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestResponseStringUint16Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringUint16ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseStringUint16ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringUint16NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseStringUint16NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestResponseStringUint16NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												}

											}

										}

									case '3': // Prefix: "32"

										if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestResponseStringUint32Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringUint32ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseStringUint32ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringUint32NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseStringUint32NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestResponseStringUint32NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												}

											}

										}

									case '6': // Prefix: "64"

										if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestResponseStringUint64Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringUint64ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseStringUint64ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringUint64NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseStringUint64NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestResponseStringUint64NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												}

											}

										}

									case '8': // Prefix: "8"

										if l := len("8"); len(elem) >= l && elem[0:l] == "8" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "POST":
												s.handleTestResponseStringUint8Request([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringUint8ArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseStringUint8ArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringUint8NullableRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseStringUint8NullableArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestResponseStringUint8NullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												}

											}

										}

									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringUintArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestResponseStringUintArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringUintNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringUintNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseStringUintNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											}

										}

									}

								case 'n': // Prefix: "nix"

									if l := len("nix"); len(elem) >= l && elem[0:l] == "nix" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseStringUnixRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '-': // Prefix: "-"

										if l := len("-"); len(elem) >= l && elem[0:l] == "-" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'm': // Prefix: "mi"

											if l := len("mi"); len(elem) >= l && elem[0:l] == "mi" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'c': // Prefix: "cro"

												if l := len("cro"); len(elem) >= l && elem[0:l] == "cro" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringUnixMicroRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_"

													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"

														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestResponseStringUnixMicroArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestResponseStringUnixMicroArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}

														}

													case 'n': // Prefix: "nullable"

														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestResponseStringUnixMicroNullableRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch r.Method {
																case "POST":
																	s.handleTestResponseStringUnixMicroNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
															switch elem[0] {
															case '_': // Prefix: "_array"

																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch r.Method {
																	case "POST":
																		s.handleTestResponseStringUnixMicroNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																	default:
																		s.notAllowed(w, r, "POST")
																	}

																	return
																}

															}

														}

													}

												}

											case 'l': // Prefix: "lli"

												if l := len("lli"); len(elem) >= l && elem[0:l] == "lli" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringUnixMilliRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_"

													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"

														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestResponseStringUnixMilliArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestResponseStringUnixMilliArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}

														}

													case 'n': // Prefix: "nullable"

														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestResponseStringUnixMilliNullableRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch r.Method {
																case "POST":
																	s.handleTestResponseStringUnixMilliNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}
															switch elem[0] {
															case '_': // Prefix: "_array"

																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch r.Method {
																	case "POST":
																		s.handleTestResponseStringUnixMilliNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																	default:
																		s.notAllowed(w, r, "POST")
																	}

																	return
																}

															}

														}

													}

												}

											}

										case 'n': // Prefix: "nano"

											if l := len("nano"); len(elem) >= l && elem[0:l] == "nano" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringUnixNanoRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseStringUnixNanoArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestResponseStringUnixNanoArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseStringUnixNanoNullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestResponseStringUnixNanoNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestResponseStringUnixNanoNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}

														}

													}

												}

											}

										case 's': // Prefix: "seconds"

											if l := len("seconds"); len(elem) >= l && elem[0:l] == "seconds" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringUnixSecondsRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseStringUnixSecondsArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch r.Method {
															case "POST":
																s.handleTestResponseStringUnixSecondsArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch r.Method {
														case "POST":
															s.handleTestResponseStringUnixSecondsNullableRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch r.Method {
															case "POST":
																s.handleTestResponseStringUnixSecondsNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
															default:
																s.notAllowed(w, r, "POST")
															}

															return
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch r.Method {
																case "POST":
																	s.handleTestResponseStringUnixSecondsNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
																default:
																	s.notAllowed(w, r, "POST")
																}

																return
															}

														}

													}

												}

											}

										}

									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringUnixArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestResponseStringUnixArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringUnixNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringUnixNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseStringUnixNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											}

										}

									}

								case 'r': // Prefix: "ri"

									if l := len("ri"); len(elem) >= l && elem[0:l] == "ri" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseStringURIRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringURIArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestResponseStringURIArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringURINullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringURINullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseStringURINullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											}

										}

									}

								case 'u': // Prefix: "uid"

									if l := len("uid"); len(elem) >= l && elem[0:l] == "uid" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleTestResponseStringUUIDRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringUUIDArrayRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleTestResponseStringUUIDArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch r.Method {
												case "POST":
													s.handleTestResponseStringUUIDNullableRequest([0]string{}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch r.Method {
													case "POST":
														s.handleTestResponseStringUUIDNullableArrayRequest([0]string{}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleTestResponseStringUUIDNullableArrayArrayRequest([0]string{}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											}

										}

									}

								}

							}

						}

					}

				}

			}

		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [0]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/test_"

			if l := len("/test_"); len(elem) >= l && elem[0:l] == "/test_" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'q': // Prefix: "query_parameter"

				if l := len("query_parameter"); len(elem) >= l && elem[0:l] == "query_parameter" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "POST":
						r.name = TestQueryParameterOperation
						r.summary = ""
						r.operationID = "test_query_parameter"
						r.pathPattern = "/test_query_parameter"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

			case 'r': // Prefix: "re"

				if l := len("re"); len(elem) >= l && elem[0:l] == "re" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'q': // Prefix: "quest_"

					if l := len("quest_"); len(elem) >= l && elem[0:l] == "quest_" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'A': // Prefix: "Any"

						if l := len("Any"); len(elem) >= l && elem[0:l] == "Any" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = TestRequestAnyOperation
								r.summary = ""
								r.operationID = "test_request_Any"
								r.pathPattern = "/test_request_Any"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					case 'E': // Prefix: "EmptyStruct"

						if l := len("EmptyStruct"); len(elem) >= l && elem[0:l] == "EmptyStruct" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = TestRequestEmptyStructOperation
								r.summary = ""
								r.operationID = "test_request_EmptyStruct"
								r.pathPattern = "/test_request_EmptyStruct"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					case 'F': // Prefix: "FormatTest"

						if l := len("FormatTest"); len(elem) >= l && elem[0:l] == "FormatTest" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = TestRequestFormatTestOperation
								r.summary = ""
								r.operationID = "test_request_FormatTest"
								r.pathPattern = "/test_request_FormatTest"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					case 'b': // Prefix: "boolean"

						if l := len("boolean"); len(elem) >= l && elem[0:l] == "boolean" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								r.name = TestRequestBooleanOperation
								r.summary = ""
								r.operationID = "test_request_boolean"
								r.pathPattern = "/test_request_boolean"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '_': // Prefix: "_"

							if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "array"

								if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = TestRequestBooleanArrayOperation
										r.summary = ""
										r.operationID = "test_request_boolean_array"
										r.pathPattern = "/test_request_boolean_array"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '_': // Prefix: "_array"

									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "POST":
											r.name = TestRequestBooleanArrayArrayOperation
											r.summary = ""
											r.operationID = "test_request_boolean_array_array"
											r.pathPattern = "/test_request_boolean_array_array"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}

								}

							case 'n': // Prefix: "nullable"

								if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = TestRequestBooleanNullableOperation
										r.summary = ""
										r.operationID = "test_request_boolean_nullable"
										r.pathPattern = "/test_request_boolean_nullable"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '_': // Prefix: "_array"

									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestRequestBooleanNullableArrayOperation
											r.summary = ""
											r.operationID = "test_request_boolean_nullable_array"
											r.pathPattern = "/test_request_boolean_nullable_array"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_array"

										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "POST":
												r.name = TestRequestBooleanNullableArrayArrayOperation
												r.summary = ""
												r.operationID = "test_request_boolean_nullable_array_array"
												r.pathPattern = "/test_request_boolean_nullable_array_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}

									}

								}

							}

						}

					case 'i': // Prefix: "integer"

						if l := len("integer"); len(elem) >= l && elem[0:l] == "integer" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								r.name = TestRequestIntegerOperation
								r.summary = ""
								r.operationID = "test_request_integer"
								r.pathPattern = "/test_request_integer"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '_': // Prefix: "_"

							if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "array"

								if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = TestRequestIntegerArrayOperation
										r.summary = ""
										r.operationID = "test_request_integer_array"
										r.pathPattern = "/test_request_integer_array"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '_': // Prefix: "_array"

									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "POST":
											r.name = TestRequestIntegerArrayArrayOperation
											r.summary = ""
											r.operationID = "test_request_integer_array_array"
											r.pathPattern = "/test_request_integer_array_array"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}

								}

							case 'i': // Prefix: "int"

								if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case '1': // Prefix: "16"

									if l := len("16"); len(elem) >= l && elem[0:l] == "16" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestRequestIntegerInt16Operation
											r.summary = ""
											r.operationID = "test_request_integer_int16"
											r.pathPattern = "/test_request_integer_int16"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestIntegerInt16ArrayOperation
													r.summary = ""
													r.operationID = "test_request_integer_int16_array"
													r.pathPattern = "/test_request_integer_int16_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestRequestIntegerInt16ArrayArrayOperation
														r.summary = ""
														r.operationID = "test_request_integer_int16_array_array"
														r.pathPattern = "/test_request_integer_int16_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestIntegerInt16NullableOperation
													r.summary = ""
													r.operationID = "test_request_integer_int16_nullable"
													r.pathPattern = "/test_request_integer_int16_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestIntegerInt16NullableArrayOperation
														r.summary = ""
														r.operationID = "test_request_integer_int16_nullable_array"
														r.pathPattern = "/test_request_integer_int16_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestIntegerInt16NullableArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_integer_int16_nullable_array_array"
															r.pathPattern = "/test_request_integer_int16_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											}

										}

									}

								case '3': // Prefix: "32"

									if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestRequestIntegerInt32Operation
											r.summary = ""
											r.operationID = "test_request_integer_int32"
											r.pathPattern = "/test_request_integer_int32"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestIntegerInt32ArrayOperation
													r.summary = ""
													r.operationID = "test_request_integer_int32_array"
													r.pathPattern = "/test_request_integer_int32_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestRequestIntegerInt32ArrayArrayOperation
														r.summary = ""
														r.operationID = "test_request_integer_int32_array_array"
														r.pathPattern = "/test_request_integer_int32_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestIntegerInt32NullableOperation
													r.summary = ""
													r.operationID = "test_request_integer_int32_nullable"
													r.pathPattern = "/test_request_integer_int32_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestIntegerInt32NullableArrayOperation
														r.summary = ""
														r.operationID = "test_request_integer_int32_nullable_array"
														r.pathPattern = "/test_request_integer_int32_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestIntegerInt32NullableArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_integer_int32_nullable_array_array"
															r.pathPattern = "/test_request_integer_int32_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											}

										}

									}

								case '6': // Prefix: "64"

									if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestRequestIntegerInt64Operation
											r.summary = ""
											r.operationID = "test_request_integer_int64"
											r.pathPattern = "/test_request_integer_int64"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestIntegerInt64ArrayOperation
													r.summary = ""
													r.operationID = "test_request_integer_int64_array"
													r.pathPattern = "/test_request_integer_int64_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestRequestIntegerInt64ArrayArrayOperation
														r.summary = ""
														r.operationID = "test_request_integer_int64_array_array"
														r.pathPattern = "/test_request_integer_int64_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestIntegerInt64NullableOperation
													r.summary = ""
													r.operationID = "test_request_integer_int64_nullable"
													r.pathPattern = "/test_request_integer_int64_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestIntegerInt64NullableArrayOperation
														r.summary = ""
														r.operationID = "test_request_integer_int64_nullable_array"
														r.pathPattern = "/test_request_integer_int64_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestIntegerInt64NullableArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_integer_int64_nullable_array_array"
															r.pathPattern = "/test_request_integer_int64_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											}

										}

									}

								case '8': // Prefix: "8"

									if l := len("8"); len(elem) >= l && elem[0:l] == "8" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestRequestIntegerInt8Operation
											r.summary = ""
											r.operationID = "test_request_integer_int8"
											r.pathPattern = "/test_request_integer_int8"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestIntegerInt8ArrayOperation
													r.summary = ""
													r.operationID = "test_request_integer_int8_array"
													r.pathPattern = "/test_request_integer_int8_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestRequestIntegerInt8ArrayArrayOperation
														r.summary = ""
														r.operationID = "test_request_integer_int8_array_array"
														r.pathPattern = "/test_request_integer_int8_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestIntegerInt8NullableOperation
													r.summary = ""
													r.operationID = "test_request_integer_int8_nullable"
													r.pathPattern = "/test_request_integer_int8_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestIntegerInt8NullableArrayOperation
														r.summary = ""
														r.operationID = "test_request_integer_int8_nullable_array"
														r.pathPattern = "/test_request_integer_int8_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestIntegerInt8NullableArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_integer_int8_nullable_array_array"
															r.pathPattern = "/test_request_integer_int8_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											}

										}

									}

								}

							case 'n': // Prefix: "nullable"

								if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = TestRequestIntegerNullableOperation
										r.summary = ""
										r.operationID = "test_request_integer_nullable"
										r.pathPattern = "/test_request_integer_nullable"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '_': // Prefix: "_array"

									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestRequestIntegerNullableArrayOperation
											r.summary = ""
											r.operationID = "test_request_integer_nullable_array"
											r.pathPattern = "/test_request_integer_nullable_array"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_array"

										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "POST":
												r.name = TestRequestIntegerNullableArrayArrayOperation
												r.summary = ""
												r.operationID = "test_request_integer_nullable_array_array"
												r.pathPattern = "/test_request_integer_nullable_array_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}

									}

								}

							case 'u': // Prefix: "u"

								if l := len("u"); len(elem) >= l && elem[0:l] == "u" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'i': // Prefix: "int"

									if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestRequestIntegerUintOperation
											r.summary = ""
											r.operationID = "test_request_integer_uint"
											r.pathPattern = "/test_request_integer_uint"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '1': // Prefix: "16"

										if l := len("16"); len(elem) >= l && elem[0:l] == "16" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestIntegerUint16Operation
												r.summary = ""
												r.operationID = "test_request_integer_uint16"
												r.pathPattern = "/test_request_integer_uint16"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestIntegerUint16ArrayOperation
														r.summary = ""
														r.operationID = "test_request_integer_uint16_array"
														r.pathPattern = "/test_request_integer_uint16_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestIntegerUint16ArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_integer_uint16_array_array"
															r.pathPattern = "/test_request_integer_uint16_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestIntegerUint16NullableOperation
														r.summary = ""
														r.operationID = "test_request_integer_uint16_nullable"
														r.pathPattern = "/test_request_integer_uint16_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestIntegerUint16NullableArrayOperation
															r.summary = ""
															r.operationID = "test_request_integer_uint16_nullable_array"
															r.pathPattern = "/test_request_integer_uint16_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestIntegerUint16NullableArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_integer_uint16_nullable_array_array"
																r.pathPattern = "/test_request_integer_uint16_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												}

											}

										}

									case '3': // Prefix: "32"

										if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestIntegerUint32Operation
												r.summary = ""
												r.operationID = "test_request_integer_uint32"
												r.pathPattern = "/test_request_integer_uint32"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestIntegerUint32ArrayOperation
														r.summary = ""
														r.operationID = "test_request_integer_uint32_array"
														r.pathPattern = "/test_request_integer_uint32_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestIntegerUint32ArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_integer_uint32_array_array"
															r.pathPattern = "/test_request_integer_uint32_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestIntegerUint32NullableOperation
														r.summary = ""
														r.operationID = "test_request_integer_uint32_nullable"
														r.pathPattern = "/test_request_integer_uint32_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestIntegerUint32NullableArrayOperation
															r.summary = ""
															r.operationID = "test_request_integer_uint32_nullable_array"
															r.pathPattern = "/test_request_integer_uint32_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestIntegerUint32NullableArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_integer_uint32_nullable_array_array"
																r.pathPattern = "/test_request_integer_uint32_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												}

											}

										}

									case '6': // Prefix: "64"

										if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestIntegerUint64Operation
												r.summary = ""
												r.operationID = "test_request_integer_uint64"
												r.pathPattern = "/test_request_integer_uint64"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestIntegerUint64ArrayOperation
														r.summary = ""
														r.operationID = "test_request_integer_uint64_array"
														r.pathPattern = "/test_request_integer_uint64_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestIntegerUint64ArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_integer_uint64_array_array"
															r.pathPattern = "/test_request_integer_uint64_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestIntegerUint64NullableOperation
														r.summary = ""
														r.operationID = "test_request_integer_uint64_nullable"
														r.pathPattern = "/test_request_integer_uint64_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestIntegerUint64NullableArrayOperation
															r.summary = ""
															r.operationID = "test_request_integer_uint64_nullable_array"
															r.pathPattern = "/test_request_integer_uint64_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestIntegerUint64NullableArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_integer_uint64_nullable_array_array"
																r.pathPattern = "/test_request_integer_uint64_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												}

											}

										}

									case '8': // Prefix: "8"

										if l := len("8"); len(elem) >= l && elem[0:l] == "8" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestIntegerUint8Operation
												r.summary = ""
												r.operationID = "test_request_integer_uint8"
												r.pathPattern = "/test_request_integer_uint8"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestIntegerUint8ArrayOperation
														r.summary = ""
														r.operationID = "test_request_integer_uint8_array"
														r.pathPattern = "/test_request_integer_uint8_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestIntegerUint8ArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_integer_uint8_array_array"
															r.pathPattern = "/test_request_integer_uint8_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestIntegerUint8NullableOperation
														r.summary = ""
														r.operationID = "test_request_integer_uint8_nullable"
														r.pathPattern = "/test_request_integer_uint8_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestIntegerUint8NullableArrayOperation
															r.summary = ""
															r.operationID = "test_request_integer_uint8_nullable_array"
															r.pathPattern = "/test_request_integer_uint8_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestIntegerUint8NullableArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_integer_uint8_nullable_array_array"
																r.pathPattern = "/test_request_integer_uint8_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												}

											}

										}

									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestIntegerUintArrayOperation
													r.summary = ""
													r.operationID = "test_request_integer_uint_array"
													r.pathPattern = "/test_request_integer_uint_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestRequestIntegerUintArrayArrayOperation
														r.summary = ""
														r.operationID = "test_request_integer_uint_array_array"
														r.pathPattern = "/test_request_integer_uint_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestIntegerUintNullableOperation
													r.summary = ""
													r.operationID = "test_request_integer_uint_nullable"
													r.pathPattern = "/test_request_integer_uint_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestIntegerUintNullableArrayOperation
														r.summary = ""
														r.operationID = "test_request_integer_uint_nullable_array"
														r.pathPattern = "/test_request_integer_uint_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestIntegerUintNullableArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_integer_uint_nullable_array_array"
															r.pathPattern = "/test_request_integer_uint_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											}

										}

									}

								case 'n': // Prefix: "nix"

									if l := len("nix"); len(elem) >= l && elem[0:l] == "nix" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestRequestIntegerUnixOperation
											r.summary = ""
											r.operationID = "test_request_integer_unix"
											r.pathPattern = "/test_request_integer_unix"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '-': // Prefix: "-"

										if l := len("-"); len(elem) >= l && elem[0:l] == "-" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'm': // Prefix: "mi"

											if l := len("mi"); len(elem) >= l && elem[0:l] == "mi" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'c': // Prefix: "cro"

												if l := len("cro"); len(elem) >= l && elem[0:l] == "cro" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestIntegerUnixMicroOperation
														r.summary = ""
														r.operationID = "test_request_integer_unix-micro"
														r.pathPattern = "/test_request_integer_unix-micro"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_"

													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"

														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestRequestIntegerUnixMicroArrayOperation
																r.summary = ""
																r.operationID = "test_request_integer_unix-micro_array"
																r.pathPattern = "/test_request_integer_unix-micro_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch method {
																case "POST":
																	r.name = TestRequestIntegerUnixMicroArrayArrayOperation
																	r.summary = ""
																	r.operationID = "test_request_integer_unix-micro_array_array"
																	r.pathPattern = "/test_request_integer_unix-micro_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}

														}

													case 'n': // Prefix: "nullable"

														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestRequestIntegerUnixMicroNullableOperation
																r.summary = ""
																r.operationID = "test_request_integer_unix-micro_nullable"
																r.pathPattern = "/test_request_integer_unix-micro_nullable"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	r.name = TestRequestIntegerUnixMicroNullableArrayOperation
																	r.summary = ""
																	r.operationID = "test_request_integer_unix-micro_nullable_array"
																	r.pathPattern = "/test_request_integer_unix-micro_nullable_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
															switch elem[0] {
															case '_': // Prefix: "_array"

																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch method {
																	case "POST":
																		r.name = TestRequestIntegerUnixMicroNullableArrayArrayOperation
																		r.summary = ""
																		r.operationID = "test_request_integer_unix-micro_nullable_array_array"
																		r.pathPattern = "/test_request_integer_unix-micro_nullable_array_array"
																		r.args = args
																		r.count = 0
																		return r, true
																	default:
																		return
																	}
																}

															}

														}

													}

												}

											case 'l': // Prefix: "lli"

												if l := len("lli"); len(elem) >= l && elem[0:l] == "lli" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestIntegerUnixMilliOperation
														r.summary = ""
														r.operationID = "test_request_integer_unix-milli"
														r.pathPattern = "/test_request_integer_unix-milli"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_"

													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"

														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestRequestIntegerUnixMilliArrayOperation
																r.summary = ""
																r.operationID = "test_request_integer_unix-milli_array"
																r.pathPattern = "/test_request_integer_unix-milli_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch method {
																case "POST":
																	r.name = TestRequestIntegerUnixMilliArrayArrayOperation
																	r.summary = ""
																	r.operationID = "test_request_integer_unix-milli_array_array"
																	r.pathPattern = "/test_request_integer_unix-milli_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}

														}

													case 'n': // Prefix: "nullable"

														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestRequestIntegerUnixMilliNullableOperation
																r.summary = ""
																r.operationID = "test_request_integer_unix-milli_nullable"
																r.pathPattern = "/test_request_integer_unix-milli_nullable"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	r.name = TestRequestIntegerUnixMilliNullableArrayOperation
																	r.summary = ""
																	r.operationID = "test_request_integer_unix-milli_nullable_array"
																	r.pathPattern = "/test_request_integer_unix-milli_nullable_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
															switch elem[0] {
															case '_': // Prefix: "_array"

																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch method {
																	case "POST":
																		r.name = TestRequestIntegerUnixMilliNullableArrayArrayOperation
																		r.summary = ""
																		r.operationID = "test_request_integer_unix-milli_nullable_array_array"
																		r.pathPattern = "/test_request_integer_unix-milli_nullable_array_array"
																		r.args = args
																		r.count = 0
																		return r, true
																	default:
																		return
																	}
																}

															}

														}

													}

												}

											}

										case 'n': // Prefix: "nano"

											if l := len("nano"); len(elem) >= l && elem[0:l] == "nano" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestIntegerUnixNanoOperation
													r.summary = ""
													r.operationID = "test_request_integer_unix-nano"
													r.pathPattern = "/test_request_integer_unix-nano"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestIntegerUnixNanoArrayOperation
															r.summary = ""
															r.operationID = "test_request_integer_unix-nano_array"
															r.pathPattern = "/test_request_integer_unix-nano_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestIntegerUnixNanoArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_integer_unix-nano_array_array"
																r.pathPattern = "/test_request_integer_unix-nano_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestIntegerUnixNanoNullableOperation
															r.summary = ""
															r.operationID = "test_request_integer_unix-nano_nullable"
															r.pathPattern = "/test_request_integer_unix-nano_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestRequestIntegerUnixNanoNullableArrayOperation
																r.summary = ""
																r.operationID = "test_request_integer_unix-nano_nullable_array"
																r.pathPattern = "/test_request_integer_unix-nano_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch method {
																case "POST":
																	r.name = TestRequestIntegerUnixNanoNullableArrayArrayOperation
																	r.summary = ""
																	r.operationID = "test_request_integer_unix-nano_nullable_array_array"
																	r.pathPattern = "/test_request_integer_unix-nano_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}

														}

													}

												}

											}

										case 's': // Prefix: "seconds"

											if l := len("seconds"); len(elem) >= l && elem[0:l] == "seconds" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestIntegerUnixSecondsOperation
													r.summary = ""
													r.operationID = "test_request_integer_unix-seconds"
													r.pathPattern = "/test_request_integer_unix-seconds"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestIntegerUnixSecondsArrayOperation
															r.summary = ""
															r.operationID = "test_request_integer_unix-seconds_array"
															r.pathPattern = "/test_request_integer_unix-seconds_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestIntegerUnixSecondsArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_integer_unix-seconds_array_array"
																r.pathPattern = "/test_request_integer_unix-seconds_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestIntegerUnixSecondsNullableOperation
															r.summary = ""
															r.operationID = "test_request_integer_unix-seconds_nullable"
															r.pathPattern = "/test_request_integer_unix-seconds_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestRequestIntegerUnixSecondsNullableArrayOperation
																r.summary = ""
																r.operationID = "test_request_integer_unix-seconds_nullable_array"
																r.pathPattern = "/test_request_integer_unix-seconds_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch method {
																case "POST":
																	r.name = TestRequestIntegerUnixSecondsNullableArrayArrayOperation
																	r.summary = ""
																	r.operationID = "test_request_integer_unix-seconds_nullable_array_array"
																	r.pathPattern = "/test_request_integer_unix-seconds_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}

														}

													}

												}

											}

										}

									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestIntegerUnixArrayOperation
													r.summary = ""
													r.operationID = "test_request_integer_unix_array"
													r.pathPattern = "/test_request_integer_unix_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestRequestIntegerUnixArrayArrayOperation
														r.summary = ""
														r.operationID = "test_request_integer_unix_array_array"
														r.pathPattern = "/test_request_integer_unix_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestIntegerUnixNullableOperation
													r.summary = ""
													r.operationID = "test_request_integer_unix_nullable"
													r.pathPattern = "/test_request_integer_unix_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestIntegerUnixNullableArrayOperation
														r.summary = ""
														r.operationID = "test_request_integer_unix_nullable_array"
														r.pathPattern = "/test_request_integer_unix_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestIntegerUnixNullableArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_integer_unix_nullable_array_array"
															r.pathPattern = "/test_request_integer_unix_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											}

										}

									}

								}

							}

						}

					case 'n': // Prefix: "nu"

						if l := len("nu"); len(elem) >= l && elem[0:l] == "nu" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'l': // Prefix: "ll"

							if l := len("ll"); len(elem) >= l && elem[0:l] == "ll" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									r.name = TestRequestNullOperation
									r.summary = ""
									r.operationID = "test_request_null"
									r.pathPattern = "/test_request_null"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '_': // Prefix: "_"

								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "array"

									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestRequestNullArrayOperation
											r.summary = ""
											r.operationID = "test_request_null_array"
											r.pathPattern = "/test_request_null_array"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_array"

										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "POST":
												r.name = TestRequestNullArrayArrayOperation
												r.summary = ""
												r.operationID = "test_request_null_array_array"
												r.pathPattern = "/test_request_null_array_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}

									}

								case 'n': // Prefix: "nullable"

									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestRequestNullNullableOperation
											r.summary = ""
											r.operationID = "test_request_null_nullable"
											r.pathPattern = "/test_request_null_nullable"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_array"

										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestNullNullableArrayOperation
												r.summary = ""
												r.operationID = "test_request_null_nullable_array"
												r.pathPattern = "/test_request_null_nullable_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch method {
												case "POST":
													r.name = TestRequestNullNullableArrayArrayOperation
													r.summary = ""
													r.operationID = "test_request_null_nullable_array_array"
													r.pathPattern = "/test_request_null_nullable_array_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}

										}

									}

								}

							}

						case 'm': // Prefix: "mber"

							if l := len("mber"); len(elem) >= l && elem[0:l] == "mber" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									r.name = TestRequestNumberOperation
									r.summary = ""
									r.operationID = "test_request_number"
									r.pathPattern = "/test_request_number"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '_': // Prefix: "_"

								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "array"

									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestRequestNumberArrayOperation
											r.summary = ""
											r.operationID = "test_request_number_array"
											r.pathPattern = "/test_request_number_array"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_array"

										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "POST":
												r.name = TestRequestNumberArrayArrayOperation
												r.summary = ""
												r.operationID = "test_request_number_array_array"
												r.pathPattern = "/test_request_number_array_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}

									}

								case 'd': // Prefix: "double"

									if l := len("double"); len(elem) >= l && elem[0:l] == "double" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestRequestNumberDoubleOperation
											r.summary = ""
											r.operationID = "test_request_number_double"
											r.pathPattern = "/test_request_number_double"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestNumberDoubleArrayOperation
													r.summary = ""
													r.operationID = "test_request_number_double_array"
													r.pathPattern = "/test_request_number_double_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestRequestNumberDoubleArrayArrayOperation
														r.summary = ""
														r.operationID = "test_request_number_double_array_array"
														r.pathPattern = "/test_request_number_double_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestNumberDoubleNullableOperation
													r.summary = ""
													r.operationID = "test_request_number_double_nullable"
													r.pathPattern = "/test_request_number_double_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestNumberDoubleNullableArrayOperation
														r.summary = ""
														r.operationID = "test_request_number_double_nullable_array"
														r.pathPattern = "/test_request_number_double_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestNumberDoubleNullableArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_number_double_nullable_array_array"
															r.pathPattern = "/test_request_number_double_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											}

										}

									}

								case 'f': // Prefix: "float"

									if l := len("float"); len(elem) >= l && elem[0:l] == "float" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestRequestNumberFloatOperation
											r.summary = ""
											r.operationID = "test_request_number_float"
											r.pathPattern = "/test_request_number_float"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestNumberFloatArrayOperation
													r.summary = ""
													r.operationID = "test_request_number_float_array"
													r.pathPattern = "/test_request_number_float_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestRequestNumberFloatArrayArrayOperation
														r.summary = ""
														r.operationID = "test_request_number_float_array_array"
														r.pathPattern = "/test_request_number_float_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestNumberFloatNullableOperation
													r.summary = ""
													r.operationID = "test_request_number_float_nullable"
													r.pathPattern = "/test_request_number_float_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestNumberFloatNullableArrayOperation
														r.summary = ""
														r.operationID = "test_request_number_float_nullable_array"
														r.pathPattern = "/test_request_number_float_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestNumberFloatNullableArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_number_float_nullable_array_array"
															r.pathPattern = "/test_request_number_float_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											}

										}

									}

								case 'i': // Prefix: "int"

									if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '3': // Prefix: "32"

										if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestNumberInt32Operation
												r.summary = ""
												r.operationID = "test_request_number_int32"
												r.pathPattern = "/test_request_number_int32"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestNumberInt32ArrayOperation
														r.summary = ""
														r.operationID = "test_request_number_int32_array"
														r.pathPattern = "/test_request_number_int32_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestNumberInt32ArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_number_int32_array_array"
															r.pathPattern = "/test_request_number_int32_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestNumberInt32NullableOperation
														r.summary = ""
														r.operationID = "test_request_number_int32_nullable"
														r.pathPattern = "/test_request_number_int32_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestNumberInt32NullableArrayOperation
															r.summary = ""
															r.operationID = "test_request_number_int32_nullable_array"
															r.pathPattern = "/test_request_number_int32_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestNumberInt32NullableArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_number_int32_nullable_array_array"
																r.pathPattern = "/test_request_number_int32_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												}

											}

										}

									case '6': // Prefix: "64"

										if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestNumberInt64Operation
												r.summary = ""
												r.operationID = "test_request_number_int64"
												r.pathPattern = "/test_request_number_int64"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestNumberInt64ArrayOperation
														r.summary = ""
														r.operationID = "test_request_number_int64_array"
														r.pathPattern = "/test_request_number_int64_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestNumberInt64ArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_number_int64_array_array"
															r.pathPattern = "/test_request_number_int64_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestNumberInt64NullableOperation
														r.summary = ""
														r.operationID = "test_request_number_int64_nullable"
														r.pathPattern = "/test_request_number_int64_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestNumberInt64NullableArrayOperation
															r.summary = ""
															r.operationID = "test_request_number_int64_nullable_array"
															r.pathPattern = "/test_request_number_int64_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestNumberInt64NullableArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_number_int64_nullable_array_array"
																r.pathPattern = "/test_request_number_int64_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												}

											}

										}

									}

								case 'n': // Prefix: "nullable"

									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestRequestNumberNullableOperation
											r.summary = ""
											r.operationID = "test_request_number_nullable"
											r.pathPattern = "/test_request_number_nullable"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_array"

										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestNumberNullableArrayOperation
												r.summary = ""
												r.operationID = "test_request_number_nullable_array"
												r.pathPattern = "/test_request_number_nullable_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch method {
												case "POST":
													r.name = TestRequestNumberNullableArrayArrayOperation
													r.summary = ""
													r.operationID = "test_request_number_nullable_array_array"
													r.pathPattern = "/test_request_number_nullable_array_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}

										}

									}

								}

							}

						}

					case 'r': // Prefix: "required_"

						if l := len("required_"); len(elem) >= l && elem[0:l] == "required_" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'A': // Prefix: "Any"

							if l := len("Any"); len(elem) >= l && elem[0:l] == "Any" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = TestRequestRequiredAnyOperation
									r.summary = ""
									r.operationID = "test_request_required_Any"
									r.pathPattern = "/test_request_required_Any"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						case 'E': // Prefix: "EmptyStruct"

							if l := len("EmptyStruct"); len(elem) >= l && elem[0:l] == "EmptyStruct" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = TestRequestRequiredEmptyStructOperation
									r.summary = ""
									r.operationID = "test_request_required_EmptyStruct"
									r.pathPattern = "/test_request_required_EmptyStruct"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						case 'F': // Prefix: "FormatTest"

							if l := len("FormatTest"); len(elem) >= l && elem[0:l] == "FormatTest" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = TestRequestRequiredFormatTestOperation
									r.summary = ""
									r.operationID = "test_request_required_FormatTest"
									r.pathPattern = "/test_request_required_FormatTest"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						case 'b': // Prefix: "boolean"

							if l := len("boolean"); len(elem) >= l && elem[0:l] == "boolean" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									r.name = TestRequestRequiredBooleanOperation
									r.summary = ""
									r.operationID = "test_request_required_boolean"
									r.pathPattern = "/test_request_required_boolean"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '_': // Prefix: "_"

								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "array"

									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestRequestRequiredBooleanArrayOperation
											r.summary = ""
											r.operationID = "test_request_required_boolean_array"
											r.pathPattern = "/test_request_required_boolean_array"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_array"

										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "POST":
												r.name = TestRequestRequiredBooleanArrayArrayOperation
												r.summary = ""
												r.operationID = "test_request_required_boolean_array_array"
												r.pathPattern = "/test_request_required_boolean_array_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}

									}

								case 'n': // Prefix: "nullable"

									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestRequestRequiredBooleanNullableOperation
											r.summary = ""
											r.operationID = "test_request_required_boolean_nullable"
											r.pathPattern = "/test_request_required_boolean_nullable"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_array"

										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestRequiredBooleanNullableArrayOperation
												r.summary = ""
												r.operationID = "test_request_required_boolean_nullable_array"
												r.pathPattern = "/test_request_required_boolean_nullable_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch method {
												case "POST":
													r.name = TestRequestRequiredBooleanNullableArrayArrayOperation
													r.summary = ""
													r.operationID = "test_request_required_boolean_nullable_array_array"
													r.pathPattern = "/test_request_required_boolean_nullable_array_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}

										}

									}

								}

							}

						case 'i': // Prefix: "integer"

							if l := len("integer"); len(elem) >= l && elem[0:l] == "integer" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									r.name = TestRequestRequiredIntegerOperation
									r.summary = ""
									r.operationID = "test_request_required_integer"
									r.pathPattern = "/test_request_required_integer"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '_': // Prefix: "_"

								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "array"

									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestRequestRequiredIntegerArrayOperation
											r.summary = ""
											r.operationID = "test_request_required_integer_array"
											r.pathPattern = "/test_request_required_integer_array"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_array"

										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "POST":
												r.name = TestRequestRequiredIntegerArrayArrayOperation
												r.summary = ""
												r.operationID = "test_request_required_integer_array_array"
												r.pathPattern = "/test_request_required_integer_array_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}

									}

								case 'i': // Prefix: "int"

									if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '1': // Prefix: "16"

										if l := len("16"); len(elem) >= l && elem[0:l] == "16" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestRequiredIntegerInt16Operation
												r.summary = ""
												r.operationID = "test_request_required_integer_int16"
												r.pathPattern = "/test_request_required_integer_int16"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredIntegerInt16ArrayOperation
														r.summary = ""
														r.operationID = "test_request_required_integer_int16_array"
														r.pathPattern = "/test_request_required_integer_int16_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestRequiredIntegerInt16ArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_integer_int16_array_array"
															r.pathPattern = "/test_request_required_integer_int16_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredIntegerInt16NullableOperation
														r.summary = ""
														r.operationID = "test_request_required_integer_int16_nullable"
														r.pathPattern = "/test_request_required_integer_int16_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredIntegerInt16NullableArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_integer_int16_nullable_array"
															r.pathPattern = "/test_request_required_integer_int16_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestRequiredIntegerInt16NullableArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_integer_int16_nullable_array_array"
																r.pathPattern = "/test_request_required_integer_int16_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												}

											}

										}

									case '3': // Prefix: "32"

										if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestRequiredIntegerInt32Operation
												r.summary = ""
												r.operationID = "test_request_required_integer_int32"
												r.pathPattern = "/test_request_required_integer_int32"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredIntegerInt32ArrayOperation
														r.summary = ""
														r.operationID = "test_request_required_integer_int32_array"
														r.pathPattern = "/test_request_required_integer_int32_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestRequiredIntegerInt32ArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_integer_int32_array_array"
															r.pathPattern = "/test_request_required_integer_int32_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredIntegerInt32NullableOperation
														r.summary = ""
														r.operationID = "test_request_required_integer_int32_nullable"
														r.pathPattern = "/test_request_required_integer_int32_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredIntegerInt32NullableArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_integer_int32_nullable_array"
															r.pathPattern = "/test_request_required_integer_int32_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestRequiredIntegerInt32NullableArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_integer_int32_nullable_array_array"
																r.pathPattern = "/test_request_required_integer_int32_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												}

											}

										}

									case '6': // Prefix: "64"

										if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestRequiredIntegerInt64Operation
												r.summary = ""
												r.operationID = "test_request_required_integer_int64"
												r.pathPattern = "/test_request_required_integer_int64"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredIntegerInt64ArrayOperation
														r.summary = ""
														r.operationID = "test_request_required_integer_int64_array"
														r.pathPattern = "/test_request_required_integer_int64_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestRequiredIntegerInt64ArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_integer_int64_array_array"
															r.pathPattern = "/test_request_required_integer_int64_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredIntegerInt64NullableOperation
														r.summary = ""
														r.operationID = "test_request_required_integer_int64_nullable"
														r.pathPattern = "/test_request_required_integer_int64_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredIntegerInt64NullableArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_integer_int64_nullable_array"
															r.pathPattern = "/test_request_required_integer_int64_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestRequiredIntegerInt64NullableArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_integer_int64_nullable_array_array"
																r.pathPattern = "/test_request_required_integer_int64_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												}

											}

										}

									case '8': // Prefix: "8"

										if l := len("8"); len(elem) >= l && elem[0:l] == "8" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestRequiredIntegerInt8Operation
												r.summary = ""
												r.operationID = "test_request_required_integer_int8"
												r.pathPattern = "/test_request_required_integer_int8"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredIntegerInt8ArrayOperation
														r.summary = ""
														r.operationID = "test_request_required_integer_int8_array"
														r.pathPattern = "/test_request_required_integer_int8_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestRequiredIntegerInt8ArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_integer_int8_array_array"
															r.pathPattern = "/test_request_required_integer_int8_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredIntegerInt8NullableOperation
														r.summary = ""
														r.operationID = "test_request_required_integer_int8_nullable"
														r.pathPattern = "/test_request_required_integer_int8_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredIntegerInt8NullableArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_integer_int8_nullable_array"
															r.pathPattern = "/test_request_required_integer_int8_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestRequiredIntegerInt8NullableArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_integer_int8_nullable_array_array"
																r.pathPattern = "/test_request_required_integer_int8_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												}

											}

										}

									}

								case 'n': // Prefix: "nullable"

									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestRequestRequiredIntegerNullableOperation
											r.summary = ""
											r.operationID = "test_request_required_integer_nullable"
											r.pathPattern = "/test_request_required_integer_nullable"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_array"

										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestRequiredIntegerNullableArrayOperation
												r.summary = ""
												r.operationID = "test_request_required_integer_nullable_array"
												r.pathPattern = "/test_request_required_integer_nullable_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch method {
												case "POST":
													r.name = TestRequestRequiredIntegerNullableArrayArrayOperation
													r.summary = ""
													r.operationID = "test_request_required_integer_nullable_array_array"
													r.pathPattern = "/test_request_required_integer_nullable_array_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}

										}

									}

								case 'u': // Prefix: "u"

									if l := len("u"); len(elem) >= l && elem[0:l] == "u" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'i': // Prefix: "int"

										if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestRequiredIntegerUintOperation
												r.summary = ""
												r.operationID = "test_request_required_integer_uint"
												r.pathPattern = "/test_request_required_integer_uint"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '1': // Prefix: "16"

											if l := len("16"); len(elem) >= l && elem[0:l] == "16" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestRequiredIntegerUint16Operation
													r.summary = ""
													r.operationID = "test_request_required_integer_uint16"
													r.pathPattern = "/test_request_required_integer_uint16"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredIntegerUint16ArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_integer_uint16_array"
															r.pathPattern = "/test_request_required_integer_uint16_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestRequiredIntegerUint16ArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_integer_uint16_array_array"
																r.pathPattern = "/test_request_required_integer_uint16_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredIntegerUint16NullableOperation
															r.summary = ""
															r.operationID = "test_request_required_integer_uint16_nullable"
															r.pathPattern = "/test_request_required_integer_uint16_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestRequestRequiredIntegerUint16NullableArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_integer_uint16_nullable_array"
																r.pathPattern = "/test_request_required_integer_uint16_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch method {
																case "POST":
																	r.name = TestRequestRequiredIntegerUint16NullableArrayArrayOperation
																	r.summary = ""
																	r.operationID = "test_request_required_integer_uint16_nullable_array_array"
																	r.pathPattern = "/test_request_required_integer_uint16_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}

														}

													}

												}

											}

										case '3': // Prefix: "32"

											if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestRequiredIntegerUint32Operation
													r.summary = ""
													r.operationID = "test_request_required_integer_uint32"
													r.pathPattern = "/test_request_required_integer_uint32"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredIntegerUint32ArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_integer_uint32_array"
															r.pathPattern = "/test_request_required_integer_uint32_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestRequiredIntegerUint32ArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_integer_uint32_array_array"
																r.pathPattern = "/test_request_required_integer_uint32_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredIntegerUint32NullableOperation
															r.summary = ""
															r.operationID = "test_request_required_integer_uint32_nullable"
															r.pathPattern = "/test_request_required_integer_uint32_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestRequestRequiredIntegerUint32NullableArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_integer_uint32_nullable_array"
																r.pathPattern = "/test_request_required_integer_uint32_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch method {
																case "POST":
																	r.name = TestRequestRequiredIntegerUint32NullableArrayArrayOperation
																	r.summary = ""
																	r.operationID = "test_request_required_integer_uint32_nullable_array_array"
																	r.pathPattern = "/test_request_required_integer_uint32_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}

														}

													}

												}

											}

										case '6': // Prefix: "64"

											if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestRequiredIntegerUint64Operation
													r.summary = ""
													r.operationID = "test_request_required_integer_uint64"
													r.pathPattern = "/test_request_required_integer_uint64"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredIntegerUint64ArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_integer_uint64_array"
															r.pathPattern = "/test_request_required_integer_uint64_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestRequiredIntegerUint64ArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_integer_uint64_array_array"
																r.pathPattern = "/test_request_required_integer_uint64_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredIntegerUint64NullableOperation
															r.summary = ""
															r.operationID = "test_request_required_integer_uint64_nullable"
															r.pathPattern = "/test_request_required_integer_uint64_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestRequestRequiredIntegerUint64NullableArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_integer_uint64_nullable_array"
																r.pathPattern = "/test_request_required_integer_uint64_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch method {
																case "POST":
																	r.name = TestRequestRequiredIntegerUint64NullableArrayArrayOperation
																	r.summary = ""
																	r.operationID = "test_request_required_integer_uint64_nullable_array_array"
																	r.pathPattern = "/test_request_required_integer_uint64_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}

														}

													}

												}

											}

										case '8': // Prefix: "8"

											if l := len("8"); len(elem) >= l && elem[0:l] == "8" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestRequiredIntegerUint8Operation
													r.summary = ""
													r.operationID = "test_request_required_integer_uint8"
													r.pathPattern = "/test_request_required_integer_uint8"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredIntegerUint8ArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_integer_uint8_array"
															r.pathPattern = "/test_request_required_integer_uint8_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestRequiredIntegerUint8ArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_integer_uint8_array_array"
																r.pathPattern = "/test_request_required_integer_uint8_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredIntegerUint8NullableOperation
															r.summary = ""
															r.operationID = "test_request_required_integer_uint8_nullable"
															r.pathPattern = "/test_request_required_integer_uint8_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestRequestRequiredIntegerUint8NullableArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_integer_uint8_nullable_array"
																r.pathPattern = "/test_request_required_integer_uint8_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch method {
																case "POST":
																	r.name = TestRequestRequiredIntegerUint8NullableArrayArrayOperation
																	r.summary = ""
																	r.operationID = "test_request_required_integer_uint8_nullable_array_array"
																	r.pathPattern = "/test_request_required_integer_uint8_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}

														}

													}

												}

											}

										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredIntegerUintArrayOperation
														r.summary = ""
														r.operationID = "test_request_required_integer_uint_array"
														r.pathPattern = "/test_request_required_integer_uint_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestRequiredIntegerUintArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_integer_uint_array_array"
															r.pathPattern = "/test_request_required_integer_uint_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredIntegerUintNullableOperation
														r.summary = ""
														r.operationID = "test_request_required_integer_uint_nullable"
														r.pathPattern = "/test_request_required_integer_uint_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredIntegerUintNullableArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_integer_uint_nullable_array"
															r.pathPattern = "/test_request_required_integer_uint_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestRequiredIntegerUintNullableArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_integer_uint_nullable_array_array"
																r.pathPattern = "/test_request_required_integer_uint_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												}

											}

										}

									case 'n': // Prefix: "nix"

										if l := len("nix"); len(elem) >= l && elem[0:l] == "nix" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestRequiredIntegerUnixOperation
												r.summary = ""
												r.operationID = "test_request_required_integer_unix"
												r.pathPattern = "/test_request_required_integer_unix"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '-': // Prefix: "-"

											if l := len("-"); len(elem) >= l && elem[0:l] == "-" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'm': // Prefix: "mi"

												if l := len("mi"); len(elem) >= l && elem[0:l] == "mi" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'c': // Prefix: "cro"

													if l := len("cro"); len(elem) >= l && elem[0:l] == "cro" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredIntegerUnixMicroOperation
															r.summary = ""
															r.operationID = "test_request_required_integer_unix-micro"
															r.pathPattern = "/test_request_required_integer_unix-micro"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_"

														if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															break
														}
														switch elem[0] {
														case 'a': // Prefix: "array"

															if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	r.name = TestRequestRequiredIntegerUnixMicroArrayOperation
																	r.summary = ""
																	r.operationID = "test_request_required_integer_unix-micro_array"
																	r.pathPattern = "/test_request_required_integer_unix-micro_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
															switch elem[0] {
															case '_': // Prefix: "_array"

																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch method {
																	case "POST":
																		r.name = TestRequestRequiredIntegerUnixMicroArrayArrayOperation
																		r.summary = ""
																		r.operationID = "test_request_required_integer_unix-micro_array_array"
																		r.pathPattern = "/test_request_required_integer_unix-micro_array_array"
																		r.args = args
																		r.count = 0
																		return r, true
																	default:
																		return
																	}
																}

															}

														case 'n': // Prefix: "nullable"

															if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	r.name = TestRequestRequiredIntegerUnixMicroNullableOperation
																	r.summary = ""
																	r.operationID = "test_request_required_integer_unix-micro_nullable"
																	r.pathPattern = "/test_request_required_integer_unix-micro_nullable"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
															switch elem[0] {
															case '_': // Prefix: "_array"

																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	switch method {
																	case "POST":
																		r.name = TestRequestRequiredIntegerUnixMicroNullableArrayOperation
																		r.summary = ""
																		r.operationID = "test_request_required_integer_unix-micro_nullable_array"
																		r.pathPattern = "/test_request_required_integer_unix-micro_nullable_array"
																		r.args = args
																		r.count = 0
																		return r, true
																	default:
																		return
																	}
																}
																switch elem[0] {
																case '_': // Prefix: "_array"

																	if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																		elem = elem[l:]
																	} else {
																		break
																	}

																	if len(elem) == 0 {
																		// Leaf node.
																		switch method {
																		case "POST":
																			r.name = TestRequestRequiredIntegerUnixMicroNullableArrayArrayOperation
																			r.summary = ""
																			r.operationID = "test_request_required_integer_unix-micro_nullable_array_array"
																			r.pathPattern = "/test_request_required_integer_unix-micro_nullable_array_array"
																			r.args = args
																			r.count = 0
																			return r, true
																		default:
																			return
																		}
																	}

																}

															}

														}

													}

												case 'l': // Prefix: "lli"

													if l := len("lli"); len(elem) >= l && elem[0:l] == "lli" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredIntegerUnixMilliOperation
															r.summary = ""
															r.operationID = "test_request_required_integer_unix-milli"
															r.pathPattern = "/test_request_required_integer_unix-milli"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_"

														if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															break
														}
														switch elem[0] {
														case 'a': // Prefix: "array"

															if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	r.name = TestRequestRequiredIntegerUnixMilliArrayOperation
																	r.summary = ""
																	r.operationID = "test_request_required_integer_unix-milli_array"
																	r.pathPattern = "/test_request_required_integer_unix-milli_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
															switch elem[0] {
															case '_': // Prefix: "_array"

																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch method {
																	case "POST":
																		r.name = TestRequestRequiredIntegerUnixMilliArrayArrayOperation
																		r.summary = ""
																		r.operationID = "test_request_required_integer_unix-milli_array_array"
																		r.pathPattern = "/test_request_required_integer_unix-milli_array_array"
																		r.args = args
																		r.count = 0
																		return r, true
																	default:
																		return
																	}
																}

															}

														case 'n': // Prefix: "nullable"

															if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	r.name = TestRequestRequiredIntegerUnixMilliNullableOperation
																	r.summary = ""
																	r.operationID = "test_request_required_integer_unix-milli_nullable"
																	r.pathPattern = "/test_request_required_integer_unix-milli_nullable"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
															switch elem[0] {
															case '_': // Prefix: "_array"

																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	switch method {
																	case "POST":
																		r.name = TestRequestRequiredIntegerUnixMilliNullableArrayOperation
																		r.summary = ""
																		r.operationID = "test_request_required_integer_unix-milli_nullable_array"
																		r.pathPattern = "/test_request_required_integer_unix-milli_nullable_array"
																		r.args = args
																		r.count = 0
																		return r, true
																	default:
																		return
																	}
																}
																switch elem[0] {
																case '_': // Prefix: "_array"

																	if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																		elem = elem[l:]
																	} else {
																		break
																	}

																	if len(elem) == 0 {
																		// Leaf node.
																		switch method {
																		case "POST":
																			r.name = TestRequestRequiredIntegerUnixMilliNullableArrayArrayOperation
																			r.summary = ""
																			r.operationID = "test_request_required_integer_unix-milli_nullable_array_array"
																			r.pathPattern = "/test_request_required_integer_unix-milli_nullable_array_array"
																			r.args = args
																			r.count = 0
																			return r, true
																		default:
																			return
																		}
																	}

																}

															}

														}

													}

												}

											case 'n': // Prefix: "nano"

												if l := len("nano"); len(elem) >= l && elem[0:l] == "nano" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredIntegerUnixNanoOperation
														r.summary = ""
														r.operationID = "test_request_required_integer_unix-nano"
														r.pathPattern = "/test_request_required_integer_unix-nano"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_"

													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"

														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestRequestRequiredIntegerUnixNanoArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_integer_unix-nano_array"
																r.pathPattern = "/test_request_required_integer_unix-nano_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch method {
																case "POST":
																	r.name = TestRequestRequiredIntegerUnixNanoArrayArrayOperation
																	r.summary = ""
																	r.operationID = "test_request_required_integer_unix-nano_array_array"
																	r.pathPattern = "/test_request_required_integer_unix-nano_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}

														}

													case 'n': // Prefix: "nullable"

														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestRequestRequiredIntegerUnixNanoNullableOperation
																r.summary = ""
																r.operationID = "test_request_required_integer_unix-nano_nullable"
																r.pathPattern = "/test_request_required_integer_unix-nano_nullable"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	r.name = TestRequestRequiredIntegerUnixNanoNullableArrayOperation
																	r.summary = ""
																	r.operationID = "test_request_required_integer_unix-nano_nullable_array"
																	r.pathPattern = "/test_request_required_integer_unix-nano_nullable_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
															switch elem[0] {
															case '_': // Prefix: "_array"

																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch method {
																	case "POST":
																		r.name = TestRequestRequiredIntegerUnixNanoNullableArrayArrayOperation
																		r.summary = ""
																		r.operationID = "test_request_required_integer_unix-nano_nullable_array_array"
																		r.pathPattern = "/test_request_required_integer_unix-nano_nullable_array_array"
																		r.args = args
																		r.count = 0
																		return r, true
																	default:
																		return
																	}
																}

															}

														}

													}

												}

											case 's': // Prefix: "seconds"

												if l := len("seconds"); len(elem) >= l && elem[0:l] == "seconds" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredIntegerUnixSecondsOperation
														r.summary = ""
														r.operationID = "test_request_required_integer_unix-seconds"
														r.pathPattern = "/test_request_required_integer_unix-seconds"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_"

													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"

														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestRequestRequiredIntegerUnixSecondsArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_integer_unix-seconds_array"
																r.pathPattern = "/test_request_required_integer_unix-seconds_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch method {
																case "POST":
																	r.name = TestRequestRequiredIntegerUnixSecondsArrayArrayOperation
																	r.summary = ""
																	r.operationID = "test_request_required_integer_unix-seconds_array_array"
																	r.pathPattern = "/test_request_required_integer_unix-seconds_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}

														}

													case 'n': // Prefix: "nullable"

														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestRequestRequiredIntegerUnixSecondsNullableOperation
																r.summary = ""
																r.operationID = "test_request_required_integer_unix-seconds_nullable"
																r.pathPattern = "/test_request_required_integer_unix-seconds_nullable"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	r.name = TestRequestRequiredIntegerUnixSecondsNullableArrayOperation
																	r.summary = ""
																	r.operationID = "test_request_required_integer_unix-seconds_nullable_array"
																	r.pathPattern = "/test_request_required_integer_unix-seconds_nullable_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
															switch elem[0] {
															case '_': // Prefix: "_array"

																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch method {
																	case "POST":
																		r.name = TestRequestRequiredIntegerUnixSecondsNullableArrayArrayOperation
																		r.summary = ""
																		r.operationID = "test_request_required_integer_unix-seconds_nullable_array_array"
																		r.pathPattern = "/test_request_required_integer_unix-seconds_nullable_array_array"
																		r.args = args
																		r.count = 0
																		return r, true
																	default:
																		return
																	}
																}

															}

														}

													}

												}

											}

										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredIntegerUnixArrayOperation
														r.summary = ""
														r.operationID = "test_request_required_integer_unix_array"
														r.pathPattern = "/test_request_required_integer_unix_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestRequiredIntegerUnixArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_integer_unix_array_array"
															r.pathPattern = "/test_request_required_integer_unix_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredIntegerUnixNullableOperation
														r.summary = ""
														r.operationID = "test_request_required_integer_unix_nullable"
														r.pathPattern = "/test_request_required_integer_unix_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredIntegerUnixNullableArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_integer_unix_nullable_array"
															r.pathPattern = "/test_request_required_integer_unix_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestRequiredIntegerUnixNullableArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_integer_unix_nullable_array_array"
																r.pathPattern = "/test_request_required_integer_unix_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												}

											}

										}

									}

								}

							}

						case 'n': // Prefix: "nu"

							if l := len("nu"); len(elem) >= l && elem[0:l] == "nu" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'l': // Prefix: "ll"

								if l := len("ll"); len(elem) >= l && elem[0:l] == "ll" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = TestRequestRequiredNullOperation
										r.summary = ""
										r.operationID = "test_request_required_null"
										r.pathPattern = "/test_request_required_null"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '_': // Prefix: "_"

									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "array"

										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestRequiredNullArrayOperation
												r.summary = ""
												r.operationID = "test_request_required_null_array"
												r.pathPattern = "/test_request_required_null_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch method {
												case "POST":
													r.name = TestRequestRequiredNullArrayArrayOperation
													r.summary = ""
													r.operationID = "test_request_required_null_array_array"
													r.pathPattern = "/test_request_required_null_array_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}

										}

									case 'n': // Prefix: "nullable"

										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestRequiredNullNullableOperation
												r.summary = ""
												r.operationID = "test_request_required_null_nullable"
												r.pathPattern = "/test_request_required_null_nullable"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestRequiredNullNullableArrayOperation
													r.summary = ""
													r.operationID = "test_request_required_null_nullable_array"
													r.pathPattern = "/test_request_required_null_nullable_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestRequestRequiredNullNullableArrayArrayOperation
														r.summary = ""
														r.operationID = "test_request_required_null_nullable_array_array"
														r.pathPattern = "/test_request_required_null_nullable_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										}

									}

								}

							case 'm': // Prefix: "mber"

								if l := len("mber"); len(elem) >= l && elem[0:l] == "mber" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = TestRequestRequiredNumberOperation
										r.summary = ""
										r.operationID = "test_request_required_number"
										r.pathPattern = "/test_request_required_number"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '_': // Prefix: "_"

									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "array"

										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestRequiredNumberArrayOperation
												r.summary = ""
												r.operationID = "test_request_required_number_array"
												r.pathPattern = "/test_request_required_number_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch method {
												case "POST":
													r.name = TestRequestRequiredNumberArrayArrayOperation
													r.summary = ""
													r.operationID = "test_request_required_number_array_array"
													r.pathPattern = "/test_request_required_number_array_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}

										}

									case 'd': // Prefix: "double"

										if l := len("double"); len(elem) >= l && elem[0:l] == "double" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestRequiredNumberDoubleOperation
												r.summary = ""
												r.operationID = "test_request_required_number_double"
												r.pathPattern = "/test_request_required_number_double"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredNumberDoubleArrayOperation
														r.summary = ""
														r.operationID = "test_request_required_number_double_array"
														r.pathPattern = "/test_request_required_number_double_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestRequiredNumberDoubleArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_number_double_array_array"
															r.pathPattern = "/test_request_required_number_double_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredNumberDoubleNullableOperation
														r.summary = ""
														r.operationID = "test_request_required_number_double_nullable"
														r.pathPattern = "/test_request_required_number_double_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredNumberDoubleNullableArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_number_double_nullable_array"
															r.pathPattern = "/test_request_required_number_double_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestRequiredNumberDoubleNullableArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_number_double_nullable_array_array"
																r.pathPattern = "/test_request_required_number_double_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												}

											}

										}

									case 'f': // Prefix: "float"

										if l := len("float"); len(elem) >= l && elem[0:l] == "float" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestRequiredNumberFloatOperation
												r.summary = ""
												r.operationID = "test_request_required_number_float"
												r.pathPattern = "/test_request_required_number_float"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredNumberFloatArrayOperation
														r.summary = ""
														r.operationID = "test_request_required_number_float_array"
														r.pathPattern = "/test_request_required_number_float_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestRequiredNumberFloatArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_number_float_array_array"
															r.pathPattern = "/test_request_required_number_float_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredNumberFloatNullableOperation
														r.summary = ""
														r.operationID = "test_request_required_number_float_nullable"
														r.pathPattern = "/test_request_required_number_float_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredNumberFloatNullableArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_number_float_nullable_array"
															r.pathPattern = "/test_request_required_number_float_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestRequiredNumberFloatNullableArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_number_float_nullable_array_array"
																r.pathPattern = "/test_request_required_number_float_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												}

											}

										}

									case 'i': // Prefix: "int"

										if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '3': // Prefix: "32"

											if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestRequiredNumberInt32Operation
													r.summary = ""
													r.operationID = "test_request_required_number_int32"
													r.pathPattern = "/test_request_required_number_int32"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredNumberInt32ArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_number_int32_array"
															r.pathPattern = "/test_request_required_number_int32_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestRequiredNumberInt32ArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_number_int32_array_array"
																r.pathPattern = "/test_request_required_number_int32_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredNumberInt32NullableOperation
															r.summary = ""
															r.operationID = "test_request_required_number_int32_nullable"
															r.pathPattern = "/test_request_required_number_int32_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestRequestRequiredNumberInt32NullableArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_number_int32_nullable_array"
																r.pathPattern = "/test_request_required_number_int32_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch method {
																case "POST":
																	r.name = TestRequestRequiredNumberInt32NullableArrayArrayOperation
																	r.summary = ""
																	r.operationID = "test_request_required_number_int32_nullable_array_array"
																	r.pathPattern = "/test_request_required_number_int32_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}

														}

													}

												}

											}

										case '6': // Prefix: "64"

											if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestRequiredNumberInt64Operation
													r.summary = ""
													r.operationID = "test_request_required_number_int64"
													r.pathPattern = "/test_request_required_number_int64"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredNumberInt64ArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_number_int64_array"
															r.pathPattern = "/test_request_required_number_int64_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestRequiredNumberInt64ArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_number_int64_array_array"
																r.pathPattern = "/test_request_required_number_int64_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredNumberInt64NullableOperation
															r.summary = ""
															r.operationID = "test_request_required_number_int64_nullable"
															r.pathPattern = "/test_request_required_number_int64_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestRequestRequiredNumberInt64NullableArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_number_int64_nullable_array"
																r.pathPattern = "/test_request_required_number_int64_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch method {
																case "POST":
																	r.name = TestRequestRequiredNumberInt64NullableArrayArrayOperation
																	r.summary = ""
																	r.operationID = "test_request_required_number_int64_nullable_array_array"
																	r.pathPattern = "/test_request_required_number_int64_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}

														}

													}

												}

											}

										}

									case 'n': // Prefix: "nullable"

										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestRequiredNumberNullableOperation
												r.summary = ""
												r.operationID = "test_request_required_number_nullable"
												r.pathPattern = "/test_request_required_number_nullable"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestRequiredNumberNullableArrayOperation
													r.summary = ""
													r.operationID = "test_request_required_number_nullable_array"
													r.pathPattern = "/test_request_required_number_nullable_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestRequestRequiredNumberNullableArrayArrayOperation
														r.summary = ""
														r.operationID = "test_request_required_number_nullable_array_array"
														r.pathPattern = "/test_request_required_number_nullable_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										}

									}

								}

							}

						case 's': // Prefix: "string"

							if l := len("string"); len(elem) >= l && elem[0:l] == "string" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									r.name = TestRequestRequiredStringOperation
									r.summary = ""
									r.operationID = "test_request_required_string"
									r.pathPattern = "/test_request_required_string"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '_': // Prefix: "_"

								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "array"

									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestRequestRequiredStringArrayOperation
											r.summary = ""
											r.operationID = "test_request_required_string_array"
											r.pathPattern = "/test_request_required_string_array"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_array"

										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "POST":
												r.name = TestRequestRequiredStringArrayArrayOperation
												r.summary = ""
												r.operationID = "test_request_required_string_array_array"
												r.pathPattern = "/test_request_required_string_array_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}

									}

								case 'b': // Prefix: "b"

									if l := len("b"); len(elem) >= l && elem[0:l] == "b" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "ase64"

										if l := len("ase64"); len(elem) >= l && elem[0:l] == "ase64" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestRequiredStringBase64Operation
												r.summary = ""
												r.operationID = "test_request_required_string_base64"
												r.pathPattern = "/test_request_required_string_base64"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredStringBase64ArrayOperation
														r.summary = ""
														r.operationID = "test_request_required_string_base64_array"
														r.pathPattern = "/test_request_required_string_base64_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestRequiredStringBase64ArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_string_base64_array_array"
															r.pathPattern = "/test_request_required_string_base64_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredStringBase64NullableOperation
														r.summary = ""
														r.operationID = "test_request_required_string_base64_nullable"
														r.pathPattern = "/test_request_required_string_base64_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredStringBase64NullableArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_string_base64_nullable_array"
															r.pathPattern = "/test_request_required_string_base64_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestRequiredStringBase64NullableArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_string_base64_nullable_array_array"
																r.pathPattern = "/test_request_required_string_base64_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												}

											}

										}

									case 'i': // Prefix: "inary"

										if l := len("inary"); len(elem) >= l && elem[0:l] == "inary" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestRequiredStringBinaryOperation
												r.summary = ""
												r.operationID = "test_request_required_string_binary"
												r.pathPattern = "/test_request_required_string_binary"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredStringBinaryArrayOperation
														r.summary = ""
														r.operationID = "test_request_required_string_binary_array"
														r.pathPattern = "/test_request_required_string_binary_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestRequiredStringBinaryArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_string_binary_array_array"
															r.pathPattern = "/test_request_required_string_binary_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredStringBinaryNullableOperation
														r.summary = ""
														r.operationID = "test_request_required_string_binary_nullable"
														r.pathPattern = "/test_request_required_string_binary_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredStringBinaryNullableArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_string_binary_nullable_array"
															r.pathPattern = "/test_request_required_string_binary_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestRequiredStringBinaryNullableArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_string_binary_nullable_array_array"
																r.pathPattern = "/test_request_required_string_binary_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												}

											}

										}

									case 'y': // Prefix: "yte"

										if l := len("yte"); len(elem) >= l && elem[0:l] == "yte" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestRequiredStringByteOperation
												r.summary = ""
												r.operationID = "test_request_required_string_byte"
												r.pathPattern = "/test_request_required_string_byte"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredStringByteArrayOperation
														r.summary = ""
														r.operationID = "test_request_required_string_byte_array"
														r.pathPattern = "/test_request_required_string_byte_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestRequiredStringByteArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_string_byte_array_array"
															r.pathPattern = "/test_request_required_string_byte_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredStringByteNullableOperation
														r.summary = ""
														r.operationID = "test_request_required_string_byte_nullable"
														r.pathPattern = "/test_request_required_string_byte_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredStringByteNullableArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_string_byte_nullable_array"
															r.pathPattern = "/test_request_required_string_byte_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestRequiredStringByteNullableArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_string_byte_nullable_array_array"
																r.pathPattern = "/test_request_required_string_byte_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												}

											}

										}

									}

								case 'd': // Prefix: "d"

									if l := len("d"); len(elem) >= l && elem[0:l] == "d" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "ate"

										if l := len("ate"); len(elem) >= l && elem[0:l] == "ate" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestRequiredStringDateOperation
												r.summary = ""
												r.operationID = "test_request_required_string_date"
												r.pathPattern = "/test_request_required_string_date"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '-': // Prefix: "-time"

											if l := len("-time"); len(elem) >= l && elem[0:l] == "-time" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestRequiredStringDateTimeOperation
													r.summary = ""
													r.operationID = "test_request_required_string_date-time"
													r.pathPattern = "/test_request_required_string_date-time"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredStringDateTimeArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_string_date-time_array"
															r.pathPattern = "/test_request_required_string_date-time_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestRequiredStringDateTimeArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_string_date-time_array_array"
																r.pathPattern = "/test_request_required_string_date-time_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredStringDateTimeNullableOperation
															r.summary = ""
															r.operationID = "test_request_required_string_date-time_nullable"
															r.pathPattern = "/test_request_required_string_date-time_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestRequestRequiredStringDateTimeNullableArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_string_date-time_nullable_array"
																r.pathPattern = "/test_request_required_string_date-time_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch method {
																case "POST":
																	r.name = TestRequestRequiredStringDateTimeNullableArrayArrayOperation
																	r.summary = ""
																	r.operationID = "test_request_required_string_date-time_nullable_array_array"
																	r.pathPattern = "/test_request_required_string_date-time_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}

														}

													}

												}

											}

										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredStringDateArrayOperation
														r.summary = ""
														r.operationID = "test_request_required_string_date_array"
														r.pathPattern = "/test_request_required_string_date_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestRequiredStringDateArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_string_date_array_array"
															r.pathPattern = "/test_request_required_string_date_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredStringDateNullableOperation
														r.summary = ""
														r.operationID = "test_request_required_string_date_nullable"
														r.pathPattern = "/test_request_required_string_date_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredStringDateNullableArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_string_date_nullable_array"
															r.pathPattern = "/test_request_required_string_date_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestRequiredStringDateNullableArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_string_date_nullable_array_array"
																r.pathPattern = "/test_request_required_string_date_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												}

											}

										}

									case 'u': // Prefix: "uration"

										if l := len("uration"); len(elem) >= l && elem[0:l] == "uration" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestRequiredStringDurationOperation
												r.summary = ""
												r.operationID = "test_request_required_string_duration"
												r.pathPattern = "/test_request_required_string_duration"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredStringDurationArrayOperation
														r.summary = ""
														r.operationID = "test_request_required_string_duration_array"
														r.pathPattern = "/test_request_required_string_duration_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestRequiredStringDurationArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_string_duration_array_array"
															r.pathPattern = "/test_request_required_string_duration_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredStringDurationNullableOperation
														r.summary = ""
														r.operationID = "test_request_required_string_duration_nullable"
														r.pathPattern = "/test_request_required_string_duration_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredStringDurationNullableArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_string_duration_nullable_array"
															r.pathPattern = "/test_request_required_string_duration_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestRequiredStringDurationNullableArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_string_duration_nullable_array_array"
																r.pathPattern = "/test_request_required_string_duration_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												}

											}

										}

									}

								case 'e': // Prefix: "email"

									if l := len("email"); len(elem) >= l && elem[0:l] == "email" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestRequestRequiredStringEmailOperation
											r.summary = ""
											r.operationID = "test_request_required_string_email"
											r.pathPattern = "/test_request_required_string_email"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestRequiredStringEmailArrayOperation
													r.summary = ""
													r.operationID = "test_request_required_string_email_array"
													r.pathPattern = "/test_request_required_string_email_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestRequestRequiredStringEmailArrayArrayOperation
														r.summary = ""
														r.operationID = "test_request_required_string_email_array_array"
														r.pathPattern = "/test_request_required_string_email_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestRequiredStringEmailNullableOperation
													r.summary = ""
													r.operationID = "test_request_required_string_email_nullable"
													r.pathPattern = "/test_request_required_string_email_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredStringEmailNullableArrayOperation
														r.summary = ""
														r.operationID = "test_request_required_string_email_nullable_array"
														r.pathPattern = "/test_request_required_string_email_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestRequiredStringEmailNullableArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_string_email_nullable_array_array"
															r.pathPattern = "/test_request_required_string_email_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											}

										}

									}

								case 'f': // Prefix: "float"

									if l := len("float"); len(elem) >= l && elem[0:l] == "float" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '3': // Prefix: "32"

										if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestRequiredStringFloat32Operation
												r.summary = ""
												r.operationID = "test_request_required_string_float32"
												r.pathPattern = "/test_request_required_string_float32"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredStringFloat32ArrayOperation
														r.summary = ""
														r.operationID = "test_request_required_string_float32_array"
														r.pathPattern = "/test_request_required_string_float32_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestRequiredStringFloat32ArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_string_float32_array_array"
															r.pathPattern = "/test_request_required_string_float32_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredStringFloat32NullableOperation
														r.summary = ""
														r.operationID = "test_request_required_string_float32_nullable"
														r.pathPattern = "/test_request_required_string_float32_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredStringFloat32NullableArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_string_float32_nullable_array"
															r.pathPattern = "/test_request_required_string_float32_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestRequiredStringFloat32NullableArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_string_float32_nullable_array_array"
																r.pathPattern = "/test_request_required_string_float32_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												}

											}

										}

									case '6': // Prefix: "64"

										if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestRequiredStringFloat64Operation
												r.summary = ""
												r.operationID = "test_request_required_string_float64"
												r.pathPattern = "/test_request_required_string_float64"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredStringFloat64ArrayOperation
														r.summary = ""
														r.operationID = "test_request_required_string_float64_array"
														r.pathPattern = "/test_request_required_string_float64_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestRequiredStringFloat64ArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_string_float64_array_array"
															r.pathPattern = "/test_request_required_string_float64_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredStringFloat64NullableOperation
														r.summary = ""
														r.operationID = "test_request_required_string_float64_nullable"
														r.pathPattern = "/test_request_required_string_float64_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredStringFloat64NullableArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_string_float64_nullable_array"
															r.pathPattern = "/test_request_required_string_float64_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestRequiredStringFloat64NullableArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_string_float64_nullable_array_array"
																r.pathPattern = "/test_request_required_string_float64_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												}

											}

										}

									}

								case 'h': // Prefix: "hostname"

									if l := len("hostname"); len(elem) >= l && elem[0:l] == "hostname" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestRequestRequiredStringHostnameOperation
											r.summary = ""
											r.operationID = "test_request_required_string_hostname"
											r.pathPattern = "/test_request_required_string_hostname"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestRequiredStringHostnameArrayOperation
													r.summary = ""
													r.operationID = "test_request_required_string_hostname_array"
													r.pathPattern = "/test_request_required_string_hostname_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestRequestRequiredStringHostnameArrayArrayOperation
														r.summary = ""
														r.operationID = "test_request_required_string_hostname_array_array"
														r.pathPattern = "/test_request_required_string_hostname_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestRequiredStringHostnameNullableOperation
													r.summary = ""
													r.operationID = "test_request_required_string_hostname_nullable"
													r.pathPattern = "/test_request_required_string_hostname_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredStringHostnameNullableArrayOperation
														r.summary = ""
														r.operationID = "test_request_required_string_hostname_nullable_array"
														r.pathPattern = "/test_request_required_string_hostname_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestRequiredStringHostnameNullableArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_string_hostname_nullable_array_array"
															r.pathPattern = "/test_request_required_string_hostname_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											}

										}

									}

								case 'i': // Prefix: "i"

									if l := len("i"); len(elem) >= l && elem[0:l] == "i" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'n': // Prefix: "nt"

										if l := len("nt"); len(elem) >= l && elem[0:l] == "nt" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestRequiredStringIntOperation
												r.summary = ""
												r.operationID = "test_request_required_string_int"
												r.pathPattern = "/test_request_required_string_int"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '1': // Prefix: "16"

											if l := len("16"); len(elem) >= l && elem[0:l] == "16" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestRequiredStringInt16Operation
													r.summary = ""
													r.operationID = "test_request_required_string_int16"
													r.pathPattern = "/test_request_required_string_int16"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredStringInt16ArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_string_int16_array"
															r.pathPattern = "/test_request_required_string_int16_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestRequiredStringInt16ArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_string_int16_array_array"
																r.pathPattern = "/test_request_required_string_int16_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredStringInt16NullableOperation
															r.summary = ""
															r.operationID = "test_request_required_string_int16_nullable"
															r.pathPattern = "/test_request_required_string_int16_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestRequestRequiredStringInt16NullableArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_string_int16_nullable_array"
																r.pathPattern = "/test_request_required_string_int16_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch method {
																case "POST":
																	r.name = TestRequestRequiredStringInt16NullableArrayArrayOperation
																	r.summary = ""
																	r.operationID = "test_request_required_string_int16_nullable_array_array"
																	r.pathPattern = "/test_request_required_string_int16_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}

														}

													}

												}

											}

										case '3': // Prefix: "32"

											if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestRequiredStringInt32Operation
													r.summary = ""
													r.operationID = "test_request_required_string_int32"
													r.pathPattern = "/test_request_required_string_int32"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredStringInt32ArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_string_int32_array"
															r.pathPattern = "/test_request_required_string_int32_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestRequiredStringInt32ArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_string_int32_array_array"
																r.pathPattern = "/test_request_required_string_int32_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredStringInt32NullableOperation
															r.summary = ""
															r.operationID = "test_request_required_string_int32_nullable"
															r.pathPattern = "/test_request_required_string_int32_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestRequestRequiredStringInt32NullableArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_string_int32_nullable_array"
																r.pathPattern = "/test_request_required_string_int32_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch method {
																case "POST":
																	r.name = TestRequestRequiredStringInt32NullableArrayArrayOperation
																	r.summary = ""
																	r.operationID = "test_request_required_string_int32_nullable_array_array"
																	r.pathPattern = "/test_request_required_string_int32_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}

														}

													}

												}

											}

										case '6': // Prefix: "64"

											if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestRequiredStringInt64Operation
													r.summary = ""
													r.operationID = "test_request_required_string_int64"
													r.pathPattern = "/test_request_required_string_int64"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredStringInt64ArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_string_int64_array"
															r.pathPattern = "/test_request_required_string_int64_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestRequiredStringInt64ArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_string_int64_array_array"
																r.pathPattern = "/test_request_required_string_int64_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredStringInt64NullableOperation
															r.summary = ""
															r.operationID = "test_request_required_string_int64_nullable"
															r.pathPattern = "/test_request_required_string_int64_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestRequestRequiredStringInt64NullableArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_string_int64_nullable_array"
																r.pathPattern = "/test_request_required_string_int64_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch method {
																case "POST":
																	r.name = TestRequestRequiredStringInt64NullableArrayArrayOperation
																	r.summary = ""
																	r.operationID = "test_request_required_string_int64_nullable_array_array"
																	r.pathPattern = "/test_request_required_string_int64_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}

														}

													}

												}

											}

										case '8': // Prefix: "8"

											if l := len("8"); len(elem) >= l && elem[0:l] == "8" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestRequiredStringInt8Operation
													r.summary = ""
													r.operationID = "test_request_required_string_int8"
													r.pathPattern = "/test_request_required_string_int8"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredStringInt8ArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_string_int8_array"
															r.pathPattern = "/test_request_required_string_int8_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestRequiredStringInt8ArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_string_int8_array_array"
																r.pathPattern = "/test_request_required_string_int8_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredStringInt8NullableOperation
															r.summary = ""
															r.operationID = "test_request_required_string_int8_nullable"
															r.pathPattern = "/test_request_required_string_int8_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestRequestRequiredStringInt8NullableArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_string_int8_nullable_array"
																r.pathPattern = "/test_request_required_string_int8_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch method {
																case "POST":
																	r.name = TestRequestRequiredStringInt8NullableArrayArrayOperation
																	r.summary = ""
																	r.operationID = "test_request_required_string_int8_nullable_array_array"
																	r.pathPattern = "/test_request_required_string_int8_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}

														}

													}

												}

											}

										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredStringIntArrayOperation
														r.summary = ""
														r.operationID = "test_request_required_string_int_array"
														r.pathPattern = "/test_request_required_string_int_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestRequiredStringIntArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_string_int_array_array"
															r.pathPattern = "/test_request_required_string_int_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredStringIntNullableOperation
														r.summary = ""
														r.operationID = "test_request_required_string_int_nullable"
														r.pathPattern = "/test_request_required_string_int_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredStringIntNullableArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_string_int_nullable_array"
															r.pathPattern = "/test_request_required_string_int_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestRequiredStringIntNullableArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_string_int_nullable_array_array"
																r.pathPattern = "/test_request_required_string_int_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												}

											}

										}

									case 'p': // Prefix: "p"

										if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestRequiredStringIPOperation
												r.summary = ""
												r.operationID = "test_request_required_string_ip"
												r.pathPattern = "/test_request_required_string_ip"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredStringIPArrayOperation
														r.summary = ""
														r.operationID = "test_request_required_string_ip_array"
														r.pathPattern = "/test_request_required_string_ip_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestRequiredStringIPArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_string_ip_array_array"
															r.pathPattern = "/test_request_required_string_ip_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredStringIPNullableOperation
														r.summary = ""
														r.operationID = "test_request_required_string_ip_nullable"
														r.pathPattern = "/test_request_required_string_ip_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredStringIPNullableArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_string_ip_nullable_array"
															r.pathPattern = "/test_request_required_string_ip_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestRequiredStringIPNullableArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_string_ip_nullable_array_array"
																r.pathPattern = "/test_request_required_string_ip_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												}

											}

										case 'v': // Prefix: "v"

											if l := len("v"); len(elem) >= l && elem[0:l] == "v" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case '4': // Prefix: "4"

												if l := len("4"); len(elem) >= l && elem[0:l] == "4" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredStringIpv4Operation
														r.summary = ""
														r.operationID = "test_request_required_string_ipv4"
														r.pathPattern = "/test_request_required_string_ipv4"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_"

													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"

														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestRequestRequiredStringIpv4ArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_string_ipv4_array"
																r.pathPattern = "/test_request_required_string_ipv4_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch method {
																case "POST":
																	r.name = TestRequestRequiredStringIpv4ArrayArrayOperation
																	r.summary = ""
																	r.operationID = "test_request_required_string_ipv4_array_array"
																	r.pathPattern = "/test_request_required_string_ipv4_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}

														}

													case 'n': // Prefix: "nullable"

														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestRequestRequiredStringIpv4NullableOperation
																r.summary = ""
																r.operationID = "test_request_required_string_ipv4_nullable"
																r.pathPattern = "/test_request_required_string_ipv4_nullable"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	r.name = TestRequestRequiredStringIpv4NullableArrayOperation
																	r.summary = ""
																	r.operationID = "test_request_required_string_ipv4_nullable_array"
																	r.pathPattern = "/test_request_required_string_ipv4_nullable_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
															switch elem[0] {
															case '_': // Prefix: "_array"

																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch method {
																	case "POST":
																		r.name = TestRequestRequiredStringIpv4NullableArrayArrayOperation
																		r.summary = ""
																		r.operationID = "test_request_required_string_ipv4_nullable_array_array"
																		r.pathPattern = "/test_request_required_string_ipv4_nullable_array_array"
																		r.args = args
																		r.count = 0
																		return r, true
																	default:
																		return
																	}
																}

															}

														}

													}

												}

											case '6': // Prefix: "6"

												if l := len("6"); len(elem) >= l && elem[0:l] == "6" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredStringIpv6Operation
														r.summary = ""
														r.operationID = "test_request_required_string_ipv6"
														r.pathPattern = "/test_request_required_string_ipv6"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_"

													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"

														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestRequestRequiredStringIpv6ArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_string_ipv6_array"
																r.pathPattern = "/test_request_required_string_ipv6_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch method {
																case "POST":
																	r.name = TestRequestRequiredStringIpv6ArrayArrayOperation
																	r.summary = ""
																	r.operationID = "test_request_required_string_ipv6_array_array"
																	r.pathPattern = "/test_request_required_string_ipv6_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}

														}

													case 'n': // Prefix: "nullable"

														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestRequestRequiredStringIpv6NullableOperation
																r.summary = ""
																r.operationID = "test_request_required_string_ipv6_nullable"
																r.pathPattern = "/test_request_required_string_ipv6_nullable"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	r.name = TestRequestRequiredStringIpv6NullableArrayOperation
																	r.summary = ""
																	r.operationID = "test_request_required_string_ipv6_nullable_array"
																	r.pathPattern = "/test_request_required_string_ipv6_nullable_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
															switch elem[0] {
															case '_': // Prefix: "_array"

																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch method {
																	case "POST":
																		r.name = TestRequestRequiredStringIpv6NullableArrayArrayOperation
																		r.summary = ""
																		r.operationID = "test_request_required_string_ipv6_nullable_array_array"
																		r.pathPattern = "/test_request_required_string_ipv6_nullable_array_array"
																		r.args = args
																		r.count = 0
																		return r, true
																	default:
																		return
																	}
																}

															}

														}

													}

												}

											}

										}

									}

								case 'm': // Prefix: "mac"

									if l := len("mac"); len(elem) >= l && elem[0:l] == "mac" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestRequestRequiredStringMACOperation
											r.summary = ""
											r.operationID = "test_request_required_string_mac"
											r.pathPattern = "/test_request_required_string_mac"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestRequiredStringMACArrayOperation
													r.summary = ""
													r.operationID = "test_request_required_string_mac_array"
													r.pathPattern = "/test_request_required_string_mac_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestRequestRequiredStringMACArrayArrayOperation
														r.summary = ""
														r.operationID = "test_request_required_string_mac_array_array"
														r.pathPattern = "/test_request_required_string_mac_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestRequiredStringMACNullableOperation
													r.summary = ""
													r.operationID = "test_request_required_string_mac_nullable"
													r.pathPattern = "/test_request_required_string_mac_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredStringMACNullableArrayOperation
														r.summary = ""
														r.operationID = "test_request_required_string_mac_nullable_array"
														r.pathPattern = "/test_request_required_string_mac_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestRequiredStringMACNullableArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_string_mac_nullable_array_array"
															r.pathPattern = "/test_request_required_string_mac_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											}

										}

									}

								case 'n': // Prefix: "nullable"

									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestRequestRequiredStringNullableOperation
											r.summary = ""
											r.operationID = "test_request_required_string_nullable"
											r.pathPattern = "/test_request_required_string_nullable"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_array"

										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestRequiredStringNullableArrayOperation
												r.summary = ""
												r.operationID = "test_request_required_string_nullable_array"
												r.pathPattern = "/test_request_required_string_nullable_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch method {
												case "POST":
													r.name = TestRequestRequiredStringNullableArrayArrayOperation
													r.summary = ""
													r.operationID = "test_request_required_string_nullable_array_array"
													r.pathPattern = "/test_request_required_string_nullable_array_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}

										}

									}

								case 'p': // Prefix: "password"

									if l := len("password"); len(elem) >= l && elem[0:l] == "password" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestRequestRequiredStringPasswordOperation
											r.summary = ""
											r.operationID = "test_request_required_string_password"
											r.pathPattern = "/test_request_required_string_password"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestRequiredStringPasswordArrayOperation
													r.summary = ""
													r.operationID = "test_request_required_string_password_array"
													r.pathPattern = "/test_request_required_string_password_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestRequestRequiredStringPasswordArrayArrayOperation
														r.summary = ""
														r.operationID = "test_request_required_string_password_array_array"
														r.pathPattern = "/test_request_required_string_password_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestRequiredStringPasswordNullableOperation
													r.summary = ""
													r.operationID = "test_request_required_string_password_nullable"
													r.pathPattern = "/test_request_required_string_password_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredStringPasswordNullableArrayOperation
														r.summary = ""
														r.operationID = "test_request_required_string_password_nullable_array"
														r.pathPattern = "/test_request_required_string_password_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestRequiredStringPasswordNullableArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_string_password_nullable_array_array"
															r.pathPattern = "/test_request_required_string_password_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											}

										}

									}

								case 't': // Prefix: "time"

									if l := len("time"); len(elem) >= l && elem[0:l] == "time" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestRequestRequiredStringTimeOperation
											r.summary = ""
											r.operationID = "test_request_required_string_time"
											r.pathPattern = "/test_request_required_string_time"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestRequiredStringTimeArrayOperation
													r.summary = ""
													r.operationID = "test_request_required_string_time_array"
													r.pathPattern = "/test_request_required_string_time_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestRequestRequiredStringTimeArrayArrayOperation
														r.summary = ""
														r.operationID = "test_request_required_string_time_array_array"
														r.pathPattern = "/test_request_required_string_time_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestRequiredStringTimeNullableOperation
													r.summary = ""
													r.operationID = "test_request_required_string_time_nullable"
													r.pathPattern = "/test_request_required_string_time_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredStringTimeNullableArrayOperation
														r.summary = ""
														r.operationID = "test_request_required_string_time_nullable_array"
														r.pathPattern = "/test_request_required_string_time_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestRequiredStringTimeNullableArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_string_time_nullable_array_array"
															r.pathPattern = "/test_request_required_string_time_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											}

										}

									}

								case 'u': // Prefix: "u"

									if l := len("u"); len(elem) >= l && elem[0:l] == "u" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'i': // Prefix: "int"

										if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestRequiredStringUintOperation
												r.summary = ""
												r.operationID = "test_request_required_string_uint"
												r.pathPattern = "/test_request_required_string_uint"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '1': // Prefix: "16"

											if l := len("16"); len(elem) >= l && elem[0:l] == "16" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestRequiredStringUint16Operation
													r.summary = ""
													r.operationID = "test_request_required_string_uint16"
													r.pathPattern = "/test_request_required_string_uint16"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredStringUint16ArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_string_uint16_array"
															r.pathPattern = "/test_request_required_string_uint16_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestRequiredStringUint16ArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_string_uint16_array_array"
																r.pathPattern = "/test_request_required_string_uint16_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredStringUint16NullableOperation
															r.summary = ""
															r.operationID = "test_request_required_string_uint16_nullable"
															r.pathPattern = "/test_request_required_string_uint16_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestRequestRequiredStringUint16NullableArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_string_uint16_nullable_array"
																r.pathPattern = "/test_request_required_string_uint16_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch method {
																case "POST":
																	r.name = TestRequestRequiredStringUint16NullableArrayArrayOperation
																	r.summary = ""
																	r.operationID = "test_request_required_string_uint16_nullable_array_array"
																	r.pathPattern = "/test_request_required_string_uint16_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}

														}

													}

												}

											}

										case '3': // Prefix: "32"

											if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestRequiredStringUint32Operation
													r.summary = ""
													r.operationID = "test_request_required_string_uint32"
													r.pathPattern = "/test_request_required_string_uint32"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredStringUint32ArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_string_uint32_array"
															r.pathPattern = "/test_request_required_string_uint32_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestRequiredStringUint32ArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_string_uint32_array_array"
																r.pathPattern = "/test_request_required_string_uint32_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredStringUint32NullableOperation
															r.summary = ""
															r.operationID = "test_request_required_string_uint32_nullable"
															r.pathPattern = "/test_request_required_string_uint32_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestRequestRequiredStringUint32NullableArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_string_uint32_nullable_array"
																r.pathPattern = "/test_request_required_string_uint32_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch method {
																case "POST":
																	r.name = TestRequestRequiredStringUint32NullableArrayArrayOperation
																	r.summary = ""
																	r.operationID = "test_request_required_string_uint32_nullable_array_array"
																	r.pathPattern = "/test_request_required_string_uint32_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}

														}

													}

												}

											}

										case '6': // Prefix: "64"

											if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestRequiredStringUint64Operation
													r.summary = ""
													r.operationID = "test_request_required_string_uint64"
													r.pathPattern = "/test_request_required_string_uint64"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredStringUint64ArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_string_uint64_array"
															r.pathPattern = "/test_request_required_string_uint64_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestRequiredStringUint64ArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_string_uint64_array_array"
																r.pathPattern = "/test_request_required_string_uint64_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredStringUint64NullableOperation
															r.summary = ""
															r.operationID = "test_request_required_string_uint64_nullable"
															r.pathPattern = "/test_request_required_string_uint64_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestRequestRequiredStringUint64NullableArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_string_uint64_nullable_array"
																r.pathPattern = "/test_request_required_string_uint64_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch method {
																case "POST":
																	r.name = TestRequestRequiredStringUint64NullableArrayArrayOperation
																	r.summary = ""
																	r.operationID = "test_request_required_string_uint64_nullable_array_array"
																	r.pathPattern = "/test_request_required_string_uint64_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}

														}

													}

												}

											}

										case '8': // Prefix: "8"

											if l := len("8"); len(elem) >= l && elem[0:l] == "8" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestRequiredStringUint8Operation
													r.summary = ""
													r.operationID = "test_request_required_string_uint8"
													r.pathPattern = "/test_request_required_string_uint8"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredStringUint8ArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_string_uint8_array"
															r.pathPattern = "/test_request_required_string_uint8_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestRequiredStringUint8ArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_string_uint8_array_array"
																r.pathPattern = "/test_request_required_string_uint8_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredStringUint8NullableOperation
															r.summary = ""
															r.operationID = "test_request_required_string_uint8_nullable"
															r.pathPattern = "/test_request_required_string_uint8_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestRequestRequiredStringUint8NullableArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_string_uint8_nullable_array"
																r.pathPattern = "/test_request_required_string_uint8_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch method {
																case "POST":
																	r.name = TestRequestRequiredStringUint8NullableArrayArrayOperation
																	r.summary = ""
																	r.operationID = "test_request_required_string_uint8_nullable_array_array"
																	r.pathPattern = "/test_request_required_string_uint8_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}

														}

													}

												}

											}

										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredStringUintArrayOperation
														r.summary = ""
														r.operationID = "test_request_required_string_uint_array"
														r.pathPattern = "/test_request_required_string_uint_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestRequiredStringUintArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_string_uint_array_array"
															r.pathPattern = "/test_request_required_string_uint_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredStringUintNullableOperation
														r.summary = ""
														r.operationID = "test_request_required_string_uint_nullable"
														r.pathPattern = "/test_request_required_string_uint_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredStringUintNullableArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_string_uint_nullable_array"
															r.pathPattern = "/test_request_required_string_uint_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestRequiredStringUintNullableArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_string_uint_nullable_array_array"
																r.pathPattern = "/test_request_required_string_uint_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												}

											}

										}

									case 'n': // Prefix: "nix"

										if l := len("nix"); len(elem) >= l && elem[0:l] == "nix" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestRequiredStringUnixOperation
												r.summary = ""
												r.operationID = "test_request_required_string_unix"
												r.pathPattern = "/test_request_required_string_unix"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '-': // Prefix: "-"

											if l := len("-"); len(elem) >= l && elem[0:l] == "-" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'm': // Prefix: "mi"

												if l := len("mi"); len(elem) >= l && elem[0:l] == "mi" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'c': // Prefix: "cro"

													if l := len("cro"); len(elem) >= l && elem[0:l] == "cro" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredStringUnixMicroOperation
															r.summary = ""
															r.operationID = "test_request_required_string_unix-micro"
															r.pathPattern = "/test_request_required_string_unix-micro"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_"

														if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															break
														}
														switch elem[0] {
														case 'a': // Prefix: "array"

															if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	r.name = TestRequestRequiredStringUnixMicroArrayOperation
																	r.summary = ""
																	r.operationID = "test_request_required_string_unix-micro_array"
																	r.pathPattern = "/test_request_required_string_unix-micro_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
															switch elem[0] {
															case '_': // Prefix: "_array"

																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch method {
																	case "POST":
																		r.name = TestRequestRequiredStringUnixMicroArrayArrayOperation
																		r.summary = ""
																		r.operationID = "test_request_required_string_unix-micro_array_array"
																		r.pathPattern = "/test_request_required_string_unix-micro_array_array"
																		r.args = args
																		r.count = 0
																		return r, true
																	default:
																		return
																	}
																}

															}

														case 'n': // Prefix: "nullable"

															if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	r.name = TestRequestRequiredStringUnixMicroNullableOperation
																	r.summary = ""
																	r.operationID = "test_request_required_string_unix-micro_nullable"
																	r.pathPattern = "/test_request_required_string_unix-micro_nullable"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
															switch elem[0] {
															case '_': // Prefix: "_array"

																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	switch method {
																	case "POST":
																		r.name = TestRequestRequiredStringUnixMicroNullableArrayOperation
																		r.summary = ""
																		r.operationID = "test_request_required_string_unix-micro_nullable_array"
																		r.pathPattern = "/test_request_required_string_unix-micro_nullable_array"
																		r.args = args
																		r.count = 0
																		return r, true
																	default:
																		return
																	}
																}
																switch elem[0] {
																case '_': // Prefix: "_array"

																	if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																		elem = elem[l:]
																	} else {
																		break
																	}

																	if len(elem) == 0 {
																		// Leaf node.
																		switch method {
																		case "POST":
																			r.name = TestRequestRequiredStringUnixMicroNullableArrayArrayOperation
																			r.summary = ""
																			r.operationID = "test_request_required_string_unix-micro_nullable_array_array"
																			r.pathPattern = "/test_request_required_string_unix-micro_nullable_array_array"
																			r.args = args
																			r.count = 0
																			return r, true
																		default:
																			return
																		}
																	}

																}

															}

														}

													}

												case 'l': // Prefix: "lli"

													if l := len("lli"); len(elem) >= l && elem[0:l] == "lli" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredStringUnixMilliOperation
															r.summary = ""
															r.operationID = "test_request_required_string_unix-milli"
															r.pathPattern = "/test_request_required_string_unix-milli"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_"

														if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															break
														}
														switch elem[0] {
														case 'a': // Prefix: "array"

															if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	r.name = TestRequestRequiredStringUnixMilliArrayOperation
																	r.summary = ""
																	r.operationID = "test_request_required_string_unix-milli_array"
																	r.pathPattern = "/test_request_required_string_unix-milli_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
															switch elem[0] {
															case '_': // Prefix: "_array"

																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch method {
																	case "POST":
																		r.name = TestRequestRequiredStringUnixMilliArrayArrayOperation
																		r.summary = ""
																		r.operationID = "test_request_required_string_unix-milli_array_array"
																		r.pathPattern = "/test_request_required_string_unix-milli_array_array"
																		r.args = args
																		r.count = 0
																		return r, true
																	default:
																		return
																	}
																}

															}

														case 'n': // Prefix: "nullable"

															if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	r.name = TestRequestRequiredStringUnixMilliNullableOperation
																	r.summary = ""
																	r.operationID = "test_request_required_string_unix-milli_nullable"
																	r.pathPattern = "/test_request_required_string_unix-milli_nullable"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
															switch elem[0] {
															case '_': // Prefix: "_array"

																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	switch method {
																	case "POST":
																		r.name = TestRequestRequiredStringUnixMilliNullableArrayOperation
																		r.summary = ""
																		r.operationID = "test_request_required_string_unix-milli_nullable_array"
																		r.pathPattern = "/test_request_required_string_unix-milli_nullable_array"
																		r.args = args
																		r.count = 0
																		return r, true
																	default:
																		return
																	}
																}
																switch elem[0] {
																case '_': // Prefix: "_array"

																	if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																		elem = elem[l:]
																	} else {
																		break
																	}

																	if len(elem) == 0 {
																		// Leaf node.
																		switch method {
																		case "POST":
																			r.name = TestRequestRequiredStringUnixMilliNullableArrayArrayOperation
																			r.summary = ""
																			r.operationID = "test_request_required_string_unix-milli_nullable_array_array"
																			r.pathPattern = "/test_request_required_string_unix-milli_nullable_array_array"
																			r.args = args
																			r.count = 0
																			return r, true
																		default:
																			return
																		}
																	}

																}

															}

														}

													}

												}

											case 'n': // Prefix: "nano"

												if l := len("nano"); len(elem) >= l && elem[0:l] == "nano" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredStringUnixNanoOperation
														r.summary = ""
														r.operationID = "test_request_required_string_unix-nano"
														r.pathPattern = "/test_request_required_string_unix-nano"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_"

													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"

														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestRequestRequiredStringUnixNanoArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_string_unix-nano_array"
																r.pathPattern = "/test_request_required_string_unix-nano_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch method {
																case "POST":
																	r.name = TestRequestRequiredStringUnixNanoArrayArrayOperation
																	r.summary = ""
																	r.operationID = "test_request_required_string_unix-nano_array_array"
																	r.pathPattern = "/test_request_required_string_unix-nano_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}

														}

													case 'n': // Prefix: "nullable"

														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestRequestRequiredStringUnixNanoNullableOperation
																r.summary = ""
																r.operationID = "test_request_required_string_unix-nano_nullable"
																r.pathPattern = "/test_request_required_string_unix-nano_nullable"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	r.name = TestRequestRequiredStringUnixNanoNullableArrayOperation
																	r.summary = ""
																	r.operationID = "test_request_required_string_unix-nano_nullable_array"
																	r.pathPattern = "/test_request_required_string_unix-nano_nullable_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
															switch elem[0] {
															case '_': // Prefix: "_array"

																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch method {
																	case "POST":
																		r.name = TestRequestRequiredStringUnixNanoNullableArrayArrayOperation
																		r.summary = ""
																		r.operationID = "test_request_required_string_unix-nano_nullable_array_array"
																		r.pathPattern = "/test_request_required_string_unix-nano_nullable_array_array"
																		r.args = args
																		r.count = 0
																		return r, true
																	default:
																		return
																	}
																}

															}

														}

													}

												}

											case 's': // Prefix: "seconds"

												if l := len("seconds"); len(elem) >= l && elem[0:l] == "seconds" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredStringUnixSecondsOperation
														r.summary = ""
														r.operationID = "test_request_required_string_unix-seconds"
														r.pathPattern = "/test_request_required_string_unix-seconds"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_"

													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"

														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestRequestRequiredStringUnixSecondsArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_string_unix-seconds_array"
																r.pathPattern = "/test_request_required_string_unix-seconds_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch method {
																case "POST":
																	r.name = TestRequestRequiredStringUnixSecondsArrayArrayOperation
																	r.summary = ""
																	r.operationID = "test_request_required_string_unix-seconds_array_array"
																	r.pathPattern = "/test_request_required_string_unix-seconds_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}

														}

													case 'n': // Prefix: "nullable"

														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestRequestRequiredStringUnixSecondsNullableOperation
																r.summary = ""
																r.operationID = "test_request_required_string_unix-seconds_nullable"
																r.pathPattern = "/test_request_required_string_unix-seconds_nullable"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	r.name = TestRequestRequiredStringUnixSecondsNullableArrayOperation
																	r.summary = ""
																	r.operationID = "test_request_required_string_unix-seconds_nullable_array"
																	r.pathPattern = "/test_request_required_string_unix-seconds_nullable_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
															switch elem[0] {
															case '_': // Prefix: "_array"

																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch method {
																	case "POST":
																		r.name = TestRequestRequiredStringUnixSecondsNullableArrayArrayOperation
																		r.summary = ""
																		r.operationID = "test_request_required_string_unix-seconds_nullable_array_array"
																		r.pathPattern = "/test_request_required_string_unix-seconds_nullable_array_array"
																		r.args = args
																		r.count = 0
																		return r, true
																	default:
																		return
																	}
																}

															}

														}

													}

												}

											}

										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredStringUnixArrayOperation
														r.summary = ""
														r.operationID = "test_request_required_string_unix_array"
														r.pathPattern = "/test_request_required_string_unix_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestRequiredStringUnixArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_string_unix_array_array"
															r.pathPattern = "/test_request_required_string_unix_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredStringUnixNullableOperation
														r.summary = ""
														r.operationID = "test_request_required_string_unix_nullable"
														r.pathPattern = "/test_request_required_string_unix_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredStringUnixNullableArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_string_unix_nullable_array"
															r.pathPattern = "/test_request_required_string_unix_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestRequiredStringUnixNullableArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_string_unix_nullable_array_array"
																r.pathPattern = "/test_request_required_string_unix_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												}

											}

										}

									case 'r': // Prefix: "ri"

										if l := len("ri"); len(elem) >= l && elem[0:l] == "ri" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestRequiredStringURIOperation
												r.summary = ""
												r.operationID = "test_request_required_string_uri"
												r.pathPattern = "/test_request_required_string_uri"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredStringURIArrayOperation
														r.summary = ""
														r.operationID = "test_request_required_string_uri_array"
														r.pathPattern = "/test_request_required_string_uri_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestRequiredStringURIArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_string_uri_array_array"
															r.pathPattern = "/test_request_required_string_uri_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredStringURINullableOperation
														r.summary = ""
														r.operationID = "test_request_required_string_uri_nullable"
														r.pathPattern = "/test_request_required_string_uri_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredStringURINullableArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_string_uri_nullable_array"
															r.pathPattern = "/test_request_required_string_uri_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestRequiredStringURINullableArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_string_uri_nullable_array_array"
																r.pathPattern = "/test_request_required_string_uri_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												}

											}

										}

									case 'u': // Prefix: "uid"

										if l := len("uid"); len(elem) >= l && elem[0:l] == "uid" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestRequiredStringUUIDOperation
												r.summary = ""
												r.operationID = "test_request_required_string_uuid"
												r.pathPattern = "/test_request_required_string_uuid"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredStringUUIDArrayOperation
														r.summary = ""
														r.operationID = "test_request_required_string_uuid_array"
														r.pathPattern = "/test_request_required_string_uuid_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestRequiredStringUUIDArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_string_uuid_array_array"
															r.pathPattern = "/test_request_required_string_uuid_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestRequiredStringUUIDNullableOperation
														r.summary = ""
														r.operationID = "test_request_required_string_uuid_nullable"
														r.pathPattern = "/test_request_required_string_uuid_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestRequiredStringUUIDNullableArrayOperation
															r.summary = ""
															r.operationID = "test_request_required_string_uuid_nullable_array"
															r.pathPattern = "/test_request_required_string_uuid_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestRequiredStringUUIDNullableArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_required_string_uuid_nullable_array_array"
																r.pathPattern = "/test_request_required_string_uuid_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												}

											}

										}

									}

								}

							}

						}

					case 's': // Prefix: "string"

						if l := len("string"); len(elem) >= l && elem[0:l] == "string" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								r.name = TestRequestStringOperation
								r.summary = ""
								r.operationID = "test_request_string"
								r.pathPattern = "/test_request_string"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '_': // Prefix: "_"

							if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "array"

								if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = TestRequestStringArrayOperation
										r.summary = ""
										r.operationID = "test_request_string_array"
										r.pathPattern = "/test_request_string_array"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '_': // Prefix: "_array"

									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "POST":
											r.name = TestRequestStringArrayArrayOperation
											r.summary = ""
											r.operationID = "test_request_string_array_array"
											r.pathPattern = "/test_request_string_array_array"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}

								}

							case 'b': // Prefix: "b"

								if l := len("b"); len(elem) >= l && elem[0:l] == "b" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "ase64"

									if l := len("ase64"); len(elem) >= l && elem[0:l] == "ase64" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestRequestStringBase64Operation
											r.summary = ""
											r.operationID = "test_request_string_base64"
											r.pathPattern = "/test_request_string_base64"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestStringBase64ArrayOperation
													r.summary = ""
													r.operationID = "test_request_string_base64_array"
													r.pathPattern = "/test_request_string_base64_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestRequestStringBase64ArrayArrayOperation
														r.summary = ""
														r.operationID = "test_request_string_base64_array_array"
														r.pathPattern = "/test_request_string_base64_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestStringBase64NullableOperation
													r.summary = ""
													r.operationID = "test_request_string_base64_nullable"
													r.pathPattern = "/test_request_string_base64_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestStringBase64NullableArrayOperation
														r.summary = ""
														r.operationID = "test_request_string_base64_nullable_array"
														r.pathPattern = "/test_request_string_base64_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestStringBase64NullableArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_string_base64_nullable_array_array"
															r.pathPattern = "/test_request_string_base64_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											}

										}

									}

								case 'i': // Prefix: "inary"

									if l := len("inary"); len(elem) >= l && elem[0:l] == "inary" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestRequestStringBinaryOperation
											r.summary = ""
											r.operationID = "test_request_string_binary"
											r.pathPattern = "/test_request_string_binary"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestStringBinaryArrayOperation
													r.summary = ""
													r.operationID = "test_request_string_binary_array"
													r.pathPattern = "/test_request_string_binary_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestRequestStringBinaryArrayArrayOperation
														r.summary = ""
														r.operationID = "test_request_string_binary_array_array"
														r.pathPattern = "/test_request_string_binary_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestStringBinaryNullableOperation
													r.summary = ""
													r.operationID = "test_request_string_binary_nullable"
													r.pathPattern = "/test_request_string_binary_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestStringBinaryNullableArrayOperation
														r.summary = ""
														r.operationID = "test_request_string_binary_nullable_array"
														r.pathPattern = "/test_request_string_binary_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestStringBinaryNullableArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_string_binary_nullable_array_array"
															r.pathPattern = "/test_request_string_binary_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											}

										}

									}

								case 'y': // Prefix: "yte"

									if l := len("yte"); len(elem) >= l && elem[0:l] == "yte" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestRequestStringByteOperation
											r.summary = ""
											r.operationID = "test_request_string_byte"
											r.pathPattern = "/test_request_string_byte"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestStringByteArrayOperation
													r.summary = ""
													r.operationID = "test_request_string_byte_array"
													r.pathPattern = "/test_request_string_byte_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestRequestStringByteArrayArrayOperation
														r.summary = ""
														r.operationID = "test_request_string_byte_array_array"
														r.pathPattern = "/test_request_string_byte_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestStringByteNullableOperation
													r.summary = ""
													r.operationID = "test_request_string_byte_nullable"
													r.pathPattern = "/test_request_string_byte_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestStringByteNullableArrayOperation
														r.summary = ""
														r.operationID = "test_request_string_byte_nullable_array"
														r.pathPattern = "/test_request_string_byte_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestStringByteNullableArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_string_byte_nullable_array_array"
															r.pathPattern = "/test_request_string_byte_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											}

										}

									}

								}

							case 'd': // Prefix: "d"

								if l := len("d"); len(elem) >= l && elem[0:l] == "d" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "ate"

									if l := len("ate"); len(elem) >= l && elem[0:l] == "ate" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestRequestStringDateOperation
											r.summary = ""
											r.operationID = "test_request_string_date"
											r.pathPattern = "/test_request_string_date"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '-': // Prefix: "-time"

										if l := len("-time"); len(elem) >= l && elem[0:l] == "-time" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestStringDateTimeOperation
												r.summary = ""
												r.operationID = "test_request_string_date-time"
												r.pathPattern = "/test_request_string_date-time"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestStringDateTimeArrayOperation
														r.summary = ""
														r.operationID = "test_request_string_date-time_array"
														r.pathPattern = "/test_request_string_date-time_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestStringDateTimeArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_string_date-time_array_array"
															r.pathPattern = "/test_request_string_date-time_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestStringDateTimeNullableOperation
														r.summary = ""
														r.operationID = "test_request_string_date-time_nullable"
														r.pathPattern = "/test_request_string_date-time_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestStringDateTimeNullableArrayOperation
															r.summary = ""
															r.operationID = "test_request_string_date-time_nullable_array"
															r.pathPattern = "/test_request_string_date-time_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestStringDateTimeNullableArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_string_date-time_nullable_array_array"
																r.pathPattern = "/test_request_string_date-time_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												}

											}

										}

									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestStringDateArrayOperation
													r.summary = ""
													r.operationID = "test_request_string_date_array"
													r.pathPattern = "/test_request_string_date_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestRequestStringDateArrayArrayOperation
														r.summary = ""
														r.operationID = "test_request_string_date_array_array"
														r.pathPattern = "/test_request_string_date_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestStringDateNullableOperation
													r.summary = ""
													r.operationID = "test_request_string_date_nullable"
													r.pathPattern = "/test_request_string_date_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestStringDateNullableArrayOperation
														r.summary = ""
														r.operationID = "test_request_string_date_nullable_array"
														r.pathPattern = "/test_request_string_date_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestStringDateNullableArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_string_date_nullable_array_array"
															r.pathPattern = "/test_request_string_date_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											}

										}

									}

								case 'u': // Prefix: "uration"

									if l := len("uration"); len(elem) >= l && elem[0:l] == "uration" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestRequestStringDurationOperation
											r.summary = ""
											r.operationID = "test_request_string_duration"
											r.pathPattern = "/test_request_string_duration"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestStringDurationArrayOperation
													r.summary = ""
													r.operationID = "test_request_string_duration_array"
													r.pathPattern = "/test_request_string_duration_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestRequestStringDurationArrayArrayOperation
														r.summary = ""
														r.operationID = "test_request_string_duration_array_array"
														r.pathPattern = "/test_request_string_duration_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestStringDurationNullableOperation
													r.summary = ""
													r.operationID = "test_request_string_duration_nullable"
													r.pathPattern = "/test_request_string_duration_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestStringDurationNullableArrayOperation
														r.summary = ""
														r.operationID = "test_request_string_duration_nullable_array"
														r.pathPattern = "/test_request_string_duration_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestStringDurationNullableArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_string_duration_nullable_array_array"
															r.pathPattern = "/test_request_string_duration_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											}

										}

									}

								}

							case 'e': // Prefix: "email"

								if l := len("email"); len(elem) >= l && elem[0:l] == "email" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = TestRequestStringEmailOperation
										r.summary = ""
										r.operationID = "test_request_string_email"
										r.pathPattern = "/test_request_string_email"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '_': // Prefix: "_"

									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "array"

										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestStringEmailArrayOperation
												r.summary = ""
												r.operationID = "test_request_string_email_array"
												r.pathPattern = "/test_request_string_email_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch method {
												case "POST":
													r.name = TestRequestStringEmailArrayArrayOperation
													r.summary = ""
													r.operationID = "test_request_string_email_array_array"
													r.pathPattern = "/test_request_string_email_array_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}

										}

									case 'n': // Prefix: "nullable"

										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestStringEmailNullableOperation
												r.summary = ""
												r.operationID = "test_request_string_email_nullable"
												r.pathPattern = "/test_request_string_email_nullable"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestStringEmailNullableArrayOperation
													r.summary = ""
													r.operationID = "test_request_string_email_nullable_array"
													r.pathPattern = "/test_request_string_email_nullable_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestRequestStringEmailNullableArrayArrayOperation
														r.summary = ""
														r.operationID = "test_request_string_email_nullable_array_array"
														r.pathPattern = "/test_request_string_email_nullable_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										}

									}

								}

							case 'f': // Prefix: "float"

								if l := len("float"); len(elem) >= l && elem[0:l] == "float" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case '3': // Prefix: "32"

									if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestRequestStringFloat32Operation
											r.summary = ""
											r.operationID = "test_request_string_float32"
											r.pathPattern = "/test_request_string_float32"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestStringFloat32ArrayOperation
													r.summary = ""
													r.operationID = "test_request_string_float32_array"
													r.pathPattern = "/test_request_string_float32_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestRequestStringFloat32ArrayArrayOperation
														r.summary = ""
														r.operationID = "test_request_string_float32_array_array"
														r.pathPattern = "/test_request_string_float32_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestStringFloat32NullableOperation
													r.summary = ""
													r.operationID = "test_request_string_float32_nullable"
													r.pathPattern = "/test_request_string_float32_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestStringFloat32NullableArrayOperation
														r.summary = ""
														r.operationID = "test_request_string_float32_nullable_array"
														r.pathPattern = "/test_request_string_float32_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestStringFloat32NullableArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_string_float32_nullable_array_array"
															r.pathPattern = "/test_request_string_float32_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											}

										}

									}

								case '6': // Prefix: "64"

									if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestRequestStringFloat64Operation
											r.summary = ""
											r.operationID = "test_request_string_float64"
											r.pathPattern = "/test_request_string_float64"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestStringFloat64ArrayOperation
													r.summary = ""
													r.operationID = "test_request_string_float64_array"
													r.pathPattern = "/test_request_string_float64_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestRequestStringFloat64ArrayArrayOperation
														r.summary = ""
														r.operationID = "test_request_string_float64_array_array"
														r.pathPattern = "/test_request_string_float64_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestStringFloat64NullableOperation
													r.summary = ""
													r.operationID = "test_request_string_float64_nullable"
													r.pathPattern = "/test_request_string_float64_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestStringFloat64NullableArrayOperation
														r.summary = ""
														r.operationID = "test_request_string_float64_nullable_array"
														r.pathPattern = "/test_request_string_float64_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestStringFloat64NullableArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_string_float64_nullable_array_array"
															r.pathPattern = "/test_request_string_float64_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											}

										}

									}

								}

							case 'h': // Prefix: "hostname"

								if l := len("hostname"); len(elem) >= l && elem[0:l] == "hostname" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = TestRequestStringHostnameOperation
										r.summary = ""
										r.operationID = "test_request_string_hostname"
										r.pathPattern = "/test_request_string_hostname"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '_': // Prefix: "_"

									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "array"

										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestStringHostnameArrayOperation
												r.summary = ""
												r.operationID = "test_request_string_hostname_array"
												r.pathPattern = "/test_request_string_hostname_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch method {
												case "POST":
													r.name = TestRequestStringHostnameArrayArrayOperation
													r.summary = ""
													r.operationID = "test_request_string_hostname_array_array"
													r.pathPattern = "/test_request_string_hostname_array_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}

										}

									case 'n': // Prefix: "nullable"

										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestStringHostnameNullableOperation
												r.summary = ""
												r.operationID = "test_request_string_hostname_nullable"
												r.pathPattern = "/test_request_string_hostname_nullable"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestStringHostnameNullableArrayOperation
													r.summary = ""
													r.operationID = "test_request_string_hostname_nullable_array"
													r.pathPattern = "/test_request_string_hostname_nullable_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestRequestStringHostnameNullableArrayArrayOperation
														r.summary = ""
														r.operationID = "test_request_string_hostname_nullable_array_array"
														r.pathPattern = "/test_request_string_hostname_nullable_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										}

									}

								}

							case 'i': // Prefix: "i"

								if l := len("i"); len(elem) >= l && elem[0:l] == "i" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'n': // Prefix: "nt"

									if l := len("nt"); len(elem) >= l && elem[0:l] == "nt" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestRequestStringIntOperation
											r.summary = ""
											r.operationID = "test_request_string_int"
											r.pathPattern = "/test_request_string_int"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '1': // Prefix: "16"

										if l := len("16"); len(elem) >= l && elem[0:l] == "16" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestStringInt16Operation
												r.summary = ""
												r.operationID = "test_request_string_int16"
												r.pathPattern = "/test_request_string_int16"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestStringInt16ArrayOperation
														r.summary = ""
														r.operationID = "test_request_string_int16_array"
														r.pathPattern = "/test_request_string_int16_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestStringInt16ArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_string_int16_array_array"
															r.pathPattern = "/test_request_string_int16_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestStringInt16NullableOperation
														r.summary = ""
														r.operationID = "test_request_string_int16_nullable"
														r.pathPattern = "/test_request_string_int16_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestStringInt16NullableArrayOperation
															r.summary = ""
															r.operationID = "test_request_string_int16_nullable_array"
															r.pathPattern = "/test_request_string_int16_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestStringInt16NullableArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_string_int16_nullable_array_array"
																r.pathPattern = "/test_request_string_int16_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												}

											}

										}

									case '3': // Prefix: "32"

										if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestStringInt32Operation
												r.summary = ""
												r.operationID = "test_request_string_int32"
												r.pathPattern = "/test_request_string_int32"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestStringInt32ArrayOperation
														r.summary = ""
														r.operationID = "test_request_string_int32_array"
														r.pathPattern = "/test_request_string_int32_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestStringInt32ArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_string_int32_array_array"
															r.pathPattern = "/test_request_string_int32_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestStringInt32NullableOperation
														r.summary = ""
														r.operationID = "test_request_string_int32_nullable"
														r.pathPattern = "/test_request_string_int32_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestStringInt32NullableArrayOperation
															r.summary = ""
															r.operationID = "test_request_string_int32_nullable_array"
															r.pathPattern = "/test_request_string_int32_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestStringInt32NullableArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_string_int32_nullable_array_array"
																r.pathPattern = "/test_request_string_int32_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												}

											}

										}

									case '6': // Prefix: "64"

										if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestStringInt64Operation
												r.summary = ""
												r.operationID = "test_request_string_int64"
												r.pathPattern = "/test_request_string_int64"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestStringInt64ArrayOperation
														r.summary = ""
														r.operationID = "test_request_string_int64_array"
														r.pathPattern = "/test_request_string_int64_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestStringInt64ArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_string_int64_array_array"
															r.pathPattern = "/test_request_string_int64_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestStringInt64NullableOperation
														r.summary = ""
														r.operationID = "test_request_string_int64_nullable"
														r.pathPattern = "/test_request_string_int64_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestStringInt64NullableArrayOperation
															r.summary = ""
															r.operationID = "test_request_string_int64_nullable_array"
															r.pathPattern = "/test_request_string_int64_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestStringInt64NullableArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_string_int64_nullable_array_array"
																r.pathPattern = "/test_request_string_int64_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												}

											}

										}

									case '8': // Prefix: "8"

										if l := len("8"); len(elem) >= l && elem[0:l] == "8" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestStringInt8Operation
												r.summary = ""
												r.operationID = "test_request_string_int8"
												r.pathPattern = "/test_request_string_int8"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestStringInt8ArrayOperation
														r.summary = ""
														r.operationID = "test_request_string_int8_array"
														r.pathPattern = "/test_request_string_int8_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestStringInt8ArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_string_int8_array_array"
															r.pathPattern = "/test_request_string_int8_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestStringInt8NullableOperation
														r.summary = ""
														r.operationID = "test_request_string_int8_nullable"
														r.pathPattern = "/test_request_string_int8_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestStringInt8NullableArrayOperation
															r.summary = ""
															r.operationID = "test_request_string_int8_nullable_array"
															r.pathPattern = "/test_request_string_int8_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestStringInt8NullableArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_string_int8_nullable_array_array"
																r.pathPattern = "/test_request_string_int8_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												}

											}

										}

									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestStringIntArrayOperation
													r.summary = ""
													r.operationID = "test_request_string_int_array"
													r.pathPattern = "/test_request_string_int_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestRequestStringIntArrayArrayOperation
														r.summary = ""
														r.operationID = "test_request_string_int_array_array"
														r.pathPattern = "/test_request_string_int_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestStringIntNullableOperation
													r.summary = ""
													r.operationID = "test_request_string_int_nullable"
													r.pathPattern = "/test_request_string_int_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestStringIntNullableArrayOperation
														r.summary = ""
														r.operationID = "test_request_string_int_nullable_array"
														r.pathPattern = "/test_request_string_int_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestStringIntNullableArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_string_int_nullable_array_array"
															r.pathPattern = "/test_request_string_int_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											}

										}

									}

								case 'p': // Prefix: "p"

									if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestRequestStringIPOperation
											r.summary = ""
											r.operationID = "test_request_string_ip"
											r.pathPattern = "/test_request_string_ip"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestStringIPArrayOperation
													r.summary = ""
													r.operationID = "test_request_string_ip_array"
													r.pathPattern = "/test_request_string_ip_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestRequestStringIPArrayArrayOperation
														r.summary = ""
														r.operationID = "test_request_string_ip_array_array"
														r.pathPattern = "/test_request_string_ip_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestStringIPNullableOperation
													r.summary = ""
													r.operationID = "test_request_string_ip_nullable"
													r.pathPattern = "/test_request_string_ip_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestStringIPNullableArrayOperation
														r.summary = ""
														r.operationID = "test_request_string_ip_nullable_array"
														r.pathPattern = "/test_request_string_ip_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestStringIPNullableArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_string_ip_nullable_array_array"
															r.pathPattern = "/test_request_string_ip_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											}

										}

									case 'v': // Prefix: "v"

										if l := len("v"); len(elem) >= l && elem[0:l] == "v" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '4': // Prefix: "4"

											if l := len("4"); len(elem) >= l && elem[0:l] == "4" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestStringIpv4Operation
													r.summary = ""
													r.operationID = "test_request_string_ipv4"
													r.pathPattern = "/test_request_string_ipv4"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestStringIpv4ArrayOperation
															r.summary = ""
															r.operationID = "test_request_string_ipv4_array"
															r.pathPattern = "/test_request_string_ipv4_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestStringIpv4ArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_string_ipv4_array_array"
																r.pathPattern = "/test_request_string_ipv4_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestStringIpv4NullableOperation
															r.summary = ""
															r.operationID = "test_request_string_ipv4_nullable"
															r.pathPattern = "/test_request_string_ipv4_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestRequestStringIpv4NullableArrayOperation
																r.summary = ""
																r.operationID = "test_request_string_ipv4_nullable_array"
																r.pathPattern = "/test_request_string_ipv4_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch method {
																case "POST":
																	r.name = TestRequestStringIpv4NullableArrayArrayOperation
																	r.summary = ""
																	r.operationID = "test_request_string_ipv4_nullable_array_array"
																	r.pathPattern = "/test_request_string_ipv4_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}

														}

													}

												}

											}

										case '6': // Prefix: "6"

											if l := len("6"); len(elem) >= l && elem[0:l] == "6" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestStringIpv6Operation
													r.summary = ""
													r.operationID = "test_request_string_ipv6"
													r.pathPattern = "/test_request_string_ipv6"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestStringIpv6ArrayOperation
															r.summary = ""
															r.operationID = "test_request_string_ipv6_array"
															r.pathPattern = "/test_request_string_ipv6_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestStringIpv6ArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_string_ipv6_array_array"
																r.pathPattern = "/test_request_string_ipv6_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestStringIpv6NullableOperation
															r.summary = ""
															r.operationID = "test_request_string_ipv6_nullable"
															r.pathPattern = "/test_request_string_ipv6_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestRequestStringIpv6NullableArrayOperation
																r.summary = ""
																r.operationID = "test_request_string_ipv6_nullable_array"
																r.pathPattern = "/test_request_string_ipv6_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch method {
																case "POST":
																	r.name = TestRequestStringIpv6NullableArrayArrayOperation
																	r.summary = ""
																	r.operationID = "test_request_string_ipv6_nullable_array_array"
																	r.pathPattern = "/test_request_string_ipv6_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}

														}

													}

												}

											}

										}

									}

								}

							case 'm': // Prefix: "mac"

								if l := len("mac"); len(elem) >= l && elem[0:l] == "mac" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = TestRequestStringMACOperation
										r.summary = ""
										r.operationID = "test_request_string_mac"
										r.pathPattern = "/test_request_string_mac"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '_': // Prefix: "_"

									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "array"

										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestStringMACArrayOperation
												r.summary = ""
												r.operationID = "test_request_string_mac_array"
												r.pathPattern = "/test_request_string_mac_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch method {
												case "POST":
													r.name = TestRequestStringMACArrayArrayOperation
													r.summary = ""
													r.operationID = "test_request_string_mac_array_array"
													r.pathPattern = "/test_request_string_mac_array_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}

										}

									case 'n': // Prefix: "nullable"

										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestStringMACNullableOperation
												r.summary = ""
												r.operationID = "test_request_string_mac_nullable"
												r.pathPattern = "/test_request_string_mac_nullable"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestStringMACNullableArrayOperation
													r.summary = ""
													r.operationID = "test_request_string_mac_nullable_array"
													r.pathPattern = "/test_request_string_mac_nullable_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestRequestStringMACNullableArrayArrayOperation
														r.summary = ""
														r.operationID = "test_request_string_mac_nullable_array_array"
														r.pathPattern = "/test_request_string_mac_nullable_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										}

									}

								}

							case 'n': // Prefix: "nullable"

								if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = TestRequestStringNullableOperation
										r.summary = ""
										r.operationID = "test_request_string_nullable"
										r.pathPattern = "/test_request_string_nullable"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '_': // Prefix: "_array"

									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestRequestStringNullableArrayOperation
											r.summary = ""
											r.operationID = "test_request_string_nullable_array"
											r.pathPattern = "/test_request_string_nullable_array"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_array"

										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "POST":
												r.name = TestRequestStringNullableArrayArrayOperation
												r.summary = ""
												r.operationID = "test_request_string_nullable_array_array"
												r.pathPattern = "/test_request_string_nullable_array_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}

									}

								}

							case 'p': // Prefix: "password"

								if l := len("password"); len(elem) >= l && elem[0:l] == "password" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = TestRequestStringPasswordOperation
										r.summary = ""
										r.operationID = "test_request_string_password"
										r.pathPattern = "/test_request_string_password"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '_': // Prefix: "_"

									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "array"

										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestStringPasswordArrayOperation
												r.summary = ""
												r.operationID = "test_request_string_password_array"
												r.pathPattern = "/test_request_string_password_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch method {
												case "POST":
													r.name = TestRequestStringPasswordArrayArrayOperation
													r.summary = ""
													r.operationID = "test_request_string_password_array_array"
													r.pathPattern = "/test_request_string_password_array_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}

										}

									case 'n': // Prefix: "nullable"

										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestStringPasswordNullableOperation
												r.summary = ""
												r.operationID = "test_request_string_password_nullable"
												r.pathPattern = "/test_request_string_password_nullable"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestStringPasswordNullableArrayOperation
													r.summary = ""
													r.operationID = "test_request_string_password_nullable_array"
													r.pathPattern = "/test_request_string_password_nullable_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestRequestStringPasswordNullableArrayArrayOperation
														r.summary = ""
														r.operationID = "test_request_string_password_nullable_array_array"
														r.pathPattern = "/test_request_string_password_nullable_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										}

									}

								}

							case 't': // Prefix: "time"

								if l := len("time"); len(elem) >= l && elem[0:l] == "time" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = TestRequestStringTimeOperation
										r.summary = ""
										r.operationID = "test_request_string_time"
										r.pathPattern = "/test_request_string_time"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '_': // Prefix: "_"

									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "array"

										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestStringTimeArrayOperation
												r.summary = ""
												r.operationID = "test_request_string_time_array"
												r.pathPattern = "/test_request_string_time_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch method {
												case "POST":
													r.name = TestRequestStringTimeArrayArrayOperation
													r.summary = ""
													r.operationID = "test_request_string_time_array_array"
													r.pathPattern = "/test_request_string_time_array_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}

										}

									case 'n': // Prefix: "nullable"

										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestStringTimeNullableOperation
												r.summary = ""
												r.operationID = "test_request_string_time_nullable"
												r.pathPattern = "/test_request_string_time_nullable"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestStringTimeNullableArrayOperation
													r.summary = ""
													r.operationID = "test_request_string_time_nullable_array"
													r.pathPattern = "/test_request_string_time_nullable_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestRequestStringTimeNullableArrayArrayOperation
														r.summary = ""
														r.operationID = "test_request_string_time_nullable_array_array"
														r.pathPattern = "/test_request_string_time_nullable_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										}

									}

								}

							case 'u': // Prefix: "u"

								if l := len("u"); len(elem) >= l && elem[0:l] == "u" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'i': // Prefix: "int"

									if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestRequestStringUintOperation
											r.summary = ""
											r.operationID = "test_request_string_uint"
											r.pathPattern = "/test_request_string_uint"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '1': // Prefix: "16"

										if l := len("16"); len(elem) >= l && elem[0:l] == "16" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestStringUint16Operation
												r.summary = ""
												r.operationID = "test_request_string_uint16"
												r.pathPattern = "/test_request_string_uint16"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestStringUint16ArrayOperation
														r.summary = ""
														r.operationID = "test_request_string_uint16_array"
														r.pathPattern = "/test_request_string_uint16_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestStringUint16ArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_string_uint16_array_array"
															r.pathPattern = "/test_request_string_uint16_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestStringUint16NullableOperation
														r.summary = ""
														r.operationID = "test_request_string_uint16_nullable"
														r.pathPattern = "/test_request_string_uint16_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestStringUint16NullableArrayOperation
															r.summary = ""
															r.operationID = "test_request_string_uint16_nullable_array"
															r.pathPattern = "/test_request_string_uint16_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestStringUint16NullableArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_string_uint16_nullable_array_array"
																r.pathPattern = "/test_request_string_uint16_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												}

											}

										}

									case '3': // Prefix: "32"

										if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestStringUint32Operation
												r.summary = ""
												r.operationID = "test_request_string_uint32"
												r.pathPattern = "/test_request_string_uint32"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestStringUint32ArrayOperation
														r.summary = ""
														r.operationID = "test_request_string_uint32_array"
														r.pathPattern = "/test_request_string_uint32_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestStringUint32ArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_string_uint32_array_array"
															r.pathPattern = "/test_request_string_uint32_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestStringUint32NullableOperation
														r.summary = ""
														r.operationID = "test_request_string_uint32_nullable"
														r.pathPattern = "/test_request_string_uint32_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestStringUint32NullableArrayOperation
															r.summary = ""
															r.operationID = "test_request_string_uint32_nullable_array"
															r.pathPattern = "/test_request_string_uint32_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestStringUint32NullableArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_string_uint32_nullable_array_array"
																r.pathPattern = "/test_request_string_uint32_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												}

											}

										}

									case '6': // Prefix: "64"

										if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestStringUint64Operation
												r.summary = ""
												r.operationID = "test_request_string_uint64"
												r.pathPattern = "/test_request_string_uint64"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestStringUint64ArrayOperation
														r.summary = ""
														r.operationID = "test_request_string_uint64_array"
														r.pathPattern = "/test_request_string_uint64_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestStringUint64ArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_string_uint64_array_array"
															r.pathPattern = "/test_request_string_uint64_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestStringUint64NullableOperation
														r.summary = ""
														r.operationID = "test_request_string_uint64_nullable"
														r.pathPattern = "/test_request_string_uint64_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestStringUint64NullableArrayOperation
															r.summary = ""
															r.operationID = "test_request_string_uint64_nullable_array"
															r.pathPattern = "/test_request_string_uint64_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestStringUint64NullableArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_string_uint64_nullable_array_array"
																r.pathPattern = "/test_request_string_uint64_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												}

											}

										}

									case '8': // Prefix: "8"

										if l := len("8"); len(elem) >= l && elem[0:l] == "8" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestRequestStringUint8Operation
												r.summary = ""
												r.operationID = "test_request_string_uint8"
												r.pathPattern = "/test_request_string_uint8"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestStringUint8ArrayOperation
														r.summary = ""
														r.operationID = "test_request_string_uint8_array"
														r.pathPattern = "/test_request_string_uint8_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestStringUint8ArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_string_uint8_array_array"
															r.pathPattern = "/test_request_string_uint8_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestStringUint8NullableOperation
														r.summary = ""
														r.operationID = "test_request_string_uint8_nullable"
														r.pathPattern = "/test_request_string_uint8_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestStringUint8NullableArrayOperation
															r.summary = ""
															r.operationID = "test_request_string_uint8_nullable_array"
															r.pathPattern = "/test_request_string_uint8_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestStringUint8NullableArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_string_uint8_nullable_array_array"
																r.pathPattern = "/test_request_string_uint8_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												}

											}

										}

									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestStringUintArrayOperation
													r.summary = ""
													r.operationID = "test_request_string_uint_array"
													r.pathPattern = "/test_request_string_uint_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestRequestStringUintArrayArrayOperation
														r.summary = ""
														r.operationID = "test_request_string_uint_array_array"
														r.pathPattern = "/test_request_string_uint_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestStringUintNullableOperation
													r.summary = ""
													r.operationID = "test_request_string_uint_nullable"
													r.pathPattern = "/test_request_string_uint_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestStringUintNullableArrayOperation
														r.summary = ""
														r.operationID = "test_request_string_uint_nullable_array"
														r.pathPattern = "/test_request_string_uint_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestStringUintNullableArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_string_uint_nullable_array_array"
															r.pathPattern = "/test_request_string_uint_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											}

										}

									}

								case 'n': // Prefix: "nix"

									if l := len("nix"); len(elem) >= l && elem[0:l] == "nix" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestRequestStringUnixOperation
											r.summary = ""
											r.operationID = "test_request_string_unix"
											r.pathPattern = "/test_request_string_unix"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '-': // Prefix: "-"

										if l := len("-"); len(elem) >= l && elem[0:l] == "-" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'm': // Prefix: "mi"

											if l := len("mi"); len(elem) >= l && elem[0:l] == "mi" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'c': // Prefix: "cro"

												if l := len("cro"); len(elem) >= l && elem[0:l] == "cro" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestStringUnixMicroOperation
														r.summary = ""
														r.operationID = "test_request_string_unix-micro"
														r.pathPattern = "/test_request_string_unix-micro"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_"

													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"

														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestRequestStringUnixMicroArrayOperation
																r.summary = ""
																r.operationID = "test_request_string_unix-micro_array"
																r.pathPattern = "/test_request_string_unix-micro_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch method {
																case "POST":
																	r.name = TestRequestStringUnixMicroArrayArrayOperation
																	r.summary = ""
																	r.operationID = "test_request_string_unix-micro_array_array"
																	r.pathPattern = "/test_request_string_unix-micro_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}

														}

													case 'n': // Prefix: "nullable"

														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestRequestStringUnixMicroNullableOperation
																r.summary = ""
																r.operationID = "test_request_string_unix-micro_nullable"
																r.pathPattern = "/test_request_string_unix-micro_nullable"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	r.name = TestRequestStringUnixMicroNullableArrayOperation
																	r.summary = ""
																	r.operationID = "test_request_string_unix-micro_nullable_array"
																	r.pathPattern = "/test_request_string_unix-micro_nullable_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
															switch elem[0] {
															case '_': // Prefix: "_array"

																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch method {
																	case "POST":
																		r.name = TestRequestStringUnixMicroNullableArrayArrayOperation
																		r.summary = ""
																		r.operationID = "test_request_string_unix-micro_nullable_array_array"
																		r.pathPattern = "/test_request_string_unix-micro_nullable_array_array"
																		r.args = args
																		r.count = 0
																		return r, true
																	default:
																		return
																	}
																}

															}

														}

													}

												}

											case 'l': // Prefix: "lli"

												if l := len("lli"); len(elem) >= l && elem[0:l] == "lli" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestStringUnixMilliOperation
														r.summary = ""
														r.operationID = "test_request_string_unix-milli"
														r.pathPattern = "/test_request_string_unix-milli"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_"

													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"

														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestRequestStringUnixMilliArrayOperation
																r.summary = ""
																r.operationID = "test_request_string_unix-milli_array"
																r.pathPattern = "/test_request_string_unix-milli_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch method {
																case "POST":
																	r.name = TestRequestStringUnixMilliArrayArrayOperation
																	r.summary = ""
																	r.operationID = "test_request_string_unix-milli_array_array"
																	r.pathPattern = "/test_request_string_unix-milli_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}

														}

													case 'n': // Prefix: "nullable"

														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestRequestStringUnixMilliNullableOperation
																r.summary = ""
																r.operationID = "test_request_string_unix-milli_nullable"
																r.pathPattern = "/test_request_string_unix-milli_nullable"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	r.name = TestRequestStringUnixMilliNullableArrayOperation
																	r.summary = ""
																	r.operationID = "test_request_string_unix-milli_nullable_array"
																	r.pathPattern = "/test_request_string_unix-milli_nullable_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
															switch elem[0] {
															case '_': // Prefix: "_array"

																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch method {
																	case "POST":
																		r.name = TestRequestStringUnixMilliNullableArrayArrayOperation
																		r.summary = ""
																		r.operationID = "test_request_string_unix-milli_nullable_array_array"
																		r.pathPattern = "/test_request_string_unix-milli_nullable_array_array"
																		r.args = args
																		r.count = 0
																		return r, true
																	default:
																		return
																	}
																}

															}

														}

													}

												}

											}

										case 'n': // Prefix: "nano"

											if l := len("nano"); len(elem) >= l && elem[0:l] == "nano" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestStringUnixNanoOperation
													r.summary = ""
													r.operationID = "test_request_string_unix-nano"
													r.pathPattern = "/test_request_string_unix-nano"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestStringUnixNanoArrayOperation
															r.summary = ""
															r.operationID = "test_request_string_unix-nano_array"
															r.pathPattern = "/test_request_string_unix-nano_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestStringUnixNanoArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_string_unix-nano_array_array"
																r.pathPattern = "/test_request_string_unix-nano_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestStringUnixNanoNullableOperation
															r.summary = ""
															r.operationID = "test_request_string_unix-nano_nullable"
															r.pathPattern = "/test_request_string_unix-nano_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestRequestStringUnixNanoNullableArrayOperation
																r.summary = ""
																r.operationID = "test_request_string_unix-nano_nullable_array"
																r.pathPattern = "/test_request_string_unix-nano_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch method {
																case "POST":
																	r.name = TestRequestStringUnixNanoNullableArrayArrayOperation
																	r.summary = ""
																	r.operationID = "test_request_string_unix-nano_nullable_array_array"
																	r.pathPattern = "/test_request_string_unix-nano_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}

														}

													}

												}

											}

										case 's': // Prefix: "seconds"

											if l := len("seconds"); len(elem) >= l && elem[0:l] == "seconds" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestStringUnixSecondsOperation
													r.summary = ""
													r.operationID = "test_request_string_unix-seconds"
													r.pathPattern = "/test_request_string_unix-seconds"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestStringUnixSecondsArrayOperation
															r.summary = ""
															r.operationID = "test_request_string_unix-seconds_array"
															r.pathPattern = "/test_request_string_unix-seconds_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestRequestStringUnixSecondsArrayArrayOperation
																r.summary = ""
																r.operationID = "test_request_string_unix-seconds_array_array"
																r.pathPattern = "/test_request_string_unix-seconds_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestRequestStringUnixSecondsNullableOperation
															r.summary = ""
															r.operationID = "test_request_string_unix-seconds_nullable"
															r.pathPattern = "/test_request_string_unix-seconds_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestRequestStringUnixSecondsNullableArrayOperation
																r.summary = ""
																r.operationID = "test_request_string_unix-seconds_nullable_array"
																r.pathPattern = "/test_request_string_unix-seconds_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch method {
																case "POST":
																	r.name = TestRequestStringUnixSecondsNullableArrayArrayOperation
																	r.summary = ""
																	r.operationID = "test_request_string_unix-seconds_nullable_array_array"
																	r.pathPattern = "/test_request_string_unix-seconds_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}

														}

													}

												}

											}

										}

									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestStringUnixArrayOperation
													r.summary = ""
													r.operationID = "test_request_string_unix_array"
													r.pathPattern = "/test_request_string_unix_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestRequestStringUnixArrayArrayOperation
														r.summary = ""
														r.operationID = "test_request_string_unix_array_array"
														r.pathPattern = "/test_request_string_unix_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestStringUnixNullableOperation
													r.summary = ""
													r.operationID = "test_request_string_unix_nullable"
													r.pathPattern = "/test_request_string_unix_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestStringUnixNullableArrayOperation
														r.summary = ""
														r.operationID = "test_request_string_unix_nullable_array"
														r.pathPattern = "/test_request_string_unix_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestStringUnixNullableArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_string_unix_nullable_array_array"
															r.pathPattern = "/test_request_string_unix_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											}

										}

									}

								case 'r': // Prefix: "ri"

									if l := len("ri"); len(elem) >= l && elem[0:l] == "ri" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestRequestStringURIOperation
											r.summary = ""
											r.operationID = "test_request_string_uri"
											r.pathPattern = "/test_request_string_uri"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestStringURIArrayOperation
													r.summary = ""
													r.operationID = "test_request_string_uri_array"
													r.pathPattern = "/test_request_string_uri_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestRequestStringURIArrayArrayOperation
														r.summary = ""
														r.operationID = "test_request_string_uri_array_array"
														r.pathPattern = "/test_request_string_uri_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestStringURINullableOperation
													r.summary = ""
													r.operationID = "test_request_string_uri_nullable"
													r.pathPattern = "/test_request_string_uri_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestStringURINullableArrayOperation
														r.summary = ""
														r.operationID = "test_request_string_uri_nullable_array"
														r.pathPattern = "/test_request_string_uri_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestStringURINullableArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_string_uri_nullable_array_array"
															r.pathPattern = "/test_request_string_uri_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											}

										}

									}

								case 'u': // Prefix: "uid"

									if l := len("uid"); len(elem) >= l && elem[0:l] == "uid" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestRequestStringUUIDOperation
											r.summary = ""
											r.operationID = "test_request_string_uuid"
											r.pathPattern = "/test_request_string_uuid"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestStringUUIDArrayOperation
													r.summary = ""
													r.operationID = "test_request_string_uuid_array"
													r.pathPattern = "/test_request_string_uuid_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestRequestStringUUIDArrayArrayOperation
														r.summary = ""
														r.operationID = "test_request_string_uuid_array_array"
														r.pathPattern = "/test_request_string_uuid_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestRequestStringUUIDNullableOperation
													r.summary = ""
													r.operationID = "test_request_string_uuid_nullable"
													r.pathPattern = "/test_request_string_uuid_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestRequestStringUUIDNullableArrayOperation
														r.summary = ""
														r.operationID = "test_request_string_uuid_nullable_array"
														r.pathPattern = "/test_request_string_uuid_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestRequestStringUUIDNullableArrayArrayOperation
															r.summary = ""
															r.operationID = "test_request_string_uuid_nullable_array_array"
															r.pathPattern = "/test_request_string_uuid_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											}

										}

									}

								}

							}

						}

					}

				case 's': // Prefix: "sponse_"

					if l := len("sponse_"); len(elem) >= l && elem[0:l] == "sponse_" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'A': // Prefix: "Any"

						if l := len("Any"); len(elem) >= l && elem[0:l] == "Any" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = TestResponseAnyOperation
								r.summary = ""
								r.operationID = "test_response_Any"
								r.pathPattern = "/test_response_Any"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					case 'E': // Prefix: "EmptyStruct"

						if l := len("EmptyStruct"); len(elem) >= l && elem[0:l] == "EmptyStruct" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = TestResponseEmptyStructOperation
								r.summary = ""
								r.operationID = "test_response_EmptyStruct"
								r.pathPattern = "/test_response_EmptyStruct"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					case 'F': // Prefix: "FormatTest"

						if l := len("FormatTest"); len(elem) >= l && elem[0:l] == "FormatTest" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = TestResponseFormatTestOperation
								r.summary = ""
								r.operationID = "test_response_FormatTest"
								r.pathPattern = "/test_response_FormatTest"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					case 'b': // Prefix: "boolean"

						if l := len("boolean"); len(elem) >= l && elem[0:l] == "boolean" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								r.name = TestResponseBooleanOperation
								r.summary = ""
								r.operationID = "test_response_boolean"
								r.pathPattern = "/test_response_boolean"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '_': // Prefix: "_"

							if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "array"

								if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = TestResponseBooleanArrayOperation
										r.summary = ""
										r.operationID = "test_response_boolean_array"
										r.pathPattern = "/test_response_boolean_array"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '_': // Prefix: "_array"

									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "POST":
											r.name = TestResponseBooleanArrayArrayOperation
											r.summary = ""
											r.operationID = "test_response_boolean_array_array"
											r.pathPattern = "/test_response_boolean_array_array"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}

								}

							case 'n': // Prefix: "nullable"

								if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = TestResponseBooleanNullableOperation
										r.summary = ""
										r.operationID = "test_response_boolean_nullable"
										r.pathPattern = "/test_response_boolean_nullable"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '_': // Prefix: "_array"

									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestResponseBooleanNullableArrayOperation
											r.summary = ""
											r.operationID = "test_response_boolean_nullable_array"
											r.pathPattern = "/test_response_boolean_nullable_array"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_array"

										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "POST":
												r.name = TestResponseBooleanNullableArrayArrayOperation
												r.summary = ""
												r.operationID = "test_response_boolean_nullable_array_array"
												r.pathPattern = "/test_response_boolean_nullable_array_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}

									}

								}

							}

						}

					case 'i': // Prefix: "integer"

						if l := len("integer"); len(elem) >= l && elem[0:l] == "integer" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								r.name = TestResponseIntegerOperation
								r.summary = ""
								r.operationID = "test_response_integer"
								r.pathPattern = "/test_response_integer"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '_': // Prefix: "_"

							if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "array"

								if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = TestResponseIntegerArrayOperation
										r.summary = ""
										r.operationID = "test_response_integer_array"
										r.pathPattern = "/test_response_integer_array"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '_': // Prefix: "_array"

									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "POST":
											r.name = TestResponseIntegerArrayArrayOperation
											r.summary = ""
											r.operationID = "test_response_integer_array_array"
											r.pathPattern = "/test_response_integer_array_array"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}

								}

							case 'i': // Prefix: "int"

								if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case '1': // Prefix: "16"

									if l := len("16"); len(elem) >= l && elem[0:l] == "16" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestResponseIntegerInt16Operation
											r.summary = ""
											r.operationID = "test_response_integer_int16"
											r.pathPattern = "/test_response_integer_int16"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseIntegerInt16ArrayOperation
													r.summary = ""
													r.operationID = "test_response_integer_int16_array"
													r.pathPattern = "/test_response_integer_int16_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestResponseIntegerInt16ArrayArrayOperation
														r.summary = ""
														r.operationID = "test_response_integer_int16_array_array"
														r.pathPattern = "/test_response_integer_int16_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseIntegerInt16NullableOperation
													r.summary = ""
													r.operationID = "test_response_integer_int16_nullable"
													r.pathPattern = "/test_response_integer_int16_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseIntegerInt16NullableArrayOperation
														r.summary = ""
														r.operationID = "test_response_integer_int16_nullable_array"
														r.pathPattern = "/test_response_integer_int16_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestResponseIntegerInt16NullableArrayArrayOperation
															r.summary = ""
															r.operationID = "test_response_integer_int16_nullable_array_array"
															r.pathPattern = "/test_response_integer_int16_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											}

										}

									}

								case '3': // Prefix: "32"

									if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestResponseIntegerInt32Operation
											r.summary = ""
											r.operationID = "test_response_integer_int32"
											r.pathPattern = "/test_response_integer_int32"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseIntegerInt32ArrayOperation
													r.summary = ""
													r.operationID = "test_response_integer_int32_array"
													r.pathPattern = "/test_response_integer_int32_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestResponseIntegerInt32ArrayArrayOperation
														r.summary = ""
														r.operationID = "test_response_integer_int32_array_array"
														r.pathPattern = "/test_response_integer_int32_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseIntegerInt32NullableOperation
													r.summary = ""
													r.operationID = "test_response_integer_int32_nullable"
													r.pathPattern = "/test_response_integer_int32_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseIntegerInt32NullableArrayOperation
														r.summary = ""
														r.operationID = "test_response_integer_int32_nullable_array"
														r.pathPattern = "/test_response_integer_int32_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestResponseIntegerInt32NullableArrayArrayOperation
															r.summary = ""
															r.operationID = "test_response_integer_int32_nullable_array_array"
															r.pathPattern = "/test_response_integer_int32_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											}

										}

									}

								case '6': // Prefix: "64"

									if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestResponseIntegerInt64Operation
											r.summary = ""
											r.operationID = "test_response_integer_int64"
											r.pathPattern = "/test_response_integer_int64"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseIntegerInt64ArrayOperation
													r.summary = ""
													r.operationID = "test_response_integer_int64_array"
													r.pathPattern = "/test_response_integer_int64_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestResponseIntegerInt64ArrayArrayOperation
														r.summary = ""
														r.operationID = "test_response_integer_int64_array_array"
														r.pathPattern = "/test_response_integer_int64_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseIntegerInt64NullableOperation
													r.summary = ""
													r.operationID = "test_response_integer_int64_nullable"
													r.pathPattern = "/test_response_integer_int64_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseIntegerInt64NullableArrayOperation
														r.summary = ""
														r.operationID = "test_response_integer_int64_nullable_array"
														r.pathPattern = "/test_response_integer_int64_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestResponseIntegerInt64NullableArrayArrayOperation
															r.summary = ""
															r.operationID = "test_response_integer_int64_nullable_array_array"
															r.pathPattern = "/test_response_integer_int64_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											}

										}

									}

								case '8': // Prefix: "8"

									if l := len("8"); len(elem) >= l && elem[0:l] == "8" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestResponseIntegerInt8Operation
											r.summary = ""
											r.operationID = "test_response_integer_int8"
											r.pathPattern = "/test_response_integer_int8"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseIntegerInt8ArrayOperation
													r.summary = ""
													r.operationID = "test_response_integer_int8_array"
													r.pathPattern = "/test_response_integer_int8_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestResponseIntegerInt8ArrayArrayOperation
														r.summary = ""
														r.operationID = "test_response_integer_int8_array_array"
														r.pathPattern = "/test_response_integer_int8_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseIntegerInt8NullableOperation
													r.summary = ""
													r.operationID = "test_response_integer_int8_nullable"
													r.pathPattern = "/test_response_integer_int8_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseIntegerInt8NullableArrayOperation
														r.summary = ""
														r.operationID = "test_response_integer_int8_nullable_array"
														r.pathPattern = "/test_response_integer_int8_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestResponseIntegerInt8NullableArrayArrayOperation
															r.summary = ""
															r.operationID = "test_response_integer_int8_nullable_array_array"
															r.pathPattern = "/test_response_integer_int8_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											}

										}

									}

								}

							case 'n': // Prefix: "nullable"

								if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = TestResponseIntegerNullableOperation
										r.summary = ""
										r.operationID = "test_response_integer_nullable"
										r.pathPattern = "/test_response_integer_nullable"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '_': // Prefix: "_array"

									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestResponseIntegerNullableArrayOperation
											r.summary = ""
											r.operationID = "test_response_integer_nullable_array"
											r.pathPattern = "/test_response_integer_nullable_array"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_array"

										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "POST":
												r.name = TestResponseIntegerNullableArrayArrayOperation
												r.summary = ""
												r.operationID = "test_response_integer_nullable_array_array"
												r.pathPattern = "/test_response_integer_nullable_array_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}

									}

								}

							case 'u': // Prefix: "u"

								if l := len("u"); len(elem) >= l && elem[0:l] == "u" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'i': // Prefix: "int"

									if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestResponseIntegerUintOperation
											r.summary = ""
											r.operationID = "test_response_integer_uint"
											r.pathPattern = "/test_response_integer_uint"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '1': // Prefix: "16"

										if l := len("16"); len(elem) >= l && elem[0:l] == "16" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestResponseIntegerUint16Operation
												r.summary = ""
												r.operationID = "test_response_integer_uint16"
												r.pathPattern = "/test_response_integer_uint16"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseIntegerUint16ArrayOperation
														r.summary = ""
														r.operationID = "test_response_integer_uint16_array"
														r.pathPattern = "/test_response_integer_uint16_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestResponseIntegerUint16ArrayArrayOperation
															r.summary = ""
															r.operationID = "test_response_integer_uint16_array_array"
															r.pathPattern = "/test_response_integer_uint16_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseIntegerUint16NullableOperation
														r.summary = ""
														r.operationID = "test_response_integer_uint16_nullable"
														r.pathPattern = "/test_response_integer_uint16_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestResponseIntegerUint16NullableArrayOperation
															r.summary = ""
															r.operationID = "test_response_integer_uint16_nullable_array"
															r.pathPattern = "/test_response_integer_uint16_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestResponseIntegerUint16NullableArrayArrayOperation
																r.summary = ""
																r.operationID = "test_response_integer_uint16_nullable_array_array"
																r.pathPattern = "/test_response_integer_uint16_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												}

											}

										}

									case '3': // Prefix: "32"

										if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestResponseIntegerUint32Operation
												r.summary = ""
												r.operationID = "test_response_integer_uint32"
												r.pathPattern = "/test_response_integer_uint32"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseIntegerUint32ArrayOperation
														r.summary = ""
														r.operationID = "test_response_integer_uint32_array"
														r.pathPattern = "/test_response_integer_uint32_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestResponseIntegerUint32ArrayArrayOperation
															r.summary = ""
															r.operationID = "test_response_integer_uint32_array_array"
															r.pathPattern = "/test_response_integer_uint32_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseIntegerUint32NullableOperation
														r.summary = ""
														r.operationID = "test_response_integer_uint32_nullable"
														r.pathPattern = "/test_response_integer_uint32_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestResponseIntegerUint32NullableArrayOperation
															r.summary = ""
															r.operationID = "test_response_integer_uint32_nullable_array"
															r.pathPattern = "/test_response_integer_uint32_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestResponseIntegerUint32NullableArrayArrayOperation
																r.summary = ""
																r.operationID = "test_response_integer_uint32_nullable_array_array"
																r.pathPattern = "/test_response_integer_uint32_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												}

											}

										}

									case '6': // Prefix: "64"

										if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestResponseIntegerUint64Operation
												r.summary = ""
												r.operationID = "test_response_integer_uint64"
												r.pathPattern = "/test_response_integer_uint64"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseIntegerUint64ArrayOperation
														r.summary = ""
														r.operationID = "test_response_integer_uint64_array"
														r.pathPattern = "/test_response_integer_uint64_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestResponseIntegerUint64ArrayArrayOperation
															r.summary = ""
															r.operationID = "test_response_integer_uint64_array_array"
															r.pathPattern = "/test_response_integer_uint64_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseIntegerUint64NullableOperation
														r.summary = ""
														r.operationID = "test_response_integer_uint64_nullable"
														r.pathPattern = "/test_response_integer_uint64_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestResponseIntegerUint64NullableArrayOperation
															r.summary = ""
															r.operationID = "test_response_integer_uint64_nullable_array"
															r.pathPattern = "/test_response_integer_uint64_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestResponseIntegerUint64NullableArrayArrayOperation
																r.summary = ""
																r.operationID = "test_response_integer_uint64_nullable_array_array"
																r.pathPattern = "/test_response_integer_uint64_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												}

											}

										}

									case '8': // Prefix: "8"

										if l := len("8"); len(elem) >= l && elem[0:l] == "8" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestResponseIntegerUint8Operation
												r.summary = ""
												r.operationID = "test_response_integer_uint8"
												r.pathPattern = "/test_response_integer_uint8"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseIntegerUint8ArrayOperation
														r.summary = ""
														r.operationID = "test_response_integer_uint8_array"
														r.pathPattern = "/test_response_integer_uint8_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestResponseIntegerUint8ArrayArrayOperation
															r.summary = ""
															r.operationID = "test_response_integer_uint8_array_array"
															r.pathPattern = "/test_response_integer_uint8_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseIntegerUint8NullableOperation
														r.summary = ""
														r.operationID = "test_response_integer_uint8_nullable"
														r.pathPattern = "/test_response_integer_uint8_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestResponseIntegerUint8NullableArrayOperation
															r.summary = ""
															r.operationID = "test_response_integer_uint8_nullable_array"
															r.pathPattern = "/test_response_integer_uint8_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestResponseIntegerUint8NullableArrayArrayOperation
																r.summary = ""
																r.operationID = "test_response_integer_uint8_nullable_array_array"
																r.pathPattern = "/test_response_integer_uint8_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												}

											}

										}

									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseIntegerUintArrayOperation
													r.summary = ""
													r.operationID = "test_response_integer_uint_array"
													r.pathPattern = "/test_response_integer_uint_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestResponseIntegerUintArrayArrayOperation
														r.summary = ""
														r.operationID = "test_response_integer_uint_array_array"
														r.pathPattern = "/test_response_integer_uint_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseIntegerUintNullableOperation
													r.summary = ""
													r.operationID = "test_response_integer_uint_nullable"
													r.pathPattern = "/test_response_integer_uint_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseIntegerUintNullableArrayOperation
														r.summary = ""
														r.operationID = "test_response_integer_uint_nullable_array"
														r.pathPattern = "/test_response_integer_uint_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestResponseIntegerUintNullableArrayArrayOperation
															r.summary = ""
															r.operationID = "test_response_integer_uint_nullable_array_array"
															r.pathPattern = "/test_response_integer_uint_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											}

										}

									}

								case 'n': // Prefix: "nix"

									if l := len("nix"); len(elem) >= l && elem[0:l] == "nix" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestResponseIntegerUnixOperation
											r.summary = ""
											r.operationID = "test_response_integer_unix"
											r.pathPattern = "/test_response_integer_unix"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '-': // Prefix: "-"

										if l := len("-"); len(elem) >= l && elem[0:l] == "-" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'm': // Prefix: "mi"

											if l := len("mi"); len(elem) >= l && elem[0:l] == "mi" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'c': // Prefix: "cro"

												if l := len("cro"); len(elem) >= l && elem[0:l] == "cro" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseIntegerUnixMicroOperation
														r.summary = ""
														r.operationID = "test_response_integer_unix-micro"
														r.pathPattern = "/test_response_integer_unix-micro"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_"

													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"

														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestResponseIntegerUnixMicroArrayOperation
																r.summary = ""
																r.operationID = "test_response_integer_unix-micro_array"
																r.pathPattern = "/test_response_integer_unix-micro_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch method {
																case "POST":
																	r.name = TestResponseIntegerUnixMicroArrayArrayOperation
																	r.summary = ""
																	r.operationID = "test_response_integer_unix-micro_array_array"
																	r.pathPattern = "/test_response_integer_unix-micro_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}

														}

													case 'n': // Prefix: "nullable"

														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestResponseIntegerUnixMicroNullableOperation
																r.summary = ""
																r.operationID = "test_response_integer_unix-micro_nullable"
																r.pathPattern = "/test_response_integer_unix-micro_nullable"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	r.name = TestResponseIntegerUnixMicroNullableArrayOperation
																	r.summary = ""
																	r.operationID = "test_response_integer_unix-micro_nullable_array"
																	r.pathPattern = "/test_response_integer_unix-micro_nullable_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
															switch elem[0] {
															case '_': // Prefix: "_array"

																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch method {
																	case "POST":
																		r.name = TestResponseIntegerUnixMicroNullableArrayArrayOperation
																		r.summary = ""
																		r.operationID = "test_response_integer_unix-micro_nullable_array_array"
																		r.pathPattern = "/test_response_integer_unix-micro_nullable_array_array"
																		r.args = args
																		r.count = 0
																		return r, true
																	default:
																		return
																	}
																}

															}

														}

													}

												}

											case 'l': // Prefix: "lli"

												if l := len("lli"); len(elem) >= l && elem[0:l] == "lli" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseIntegerUnixMilliOperation
														r.summary = ""
														r.operationID = "test_response_integer_unix-milli"
														r.pathPattern = "/test_response_integer_unix-milli"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_"

													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"

														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestResponseIntegerUnixMilliArrayOperation
																r.summary = ""
																r.operationID = "test_response_integer_unix-milli_array"
																r.pathPattern = "/test_response_integer_unix-milli_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch method {
																case "POST":
																	r.name = TestResponseIntegerUnixMilliArrayArrayOperation
																	r.summary = ""
																	r.operationID = "test_response_integer_unix-milli_array_array"
																	r.pathPattern = "/test_response_integer_unix-milli_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}

														}

													case 'n': // Prefix: "nullable"

														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestResponseIntegerUnixMilliNullableOperation
																r.summary = ""
																r.operationID = "test_response_integer_unix-milli_nullable"
																r.pathPattern = "/test_response_integer_unix-milli_nullable"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	r.name = TestResponseIntegerUnixMilliNullableArrayOperation
																	r.summary = ""
																	r.operationID = "test_response_integer_unix-milli_nullable_array"
																	r.pathPattern = "/test_response_integer_unix-milli_nullable_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
															switch elem[0] {
															case '_': // Prefix: "_array"

																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch method {
																	case "POST":
																		r.name = TestResponseIntegerUnixMilliNullableArrayArrayOperation
																		r.summary = ""
																		r.operationID = "test_response_integer_unix-milli_nullable_array_array"
																		r.pathPattern = "/test_response_integer_unix-milli_nullable_array_array"
																		r.args = args
																		r.count = 0
																		return r, true
																	default:
																		return
																	}
																}

															}

														}

													}

												}

											}

										case 'n': // Prefix: "nano"

											if l := len("nano"); len(elem) >= l && elem[0:l] == "nano" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseIntegerUnixNanoOperation
													r.summary = ""
													r.operationID = "test_response_integer_unix-nano"
													r.pathPattern = "/test_response_integer_unix-nano"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestResponseIntegerUnixNanoArrayOperation
															r.summary = ""
															r.operationID = "test_response_integer_unix-nano_array"
															r.pathPattern = "/test_response_integer_unix-nano_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestResponseIntegerUnixNanoArrayArrayOperation
																r.summary = ""
																r.operationID = "test_response_integer_unix-nano_array_array"
																r.pathPattern = "/test_response_integer_unix-nano_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestResponseIntegerUnixNanoNullableOperation
															r.summary = ""
															r.operationID = "test_response_integer_unix-nano_nullable"
															r.pathPattern = "/test_response_integer_unix-nano_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestResponseIntegerUnixNanoNullableArrayOperation
																r.summary = ""
																r.operationID = "test_response_integer_unix-nano_nullable_array"
																r.pathPattern = "/test_response_integer_unix-nano_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch method {
																case "POST":
																	r.name = TestResponseIntegerUnixNanoNullableArrayArrayOperation
																	r.summary = ""
																	r.operationID = "test_response_integer_unix-nano_nullable_array_array"
																	r.pathPattern = "/test_response_integer_unix-nano_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}

														}

													}

												}

											}

										case 's': // Prefix: "seconds"

											if l := len("seconds"); len(elem) >= l && elem[0:l] == "seconds" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseIntegerUnixSecondsOperation
													r.summary = ""
													r.operationID = "test_response_integer_unix-seconds"
													r.pathPattern = "/test_response_integer_unix-seconds"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestResponseIntegerUnixSecondsArrayOperation
															r.summary = ""
															r.operationID = "test_response_integer_unix-seconds_array"
															r.pathPattern = "/test_response_integer_unix-seconds_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestResponseIntegerUnixSecondsArrayArrayOperation
																r.summary = ""
																r.operationID = "test_response_integer_unix-seconds_array_array"
																r.pathPattern = "/test_response_integer_unix-seconds_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestResponseIntegerUnixSecondsNullableOperation
															r.summary = ""
															r.operationID = "test_response_integer_unix-seconds_nullable"
															r.pathPattern = "/test_response_integer_unix-seconds_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestResponseIntegerUnixSecondsNullableArrayOperation
																r.summary = ""
																r.operationID = "test_response_integer_unix-seconds_nullable_array"
																r.pathPattern = "/test_response_integer_unix-seconds_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch method {
																case "POST":
																	r.name = TestResponseIntegerUnixSecondsNullableArrayArrayOperation
																	r.summary = ""
																	r.operationID = "test_response_integer_unix-seconds_nullable_array_array"
																	r.pathPattern = "/test_response_integer_unix-seconds_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}

														}

													}

												}

											}

										}

									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseIntegerUnixArrayOperation
													r.summary = ""
													r.operationID = "test_response_integer_unix_array"
													r.pathPattern = "/test_response_integer_unix_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestResponseIntegerUnixArrayArrayOperation
														r.summary = ""
														r.operationID = "test_response_integer_unix_array_array"
														r.pathPattern = "/test_response_integer_unix_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseIntegerUnixNullableOperation
													r.summary = ""
													r.operationID = "test_response_integer_unix_nullable"
													r.pathPattern = "/test_response_integer_unix_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseIntegerUnixNullableArrayOperation
														r.summary = ""
														r.operationID = "test_response_integer_unix_nullable_array"
														r.pathPattern = "/test_response_integer_unix_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestResponseIntegerUnixNullableArrayArrayOperation
															r.summary = ""
															r.operationID = "test_response_integer_unix_nullable_array_array"
															r.pathPattern = "/test_response_integer_unix_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											}

										}

									}

								}

							}

						}

					case 'n': // Prefix: "nu"

						if l := len("nu"); len(elem) >= l && elem[0:l] == "nu" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'l': // Prefix: "ll"

							if l := len("ll"); len(elem) >= l && elem[0:l] == "ll" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									r.name = TestResponseNullOperation
									r.summary = ""
									r.operationID = "test_response_null"
									r.pathPattern = "/test_response_null"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '_': // Prefix: "_"

								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "array"

									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestResponseNullArrayOperation
											r.summary = ""
											r.operationID = "test_response_null_array"
											r.pathPattern = "/test_response_null_array"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_array"

										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "POST":
												r.name = TestResponseNullArrayArrayOperation
												r.summary = ""
												r.operationID = "test_response_null_array_array"
												r.pathPattern = "/test_response_null_array_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}

									}

								case 'n': // Prefix: "nullable"

									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestResponseNullNullableOperation
											r.summary = ""
											r.operationID = "test_response_null_nullable"
											r.pathPattern = "/test_response_null_nullable"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_array"

										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestResponseNullNullableArrayOperation
												r.summary = ""
												r.operationID = "test_response_null_nullable_array"
												r.pathPattern = "/test_response_null_nullable_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch method {
												case "POST":
													r.name = TestResponseNullNullableArrayArrayOperation
													r.summary = ""
													r.operationID = "test_response_null_nullable_array_array"
													r.pathPattern = "/test_response_null_nullable_array_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}

										}

									}

								}

							}

						case 'm': // Prefix: "mber"

							if l := len("mber"); len(elem) >= l && elem[0:l] == "mber" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									r.name = TestResponseNumberOperation
									r.summary = ""
									r.operationID = "test_response_number"
									r.pathPattern = "/test_response_number"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '_': // Prefix: "_"

								if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "array"

									if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestResponseNumberArrayOperation
											r.summary = ""
											r.operationID = "test_response_number_array"
											r.pathPattern = "/test_response_number_array"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_array"

										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "POST":
												r.name = TestResponseNumberArrayArrayOperation
												r.summary = ""
												r.operationID = "test_response_number_array_array"
												r.pathPattern = "/test_response_number_array_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}

									}

								case 'd': // Prefix: "double"

									if l := len("double"); len(elem) >= l && elem[0:l] == "double" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestResponseNumberDoubleOperation
											r.summary = ""
											r.operationID = "test_response_number_double"
											r.pathPattern = "/test_response_number_double"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseNumberDoubleArrayOperation
													r.summary = ""
													r.operationID = "test_response_number_double_array"
													r.pathPattern = "/test_response_number_double_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestResponseNumberDoubleArrayArrayOperation
														r.summary = ""
														r.operationID = "test_response_number_double_array_array"
														r.pathPattern = "/test_response_number_double_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseNumberDoubleNullableOperation
													r.summary = ""
													r.operationID = "test_response_number_double_nullable"
													r.pathPattern = "/test_response_number_double_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseNumberDoubleNullableArrayOperation
														r.summary = ""
														r.operationID = "test_response_number_double_nullable_array"
														r.pathPattern = "/test_response_number_double_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestResponseNumberDoubleNullableArrayArrayOperation
															r.summary = ""
															r.operationID = "test_response_number_double_nullable_array_array"
															r.pathPattern = "/test_response_number_double_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											}

										}

									}

								case 'f': // Prefix: "float"

									if l := len("float"); len(elem) >= l && elem[0:l] == "float" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestResponseNumberFloatOperation
											r.summary = ""
											r.operationID = "test_response_number_float"
											r.pathPattern = "/test_response_number_float"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseNumberFloatArrayOperation
													r.summary = ""
													r.operationID = "test_response_number_float_array"
													r.pathPattern = "/test_response_number_float_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestResponseNumberFloatArrayArrayOperation
														r.summary = ""
														r.operationID = "test_response_number_float_array_array"
														r.pathPattern = "/test_response_number_float_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseNumberFloatNullableOperation
													r.summary = ""
													r.operationID = "test_response_number_float_nullable"
													r.pathPattern = "/test_response_number_float_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseNumberFloatNullableArrayOperation
														r.summary = ""
														r.operationID = "test_response_number_float_nullable_array"
														r.pathPattern = "/test_response_number_float_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestResponseNumberFloatNullableArrayArrayOperation
															r.summary = ""
															r.operationID = "test_response_number_float_nullable_array_array"
															r.pathPattern = "/test_response_number_float_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											}

										}

									}

								case 'i': // Prefix: "int"

									if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '3': // Prefix: "32"

										if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestResponseNumberInt32Operation
												r.summary = ""
												r.operationID = "test_response_number_int32"
												r.pathPattern = "/test_response_number_int32"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseNumberInt32ArrayOperation
														r.summary = ""
														r.operationID = "test_response_number_int32_array"
														r.pathPattern = "/test_response_number_int32_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestResponseNumberInt32ArrayArrayOperation
															r.summary = ""
															r.operationID = "test_response_number_int32_array_array"
															r.pathPattern = "/test_response_number_int32_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseNumberInt32NullableOperation
														r.summary = ""
														r.operationID = "test_response_number_int32_nullable"
														r.pathPattern = "/test_response_number_int32_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestResponseNumberInt32NullableArrayOperation
															r.summary = ""
															r.operationID = "test_response_number_int32_nullable_array"
															r.pathPattern = "/test_response_number_int32_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestResponseNumberInt32NullableArrayArrayOperation
																r.summary = ""
																r.operationID = "test_response_number_int32_nullable_array_array"
																r.pathPattern = "/test_response_number_int32_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												}

											}

										}

									case '6': // Prefix: "64"

										if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestResponseNumberInt64Operation
												r.summary = ""
												r.operationID = "test_response_number_int64"
												r.pathPattern = "/test_response_number_int64"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseNumberInt64ArrayOperation
														r.summary = ""
														r.operationID = "test_response_number_int64_array"
														r.pathPattern = "/test_response_number_int64_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestResponseNumberInt64ArrayArrayOperation
															r.summary = ""
															r.operationID = "test_response_number_int64_array_array"
															r.pathPattern = "/test_response_number_int64_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseNumberInt64NullableOperation
														r.summary = ""
														r.operationID = "test_response_number_int64_nullable"
														r.pathPattern = "/test_response_number_int64_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestResponseNumberInt64NullableArrayOperation
															r.summary = ""
															r.operationID = "test_response_number_int64_nullable_array"
															r.pathPattern = "/test_response_number_int64_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestResponseNumberInt64NullableArrayArrayOperation
																r.summary = ""
																r.operationID = "test_response_number_int64_nullable_array_array"
																r.pathPattern = "/test_response_number_int64_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												}

											}

										}

									}

								case 'n': // Prefix: "nullable"

									if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestResponseNumberNullableOperation
											r.summary = ""
											r.operationID = "test_response_number_nullable"
											r.pathPattern = "/test_response_number_nullable"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_array"

										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestResponseNumberNullableArrayOperation
												r.summary = ""
												r.operationID = "test_response_number_nullable_array"
												r.pathPattern = "/test_response_number_nullable_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch method {
												case "POST":
													r.name = TestResponseNumberNullableArrayArrayOperation
													r.summary = ""
													r.operationID = "test_response_number_nullable_array_array"
													r.pathPattern = "/test_response_number_nullable_array_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}

										}

									}

								}

							}

						}

					case 's': // Prefix: "string"

						if l := len("string"); len(elem) >= l && elem[0:l] == "string" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								r.name = TestResponseStringOperation
								r.summary = ""
								r.operationID = "test_response_string"
								r.pathPattern = "/test_response_string"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '_': // Prefix: "_"

							if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "array"

								if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = TestResponseStringArrayOperation
										r.summary = ""
										r.operationID = "test_response_string_array"
										r.pathPattern = "/test_response_string_array"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '_': // Prefix: "_array"

									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "POST":
											r.name = TestResponseStringArrayArrayOperation
											r.summary = ""
											r.operationID = "test_response_string_array_array"
											r.pathPattern = "/test_response_string_array_array"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}

								}

							case 'b': // Prefix: "b"

								if l := len("b"); len(elem) >= l && elem[0:l] == "b" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "ase64"

									if l := len("ase64"); len(elem) >= l && elem[0:l] == "ase64" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestResponseStringBase64Operation
											r.summary = ""
											r.operationID = "test_response_string_base64"
											r.pathPattern = "/test_response_string_base64"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseStringBase64ArrayOperation
													r.summary = ""
													r.operationID = "test_response_string_base64_array"
													r.pathPattern = "/test_response_string_base64_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestResponseStringBase64ArrayArrayOperation
														r.summary = ""
														r.operationID = "test_response_string_base64_array_array"
														r.pathPattern = "/test_response_string_base64_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseStringBase64NullableOperation
													r.summary = ""
													r.operationID = "test_response_string_base64_nullable"
													r.pathPattern = "/test_response_string_base64_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseStringBase64NullableArrayOperation
														r.summary = ""
														r.operationID = "test_response_string_base64_nullable_array"
														r.pathPattern = "/test_response_string_base64_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestResponseStringBase64NullableArrayArrayOperation
															r.summary = ""
															r.operationID = "test_response_string_base64_nullable_array_array"
															r.pathPattern = "/test_response_string_base64_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											}

										}

									}

								case 'i': // Prefix: "inary"

									if l := len("inary"); len(elem) >= l && elem[0:l] == "inary" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestResponseStringBinaryOperation
											r.summary = ""
											r.operationID = "test_response_string_binary"
											r.pathPattern = "/test_response_string_binary"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseStringBinaryArrayOperation
													r.summary = ""
													r.operationID = "test_response_string_binary_array"
													r.pathPattern = "/test_response_string_binary_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestResponseStringBinaryArrayArrayOperation
														r.summary = ""
														r.operationID = "test_response_string_binary_array_array"
														r.pathPattern = "/test_response_string_binary_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseStringBinaryNullableOperation
													r.summary = ""
													r.operationID = "test_response_string_binary_nullable"
													r.pathPattern = "/test_response_string_binary_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseStringBinaryNullableArrayOperation
														r.summary = ""
														r.operationID = "test_response_string_binary_nullable_array"
														r.pathPattern = "/test_response_string_binary_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestResponseStringBinaryNullableArrayArrayOperation
															r.summary = ""
															r.operationID = "test_response_string_binary_nullable_array_array"
															r.pathPattern = "/test_response_string_binary_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											}

										}

									}

								case 'y': // Prefix: "yte"

									if l := len("yte"); len(elem) >= l && elem[0:l] == "yte" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestResponseStringByteOperation
											r.summary = ""
											r.operationID = "test_response_string_byte"
											r.pathPattern = "/test_response_string_byte"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseStringByteArrayOperation
													r.summary = ""
													r.operationID = "test_response_string_byte_array"
													r.pathPattern = "/test_response_string_byte_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestResponseStringByteArrayArrayOperation
														r.summary = ""
														r.operationID = "test_response_string_byte_array_array"
														r.pathPattern = "/test_response_string_byte_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseStringByteNullableOperation
													r.summary = ""
													r.operationID = "test_response_string_byte_nullable"
													r.pathPattern = "/test_response_string_byte_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseStringByteNullableArrayOperation
														r.summary = ""
														r.operationID = "test_response_string_byte_nullable_array"
														r.pathPattern = "/test_response_string_byte_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestResponseStringByteNullableArrayArrayOperation
															r.summary = ""
															r.operationID = "test_response_string_byte_nullable_array_array"
															r.pathPattern = "/test_response_string_byte_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											}

										}

									}

								}

							case 'd': // Prefix: "d"

								if l := len("d"); len(elem) >= l && elem[0:l] == "d" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "ate"

									if l := len("ate"); len(elem) >= l && elem[0:l] == "ate" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestResponseStringDateOperation
											r.summary = ""
											r.operationID = "test_response_string_date"
											r.pathPattern = "/test_response_string_date"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '-': // Prefix: "-time"

										if l := len("-time"); len(elem) >= l && elem[0:l] == "-time" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestResponseStringDateTimeOperation
												r.summary = ""
												r.operationID = "test_response_string_date-time"
												r.pathPattern = "/test_response_string_date-time"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseStringDateTimeArrayOperation
														r.summary = ""
														r.operationID = "test_response_string_date-time_array"
														r.pathPattern = "/test_response_string_date-time_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestResponseStringDateTimeArrayArrayOperation
															r.summary = ""
															r.operationID = "test_response_string_date-time_array_array"
															r.pathPattern = "/test_response_string_date-time_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseStringDateTimeNullableOperation
														r.summary = ""
														r.operationID = "test_response_string_date-time_nullable"
														r.pathPattern = "/test_response_string_date-time_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestResponseStringDateTimeNullableArrayOperation
															r.summary = ""
															r.operationID = "test_response_string_date-time_nullable_array"
															r.pathPattern = "/test_response_string_date-time_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestResponseStringDateTimeNullableArrayArrayOperation
																r.summary = ""
																r.operationID = "test_response_string_date-time_nullable_array_array"
																r.pathPattern = "/test_response_string_date-time_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												}

											}

										}

									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseStringDateArrayOperation
													r.summary = ""
													r.operationID = "test_response_string_date_array"
													r.pathPattern = "/test_response_string_date_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestResponseStringDateArrayArrayOperation
														r.summary = ""
														r.operationID = "test_response_string_date_array_array"
														r.pathPattern = "/test_response_string_date_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseStringDateNullableOperation
													r.summary = ""
													r.operationID = "test_response_string_date_nullable"
													r.pathPattern = "/test_response_string_date_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseStringDateNullableArrayOperation
														r.summary = ""
														r.operationID = "test_response_string_date_nullable_array"
														r.pathPattern = "/test_response_string_date_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestResponseStringDateNullableArrayArrayOperation
															r.summary = ""
															r.operationID = "test_response_string_date_nullable_array_array"
															r.pathPattern = "/test_response_string_date_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											}

										}

									}

								case 'u': // Prefix: "uration"

									if l := len("uration"); len(elem) >= l && elem[0:l] == "uration" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestResponseStringDurationOperation
											r.summary = ""
											r.operationID = "test_response_string_duration"
											r.pathPattern = "/test_response_string_duration"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseStringDurationArrayOperation
													r.summary = ""
													r.operationID = "test_response_string_duration_array"
													r.pathPattern = "/test_response_string_duration_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestResponseStringDurationArrayArrayOperation
														r.summary = ""
														r.operationID = "test_response_string_duration_array_array"
														r.pathPattern = "/test_response_string_duration_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseStringDurationNullableOperation
													r.summary = ""
													r.operationID = "test_response_string_duration_nullable"
													r.pathPattern = "/test_response_string_duration_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseStringDurationNullableArrayOperation
														r.summary = ""
														r.operationID = "test_response_string_duration_nullable_array"
														r.pathPattern = "/test_response_string_duration_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestResponseStringDurationNullableArrayArrayOperation
															r.summary = ""
															r.operationID = "test_response_string_duration_nullable_array_array"
															r.pathPattern = "/test_response_string_duration_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											}

										}

									}

								}

							case 'e': // Prefix: "email"

								if l := len("email"); len(elem) >= l && elem[0:l] == "email" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = TestResponseStringEmailOperation
										r.summary = ""
										r.operationID = "test_response_string_email"
										r.pathPattern = "/test_response_string_email"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '_': // Prefix: "_"

									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "array"

										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestResponseStringEmailArrayOperation
												r.summary = ""
												r.operationID = "test_response_string_email_array"
												r.pathPattern = "/test_response_string_email_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch method {
												case "POST":
													r.name = TestResponseStringEmailArrayArrayOperation
													r.summary = ""
													r.operationID = "test_response_string_email_array_array"
													r.pathPattern = "/test_response_string_email_array_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}

										}

									case 'n': // Prefix: "nullable"

										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestResponseStringEmailNullableOperation
												r.summary = ""
												r.operationID = "test_response_string_email_nullable"
												r.pathPattern = "/test_response_string_email_nullable"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseStringEmailNullableArrayOperation
													r.summary = ""
													r.operationID = "test_response_string_email_nullable_array"
													r.pathPattern = "/test_response_string_email_nullable_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestResponseStringEmailNullableArrayArrayOperation
														r.summary = ""
														r.operationID = "test_response_string_email_nullable_array_array"
														r.pathPattern = "/test_response_string_email_nullable_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										}

									}

								}

							case 'f': // Prefix: "float"

								if l := len("float"); len(elem) >= l && elem[0:l] == "float" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case '3': // Prefix: "32"

									if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestResponseStringFloat32Operation
											r.summary = ""
											r.operationID = "test_response_string_float32"
											r.pathPattern = "/test_response_string_float32"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseStringFloat32ArrayOperation
													r.summary = ""
													r.operationID = "test_response_string_float32_array"
													r.pathPattern = "/test_response_string_float32_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestResponseStringFloat32ArrayArrayOperation
														r.summary = ""
														r.operationID = "test_response_string_float32_array_array"
														r.pathPattern = "/test_response_string_float32_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseStringFloat32NullableOperation
													r.summary = ""
													r.operationID = "test_response_string_float32_nullable"
													r.pathPattern = "/test_response_string_float32_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseStringFloat32NullableArrayOperation
														r.summary = ""
														r.operationID = "test_response_string_float32_nullable_array"
														r.pathPattern = "/test_response_string_float32_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestResponseStringFloat32NullableArrayArrayOperation
															r.summary = ""
															r.operationID = "test_response_string_float32_nullable_array_array"
															r.pathPattern = "/test_response_string_float32_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											}

										}

									}

								case '6': // Prefix: "64"

									if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestResponseStringFloat64Operation
											r.summary = ""
											r.operationID = "test_response_string_float64"
											r.pathPattern = "/test_response_string_float64"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseStringFloat64ArrayOperation
													r.summary = ""
													r.operationID = "test_response_string_float64_array"
													r.pathPattern = "/test_response_string_float64_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestResponseStringFloat64ArrayArrayOperation
														r.summary = ""
														r.operationID = "test_response_string_float64_array_array"
														r.pathPattern = "/test_response_string_float64_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseStringFloat64NullableOperation
													r.summary = ""
													r.operationID = "test_response_string_float64_nullable"
													r.pathPattern = "/test_response_string_float64_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseStringFloat64NullableArrayOperation
														r.summary = ""
														r.operationID = "test_response_string_float64_nullable_array"
														r.pathPattern = "/test_response_string_float64_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestResponseStringFloat64NullableArrayArrayOperation
															r.summary = ""
															r.operationID = "test_response_string_float64_nullable_array_array"
															r.pathPattern = "/test_response_string_float64_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											}

										}

									}

								}

							case 'h': // Prefix: "hostname"

								if l := len("hostname"); len(elem) >= l && elem[0:l] == "hostname" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = TestResponseStringHostnameOperation
										r.summary = ""
										r.operationID = "test_response_string_hostname"
										r.pathPattern = "/test_response_string_hostname"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '_': // Prefix: "_"

									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "array"

										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestResponseStringHostnameArrayOperation
												r.summary = ""
												r.operationID = "test_response_string_hostname_array"
												r.pathPattern = "/test_response_string_hostname_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch method {
												case "POST":
													r.name = TestResponseStringHostnameArrayArrayOperation
													r.summary = ""
													r.operationID = "test_response_string_hostname_array_array"
													r.pathPattern = "/test_response_string_hostname_array_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}

										}

									case 'n': // Prefix: "nullable"

										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestResponseStringHostnameNullableOperation
												r.summary = ""
												r.operationID = "test_response_string_hostname_nullable"
												r.pathPattern = "/test_response_string_hostname_nullable"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseStringHostnameNullableArrayOperation
													r.summary = ""
													r.operationID = "test_response_string_hostname_nullable_array"
													r.pathPattern = "/test_response_string_hostname_nullable_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestResponseStringHostnameNullableArrayArrayOperation
														r.summary = ""
														r.operationID = "test_response_string_hostname_nullable_array_array"
														r.pathPattern = "/test_response_string_hostname_nullable_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										}

									}

								}

							case 'i': // Prefix: "i"

								if l := len("i"); len(elem) >= l && elem[0:l] == "i" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'n': // Prefix: "nt"

									if l := len("nt"); len(elem) >= l && elem[0:l] == "nt" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestResponseStringIntOperation
											r.summary = ""
											r.operationID = "test_response_string_int"
											r.pathPattern = "/test_response_string_int"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '1': // Prefix: "16"

										if l := len("16"); len(elem) >= l && elem[0:l] == "16" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestResponseStringInt16Operation
												r.summary = ""
												r.operationID = "test_response_string_int16"
												r.pathPattern = "/test_response_string_int16"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseStringInt16ArrayOperation
														r.summary = ""
														r.operationID = "test_response_string_int16_array"
														r.pathPattern = "/test_response_string_int16_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestResponseStringInt16ArrayArrayOperation
															r.summary = ""
															r.operationID = "test_response_string_int16_array_array"
															r.pathPattern = "/test_response_string_int16_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseStringInt16NullableOperation
														r.summary = ""
														r.operationID = "test_response_string_int16_nullable"
														r.pathPattern = "/test_response_string_int16_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestResponseStringInt16NullableArrayOperation
															r.summary = ""
															r.operationID = "test_response_string_int16_nullable_array"
															r.pathPattern = "/test_response_string_int16_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestResponseStringInt16NullableArrayArrayOperation
																r.summary = ""
																r.operationID = "test_response_string_int16_nullable_array_array"
																r.pathPattern = "/test_response_string_int16_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												}

											}

										}

									case '3': // Prefix: "32"

										if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestResponseStringInt32Operation
												r.summary = ""
												r.operationID = "test_response_string_int32"
												r.pathPattern = "/test_response_string_int32"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseStringInt32ArrayOperation
														r.summary = ""
														r.operationID = "test_response_string_int32_array"
														r.pathPattern = "/test_response_string_int32_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestResponseStringInt32ArrayArrayOperation
															r.summary = ""
															r.operationID = "test_response_string_int32_array_array"
															r.pathPattern = "/test_response_string_int32_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseStringInt32NullableOperation
														r.summary = ""
														r.operationID = "test_response_string_int32_nullable"
														r.pathPattern = "/test_response_string_int32_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestResponseStringInt32NullableArrayOperation
															r.summary = ""
															r.operationID = "test_response_string_int32_nullable_array"
															r.pathPattern = "/test_response_string_int32_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestResponseStringInt32NullableArrayArrayOperation
																r.summary = ""
																r.operationID = "test_response_string_int32_nullable_array_array"
																r.pathPattern = "/test_response_string_int32_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												}

											}

										}

									case '6': // Prefix: "64"

										if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestResponseStringInt64Operation
												r.summary = ""
												r.operationID = "test_response_string_int64"
												r.pathPattern = "/test_response_string_int64"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseStringInt64ArrayOperation
														r.summary = ""
														r.operationID = "test_response_string_int64_array"
														r.pathPattern = "/test_response_string_int64_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestResponseStringInt64ArrayArrayOperation
															r.summary = ""
															r.operationID = "test_response_string_int64_array_array"
															r.pathPattern = "/test_response_string_int64_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseStringInt64NullableOperation
														r.summary = ""
														r.operationID = "test_response_string_int64_nullable"
														r.pathPattern = "/test_response_string_int64_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestResponseStringInt64NullableArrayOperation
															r.summary = ""
															r.operationID = "test_response_string_int64_nullable_array"
															r.pathPattern = "/test_response_string_int64_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestResponseStringInt64NullableArrayArrayOperation
																r.summary = ""
																r.operationID = "test_response_string_int64_nullable_array_array"
																r.pathPattern = "/test_response_string_int64_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												}

											}

										}

									case '8': // Prefix: "8"

										if l := len("8"); len(elem) >= l && elem[0:l] == "8" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestResponseStringInt8Operation
												r.summary = ""
												r.operationID = "test_response_string_int8"
												r.pathPattern = "/test_response_string_int8"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseStringInt8ArrayOperation
														r.summary = ""
														r.operationID = "test_response_string_int8_array"
														r.pathPattern = "/test_response_string_int8_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestResponseStringInt8ArrayArrayOperation
															r.summary = ""
															r.operationID = "test_response_string_int8_array_array"
															r.pathPattern = "/test_response_string_int8_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseStringInt8NullableOperation
														r.summary = ""
														r.operationID = "test_response_string_int8_nullable"
														r.pathPattern = "/test_response_string_int8_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestResponseStringInt8NullableArrayOperation
															r.summary = ""
															r.operationID = "test_response_string_int8_nullable_array"
															r.pathPattern = "/test_response_string_int8_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestResponseStringInt8NullableArrayArrayOperation
																r.summary = ""
																r.operationID = "test_response_string_int8_nullable_array_array"
																r.pathPattern = "/test_response_string_int8_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												}

											}

										}

									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseStringIntArrayOperation
													r.summary = ""
													r.operationID = "test_response_string_int_array"
													r.pathPattern = "/test_response_string_int_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestResponseStringIntArrayArrayOperation
														r.summary = ""
														r.operationID = "test_response_string_int_array_array"
														r.pathPattern = "/test_response_string_int_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseStringIntNullableOperation
													r.summary = ""
													r.operationID = "test_response_string_int_nullable"
													r.pathPattern = "/test_response_string_int_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseStringIntNullableArrayOperation
														r.summary = ""
														r.operationID = "test_response_string_int_nullable_array"
														r.pathPattern = "/test_response_string_int_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestResponseStringIntNullableArrayArrayOperation
															r.summary = ""
															r.operationID = "test_response_string_int_nullable_array_array"
															r.pathPattern = "/test_response_string_int_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											}

										}

									}

								case 'p': // Prefix: "p"

									if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestResponseStringIPOperation
											r.summary = ""
											r.operationID = "test_response_string_ip"
											r.pathPattern = "/test_response_string_ip"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseStringIPArrayOperation
													r.summary = ""
													r.operationID = "test_response_string_ip_array"
													r.pathPattern = "/test_response_string_ip_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestResponseStringIPArrayArrayOperation
														r.summary = ""
														r.operationID = "test_response_string_ip_array_array"
														r.pathPattern = "/test_response_string_ip_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseStringIPNullableOperation
													r.summary = ""
													r.operationID = "test_response_string_ip_nullable"
													r.pathPattern = "/test_response_string_ip_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseStringIPNullableArrayOperation
														r.summary = ""
														r.operationID = "test_response_string_ip_nullable_array"
														r.pathPattern = "/test_response_string_ip_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestResponseStringIPNullableArrayArrayOperation
															r.summary = ""
															r.operationID = "test_response_string_ip_nullable_array_array"
															r.pathPattern = "/test_response_string_ip_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											}

										}

									case 'v': // Prefix: "v"

										if l := len("v"); len(elem) >= l && elem[0:l] == "v" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case '4': // Prefix: "4"

											if l := len("4"); len(elem) >= l && elem[0:l] == "4" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseStringIpv4Operation
													r.summary = ""
													r.operationID = "test_response_string_ipv4"
													r.pathPattern = "/test_response_string_ipv4"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestResponseStringIpv4ArrayOperation
															r.summary = ""
															r.operationID = "test_response_string_ipv4_array"
															r.pathPattern = "/test_response_string_ipv4_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestResponseStringIpv4ArrayArrayOperation
																r.summary = ""
																r.operationID = "test_response_string_ipv4_array_array"
																r.pathPattern = "/test_response_string_ipv4_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestResponseStringIpv4NullableOperation
															r.summary = ""
															r.operationID = "test_response_string_ipv4_nullable"
															r.pathPattern = "/test_response_string_ipv4_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestResponseStringIpv4NullableArrayOperation
																r.summary = ""
																r.operationID = "test_response_string_ipv4_nullable_array"
																r.pathPattern = "/test_response_string_ipv4_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch method {
																case "POST":
																	r.name = TestResponseStringIpv4NullableArrayArrayOperation
																	r.summary = ""
																	r.operationID = "test_response_string_ipv4_nullable_array_array"
																	r.pathPattern = "/test_response_string_ipv4_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}

														}

													}

												}

											}

										case '6': // Prefix: "6"

											if l := len("6"); len(elem) >= l && elem[0:l] == "6" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseStringIpv6Operation
													r.summary = ""
													r.operationID = "test_response_string_ipv6"
													r.pathPattern = "/test_response_string_ipv6"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestResponseStringIpv6ArrayOperation
															r.summary = ""
															r.operationID = "test_response_string_ipv6_array"
															r.pathPattern = "/test_response_string_ipv6_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestResponseStringIpv6ArrayArrayOperation
																r.summary = ""
																r.operationID = "test_response_string_ipv6_array_array"
																r.pathPattern = "/test_response_string_ipv6_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestResponseStringIpv6NullableOperation
															r.summary = ""
															r.operationID = "test_response_string_ipv6_nullable"
															r.pathPattern = "/test_response_string_ipv6_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestResponseStringIpv6NullableArrayOperation
																r.summary = ""
																r.operationID = "test_response_string_ipv6_nullable_array"
																r.pathPattern = "/test_response_string_ipv6_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch method {
																case "POST":
																	r.name = TestResponseStringIpv6NullableArrayArrayOperation
																	r.summary = ""
																	r.operationID = "test_response_string_ipv6_nullable_array_array"
																	r.pathPattern = "/test_response_string_ipv6_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}

														}

													}

												}

											}

										}

									}

								}

							case 'm': // Prefix: "mac"

								if l := len("mac"); len(elem) >= l && elem[0:l] == "mac" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = TestResponseStringMACOperation
										r.summary = ""
										r.operationID = "test_response_string_mac"
										r.pathPattern = "/test_response_string_mac"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '_': // Prefix: "_"

									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "array"

										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestResponseStringMACArrayOperation
												r.summary = ""
												r.operationID = "test_response_string_mac_array"
												r.pathPattern = "/test_response_string_mac_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch method {
												case "POST":
													r.name = TestResponseStringMACArrayArrayOperation
													r.summary = ""
													r.operationID = "test_response_string_mac_array_array"
													r.pathPattern = "/test_response_string_mac_array_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}

										}

									case 'n': // Prefix: "nullable"

										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestResponseStringMACNullableOperation
												r.summary = ""
												r.operationID = "test_response_string_mac_nullable"
												r.pathPattern = "/test_response_string_mac_nullable"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseStringMACNullableArrayOperation
													r.summary = ""
													r.operationID = "test_response_string_mac_nullable_array"
													r.pathPattern = "/test_response_string_mac_nullable_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestResponseStringMACNullableArrayArrayOperation
														r.summary = ""
														r.operationID = "test_response_string_mac_nullable_array_array"
														r.pathPattern = "/test_response_string_mac_nullable_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										}

									}

								}

							case 'n': // Prefix: "nullable"

								if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = TestResponseStringNullableOperation
										r.summary = ""
										r.operationID = "test_response_string_nullable"
										r.pathPattern = "/test_response_string_nullable"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '_': // Prefix: "_array"

									if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestResponseStringNullableArrayOperation
											r.summary = ""
											r.operationID = "test_response_string_nullable_array"
											r.pathPattern = "/test_response_string_nullable_array"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_array"

										if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "POST":
												r.name = TestResponseStringNullableArrayArrayOperation
												r.summary = ""
												r.operationID = "test_response_string_nullable_array_array"
												r.pathPattern = "/test_response_string_nullable_array_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}

									}

								}

							case 'p': // Prefix: "password"

								if l := len("password"); len(elem) >= l && elem[0:l] == "password" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = TestResponseStringPasswordOperation
										r.summary = ""
										r.operationID = "test_response_string_password"
										r.pathPattern = "/test_response_string_password"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '_': // Prefix: "_"

									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "array"

										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestResponseStringPasswordArrayOperation
												r.summary = ""
												r.operationID = "test_response_string_password_array"
												r.pathPattern = "/test_response_string_password_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch method {
												case "POST":
													r.name = TestResponseStringPasswordArrayArrayOperation
													r.summary = ""
													r.operationID = "test_response_string_password_array_array"
													r.pathPattern = "/test_response_string_password_array_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}

										}

									case 'n': // Prefix: "nullable"

										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestResponseStringPasswordNullableOperation
												r.summary = ""
												r.operationID = "test_response_string_password_nullable"
												r.pathPattern = "/test_response_string_password_nullable"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseStringPasswordNullableArrayOperation
													r.summary = ""
													r.operationID = "test_response_string_password_nullable_array"
													r.pathPattern = "/test_response_string_password_nullable_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestResponseStringPasswordNullableArrayArrayOperation
														r.summary = ""
														r.operationID = "test_response_string_password_nullable_array_array"
														r.pathPattern = "/test_response_string_password_nullable_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										}

									}

								}

							case 't': // Prefix: "time"

								if l := len("time"); len(elem) >= l && elem[0:l] == "time" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = TestResponseStringTimeOperation
										r.summary = ""
										r.operationID = "test_response_string_time"
										r.pathPattern = "/test_response_string_time"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '_': // Prefix: "_"

									if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "array"

										if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestResponseStringTimeArrayOperation
												r.summary = ""
												r.operationID = "test_response_string_time_array"
												r.pathPattern = "/test_response_string_time_array"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch method {
												case "POST":
													r.name = TestResponseStringTimeArrayArrayOperation
													r.summary = ""
													r.operationID = "test_response_string_time_array_array"
													r.pathPattern = "/test_response_string_time_array_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}

										}

									case 'n': // Prefix: "nullable"

										if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestResponseStringTimeNullableOperation
												r.summary = ""
												r.operationID = "test_response_string_time_nullable"
												r.pathPattern = "/test_response_string_time_nullable"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_array"

											if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseStringTimeNullableArrayOperation
													r.summary = ""
													r.operationID = "test_response_string_time_nullable_array"
													r.pathPattern = "/test_response_string_time_nullable_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestResponseStringTimeNullableArrayArrayOperation
														r.summary = ""
														r.operationID = "test_response_string_time_nullable_array_array"
														r.pathPattern = "/test_response_string_time_nullable_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										}

									}

								}

							case 'u': // Prefix: "u"

								if l := len("u"); len(elem) >= l && elem[0:l] == "u" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'i': // Prefix: "int"

									if l := len("int"); len(elem) >= l && elem[0:l] == "int" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestResponseStringUintOperation
											r.summary = ""
											r.operationID = "test_response_string_uint"
											r.pathPattern = "/test_response_string_uint"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '1': // Prefix: "16"

										if l := len("16"); len(elem) >= l && elem[0:l] == "16" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestResponseStringUint16Operation
												r.summary = ""
												r.operationID = "test_response_string_uint16"
												r.pathPattern = "/test_response_string_uint16"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseStringUint16ArrayOperation
														r.summary = ""
														r.operationID = "test_response_string_uint16_array"
														r.pathPattern = "/test_response_string_uint16_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestResponseStringUint16ArrayArrayOperation
															r.summary = ""
															r.operationID = "test_response_string_uint16_array_array"
															r.pathPattern = "/test_response_string_uint16_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseStringUint16NullableOperation
														r.summary = ""
														r.operationID = "test_response_string_uint16_nullable"
														r.pathPattern = "/test_response_string_uint16_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestResponseStringUint16NullableArrayOperation
															r.summary = ""
															r.operationID = "test_response_string_uint16_nullable_array"
															r.pathPattern = "/test_response_string_uint16_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestResponseStringUint16NullableArrayArrayOperation
																r.summary = ""
																r.operationID = "test_response_string_uint16_nullable_array_array"
																r.pathPattern = "/test_response_string_uint16_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												}

											}

										}

									case '3': // Prefix: "32"

										if l := len("32"); len(elem) >= l && elem[0:l] == "32" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestResponseStringUint32Operation
												r.summary = ""
												r.operationID = "test_response_string_uint32"
												r.pathPattern = "/test_response_string_uint32"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseStringUint32ArrayOperation
														r.summary = ""
														r.operationID = "test_response_string_uint32_array"
														r.pathPattern = "/test_response_string_uint32_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestResponseStringUint32ArrayArrayOperation
															r.summary = ""
															r.operationID = "test_response_string_uint32_array_array"
															r.pathPattern = "/test_response_string_uint32_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseStringUint32NullableOperation
														r.summary = ""
														r.operationID = "test_response_string_uint32_nullable"
														r.pathPattern = "/test_response_string_uint32_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestResponseStringUint32NullableArrayOperation
															r.summary = ""
															r.operationID = "test_response_string_uint32_nullable_array"
															r.pathPattern = "/test_response_string_uint32_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestResponseStringUint32NullableArrayArrayOperation
																r.summary = ""
																r.operationID = "test_response_string_uint32_nullable_array_array"
																r.pathPattern = "/test_response_string_uint32_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												}

											}

										}

									case '6': // Prefix: "64"

										if l := len("64"); len(elem) >= l && elem[0:l] == "64" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestResponseStringUint64Operation
												r.summary = ""
												r.operationID = "test_response_string_uint64"
												r.pathPattern = "/test_response_string_uint64"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseStringUint64ArrayOperation
														r.summary = ""
														r.operationID = "test_response_string_uint64_array"
														r.pathPattern = "/test_response_string_uint64_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestResponseStringUint64ArrayArrayOperation
															r.summary = ""
															r.operationID = "test_response_string_uint64_array_array"
															r.pathPattern = "/test_response_string_uint64_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseStringUint64NullableOperation
														r.summary = ""
														r.operationID = "test_response_string_uint64_nullable"
														r.pathPattern = "/test_response_string_uint64_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestResponseStringUint64NullableArrayOperation
															r.summary = ""
															r.operationID = "test_response_string_uint64_nullable_array"
															r.pathPattern = "/test_response_string_uint64_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestResponseStringUint64NullableArrayArrayOperation
																r.summary = ""
																r.operationID = "test_response_string_uint64_nullable_array_array"
																r.pathPattern = "/test_response_string_uint64_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												}

											}

										}

									case '8': // Prefix: "8"

										if l := len("8"); len(elem) >= l && elem[0:l] == "8" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "POST":
												r.name = TestResponseStringUint8Operation
												r.summary = ""
												r.operationID = "test_response_string_uint8"
												r.pathPattern = "/test_response_string_uint8"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '_': // Prefix: "_"

											if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'a': // Prefix: "array"

												if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseStringUint8ArrayOperation
														r.summary = ""
														r.operationID = "test_response_string_uint8_array"
														r.pathPattern = "/test_response_string_uint8_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestResponseStringUint8ArrayArrayOperation
															r.summary = ""
															r.operationID = "test_response_string_uint8_array_array"
															r.pathPattern = "/test_response_string_uint8_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											case 'n': // Prefix: "nullable"

												if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseStringUint8NullableOperation
														r.summary = ""
														r.operationID = "test_response_string_uint8_nullable"
														r.pathPattern = "/test_response_string_uint8_nullable"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestResponseStringUint8NullableArrayOperation
															r.summary = ""
															r.operationID = "test_response_string_uint8_nullable_array"
															r.pathPattern = "/test_response_string_uint8_nullable_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestResponseStringUint8NullableArrayArrayOperation
																r.summary = ""
																r.operationID = "test_response_string_uint8_nullable_array_array"
																r.pathPattern = "/test_response_string_uint8_nullable_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												}

											}

										}

									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseStringUintArrayOperation
													r.summary = ""
													r.operationID = "test_response_string_uint_array"
													r.pathPattern = "/test_response_string_uint_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestResponseStringUintArrayArrayOperation
														r.summary = ""
														r.operationID = "test_response_string_uint_array_array"
														r.pathPattern = "/test_response_string_uint_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseStringUintNullableOperation
													r.summary = ""
													r.operationID = "test_response_string_uint_nullable"
													r.pathPattern = "/test_response_string_uint_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseStringUintNullableArrayOperation
														r.summary = ""
														r.operationID = "test_response_string_uint_nullable_array"
														r.pathPattern = "/test_response_string_uint_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestResponseStringUintNullableArrayArrayOperation
															r.summary = ""
															r.operationID = "test_response_string_uint_nullable_array_array"
															r.pathPattern = "/test_response_string_uint_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											}

										}

									}

								case 'n': // Prefix: "nix"

									if l := len("nix"); len(elem) >= l && elem[0:l] == "nix" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestResponseStringUnixOperation
											r.summary = ""
											r.operationID = "test_response_string_unix"
											r.pathPattern = "/test_response_string_unix"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '-': // Prefix: "-"

										if l := len("-"); len(elem) >= l && elem[0:l] == "-" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'm': // Prefix: "mi"

											if l := len("mi"); len(elem) >= l && elem[0:l] == "mi" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'c': // Prefix: "cro"

												if l := len("cro"); len(elem) >= l && elem[0:l] == "cro" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseStringUnixMicroOperation
														r.summary = ""
														r.operationID = "test_response_string_unix-micro"
														r.pathPattern = "/test_response_string_unix-micro"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_"

													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"

														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestResponseStringUnixMicroArrayOperation
																r.summary = ""
																r.operationID = "test_response_string_unix-micro_array"
																r.pathPattern = "/test_response_string_unix-micro_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch method {
																case "POST":
																	r.name = TestResponseStringUnixMicroArrayArrayOperation
																	r.summary = ""
																	r.operationID = "test_response_string_unix-micro_array_array"
																	r.pathPattern = "/test_response_string_unix-micro_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}

														}

													case 'n': // Prefix: "nullable"

														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestResponseStringUnixMicroNullableOperation
																r.summary = ""
																r.operationID = "test_response_string_unix-micro_nullable"
																r.pathPattern = "/test_response_string_unix-micro_nullable"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	r.name = TestResponseStringUnixMicroNullableArrayOperation
																	r.summary = ""
																	r.operationID = "test_response_string_unix-micro_nullable_array"
																	r.pathPattern = "/test_response_string_unix-micro_nullable_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
															switch elem[0] {
															case '_': // Prefix: "_array"

																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch method {
																	case "POST":
																		r.name = TestResponseStringUnixMicroNullableArrayArrayOperation
																		r.summary = ""
																		r.operationID = "test_response_string_unix-micro_nullable_array_array"
																		r.pathPattern = "/test_response_string_unix-micro_nullable_array_array"
																		r.args = args
																		r.count = 0
																		return r, true
																	default:
																		return
																	}
																}

															}

														}

													}

												}

											case 'l': // Prefix: "lli"

												if l := len("lli"); len(elem) >= l && elem[0:l] == "lli" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseStringUnixMilliOperation
														r.summary = ""
														r.operationID = "test_response_string_unix-milli"
														r.pathPattern = "/test_response_string_unix-milli"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_"

													if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														break
													}
													switch elem[0] {
													case 'a': // Prefix: "array"

														if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestResponseStringUnixMilliArrayOperation
																r.summary = ""
																r.operationID = "test_response_string_unix-milli_array"
																r.pathPattern = "/test_response_string_unix-milli_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch method {
																case "POST":
																	r.name = TestResponseStringUnixMilliArrayArrayOperation
																	r.summary = ""
																	r.operationID = "test_response_string_unix-milli_array_array"
																	r.pathPattern = "/test_response_string_unix-milli_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}

														}

													case 'n': // Prefix: "nullable"

														if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestResponseStringUnixMilliNullableOperation
																r.summary = ""
																r.operationID = "test_response_string_unix-milli_nullable"
																r.pathPattern = "/test_response_string_unix-milli_nullable"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																switch method {
																case "POST":
																	r.name = TestResponseStringUnixMilliNullableArrayOperation
																	r.summary = ""
																	r.operationID = "test_response_string_unix-milli_nullable_array"
																	r.pathPattern = "/test_response_string_unix-milli_nullable_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}
															switch elem[0] {
															case '_': // Prefix: "_array"

																if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																	elem = elem[l:]
																} else {
																	break
																}

																if len(elem) == 0 {
																	// Leaf node.
																	switch method {
																	case "POST":
																		r.name = TestResponseStringUnixMilliNullableArrayArrayOperation
																		r.summary = ""
																		r.operationID = "test_response_string_unix-milli_nullable_array_array"
																		r.pathPattern = "/test_response_string_unix-milli_nullable_array_array"
																		r.args = args
																		r.count = 0
																		return r, true
																	default:
																		return
																	}
																}

															}

														}

													}

												}

											}

										case 'n': // Prefix: "nano"

											if l := len("nano"); len(elem) >= l && elem[0:l] == "nano" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseStringUnixNanoOperation
													r.summary = ""
													r.operationID = "test_response_string_unix-nano"
													r.pathPattern = "/test_response_string_unix-nano"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestResponseStringUnixNanoArrayOperation
															r.summary = ""
															r.operationID = "test_response_string_unix-nano_array"
															r.pathPattern = "/test_response_string_unix-nano_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestResponseStringUnixNanoArrayArrayOperation
																r.summary = ""
																r.operationID = "test_response_string_unix-nano_array_array"
																r.pathPattern = "/test_response_string_unix-nano_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestResponseStringUnixNanoNullableOperation
															r.summary = ""
															r.operationID = "test_response_string_unix-nano_nullable"
															r.pathPattern = "/test_response_string_unix-nano_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestResponseStringUnixNanoNullableArrayOperation
																r.summary = ""
																r.operationID = "test_response_string_unix-nano_nullable_array"
																r.pathPattern = "/test_response_string_unix-nano_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch method {
																case "POST":
																	r.name = TestResponseStringUnixNanoNullableArrayArrayOperation
																	r.summary = ""
																	r.operationID = "test_response_string_unix-nano_nullable_array_array"
																	r.pathPattern = "/test_response_string_unix-nano_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}

														}

													}

												}

											}

										case 's': // Prefix: "seconds"

											if l := len("seconds"); len(elem) >= l && elem[0:l] == "seconds" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseStringUnixSecondsOperation
													r.summary = ""
													r.operationID = "test_response_string_unix-seconds"
													r.pathPattern = "/test_response_string_unix-seconds"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_"

												if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'a': // Prefix: "array"

													if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestResponseStringUnixSecondsArrayOperation
															r.summary = ""
															r.operationID = "test_response_string_unix-seconds_array"
															r.pathPattern = "/test_response_string_unix-seconds_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															// Leaf node.
															switch method {
															case "POST":
																r.name = TestResponseStringUnixSecondsArrayArrayOperation
																r.summary = ""
																r.operationID = "test_response_string_unix-seconds_array_array"
																r.pathPattern = "/test_response_string_unix-seconds_array_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}

													}

												case 'n': // Prefix: "nullable"

													if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														switch method {
														case "POST":
															r.name = TestResponseStringUnixSecondsNullableOperation
															r.summary = ""
															r.operationID = "test_response_string_unix-seconds_nullable"
															r.pathPattern = "/test_response_string_unix-seconds_nullable"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}
													switch elem[0] {
													case '_': // Prefix: "_array"

														if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
															elem = elem[l:]
														} else {
															break
														}

														if len(elem) == 0 {
															switch method {
															case "POST":
																r.name = TestResponseStringUnixSecondsNullableArrayOperation
																r.summary = ""
																r.operationID = "test_response_string_unix-seconds_nullable_array"
																r.pathPattern = "/test_response_string_unix-seconds_nullable_array"
																r.args = args
																r.count = 0
																return r, true
															default:
																return
															}
														}
														switch elem[0] {
														case '_': // Prefix: "_array"

															if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
																elem = elem[l:]
															} else {
																break
															}

															if len(elem) == 0 {
																// Leaf node.
																switch method {
																case "POST":
																	r.name = TestResponseStringUnixSecondsNullableArrayArrayOperation
																	r.summary = ""
																	r.operationID = "test_response_string_unix-seconds_nullable_array_array"
																	r.pathPattern = "/test_response_string_unix-seconds_nullable_array_array"
																	r.args = args
																	r.count = 0
																	return r, true
																default:
																	return
																}
															}

														}

													}

												}

											}

										}

									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseStringUnixArrayOperation
													r.summary = ""
													r.operationID = "test_response_string_unix_array"
													r.pathPattern = "/test_response_string_unix_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestResponseStringUnixArrayArrayOperation
														r.summary = ""
														r.operationID = "test_response_string_unix_array_array"
														r.pathPattern = "/test_response_string_unix_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseStringUnixNullableOperation
													r.summary = ""
													r.operationID = "test_response_string_unix_nullable"
													r.pathPattern = "/test_response_string_unix_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseStringUnixNullableArrayOperation
														r.summary = ""
														r.operationID = "test_response_string_unix_nullable_array"
														r.pathPattern = "/test_response_string_unix_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestResponseStringUnixNullableArrayArrayOperation
															r.summary = ""
															r.operationID = "test_response_string_unix_nullable_array_array"
															r.pathPattern = "/test_response_string_unix_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											}

										}

									}

								case 'r': // Prefix: "ri"

									if l := len("ri"); len(elem) >= l && elem[0:l] == "ri" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestResponseStringURIOperation
											r.summary = ""
											r.operationID = "test_response_string_uri"
											r.pathPattern = "/test_response_string_uri"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseStringURIArrayOperation
													r.summary = ""
													r.operationID = "test_response_string_uri_array"
													r.pathPattern = "/test_response_string_uri_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestResponseStringURIArrayArrayOperation
														r.summary = ""
														r.operationID = "test_response_string_uri_array_array"
														r.pathPattern = "/test_response_string_uri_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseStringURINullableOperation
													r.summary = ""
													r.operationID = "test_response_string_uri_nullable"
													r.pathPattern = "/test_response_string_uri_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseStringURINullableArrayOperation
														r.summary = ""
														r.operationID = "test_response_string_uri_nullable_array"
														r.pathPattern = "/test_response_string_uri_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestResponseStringURINullableArrayArrayOperation
															r.summary = ""
															r.operationID = "test_response_string_uri_nullable_array_array"
															r.pathPattern = "/test_response_string_uri_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											}

										}

									}

								case 'u': // Prefix: "uid"

									if l := len("uid"); len(elem) >= l && elem[0:l] == "uid" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = TestResponseStringUUIDOperation
											r.summary = ""
											r.operationID = "test_response_string_uuid"
											r.pathPattern = "/test_response_string_uuid"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '_': // Prefix: "_"

										if l := len("_"); len(elem) >= l && elem[0:l] == "_" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "array"

											if l := len("array"); len(elem) >= l && elem[0:l] == "array" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseStringUUIDArrayOperation
													r.summary = ""
													r.operationID = "test_response_string_uuid_array"
													r.pathPattern = "/test_response_string_uuid_array"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = TestResponseStringUUIDArrayArrayOperation
														r.summary = ""
														r.operationID = "test_response_string_uuid_array_array"
														r.pathPattern = "/test_response_string_uuid_array_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}

											}

										case 'n': // Prefix: "nullable"

											if l := len("nullable"); len(elem) >= l && elem[0:l] == "nullable" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												switch method {
												case "POST":
													r.name = TestResponseStringUUIDNullableOperation
													r.summary = ""
													r.operationID = "test_response_string_uuid_nullable"
													r.pathPattern = "/test_response_string_uuid_nullable"
													r.args = args
													r.count = 0
													return r, true
												default:
													return
												}
											}
											switch elem[0] {
											case '_': // Prefix: "_array"

												if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													switch method {
													case "POST":
														r.name = TestResponseStringUUIDNullableArrayOperation
														r.summary = ""
														r.operationID = "test_response_string_uuid_nullable_array"
														r.pathPattern = "/test_response_string_uuid_nullable_array"
														r.args = args
														r.count = 0
														return r, true
													default:
														return
													}
												}
												switch elem[0] {
												case '_': // Prefix: "_array"

													if l := len("_array"); len(elem) >= l && elem[0:l] == "_array" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = TestResponseStringUUIDNullableArrayArrayOperation
															r.summary = ""
															r.operationID = "test_response_string_uuid_nullable_array_array"
															r.pathPattern = "/test_response_string_uuid_nullable_array_array"
															r.args = args
															r.count = 0
															return r, true
														default:
															return
														}
													}

												}

											}

										}

									}

								}

							}

						}

					}

				}

			}

		}
	}
	return r, false
}
